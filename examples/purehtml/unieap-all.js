(function(){
	
	//解决在dojo1.3在frame里，刷新IE出现内存泄漏的问题
	//window的事件列表
	if(/^1\.3\./.test(dojo.version)){ //dojo 1.3
		var winEvtList = [
			"onactivate",
			"onafterprint",
			"onbeforedeactivate",
			"onbeforeprint",
			"onbeforeunload",
			"onblur",
			"oncontrolselect",
			"ondeactivate",
			"onerror",
			"onfocus",
			"onhelp",
			"onload",
			"onmove",
			"onmoveend",
			"onmovestart",
			"onresize",
			"onresizeend",
			"onresizestart",
			"onscroll", 
			"onunload" 
		];	
		var _orginUnLoad = window.onunload;
		window.onunload = function(){
			_orginUnLoad && _orginUnLoad();
			for(var i=0,l=winEvtList.length;i<l;i++){
				var name = winEvtList[i];
				window[name] = null;
			}		
		}
	}
	
	/**
	 * @summary:
	 * 		dojo.mixin(target,source)方法处理两个在不同window空间的对象时,source的
	 * 		constructor会覆盖target的constructor。dojo 2.0会修正这个问题。
	 * 默认的原型方法如下(见bootrap.js中dojo._extraNames)
	 *	dojo._extraNames = extraNames = extraNames ||
	 *	    ["hasOwnProperty", "valueOf", "isPrototypeOf",
	 *		"propertyIsEnumerable", "toLocaleString", "toString", "constructor"];
	*/
	if(/^1\.[4-9]\./.test(dojo.version)){ //dojo 1.4
		dojo._extraNames.length>0&&dojo._extraNames.pop()&&dojo._extraNames.push("propertyIsEnumerable");
	}
	
	/**
	 * @summary:
	 * 		 单帧框架下，快速打开两个菜单，第2个菜单的addOnLoad操作执行时机错误，
	 * 		 由于dojo的采用setTimeOut定时器去设置dojo._postLoad标识，导致第2个菜
	 *       	 单中的脚本在执行时，错误认为dojo._postLoad = true，所以立马执行addOnLoad操作
	 *                  将定时器的逻辑去掉
	 */
	dojo._callLoaded = function(){
		var d = dojo;
		// The "object" check is for IE, and the other opera check fixes an
		// issue in Opera where it could not find the body element in some
		// widget test cases.  For 0.9, maybe route all browsers through the
		// setTimeout (need protection still for non-browser environments
		// though). This might also help the issue with FF 2.0 and freezing
		// issues where we try to do sync xhr while background css images are
		// being loaded (trac #2572)? Consider for 0.9.
		if(typeof setTimeout == "object" || (d.config.useXDomain && d.isOpera)){
			d.isAIR ? d.loaded() : eval(d._scopeName + ".loaded();");	
		}else{
			d.loaded();
		}
	}
	
	dojo.config.deferredOnError = function(e) {
		console.error(e);
		if(e.name === "dojoParseError"){
			throw(e);
		}
	}
/*
var isIE =function(){
		var undef,rv = -1; // Return value assumes failure.
		var ua = window.navigator.userAgent;
		var msie = ua.indexOf('MSIE ');
		var trident = ua.indexOf('Trident/');

		if (msie > 0) {
			// IE 10 or older => return version number
			rv = parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
		} else if (trident > 0) {
			// IE 11 (or newer) => return version number
			var rvNum = ua.indexOf('rv:');
			rv = parseInt(ua.substring(rvNum + 3, ua.indexOf('.', rvNum)), 10);
		}

		return ((rv > -1) ? rv : undef);
	}
	dojo.isIE = isIE();
	*/
	//这三个is...家族的函数是克服iframe中切换window对象时结果混乱的问题
	
	dojo.isFunction = function(it){
		return Object.prototype.toString.call(it) == "[object Function]";
	}
	
	dojo.isString = function(it){
		return Object.prototype.toString.call(it) == "[object String]";
	}

	dojo.isArray = function(it){
		return Object.prototype.toString.call(it) == "[object Array]";
	}
	
})();

dojo.provide("unieap.global");
	/**
	 * @declaredClass: unieap.global
	 * @summary: 定义全局变量，用户可以修改里面的参数
	 */

if(!unieap){
	//unieap={};
}

if(!unieap.global){
	unieap.global={};
}
// 版本号
unieap.version = '6.2';
// dojo.destroy = function(node){
// if(node) {
// dojo._destroyElement(node);
// }
// }
/**
 * @summary: 根据id获取组件方法
 * @param： {string} id 组件在页面上的唯一标识
 * @param: {domNode} rootNode 控件所在的上下文节点
 * @example: | var widget = unieap.byId("grid");
 */
unieap.byId=function(id,rootNode){
// if(dojo.isString(id)){
// var framePageContainer=document.getElementById("framePageContainer");
// var visible =
// dojo.query(".unieap-container.unieapVisible",framePageContainer);
//		
// if(visible[0]){
// id = visible[0].id + id;
// }
//	
// }
	if(!dijit) return null;
	var contextId =rootNode?rootNode.id:"";
	return dijit.byId(contextId ? contextId+id : id);
}

// 获取单帧下，每个页面唯一的datacenter，如果没找到，就返回全局的
// 兼容单帧和非单帧
unieap.getDataCenter = function(){
	if(typeof(_currentNodeOfSingleFrame) != "undefined" && _currentNodeOfSingleFrame != null && typeof(viewContextHolder) != "undefined" && viewContextHolder != null){
		if(viewContextHolder[_currentNodeOfSingleFrame.id]){
			return viewContextHolder[_currentNodeOfSingleFrame.id].dataCenter;
		}   	
  }
  return window.dataCenter;	
}
unieap.destroyDialogAndMenu = function(pane){
	if(!pane) return;
	var widgets = dojo.query("> [widgetId]",document.body).map(dijit.byNode);
	dojo.forEach(widgets,function(widget){
		if(widget){

			if(pane.dialog && (widget.id in pane.dialog)){
				widget.domNode && unieap.destroyWidgets(widget.domNode)
				widget.destroy && widget.destroy();
			}
			else if(pane.menu && (widget.id in pane.menu)){
				widget.destroy && widget.destroy();
				delete pane.menu[widget.id];
			}
			else if (widget.id.indexOf(pane.id)==0){
				// Add by Chenty, 根据 rootId 卸载相应的 Dialog
				widget.domNode && unieap.destroyWidgets(widget.domNode)
				widget.destroy && widget.destroy();
			}
		}
	});
	for(menuId in pane.menu){
		if(unieap.byId(menuId)){
			var menu = unieap.byId(menuId);
			if(menu.declaredClass=="unieap.menu.Menu"&&!menu.isSystemMenu)
				menu.destroy();
		}
	}
}

unieap.clearHelpSubscribe = function(pane){
	var win = pane.getContentWindow();
	if( win && win.dijit && win.dijit.byId){
		var navigatorContainerHelpInfo = win.dijit.byId("navigatorContainerHelpInfo");
		if(navigatorContainerHelpInfo){
			dojo.forEach(navigatorContainerHelpInfo.navigatorSubscribe, unieap.getTopWin().dojo.unsubscribe);
		}
	}
}

/**
 * @summary: 根据id和上下文来销毁控件
 * @param {String}
 *            id 要销毁的控件id
 * @param {domNode}
 *            context 控件所在的上下文节点
 */
unieap.destroyWidget=function(id,rootNode){
	if(!dijit) return;
	var contextId =rootNode?rootNode.id:"";
	var widget=dijit.byId(contextId ? contextId+id : id);
	widget && widget.destroy && widget.destroy();
}

// @summary: 删除context上下文中的所有widget控件
// @param: {String} context
 
function destroyxhrWidget(xhrNodeId){
	var id = xhrNodeId,
			viewContext = viewContextHolder[id];
		if(viewContext){
			dojo.forEach(viewContext.instances,function(elem){
				var instanceName = elem[0];
				var instance = elem[1];
				var _scribeHandles = instance._scribeHandles
				if(_scribeHandles){
					for(var index = 0;index < _scribeHandles.length;index++){
						unieap.unsubscribe(_scribeHandles[index]);
					}
				}
				instance.page_unload && instance.page_unload();
				window[elem[0]] = null;
				if(instance.initData){
					instance.initData = null;
				}
				var dc = instance.dataCenter;
				if(dc){
				for(ds in dc.dataStores){
					dc.dataStores[ds] = null;
					}
				}
				instance.dataCenter=null;
				instance.rootNode=null;
				instance = null;
			});
			viewContext.dataCenter 
				&& viewContext.dataCenter.clear 
				&& viewContext.dataCenter.clear();
			viewContext.dataCenter = null;
			viewContext.instances = null;
			viewContext.rootNode = null;
			viewContext.topics = null;
			viewContext=null;
			delete viewContextHolder[id];
		}
		//如果存在unieapViewContextHolder，在单帧下销毁节点时，需要删除对应内容
		if(typeof(unieapViewContextHolder) != "undefined"){
			if(unieapViewContextHolder[id]){
				delete unieapViewContextHolder[id];
			}
		}
}

/**
 * @summary: 删除context上下文中的所有widget控件
 * @param: {String} context
 */
unieap.destroyWidgets=function(rootNode){
	if(!dijit  || !rootNode) return;
	var widgets = dojo.query("[widgetId]",rootNode).map(dijit.byNode),
		rootWidget = unieap.byId(rootNode.id),
		xhrNodeIds =[],
		isXDialogLoad = (typeof(rootWidget)!="undefined")?((rootWidget.declaredClass == "unieap.xdialog.Dialog")?true:false):false;
	for(var i=widgets.length-1,widget;widget=widgets[i];i--){
		if(widget.declaredClass=="unieap.layout.ContentPane" || widget.declaredClass=="unieapx.layout.NavigatorPane"){
			if(widget.domNode.getAttribute("xhr")&&widget.id)
				xhrNodeIds.push(widget.id)
		}
		if(widget.destroy){
			widget.destroy();
			widget.destroyRecursive();
		}
		else if(widget.id){
			dijit.registry.remove(widget.id);
		}
		if(widget._viewContext){
			widget._viewContext = null;
		}
	}
	//如果是XDialog需要把它内部加载的XDialog先干掉
	if(isXDialogLoad){
		var _dialogs = rootWidget._dialogs;
		if(_dialogs && _dialogs.length > 0){
			while (_dialogs.length > 0) {
				var _dialog = _dialogs.pop();
				unieap.destroyWidgets(_dialog.containerNode);
				unieap.destroyWidget(_dialog);
			}
		}
	}
	if(xhrNodeIds.length>0){
		for(var index=0;index<xhrNodeIds.length;index++){
			destroyxhrWidget(xhrNodeIds[index]);
		}
	}
	var xhr = rootNode.getAttribute("xhr");
	if(xhr){
		destroyxhrWidget(rootNode.getAttribute("id"));
		rootNode.removeAttribute("xhr");
		var context = "default";
		if(viewContextHolder[context]){
			viewContextHolder[context].dataCenter = null;
		}
		// 如果是XDialog方式加载的话，需要从数组中弹出上一个节点，肯定数组当中至少有两个节点
		if(isXDialogLoad && typeof(_currentNodesOfSingleFrame) != "undefined" && _currentNodesOfSingleFrame.length > 1){
			_currentNodesOfSingleFrame.pop();
			_currentNodeOfSingleFrame = _currentNodesOfSingleFrame[_currentNodesOfSingleFrame.length - 1];
			var viewContext = viewContextHolder[_currentNodeOfSingleFrame.id];
			if(typeof(viewContext) != "undefined" && viewContext != null){
				_restoreCurrentViewContext(viewContext);
			}
		}
	}
	
	dojo.isIE && CollectGarbage();
}


/**
 * @summary: 重新登陆dialog弹出高度
 * @description: 没有校验码时，高度为270；有校验码时，高度为330
 * @type: string
 * @default: 270
 */

unieap.reloginDialogHeight = "270";

/**
 * @summary: 新旧菜单切换标识
 * @description: 当为true时，生成菜单代码为新菜单框架
 * @type: {boolean}
 * @default: true
 */

unieap.bootstrapMenu = true;

/**
 * @summary: 是否使用了旧的消息提醒后台代码
 * @description: 当为false时，使用了新的消息提醒后台代码
 * @type: {boolean}
 * @default: false
 */

unieap.oldInfoTipPush = false;

/**
 * @summary: 【新消息】闪烁时间
 * @description: 【新消息】闪烁多长时间消失，单位为毫秒
 * @type: {number}
 * @default: 15000
 */

unieap.newInfoTipTime = 15000;


unieap.helpTipMode = false;


/**
 * @summary: 表格分页默认
 * @description: 表格分页默认值
 * @type: {arr}
 * @default: [-1,5,10,20,50,100,200,500]   -1标识全部
 */
unieap.defaultPageSize = [5,10,20,50,100,200,500,5000]

/**
 * @summary: 设置事件方法中this指针的上下文
 * @description: 当为true时，可在单帧菜单框架下使用，在用户自定义事件中this指针代码自身js闭包的空间；当为false时，在用户自定义事件中this指向被点击控件；
 * @type: {boolean}
 * @default: false
 */
unieap.isXHR = false;

/**
 * @summary: 设置是否支持RIA的页面调试工具
 * @description: 当为true时，通过快捷键Alt + X 可以调试当前页面dataCenter对象，为false没有此功能
 * @type: {boolean}
 * @default: true
 */
unieap.isDebug = true;
/**
 * @summary: 设置是否使用客户端缓存
 * @type: {boolean}
 * @default: false
 */
unieap.global.isUseClientCache = true;

/**
 * @summary: 设置汉字所占字节
 * @type: {number}
 * @default: 1
 */
unieap.global.bitsOfOneChinese=1;

/**
 * @summary: 社保定制，View.js中提供的增删改查的方法不刷新DataStore状态
 * @type: {boolean}
 * @default: false
 */
unieap.global.notResetUpdate=true;

/**
 * @summary: 社保定制，readonly是否弹出下拉框
 * @type: {boolean}
 * @default: false
 */
unieap.global.combobox_notReadonlyPopup=false;
unieap.global.comboboxtree_notReadonlyPopup=false;
unieap.global.datatextbox_notReadonlyPopup=false;
unieap.global.textboxwithicon_notReadonlyPopup=false;

/**
 * @summary: 社保定制，setValue时是否校验，如果校验会对性能有影响
 * @type: {boolean}
 * @default: false
 */
 unieap.global.validateOnSetValue=false;

/**
 * @summary: 数据收集默认策略
 * @type: {object}
 * @default: {parameters:"all",dataStores:"all"}
 */
unieap.global.dataOption={parameters:"all",dataStores:"all"};

/**
 * @summary: grid自动分页请求url
 * @type: {string}
 * @default: "/techcomp/ria/pageQueryAction!commonMethod.action"
 */
unieap.global.gridServerPagingUrl = "/techcomp/ria/commonProcessor";

/**
 * @summary: unieap.Action.requestData 默认超时时间
 * @type: {int}
 * @default: 60 * 120
 */
unieap.global.timeout = 120*1000;
/**
 * @summary: 数据类型
 * @description: 数据类型与java.sql.Types数据类型一致
 * @type: {object}
 * @default: 无
 */
unieap.DATATYPES={
		TINYINT : -6,
	 	SMALLINT : 5,
	 	INTEGER : 4,
  		BIGINT : -5,
  		FLOAT : 6,
  		REAL : 7,
  		DOUBLE : 8,
  		NUMERIC : 2,
  		DECIMAL : 3,
  		VARCHAR : 12,
		STRING : 12,
        LONGVARCHAR : -1,
		DATE : 91,
  		TIME : 92,
		TIMESTAMP : 93,
   		BOOLEAN : 16
};

unieap.session = {
	// Ajax请求返回的超时的标记
	timeout : "<!-- THE-NODE-OF-SESSION-TIMEOUT -->",
	// 登陆成功
	reloginSuccessful:"THE-NODE-OF-RELOGIN-SUCCESSFUL",
	/**
	 * @summary: 是否用Dialog重新登陆
	 * @type: {boolean}
	 */
	dialogRelogin : true
};

/**
 * @summary: 录制脚本统一开关
 * @type: {boolean}
 * @default: false
 */
unieap.recordScript = false;
//用于v4录制脚本
unieap.scriptCount = 0;
//用于v4录制脚本
unieap.scriptDQ = [];
//用于v4录制脚本
unieap.recordScriptMap = {};

/**
 * @summary: 帮助组件统一开关
 * @type: {boolean}
 * @default: true
 */
unieap.helpOpen = true;


//用于v4
unieap.account = {
		//帐号被踢出的标记
		kicked : "<!-- THE-NODE-OF-ACCOUNT-KICKED -->"
	};

unieap.relogin = "/techcomp/security/relogin.jsp";
	
/**
 * @summary: 动画统一开关
 * @type: {boolean}
 * @default: true
 */
unieap.animate = false;

unieap.defaultCacheDBName = "com_viewhigh_VADP_clientCache_"; 

unieap.widget={
	
	/**
	 * @summary: 是否在Form和Grid进行主动校验时自动提示错误信息
	 * @type: {boolean}
	 * @default: false
	 */
	errorPrompt:false,
	
	AdvancedQuery:{
		/**
		 * @summary: 是否提供保存查询记录功能
		 * @type: {boolean}
		 * @default: false
		 */
		saveEnable:false
	},
	
	//U_EAP00028721
	layout:{
		//是否为报表定义的类titlePane样式 默认false（border本来的颜色）
		borderPaneReportStyle : false,
		//borderContainer是否不显示边框 默认true（无边框）
		borderContainerNoBorder : true
	},
	
	navigator:{
		/**
		 * @summary: 设置是否使用导航回调函数
		 * @type: {boolean}
		 * @default: false
		 */
		onCompleteByClick : false,
		/**
		 * @summary: 导航条是否默认显示
		 * @type: {boolean}
		 * @default: true
		 * @description： 导航在只有一个导航页的时候是否显示导航条
		 */
		alwaysShowNavigator: true,
		/**
		 * @summary: 导航条是否显示
		 * @type: {boolean}
		 * @default: true
		 * @description： 设置成false后导航条不显示，导航的功能还会有效
		 */
		showNavigator: true
	},
	tree:{
		/**
		 * @summary: 树节点是否严格区分单击和双击事件，【注】严格区分时单击执行会有300毫秒的延迟
		 * @type: {boolean}
		 * @default: false
		 */
		distinguishDblclick : false,
		
		/**
		 * @summary: 点击节点展现节点树的开关
		 * @type: {boolean}
		 * @default: true
		 */
		expandByOnClickLabel : false
	},
	
	grid:{
		/**
		 * @summary: 是否总是在grid的表头上显示菜单按钮(点击按钮就会弹出菜单)
		 * @type: {boolean}
		 */
		alwaysShowMenu : false,
		
		/**
		 * @summary: grid和xgrid是否严格区分行的单击和双击事件，【注】严格区分时单击执行会有300毫秒的延迟
		 * @type: {boolean}
		 * @default: false
		 */
		distinguishDblclick : false,
		
		/**
		 * @summary: grid翻页时，当本页发生变化时默认采取的操作
		 * @description: discard： 不提示，不保存，翻页
		 * 
		 * saveconfirm： 根据提示进行操作 “数据发生改变，是否保存修改?” 选择确定：保存，不翻页 选择取消：不保存，翻页
		 * discardconfirm：根据提示进行操作，“数据发生改变，是否放弃修改？” 选择确定：不保存，翻页 选择取消： 不保存，不翻页
		 * @type: {string}
		 * @enum: {"discard"|"saveconfirm"|"discardconfirm"}
		 */
		pagingModifiedSave : "discard",
		
		/**
		 * @summary: grid 的默认编辑模式
		 * @type: {string}
		 * @enum: {"rowEdit"|"cellEdit"|"readonly"}
		 * @description： xgrid目前只支持rowEdit
		 * 
		 */
		editType : "readonly",
			
		/**
		 * @summary: 设置grid是否单击触发编辑
		 * @type: {boolean}
		 * @description： xgrid操作模式无需设置此属性，xgrid双击触发编辑
		 */
		singleClickEdit : false,
		
		/**
		 * @summary: 设置每页显示的数据条数
		 * @type: {boolean|array}
		 */
		userPageSize : false,
		
		/**
		 * @summary: 导出设置页面URL
		 * @type: {string}
		 */
		exportPageURL : "/techcomp/ria/gridExport-view.jsp",
		 
		/**
		 * @summary: 导入设置页面URL
		 * @type: {string}
		 */
		importPageURL : "/techcomp/ria/gridImport-view.jsp",
		/**
		 * @summary: 导入展示页面是否可编辑
		 * @type: {boolean}
		 */
		importViewEdit:false,
		 
		/**
		 * @summary: 导出文件类型  
		 * @type: {string}
		 */
		exportFileType : "excel",
		/**
		 * @summary: 导入前是否允许有错误数据  
		 * @type: {boolean}
		 */
		importError : false
		
			
	},
	form:{
		
		/**
		 * @summary： 当输入文本框内容为空并且鼠标焦点置入时,设置文本框是否显示当前时间。
		 * @type： {boolean}
		 * @default: true
		 */
		autoDate : true,
		
		
		alwaysShowErrMessage:true,
		
		/**
		 * @summary: 下拉框的显示类型，默认为list
		 * @default: "list"
		 * @type： {string}
		 * @enum： {"table"|"list"|"multi"}
		 */
		comboDisplayStyle: "list",
		
		/**
		 * @summary: 多选下拉框的弹出结构
		 * @see： unieap.form.ComboBoxPopup
		 */
		comboStructure: null,
		
		/**
		 * @summary: 是否在每个下拉框都否显示 <请选择> 列
		 * @type: {boolean}
		 * @default: false
		 */
		comboShowSelect : false,

		/**
		 * @summary: 下拉框 <请选择> 列，自定义显示
		 * @description： 下拉框 <请选择> 列，自定义显示，当comboShowSelect的值为true时有效
		 */
		comboShowSelectText : "<请选择>", // MODIFY BY TENGYF
		//comboShowSelectText : RIA_I18N.global.comboBox.choices,
		
		/**
		 * @summary: 下拉框 <请选择> 列，自定义VALUE
		 * @description： 下拉框 <请选择> 列，自定义VALUE，当comboShowSelect的值为true时有效
		 */
		comboShowSelectValue : "",
		
		/**
		 * @summary: 下拉框自动选择第一个有值的项
		 * @type： {boolean}
		 * @default： false
		 * @description： 当下拉框执行模糊查询后，按下回车键，下拉框自动赋第一个有值的项
		 */
		comboSelectFirstValue : false,
		
		/**
		 * @summary:
		 * 		设置是否显示FieldSet的提示信息
		 * @type:
		 * 		{boolean}
		 * @default:
		 * 		true
		 */	
        showTitle: true,
        
        /**
		 * @summary:
		 * 		设置是否点击日期输入框时弹出日期框
		 * @type:
		 * 		{boolean}
		 * @default:
		 * 		false
		 */	
        dataTextBoxIsClickPopup: false,
		
		/**
		 * @summary: 当焦点离开时校验输入值是否在下拉框中，如果不在清空下拉框
		 * @type： {boolean}
		 * @default： true
		 * @description： 当输入非法值时焦点离开自动清空,如果为false则添加到下拉列表中展现，并加入codelist中，但datastore中不会加入。
		 */
		textValidate : true,
		
		/**
		 * @summary: 是否开启combobox下拉框大数据量优化方案
		 * @type： {boolean}
		 * @default： true
		 * @description： 当下拉框数据很大时，默认只显示50条数据
		 */
		comboBoxPopupOptimize : true,
		
		/**
		 * @summary: 是否要保留校验的提示信息
		 * @type： {boolean}
		 * @default： true
		 * @description： 在给form进行setDataStore时，如果开发人员已经预先写好了校验提示信息，可以让其继续保留
		 */
		keepValidationMessage : true
		
	}
}

// 引入国际化文件
/* if('undefined' == typeof(RIA_I18N)){
	if('undefined' != typeof(UNIEAP_LOCALE) && (UNIEAP_LOCALE== 'zh_CN' || UNIEAP_LOCALE == 'en_US')){
		!unieap.locale&&(unieap.locale=UNIEAP_LOCALE);
		dojo.require("unieap.nls.application_"+UNIEAP_LOCALE);
	}else{
		dojo.require("unieap.nls.application_zh_CN");
	}
} */

//导出模板路径
unieap.templateExportURL = "WEB-INF/conf";

//获取当前登录人信息
unieap.getCurrentUser=function(){
	if(top&&top.app&&top.app.getCurrentUser){
		return top.app.getCurrentUser();
	}else{
		return {}
	}
}
// 定义unieap和document的包装类
function UnieapDecorate(){
}
UnieapDecorate.prototype = unieap;

function DojoDecorate(){
}
DojoDecorate.prototype =dojo;
dojo.provide("unieap.nls.application_zh_CN");

RIA_I18N={
	
		//-----------------------向导控件-----------------------------//
		wizard:{
			back: "\u4e0a\u4e00\u6b65",
			next: "\u4e0b\u4e00\u6b65",
			done: "\u5b8c\u6210",
			cancel: "\u53d6\u6d88"
		},
	
		//-----------------------表单控件-----------------------------//
		form:{
			calendar:{
				//周日
				full_Sunday : "\u5468\u65e5",
				//周一
				full_Monday : "\u5468\u4e00",
				//周二
				full_Tuesday:"\u5468\u4e8c",
				//周三
				full_Wednesday:"\u5468\u4e09",
				//周四
				full_Thursday:"\u5468\u56db",
				//周五
				full_Firday:"\u5468\u4e94",
				//周六
				full_Saturday:"\u5468\u516d",
				//日
				short_Sunday:"\u65e5",
				//一
				short_Monday:"\u4e00",
				//二
				short_Tuesday:"\u4e8c",
				//三
				short_Wednesday:"\u4e09",
				//四
				short_Thursday:"\u56db",
				//五
				short_Firday:"\u4e94",
				//六
				short_Saturday:"\u516d",
				
				//一月
				full_January:"\u4e00\u6708",
				//二月
				full_February:"\u4e8c\u6708",
				//三月
				full_March:"\u4e09\u6708",
				//四月
				full_April:"\u56db\u6708",
				//五月
				full_May:"\u4e94\u6708",
				//六月
				full_June:"\u516d\u6708",
				//七月
				full_July:"\u4e03\u6708",
				//八月
				full_August:"\u516b\u6708",
				//九月
				full_September:"\u4e5d\u6708",
				//十月
				full_October:"\u5341\u6708",
				//十一月
				full_November:"\u5341\u4e00\u6708",
				//十二月
				full_December:"\u5341\u4e8c\u6708",
				
				//一月
				short_January:"\u4e00\u6708",
				//二月
				short_February:"\u4e8c\u6708",
				//三月
				short_March:"\u4e09\u6708",
				//四月
				short_April:"\u56db\u6708",
				//五月
				short_May:"\u4e94\u6708",
				//六月
				short_June:"\u516d\u6708",
				//七月
				short_July:"\u4e03\u6708",
				//八月
				short_August:"\u516b\u6708",
				//九月
				short_September:"\u4e5d\u6708",
				//十月
				short_October:"\u5341\u6708",
				//十一月
				short_November:"\u5341\u4e00\u6708",
				//十二月
				short_December:"\u5341\u4e8c\u6708",
				
				//关于
				about :"\u5173\u4e8e",
				//上一年
				prev_year : "\u4e0a\u4e00\u5e74",
				//上个月
				prev_month: "\u4e0a\u4e2a\u6708",
				//到今天
			    go_today :"\u5230\u4eca\u5929",
			    //下个月
			    next_month:"\u4e0b\u4e2a\u6708",
			    //下一年
			    next_year:"\u4e0b\u4e00\u5e74",
			    //选择日期
			    sel_date:"\u9009\u62e9\u65e5\u671f",
			    //拖动
				drag_to_move:"\u62d6\u52a8",
				//(今天)
				part_today :"(\u4eca\u5929)",
				
				//%s为这周的第一天
				day_first:"%s\u4e3a\u8fd9\u5468\u7684\u7b2c\u4e00\u5929",
				
				//关闭
				close:"\u5173\u95ed",
				//今天
				today:"\u4eca\u5929",
				//(按着Shift键)单击或拖动改变值
				time_part:"(\u6309\u7740Shift\u952e)\u5355\u51fb\u6216\u62d6\u52a8\u6539\u53d8\u503c",
				
				def_date_format:"%Y-%m-%d",
				
				tt_date_format:"%A, %b %e\u65e5",
				
				//周
				wk:"\u5468",
				//时间：
				time:"\u65f6\u95f4:"
			},

			combobox:{
				//位于comboboxpopup文件中
				//代码值
				codeValue:"\u4ee3\u7801\u503c",
				//代码标题
				codeName:"\u4ee3\u7801\u6807\u9898"
			},
			fileinput:{
					//浏览
					browser:"\u6d4f\u89c8",
					//取消
					cancel:"\u53d6\u6d88",
					//只允许上传文件后缀名为
					fileInvalidFormer:"\u53ea\u5141\u8bb8\u4e0a\u4f20\u6587\u4ef6\u540e\u7f00\u540d\u4e3a",
					//的文件
					fileInvalidLatter:"\u7684\u6587\u4ef6",
					
					//提示信息
					info:'\u63d0\u793a\u4fe1\u606f'
			},

			form:{
					//校验提示
					validateMsg:"\u6821\u9a8c\u63d0\u793a"
			},

			formWidgetValidator:{
					//输入不合法!
					errorMsg:"\u8f93\u5165\u4e0d\u5408\u6cd5!",
					//该输入项的值不能为空！
					nullError:"\u8be5\u8f93\u5165\u9879\u7684\u503c\u4e0d\u80fd\u4e3a\u7a7a\uff01",
					//该输入项的最大长度为
					maxLengthError:"\u8be5\u8f93\u5165\u9879\u7684\u6700\u5927\u957f\u5ea6\u4e3a",
					//该输入项的最小长度为
					minLengthError:"\u8be5\u8f93\u5165\u9879\u7684\u6700\u5c0f\u957f\u5ea6\u4e3a"
			},
			
			mobilePhoneValidator:{
				//手机号码不合法!
				errorMsg:"\u624b\u673a\u53f7\u7801\u4e0d\u5408\u6cd5\u0021"
			},
			
			telephoneValidator:{
				//电话号码不合法!
				errorMsg:"\u7535\u8bdd\u53f7\u7801\u4e0d\u5408\u6cd5\u0021"
			},
			
			idCardValidator:{
				//身份证号不合法!
				errorMsg:"\u8eab\u4efd\u8bc1\u53f7\u4e0d\u5408\u6cd5\u0021"
			},
			
			emailValidator:{
				//Email不合法!
				errorMsg:"\u0045\u006d\u0061\u0069\u006c\u4e0d\u5408\u6cd5\u0021"
			},
			
			carPlateValidator:{
				//车牌号不合法!
				errorMsg:"\u8f66\u724c\u53f7\u4e0d\u5408\u6cd5\u0021"
			},
			
			dateTextBox:{
				//位于文件unieap.form.DateDisplayFormatter中，用于指定日期的默认格式
				dataFormat:"yyyy-MM-dd"
			},
			
			numberTextBox:{
				//位于unieap.form.NumberTextBoxValidator中，用于提示只能输入数字
				//该输入项只能输入数字!
				errorMsg:'\u8be5\u8f93\u5165\u9879\u53ea\u80fd\u8f93\u5165\u6570\u5b57\uff01'
			},
			textBox:{
				multilanguageTootip:'\u591a\u8bed\u8a00\u8bbe\u7f6e',
				confirmTitle:'\u786e\u8ba4\u6846',
				confirmMessage:'\u5f53\u524d\u8868\u5355\u6ca1\u6709\u6570\u636e\uff0c\u8bf7\u5148\u67e5\u8be2\u6570\u636e\u540e\u914d\u7f6e\u591a\u8bed\u8a00\u3002'
			}

		},
		
		//-----------------------数据表格控件-----------------------------//
		
		grid:{
			xtree:{
				//筛选
				filterTitle: "\u7b5b\u9009",		
				//未找到符合条件的数据
				noDataByFilter: "\u672a\u627e\u5230\u7b26\u5408\u6761\u4ef6\u7684\u6570\u636e\u3002",
				
				//查找
				locateTitle: "\u67e5\u627e",
				//未找到符合条件的数据
				noDataByLocate: "\u672a\u627e\u5230\u7b26\u5408\u6761\u4ef6\u7684\u6570\u636e\u3002"
			},
			cell:{
				//该列的formatter函数中存在错误，请检查相关的代码。
				formatterErrorMessage : '\u8be5\u5217\u7684formatter\u51fd\u6570\u4e2d\u5b58\u5728\u9519\u8bef\uff0c\u8bf7\u68c0\u67e5\u76f8\u5173\u7684\u4ee3\u7801\u3002',
				//该列的formatter函数中缺少return值，请检查相关的代码。
				formatterNoReturnValue : '\u8be5\u5217\u7684formatter\u51fd\u6570\u4e2d\u7f3a\u5c11return\u503c\uff0c\u8bf7\u68c0\u67e5\u76f8\u5173\u7684\u4ee3\u7801\u3002'
			},
			'export':{
				//导出设置
				exportSetting:"\u5bfc\u51fa\u8bbe\u7f6e",
				//全部数据导出
				serverExport:'\u5168\u90e8\u6570\u636e\u5bfc\u51fa',
				//当前页面数据导出
				clientExport:'\u5f53\u524d\u9875\u9762\u6570\u636e\u5bfc\u51fa',
				//选中记录导出
				selectedExport:'\u9009\u4e2d\u8bb0\u5f55\u5bfc\u51fa',
                                //提示信息
				info:"\u63d0\u793a\u4fe1\u606f",
				//无可导出数据，请重新设置查询条件后再导出!
				noDataByQuery :"\u65e0\u53ef\u5bfc\u51fa\u6570\u636e\uff0c\u8bf7\u91cd\u65b0\u8bbe\u7f6e\u67e5\u8be2\u6761\u4ef6\u540e\u518d\u5bfc\u51fa!",
				//无可导出数据，请先选择数据再导出!
				noDataByChoices:"\u65e0\u53ef\u5bfc\u51fa\u6570\u636e\uff0c\u8bf7\u5148\u9009\u62e9\u6570\u636e\u518d\u5bfc\u51fa!"				
			},
			'import':{
                //提示信息
				info:"\u63d0\u793a\u4fe1\u606f",
				//导入完成！
 				importSuccess:"\u5bfc\u5165\u6210\u529f",
				//唯一性校验配置错误！错误字段:
				uniqueMessage:"\u552f\u4e00\u6027\u6821\u9a8c\u914d\u7f6e\u9519\u8bef\uff01\u9519\u8bef\u5b57\u6bb5:",
				//导入设置
				importSetting:"\u5bfc\u5165\u8bbe\u7f6e",
				//获取信息失败
 				getInfoError:"\u83b7\u53d6\u4fe1\u606f\u5931\u8d25",
				//后台自定义校验中断校验，请联系管理员！
				backInterrupt:"\u540e\u53f0\u81ea\u5b9a\u4e49\u6821\u9a8c\u4e2d\u65ad\u6821\u9a8c\uff0c\u8bf7\u8054\u7cfb\u7ba1\u7406\u5458\uff01",
				//前台自定义校验中断校验！请联系管理员！
				proscInterrupt:"\u524d\u53f0\u81ea\u5b9a\u4e49\u6821\u9a8c\u4e2d\u65ad\u6821\u9a8c\uff01\u8bf7\u8054\u7cfb\u7ba1\u7406\u5458\uff01",
				//数据
				infoData:"\u6570\u636e"
			},
			individual:{
				//表格的结构已经发生变化，请重新设置个性化信息。
				layoutChanged:'\u8868\u683c\u7684\u7ed3\u6784\u5df2\u7ecf\u53d1\u751f\u53d8\u5316\uff0c\u8bf7\u91cd\u65b0\u8bbe\u7f6e\u4e2a\u6027\u5316\u4fe1\u606f\u3002',
				//表格的个性化功能已经升级，建议您重新保存一次个性化信息。
				individualUpdated:'\u8868\u683c\u7684\u4e2a\u6027\u5316\u529f\u80fd\u5df2\u7ecf\u5347\u7ea7\uff0c\u5efa\u8bae\u60a8\u91cd\u65b0\u4fdd\u5b58\u4e00\u6b21\u4e2a\u6027\u5316\u4fe1\u606f\u3002',
				//设置
				settings:'\u8bbe\u7f6e',
				//重置
				reset:'\u91cd\u7f6e',
				//个性化设置
				title:'\u4e2a\u6027\u5316\u8bbe\u7f6e',
				//显示
				visible:'\u663e\u793a',
				//锁定
				lock:'\u9501\u5b9a',
				//列名
				column:'\u5217\u540d',
				//上移
				moveup:'\u4e0a\u79fb',
				//下移
				movedown:'\u4e0b\u79fb',
				//保存
				save:'\u4fdd\u5b58',
				//应用
				apply:'\u5e94\u7528'
				
			},
			
			paging:{
				//本页共{0}条记录  共{1}条记录
				template:'\u672c\u9875\u5171{0}\u6761\u8bb0\u5f55  \u5171{1}\u6761\u8bb0\u5f55',
				//第
				pagePrefix:'\u7b2c',
				//页
				page:'\u9875',
				//保存修改?
				saveModified:'\u4fdd\u5b58\u4fee\u6539?',
				//数据发生改变，是否放弃修改？
				discardModified:"\u6570\u636e\u53d1\u751f\u6539\u53d8\uff0c\u662f\u5426\u653e\u5f03\u4fee\u6539\uff1f",
				//第一页
				firstPage:'\u7b2c\u4e00\u9875',
				//上一页
				prevPage:'\u4e0a\u4e00\u9875',
				//下一页
				nextPage:'\u4e0b\u4e00\u9875',
				//最后一页
				lastPage:'\u6700\u540e\u4e00\u9875',
                                //保存修改？
				saveChanges:"\u4fdd\u5b58\u4fee\u6539\uff1f"
				
			},
			
			group:{
				//请选择进行分组的列
				tip:'\u8bf7\u9009\u62e9\u8fdb\u884c\u5206\u7ec4\u7684\u5217',
				//分组统计
				statistics:'\u5206\u7ec4\u7edf\u8ba1',
				//最大值
				max:'\u6700\u5927\u503c',
				//最小值
				min:'\u6700\u5c0f\u503c',
				//合计值
				sum:'\u5408\u8ba1\u503c',
				//平均值
				avg:'\u5e73\u5747\u503c',
				//清除统计
				clear:'\u6e05\u9664\u7edf\u8ba1',
				
				//提交分组信息
				sumbitGroup:"\u63d0\u4ea4\u5206\u7ec4\u4fe1\u606f",
				//移除分组列
				removeColumn:"\u79fb\u9664\u5206\u7ec4\u5217",
				
				//空
				noValue:"\u7a7a",
 				//计
				count:"\u8ba1",
                                //列校验信息
				columnCheckInfo:"\u5217\u6821\u9a8c\u4fe1\u606f",
                              //必须设置至少一列可见
				columnVisible :"\u5fc5\u987b\u8bbe\u7f6e\u81f3\u5c11\u4e00\u5217\u53ef\u89c1",
				//总计
				totalStatistics :"\u603b\u8ba1",
				//合计
				sumStatistics :"\u5408\u8ba1"
			},
			
			filter:{
				//过滤
				filter:'\u8fc7\u6ee4',
				//清除本列过滤
				clearColumn:'\u6e05\u9664\u672c\u5217\u8fc7\u6ee4',
				//清除表格过滤
				clearGrid:'\u6e05\u9664\u8868\u683c\u8fc7\u6ee4',
				//设置"${0}"列过滤条件
				configure:'\u8bbe\u7f6e\"${0}\"\u5217\u8fc7\u6ee4\u6761\u4ef6',
				//等于
				eq:'\u7b49\u4e8e',
				//不等于
				neq:'\u4e0d\u7b49\u4e8e',
				//大于
				gt:'\u5927\u4e8e',
				//大于等于
				gte:'\u5927\u4e8e\u7b49\u4e8e',
				//小于
				lt:'\u5c0f\u4e8e',
				//小于等于
				lte:'\u5c0f\u4e8e\u7b49\u4e8e',
				//包含
				include:'\u5305\u542b',
				//不包含:
				exclude:'\u4e0d\u5305\u542b',
				//为空
				empty:'\u4e3a\u7a7a',
				//不为空
				notempty:'\u4e0d\u4e3a\u7a7a',
				//与
				and:'\u4e0e',
				//或
				or:'\u6216',
				
				//确定
				confirm:"\u786e\u5b9a",
				//取消
				cancel:"\u53d6\u6d88"
			},
			
			toolbar:{
				//每页
				perPage:"\u6bcf\u9875",
				//条
				items:"\u6761",
				//个性化
				individual:"\u4e2a\u6027\u5316",
				//打印
				print:"\u6253\u5370",
                                //共
				total:"\u5171",
				//条记录
				records:"\u6761\u8bb0\u5f55"
			}
		},
		
		
		//-----------------------布局控件-----------------------------//
		layout:{
			contentPane:{
				//正在装入...
				loading:"\u6b63\u5728\u88c5\u5165..."
			},
			tabController:{
				//关闭
				close:"\u5173\u95ed"
			}
		},
		
		
		//-----------------------对话框控件-----------------------------//
		dialog:{
			dialog:{
				//对话框
				title : "\u5bf9\u8bdd\u6846",
				//最大化
				maximinze:"\u6700\u5927\u5316",
				//关闭
				close:"\u5173\u95ed",
				//还原
				restore:"\u8fd8\u539f",
				//载入出错
				error:"\u8f7d\u5165\u51fa\u9519",
				//打开
                openUrl:"\u6253\u5f00",
				//新增按钮权限菜单
				showMenuModal:"\u65b0\u589e\u6309\u94ae\u6743\u9650\u83dc\u5355"
			},
			messageBox:{
				//确定
				confirm:"\u786e\u5b9a",
				//取消
				cancel:"\u53d6\u6d88",
				//您是否确认？
				confirmText:"\u60a8\u662f\u5426\u786e\u8ba4\uff1f",
				//确认框
				confirmTitle:"\u786e\u8ba4\u6846",
				//是
				yes:"\u662f",
				//否
				no:"\u5426",
				//信息提示
				infoText:"\u4fe1\u606f\u63d0\u793a",
				//自动关闭确认框
				autoClose:"\u81ea\u52a8\u5173\u95ed\u786e\u8ba4\u6846",
				//请输入内容：
				inputContent:"\u8bf7\u8f93\u5165\u5185\u5bb9\uff1a",
				//输入提示框
				promptDialog:"\u8f93\u5165\u63d0\u793a\u6846"
				
			}
		},
		
		//-----------------------util文件夹下的文件-----------------------------//
		util:{
			debug:{
				//非json格式数据
				notJson:"\u975ejson\u683c\u5f0f\u6570\u636e",
				//Json数据结构
				jsonData:"Json\u6570\u636e\u7ed3\u6784"
			},
			
			installplugin:{
				//脚本解析引擎
				script:"\u811a\u672c\u89e3\u6790\u5f15\u64ce",
				//客户端缓存插件
				gears:"\u5ba2\u6237\u7aef\u7f13\u5b58\u63d2\u4ef6"
			},
			
			util:{
				//最大值
				max:"\u6700\u5927\u503c",
				//最小值
				min:"\u6700\u5c0f\u503c",
				//平均值
				avg:"\u5e73\u5747\u503c",
				//合计值
				sum:"\u5408\u8ba1\u503c",
				//终止事件！
				stopEvent:"\u7ec8\u6b62\u4e8b\u4ef6\uff01",
				//正在装载数据...
				// loading:"\u6b63\u5728\u88c5\u8f7d\u6570\u636e...",
				loading:"\u6570\u636e\u52a0\u8f7d\u4e2d...",
				//关闭
				close:"\u5173\u95ed",
				//请正确设置dojoType属性。
				dojoTypeError:"\u8bf7\u6b63\u786e\u8bbe\u7f6edojoType\u5c5e\u6027\u3002",
				
				defaultDateFormat:"yyyy-MM-dd"
			},
                        spell:{
                               //函数makePy需要字符串类型参数!
				makePy:"\u51fd\u6570makePy\u9700\u8981\u5b57\u7b26\u4e32\u7c7b\u578b\u53c2\u6570!" 
                        },
                        ie:{
                               //友情提示：您当前使用的浏览器是IE
				isIE:"\u53cb\u60c5\u63d0\u793a\uff1a\u60a8\u5f53\u524d\u4f7f\u7528\u7684\u6d4f\u89c8\u5668\u662fIE",
				//，为了加快浏览速度，建议您升级到&nbsp;&nbsp;</span><a href='#' onClick='upgrade(event)'>IE8浏览器</a>。
				toIE8:"\uff0c\u4e3a\u4e86\u52a0\u5feb\u6d4f\u89c8\u901f\u5ea6\uff0c\u5efa\u8bae\u60a8\u5347\u7ea7\u5230&nbsp;&nbsp;</span><a href='#' onClick='upgrade(event)'>IE8\u6d4f\u89c8\u5668</a>\u3002",
				//IE8升级程序
				programForIE8:"IE8\u5347\u7ea7\u7a0b\u5e8f"
			}
		},
		
	////-------------------------tooltip----------------------///////////
		tooltip:{
			//内容正在加载，请稍候…
			loading:"\u5185\u5bb9\u6b63\u5728\u52a0\u8f7d\uff0c\u8bf7\u7a0d\u5019..."
		},
		
		////-------------------------rpc----------------------///////////
		rpc:{
			//会话过期,请重新登录
			sessionOut:"\u4f1a\u8bdd\u8fc7\u671f,\u8bf7\u91cd\u65b0\u767b\u5f55",
			
			//请求数据成功！但回调方法出错；请检查自定义load回调函数。
			loadError:"\u8bf7\u6c42\u6570\u636e\u6210\u529f\uff01\u4f46\u56de\u8c03\u65b9\u6cd5\u51fa\u9519\uff1b\u8bf7\u68c0\u67e5\u81ea\u5b9a\u4e49load\u56de\u8c03\u51fd\u6570\u3002",
			
			//错误提示
			errorTip:"\u9519\u8bef\u63d0\u793a",
			
			//请求操作失败
			errorMessage:"\u8bf7\u6c42\u64cd\u4f5c\u5931\u8d25",
			
			//成功提示
			success:"\u6210\u529f\u63d0\u793a",
			
			//请求操作成功
			successMessage:"\u8bf7\u6c42\u64cd\u4f5c\u6210\u529f",
			
			//导出的布局信息为空！
			layoutInfoEmpty:"\u5bfc\u51fa\u7684\u5e03\u5c40\u4fe1\u606f\u4e3a\u7a7a\uff01",
			
			
			//确定
			confirmButton:"\u786e\u5b9a",
			//提示信息
			info:"\u63d0\u793a\u4fe1\u606f",
			//由于数据资源文件配置出错,程序不执行打印操作。
			printError:"\u7531\u4e8e\u6570\u636e\u8d44\u6e90\u6587\u4ef6\u914d\u7f6e\u51fa\u9519,\u7a0b\u5e8f\u4e0d\u6267\u884c\u6253\u5370\u64cd\u4f5c\u3002",
			
			//获取信息失败
			getInfoError:"\u83b7\u53d6\u4fe1\u606f\u5931\u8d25",
			
			//保存信息失败
			saveError:"\u4fdd\u5b58\u4fe1\u606f\u5931\u8d25",
			
			//正在装载缓存数据...
			loadingCache:"\u6b63\u5728\u88c5\u8f7d\u7f13\u5b58\u6570\u636e...",
			//装载缓存数据失败。
			loadCacheError:"\u88c5\u8f7d\u7f13\u5b58\u6570\u636e\u5931\u8d25\u3002"
				
		},
		
		////-------------------------xgrid----------------------///////////
		xgrid:{
			individual:{
				//表格的结构已经发生变化，请重新设置个性化信息。
				layoutChanged:'\u8868\u683c\u7684\u7ed3\u6784\u5df2\u7ecf\u53d1\u751f\u53d8\u5316\uff0c\u8bf7\u91cd\u65b0\u8bbe\u7f6e\u4e2a\u6027\u5316\u4fe1\u606f\u3002',
				//表格的个性化功能已经升级，建议您重新保存一次个性化信息。
				individualUpdated:'\u8868\u683c\u7684\u4e2a\u6027\u5316\u529f\u80fd\u5df2\u7ecf\u5347\u7ea7\uff0c\u5efa\u8bae\u60a8\u91cd\u65b0\u4fdd\u5b58\u4e00\u6b21\u4e2a\u6027\u5316\u4fe1\u606f\u3002',
				//保存
				save:'\u4fdd\u5b58',
				//重置
				reset:'\u91cd\u7f6e'
			},
			
			filter:{
				//过滤
				filter:'\u8fc7\u6ee4',
				//清除本列过滤
				clearColumn:'\u6e05\u9664\u672c\u5217\u8fc7\u6ee4',
				//清除表格过滤
				clearGrid:'\u6e05\u9664\u8868\u683c\u8fc7\u6ee4',
				//设置"${0}"列过滤条件
				configure:'\u8bbe\u7f6e\"${0}\"\u5217\u8fc7\u6ee4\u6761\u4ef6',
				//等于
				eq:'\u7b49\u4e8e',
				//不等于
				neq:'\u4e0d\u7b49\u4e8e',
				//大于
				gt:'\u5927\u4e8e',
				//大于等于
				gte:'\u5927\u4e8e\u7b49\u4e8e',
				//小于
				lt:'\u5c0f\u4e8e',
				//小于等于
				lte:'\u5c0f\u4e8e\u7b49\u4e8e',
				//包含
				include:'\u5305\u542b',
				//不包含:
				exclude:'\u4e0d\u5305\u542b',
				//为空
				empty:'\u4e3a\u7a7a',
				//不为空
				notempty:'\u4e0d\u4e3a\u7a7a',
				//与
				and:'\u4e0e',
				//或
				or:'\u6216',
				
				//确定
				confirm:"\u786e\u5b9a",
				//取消
				cancel:"\u53d6\u6d88"
			},
			
			menu:{
				//锁定
				lockColumn:"\u9501\u5b9a",
				//解锁
				unlockColumn:"\u89e3\u9501",
				//展现列
				columns:"\u5c55\u73b0\u5217"
			},
            binding:{
                //计
				count:"\u8ba1",
				//保存修改？
				saveMoidify:"\u4fdd\u5b58\u4fee\u6539\uff1f",
				//列校验信息
				columnCheckInfo:"\u5217\u6821\u9a8c\u4fe1\u606f"
             },
            'import':{
                 //提示信息
 				info:"\u63d0\u793a\u4fe1\u606f",
 				//导入完成！
 				importSuccess:"\u5bfc\u5165\u6210\u529f",
 				//唯一性校验配置错误！错误字段:
 				uniqueMessage:"\u552f\u4e00\u6027\u6821\u9a8c\u914d\u7f6e\u9519\u8bef\uff01\u9519\u8bef\u5b57\u6bb5:",
 				//导入设置
 				importSetting:"\u5bfc\u5165\u8bbe\u7f6e",
 				//获取信息失败
 				getInfoError:"\u83b7\u53d6\u4fe1\u606f\u5931\u8d25",
 				//后台自定义校验中断校验，请联系管理员！
 				backInterrupt:"\u540e\u53f0\u81ea\u5b9a\u4e49\u6821\u9a8c\u4e2d\u65ad\u6821\u9a8c\uff0c\u8bf7\u8054\u7cfb\u7ba1\u7406\u5458\uff01",
 				//前台自定义校验中断校验！请联系管理员！
 				proscInterrupt:"\u524d\u53f0\u81ea\u5b9a\u4e49\u6821\u9a8c\u4e2d\u65ad\u6821\u9a8c\uff01\u8bf7\u8054\u7cfb\u7ba1\u7406\u5458\uff01",
 				//数据
 				infoData:"\u6570\u636e"
 			},
            'export':{
 				//导出设置
				exportSetting:"\u5bfc\u51fa\u8bbe\u7f6e",
                //提示信息
				info:"\u63d0\u793a\u4fe1\u606f",
				//无可导出数据，请重新设置查询条件后再导出!
				noDataByQuery:"\u65e0\u53ef\u5bfc\u51fa\u6570\u636e\uff0c\u8bf7\u91cd\u65b0\u8bbe\u7f6e\u67e5\u8be2\u6761\u4ef6\u540e\u518d\u5bfc\u51fa!",
				//无可导出数据，请先选择数据再导出!
				noDataByChoice:"\u65e0\u53ef\u5bfc\u51fa\u6570\u636e\uff0c\u8bf7\u5148\u9009\u62e9\u6570\u636e\u518d\u5bfc\u51fa!"
			}
		},
		
		
	////-------------------------tree----------------------///////////
		tree:{
			dnd:{
				// 是否执行拖拽操作
				doDrop:"\u662f\u5426\u786e\u8ba4\u6267\u884c\u62d6\u62fd\u64cd\u4f5c\uff1f"
			}
		},
	////-------------------------navigator------------------///////////
		'navigator':{
			//提示信息
			info:"\u63d0\u793a\u4fe1\u606f",
			//该主题下，receiveData的对应函数中存在错误，请检查相关的代码。
			receiveDataError:"\u8be5\u4e3b\u9898\u4e0b\uff0creceiveData\u7684\u5bf9\u5e94\u51fd\u6570\u4e2d\u5b58\u5728\u9519\u8bef\uff0c\u8bf7\u68c0\u67e5\u76f8\u5173\u7684\u4ee3\u7801\u3002"			
		},
	////-------------------------patch----------------------///////////
        patch:{
            rpc:{
				//正在装载缓存数据…
				loadingCacheData :"\u6b63\u5728\u88c5\u8f7d\u7f13\u5b58\u6570\u636e\u2026",
				//装载缓存数据失败。
				loadCacheDataFailed :"\u88c5\u8f7d\u7f13\u5b58\u6570\u636e\u5931\u8d25\u3002",
                                //获取信息失败
				getInfoFailed :"\u83b7\u53d6\u4fe1\u606f\u5931\u8d25",
				//保存信息失败
				saveInfoFailed:"\u4fdd\u5b58\u4fe1\u606f\u5931\u8d25",
				//导出的布局信息为空！
				noLayoutInfo:"\u5bfc\u51fa\u7684\u5e03\u5c40\u4fe1\u606f\u4e3a\u7a7a\uff01",
				//确定
				confirm:"\u786e\u5b9a",
				//提示信息
				info:"\u63d0\u793a\u4fe1\u606f",
				//由于数据资源文件配置出错,程序不执行打印操作。
				configError:"\u7531\u4e8e\u6570\u636e\u8d44\u6e90\u6587\u4ef6\u914d\u7f6e\u51fa\u9519,\u7a0b\u5e8f\u4e0d\u6267\u884c\u6253\u5370\u64cd\u4f5c\u3002"
			}
    	},
////-------------------------global----------------------///////////
       global:{
            comboBox:{
                //<请选择>
				choices:"<\u8bf7\u9009\u62e9>"
            }
       }
};
dojo.provide("unieapx.nls.application_zh_CN");

RIA_UNIEAPX_I18N={
	
		query:{
			//请输入整数！
			integerPrompt : "\u8bf7\u8f93\u5165\u6574\u6570\uff01",
			//查询
			queryLabel : "\u67e5\u8be2",
			//清空
			clearLabel : "\u6e05\u7a7a",
			//您没有在Binding的数据源中配置RowSetName值
			queryMessage:"\u60a8\u6ca1\u6709\u5728Binding\u7684\u6570\u636e\u6e90\u4e2d\u914d\u7f6eRowSetName\u503c\uff01",
			//匹配
			stringMatch:"\u5339\u914d",
			//左匹配
			stringLeftMatch:"\u5de6\u5339\u914d",
			//右匹配
			stringRigthMatch:"\u53f3\u5339\u914d",
			//不匹配
			stringNotMatch:"\u4e0d\u5339\u914d",
			//左不匹配
			stringLeftNotMatch:"\u5de6\u4e0d\u5339\u914d",
			//右不匹配
			stringRightNotMatch:"\u53f3\u4e0d\u5339\u914d",
			//等于
			numberEquals:"\u7b49\u4e8e",
			//不等于
			numberNotEquals:"\u4e0d\u7b49\u4e8e",
			//大于
			numberGreaterThan:"\u5927\u4e8e",
			//小于
			numberLessThan:"\u5c0f\u4e8e",
			//大于等于
			numberGreaterThanOrEquals:"\u5927\u4e8e\u7b49\u4e8e",
			//小于等于
			numberLessThanOrEquals:"\u5c0f\u4e8e\u7b49\u4e8e",
			//查询项
			queryItem:"\u67e5\u8be2\u9879",
			//操作
			operation:"\u64cd\u4f5c",
			//值
			value:"\u503c",
			//关闭
			closeLabel:"\u5173\u95ed",
			//新增
			addLabel:"\u65b0\u589e",
			//修改
			modifyLabel:"\u4fee\u6539",
			//删除
			deleteLabel:"\u5220\u9664",
			//"请选择查询条件！"
			chooseQueryCondition:"\u8bf7\u9009\u62e9\u67e5\u8be2\u6761\u4ef6!",
			//不能添加重复条件
			notDuplicateConditon:"\u4e0d\u80fd\u6dfb\u52a0\u91cd\u590d\u6761\u4ef6!",
			//是
			isTrue:"\u662f",
			//否
			isFalse:"\u5426",
			//无历史查询条件。
			noHistoryCondition:"\u65e0\u5386\u53f2\u67e5\u8be2\u6761\u4ef6\u3002",
			//是否确认删除？
			confirmDelete:"\u662f\u5426\u786e\u8ba4\u5220\u9664\uff1f",
			//请新增查询条件！
			addSelectConditon:"\u8bf7\u65b0\u589e\u67e5\u8be2\u6761\u4ef6\uff01",
			//输入框
			input:"\u8f93\u5165\u6846",
			//查询条件名称：
			coditionName:"\u67e5\u8be2\u6761\u4ef6\u540d\u79f0\uff1a",
			//保存成功
			saveSuccess:"\u4fdd\u5b58\u6210\u529f",
			//不能添加重复条件，请修改查询项的值。
			cantAddRepeatConditionDoUpdate:"\u4e0d\u80fd\u6dfb\u52a0\u91cd\u590d\u6761\u4ef6\uff0c\u8bf7\u4fee\u6539\u67e5\u8be2\u9879\u7684\u503c\u3002",
			//请选择一条。
			selectOndeData:"\u8bf7\u9009\u62e9\u4e00\u6761\u3002",
			//保存
			save:"\u4fdd\u5b58",
			//条件
			condition:"\u6761\u4ef6"
		},
		exception:{
			title:"\u4fe1\u606f\u63d0\u793a",
			stackLabel:"\u5806\u6808\u4fe1\u606f",
			//确认框
			confirmTitle:"\u786e\u8ba4\u6846"
		},
		trace:{
			infoTitle:"\u63D0\u793A",
			unselectedInfo:"\u8BF7\u9009\u62E9\u8981\u5220\u9664\u7684\u8BB0\u5F55\uFF01",
			confirmTitle:"\u786E\u8BA4\u63D0\u793A",
			confirmMessage:"\u786E\u8BA4\u8981\u5220\u9664\u65E5\u5FD7\u8BB0\u5F55\uFF1F",
			lookMessage:"\u8BF7\u9009\u62E9\u4E00\u884C\u8BB0\u5F55\u8FDB\u884C\u67E5\u770B\uFF01",
			stackTitle:"\u5806\u6808\u4fe1\u606f",
			infoList:"\u4FE1\u606F\u5217\u8868",
			summaryInfo:"\u6982\u8981\u4FE1\u606F",
			operator:"\u64CD\u4F5C\u4EBA",
			occurTime:"\u53D1\u751F\u65F6\u95F4"
		},
		menu:{
			//打开菜单超过最大数！
			theMenuNumOverMax:"\u6253\u5f00\u83dc\u5355\u8d85\u8fc7\u6700\u5927\u6570\uff01",
			//桌面
			desktop:"\u684c\u9762",
			//关闭当前
			closeCurrent:"\u5173\u95ed\u5f53\u524d",
			//关闭其他
			closeOther:"\u5173\u95ed\u5176\u4ed6",
			//关闭所有
			closeAll:"\u5173\u95ed\u6240\u6709",
			//InfoTip用户浏览页面
			infoTipUsersBrowsePpage:"InfoTip\u7528\u6237\u6d4f\u89c8\u9875\u9762",
			//关闭
			close:"\u5173\u95ed",
			//修改密码
			modifyPassword:"\u4fee\u6539\u5bc6\u7801",
			//锁定系统
			lockSystem:"\u9501\u5b9a\u7cfb\u7edf",
			//请输入解锁密码
			inputUnlockPassword:"\u8bf7\u8f93\u5165\u89e3\u9501\u5bc6\u7801",
			//否
			isFalse:"\u5426",
			//是
			isTrue:"\u662f",
			//增加菜单
			addMenuItem:"\u589e\u52a0\u83dc\u5355",
			//删除菜单
			deleteMenuItem:"\u5220\u9664\u83dc\u5355",
			//菜单上移
			upMenuItem:"\u83dc\u5355\u4e0a\u79fb",
			//菜单下移
			downMenuItem:"\u83dc\u5355\u4e0b\u79fb",
			//确认框
			confirmTitle:"\u786e\u8ba4\u6846",
			//增加菜单失败
			addMenuItemFail:"\u589e\u52a0\u83dc\u5355\u5931\u8d25",
			//确认删除
			confirmDelete:"\u786e\u8ba4\u5220\u9664",
			//菜单？
			isMenu:"\u83dc\u5355\uff1f",
			//不能删除应用节点。
			cantDeleteItem:"\u4e0d\u80fd\u5220\u9664\u5e94\u7528\u8282\u70b9\u3002",
			//菜单删除失败。
			delteMenuFail:"\u83dc\u5355\u5220\u9664\u5931\u8d25\u3002",
			//请校验输入数据的格式是否正确。
			confirmData:"\u8bf7\u6821\u9a8c\u8f93\u5165\u6570\u636e\u7684\u683c\u5f0f\u662f\u5426\u6b63\u786e\u3002",
			//菜单名称有重复。
			menuRepeat:"\u83dc\u5355\u540d\u79f0\u6709\u91cd\u590d\u3002",
			//菜单保存失败。
			menuSaveFail:"\u83dc\u5355\u4fdd\u5b58\u5931\u8d25\u3002",
			//保存成功。
			saveSuccess:"\u4fdd\u5b58\u6210\u529f\u3002",
			//上移菜单失败。
			upMenuFail:"\u4e0a\u79fb\u83dc\u5355\u5931\u8d25\u3002",
			//该菜单不能上移。
			cantUpMenu:"\u8be5\u83dc\u5355\u4e0d\u80fd\u4e0a\u79fb\u3002",
			//应用节点不能移动。
			cantMoveAppItem:"\u5e94\u7528\u8282\u70b9\u4e0d\u80fd\u79fb\u52a8\u3002",
			//下移菜单失败。
			downMenuItemFail:"\u4e0b\u79fb\u83dc\u5355\u5931\u8d25\u3002",
			//该菜单不能下移。
			cantDownMenu:"\u8be5\u83dc\u5355\u4e0d\u80fd\u4e0b\u79fb\u3002",
			//数据没有发生变化。
			dataNoChange:"\u6570\u636e\u6ca1\u6709\u53d1\u751f\u53d8\u5316\u3002",
			//菜单项标题不能为空。
			menuTitleCantNull:"\u83dc\u5355\u9879\u6807\u9898\u4e0d\u80fd\u4e3a\u7a7a\u3002",
			//请选择菜单结点。
			selectMenuItem:"\u8bf7\u9009\u62e9\u83dc\u5355\u7ed3\u70b9\u3002"
		},
		form:{
			//提示信息 
			infoTilte:"\u63d0\u793a\u4fe1\u606f",
			//未查询到数据!
			notFoundData:"\u672a\u67e5\u8be2\u5230\u6570\u636e!"
		},
		layout:{
			//开始请求
			beginRequest:"\u5f00\u59cb\u8bf7\u6c42"
		},
		indexApp:{
			//已经是第一个应用
			isFirstApp:"\u5df2\u7ecf\u662f\u7b2c\u4e00\u4e2a\u5e94\u7528",
			//已经是最后一个应用
			isLastApp:"\u5df2\u7ecf\u662f\u6700\u540e\u4e00\u4e2a\u5e94\u7528"
		}
		
		
};

if (!dojo._hasResource["unieap.ds.DataCenter"]) {
	dojo._hasResource["unieap.ds.DataCenter"] = true;
	dojo.provide("unieap.ds.DataCenter");

    dojo.declare("unieap.ds.DataCenter", null, {
		/**
		 * @declaredClass:
		 * 		unieap.ds.DataCenter
		 * @summary:
		 * 		数据中心
		 * @classDescription:
		 * 		DataCenter是客户端和服务器端交换信息的载体，即消息单元。
		 * 		1.header消息头,包含服务器端响应的状态信息,如状态码、状态标题、状态详细信息.
		 * 		2.body体的参数信息,一些键值对,譬如查询参数.
		 * 		3.body体的dataStores,包括0到n个 DataStore
		 * @example:
		 * 	|	var dcdata= {
		 * 	|		header:{
		 * 	|			code:0,
		 * 	|			message:{title:"",detail:""}
		 * 	|		},
		 * 	|		body:{
		 * 	|			parameters:{},
		 *  |			dataStores:{
		 *  |				store1:{......},
		 *  |				store2:{......}
		 *  |			}
		 *  |		}
		 *  |	}
		 *  |	dataCenter = new unieap.ds.DataCenter(dcdata);
		 *		根据一定的结构创建DataCenter。参数也可以是json格式的String对象。
		 *  @example：
		 *  |	dataCenter.getDataStore("store1");
		 *		根据DataStore的name取得相应的DataStore
		 * @img:
     	 *      images/ds/dataCenter1.png	
		 */
		
		constructor: function(dataCenter) {
			this.clear();
			
			if (!dataCenter||(dojo.isString(dataCenter)&&!dojo.isObject(dataCenter=dojo.fromJson(dataCenter))))  return;
			
			if (dataCenter.header) {
				dojo.mixin(this.header,dataCenter.header);
			}
			if (dataCenter.body) {
				this.parameters = dataCenter.body.parameters;
			}
			var _d = dataCenter.body.dataStores;
			for (_dataStore in  _d) {
				var ds = _d[_dataStore];
				if(ds != null){
					this.dataStores[_dataStore] = new unieap.ds.DataStore(_dataStore, ds);				
				}else{
					this.dataStores[_dataStore] = ds;
				}
			};
		},
		
		/**
		 * @summary：
		 * 		取得服务器端返回的状态码
		 * @description：
		 * 		DataCenter的header中的code的值
		 * @return 
		 * 		{number}
		 * @example:
		 * |	var dcdata = {header:{code:1,message:{title:"null",detail:"null"}},body:{parameters:{},
		 * |  		dataStores:{ empDataStore:
		 * |  			{metaData:{attr_empno:{dataType:4},NAME:{dataType:12},attr_hiredate:{dataType:93}},
	     * |			pageSize:10,pageNumber:1,recordCount:0,dataSetName:"emp",name:"empDataStore",order:"",
		 * |  			rowSet:[],
		 * |			statistics:{attr_empno:{max: '1999',min: '272'}}}
		 * |		}
         * |	}};
         * |	var dc = new unieap.ds.DataCenter(dcdata);
         * |	alert(dc.getCode());
		 */		
		getCode: function() {
			return this.header.code;
		},

		/**
		 * @summary：
		 * 		取得服务器端返回的状态信息标题
		 * @return 
		 * 		{string} 状态信息标题
		 * @example:
		 * |	var dcdata = {header:{code:1,message:{title:"test",detail:"This is a test!"}},body:{parameters:{},
		 * |  		dataStores:{ empDataStore:
		 * |  			{metaData:{attr_empno:{dataType:4},NAME:{dataType:12},attr_hiredate:{dataType:93}},
	     * |			pageSize:10,pageNumber:1,recordCount:0,dataSetName:"emp",name:"empDataStore",order:"",
		 * |  			rowSet:[],
		 * |			statistics:{attr_empno:{max: '1999',min: '272'}}}
		 * |		}
         * |	}};
         * |	var dc = new unieap.ds.DataCenter(dcdata);
         * |	alert(dc.getTitle());
		 */				
		getTitle: function() {
			return this.header.message.title;
		},

		/**
		 * @summary：
		 * 		取得服务器端返回的状态信息的详细描述
		 * @return 
		 * 		{String} 状态信息的详细描述
		 * @example:
		 * |	var dcdata = {header:{code:1,message:{title:"test",detail:"This is a test!"}},body:{parameters:{},
		 * |  		dataStores:{ empDataStore:
		 * |  			{metaData:{attr_empno:{dataType:4},NAME:{dataType:12},attr_hiredate:{dataType:93}},
	     * |			pageSize:10,pageNumber:1,recordCount:0,dataSetName:"emp",name:"empDataStore",order:"",
		 * |  			rowSet:[],
		 * |			statistics:{attr_empno:{max: '1999',min: '272'}}}
		 * |		}
         * |	}};
         * |	var dc = new unieap.ds.DataCenter(dcdata);
         * |	alert(dc.getDetail());
		 */				
		getDetail: function() {
			return this.header.message.detail;
		},
		
		/**
		 * @summary：
		 * 		取得头部的某个属性值
		 * @param: 
		 * 		{string} name 
		 * 		属性名称
		 * @return: 
		 * 		{object} 属性值
		 * @example:
		 * |	var dc = new unieap.ds.DataCenter();
		 * |	dc.addHeaderAttribute('age',22);
		 * |	${1}alert(dc.getHeaderAttribute('age'));
		 *	${1}取得header中的age的值。
		 */
		getHeaderAttribute : function(name){
			return this.header[name];
		},
		
		/**
		 * @summary：
		 * 		往头部添加属性信息
		 * @param 
		 * 		{string} name 
		 * 		属性名称
		 * @param 
		 * 		{object} value 属性值
		 * @example:
		 * |	${1}var dc = new unieap.ds.DataCenter();
		 * |	dc.addHeaderAttribute('age',22);
		 * |	unieap.debug(dc);
		 * 	${1}增加header中的age属性，属性值为22。	
		 */
		addHeaderAttribute : function(name,value){
			this.header[name] = value;
		},
		
		/**
		 * @summary：
		 * 		取得服务器端返回的某个参数值
		 * @description：
		 * 		从DataCenter结构中的body下的parameters中取相应的参数值
		 * @param 
		 * 		{string} name 
		 * 		参数名称
		 * @example：
		 * 	|	var ds= {
		 * 	|		body:{
		 * 	|			parameters:{'key1':'value1'},
		 * 	|			dataStores:{}
		 *  |		}
		 *  |	}
		 *  |	var dc=new unieap.ds.DataCenter(ds);
		 *  |	${1}alert(dc.getParameter('key1'));
		 *  ${1}取得的值为'value1'	
		 * @return 
		 * 		{object} 如果值为数组，则取数组的第一个值
		 */				
		getParameter: function(name) {
			return this.parameters[name];
//			以下逻辑实在是看不懂,也没道理。所以我给改了。
//			if (value != "undefined" ) {
//				if (typeof value == "array" || value instanceof Array){
//					return value[0];
//				}
//				return value;
//			} 
		}, 
			

		/*
		 * @summary:
		 * 		向DataCenter中添加参数信息
		 * @description:
		 * 		当值为数组形式时增加属性值。当值为普通类型时覆盖原值。
		 * @param 
		 * 		{String} name
		 * 		参数名称 
		 * @param :
		 * 		{object} value 参数值
		 * @example:
		 * |	dataCenter.addParameter('addps1',['neusoft1']);
		 * | 	dataCenter.addParameter('addps1','neusoft2');
		 * |	dataCenter.addParameter('addps1','neusoft3'); 
		 * 		重复添加三个addps1的参数值。addps1的值为数组形式。
		 */			
		addParameter:function(name, value) {
			if (typeof this.parameters[name] == "array" || this.parameters[name] instanceof Array) {
				this.parameters[name].push(value);
			}
			else{
				this.parameters[name] = value;
			}
		},
		
		/**
		 * @summary:
		 * 		设置参数值
		 * @description：
		 * 		其值为基本类型，或基本类型的数组形式
		 * @param 
		 * 		{string} name 
		 * 		参数名称
		 * @param 
		 * 		{object} value
		 * 		 参数值
		 * @example：
		 * |	var dc = new unieap.ds.DataCenter();
		 * |	dc.setParameter('addps1',['neusoft1']);
		 * | 	dc.setParameter('addps2','neusoft2');
		 * |	dc.setParameter('addps3',333);
		 * |	unieap.debug(dc);
		 */
		setParameter : function(name, value){
			this.parameters[name] = value;
		},
		
		/**
		 * @summary：
		 * 		删除body.parameters中的某个变量
		 * @param：
		 * 		 {String} name 键值名称
		 * @example：
		 * 	|	var ds= {
		 * 	|		body:{
		 * 	|			parameters:{'key1':'value1'},
		 * 	|			dataStores:{}
		 *  |		}
		 *  |	}
		 *  |	var dc=new unieap.ds.DataCenter(ds);
		 *  |	${1}dc.removeParameter('key1');
		 *  |	unieap.debug(dc);	
		 *  ${1}dataCenter中的'key1'对应的参数值被移除	
		 */
		removeParameter: function(name){
			delete this.parameters[name];
		},

		/**
		 * @summary:
		 * 		取得DataCenter中的某个DataStore
		 * @param: 
		 * 		{string} name
		 * 		DataStore名称
		 * @return 
		 * 		{unieap.ds.DataStore}
		 * @example:
		 * |	var dcdata = {header:{code:1,message:{title:"test",detail:"This is a test!"}},body:{
		 * |		parameters:{},
		 * |  		dataStores:{ empDataStore:
		 * |  			{metaData:{attr_empno:{dataType:4},NAME:{dataType:12},attr_hiredate:{dataType:93}},
	     * |			pageSize:10,pageNumber:1,recordCount:0,dataSetName:"emp",name:"empDataStore",order:"",
		 * |  			rowSet:[],
		 * |			statistics:{attr_empno:{max: '1999',min: '272'}}}
		 * |		}
         * |	}};
         * |	var dc = new unieap.ds.DataCenter(dcdata);
         * |	${1}unieap.debug(dc.getDataStore("empDataStore"));
		 * 		${1}取得name为'empDataStore'的DataStore
		 */		
		getDataStore: function(name) {
			return this.dataStores[name];
		},
		
		/**
		 * @summary:
		 * 		取得DataCenter中的第一个DataStore
		 * @description：
		 * 		场景:在只有一个DataStore,且不知道DataStore的name的情况下使用。
		 * 		在通过DataCenter做为载体请求一个DataStore时用到。
		 * @example：
		 * |	var dcdata = {header:{code:1,message:{title:"test",detail:"This is a test!"}},body:{
		 * |		parameters:{},
		 * |  		dataStores:{ ds1:
		 * |  			{metaData:{attr_empno:{dataType:4},NAME:{dataType:12},attr_hiredate:{dataType:93}},
	     * |			pageSize:10,pageNumber:1,recordCount:0,dataSetName:"ds1",name:"ds1",order:"",condition:"",
		 * |  			rowSet:[],statistics:{attr_empno:{max: '1999',min: '272'}}}
		 * |	 		},ds2:
		 * |			{pageSize:10,pageNumber:1,recordCount:0,dataSetName:"ds2",name:"ds2",order:"",condition:"",
		 * |			rowSet:[]}
         * |	}};
         * |	var dc = new unieap.ds.DataCenter(dcdata);
         * |	${1}unieap.debug(dc.getSingleDataStore());
		 *	${1}取得dc中的第一个DataStore	
		 */
		getSingleDataStore:function(){
			if(this.dataStores){
				for(var name in this.dataStores){
					return this.dataStores[name];
				}
			}
			return null;
		},
		
		/**
		 * @summary:
		 * 		取得所有DataStore对象
		 * @description：
		 * 		DataCenter内所有DataStore对象，为hash形式
		 * @return 
		 * 		{object} hash形式
		 * @example：
		 * |	var dcdata = {header:{code:1,message:{title:"test",detail:"This is a test!"}},body:{
		 * |		parameters:{},
		 * |  		dataStores:{ ds1:
		 * |  			{metaData:{attr_empno:{dataType:4},NAME:{dataType:12},attr_hiredate:{dataType:93}},
	     * |			pageSize:10,pageNumber:1,recordCount:0,dataSetName:"ds1",name:"ds1",order:"",condition:"",
		 * |  			rowSet:[],statistics:{attr_empno:{max: '1999',min: '272'}}}
		 * |	 		},ds2:
		 * |			{pageSize:10,pageNumber:1,recordCount:0,dataSetName:"ds2",name:"ds2",order:"",condition:"",
		 * |			rowSet:[]}
         * |	}};
         * |	var dc = new unieap.ds.DataCenter(dcdata);
         * |	${1}unieap.debug(dc.getDataStores());
		 * 	${1}取得dc中stores的hash对象,key值为DataStore的name	
		 */
		getDataStores: function () {
			return this.dataStores;
		},
		
		
		
		/**
		 * @summary:
		 * 		向DataCenter中添加DataStore
		 * @description:
		 * 		如果有同名对象，则原同名对象被覆盖掉
		 * @param 
		 * 		{string} name 
		 * 		添加的DataStore名称
		 * @param 
		 * 		{unieap.ds.DataStore} dataStore 
		 * 		被添加的DataStore对象
		 * @param
		 * 		{string|Null} 
		 * 		static 静态数据，数据采集时不收集该DataStore的数据
		 * 		incomplete 部分数据，codelist取回部分数据 标示codelist数据不完整
		 * 		dynamic 动态数据，用于数据收集
		 * 		不传type参数，默认数据可收集（一般可以不传这个参数）
		 * @example：
		 * |	var dc = new unieap.ds.DataCenter();
		 * |	var ds = new unieap.ds.DataStore("test");
		 * |	${1}dc.addDataStore('store1',ds)
		 * |	unieap.debug(dc);
		 * 	${1}在dc中增加名为'store1'的DataStore
		 */
		addDataStore: function (name, dataStore,type) {
			if(arguments[0]==null) return;
			if(dojo.isObject(arguments[0])){
				arguments.length== 2 && (type = arguments[1]);
				dataStore = arguments[0];
				name = dataStore.getName();
			} 
			//这样就可以放入null的store，只建议在请求的时候放入null
			if(dataStore != null){
				dataStore.setName(name);
				type && dataStore.setType(type);
			}
			this.dataStores[name] = dataStore;
		},

		/**
		 * @summary：
		 * 		删除DataCenter中某DataStore
		 * @param 
		 * 		{string} name 
		 * 		被删除的DataStore对象的名称
		 * @example：
		 * |	var dc = new unieap.ds.DataCenter();
		 * |	var ds = new unieap.ds.DataStore("test");
		 * |	dc.addDataStore('store1',ds)
		 * |	${1}dc.removeDataStore('store1')
		 * |	unieap.debug(dc);
		 * 		${1}在dc中移除名为'store1'的DataStore
		 */		
		removeDataStore: function( name) {
			delete this.dataStores[name];
		},
		
		
		/**
		 * @summary：
		 * 		清除DataCenter里面的所有信息
		 * @description：
		 * 		清除header，parameters，dataStores
		 * @example:
		 * |	var dcdata = {header:{code:1,message:{title:"test",detail:"This is a test!"}},body:{
		 * |		parameters:{},
		 * |  		dataStores:{ ds1:
		 * |  			{metaData:{attr_empno:{dataType:4},NAME:{dataType:12},attr_hiredate:{dataType:93}},
	     * |			pageSize:10,pageNumber:1,recordCount:0,dataSetName:"ds1",name:"ds1",order:"",condition:"",
		 * |  			rowSet:[],statistics:{attr_empno:{max: '1999',min: '272'}}}
		 * |	 		},ds2:
		 * |			{pageSize:10,pageNumber:1,recordCount:0,dataSetName:"ds2",name:"ds2",order:"",condition:"",
		 * |			rowSet:[]}
         * |	}};
         * |	var dc = new unieap.ds.DataCenter(dcdata);	
         * |	dc.clear()
         * |	unieap.debug(dc);
		 */
		clear: function() {
				this.header = { 
					code:0,
					message:{
						title:"",
						detail:""
					}
				};
				this.parameters = {};
				this.dataStores = {};
		},
		
		/**
		 * @summary：
		 * 		收集数据中心的数据和参数
		 * @example:
		 * |	${1}var pattern={
		 * |		 ${2}parameters:"all",	
		 * |		 ${3}dataStores:{...},	
		 * |		 ${4}exclude:{			
	 	 * |		 ${5}dataStores:['ds1','ds2'],	
		 * |		 ${6}parameters:['p1','p2'] 
		 * |		}
		 * |	}
		 * ${1}数据收据的整体格式
		 * ${2}parameters收集方式
		 * ${3}DataStore收集的方式
		 * ${4}排除的内容
		 * ${5}指定不收集的DataStore
		 * ${6}指定不收集的parameter
		 * @example:
		 * |	var dcdata = {header:{code:1,message:{title:"test",detail:"This is a test!"}},body:{parameters:
		 * |		{parameter1:"para1",parameter2:"para2"},
		 * |  		dataStores:{ ds1:
		 * |  			{metaData:
		 * |				{attr_empno:{dataType:4},NAME:{dataType:12},attr_hiredate:{dataType:93}
		 * |			},
	     * |			pageSize:10,pageNumber:1,recordCount:0,dataSetName:"ds1",name:"ds1",order:"",condition:"",
		 * |  			rowSet:[
		 * |				{attr_empno:"250",NAME:"杨作仲",attr_job:"经理",attr_sal:"1080",attr_deptno:"10",_t:1}
		 * |			],
		 * |			statistics:{attr_empno:{max: '1999',min: '272'}}},
		 * |			ds2:
		 * |			{pageSize:10,pageNumber:1,recordCount:0,dataSetName:"ds2",name:"ds2",order:"",condition:"",
		 * |			rowSet:[
		 * |				{attr_empno:"250",NAME:"大白",attr_job:"经理",attr_sal:"1080",attr_deptno:"10"}
		 * |			]}
         * |	}}};
         * |	${1}var dc = new unieap.ds.DataCenter(dcdata);
         * 	${1}生成dc对象，为以下用例的公用数据。
         * @example:
	 	 * |	${2}var pattern=null;
		 * |	unieap.debug(dc.collect(pattern));	
		 *  ${2}不收集数据
		 *  @img:
		 * 		images/ds/dataCenter/collect/null.png
		 *  @example:
		 * |	${3}pattern="all"
		 * |	unieap.debug(dc.collect(pattern));
		 *  ${3}收集所有的数据和参数
		 *  @img:
		 * 		images/ds/dataCenter/collect/all.png
		 * @example:		
		 * |	${4}pattern={parameters:"",dataStores:""}
		 * |	unieap.debug(dc.collect(pattern));	
		 *  ${4}不收集任何数据和参数
		 *  @img:
		 * 		images/ds/dataCenter/collect/null.png
		 * @example:	
		 * |	${5}pattern={parameters:"all",dataStores:"all"};
		 * |	unieap.debug(dc.collect(pattern));
		 *  ${5}收集所有的数据和参数	
		 *  @img:
		 * 		images/ds/dataCenter/collect/all.png
		 * @example:
		 * |	${6}pattern={
		 * |		parameters:"all",
		 * |		exclude:{
		 * |			parameters:['parameter2']
		 * |			}
		 * |	}
		 * |	unieap.debug(dc.collect(pattern));
		 * ${6}收集除了	exclude中的parameter2之外的所有parameters	
		 * @img:
		 * 		images/ds/dataCenter/collect/exPara2.png
		 *  @example:
		 * |	var rowset =dc.getDataStore("ds1").getRowSet();
		 * |	rowset.getRow(0).setRowStatus(3);
		 * |	rowset.deleteRow(0);
		 * |	dc.getDataStore("ds1").getRowSet().deleteRow(0);
		 * |	${7}pattern={
		 * |		dataStores:"delete",
		 * |		exclude:{
		 * |			dataStores:['ds2']
		 * |		}
		 * |	}
		 * |	unieap.debug(dc.collect(pattern));	
		 * ${7}收集除了 exclude中的dataStores指定的ds2之外的所有DataStore,收集方式为'delete'（即收集delete缓冲区的数据）	
		 *  @img:
		 * 		images/ds/dataCenter/collect/exDs2.png
		 * @example:
		 * |	dc.getDataStore("ds2").getRowSet().deleteRow(0);
		 * |	${8}pattern={
		 * |		dataStores:{
		 * |			ds1:'auto',
		 * |			ds2:'delete'
		 * |		}
		 * |	}
		 * |	unieap.debug(dc.collect(pattern));
		 * ${8}收集dataStores指定的ds1和ds2 收集方式分别为 auto（收集修改行） delete（收集删除行）
		 * @img:
		 * 		images/ds/dataCenter/collect/autoAndDel.png
		 *  @example:	
		 * |	${9}pattern={
		 * |		dataStores:['ds1','ds2']
		 * |	}
		 * |	unieap.debug(dc.collect(pattern));	
		 *  ${9}收集dataStores指定的ds1和ds2 ，dataStores值为数组时收集方式为默认的auto
		 *  @img:
		 * 		images/ds/dataCenter/collect/auto.png
		 * @param {object} pattern 
		 * 		数据收集模式
		 * @return 
		 * 		{unieap.ds.DataCenter} 
		 * 		返回收集后的DataCenter对象
		 */
		collect : function(pattern){
			var dc = new unieap.ds.DataCenter();
			if (pattern == null || pattern == "" || pattern == "none"){
				return dc;
			}else{
				if (typeof(pattern) == "string"){
					if (pattern == "all"){
						this._collectParameters(dc, pattern);
						this._collectDataStores(dc, pattern);
						return dc;
					}
					pattern = dojo.fromJson(pattern);
				}
				this._collectParameters(dc, pattern["parameters"], pattern["exclude"]);
				this._collectDataStores(dc, pattern["dataStores"], pattern["exclude"]);
			}
			return dc;
		},
		//收集dataStore数据
		_collectDataStores : function(dc,pattern, exclude){
			if(pattern == null || pattern == "" || pattern == "none") return;
			var _dataStores = {},
				_excludeDataStores,		//需要排除的dataStores Map
				_includeDataStores		//指定收集的stores
			dc["dataStores"] = _dataStores;
			if(exclude&&exclude['dataStores']){
				_excludeDataStores = unieap.convertArrayToMap(exclude["dataStores"]);
			}
			if(typeof(pattern) == "object"){
				if(pattern instanceof Array){
					//['store1','store2','store3'],默认auto
					_includeDataStores=unieap.convertArrayToMap(pattern,"auto");
				}else{
					//{store1:'auto',store2:'delete'}
					_includeDataStores=pattern;
				}
			}
			for (var property in this.dataStores) {
				if (_excludeDataStores && _excludeDataStores[property]) continue;
				var dataStore = this.dataStores[property];
				if(dataStore){
					if (_includeDataStores) {
						if (_includeDataStores[property] && this.dataStores[property].canCollect()) {
							_dataStores[property] = dataStore.collect(_includeDataStores[property]);
						}
					} else {
						_dataStores[property] = dataStore.collect(pattern);
					}
				}else{
					_dataStores[property] = dataStore;
				}
			}
		},
		
		//收集自定义参数
		_collectParameters : function(dc,pattern, exclude){
			if (pattern == null || pattern == "" || pattern == "none")  return;
			var _excludeParameters,//排除的parameters Map对象
				_includeParameters;//需要收集的parameters Map对象
			if(exclude&&exclude['parameters']){
				_excludeParameters = unieap.convertArrayToMap(exclude["parameters"]);
			}
			if(pattern instanceof Array){
				_includeParameters = unieap.convertArrayToMap(pattern);
			}
			for(var _t in this.parameters)	{
				if(_excludeParameters&&_excludeParameters[_t]) continue;
				if(_includeParameters){
					//指定收集范围
					if(_includeParameters[_t]){
						//在收集范围之内
						dc["parameters"][_t] = this.parameters[_t];
					}
				}else{
					//否则收集所有参数
					dc["parameters"][_t] = this.parameters[_t];
				}
			}
		},
		
		
		/**
		 * @summary：
		 * 		追加一个DataCenter
		 * @param 
		 * 		{unieap.ds.DataCenter} dc DataCenter对象
		 * @param 
		 * 		{String} coverage ：
		 *			replace（替换）；
		 *			discard（抛弃，默认）；
		 *			append（追加记录）；
		 *			union（取记录列的并集）；
		 *			updateProps（只改变属性，用于更新统计数）。
		 * @param 
		 * 		{array|null} p 
		 * 		是否保留header中的节点
		 * @example：
		 * |	var dcs={header:{code:0,message:{title:"null",detail:"null"}},body:{parameters:{},
		 * |	   	dataStores:{empDataStore:
		 * |			{ pageSize:30,pageNumber:1,recordCount:5,dataSetName:"emp",name:"empDataStore",
		 * |			rowSet:[{attr_empno:"250",NAME:"杨作仲",attr_job:"经理",attr_sal:"1080",attr_deptno:"10"},
		 * |			{attr_empno:"319",NAME:"赵斌",attr_job:"软件工程师",attr_sal:"50000",attr_deptno:"10"},
		 * |			{attr_empno:"216",NAME:"陈旭杰",attr_job:"软件工程师",attr_sal:"3200",attr_deptno:"40"},
		 * |			{attr_empno:"100",NAME:"张卫滨",attr_job:"RIA主架构师", attr_sal:"5432",attr_deptno:"30"},
		 * |			{attr_empno:"10000",NAME:"赵磊",attr_job:"产品经理", attr_sal:"2222",attr_deptno:"30"}]}
		 * |	 	  }
     	 * |	}};
		 * |	${1}var dc = new unieap.ds.DataCenter(dcs);
		 * |	var dcs1 = {header:{code:0,message:{title:"null",detail:"null"}},body:{parameters:{},
		 * |  		dataStores:{ empDataStore:
		 * |  		{pageSize:10,pageNumber:1,recordCount:10,dataSetName:"emp",name:"empDataStore",
		 * | 		rowSet:[{attr_empno:"250",ename:"大白",attr_job:"项目经理",attr_sal:"1080",attr_deptno:"10"},
		 * |			{attr_empno:"319",ename:"二白",attr_job:"软件工程师", attr_sal:"50000",attr_deptno:"10"},
		 * |			{attr_empno:"216",ename:"三白",attr_job:"软件工程师", attr_sal:"3200",attr_deptno:"40"},
		 * |			{attr_empno:"100",ename:"四白",attr_job:"RIA主架构师", attr_sal:"5432",attr_deptno:"30"},
		 * |			{attr_empno:"10000",ename:"小五",attr_job:"产品经理", attr_sal:"2222",attr_deptno:"30"}]}
		 * |  		 }
  		 * |	}};
  		 * |	${2}var dc1 = new unieap.ds.DataCenter(dcs1);
  		 * ${1}生成dc对象
  		 * ${2}生成dc1对象
  		 * @example:
  		 * | 	${3}dc.append(dc1,"discard");
		 * |	unieap.debug(dc);
		 * ${3}dc中DataStore的数据不变，不被dc1中数据替代
		 * @img:
		 * 		images/ds/dataCenter/append/discard.png
  		 * @example：
  		 * |	${4}dc.append(dc1,"append");
  		 * |	unieap.debug(dc);
  		 * ${4}在dc中追加dc1中的数据，如果dc和dc1中存在同名DataStore则在dc中的DataStore追加dc1中同名DataStore的数据。
  		 * @img:
		 * 		images/ds/dataCenter/append/append.png
		 * @example:
		 * |	${5}dc.append(dc1,"replace");
		 * |	unieap.debug(dc);
		 * ${5}如果dc和dc1中存在同名DataStore，dc中的DataStore被dc1中的DataStore替代。
		 * @img:
		 * 		images/ds/dataCenter/append/replace.png 
  		 * @example：
  		 * |	${6}dc.append(dc1,"union");
  		 * |	unieap.debug(dc);
  		 * ${6}合并列。要求dc和dc1中的同名DataStore行记录数相同，如果不同不做任何操作。
  		 * @img:
		 * 		images/ds/dataCenter/append/union.png
  		 * @example：
		 * |	var dcs2 = {header:{code:0,message:{title:"test",detail:"This is a test!"},age:66},
		 * |		body:{parameters:{},
		 * |  		dataStores:{ empDataStore:
		 * |  			{metaData:{attr_empno:{dataType:4},NAME:{dataType:12},attr_hiredate:{dataType:93}},
		 * |  			pageSize:10,pageNumber:1,recordCount:0,dataSetName:"emp",name:"empDataStore",
		 * |			rowSet:[],
         * |			statistics:{attr_empno:{max: '1999',min: '272'}}}
		 * |  		}
		 * |	 }};
	 	 * | 	var dc2 = new unieap.ds.DataCenter(dcs2);
 		 * | 	dc.append(dc2,${7}"updateProps",${8}["code","age"]);	
 		 * ${7}将dc2中的属性信息如小计合计信息替换到dc中。
 		 * ${8}将dc2头部header中的code、age信息替换到dc中
 		 * @img:
		 * 		images/ds/dataCenter/append/updateProps.png
		 * 	
		 */
		append : function(dc,coverage,p){
			if(dc==this) return ;
			!p && (p=[]); 
			var h = {};
			for(var i=0;p[i];i++){
				this.header[p[i]] && (h[p[i]] = this.header[p[i]]);
			}
			dojo.mixin(this.header,dc.header || {},h);
			var _temp = dc["parameters"];
			for(var item in _temp){
				if(!(item in this["parameters"]) || coverage){
					this["parameters"][item] = dc["parameters"][item];
				}
			}
			_temp = dc["dataStores"];
			for (var item in _temp) {
				if(item in this["dataStores"]){
					this["dataStores"][item].append(dc["dataStores"][item],coverage);
					if(coverage=="replace"){
						dc["dataStores"][item] = this["dataStores"][item];
					}
				}
				else{
					this["dataStores"][item] = dc["dataStores"][item];
				}
			}
		},
		/**
		 * @summary：
		 * 		是否包含rowSet的记录集，判断指定datastore中的rowSet是否为空
		 * @param: 
		 * 		{string} name 
		 * 		DataStore的名称
		 * @return: 
		 * 		{boolean}
		 * @example:
		 * |	var dcdata = {header:{code:1,message:{title:"test",detail:"This is a test!"}},body:{parameters:{},
		 * |  		dataStores:{ ds1:
		 * |  			{metaData:{attr_empno:{dataType:4},NAME:{dataType:12},attr_hiredate:{dataType:93}},
	     * |			pageSize:10,pageNumber:1,recordCount:0,dataSetName:"ds1",name:"ds1",order:"",condition:"",
		 * |  			rowSet:[],statistics:{attr_empno:{max: '1999',min: '272'}}}
		 * |	 		},ds2:
		 * |			{pageSize:10,pageNumber:1,recordCount:0,dataSetName:"ds2",name:"ds2",order:"",condition:"",
		 * |			rowSet:[]}
         * |	}};
         * |	var dc = new unieap.ds.DataCenter(dcdata);	
         * |	${1}alert(dc.containRowSet("ds1"));
		 * 		${1}判断dc中的name为'ds1'的DataStore是否包含记录集，本例返回false		
		 */
		containRowSet : function(name){
			var dataStore = this.getDataStore(name);
			if(dataStore&&!dataStore.getRowSet().isEmpty()){
				return true;
			}
			return false;
		},
		
		
		/**
		 * @summary：
		 * 		是不是空的DataCenter对象
		 * @description：
		 * 		如果parameters和dataStores的内容为空返回true
		 * @return: 
		 * 		{boolean}
		 * @example:
		 * |var dcdata = {header:{code:1,message:{title:"test",detail:"This is a test!"}},body:{parameters:{},
		 * |  		dataStores:{}
         * |}};
         * |var dc = new unieap.ds.DataCenter(dcdata);
         * |alert(dc.isEmpty()); //true
		 */
		isEmpty : function(){
			var _empty = unieap.isEmpty;
			return (_empty(this.parameters) && _empty(this.dataStores));
		},
		
		/**
		 * @summary：
		 *		将DataCenter对象序列化为json数据
		 * @return: 
		 * 		{String}
		 * @example:
		 * |	var dcdata = {header:{code:1,message:{title:"test",detail:"This is a test!"}},body:{parameters:{},
		 * |  		dataStores:{ ds1:
		 * |  			{metaData:{attr_empno:{dataType:4},NAME:{dataType:12},attr_hiredate:{dataType:93}},
	     * |			pageSize:10,pageNumber:1,recordCount:0,dataSetName:"ds1",name:"ds1",order:"",condition:"",
		 * |  			rowSet:[],statistics:{attr_empno:{max: '1999',min: '272'}}}
		 * |	 		},ds2:
		 * |			{pageSize:10,pageNumber:1,recordCount:0,dataSetName:"ds2",name:"ds2",order:"",condition:"",
		 * |			rowSet:[]}
         * |	}};
         * |	var dc = new unieap.ds.DataCenter(dcdata);
         * |	${1}alert(dc.toJson());
		 * 		${1}返回json格式的string对象		 
		 */		
		toJson : function(){
				var store = [],body=[],result=[];
				result.push("{");
				result.push("header:");
				result.push(dojo.toJson(this.header));
				result.push(",");
				result.push("body:{");				
				for(var dataStore in this.dataStores){
					var ds = this.dataStores[dataStore];
					store.push(("\""+dataStore+"\"").concat(":").concat(ds!=null?ds.toJson():null));
				}
				body.push("dataStores:{".concat(store.join(",")).concat("}"));
				body.push("parameters:".concat(dojo.toJson(this.parameters)));
				result.push(body.join(","));
				result.push("}}");
				return result.join("");				
		}
	});
}
if (!dojo._hasResource["unieap.patch.number"]) {
	dojo._hasResource["unieap.patch.number"] = true;
	dojo.provide("unieap.patch.number");
	
	dojo.require("dojo.number");
	dojo.number.round = function(/*Number*/value, /*Number?*/places, /*Number?*/increment){
		//	summary:
		//		Rounds to the nearest value with the given number of decimal places, away from zero
		//	description:
		//		Rounds to the nearest value with the given number of decimal places, away from zero if equal.
		//		Similar to Number.toFixed(), but compensates for browser quirks. Rounding can be done by
		//		fractional increments also, such as the nearest quarter.
		//		NOTE: Subject to floating point errors.  See dojox.math.round for experimental workaround.
		//	value:
		//		The number to round
		//	places:
		//		The number of decimal places where rounding takes place.  Defaults to 0 for whole rounding.
		//		Must be non-negative.
		//	increment:
		//		Rounds next place to nearest value of increment/10.  10 by default.
		//	example:
		//		>>> dojo.number.round(-0.5)
		//		-1
		//		>>> dojo.number.round(162.295, 2)
		//		162.29  // note floating point error.  Should be 162.3
		//		>>> dojo.number.round(10.71, 0, 2.5)
		//		10.75
		var factor = 10 / (increment || 10);
		return (factor * +value).toFixed(places) / factor; // Number
	};
	dojo.number._applyPattern = function(/*Number*/value, /*String*/pattern, /*dojo.number.__FormatOptions?*/options){
		// summary:
		//		Apply pattern to format value as a string using options. Gives no
		//		consideration to local customs.
		// value:
		//		the number to be formatted.
		// pattern:
		//		a pattern string as described by
		//		[unicode.org TR35](http://www.unicode.org/reports/tr35/#Number_Format_Patterns)
		// options: dojo.number.__FormatOptions?
		//		_applyPattern is usually called via `dojo.number.format()` which
		//		populates an extra property in the options parameter, "customs".
		//		The customs object specifies group and decimal parameters if set.
	
		//TODO: support escapes
		options = options || {};
		var group = options.customs.group;
		var decimal = options.customs.decimal;
	
		var patternList = pattern.split(';');
		var positivePattern = patternList[0];
		pattern = patternList[(value < 0) ? 1 : 0] || ("-" + positivePattern);
	
		//TODO: only test against unescaped
		if(pattern.indexOf('%') != -1){
//			value *= 100;
			value = value.toString().movePoint(2);
		}else if(pattern.indexOf('\u2030') != -1){
//			value *= 1000; // per mille
			value = value.toString().movePoint(3);
		}else if(pattern.indexOf('\u00a4') != -1){
			group = options.customs.currencyGroup || group;//mixins instead?
			decimal = options.customs.currencyDecimal || decimal;// Should these be mixins instead?
			pattern = pattern.replace(/\u00a4{1,3}/, function(match){
				var prop = ["symbol", "currency", "displayName"][match.length-1];
				return options[prop] || options.currency || "";
			});
		}else if(pattern.indexOf('E') != -1){
			throw new Error("exponential notation not supported");
		}
		
		//TODO: support @ sig figs?
		var numberPatternRE = dojo.number._numberPatternRE;
		var numberPattern = positivePattern.match(numberPatternRE);
		if(!numberPattern){
			throw new Error("unable to find a number expression in pattern: "+pattern);
		}
		if(options.fractional === false){ options.places = 0; }
		return pattern.replace(numberPatternRE,
			dojo.number._formatAbsolute(value, numberPattern[0], {decimal: decimal, group: group, places: options.places, round: options.round}));
	}
}

if (!dojo._hasResource["unieap.util.util"]) { //_hasResource checks added by build. Do not use _hasResource directly in your code.
	dojo._hasResource["unieap.util.util"] = true;
	dojo.require("unieap.global");
	dojo.provide("unieap.util.util");
	/**
	 * @declaredClass:
	 * 		unieap.util.util
	 * @summary:
	 * 		公共静态方法，直接调用无需实例化
	 */

	(function () {

		String.prototype.startWith = function (string) {
			return this.indexOf(string) == 0;
		};

		String.prototype.endWith = function (string) {
			return this.lastIndexOf(string) == this.length - string.length;
		};

		String.prototype.getName = function () {
			return this;
		};

		/*
		 * 左补齐字符串
		 * @param nSize
		 * 		要补齐的长度
		 * @param ch
		 * 		要补充的字符
		 * @return
		 */
		String.prototype.padLeft = function (nSize, ch) {
			var len = 0;
			var s = this ? this : "";
			ch = ch ? ch : "0"; //默认补0
			len = s.length;
			while (len < nSize) {
				s = ch + s;
				len++;
			}
			return s;
		}

		/*
		 * 右补齐字符串
		 * @param nSize
		 * 		要补齐的长度
		 * @param ch
		 * 		要补齐的字符
		 * @return
		 */
		String.prototype.padRight = function (nSize, ch) {
			var len = 0;
			var s = this ? this : "";
			ch = ch ? ch : "0"; //默认补0
			len = s.length;
			while (len < nSize) {
				s = s + ch;
				len++;
			}
			return s;
		}

		/*
		 * 左移小数点位置，用于数学计算，相当于除以Math.pow(10,scale)
		 * @param scale
		 * 		要移位的刻度
		 * @return
		 */
		String.prototype.movePointLeft = function (scale) {
			var s, s1, s2, ch, ps, sign;
			ch = ".";
			sign = "";
			s = this ? this : "";

			if (scale <= 0) return s;
			ps = s.split(".");
			s1 = ps[0] ? ps[0] : "";
			s2 = ps[1] ? ps[1] : "";
			if (s1.slice(0, 1) == "-") {
				s1 = s1.slice(1);
				sign = "-";
			}
			if (s1.length <= scale) {
				ch = "0.";
				s1 = s1.padLeft(scale);
			}
			return sign + s1.slice(0, -scale) + ch + s1.slice(-scale) + s2;
		}

		/*
		 * 右移小数点位置，用于数学计算，相当于乘以Math.pow(10,scale)
		 * @param scale
		 * 		要移位的刻度
		 * @return
		 */
		String.prototype.movePointRight = function (scale) {
			var s, s1, s2, ch, ps;
			ch = ".";
			s = this ? this : "";
			if (scale <= 0) return s;
			ps = s.split(".");
			s1 = ps[0] ? ps[0] : "";
			s2 = ps[1] ? ps[1] : "";
			if (s2.length <= scale) {
				ch = "";
				s2 = s2.padRight(scale);
			}
			return s1 + s2.slice(0, scale) + ch + s2.slice(scale, s2.length);
		}

		String.prototype.movePoint = function (scale) {
			if (scale >= 0)
				return this.movePointRight(scale);
			else
				return this.movePointLeft(-scale);
		}

		unieap.version = (function () {
			var v = {
				major: 3,
				minor: 5,
				patch: 1,
				flag: "M20120405",
				toString: function () {
					return this.major + "." + this.minor + "." + this.patch + this.flag;
				}
			};
			return v;
		})();

		/**
		 * @summary:
		 * 		去除数组中重复的元素
		 * @example:
		 * |<script>
		 * | var data = [1,2,1,6,6,6,8,2];
		 * | ${1}unieap.array_unique(data);
		 * | unieap.debug(data);
		 * |</script>
		 *  ${1}过滤后的数组为：[1,2,6,8];
		 */
		unieap.array_unique = function (inArray) {
			if (!dojo.isArray(inArray)) return;
			//    	var obj={};
			//		var res=[];
			//		for(var i=0,l=inArray.length;i<l;i++){
			//			obj[inArray[i]]=1;
			//		}
			//		for(var value in obj){
			//			res.push(value);
			//		}
			//		return res;

			//U_EAP00029211
			var result = [];
			var isExist = false;
			var currentValue = null;
			for (var i = 0, len = inArray.length; i < len; i++) {
				isExist = false;
				currentValue = inArray[i];
				for (var j = 0, leng = result.length; j < leng; j++) {
					if (result[j] == currentValue) {
						isExist = true;
						break;
					}
				}
				if (!isExist) {
					result.push(currentValue);
				}
			}
			return result;
		};


		/**
		 * @summary:
		 * 		取得翻译值
		 * @param:
		 * 	 {string} key：max\min\avg\sum
		 * @example:
		 * |<script>
		 * | alert(unieap.translate("max"));
		 * |</script>
		 */
		unieap.translate = function (key) {
			return {
				//最大值
				"max": RIA_I18N.util.util.max,
				//最小值
				"min": RIA_I18N.util.util.min,
				//平均值
				"avg": RIA_I18N.util.util.avg,
				//合计值
				"sum": RIA_I18N.util.util.sum
			} [key]
		};

		function _getItemValueIgnoreCase(item, name) {
			var itemValue = item[name];
			if (itemValue)
				return itemValue;
			var nameLowerCase = name.toLowerCase();
			var itemLowerCaseValue = item[nameLowerCase];
			if (itemLowerCaseValue)
				return itemLowerCaseValue;
			var nameUpperCase = name.toUpperCase();
			var itemUpperCaseValue = item[nameUpperCase];
			if (itemUpperCaseValue)
				return itemUpperCaseValue;
			for (key in item) {
				if (key.toLowerCase() == name.toLowerCase()) {
					return item[key];
				}
			}
			return null;
		};

		//添加转义库
		function addtranscode(data, dc) {
			var topWin = unieap.getTopWin(),
				transcodeBase = topWin.transcodeBase || (topWin.transcodeBase = {}),
				key = [data.store.getName(), data.valueAttr, data.displayAttr].join("_"),
				store = unieap.getDataStore(data.store, dc, true);
			if (store) {
				var _map = transcodeBase[key] || (transcodeBase[key] = {});
				store.getRowSet().forEach(function (row) {
					//				_map[row.getItemValue(data.valueAttr)] = row.getItemValue(data.displayAttr);
					_map[_getItemValueIgnoreCase(row.getData(), data.valueAttr)] = _getItemValueIgnoreCase(row.getData(), data.displayAttr);
				});
				return _map;
			}
			return null;
		};

		/**
		 * @summary:
		 * 		字符转义，用于codelist和Tree等组件值转义
		 * @param：
		 * 		{string} inValue 
		 * 		用于转义的输入值
		 * @param：
		 * 		{object|string} 
		 * 		data 传递数据对象，以下是内部数据定义 
		 * 		{object} store codelist对象
		 * 		{string} codevalue 对应值列名称,默认为CODEVALUE;
		 * 		{string} codename 对应显示值列名称,默认为CODENAME;
		 * @param：
		 * 		{dataCenter} dc 
		 * 		用于提供data中所需的store
		 * @return：
		 * 		{string} 转义后的值或传入值
		 * @example：
		 * |<script>
		 * | var text = unieap.transcode("25",${1}"nation");
		 * | alert(text);
		 * |</script>
		 * ${1}直接指定转义store的名称
		 * @example:
		 * |<script>
		 * | var data = {store:"dept",${1}valueAttr:"deptno",${2}displayAttr:"deptname"};
		 * | var dc = new unieap.ds.DataCenter();
		 * | var ds = new unieap.ds.DataStore('dept',[
		 * |	{deptno: 'a',deptname: '第一事业部'},{deptno: 'b',deptname: '第二事业部'}
		 * | ]);
		 * | dc.addDataStore('dept',ds);
		 * | var text = unieap.transcode("b",data,dc);
		 * | alert(text);
		 * |</script>
		 * ${1}指定转义值对应的列名
		 * ${2}指定转义显示文本的列名
		 */
		unieap.transcode = function (inValue, data, dc) {
			if (!dc) { //zhaohf dc 
				dc = dataCenter;
			}
			var topWin = unieap.getTopWin(),
				transcodeBase = topWin.transcodeBase || (topWin.transcodeBase = {});
			data = dojo.isString(data) && {
				store: data
			} || data;
			data = dojo.mixin({
				valueAttr: "CODEVALUE",
				displayAttr: "CODENAME"
			}, data);
			// modify XG
			addtranscode(data, dc);
			// modify XG
			var key = [data.store.getName(), data.valueAttr, data.displayAttr].join("_"),
				base = transcodeBase[key];
			/*
			 * modify XG
			if(null == base){ 
				addtranscode(data,dc);
			}
			*/
			if (null == (base = transcodeBase[key])) {
				return inValue;
			} else {
				var values = String(inValue).split(',');
				for (var i = 0; i < values.length; i++) {
					values[i] = base[values[i]];
				}
				return values.join(',');
			}
		};
		//删除逻辑转义的store
		unieap.transcode.clear = function (name) {
			var topWin = unieap.getTopWin(),
				transcodeBase = topWin.transcodeBase || (topWin.transcodeBase = {});
			if (name == null) {
				topWin.transcodeBase = {};
				return;
			}
			for (var key in transcodeBase) {
				if (key.indexOf(name + "_") >= 0) {
					delete transcodeBase[key];
				}
			}
		};


		/**
		 * @summary:
		 * 		获取指定转义代码字典表
		 * @param :
		 * 	 {String} name 
		 *    代码类别
		 * @param :
		 * 	 {String} codevalue 
		 *     代码值列名
		 * @param :
		 * 	  {String} codename
		 *     代码名列名
		 * @example:
		 * |<script>
		 * | var data = unieap.transcode.get("dept");
		 * | unieap.debug(data);
		 * |</script>
		 * @return：
		 * 	  {object}
		 */
		unieap.transcode.get = function (data) {
			var topWin = unieap.getTopWin(),
				transcodeBase = topWin.transcodeBase || (topWin.transcodeBase = {});
			data = dojo.isString(data) && {
				store: data
			} || data;
			data = dojo.mixin({
				valueAttr: "CODEVALUE",
				displayAttr: "CODENAME"
			}, data);
			var key = [data.store.getName(), data.valueAttr, data.displayAttr].join("_");
			return transcodeBase[key] || (function () {
				return addtranscode(data);
			})();
		};

		/**
		 * @summary:
		 * 		取得codelist代码表
		 * @param:
		 * 		{string|object} store 
		 * 		dataStore名称
		 * @param:
		 * 		{string|object|null} dc
		 * 		 dataCenter对象
		 * @param:
		 * 		{boolean} isUseCache
		 * 		是否使用从客户端缓存中查找数据
		 * @return：
		 * 		{object|null} 返回一个dataStore对象
		 * @example:
		 * |	var ds=unieap.getDataStore('demo',dataCenter,true); 
		 * 		上述代码会首先从dataCenter中查找名为demo的dataStore,如果查找不到,再从客户端缓存中查找
		 */
		unieap.getDataStore = function (store, dc, isUseCache) {
			if (store && dojo.isObject(store)) return store;
			var ds;
			//(!dc || !dojo.isObject(dc) && !(dc = dojo.getObject(dc))) && (dc = dataCenter);
			(!dc || !dojo.isObject(dc) && !(dc = dojo.getObject(dc)));
			if (dc) {
				ds = dc.getDataStore(store);
			} else {
				dc = dataCenter;
			}

			if (!ds) {
				ds = dataCenter.getDataStore(store);
			}
			if (!ds) {
				if (isUseCache) {
					dojo.require("unieap.cache");
					var cachedData = unieap.cache.get(store);
					// 2020.1.9 chentaoyu 增加缓存失效策略，默认 3 天失效            
					if (cachedData && unieap.dateMinus(cachedData.timestamp) < 3) {
						ds = new unieap.ds.DataStore(store, cachedData);
						ds.setType("static");
						globalDataCenter.addDataStore(ds);
					}
				} else {
					var topWin = unieap.getTopWin(),
						database = topWin.database || (topWin.database = {});
					if (database[store]) {
						ds = new unieap.ds.DataStore(store, dojo.fromJson(database[store]));
						ds.setType("static");
						dc.addDataStore(ds);
					}
				}
			}
			return ds;
		};


		/**
		 * @summary:
		 * 		存放DataStore对象到数据中心和客户端缓存
		 * @param:
		 * 		{object} store 
		 * 		DataStore对象
		 * @param:
		 * 		{object|string} dc 
		 * 		DataCenter对象
		 * @param :
		 * 		 {boolean} isUseCache 
		 * 		是否缓存到客户端缓存中
		 * @param :
		 * 		{number} timeStamp 
		 * 		时间戳
		 * @example:
		 * |	var ds=new unieap.ds.DataStore('demo',[{name:'jack',age:20}]);
		 * |	unieap.setDataStore(ds,dataCenter,true);
		 */
		unieap.setDataStore = function (store, dc, isUseCache, timeStamp) {
			if (!store) return;
			(!dc || !dojo.isObject(dc) && !(dc = dojo.getObject(dc))) && (dc = dataCenter);
			dc.addDataStore(store, "static"); //静态只读数据
			if (isUseCache) {
				dojo.require("unieap.cache");
				unieap.cache.put(store.getName(), store.getRowSet().toBufJson("primary"), timeStamp);
			} else {
				var topWin = unieap.getTopWin(),
					database = topWin.database || (topWin.database = {}),
					dsName = store.getName();
				if (!database[dsName]) {
					database[dsName] = dojo.toJson(store.getRowSet().getData());
				}
			}
		};

		var _dataTypeMap = {
			"0": "null", //NULL
			"1": "string", //CHAR
			"2": "number", //NUMERIC
			"3": "number", //BIGDECIMAL
			"4": "number", //INTEGER
			"6": "number", //FLOAT
			"8": "number", //DOUBLE
			"12": "string", //STRING
			"16": "boolean", //BOOLEAN
			"91": "date", //DATE
			"93": "date", //TIMESTAMP
			"-5": "number" //LONG
		};
		/**
		 * @summary:
		 * 		根据sql中的dataType转换成相应的脚本数据类型
		 * @param : 
		 * 		{number|string} dataType 
		 * 		数据类型 string、number or boolean
		 * @return:
		 * 	 {string} 脚本数据类型
		 * @example：
		 * |<script>
		 * | alert(unieap.getDataType(12))
		 * |</script>
		 */
		unieap.getDataType = function (dataType) {
			return _dataTypeMap[dataType] || dataType;
		}
		/*
		 * @summary:
		 * 		取得值比较器
		 * @param :
		 * 		{number|string} 
		 * 		dataType 数据类型 string、number or boolean
		 * @param :
		 * 		{string} relation
		 * 		 比较符号，如"="、"!="
		 * @return :
		 *  {boolean} 是否满足条件
		 */
		unieap.getCompare = function (dataType, relation) {
			var _compare = {
				"string": {
					"=": {
						compare: function (columnValue, value, ignoreCase) {
							if (ignoreCase && columnValue && value) {
								return columnValue.toUpperCase() == value.toUpperCase();
							}
							return columnValue == value;
						}
					},
					"!=": {
						compare: function (columnValue, value) {
							return columnValue != value;
						}
					},
					"like": {
						compare: function (columnValue, value) {
							if (value != null) {
								return columnValue && columnValue.match(value) != null;
							}
							return columnValue == null || columnValue == "";
						}
					},
					"not like": {
						compare: function (columnValue, value) {
							if (value != null) {
								return columnValue == null || columnValue.match(value) == null;
							}
							return columnValue != null && columnValue != "";
						}
					}
				},

				"number": {
					"=": {
						compare: function (columnValue, value) {
							return columnValue == value;
						}
					},
					"!=": {
						compare: function (columnValue, value) {
							return columnValue != value;
						}
					},
					">": {
						compare: function (columnValue, value) {
							return columnValue > value;
						}
					},
					">=": {
						compare: function (columnValue, value) {
							return columnValue >= value;
						}
					},
					"<": {
						compare: function (columnValue, value) {
							return columnValue < value;
						}
					},
					"<=": {
						compare: function (columnValue, value) {
							return columnValue <= value;
						}
					}
				},
				"date": {
					"=": {
						compare: function (columnValue, value, pattern) {
							columnValue = unieap.getRelativeTime(columnValue, pattern);
							return columnValue == value;
						}
					},
					"!=": {
						compare: function (columnValue, value, pattern) {
							columnValue = unieap.getRelativeTime(columnValue, pattern);
							return columnValue != value;
						}
					},
					">": {
						compare: function (columnValue, value, pattern) {
							columnValue = unieap.getRelativeTime(columnValue, pattern);
							return columnValue > value;
						}
					},
					">=": {
						compare: function (columnValue, value, pattern) {
							columnValue = unieap.getRelativeTime(columnValue, pattern);
							return columnValue >= value;
						}
					},
					"<": {
						compare: function (columnValue, value, pattern) {
							columnValue = unieap.getRelativeTime(columnValue, pattern);
							return columnValue < value;
						}
					},
					"<=": {
						compare: function (columnValue, value, pattern) {
							columnValue = unieap.getRelativeTime(columnValue, pattern);
							return columnValue <= value;
						}
					}
				},
				"boolean": {
					"=": {
						compare: function (columnValue, value) {
							return columnValue == value;
						}
					},
					"!=": {
						compare: function (columnValue, value) {
							return columnValue != value;
						}
					}
				},
				"null": {
					"is null": {
						compare: function (columnValue) {
							return columnValue == null;
						}
					},
					"is not null": {
						compare: function (columnValue) {
							return columnValue != null;
						}
					}
				}
			}
			return (
				unieap.getCompare = function (dataType, relation) {
					if (relation == "is null" || relation == "is not null") {
						return _compare["null"][relation];
					}
					var type = unieap.getDataType(dataType);
					var type = _compare[type];
					return type && type[relation] ? type[relation] : {
						compare: function (columnValue, value) {
							return eval("(" + columnValue + relation + value + ")");
						}
					};
				}
			)(dataType, relation);
		};
		//内部方法
		unieap.getRelativeTimePlace = function (dataFormat) {
			//yyyy-MM-dd
			dataFormat = dataFormat || RIA_I18N.util.util.defaultDateFormat;
			var place = [];
			//yyyy-MM-dd HH:mm:ss;
			dataFormat.indexOf("yyyy") != -1 && place.push(0);
			dataFormat.indexOf("MM") != -1 && place.push(1);
			dataFormat.indexOf("dd") != -1 && place.push(2);
			(dataFormat.indexOf("HH") != -1 || dataFormat.indexOf("hh") != -1) && place.push(3);
			dataFormat.indexOf("mm") != -1 && place.push(4);
			dataFormat.indexOf("ss") != -1 && place.push(5);
			return place;
		}
		//内部方法
		unieap.getRelativeTime = function (value, place) {
			if (value == null) return null;
			var time = new Date(Number(value));
			var relativeDate = new Date(2000, 0, 1, 0, 0, 0);
			var opers = ["Year", "Month", "Date", "Hours", "Minutes", "Seconds"];
			for (var i = 0, l = place.length; i < l; i++) {
				var sMethod = "set".concat(opers[place[i]]),
					gMethod = "get".concat(opers[place[i]]);
				relativeDate[sMethod](time[gMethod]());
			}
			return relativeDate.getTime();
		}
		/**
		 * @summary:
		 * 		把字符串或字符数组转换成Map对象，方便查询遍历 
		 * @param:
		 * 	 {string|array} value 
		 * 		值
		 * @return:
		 * 	 {object} 转换成 {v1:1,v2:1,...} 形式
		 * @example:
		 * |<script>
		 * | var ${1}data = ["a","b","c","c","d","a"];
		 * | var mp = ${2}unieap.convertArrayToMap(data);
		 * | var result = [];
		 * | for(var d in mp){
		 * | 	result.push(d);
		 * | }
		 * | unieap.debug(${3}d);
		 * ${1}构造有重复数据的数组
		 * ${2}通过构造Map的形式去掉重复数据
		 * ${3}得到不含重复数据的数组
		 */
		unieap.convertArrayToMap = function (value, mapvalue) {
			var _map = {};
			if (!(value instanceof Array)) {
				value = [value];
			}
			for (var i = 0; i < value.length; i++) {
				_map[value[i]] = mapvalue || 1;
			}
			return _map;
		};
		/**
		 * @summary:
		 * 	判断对象是否为空 
		 * @param: 
		 * 		{array|object} data 
		 * @return :
		 * 		{boolean} true/false 
		 * @example:
		 * |<script>
		 * | var data = [];
		 * | alert(unieap.isEmpty(data));
		 * |</script>
		 * 判断数组是否为空
		 * @example:
		 * |<script>
		 * | var data = {};
		 * | alert(unieap.isEmpty(data));
		 * |</script>
		 * 判断对象是否为空
		 */
		unieap.isEmpty = function (data) {
			if (!data) return true;
			if (data instanceof Array) {
				return data.length == 0;
			}
			if (typeof (data) == "object") {
				for (var _t in data) {
					return false;
				}
				return true;
			}
			return false;
		};
		/**
		 * @summary:
		 *		获取对象的长度 
		 * @param:
		 * 		{array|object} data 
		 * @return:
		 * 	  	{number} 长度 
		 * @example:
		 * |<script>
		 * | var data = {a:1,b:2,c:function(){}};
		 * | alert(unieap.getLength(data));
		 * |</script>
		 * 获取对象元素的个数
		 */
		unieap.getLength = function (data) {
			if (data instanceof Array) {
				return data.length;
			}
			if (typeof (data) == "object") {
				var len = 0;
				for (var _t in data) {
					len++;
				}
				return len;
			}
			return 0;
		}


		/**
		 * @summary:
		 * 		调试json字符串，查看json对象树
		 * @description:
		 * 		可以查看任意的javascript对象
		 * 		通过它可以直接查看dataCenter中的数据对象，并且可以动态执行脚本
		 * @example:
		 * |<script>
		 * | var data = "只是一段文字";
		 * | unieap.debug(data);
		 * |</script>
		 * 	  查看字符串或数字
		 * @example:
		 * |<script>
		 * | var data = [1,2,3,4,5,6,7];
		 * | unieap.debug(data);
		 * |</script>
		 * 	  查看数组内容
		 * @example:
		 * |<script>
		 * | var object = {a:1,b:2,c:function(){}};
		 * | unieap.debug(object);
		 * |</script>
		 * 	  查看对象内容
		 * @example:
		 * |<script>
		 * | unieap.debug(unieap.byId("grid").getBinding());
		 * |</script>
		 * 	  查看grid对象的数据绑定
		 */
		unieap.debug = function (json) {
			json = dojo.isString(json) && dojo.fromJson(json) || json;
			var dataCenters = [];
			if (('undefined' != typeof (viewContextHolder)) && viewContextHolder) {
				for (var key in viewContextHolder) {
					var dc = [];
					dc.push(viewContextHolder[key].context);
					var jsonData = viewContextHolder[key].dataCenter;
					jsonData = dojo.isString(jsonData) && dojo.fromJson(jsonData) || jsonData;
					dc.push(jsonData);
					dataCenters.push(dc);
				}
			}
			window["unieapDebugArguments1"] = json;
			window["unieapDebugArguments2"] = dataCenters;
			var url = dojo.moduleUrl("") + "unieap/util/debug.html";
			var feature = "dialogHeight=500px;dialogWidth=500px;resizable=yes;status=yes;titlebar=yes";
			if (dojo.isIE) {
				window.showModalDialog(url, window, feature);
			} else {
				feature = "height=500,width=500,resizable=yes,status=yes,titlebar=yes";
				unieap.debug.opener = open(url, "debug", feature);
				if (!unieap.debug.unload) {
					dojo.addOnUnload(function () {
						unieap.debug.opener.close();
					});
					unieap.debug.unload = 1;
				}
			}
		}
		dojo.connect(document, "onkeydown", function (evt) {
			if (unieap.isDebug &&
				evt.altKey &&
				evt.keyCode == 88) {
				if ('undefined' == typeof (globalDataCenter)) {
					unieap.debug(dataCenter);
				} else {
					unieap.debug(globalDataCenter);
				}
			}
		});

		//录制脚本快捷键：ALT+k
		dojo.connect(document, "onkeydown", function (evt) {

			if (unieap.recordScript) {
				if (evt.altKey && evt.keyCode == 75) {
					unieap.publish("unitTestRecordScript", null);
				}
			}
		});

		//帮助提示快捷键:ALT+F1
		dojo.connect(document, "onkeydown", function (evt) {
			if (unieap.helpOpen) {
				if (evt.altKey && evt.keyCode == 112) {
					var menuId = null;
					var pageId = unieap.getTopWin()._currentSelectedPageId; //view.js定义的变量
					if (pageId) {
						menuId = pageId.substring(5); //获取menuId,pageId = "page_" + meunId
					}
					getAllHelpPage(unieap.WEB_APP_NAME, menuId); // menuId may be null
				}
			}
		});

		unieap.stopEvent = function () {
			//终止事件！
			throw new Error(RIA_I18N.util.util.stopEvent);
		}

		var loadingMask = null;
		/**
		 * @summary:
		 * 		显示或关闭进度条
		 * @param： 
		 * 		{boolean|null} isShow 
		 * 		当等于true|null为显示进度条，否则为关闭
		 * @example:
		 * |<script>
		 * | unieap.showLoading(true);
		 * |</script>
		 */
		unieap.showLoading = function (isShow) {
			var contant = '<div class="spinner"><div class="spinner-container container1"><div class="circle1"></div><div class="circle2"></div><div class="circle3"></div><div class="circle4"></div></div><div class="spinner-container container2"><div class="circle1"></div><div class="circle2"></div><div class="circle3"></div><div class="circle4"></div></div><div class="spinner-container container3"><div class="circle1"></div><div class="circle2"></div><div class="circle3"></div><div class="circle4"></div></div></div>';
			if (null == loadingMask) {
				var html = ["<div class='loading-alpha'></div>"];
				html.push("<div class='loading-p'>");
				html.push("<div class='loading-content'>");
				html.push(contant);
				html.push("<div class='loading-text'>");
				html.push(RIA_I18N.util.util.loading);
				html.push("</div>");
				// html.push("<div class='loading-img'></div>");
				html.push("<div class='loading-cancel iconfont icon-close'></div>");
				// html.push("</div>");
				html.push("</div>");
				loadingMask = dojo.create("div");
				loadingMask.className = "loading";
				loadingMask.innerHTML = html.join("");
				var cancel = dojo.query(".loading-cancel", loadingMask)[0];
				dojo.connect(cancel, "onclick", function () {
					dojo.style(loadingMask, "display", "none");
				});
				document.body && document.body.appendChild(loadingMask);
			}
			dojo.style(loadingMask, "display", isShow == false ? "none" : "block");
		};


		var tabNodeList = [];
		var tabNodeId;
		var tabPane;
		var framePageContainer;
		unieap.openTabLoading = function (nodeId) {
			var result = null;
			framePageContainer = unieap.byId("framePageContainer");
			if (framePageContainer) {
				if (!(nodeId in tabNodeList)) {
					if (framePageContainer) {
						var tabPane = unieap.byId(nodeId);
						var tabNodeId = nodeId;
						if (tabPane.declaredClass != "unieap.layout.ContentPane") {
							tabPane = unieap.byId(nodeId).getParentContainer().getParentContainer();
							tabNodeId = tabPane.id
						}
						var domNodeChild = framePageContainer.tablist.pane2button[tabPane].closeNode;
						tabNodeList[nodeId] = {
							nodeId: tabNodeId,
							node: domNodeChild,
							count: 0
						};
					}
				} else if (tabNodeList[nodeId].node == null) {
					tabNodeList[nodeId].node = framePageContainer.tablist.pane2button[unieap.byId(tabNodeList[nodeId].nodeId)].closeNode;
				}

				var n = tabNodeList[nodeId].node;
				if (tabNodeList[nodeId].count == 0) {
					dojo.removeClass(n, "closeImage");
					dojo.addClass(n, "loadingtab-img");
				}
				tabNodeList[nodeId].count++;
				result = {
					shutDown: function () {
						tabNodeList[nodeId].count--;
						if (tabNodeList[nodeId].count == 0) {
							dojo.removeClass(n, "loadingtab-img");
							dojo.addClass(n, "closeImage");
							tabNodeList[nodeId].node = null;
						}
					}
				};
			}
			return result;
		};




		var loadingXhrMask = null;
		//正在进行的请求（需要进度条的）的总数，以确认最后完成的请求
		var loadingCount = 0;

		/**
		 * @summary:
		 * 		显示或关闭进度条，在xhr加载时，选用此loading样式
		 * @param： 
		 * 		{boolean|null} isShow 
		 * 		当等于true|null为显示进度条，否则为关闭
		 * @example:
		 * |<script>
		 * | unieap.showLoading(true);
		 * |</script>
		 */
		unieap.showXhrLoading = function (isShow) {
			//更新正在进行的请求总数
			isShow ? loadingCount++ : loadingCount--;
			if (null == loadingXhrMask) {
				var loadingHtml = '<div class="loading-p"><div class="loading-content"><div class="spinner"><div class="spinner-container container1"><div class="circle1"></div><div class="circle2"></div><div class="circle3"></div><div class="circle4"></div></div><div class="spinner-container container2"><div class="circle1"></div><div class="circle2"></div><div class="circle3"></div><div class="circle4"></div></div><div class="spinner-container container3"><div class="circle1"></div><div class="circle2"></div><div class="circle3"></div><div class="circle4"></div></div></div><div class="loading-text">数据加载中…</div><div class="loadingxhr-cancel iconfont icon-close"></div></div></div>';
				var html = ["<div class='loadingxhr-alpha'></div>"];
				// html.push("<div class='loadingxhr-p'>");
				// html.push("<div class='loadingxhr-content'>");
				html.push(loadingHtml);
				// html.push("<div class='loadingxhr-img'></div>");
				// html.push("<div class='loadingxhr-text'>");
				// html.push(RIA_I18N.util.util.loading);
				// html.push("</div>");
				// html.push("<div class='loadingxhr-cancel'></div>");
				// html.push("</div>");
				// html.push("</div>");
				loadingXhrMask = dojo.create("div");
				loadingXhrMask.className = "loadingxhr";
				loadingXhrMask.innerHTML = html.join("");
				var cancel = dojo.query(".loadingxhr-cancel", loadingXhrMask)[0];
				dojo.connect(cancel, "onclick", function () {
					dojo.style(loadingXhrMask, "display", "none");
					loadingCount = 0; //U_EAP00028614
				});
				document.body && document.body.appendChild(loadingXhrMask);
				//阻止同时打开两个单帧菜单，必须第一个页面加载完之后，才能打开第2个菜单
				dojo.connect(loadingXhrMask, "onclick", function (e) {
					dojo.stopEvent(e);
				});
			}
			//当所有请求都完成后再关闭进度条
			dojo.style(loadingXhrMask, "display", (isShow == false && loadingCount <= 0) ? "none" : "block");
			(loadingCount < 0) && (loadingCount = 0);
		};

		/**
		 * @summary:
		 * 		日期转换，将日期对象转换为一定格式的字符串
		 * @param ：
		 * 		{date} date 
		 * 		要转换的日期对象
		 * @param ：
		 * 		{string} retV
		 * 		要转换成的格式
		 * @return： 
		 * 		{string} 转换后的日期格式  
		 * @example:
		 * |<script>
		 * | var date = new Date(2008,8,8,12,12,30);
		 * | var retV = "yyyy-MM-dd"
		 * | alert(unieap.dateFormatToString(date,retV));
		 * |</script>
		 */
		unieap.dateFormatToString = function (date, retV) {
			//当按住delte键盘删除日期框中的日期时,retV中会有am字段,需要清除
			retV = retV.replace(/ am/g, "");
			//parse year
			if (retV.indexOf("yyyy") != -1) {
				retV = retV.replace(/yyyy/gi, date.getFullYear());
			}

			//parse month
			if (retV.indexOf("MM") != -1) {
				var m = date.getMonth() + 1;
				m = m < 10 ? "0" + m : m;
				retV = retV.replace(/MM/g, m);
			}

			//parse day
			if (retV.indexOf("dd") != -1) {
				var d = date.getDate();
				d = d < 10 ? "0" + d : d;
				retV = retV.replace(/dd/g, d);
			}

			//parse hour 
			if (retV.indexOf('hh') != -1) {
				var h = date.getHours();
				if (h >= 12) {
					retV = retV + " pm"
					h = (h == 12) ? 12 : h - 12; //如果当前时间是12:12,转换成12进制为12:12 pm
				} else {
					retV = retV + " am"
					h = (h == 0) ? 12 : h; //如果当前时间是00:12,转换成12进制为12:12 am
				}
				h = h < 10 ? "0" + h : h;
				retV = retV.replace(/hh/g, h);
			} else if (retV.indexOf('HH') != -1) {
				var h = date.getHours();
				h = h < 10 ? "0" + h : h;
				retV = retV.replace(/HH/g, h);
			}

			//parse minute
			if (retV.indexOf("mm") != -1) {
				var mm = date.getMinutes();
				mm = mm < 10 ? "0" + mm : mm;
				retV = retV.replace(/mm/g, mm);
			}
			//parse second
			if (retV.indexOf("ss") != -1) {
				var s = date.getSeconds();
				s = s < 10 ? "0" + s : s;
				retV = retV.replace(/ss/g, s);
			}
			//week	
			if (retV.indexOf("w") != -1) {
				retV = retV.replace(/w/g, "0");
			}
			//if(retV.indexOf("p")!=-1){
			//retV = retV.replace(/p/g,"%P");
			//}													
			return retV;
		};
		/**
		 * @summary:
		 * 		日期转换函数
		 * @param ：
		 * 		{string|number} inValue
		 * 	 	输入值
		 * @param：
		 * 	 	{string} datePattern
		 * 		日期格式，默认为"yyyy-MM-dd"
		 * @param:
		 * 		{object|null} data 
		 * 		里面包含{dataType:"text",valueFormat:"yyyy-MM-dd"}
		 * @return:
		 * 		{string} 转换后的日期格式  
		 * @example:
		 * |<script>
		 * | var value = "19810615";
		 * | var datePattern = "yyyy-MM-dd"
		 * | alert(unieap.dateFormat(value,datePattern,{dataType:"string",valueFormat:'yyyyMMdd'}));
		 * |</script>
		 */
		unieap.dateFormat = function (inValue, datePattern, data) {
			if (!inValue || inValue == "") return "";
			var date, retV = datePattern || RIA_I18N.util.util.defaultDateFormat;
			!data && (data = {
				dataType: "date"
			});

			if (data["dataType"] == "string" || data["dataType"] == "text") {
				var valueFormat = data["valueFormat"] || retV;
				var date = unieap.dateParser(inValue, valueFormat);
			} else {
				var date = new Date(Number(inValue));
			}
			return unieap.dateFormatToString(date, retV);
		}
		/**
		 *@summary:
		 *  	日期转换，将一定格式的字符串转换为日期对象
		 * @param: 
		 * 		{string} str 
		 * 		要转换的日期字符串
		 * @param: 
		 * 		{string} format
		 * 		字符串符合的格式
		 * @return :
		 * 		{date} 转换后的日期对象 
		 * @example:
		 * |<script>
		 * | var value = "19810615";
		 * | var datePattern = "yyyyMMdd"
		 * | alert(unieap.dateParser(value,datePattern));
		 * |</script>
		 */
		unieap.dateParser = function (str, format) {
			str = str + "";
			var now = new Date();
			if (str.lastIndexOf('am') > -1) {
				format = format + ' am'
			}

			if (str.lastIndexOf('pm') > -1) {
				format = format + ' pm';
			}

			if (str.length !== format.length) {
				return now;
			}
			var sub = function (s, f1) {
				var rtv = -1;
				var index = format.indexOf(f1);
				if (index != -1) {
					rtv = parseInt(s.substr(index, f1.length), 10);
				}
				return rtv;
			}
			var year = sub(str, "yyyy");
			(year == -1) && (year = now.getFullYear());
			var month = sub(str, "MM");
			(month == -1) && (month = now.getMonth() + 1);
			var date = sub(str, "dd");
			(date == -1) && (date = 1); //如果没有dd，则日期选中的每月1号

			//处理12小时和24小时制度
			var hour = -1;
			if (sub(str, 'hh') != -1) { //如果是12进制
				hour = sub(str, 'hh');
				if (str.indexOf('pm') != -1) {
					//12进制12:12 pm转换为24进制应该还是12:12
					//1:12pm 应该是13:12
					hour = (hour == 12) ? 12 : hour + 12;

				} else if (str.indexOf('am')) {
					//12进制12:12am转换为24进制应该是00:12
					hour = (hour == 12) ? 0 : hour;
				}
			} else if (sub(str, 'HH') != -1) {
				hour = sub(str, 'HH');
			}
			(hour == -1) && (hour = 0);
			var minute = sub(str, "mm");
			(minute == -1) && (minute = 0);
			var second = sub(str, "ss");
			(second == -1) && (second = 0);
			month - 1< 0 ? month=1:null;
			date <= 0 ? date=1:null;
			var d = new Date(year, month - 1, date, hour, minute, second);
			if (d == "NaN") {
				return now;
			}
			return d;
		}

		/**
		 *@summary:
		 *  	计算日期相减天数
		 * @param: 
		 * 		
		 * 		指定的日期
		 * @return :
		 * 		{date} 计算日期相减天数 
		 * */
		unieap.dateMinus = function (sDate) {
			if (!sDate) return 0;
			var sdate = new Date(sDate.replace(/-/g, "/"));
			var now = new Date();
			var days = now.getTime() - sdate.getTime();
			var day = parseInt(days / (1000 * 60 * 60 * 24));
			return day;
		}

		/**
		 * @summary:
		 * 		取得一个字符串占有的字节数 其中汉字占据的字节数在系统变量global.js中定义
		 * @param :
		 * 		{string} inValue 
		 * 		要计算长度的字符串
		 * @return :
		 * 		{number} 字符串的长度
		 * @example:
		 * |<script>
		 * | var value = "你好2008";
		 * | alert(unieap.bitLength(value));
		 * |</script>
		 */
		unieap.bitLength = function (inValue) {
			if (inValue == null || inValue == "") return 0;
			inValue = inValue.toString();
			var len = 0;
			for (var i = 0, l = inValue.length; i < l; i++) {
				if (inValue.charCodeAt(i) < 128) {
					len++;
					continue;
				}
				len += unieap.global.bitsOfOneChinese;
			}
			return len;
		}
		/*
		 * @summary:
		 * 		复制从对话框返回的store对象，不建议使用
		 */
		unieap.revDS = function (store) {
			var data = store.toData(),
				fn = function (obj, name) {
					obj[name] && (obj[name] = Array.apply(Array, obj[name]));
				};
			fn(data, "parameters");
			fn(data, "attributes");
			fn(data.rowSet, "primary");
			fn(data.rowSet, "filter");
			fn(data.rowSet, "delete");
			return new unieap.ds.DataStore(data);
		}

		/**
		 * @summary:
		 * 		获取当前的Dialog对象
		 * @return:
		 * 		{object} unieap.dialog.Dialog
		 * @example:
		 * |<script>
		 * | var dialog = unieap.getDialog()
		 * | dialog.close();
		 * |</script>
		 */
		unieap.getDialog = function (hnd) {
			var dialog = null;
			if (window.DialogUtil && DialogUtil.getDialog && (dialog = DialogUtil.getDialog(hnd)) != null) {
				return dialog;
			}
			//跨域访问会出现问题，所以要进行检测
			try {
				var pWin = window;
				while (pWin != pWin.parent) {
					pWin = pWin.parent;
					if (pWin.DialogUtil && pWin.DialogUtil.getDialog && (dialog = pWin.DialogUtil.getDialog(hnd))) {
						return dialog;
					}
				}
			} catch (e) {
				var topWin = unieap.getTopWin();
				topWin.DialogUtil && (dialog = topWin.DialogUtil.getDialog(hnd));
			}
			return dialog;
		}

		/**
		 * @summary:
		 * 		获取当前的xDialog对象
		 * @return:
		 * 		{object} unieap.xdialog.xDialog
		 * @example:
		 * |<script>
		 * | var dialog = unieap.getXDialog()
		 * | dialog.close();
		 * |</script>
		 */
		unieap.getXDialog = function (hnd) {
			var dialog = null;
			if (window.XDialogUtil && XDialogUtil.getDialog && (dialog = XDialogUtil.getDialog(hnd)) != null) {
				return dialog;
			}
			//跨域访问会出现问题，所以要进行检测
			try {
				var pWin = window;
				while (pWin != pWin.parent) {
					pWin = pWin.parent;
					if (pWin.XDialogUtil && pWin.XDialogUtil.getDialog && (dialog = pWin.XDialogUtil.getDialog(hnd))) {
						return dialog;
					}
				}
			} catch (e) {
				var topWin = unieap.getTopWin();
				topWin.XDialogUtil && (dialog = topWin.XDialogUtil.getDialog(hnd));
			}
			return dialog;
		}

		/**
		 * @summary:
		 * 	设置页面权限
		 * @param：
		 * 	{string|null} scene 
		 * 	场景定义，默认为空
		 * @example:
		 * |window['unieap.pageAuthList']={'a':{
		 * |		'txt':'hidden',
		 * |		'box':'disabled'
		 * |},'b':{
		 * |		'box:'writely'
		 * |}};
		 * @example:
		 * |unieap.setPageAuthority('a');
		 * |securityId为txt的控件被隐藏,同时securityId为box的控件被禁用
		 * @example:
		 * |unieap.setPageAuthority('b');
		 * |securityId为box的控件可以编辑了
		 */
		unieap.setPageAuthority = function (scene) {
			var authList = "unieap.pageAuthList",
				setting = "unieap.pageAuth.defaultSetting", //widget的初始状态
				pageAuthList = window[authList],
				permission = scene && (pageAuthList || 0)[scene] || pageAuthList;
			if (!permission) return;

			var cache = function (widget, type) {
					var data = window[setting];
					if (widget.declaredClass == 'unieap.grid.Grid') {
						var d = {},
							id, cells, layoutManager;
						layoutManager = widget.getManager("LayoutManager");
						cells = layoutManager.getOriginCells();
						for (var i = 0, cell, l = cells.length; i < l; i++) {
							cell = cells[i];
							if (id = cell.securityId) {
								switch (permission[id]) {
									case "hidden":
										//判断grid初始状态是否显示
										if (!layoutManager.isHidden(cell.name)) {
											d[id] = "visible"
										}
										layoutManager.hideCell([id]);
										break;
									case 'writely':
										//判断grid初始状态是否禁用
										cell = layoutManager.getCell(cell.name);
										if (!cell.enable) {
											d[id] = "disabled";
										}
										cell.enable = true;
										break;
									case 'disabled':
										//判断grid初始状态是否可以编辑
										cell = layoutManager.getCell(cell.name);
										if (cell.enable) {
											d[id] = "writely";
										}
										cell.enable = false;
										break;
								}
							}
						}
						data[widget.id] = d;
					} else {
						switch (type) {
							case "hidden":
								if (dojo.style(widget.domNode, "display") != "none") {
									data[widget.id] = "visible";
								}
								dojo.style(widget.domNode, "display", "none");
								break;

							case "writely":
								if (widget.disabled === true) {
									data[widget.id] = "disabled";
								}
								(widget.setDisabled || Boolean).call(widget, false);
								break;
							case "disabled":
								if (widget.disabled === false) {
									data[widget.id] = "writely";
								}
								(widget.setDisabled || Boolean).call(widget, true);
								break;
						}
					}
				},
				resume = function (id) {
					var widget = dijit.byId(id);
					if (widget.declaredClass == 'unieap.grid.Grid') {
						var d = window[setting][id],
							cells, cell, data;
						var layoutManager = widget.getManager("LayoutManager");
						cells = layoutManager.getOriginCells();
						for (var i = 0, l = cells.length; i < l; i++) {
							cell = cells[i];
							data = cell.securityId && d[cell.securityId];
							switch (data) {
								case "visible":
									layoutManager.showCell([cell.securityId]);
									break;
								case "writely":
									cell = layoutManager.getCell(cell.name)
									cell.enable = true;
									break;
								case "disabled":
									cell = layoutManager.getCell(cell.name)
									cell.enable = false;
									break;
							}
						}
					} else {
						switch (window[setting][id]) {
							case "visible":
								dojo.style(widget.domNode, "display", "block");
								break;
							case "writely":
								(widget.setDisabled || Boolean).call(widget, false);
								break;
							case "disabled":
								(widget.setDisabled || Boolean).call(widget, true);
								break;
						}
					}
				};
			//恢复组件默认设置
			for (var name in window[setting]) {
				resume(name);
			}
			window[setting] = {};
			//设置页面权限
			dijit.registry.forEach(function (widget) {
				var securityId;
				if (widget.declaredClass == 'unieap.grid.Grid') {
					cache(widget, null);
				} else {
					securityId = widget.securityId;
					securityId && permission[securityId] && cache(widget, permission[securityId]);
				}
			});
		}
		//是不是实体
		unieap.isClassEntity = function (inData) {
			if (inData && inData.declaredClass) {
				var clazz = dojo.getObject(inData.declaredClass);
				return clazz && clazz.prototype.constructor == inData.constructor;
			}
			return false;
		}
		//获取模块实例
		unieap.getModuleInstance = function (context, moduleName, declaredClass) {
			var module = context[moduleName];
			if (!unieap.isClassEntity(module)) {
				module = dojo.mixin({
					widget: context
				}, module);
				declaredClass = module.declaredClass || module.cls || declaredClass;
				dojo.require(declaredClass);
				var clazz = dojo.getObject(declaredClass);
				module = new clazz(module);
				var getter = "get" + moduleName.replace(/(.)/, function (s) {
					return s.toUpperCase();
				});
				if (!(getter in context)) {
					getter = (function (func) {
						for (var name in context) {
							if (this[name] == func) {
								return name;
							}
						}
						return null;
					}).call(context, arguments.callee.caller);
				}
				if (getter == null) {
					return module;
				}
				context[getter] = function () {
					return module;
				}
				context[moduleName] = module;
			}
			return module;
		}
		/**
		 * @summary：
		 * 		产生唯一码
		 * @return：
		 * 		{string} 页面唯一字符串
		 * @example:
		 * |<script>
		 * | alert(unieap.getUnique());
		 * | alert(unieap.getUnique());
		 * |</script>
		 */
		unieap.getUnique = function () {
			window["unieap_unique"] = window["unieap_unique"] || 1;
			return "unieap_unique" + (window["unieap_unique"]++);
		}
		/*
		 * @summary：
		 * 		设置静态文本的格式化信息
		 * @description:
		 * 		仅供InlineEditBox和Grid使用，【初始化设置参数用】
		 */
		unieap.setLabelFormatProps = function (widget) {

			if (!widget.editor) return;
			var editorClass = widget.editor.editorClass;
			var editorProps = widget.editor.editorProps || (widget.editor.editorProps = {});
			switch (editorClass) {
				case "unieap.form.ComboBox":
				case "unieap.form.CheckBoxGroup":
				case "unieap.form.RadioButtonGroup":
					if (!widget["decoder"] && editorProps.dataProvider && editorProps.dataProvider.store) {
						var store = editorProps.dataProvider.store;
						widget["decoder"] = dojo.mixin({
							store: store
						}, {
							displayAttr: 'CODENAME',
							valueAttr: 'CODEVALUE'
						}, editorProps["decoder"]);
					}
					break;
				case "unieap.form.ComboBoxTree":
					if (!widget["decoder"]) {
						var store = editorProps.treeJson.binding.store;
						widget["decoder"] = dojo.mixin({
							store: store
						}, {
							displayAttr: 'CODENAME',
							valueAttr: 'CODEVALUE'
						}, editorProps["decoder"]);
					}
					break;
				case "unieap.form.CheckBox":
					if (widget.declaredClass == "unieap.grid.Cell" || widget.declaredClass == "unieap.xgrid.Cell") {

						var checkProps = {
							checkedValue: "1",
							uncheckedValue: "0"
						};
						widget["checkProps"] = dojo.mixin(checkProps, editorProps);
						// if(widget.declaredClass =="unieap.grid.Cell"){
						// 	editorProps["disabled"] = true;
						// }
						widget["serial"] = "cell_" + unieap.getUnique();
						window[widget["serial"]] = widget;
						if (!widget["checkLogic"]) {
							widget["checkLogic"] = function (evt, inRowIndex) {
								evt = dojo.fixEvent(evt);
								var checkValue = this["checkProps"]["checkedValue"],
									uncheckedValue = this["checkProps"]["uncheckedValue"],
									value = evt.target.checked ? checkValue : uncheckedValue;
								var rs = this.grid.getBinding().getRowSet();
								widget["name"] && rs.setItemValue(inRowIndex, this.name, value);

								//捕获用户自定义的onClick、onChange事件
								this["checkProps"]["onClick"] && this["checkProps"]["onClick"](inRowIndex, value);
								this["checkProps"]["onChange"] && this["checkProps"]["onChange"](inRowIndex, value);
							};
						}
						if (!widget["formatter"]) {
							widget["formatter"] = function (value, inRowIndex) {
								if (this.enable == false) return value;
								var checked = (String(value) == String(widget["checkProps"]["checkedValue"])) ? " checked " : " ";
								var result = ["<input tabindex=\"-1\" type=\"checkbox\" "];
								if (widget.declaredClass == "unieap.grid.Cell") {
									var marginTop = Math.floor((widget.grid.managers.get("RowManager").defaultRowHeight - 14) / 2) + "px";
								} else {
									var marginTop = Math.floor((widget.grid.getRowManager().defaultRowHeight - 14) / 2) + "px";
								}
								var isDisabled = editorProps["disabled"] || false;
								if (isDisabled && (widget.declaredClass == "unieap.grid.Cell" || widget.declaredClass == "unieap.xgrid.Cell")) {
									result.push("disabled = '" + isDisabled + "' ");
								}
								result.push("name=\"checkbox_");
								result.push(widget.serial);
								result.push("\"");
								//ie8和firefox复选框不居中显示--chrome下也会有问题
								if (!(dojo.isIE < 8)) {
									result.push(" style=\"margin-top:")
									result.push(marginTop + "\"");
								}
								result.push(checked);
								result.push("onclick=\"")
								result.push("window['")
								result.push(widget.serial)
								result.push("'].checkLogic(event,")
								result.push(inRowIndex)
								result.push(")\"");
								result.push(">");

								return result.join("");
							}
						}

					}
					break;
				case "unieap.form.RadioButton":
					if ((widget.declaredClass == "unieap.grid.Cell" || widget.declaredClass == "unieap.xgrid.Cell") &&
						!widget["formatter"]) {
						var radioProps = {
							checkedValue: "1",
							uncheckedValue: "0"
						};
						widget["radioProps"] = dojo.mixin(radioProps, editorProps);
						if (widget.declaredClass == "unieap.grid.Cell") {
							editorProps["disabled"] = true;
						}
						widget["serial"] = "cell_" + unieap.getUnique();
						window[widget["serial"]] = widget;
						widget["checkLogic"] = function (evt, inRowIndex) {
							if (widget["name"] && widget.checkedRowIndex != inRowIndex) {
								evt = dojo.fixEvent(evt);
								var checkValue = widget["radioProps"]["checkedValue"],
									uncheckedValue = widget["radioProps"]["uncheckedValue"];
								var rs = widget.grid.getBinding().getRowSet();
								if (widget.checkedRowIndex != null) {
									rs.setItemValue(widget.checkedRowIndex, widget.name, uncheckedValue);
								}
								rs.setItemValue(inRowIndex, widget.name, checkValue);
								widget.checkedRowIndex = inRowIndex;
								//捕获用户自定义的onClick、onChange事件
								widget["radioProps"]["onClick"] && widget["radioProps"]["onClick"](inRowIndex, checkValue);
								widget["radioProps"]["onChange"] && widget["radioProps"]["onChange"](inRowIndex, checkValue);
							}

						};
						widget["formatter"] = function (value, inRowIndex) {
							if (widget.enable == false) return value;
							var checked = " ";
							if (String(value) == String(widget["radioProps"]["checkedValue"])) {
								checked = " checked ";
								widget.checkedRowIndex = inRowIndex;
							}
							var result = ["<input tabindex=\"-1\" type=\"radio\" "];
							if (widget.declaredClass == "unieap.grid.Cell") {
								var marginTop = Math.floor((widget.grid.managers.get("RowManager").defaultRowHeight - 14) / 2) + "px";
							} else {
								var marginTop = Math.floor((widget.grid.getRowManager().defaultRowHeight - 14) / 2) + "px";
							}
							var isDisabled = editorProps["disabled"] || false;
							if (isDisabled && widget.declaredClass == "unieap.xgrid.Cell") {
								result.push("disabled = '" + isDisabled + "' ");
							}
							result.push("name=\"radio_");
							result.push(widget.serial);
							result.push("\"");
							//ie8和firefox复选框不居中显示--chrome下也会有问题
							if (!(dojo.isIE < 8)) {
								result.push(" style=\"margin-top:")
								result.push(marginTop + "\"");
							}
							result.push(checked);
							result.push("onclick=\"")
							result.push("window['")
							result.push(widget.serial)
							result.push("'].checkLogic(event,")
							result.push(inRowIndex)
							result.push(")\"");
							result.push(">");
							return result.join("");
						}
					}
					break;
				default:
					if ("unieap.form.DateTextBox" == editorClass) {
						var vft = {
							declaredClass: "unieap.form.DateValueFormatter",
							dataFormat: ""
						};
						editorProps["valueFormatter"] = dojo.mixin(vft, editorProps["valueFormatter"]);
						var dft = {
							declaredClass: "unieap.form.DateDisplayFormatter",
							dataFormat: RIA_I18N.util.util.defaultDateFormat
						};
						editorProps["displayFormatter"] = dojo.mixin(dft, editorProps["displayFormatter"]);
					} else if ("unieap.form.NumberTextBox" == editorClass) {
						var dft = {
							declaredClass: "unieap.form.NumberDisplayFormatter"
						};
						editorProps["displayFormatter"] = dojo.mixin(dft, editorProps["displayFormatter"]);
					}
					if (!widget["valueFormatter"] && editorProps["valueFormatter"]) {
						widget["valueFormatter"] = dojo.clone(editorProps["valueFormatter"]);
					}
					if (!widget["displayFormatter"] && editorProps["displayFormatter"]) {
						widget["displayFormatter"] = dojo.clone(editorProps["displayFormatter"]);
					}
			}
		}

		/**
		 * @summary：
		 * 		显示组件
		 * @param：
		 * 		{object} widget
		 * 		可以是Widget对象或domNode
		 * @example:
		 * |<script>
		 * | var obj = dojo.byId("divNode");
		 * | unieap.showWidget(obj);
		 * |</script>
		 * @example:
		 * |<script>
		 * | var obj = unieap.byId("grid");
		 * | unieap.showWidget(obj);
		 * |</script>
		 */
		unieap.showWidget = function (widget) {
			var node = widget && (widget.domNode || widget);
			if (widget.show) {
				widget.show();
			} else {
				node && dojo.style(node, "display", "block");
			}
		}
		/**
		 * @summary：
		 * 		隐藏组件
		 * @param：
		 * 		{object} widget
		 * 		可以是Widget对象或domNode
		 * @example:
		 * |<script>
		 * | var obj = dojo.byId("divNode");
		 * | unieap.hideWidget(obj);
		 * |</script>
		 * @example:
		 * |<script>
		 * | var obj = unieap.byId("grid");
		 * | unieap.hideWidget(obj);
		 * |</script>
		 */
		unieap.hideWidget = function (widget) {
			var node = widget && (widget.domNode || widget);
			if (widget.hide) {
				widget.hide();
			} else {
				node && dojo.style(node, "display", "none");
			}
		}
		/**
		 * @summary：
		 *	通知某组件调用指定方法，第三个参数起为执行方法入参
		 * @param：widget
		 *	{object} 组件对象
		 * @param：methodName
		 *	{string} 方法名称
		 * @example:
		 * | unieap.notify(grid,"setDataStore",store);
		 */
		unieap.notify = function (widget, methodName) {
			if (!widget) return;
			if (widget[methodName]) {
				var args = Array.prototype.slice.call(arguments, 2);
				widget[methodName].apply(widget, args);
			}
		}
		/**
		 * @summary：
		 * 		得到某节点下的子容器
		 * @param :
		 * 		{object} domNode
		 * 		页面元素的domNode
		 * @return:
		 * 		{array} 子容器对象数组
		 * @example:
		 * |<script>
		 * | var children = unieap.getChildrenContainer(dojo.byId("container"));
		 * | for(var i=0;children[i];i++){
		 * |	children[i].resizeContainer();
		 * | |
		 * |</script>
		 */
		unieap.getChildrenContainer = function (domNode) {
			dojo.require("unieap.layout.Container");
			var result = [],
				left = [domNode],
				nodes;
			while (left.length) {
				nodes = left.shift().childNodes;
				for (var i = 0, node, widget;
					(node = nodes[i]); i++) {
					if (node.getAttribute && (widget = dijit.byNode(node))) {
						if (dojo.hasClass(node, "unieap-container")) {
							result.push(widget);
							continue;
						}
					}
					left.push(node);
				}
			}
			return result;
		}
		/**
		 * @summary：
		 *		执行某元素节点下容器的resizeContainer方法
		 * @param：
		 * 	 	{object|null} domNode
		 * 		当为空时执行触发body下容器的resizeContainer方法
		 * @example:
		 * |<script>
		 * | unieap.fireContainerResize(dojo.byId("container"));
		 * |</script>
		 */
		unieap.fireContainerResize = function (domNode) {
				var children = unieap.getChildrenContainer(domNode || document.body);
				for (var i = 0, child;
					(child = children[i]); i++) {
					child.resizeContainer();
				}
			},
			/**
			 * @summary：
			 * 		让组件失去焦点，聚焦在全局A标签上
			 * @example:
			 * | <div dojoType="unieap.form.TextBox" onBlur="blur">
			 * |<script>
			 * | function blur(){
			 * | 	alert("触发焦点");
			 * | }
			 * | unieap.blurWidget();
			 * |</script>
			 */
			unieap.blurWidget = function () {
				try {
					(dojo.byId('unieap_for_focus') || dojo.body()).focus();
				} catch (e) {}
			}

		dojo.addOnLoad(function () {
			//使用一个a标签，解决组件转移焦点问题
			dojo.create('a', {
				'href': 'javascript:void(0);',
				'id': 'unieap_for_focus',
				'class': 'u-common-focus',
				'tabIndex': -1
			}, dojo.body(), "first");
			dojo.connect(window, "onscroll", function (evt) {
				dojo.style(dojo.byId("unieap_for_focus"), "top", document.documentElement.scrollTop + "px");
			});
		});
		/**
		 * @summary：
		 * 		显示Tooltip提示信息
		 * @param：
		 * 	 	{object} innerHTML 
		 * 		提示信息显示内容
		 * @param：
		 * 		{object} aroundNode 
		 * 		提示信息显示位置
		 * @param：
		 * 		{array} position 
		 * 		提示信息显示在aroundNode的方位 支持above below before after四种模式
		 * @example:
		 * |<script>
		 * | var obj = dojo.byId("tipNode");
		 * | unieap.showTooltip(obj,dojo.byId("btn"),['above']);
		 * |</script>
		 */
		unieap.showTooltip = function (innerHTML, aroundNode, position) {
			dojo.require("unieap.Tooltip");
			if (!unieap._masterTT) {
				unieap._masterTT = new unieap._MasterTooltip();
			}
			return unieap._masterTT.show(innerHTML, aroundNode, position);
		};

		/**
		 * @summary：
		 * 		隐藏提示信息
		 * @param：
		 * 		{object} aroundNode 
		 * 		隐藏位置
		 * @example:
		 * |<script>
		 * | unieap.hideTooltip(dojo.byId("btn"));
		 * |</script>
		 */
		unieap.hideTooltip = function (aroundNode) {
			dojo.require("unieap.Tooltip");
			if (!unieap._masterTT) {
				unieap._masterTT = new unieap._MasterTooltip();
			}
			return unieap._masterTT.hide(aroundNode);
		};
		/**
		 * @summary：
		 * 		获取MessageBox对象
		 * @example:
		 * |<script>
		 * | var messageBox = unieap.getMessageBox();
		 * | var config = {title:"提示信息."};
		 * | messageBox.alert(config);
		 * |</script>
		 */
		unieap.getMessageBox = function () {
			dojo.require("unieap.dialog.MessageBox");
			return MessageBox;
		}
		/**
		 * @summary：
		 * 		获取框架的最外层窗口对象，替代直接使用window.top对象
		 * @description:
		 * 		如果集成在其他系统中时，直接调用top对象时会出现跨域访问的错误(不包括showModal窗口)
		 * @example:
		 * |<script>
		 * | var top = unieap.getTopWin();
		 * | alert(top);
		 * |</script>
		 */
		unieap.getTopWin = function () {
			var win = window.opener || window;
			try {
				//防止打开窗口的父窗口被关闭，处于不可用状态
				win.navigator;
				if (dojo.isWebKit && !win.top.unieap) { //webkit下用window.open打开的页面找不到unieap对象
					win = window;
				}
			} catch (e) {
				win = window;
			}
			try {
				win.top.navigator;
				if (win.top && win.top.unieap) {
					return win.top;
				} else {
					return win;
				}
			} catch (e) {
				try {
					do {
						var pwin = win.parent;
						pwin.navigator;
						win = pwin;
					} while (win);
				} catch (e1) {
					return win;
				}
			}
		}

		/**
		 * @summary:
		 * 		聚焦某个在tab页中的控件
		 * @example：
		 *  |	unieap.focusTabWidget("tab1","combobox1")
		 *	聚焦在tab1中的 id 为 combobox1 的控件
		 */
		unieap.focusTabWidget = function (tabId, widgetId) {
			var tabWidget = unieap.byId(tabId);
			if (tabWidget) {
				var parentWidget = tabWidget.getParentContainer();
				parentWidget.selectChild(tabWidget); //选择 tab页
				var context = tabWidget.getContentWindow();
				if (context && context.unieap) {
					var widget = context.unieap.byId(widgetId);
					if (widget) {
						//聚焦
						if (widget.focus) {
							widget.focus();
						} else if (widget.focusNode) {
							widget.focusNode.focus && widget.focusNode.focus();
						}
					}
				}
			}
		};

		/**
		 *@summary:
		 *		订阅某个主题
		 *@description:
		 *		订阅某个主题，当主题被发布时，能够监听到主题内容。
		 *@param:
		 *		{string} topic  主题、发布方与订阅方通过主题联系在一起。
		 *@param:
		 *		{function} fun  接收订阅的方法，fun中有一个参数，由发布方提供。
		 *@example:
		 * | // 订阅"grid change"主题，当publish时，触发自定义方法，接收参数row
		 * | unieap.subscribe("grid change", function(row){ 
		 * |		alert(row);
		 * | });
		 * |
		 * | //发布"grid change"主题，并传递对象row
		 * | unieap.publish("grid change", row);		
		 */
		unieap.subscribe = function (topic, fun) {
			if (!topic || fun == null) return null;
			var disp = dojo._topics[topic];
			if (disp && disp._listeners) {
				var ls = [].concat(disp._listeners);
				while (ls.length) {
					if (fun == ls.pop()) {
						return null;
					}
				}
			}
			return [topic, dojo._listener.add(dojo._topics, topic, fun)];
		};



		/**
		 *@summary:
		 *		发布某个主题内容
		 *@description:
		 *		发布某个主题内容，当主题发布后、订阅方能够得到相应的信息。
		 *@param:
		 *		{string} topic 主题
		 *@param:
		 *		{object} obj  需要发布出去的对象
		 */
		unieap.publish = function (topic, obj) {
			var f = dojo._topics[topic];
			if (f) {
				f.apply(this, obj ? [obj] : []);
			}
		};


		/**
		 * @summary:
		 * 		取消订阅
		 * @description:
		 * 		取消对某个主题的订阅
		 * @param:
		 * 		{object} handle	由unieap.subscribe订阅后返回的对象
		 */
		unieap.unsubscribe = function (handle) {
			if (handle) {
				dojo._listener.remove(dojo._topics, handle[0], handle[1]);
			}
		};


		/**
		 * @summary:
		 * 		聚焦某个在tab页中的控件
		 * @description:
		 * 		当前tab页跳到另一个tab页时，且当前tab页是在Iframe时，使用这个API
		 */
		unieap.focusBrotherTabWidget = function (tabId, widgetId) {
			var parent = window.parent;
			parent.unieap.focusTabWidget(tabId, widgetId);
		};

		/**
		 * @summary:
		 * 		从资源文件(application_zh_CN.js等)中获得国际化信息
		 * @param:
		 * 		{string} key 国际化信息的键值
		 * @param:
		 * 		{array} map 国际化信息中要替换的变量信息
		 * @param:
		 * 		{object} scope 从哪个全局变量中读取国际化信息，默认为RIA_I18N
		 * @param:
		 * 		{string|number|boolean} defaultValue 当获得不到国际化信息时返回的默认值。默认为空字符串
		 * @example:
		 * |<script>
		 * |	var RIA_I18N={
		 * |		welcome:"Welcome You!",
		 * |		info:"My name is ${0},age is ${1}"
		 * |	}
		 * |	var CUSTOM_RIA_I18N={welcome:"Hi,kids!"}
		 * |	//返回值"Welcome You!"
		 * |	var welcome=unieap.getText("welcome");
		 * |	//返回值"My Name is unieap,age is 10"
		 * |	var info=unieap.getText("info",["unieap",10]);
		 * |	//从RIA_I18N中获得不到值时返回0
		 * |	var defaultValue=unieap.getText("undefinedKey",null,null,0);
		 * |	//从变量CUSTOM_RIA_I18N中获得校验信息,返回"Hi,kids"
		 * |	var cWelcome=unieap.getText("welcome",null,CUSTOM_RIA_I18N);
		 * |</script>
		 * |<script>
		 * |	//设置"${0}"列过滤条件(国际化文件中的信息)：configure:'\u8bbe\u7f6e\"${0}\"\u5217\u8fc7\u6ee4\u6761\u4ef6',
		 * |	//获取cell上label的值替换${0}
		 * |	title = unieap.getText("xgrid.filter.configure",[cell.label]);
		 * |</script>
		 */
		unieap.getText = function (key, map, scope, defaultValue) {
			if (!key || typeof (key) != "string") return;
			var scopeType = typeof (scope),
				defaultValueType = typeof (defaultValue);
			map = (dojo.isArray(map) && map) || null;
			scope = scopeType != "undefined" ? (scopeType == "string" ? eval(scope) : (scope != null) ? scope : RIA_I18N) : RIA_I18N;
			defaultValue = defaultValueType != "undefined" ? defaultValue : "";
			var result;
			try {
				result = scope && eval("scope." + key);
				typeof (result) != "undefined" && map != null && (result = dojo.string.substitute(result, map));
			} catch (e) {
				!result && (result = defaultValue);
			}
			return result;
		};

		/**
		 * @summary:
		 * 		将一个JavaScript对象转换成JSON字符串，并添加unieap特定的类型信息，以供unieap.formJson时使用，主要用于通过对话框传递对象参数时，进行类型转换
		 * @param:
		 * 		{string|object|array|unieap.ds.DataStore|unieap.ds.DataCenter} 
		 *  @return：
		 * 		{string} json
		 */
		unieap.toJson = function (value) {
			if (typeof (value) == "undefined") {
				return;
			}
			if (value == null) {
				return "{data:" + dojo.toJson(value) + ",__originalType:Object}";
			}
			if (dojo.isString(value)) {
				return "{data:" + value + ",__originalType:String}";
			} else if (value instanceof unieap.ds.DataStore ||
				(value.declaredClass && value.declaredClass == "unieap.ds.DataStore")) {
				return "{data:" + value.toJson() + ",__originalType:DataStore}";
			} else if (value instanceof unieap.ds.DataCenter ||
				(value.declaredClass && value.declaredClass == "unieap.ds.DataCenter")) {
				return "{data:" + value.toJson() + ",__originalType:DataCenter}";
			} else {
				return "{data:" + dojo.toJson(value) + ",__originalType:Object}";
			}
		};

		/**
		 * @summary:
		 * 		将通过对话框传递的数据转换成对象，与unieap.toJson方法对应使用，参数需要用unieap.toJson转换过。
		 * 		如果是普通的JSON字符串（不是用unieap.toJson转换的),可以调用dojo.fromJson()
		 * @param:
		 * 		{string}  json 要进行转换的值
		 * @return:
		 * 		{string|object|array|unieap.ds.DataStore|unieap.ds.DataCenter}  转换后的结果
		 */
		unieap.fromJson = function (json) {
			if (!json) {
				return;
			}
			var index = json.lastIndexOf(",__originalType");
			var value = json.substring(6, index);
			var type = json.substring(index + 16, json.length - 1);
			if (type == "String") {
				return value;
			} else if (type == "DataStore") {
				var temjson = dojo.fromJson(value);
				var name = temjson.name ? temjson.name : "tempStore";
				return new unieap.ds.DataStore(temjson.name, value);
			} else if (type == "DataCenter") {
				return new unieap.ds.DataCenter(value);
			} else {
				return dojo.fromJson(value);
			}
		};

		unieap.fireEvent = function (widget, method, args) {
			var context = widget;
			if (unieap.isXHR) {
				context = widget._viewContext = unieap.Action.getViewContext(widget);
			}
			return method.apply(context, args);
		};

		//兼容单帧和非单帧事件，this为点击的控件或者为js闭包的空间（数据表格和Tree部分代码使用）
		unieap.fireEvent4Widget = function (self, widget, method, args) {
			if (unieap.isXHR) {
				var context = widget._viewContext || (widget._viewContext = (unieap.Action.getViewContext(widget) || window));
				return method.apply(context, args);
			} else {
				return method.apply(self, args);
			}
		};

		/****************************Tree 常用功能简单接口方法*************************************/
		unieap.tree = {
			/**
			 * @summary:
			 *		给指定节点设置store，将原来的所有子节点删除，节点由id指定，如果节点参数为node调用unieap.byId("basicTree").getBinding().setDataStore(node,store,arg); 
			 * @description:
			 *		给定store中的列字段与tree标签配置的列字段要一致；可以为树设置store，也可以为树的子节点设置store
			 * @param:
			 *		{string} treeId  树的id
			 * @param:
			 *		{unieap.ds.DataStore} store
			 * @param:
			 * 		{object} args   
			 * 		设置当前参数中的store的第一层节点的父节点如：
			 * 		var arg={query:{name:'parentID',relation:'=',value:'999'}};
			 * @param:
			 * 		{string} id   节点的id
			 * 		如果设置子节点的store需要传入此参数，此时如果没有args可以设为null。 
			 * 		unieap.tree.setDataStore("basicTree2",neusoftStore,null,'1231035443386');
			 * @example:
			 * |<script>
			 * | //如果不用单帧框架id可以直接传入，不需要写getRealId。
			 * | var store = dataCenter.getDataStore("menuTreePart1");
			 * | unieap.tree.setDataStore(getRealId("basicTree"),store);
			 * |</script>
			 * |<div dojoType="unieap.tree.Tree" 
			 * |		id="basicTree"
			 * |		label="UniEAP" 
			 * |		binding = "{'leaf':'leaf','store':treeStorePart,'label':'label','parent':'parentID',query:{name:'parentID',relation:'=',value:'1212403325756'}}">
			 * |	 </div>
			 * |</div>
			 */
			setDataStore: function (treeId, store, arg, id) {
				var tree = dijit.byId(treeId);
				if (!tree) return null;
				if (tree && !id) {
					var node = tree.getRootNode();
				} else {
					var node = tree.getNodeById(id);
				}
				if (!node || !store) return null;
				tree.getBinding().setDataStore(node, store, arg);
			},

			/**
			 * @summary:
			 *		刷新指定节点，子节点重新生成并绑定数据，若数据发生了变化，可以调用此方法刷新节点
			 * @description:
			 *		参数为id，如果不用加参数的参见TreeNode中refresh
			 * @see：
			 * 		unieap.tree.TreeNode
			 * @param:
			 *		{string} treeId  树的id
			 * @param:
			 * 		{string} id   节点的id，不设置此参数刷新整棵树
			 * @example:
			 * |function refresh(){
			 * |	//在树绑定的RowSet中新增两条记录 
			 * |	treeStorePart.getRowSet().addRow({id:(new Date()),label:"新增节点1","parentID": "1",leaf:true}); 
			 * |	treeStorePart.getRowSet().addRow({id:(new Date()),label:"新增节点2","parentID": "1",leaf:true}); 
			 * |	//刷新节点 ,如果不用单帧框架id可以直接传入，不需要写getRealId。
			 * |	unieap.tree.refresh(getRealId("refreshNode"),"123");
			 * |}
			 *   树对应的Rowset添加两条数据，并刷新节点，将会重新构建该节点的子节点。
			 * @img:
			 *      images/tree/refreshTreeNode1.png 
			 * @img:
			 *      images/tree/refreshTreeNode2.png   
			 */
			refresh: function (treeId, id) {
				var tree = dijit.byId(treeId);
				if (!tree) return null;
				if (!id) {
					var node = tree.getRootNode();
				} else {
					var node = tree.getNodeById(id);
				}
				if (!node) return null;
				node.refresh();
			},

			/**
			 * @summary:
			 *		当树和form关联时，把指定节点的数据绑定到form中
			 * @description:
			 *		如：在树种配置onClick属性，在onClick的实现方法中调用此方法（onClick方法入参为node），当点击树中节点时，把点击节点的数据绑定到form上
			 * @param:
			 *		{unieap.tree.TreeNode} node
			 * @param:
			 * 		{string} formId   form的id
			 * @example:
			 * | //在树中配置onClick = "bindData"
			 * | //如果不用单帧框架id可以直接传入，不需要写getRealId。
			 * |function bindData(node){
			 * |	unieap.tree.bandData4Form(node,getRealId("treeNodeForm"));
			 * |}
			 */
			bandData4Form: function (node, formId) {
				var row = node.getTree().getBinding().getRow(node);
				dijit.byId(formId).getBinding().bind(row);
			},

			/**
			 * @summary:
			 *		设置指定节点的显示值
			 * @param:
			 *		{unieap.tree.TreeNode} node
			 * @param:
			 * 		{string} treelabel  树的显示字段，在binding中配置的'label':'treelabel'
			 * @param:
			 * 		{string} text   设置的显示值
			 * @example:
			 * |	<div dojoType="unieap.tree.Tree" id="lazyTree"    label="UniEAP" ,
			 * |		binding = "{'leaf':'leaf','store':treeStoreForLazyLoad,'label':'treelabel',
			 * |		'parent':'parentID',query:{name:'parentID',relation:'=',value:''}}">
			 * |	</div>
			 * |
			 * |unieap.tree.setText(node,'treelabel',"abc");
			 */
			setText: function (node, treelabel, text) {
				var tree = node.getTree();
				var row = tree.getBinding().getRow(node);
				row.setItemValue(treelabel, text);
				tree.freshNodeLabel(node);
			}
		};

		/****************************Form 常用功能简单接口方法*************************************/
		unieap.form = {
			/**
			 *@summary:
			 *		给指定Form设置DataStore
			 *@description:
			 *		根据传入的表单ID、DataStore对象和行索引给表单绑定DataStore
			 *@param:
			 *		{string} formId  
			 * 		注意如果使用单帧框架此处一定要使用getRealId()方法来传formId，即unieap.form.setDataStore(getRealId("form"),"attr_empno");
			 *@param:
			 *		{unieap.ds.DataStore} store
			 * 		表单要绑定的DataStore对象
			 *@param:
			 * 		{string} bindIndex   默认值为0
			 * 		DataStore中指定的行索引，如果不传入该参数则默认给表单绑定DataStore的第一条数据
			 * @example:
			 * |<script>
			 * | var store = dataCenter.getDataStore("emp");
			 * | unieap.from.setDataStore(getRealId("form"),store);
			 * |</script>
			 * |<div dojoType="unieap.form.Form" id="form"></div>
			 */
			setDataStore: function (formId, store, bindIndex) {
				var form = dijit.byId(formId);
				if (!form) {
					return;
				}
				var binding = form.getBinding();
				bindIndex = bindIndex || 0;
				binding.setDataStore(store, bindIndex);
			},
			/**
			 *@summary:
			 *		获得Form绑定的DataStore中指定字段的值
			 *@param:
			 *		{string} formId  
			 * 	    注意如果使用单帧框架此处一定要使用getRealId()方法来传formId，即unieap.form.getPropertyValue(getRealId("form"),"attr_empno");
			 *@param:
			 *		{string} propertyName
			 * 		DataStore中指定的字段名字
			 * @example:
			 * |<script>
			 * | var ds=new unieap.ds.DataStore("emp",[
			 * |          	{attr_empno:"1000",NAME:"Rose",attr_job:"演员"},
			 * |            {attr_empno:"1076",NAME:"齐衷斯",attr_job:"技术总监"}]);
			 * | unieap.from.setDataStore("form",store);
			 * | var propertyValue = unieap.form.getPropertyValue(getRealId("form"),"attr_empno");
			 * | alert(propertyValue);
			 * |</script>
			 * |<div dojoType="unieap.form.Form" id="form"></div>
			 */
			getPropertyValue: function (formId, propertyName) {
				var form = dijit.byId(formId);
				if (!form) {
					return;
				}
				var row = form.getBinding().getRow(),
					propertyValue = row.getItemValue(propertyName);
				return propertyValue;
			}
		};

		/****************************Grid 常用功能简单接口方法*************************************/
		unieap.grid = {
			/**
			 * @summary:
			 * 		为表格设置数据源
			 * @param:
			 * 		{string} id 表格的id
			 * @param:
			 * 		{unieap.ds.DataStore} store 为表格设置的数据源
			 * @description：
			 * 		根据给定的表格id和store，为制定表格设置数据源，如果没有指定store，则为其绑定一个空的DataStore
			 * @example:
			 * |unieap.grid.setDataStore(getRealId("grid"), store);
			 * 在单帧框架下和多帧框架下都可以使用getRealId()方法获得控件正确的id，如果没有使用单帧，可以直接写控件id
			 * |unieap.grid.setDataStore("grid", store);
			 */
			setDataStore: function (id, store) {
				var grid = unieap.byId(id);
				if (null == grid) {
					return;
				}

				var gridBinding = grid.getBinding();

				if (store == null) {
					var store = new unieap.ds.DataStore(gridStore.getName());
					gridBinding.setDataStore(store);
					return;
				}

				gridBinding.setDataStore(store);
			},

			/**
			 * @summary:
			 * 		获取表格的数据源
			 * @param:
			 * 		{string} id 表格的id
			 * @return:
			 * 		{unieap.ds.DataStore} store 表格的数据源
			 * @example:
			 * |var store = unieap.grid.getDataStore("grid");
			 */
			getDataStore: function (id) {
				var grid = unieap.byId(id);
				if (!grid) {
					return null;
				}
				return grid.getBinding().getDataStore();
			},

			/**
			 * @summary:
			 * 		向grid中插入一个dataStore中的所有数据
			 * @description:
			 * 		往grid中插入数据后，Grid会自动刷新并且显示该数据
			 * 		如果不传入index参数,将在控件的最前面增加记录。
			 * @param:
			 * 		{string} id 表格的id
			 * @param:
			 * 		{unieap.ds.DataStore} store 要插入的数据对象
			 * @param:
			 * 		{number} index 设置在哪个位置插入数据
			 * @return:
			 * 		{boolean} 插入成功返回true，失败返回false
			 * @example:
			 * |unieap.grid.insertRows(getRealId("grid"), store, 4); //在第4行插入store中所有记录
			 */
			insertRows: function (id, store, index) {
				var grid = unieap.byId(id);
				if (!grid || !store) {
					return false;
				}
				var dataStore = grid.getBinding().getDataStore();
				if (!dataStore) {
					return false;
				}
				var rowSet = dataStore.getRowSet();
				var storeRowSet = store.getRowSet();
				var insertNum = storeRowSet && storeRowSet.getRowCount()
				if (storeRowSet && insertNum > 0) {
					for (var i = 0; i < insertNum; i++) {
						var row = storeRowSet.getRow(i).getData();
						if (index != null) {
							rowSet.insertRow(row, index + i, true);
						} else {
							rowSet.insertRow(row, null, true);
						}
					}

					rowSet.resetUpdate();
				} else {
					return false;
				}
				return true;
			},

			/**
			 * @summary:
			 * 		删除grid中所有选中的记录
			 * @description:
			 * 		只有当表格配置selection时，方法才可用
			 * @param:
			 * 		{string} id 表格的id
			 * @example:
			 * |unieap.grid.deleteSelectedRow(getRealId("grid"));
			 */
			deleteSelectedRow: function (id) {
				var grid = unieap.byId(id);
				if (!grid || grid.getBinding()) {
					return;
				}
				var dataStore = grid.getBinding().getDataStore();
				if (!dataStore) {
					return;
				}
				var rowSet = dataStore.getRowSet();
				rowSet.deleteSelectedRows();
				rowSet.resetUpdate();
			},

			/**
			 * @summary:
			 * 		删除grid中指定的一行
			 * @description:
			 * 		如果index为空，且配置了选择功能，则删除选中的第一条记录，否则将不会删除任何数据
			 * 		如果index不为空，则删除index指定的数据。如果index小于0或大于dataStore中数据个数，则不删除任何数据
			 * @param:
			 * 		{string} id 表格的id
			 * @param:
			 * 		{number} index 要删除行的索引
			 * @return:
			 * 		{unieap.ds.Row || null} 返回删除的row对象
			 * @example:
			 * |unieap.grid.deleteRow(getRealId("grid"), 4);
			 */
			deleteRow: function (id, index) {
				var grid = unieap.byId(id);
				if (!grid) {
					return false;
				}
				var dataStore = grid.getBinding().getDataStore();
				if (!dataStore) {
					return false;
				}
				var rowSet = dataStore.getRowSet();
				var row;
				if (index != null) {
					row = rowSet.deleteRow(index);
				} else {
					var sm = grid.getManager('SelectionManager');
					var indexs;
					sm && (indexs = sm.getSelectedRowIndexs());
					if (indexs && indexs.length > 0) {
						var delIndex = indexs[0];
						row = rowSet.deleteRow(delIndex);
					}
				}
				if (row) {
					rowSet.resetUpdate();
					return row;
				}
				return null;
			},

			/**
			 * @summary:
			 * 		删除grid中指定的多行数据
			 * @description:
			 * 		如果indexs为空，且配置了选择功能，则删除选中的所有记录，否则将不会删除任何数据
			 * 		如果indexs不为空，则删除indexs指定的数据。如果数组中的index小于0或大于dataStore中数据个数，则不删除其指定的行
			 * @param:
			 * 		{string} id 表格的id
			 * @param:
			 * 		{array} indexs 要删除行的索引数组
			 * @example:
			 * |unieap.grid.deleteRows(getRealId("grid"), [2,4,6]);
			 */
			deleteRows: function (id, indexs) {
				var grid = unieap.byId(id);
				if (!grid) {
					return;
				}
				var dataStore = grid.getBinding().getDataStore();
				if (!dataStore) {
					return;
				}
				var rowSet = dataStore.getRowSet();
				if (indexs && indexs.length > 0) {
					rowSet.deleteRows(indexs);
				} else {
					rowSet.deleteSelectedRows();
				}

				rowSet.resetUpdate();
			},

			/**
			 * @summary:
			 * 		根据给定store中一条数据，更新表格指定index行的所有行数据
			 * @description:
			 * 		如果index为空，且配置了选择功能，则更新选中的第一条记录，否则将不会更新任何数据
			 * 		如果index不为空，则更新index指定的行数据。如果index小于0或大于dataStore中数据个数，则不更新其指定的行
			 * @param:
			 * 		{string} id 表格的id
			 * @param:
			 * 		{unieap.ds.DataStore} store 要更新的源数据对象
			 * @param:
			 * 		{number} index 要更新行的索引
			 * @param:
			 * 		{number} storeIndex store中一条数据的索引，默认为第一条数据
			 * @return:
			 * 		{boolean}  更新成功返回true，失败返回false
			 * @example:
			 * |unieap.grid.updateRow(getRealId("grid"), store, 2);
			 */
			updateRow: function (id, store, index, storeIndex) {
				var grid = unieap.byId(id);
				if (!grid || !store) {
					return false;
				}
				var gridStore = grid.getBinding().getDataStore();
				if (!gridStore) {
					return false;
				}
				storeIndex = storeIndex || 0;
				var row = store.getRowSet().getRow(storeindex)
				if (!row) return false;
				var rowData = row.getData();
				var selectedRow = null;
				if (index) {
					selectedRow = gridStore.getRowSet().getRow(index);
				} else {
					var sm = grid.getManager('SelectionManager'),
						selIndexs;
					sm && (selIndexs = sm.getSelectedRowIndexs());
					if (selIndexs && selIndexs.length > 0) {
						var rowIndex = selIndexs[0];
						selectedRow = gridStore.getRowSet().getRow(rowIndex);
					} else {
						return false;
					}
				}
				if (selectedRow == null) {
					return false;
				}
				for (var key in rowData) {
					if (rowData[key] != null)
						selectedRow.setItemValue(key, rowData[key]);
				}
				gridStore.getRowSet().resetUpdate();
				return true;
			},

			/**
			 * @summary:
			 * 		根据给定store中一条数据，更新表格选中行的所有行数据
			 * @description:
			 * 		只有表格配置选择功能，才可用此方法
			 * @param:
			 * 		{string} id 表格的id
			 * @param:
			 * 		{unieap.ds.DataStore} store 要更新的源数据对象
			 * @param:
			 * 		{number} index store中一条数据的索引，默认为第一条数据
			 * @return:
			 * 		{boolean} 更新成功返回true，失败返回false
			 * @example:
			 * |unieap.grid.updateSelectedRow(getRealId("grid"), store);
			 */
			updateSelectedRow: function (id, store, index) {
				var grid = unieap.byId(id);
				if (!grid || !store) {
					return false;
				}
				index = index || 0;
				var row = store.getRowSet().getRow(index)
				if (!row) return false;
				var rowData = row.getData();
				var gridStore = grid.getBinding().getDataStore();
				var sm = grid.getManager('SelectionManager'),
					indexs;
				sm && (indexs = sm.getSelectedRowIndexs());
				if (!indexs) {
					return false;
				}
				var rowIndex = indexs[0];
				var selectedRow = gridStore.getRowSet().getRow(rowIndex);
				for (var key in rowData) {
					selectedRow.setItemValue(key, rowData[key]);
				}
				gridStore.getRowSet().resetUpdate();
				return true;
			},

			/**
			 * @summary:
			 * 		获得指定一行的数据，返回一个DataStore
			 * @description:
			 * 		如果index为空，且配置了选择功能，则获取到选中的第一条记录，否则返回null
			 * 		如果index不为空，则返回index指定的行数据。如果index小于0或大于dataStore中数据个数，则返回null
			 * @param:
			 * 		{string} id 表格的id
			 * @param:
			 * 		{boolean} clone 是否克隆原数据
			 * @param:
			 * 		{number} index 要获得行的索引
			 * @example:
			 * |unieap.grid.getRow(getRealId("grid"), true, 2);
			 */
			getRow: function (id, clone, index) {
				var grid = unieap.byId(id);
				if (!grid) {
					return null;
				}
				var store = grid.getBinding().getDataStore();
				if (!store) {
					return null;
				}
				var rowData = null;
				if (index != null) {
					var row = store.getRowSet().getRow(index);
					if (!row) {
						return null;
					}
					rowData = row.getData();
				} else {
					var sm = grid.getManager("SelectionManager"),
						rowIndexs;
					sm && (rowIndexs = sm.getSelectedRowIndexs());
					if (rowIndexs != null && rowIndexs.length > 0) {
						var index = rowIndexs[0];
						var row = store.getRowSet().getRow(index);
						if (!row) {
							return null;
						}
						rowData = row.getData();
					} else {
						return null;
					}
				}
				var ds = new unieap.ds.DataStore();
				ds.setName(store.getName());
				ds.setRowSetName(store.getRowSetName());
				ds.getRowSet().addRow(rowData, clone);

				return ds;
			},

			/**
			 * @summary:
			 * 		获得指定的一组数据，返回一个DataStore
			 * @description:
			 * 		如果indexs为空，且配置了选择功能，则获取到选中的所有记录，否则返回null
			 * 		如果indexs不为空，则返回indexs指定的所有行数据。
			 * @param:
			 * 		{string} id 表格的id
			 * @param:
			 * 		{boolean} clone 是否克隆原数据
			 * @param:
			 * 		{array} indexs 要获得行的索引数组
			 * @example:
			 * |unieap.grid.getRows(getRealId("grid"), true, [2,3,5]);
			 */
			getRows: function (id, clone, indexs) {
				var grid = unieap.byId(id);
				if (!grid) {
					return null;
				}
				var store = grid.getBinding().getDataStore();
				if (!store) {
					return null;
				}
				var rowData = null;
				var ds = new unieap.ds.DataStore();
				ds.setName(store.getName());
				ds.setRowSetName(store.getRowSetName());
				if (indexs && indexs.length > 0) {
					for (var i = 0; i < indexs.length; i++) {
						var row = store.getRowSet().getRow(indexs[i]);
						if (!row) {
							continue;
						}
						rowData = row.getData();
						ds.getRowSet().addRow(rowData, clone);
					}

				} else {
					var sm = grid.getManager("SelectionManager"),
						rowIndexs;
					sm && (rowIndexs = sm.getSelectedRowIndexs());
					if (rowIndexs != null && rowIndexs.length > 0) {
						for (var i = 0; i < rowIndexs.length; i++) {
							var row = store.getRowSet().getRow(rowIndexs[i]);
							if (!row) {
								continue;
							}
							rowData = row.getData();
							ds.getRowSet().addRow(rowData, clone);
						}
					} else {
						return null;
					}
				}

				return ds;
			},

			/**
			 * @summary:
			 * 		交换指定的两行数据
			 * @description:
			 * 		如果index1或index2为空或不是合法的索引，则不交换数据
			 * @param:
			 * 		{string} id 表格的id
			 * @param:
			 * 		{number} index1
			 * @param:
			 * 		{number} index2
			 * @return:
			 * 		{boolean} 交换成功，返回true，失败则返回false
			 * @example:
			 * |unieap.grid.exchangeRow(getRealId("grid"), 1, 2);
			 * 交换第2行和第三行的数据
			 */
			exchangeRow: function (id, index1, index2) {
				var grid = unieap.byId(id);
				if (!grid) {
					return false;
				}
				var store = grid.getBinding().getDataStore();
				if (!store) {
					return false;
				}
				var rowSet = store.getRowSet();
				if (typeof (index1) != 'number' || typeof (index2) != 'number') {
					return false;
				}
				var row1 = rowSet.getRow(index1);
				var row2 = rowSet.getRow(index2);
				if (row1 && row2) {
					rowSet.updateRow(index1, row2);
					rowSet.updateRow(index2, row1);
					rowSet.resetUpdate();
					return true;
				}
				return false;
			},

			/**
			 * @summary:
			 * 		设置grid单元格内容
			 * @param:
			 * 		{string} id 表格的id
			 * @param:
			 * 		{string} cell 单元格(即jsp中cell)的name或序号（注序号从0开始）
			 * @param:
			 * 		{number} rowIndex 行索引
			 * param:
			 * 		{number} value 赋给单元格的值
			 * @example:
			 * |unieap.grid.setPropertyValue(getRealId("grid"), 1, 2, "张三");
			 * 将第3行第2个单元格的内容设置为"张三"
			 */
			setPropertyValue: function (id, cell, rowIndex, value) {
				var grid = dijit.byId(id);
				if (!grid) {
					return;
				}
				var viewManager = grid.getViewManager();
				viewManager.setItemText(cell, rowIndex, value);
			},

			/**
			 * @summary:
			 * 		获得grid单元格内容
			 * @param:
			 * 		{string} id 表格的id
			 * @param:
			 * 		{string} cell 单元格(即jsp中cell)的name或序号（注序号从0开始）
			 * @param:
			 * 		{number} rowIndex 行索引
			 * param:
			 * 		{boolean} isOrigin 是否获得格式化前的值,如果值不为true则获的是格式化之后的值
			 * @return:
			 * 		{string} 指定单元格的内容
			 * @example:
			 * |var data = unieap.grid.getPropertyValue(getRealId("grid"), 1, 2, true);
			 * 获取第3行第2个单元格的格式化前的内容
			 */
			getPropertyValue: function (id, cell, rowIndex, isOrigin) {
				var grid = dijit.byId(id);
				if (!grid) {
					return;
				}
				var viewManager = grid.getViewManager();
				return viewManager.getItemText(cell, rowIndex, isOrigin);
			},

			/**
			 * @summary:
			 * 		获得Cell上配置的编辑器
			 * @param:
			 * 		{string} id 表格的id
			 * @param:
			 * 		{number|string} cell 单元格(即jsp中cell)的name或序号（注序号从0开始）
			 * @return:
			 * 		{unieap.form.FormWidget || null}
			 * @example:
			 * |<cell editor="{editorClass:'unieap.form.TextBox'}" name="attr_sal"></cell>
			 * |var editor=unieap.grid.getCellEditor(getRealId("grid"),"attr_sal");
			 * |alert(editor.declaredClass); //弹出unieap.form.TextBox
			 */
			getCellEditor: function (id, cell) {
				var grid = dijit.byId(id),
					cell;
				if (!grid || (cell = grid.getCell(cell))) {
					return null;
				}
				return cell.getEditor();
			},

			/**
			 * @summary:
			 * 		设置Cell上的编辑器
			 * @param:
			 * 		{string} id 表格的id
			 * @param:
			 * 		{number|string} cell 单元格(即jsp中cell)的name或序号（注序号从0开始）
			 * @param:
			 * 		{string}editorClass
			 * @param:
			 * 		{object} editorProps
			 * @example:
			 * |<cell editor="{editorClass:'unieap.form.TextBox'}" label="姓名" name="attr_sal"></cell>
			 * |//将姓名列的编辑器改为NumberTextBox,并设置编辑器能输入的最大长度为10
			 * |var cell=unieap.grid.setCellEditor("grid","attr_sal","unieap.form.NumberTextBox",{maxLength:10});
			 */
			setCellEditor: function (id, cell, editorClass, editorProps) {
				var grid = dijit.byId(id),
					cell;
				if (!grid || (cell = grid.getCell(cell))) {
					return null;
				}
				cell.setEditor(editorClass, editorProps);
			},

			/**
			 * @summary:
			 * 		设置表格结构
			 * @param:
			 * 		{string} id 表格的id
			 * @param：
			 * 		{array} inStructure
			 * @example:
			 *  |	layout = unieap.grid.setStructure("grid", s);
			 * 	|	grid.getManager("ViewManager").refresh();
			 */
			setStructure: function (id, inStructure) {
				var grid = dijit.byId(id);
				if (!grid || !grid.getManager("LayoutManager")) {
					return;
				}
				grid.getManager("LayoutManager").setStructure(inStructure);
			},

			/**
			 * @summary:
			 * 		获得表格结构
			 * @param:
			 * 		{string} id 表格的id
			 * @return：
			 * 		{array} inStructure
			 * @example:
			 *  |	layout = unieap.grid.getStructure("grid", s);
			 */
			getStructure: function (id) {
				var grid = dijit.byId(id);
				if (!grid || !grid.getManager("LayoutManager")) {
					return null;
				}
				return grid.getManager("LayoutManager").getStructure();
			},

			/**
			 * @summary:
			 * 	列隐藏
			 * @param:
			 * 	{string} id 表格的id
			 * @param:
			 * 	{array} cols
			 * @description:
			 * 	参数cols代表被隐藏列的数组,
			 * 	形如:[2,4](数字为列的原始序号,第2列和4列将被隐藏),["col1", "col3", "col2"](字符串为列的id或者securityId)
			 * @example:
			 * |	unieap.grid.hideCell("grid", ["col1", "col3", "col2"]);
			 */
			hideCell: function (id, cols) {
				var grid = dijit.byId(id);
				if (!grid || !grid.getManager("LayoutManager")) {
					return null;
				}
				grid.getManager("LayoutManager").hideCell(cols);
			},

			/**
			 * @summary:
			 * 	列显示
			 * @param:
			 * 	{string} id 表格的id
			 * @param:
			 * 	{array} cols
			 * @description:
			 * 	参数cols代表被显示列的数组,
			 * 	形如:[2,4](数字为列的原始序号,第2列和4列将被显示),["col1", "col3", "col2"](字符串为列的id或者securityId)
			 * @example:
			 * |	unieap.grid.showCell("grid", ["col1", "col3", "col2"]);
			 */
			showCell: function (id, cols) {
				var grid = dijit.byId(id);
				if (!grid || !grid.getManager("LayoutManager")) {
					return null;
				}
				grid.getManager("LayoutManager").showCell(cols);
			},

			/**
			 * @summary:
			 * 	调整Grid各列的次序
			 * @param:
			 * 	{string} id 表格的id
			 * @param:
			 * 	{array} sequence 
			 * @param:
			 * 	{number} fixedNum
			 * @description:
			 * 	参数sequence为列顺序数组, 
			 * 	形如:[4,2,3,1,0](数字为列的原始序号),["col1", "col3", "col2"](字符串为列的id)
			 * 	参数fixedNum为锁定列数
			 * 	如：sortCell([4,2,1,0,3],2)
			 * @example:
			 * |	unieap.grid.sortCell("grid", ["col1", "col3", "col2"], ${1}2);
			 * ${1}表示锁定前两列
			 */
			sortCell: function (id, sequence, fixedNum) {
				var grid = dijit.byId(id);
				if (!grid || !grid.getManager("LayoutManager")) {
					return null;
				}
				grid.getManager("LayoutManager").sortCell(sequence, fixedNum);
			},

			/**
			 * @summary:
			 * 	列锁定/解锁
			 * @param:
			 * 	{string} id 表格的id
			 * @param:
			 * 	{array} cols
			 * @param:
			 * 	{boolean} isLock
			 * @description:
			 * 	参数cols代表被锁定列的数组,
			 * 	形如:[4,2](数字为列的原始序号,第2列和4列将被锁定),["col1", "col3", "col2"](字符串为列的id或者securityId)
			 * 	参数isLock设置操作类型为锁定还是解锁,可不写,默认为锁定。
			 * @example:
			 * |	unieap.grid.sortCell("grid", ["col1", "col3", "col2"], true);
			 */
			lockCell: function (id, cols, isLock) {
				var grid = dijit.byId(id);
				if (!grid || !grid.getManager("LayoutManager")) {
					return null;
				}
				grid.getManager("LayoutManager").lockCell(cols, isLock);
			},

			/**
			 * @summary:
			 * 		取得某个单元格的Dom结点
			 * @param:
			 * 	{string} id 表格的id
			 * @param:
			 * 		{string|number} inCell 列绑定名称或者列索引号
			 * @param:
			 * 		{number} inRowIndex 单元格所在的行索引
			 * @return:
			 * 		{domNode}
			 * @example:
			 * |//获得Grid中第一行列绑定名为attr_sal的单元格所在的domNode
			 * |var cellNode=unieap.grid.getCellNode("grid","attr_sal",0); 
			 */
			getCellNode: function (id, inCell, inRowIndex) {
				var grid = dijit.byId(id);
				if (!grid || !grid.getManager("ViewManager")) {
					return null;
				}
				return grid.getManager("ViewManager").getCellNode(inCell, inRowIndex);
			},

			/**
			 * @summary:
			 * 		获得指定单元格的内容
			 * @param:
			 * 		{string} id 表格的id
			 * @param:
			 * 		{string|number} inCell 列绑定名称或者列索引号
			 * @param:
			 * 		{number} inRowIndex 单元格所在的行索引
			 * @param：
			 * 		{boolean} isOrigin 是否获得格式化前的值
			 * @example:
			 * |//获得第一行、第一列单元格中的数据
			 * |var text=unieap.grid.getItemText("grid",0,0);
			 * |//获得第一行行中列绑定名为attr_sal的单元格的值
			 * |var text1=grid.getManager('ViewManager').getItemText("attr_sal",0);
			 * @example:
			 * |var txt=unieap.grid.getItemText("grid","attr_sal",0);
			 * |var txt1=unieap.grid.getItemText("grid","attr_sal",0,true);
			 * |比如单元格的显示值格式化成'5,000.00',txt的值就为'5,000.00',而txt1为'5000'.
			 */
			getItemText: function (id, inCell, inRowIndex, isOrigin) {
				var grid = dijit.byId(id);
				if (!grid || !grid.getManager("ViewManager")) {
					return null;
				}
				return grid.getManager("ViewManager").getItemText(inCell, inRowIndex, isOrigin);
			},

			/**
			 * @summary:
			 * 		设置指定单元格样式(合并单元格暂不支持该方法设置样式)
			 * @param:
			 * 		{string} id 表格的id
			 * @param:
			 * 		{number} inRowIndex  单元格所在的行索引 
			 * @param:
			 * 		{string|number} cell 列绑定名称或者列索引号
			 * @param:
			 * 		{object} styles 样式对象
			 * @example:
			 * |//设置Grid中第一行中列绑定名为attr_sal的单元格的样式
			 * |unieap.grid.setCellStyles("grid", 0,"attr_sal",{"color":"red","textAlign":"left"});
			 */
			setCellStyles: function (id, inRowIndex, inCell, styles) {
				var grid = dijit.byId(id);
				if (!grid || !grid.getManager("ViewManager")) {
					return null;
				}
				grid.getManager("ViewManager").setCellStyles(inRowIndex, inCell, styles);
			},

			/**
			 * @summary:
			 * 		设置指定行样式(合并单元格暂不支持该方法设置样式)
			 * @param:
			 * 		{string} id 表格的id
			 * @param：
			 * 		{number} inRowIndex 行索引号
			 * @param:
			 * 		{object} styles 样式对象
			 * @example:
			 * |//设置Grid中第一行的样式
			 * |unieap.grid.setRowStyles(getRealId("grid"),0,{"color":"red","textAlign":"left"});
			 */
			setRowStyles: function (id, inRowIndex, styles) {
				var grid = dijit.byId(id);
				if (!grid || !grid.getManager("ViewManager")) {
					return null;
				}
				grid.getManager("ViewManager").setRowStyles(inRowIndex, styles);
			},

			/**
			 * @summary:
			 * 		取得grid当前行号
			 * @param:
			 * 		{string} id 表格的id
			 * @return:
			 * 		{number}
			 * @example:
			 *|	unieap.grid.getCurrentRowIndex(getRealId("grid")); 
			 */
			getCurrentRowIndex: function (id) {
				var grid = dijit.byId(id);
				if (!grid || !grid.getManager("RowManager")) {
					return null;
				}
				return grid.getManager("RowManager").getCurrentRowIndex();
			},

			/**
			 * @summary:
			 * 		取得表格总行数
			 * @param:
			 * 		{string} id 表格的id
			 * @return:
			 * 		{number}
			 * @example:
			 *|	unieap.grid.getRowCount(getRealId("grid")); 
			 */
			getRowCount: function (id) {
				var grid = dijit.byId(id);
				if (!grid || !grid.getManager("RowManager")) {
					return null;
				}
				return grid.getManager("RowManager").getRowCount();
			},

			/**
			 * @summary:
			 * 		设置当前行
			 * @param:
			 * 		{string} id 表格的id
			 * @param：
			 * 	{number} inRowIndex行号
			 * @example:
			 *|	unieap.grid.setCurrentRow(getRealId("grid"), 5);
			 * 设置第6行为当前行 
			 */
			setCurrentRow: function (id, inRowIndex) {
				var grid = dijit.byId(id);
				if (!grid || !grid.getManager("RowManager")) {
					return null;
				}
				return grid.getManager("RowManager").setCurrentRow(inRowIndex);
			}
		};

		/**
		 * @summary:
		 * 		获取当前菜单Tab页window
		 * @description:
		 * 		在V4的菜单框架中使用，用于获取当前页面所在的window对象
		 * @return
		 * 		{object} window 当前页面所处的window对象
		 */
		unieap.getCurrentTabWin = function () {
			var framePageContainer = unieap.getTopWin().unieap.byId("framePageContainer");
			if (typeof framePageContainer != 'undefined' && framePageContainer.getSelectedTab()) {
				var currentTab = framePageContainer.getSelectedTab().NavigatorContainer ? framePageContainer.getSelectedTab().NavigatorContainer.getSelectedTab() : framePageContainer.getSelectedTab();
				return currentTab.getContentWindow();
			} else {
				return window;
			}
		}

		/**
		 * @summary:
		 * 		获取当前菜单Tab页容器
		 * @description:
		 * 		在V4的菜单框架中使用，用于获取当前页面所在的导航容器
		 * @return
		 * 		{object} NavigatorContainer 当前页面所处的导航容器
		 */
		unieap.getCurrentNavigatorContainer = function (preview) {
			var framePageContainer = null;
			if (preview) {
				return unieap.byId("navigatorContainerHelpInfo");
			} else {
				framePageContainer = unieap.getTopWin().unieap.byId("framePageContainer");
			}
			if (typeof framePageContainer != 'undefined' && framePageContainer.getSelectedTab()) {
				var currentTab = framePageContainer.getSelectedTab().NavigatorContainer;
				return currentTab;
			} else {
				return null;
			}
		}

		/***
		 * 获取当前 Tab 页面的上下文
		 * @param rootId
		 * @returns {string}
		 */
		unieap.getCurrentPage = function (rootId) {
			var page = {};

			var obj = unieapViewContextHolder[rootId];
			//单帧页面上下文
			if (obj) {
				dojo.mixin(page, obj[0])
			}

			return page;
		};

		// 给架构用，非延时情况下，获取rootID
		unieap.getCurrentRootNodeId = function (preview) {
			var rootNodeId = "";
			var framePageContainer = null;
			if (preview) {
				framePageContainer = unieap.byId("navigatorContainerHelpInfo");
				if (typeof framePageContainer != 'undefined' && framePageContainer.getSelectedTab()) {
					var currentTab = framePageContainer.getSelectedTab().NavigatorContainer ? framePageContainer.getSelectedTab().NavigatorContainer.getSelectedTab() : framePageContainer.getSelectedTab();
					if (currentTab && framePageContainer._currentNodeOfSingleFrameId) {
						rootNodeId = framePageContainer._currentNodeOfSingleFrameId;
					} else {
						rootNodeId = currentTab.id;
					}
				}
			} else {
				framePageContainer = unieap.getTopWin().unieap.byId("framePageContainer");
				if (typeof framePageContainer != 'undefined' && framePageContainer.getSelectedTab()) {
					var currentTab = framePageContainer.getSelectedTab().NavigatorContainer ? framePageContainer.getSelectedTab().NavigatorContainer.getSelectedTab() : framePageContainer.getSelectedTab();
					if (currentTab && dojo.attr(currentTab.domNode, "xhr")) {
						if (typeof (_currentNodeOfSingleFrame) != "undefined" && _currentNodeOfSingleFrame != null) {
							rootNodeId = _currentNodeOfSingleFrame.id;
						}
					} else if (currentTab) {
						var xdialog = unieap.getXDialog();
						if (xdialog) {
							rootNodeId = xdialog.id;
						}
					}
				}
			}
			return rootNodeId;
		}


		/**
		 * @summary:
		 * 		在菜单栏打开一个新的窗口
		 * @param:
		 * 		{string} menuPath 页面路径，只能是工程中的页面，如百度这样类似的页面不能用此方法
		 * @param：
		 * 		{string} id  页面标识，用户自定义，保障每个页面都不相同
		 * @param：
		 * 		{string} menuLabel  页面标题
		 * @param：
		 * 		{string} method  规定发送http请求的方式，默认是get,也可以是post
		 *
		 */
		unieap.open = function (path, id, label, method) {
			//增加对unieap.open的页面授权 U_EAP00029637
			var framePageContainer = unieap.byId("framePageContainer") || unieap.getTopWin().unieap.byId("framePageContainer");
			var navigatorContainer = framePageContainer.getSelectedTab().NavigatorContainer;
			if (navigatorContainer && navigatorContainer.id) {
				if (path.indexOf("?") == -1) {
					path += "?unieapMenuId=" + navigatorContainer.id.substring("navigatorContainer".length);
				} else {
					path += "&unieapMenuId=" + navigatorContainer.id.substring("navigatorContainer".length);
				}
			}
			unieap.openMenu(path, id, label, method);
		}


		unieap.openMenu = function (path, id, label, type) {
			var topWin = unieap.getTopWin();
			var menu = {
				id:id,
				url:path,
				title:label,
				type:type
			};
			if (topWin.app && topWin.app.openFictionMenu){
				topWin.app.openFictionMenu(menu);
			}
/*			var node = {};
			node.item = {};
			var data = {}
			node.item.data = data;
			data.location = path;
			data.id = id;
			data.label = label;
			data.method = method;
			if (topWin.unieap.clickMenuNode) {
				topWin.unieap.clickMenuNode(node);
			}*/
		};

		unieap.openMenuByCode = function (code,param) {
			var topWin = unieap.getTopWin();
			if (code) {
				topWin.app.openMenuById(code,param);
			}
		};
		unieap.rsaString = function(code){
			var topWin = unieap.getTopWin();
			if (code) {
				return topWin.app.rsaString(code);
			}
		};
		unieap.changeCurrentTabTitle = function(title){
			if (window.app && window.app.changeCurrentTabTitle){
				window.app.changeCurrentTabTitle(title);
			}
		};
		unieap.changeTabTitleById = function(id,title){
			if (window.app && window.app.changeTabTitleById){
				window.app.changeTabTitleById(id,title);
			}
		};
		/**
		 * @summary:
		 * 		在菜单栏中关闭指定窗口
		 * @param：
		 * 		{string} id  页面标识
		 *
		 */
		unieap.close = function (id) {
			var topWin = unieap.getTopWin();
			var framePageContainer = topWin.unieap.byId("framePageContainer");
			if (framePageContainer) {
				var children = framePageContainer.getChildren();
				if (dojo.some(children, function (child) {
						if (child.pageId == "page_" + id) {
							framePageContainer.closeChild(child);
							return true;
						}
					})) return;
			}
		};
		//2018.9.11 sxf  增加showLoading统一调用
		unieap.showPageLoading = function (isShow, title) {
			unieap.showLoading(isShow);
		};

		unieap._calStringWidth = function (str) {
			if (typeof (str) != 'string') {
				str = str + "";
			}
			if (str.indexOf('grid-edit-required') != -1) {
				str = str.replace('<span class="grid-edit-required">*</span>', '');
				//str = unieap._calText(str);
			}
			if (str.indexOf('<br>') > 0) {
				var maxLength = 0;
				$.each(str.split('<br>'), function (index, _str) {
					var length = unieap._calStringWidth(_str);
					maxLength = length > maxLength ? length : maxLength;
				});
				return maxLength;
			} else {

				var stringStr = str.toString();

				//return stringStr.replace(/[^\x00-\xff]/g,"xx").length * 8;

				var zwMatch = stringStr.match(/[^\x00-\xff]/g);
				var zwLength = zwMatch ? zwMatch.length : 0;

				var AZMatch = stringStr.match(/[A-Z]/g);
				var AZLength = AZMatch ? AZMatch.length : 0;

				var outherLength = stringStr.length - zwLength - AZLength;
				//中文 12 大写英文10 其他 7
				return outherLength * 8 + zwLength * 14 + AZLength * 10;
			}
			/*
			var stringStr = str.toString();
			//中文 12 的长度
			var ZW_REG = /[\u4e00-\u9fa5]/g;
			var ZW_LENGTH = '<><><><><><>';
			//大写英文 8 的长度
			var A_Z_REG = /[A-Z]/g;
			var A_Z_LENGTH = '<><><><>';
			//小写英文 和数字 和其他 7 的长度
			var OUTHER_REG = /[^\u4e00-\u9fa5a-zA-Z]/g;
			var OUTHER_LENGT = '<><><><';
			return stringStr.replace(OUTHER_REG,OUTHER_LENGT).replace(A_Z_REG,A_Z_LENGTH).replace(ZW_REG,ZW_LENGTH).length;
			*/
		};
		//检测是否是谷歌内核(可排除360及谷歌以外的浏览器)
		unieap.isChrome = function () {
			var ua = navigator.userAgent.toLowerCase();
			return ua.indexOf("chrome") > 1;
		}
		//检测是否是IE浏览器
		unieap.IEVersion  = function(){
			var userAgent = navigator.userAgent; //取得浏览器的userAgent字符串
					var isIE = userAgent.indexOf("compatible") > -1 && userAgent.indexOf("MSIE") > -1; //判断是否IE<11浏览器
					var isEdge = userAgent.indexOf("Edge") > -1 && !isIE; //判断是否IE的Edge浏览器
					var isIE11 = userAgent.indexOf('Trident') > -1 && userAgent.indexOf("rv:11.0") > -1;
					if(isIE) {
						var reIE = new RegExp("MSIE (\\d+\\.\\d+);");
						reIE.test(userAgent);
						var fIEVersion = parseFloat(RegExp["$1"]);
						if(fIEVersion == 7) {
							return 7;
						} else if(fIEVersion == 8) {
							return 8;
						} else if(fIEVersion == 9) {
							return 9;
						} else if(fIEVersion == 10) {
							return 10;
						} else {
							return 6;//IE版本<=7
						}   
					} else if(isEdge) {
						return 'edge';//edge
					} else if(isIE11) {
						return 11; //IE11
					}else{
						return -1;//不是ie浏览器
					}
		}
		//测试mime
		unieap.mime = function (option, value) {
			var mimeTypes = navigator.mimeTypes;
			for (var mt in mimeTypes) {
				if (mimeTypes[mt][option] == value) {
					return true;
				}
			}
			return false;
		}
		/**
		 * @summary:
		 * 		刷新表格当页面也数据 保证表格当前分页值和数据值的正确
		 * @param：
		 * 		{string} id  页面标识（全ID）
		 * @example:
		 *  vadp过程调用中调用该方法 需要传组件全id
		 *  unieap.refreshGridData(view._rootNodeId+'grid1');
		 *  按照当前页面刷新当前分页值的页面信息
		 */
		unieap.refreshGridData = function (id) {
			var grid = unieap.byId(id);
			if (!grid) {
				MessageBox.alert({
					type: "error",
					message: 'refreshGridData()方法未找到ID值'
				});
				return;
			}
			var pagingManager = grid.getManager('PagingManager');
			if (!pagingManager) {
				MessageBox.alert({
					type: "error",
					message: '该表格未配置分页信息,不支持此方法'
				});
				return;
			}
			var binding = grid.getBinding();
			var rowCount = binding.getRowCount();
			var pageNub = pagingManager.getPageNumber();
			var totalPage = pagingManager.getTotalPage();
			var toPage;
			if (rowCount <= 1 && totalPage == pageNub && pageNub > 1) {
				toPage = totalPage - 1;
			} else {
				toPage = pageNub;
			}
			pagingManager.setPageNumber(toPage);

		}


	})();
}
dojo.provide("unieap.ds.Constants");
unieap.ds.Status = {
     NEWMODIFIED: 1,
     NOTMODIFIED: 2,
     DATAMODIFIED: 3
 };
 unieap.ds.Buffer = {
      PRIMARY: 0,
      FILTER: 1,
      DELETE: 2
 };

if(!dojo._hasResource["unieap.ds.Row"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
	dojo._hasResource["unieap.ds.Row"] = true;
	dojo.provide("unieap.ds.Row");
	(function(){
		//rowHelper对象
		var __status = unieap.ds.Status;
		var __buffer = unieap.ds.Buffer;
		var _rf = {};
		_rf._getRowStatus = function(row){
			return row._t || __status.NOTMODIFIED;
		}
		_rf._setRowStatus = function(row, status){
			row._t = status;
		}
		_rf._isRowSelected = function(row){
			return (row._s == true);
		}
		_rf._setRowSelected = function(row, selected){
			row._s = selected;
		}
		
		_rf._getItemValue = function(row, name){
			return row[name];
		}
		_rf._getItemOrigValue = function(row, name){
			if ((row._o == null) || (typeof row._o[name] == "undefined")) 
				return _rf._getItemValue(row, name);
			return row._o[name];
		}
		_rf._setItemValue = function(row, name, value, nullable){
			var old = name in row ? row[name]:null;
			//公卫：nullable为false时，value不可以为null，应该将""或者null统一改为""
			value = nullable ? value : (value === "" || value === null ? "" : value);
			if (old === value || (old==null&&value==='')) 
				return;
			row[name] = value;
			if (!row._o) {
				(row._o = {})[name] = old;
			}
			else {
				if (!(name in row._o)) {
					row._o[name] = old;
				}
				else 
					if (value == row._o[name]) {
						delete row._o[name];
						unieap.isEmpty(row._o) && delete row._o;
					}
			}
			if (_rf._getRowStatus(row) != __status.NEWMODIFIED) {
				if (row._o) {
					_rf._setRowStatus(row, __status.DATAMODIFIED);
				}
				else {
					delete row._t;
				}
			}
			return true;
			
		}
		_rf._isItemChanged = function(row, name){
			if (!row._o || !(name in row._o)) 
				return false;
			if (row._o[name]==''&&row[name]==null&&dojo.isString(row._o[name])) return false;
			if (row._o[name]==null&&row[name]==''&&dojo.isString(row[name])) return false;
			return (row._o[name] != row[name]);
		}
		
		_rf._resetUpdate = function(row){
			delete row._t;
			delete row._o;
		}
		// 字符串的下划线格式转驼峰格式，eg：hello_world => helloWorld
		_rf._underline2Hump=function(s) {
			return s.replace(/_(\w)/g, function(all, letter) {
				return letter.toUpperCase()
			})
		}

	
		dojo.declare("unieap.ds.Row", null, {
			/**
			 * @declaredClass:
	 		 * 		unieap.ds.Row
			 * @description:
			 * 		Row是指RowSet中的一行，类似于关系数据库中Table的一行记录Row(Record)。
			 * 		它是一个客户端内部数据容器，与服务器端不进行直接交互。
			 * @example：
			 * |	${1}new unieap.ds.Row(rowset,{key:'value',key2:'value2'},0)
			 * 	${1}创建了一条数据
			 * @img:
			 * 		images/ds/row.png
			 */ 
			
			
			/** 
			 * @summary:
			 * 		Row的构造函数
			 * @param 
			 * 		{unieap.ds.RowSet} rowset 
			 * 		该Row对象所在的RowSet对象
			 * @param
			 * 		{object} data 
			 * 		Row的初始化数据
			 * @param 
			 * 		{number} index 
			 * 		该Row在RowSet中的索引，索引从0开始
			 * @example：
			 * |	${1}new unieap.ds.Row(rowset,{key:'value',key2:'value2'},0)
			 * ${1}创建了一条数据
			 */
			constructor  : function(rowset, data, index){
				(this.rowset = rowset) && (this._e = (rowset.onItemChanging || rowset.onItemChanged));
				this.data = data;
				this.index = index;
			},
			
			/**
			 * @summary:
			 *		取得当前Row对象的状态
			 * @description:
			 * 		unieap.ds.Status.NEWMODIFIED=1;
			 * 		unieap.ds.Status.NOTMODIFIED=2;
			 * 		unieap.ds.Status.DATAMODIFIED=3;
			 * @return 
			 * 		{Integer} 
			 * 		行状态。如果该行数据没有状态标志，则默认为"未修改"状态。
			 * @example:
			 * |	${1}var ds=new unieap.ds.DataStore("emp",[
			 * |	                               {attr_empno:"1000",NAME:"Rose",attr_job:"xx"},
			 * |	                               {attr_empno:"1076",NAME:"齐衷斯",attr_job:"技术总监"}]);
			 * |	
			 * |	${2}function row_getRowStatus(){
			 * |	    var rowset = ds.getRowSet();
			 * |	    var row = rowset.getRow(0);
			 * |	${3}row.setItemValue("NAME","刘德华");
			 * |	    getStatus(row);
			 * |	    var notModifiedRow = rowset.getRow(1);
			 * |	    getStatus(notModifiedRow);
			 * |	${4}rowset.addRow({attr_empno:"1003",NAME:"张靓颖",attr_job:"歌手"}); 
			 * |	${5}var newRow = rowset.getRow(2); 
			 * |	    getStatus(newRow);
			 * |	}
			 * |	function getStatus(row){
			 * |	    if(row.getRowStatus()==1){
			 * |	        alert("该row的状态为：NEWMODIFIED，即新增数据!");
			 * |	    }else if(row.getRowStatus()==2){
			 * |	        alert("该row的状态为：NOTMODIFIED，即数据没有发生变化!")
			 * |	    }else if(row.getRowStatus()==3){
			 * |	        alert("该row的状态为：DATAMODIFIED，即数据已被修改!");
			 * |	    }
			 * |	}
			 * |	${6}<input type="button" name="getRowStatus" value="getRowStatus" onclick="row_getRowStatus()" />
			 * ${1}定义一个DataStore
			 * ${2}定义button的onclick事件
			 * ${3}修改了第一行数据“NAME”字段的值
			 * ${4}往rowset中添加一条记录
			 * ${5}获取新增的row
			 * ${6}定义一个button
			 */
			getRowStatus : function ()
			{
				return _rf._getRowStatus(this.data);
			},
			
			/**
			 * @summary:
			 * 		设置当前Row对象的状态
			 * @param
			 * 		{number} status 
			 * 		状态标志
			 * @example:
			 * |	${1}var ds=new unieap.ds.DataStore("emp",[
			 * |	                               {attr_empno:"1000",NAME:"Rose",attr_job:"xx"},
			 * |	                               {attr_empno:"1076",NAME:"齐衷斯",attr_job:"技术总监"}]);
			 * |	
			 * |	${2}function row_setRowStatus(){
			 * |		var rowset = ds.getRowSet();
			 * |		var row = rowset.getRow(0);
			 * |		unieap.debug(row);
			 * |		row.setRowStatus(3);
			 * |		unieap.debug(row);
			 * |	}
			 * |	${3}<input type="button" name="setRowStatus" value="setRowStatus" onclick="row_setRowStatus()" />
			 *  ${1}定义一个DataStore
			 *  ${2}定义button的onclick事件
			 *  ${3}定义一个button
			 */
			setRowStatus : function (status)
			{
				_rf._setRowStatus(this.data, status);
			},
			
			/**
			 * @summary:
			 * 		判断当前Row对象是否是被选中状态
			 * @description:
			 * 		选择状态是相对于页面而言，譬如页面的checkBox元素。
			 * @return: 
			 * 		{boolean} 
			 * 		选中则为true 
			 * @example:
			 * |	var ds=new unieap.ds.DataStore("emp",[
			 * |	               {attr_empno:"1000",NAME:"1212",attr_job:"xx"},
			 * |	               {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",_s:true},   
			 * |	               ${1}{attr_empno:"1002",NAME:"张韶涵",attr_job:"歌星",_s:true}]); 
			 * |	var rowset = ds.getRowSet();
			 * |	var row = rowset.getRow(1);
			 * |	${2}alert(row.isRowSelected()); 
			 * ${1}状态位_s：true 表示该row被选中
			 * ${2}判断该行是否被选中，本例返回true
			 */
			isRowSelected : function ()
			{
				return _rf._isRowSelected(this.data);
			},
			
			/**
			 * @summary:
			 * 		设置当前Row对象的选择状态
			 * @param 
			 * 		{boolean} 
			 * 		selected=true：选择，selected=false：取消选择
			 * @example:
			 * |	${1}var ds=new unieap.ds.DataStore("emp",[
			 * |	                               {attr_empno:"1000",NAME:"Rose",attr_job:"xx"},
			 * |	                               {attr_empno:"1076",NAME:"齐衷斯",attr_job:"技术总监"}]);
			 * |	
			 * |	${2}function row_setRowSelected(){
			 * |		var rowset = ds.getRowSet();
			 * |		var row = rowset.getRow(0);
			 * |		unieap.debug(row);
			 * |		row.setRowSelected(true);
			 * |		unieap.debug(row);
			 * |	}
			 * |	${3}input type="button" name="setRowSelected" value="setRowSelected" onclick="row_setRowSelected()" />
			 *  ${1}定义一个DataStore
			 *  ${2}定义button的onclick事件
			 *  ${3}定义一个button
			 */
			setRowSelected : function (selected)
			{
				_rf._setRowSelected( this.data, selected);
			},
			
			
			/**
			 * @summary:
			 * 		获取Row内所有数据
			 * @description:
			 * 		也可以通过Row.data获取
			 * @return 
			 * 		{object} 
			 * 		具有键值对的数据对象
			 * @example:
			 * |	${1} var ds=new unieap.ds.DataStore("emp",[
			 * |	                                   {attr_empno:"1000",NAME:"1212",attr_job:"xx"},
			 * |	                                   {attr_empno:"1076",NAME:"齐衷斯",attr_job:"技术总监"}]);
			 * |	
			 * |	${2}function row_getData(){
			 * |		var rowset = ds.getRowSet();
			 * |		var row = rowset.getRow(0);
			 * |		row.getData();
			 * |	}
			 * |	${3}<input type="button" name="getData" value="getData" onclick="row_getData()" />
			 * 	${1} 定义一个DataStore
			 *  ${2}定义button的onclick事件
			 *  ${3}定义一个button
			 */
			getData: function() {
				return this.data;
			},
			
			/**
			 * @summary:
			 * 		取得当前行所属的RowSet对象
			 * @description:
			 * 		也可以通过Row.rowset得到
			 * @return 
			 * 		{unieap.ds.RowSet} 
			 * 		当前行所属的RowSet对象
			 * @example:
			 * |	row.getRowSet();
			 */
			getRowSet: function() {
				return this.rowset;
			},
			
			/**
			 * @summary:
			 * 		取得当前行所在RowSet中的索引
			 * @description:
			 * 		也可以通过Row.index取得
			 * @return 
			 * 		{number}
			 *  	当前行所在的RowSet的索引
			 * @example:
			 * |	var ds=new unieap.ds.DataStore("emp",[
			 * |	               {attr_empno:"1000",NAME:"1212",attr_job:"xx"},
			 * |	               {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",_s:true},   
			 * |	               ${1}{attr_empno:"1002",NAME:"张韶涵",attr_job:"歌星",_s:true}]);  
			 * |	var rowset = ds.getRowSet();
			 * |	 ${2}var selectedRows = rowset.getSelectedRows();   
			 * |	alert(selectedRows[0].getIndex());
			 * ${1}状态位_s：true 表示该row被选中
			 *  ${2} 获取rowset中被选中的row数组
			 */
			getIndex: function() {
				return this.index;
			},
			
			/**
			 * @summary:
			 * 		取得当前Row对象某字段的值
			 * @param:
			 * 		{string} name 
			 * 		字段名称
			 * @return:
			 * 		{object}
			 * 		该字段的值,如果当前Row对象没有该对应项，则返回null
			 * @example:
			 * |	${1}var ds=new unieap.ds.DataStore("emp",[
			 * |	                               {attr_empno:"1000",NAME:"Rose",attr_job:"演员"},
			 * |                               	   {attr_empno:"1076",NAME:"齐衷斯",attr_job:"技术总监"}]);
			 * |	${2}var rowset = ds.getRowSet();              
			 * |	${3}var row = rowset.getRow(1);               
			 * |	${4}row.getItemValue("attr_job");            
			 * ${1} 定义一个DataStore
			 * ${2}获取rowset
			 * ${3}获取第2行
			 * ${4}获取第2行的attr_job字段的值，本例返回“技术总监”
			 */
			getItemValue : function(name)
			{

				var v=_rf._getItemValue(this.data, name);
				if(name){
                    var localName = name.toString();
				}
                if (localName && localName.indexOf('_')!=-1){
					var humpName = _rf._underline2Hump(localName);

					if ((v == null) || (typeof v == 'undefined')){
						v=_rf._getItemValue(this.data,humpName);
					}
				}
				v = (typeof v == "undefined") ? null: v;
				return v;
			},
			
			/**
			 * @summary:
			 * 		取得当前Row对象某字段的原始值
			 * @description:
			 * 		如果该字段没有被修改过，则返回当前值
			 * @param 
			 * 		{string} name
			 * 		字段名称
			 * @return 
			 * 		{object} 该字段的原始值。 
			 * @example:
			 * |	${1}var ds=new unieap.ds.DataStore("emp",[
			 * |	                               {attr_empno:"1000",NAME:"Rose",attr_job:"xx"},
			 * |	                               {attr_empno:"1076",NAME:"齐衷斯",attr_job:"技术总监"}]);
			 * |	
			 * |	${2}function row_getItemOrigValue(){
			 * |	    var rowset = ds.getRowSet();
			 * |	    var row = rowset.getRow(0);
			 * |	   ${3} row.setItemValue("NAME","刘德华");                                 
			 * |	    alert("修改后的值为:"+row.getItemValue()+"\n"+ "修改前的值为:"+${4}row.getItemOrigValue("NAME")); 
			 * |	}
			 * |	${5}<input type="button" name="getItemOrigValue" value="getItemOrigValue" onclick="row_getItemOrigValue()"/>
			 * 	${1} 定义一个DataStore
			 *  ${2}定义button的onclick事件
			 *  ${3}修改了第一行数据“NAME”字段的值
			 *  ${4}获取“NAME”字段修改之前的原始值，本例为“Rose”
			 *  ${5}定义一个button
			 */
			getItemOrigValue : function(name)
			{
				var v = _rf._getItemOrigValue(this.data, name);
				var localName = name.toString();
                if (localName.indexOf('_')!=-1){
					var humpName = _rf._underline2Hump(localName);

					if ((v == null) || (typeof v == 'undefined')){
						v=_rf._getItemOrigValue(this.data,humpName);
					}
				}
                v = (typeof v == "undefined") ? null: v;
				return v;
			},
			
			/**
			 * @summary：
			 * 		给当前Row对象中的某个字段赋值。
			 * @description：
			 * 		如果当前Row对象中不存在该字段，则会自动创建该字段。
			 * 		在执行赋值操作前后，会被该Row所在的RowSet对象的onItemChanging和onItemChanged拦截。
			 * 		执行赋值操作前，会执行该Row对应的RowSet对象的onItemChanging事件，
			 * 		如果自定义的onItemChanging事件存在并且返回false，则不会给Row对象赋值,并且该setItemValue返回false，后续的onItemChanged不会被执行。
			 * 		执行赋值操作后，会执行该Row对应的RowSet对象的onItemChanged事件。
			 * 		如果onItemChanging和onItemChanged事件均未实现，则赋值后返回true
			 * @example:
			 * |	var ds=new unieap.ds.DataStore("emp",[
			 * |								{attr_empno:"1000",NAME:"Rose",attr_job:"xx"},
			 * |								{attr_empno:"1076",NAME:"齐衷斯",attr_job:"技术总监"}]);
			 * |	var rowset = ds.getRowSet();
			 * |	var row = rowset.getRow(0);
			 * |	row.setItemValue("attr_job","演员"); 
			 * @param: 
			 * 		{string} name 
			 * 		字段名称
			 * @param: 
			 * 		value 
			 * 		被赋的值
			 * @param: 
			 * 		{boolean}  nullable
			 * 		是否为可为空
			 * @return:
			 * 		 {boolean}
			 * 		 设置后的状态值
			 */
			setItemValue : function(name, value,nullable)
			{
				var old = this.data[name];
				if(old === value) return false;
				
				//处理RowSet的自定义onItemChanging事件，只有当onItemChanging事件存在且
				//执行返回值为false时才中断赋值
				if(this._e && (this._raiseItemEvent("onItemChanging",name, value) == false))
					return false;
					
				//设置该字段的值
				_rf._setItemValue(this.data, name, value,nullable);
				
				
				//end
				//处理RowSet的自定义onItemChanged事件，当onItemChanging事件存在且
				this._e && this._raiseItemEvent("onItemChanged",name, value) 
				//最终执行情况
				return true;
			},
			
			/**
			 * @summary：
			 * 		判断当前Row对象中某字段是否被修改过
			 * @param 
			 * 		{string} name
			 * 		字段名称
			 * @return 
			 * 		{boolean}
			 * 		false：该字段未被修改，true：该字段被修改过
			 * @example:
			 * | 	var ds=new unieap.ds.DataStore("emp",[
             * |                  {attr_empno:"1000",NAME:"Rose",attr_job:"xx"},
             * |                  {attr_empno:"1076",NAME:"齐衷斯",attr_job:"技术总监"}]);
			 * |	var rowset = ds.getRowSet();
			 * |	var row = rowset.getRow(0);
			 * |	${1}row.setItemValue("NAME","刘德华"); 
			 * |	${2}alert(row.isItemChanged("NAME"));  
			 * ${1} 修改了第一行数据“NAME”字段的值
			 * ${2}判断第一行的“NAME”字段是否被修改过，本例返回true
			 */
			isItemChanged : function(name)
			{
				var changed = _rf._isItemChanged(this.data, name);
				var localName = name.toString();
				var humpChanged = false;
				if (localName.indexOf('_')!=-1){
					var humpName = _rf._underline2Hump(localName);

					humpChanged = _rf._isItemChanged(this.data, humpName);
				}

				return changed || humpChanged;
			},
			
			/**
			 * @summary：
			 * 		判断当前Row是否修改过
			 * @return
			 * 		{boolean}
			 * 		false：该Row未被修改，true：该字段被修改过
			 * @example:
			 * | 	var ds=new unieap.ds.DataStore("emp",[
             * |                  	 {attr_empno:"1000",NAME:"Rose",attr_job:"xx"},
             * |                  	 {attr_empno:"1076",NAME:"齐衷斯",attr_job:"技术总监"}]);
			 * |	var rowset = ds.getRowSet();
			 * |	var row = rowset.getRow(0);
			 * |	${1}row.setItemValue("NAME","刘德华"); 
			 * |	${2}alert(row.isModified());          
			 * ${1} 修改了第一行数据“NAME”字段的值
			 * ${2}判断该行是否被修改过，本例返回true
			 */
			isModified : function(){
				//   return !unieap.isEmpty(this.data["_o"]);
				if(typeof(this.data) == 'object'){
					if(this.data["_o"]){
						for(var k in this.data["_o"]){
							var oValue = this.data["_o"][k];
							var nValue = this.data[k];
							if(oValue != nValue){
								if((oValue == null || oValue == "" ) && (nValue == null || nValue == "")){
								}else{
									return true;
								}
								
							}
						}
						return false;
					}else{
						return false;
					}
				}
	         }, 
			  
			/**
			 * @summary：
			 * 		清理当前Row对象
			 * 		只更新数据，不做状态更新
			 * 		如果需要做状态更新，使用RowSet中的resetUpdate(rowIndex) 替代（需要传入row的index）。
			 * @description:
			 * 		保留最新的状态，即删除掉所有原始值
			 * @example:
			 * |	${1}var ds=new unieap.ds.DataStore("emp",[
			 * |	                               {attr_empno:"1000",NAME:"Rose",attr_job:"xx"},
			 * |	                               {attr_empno:"1076",NAME:"齐衷斯",attr_job:"技术总监"}]);
			 * |	
			 * |	${2}function row_resetUpdate(){
			 * |	    var rowset = ds.getRowSet();
			 * |	    var row = rowset.getRow(0);
			 * |	${3}row.setItemValue("NAME","刘德华"); 
			 * |	${4}rowset.addRow({attr_empno:"1003",NAME:"张靓颖",attr_job:"歌手"}); 
			 * |	${5}var newRow = rowset.getRow(2);
			 * |		unieap.debug(rowset);
			 * |		row.resetUpdate();
			 * |		newRow.resetUpdate();
			 * |		unieap.debug(rowset);
			 * |	}
			 * |	${6}<input type="button" name="resetUpdate" value="resetUpdate" onclick="row_resetUpdate()" />
			 *  ${1} 定义一个DataStore
			 *  ${2}定义button的onclick事件
			 *  ${3}修改了第一行数据“NAME”字段的值
			 *  ${4}往rowset中添加一条记录
			 *  ${5}获取新增的row
			 *  ${6}定义一个button
			 */
			resetUpdate : function()
			{
				_rf._resetUpdate(this.data);
			},
			
			/**
			 * @summary：	
			 * 		恢复当前Row的原始值
			 * @description
			 * 		去掉编辑状态
			 * @example:
			 * |	 ${1} var ds=new unieap.ds.DataStore("emp",[
			 * |	                                   {attr_empno:"1000",NAME:"1212",attr_job:"xx"},
			 * |	                                   {attr_empno:"1076",NAME:"齐衷斯",attr_job:"技术总监"}]);
			 * |	
			 * |	${2}function row_discardUpdate(){
			 * |	    var rowset = ds.getRowSet();
			 * |	    var row = rowset.getRow(0);
			 * |	${3}row.setItemValue("NAME","刘德华");   
			 * |	    unieap.debug(row);
			 * |	${4}row.discardUpdate(); 
			 * |	    unieap.debug(row);
			 * |	}
			 * |	${5}<input type="button" name="discardUpdate" value="discardUpdate" onclick="row_discardUpdate()" />
			 *  ${1} 定义一个DataStore
			 *  ${2}定义button的onclick事件
			 *  ${3}修改了第一行数据“NAME”字段的值
			 *  ${4}恢复原始值
			 *  ${5}定义一个button
			 */
			discardUpdate : function(){
				if(this.getRowStatus()==__status.DATAMODIFIED){
					delete this.data._t;
				}
				var orig = this.data._o;
				for(var p in orig){
					this.data[p] = orig[p];
				}				
				delete this.data._o;
			},
			
			/**
			 * @summary：
			 * 		清空Row内的数据
			 * @description:
			 * 		保留信息：选择,状态修改,原始值。
			 * @example:
			 * |	${1} var ds=new unieap.ds.DataStore("emp",[
			 * |	                                   {attr_empno:"1000",NAME:"1212",attr_job:"xx"},
			 * |	                                   {attr_empno:"1076",NAME:"齐衷斯",attr_job:"技术总监"}]);
			 * |	 ${2}function row_clear(){
			 * |		var rowset = ds.getRowSet();
			 * |		var row = rowset.getRow(0);
			 * |		unieap.debug(row);
			 * |		row.clear();
			 * |		unieap.debug(row);
			 * |	} 
			 * |	${3}<input type="button" name="clear" value="clear" onclick="row_clear()" />
			 *  ${1} 定义一个DataStore
			 *  ${2}定义button的onclick事件
			 *  ${3}定义一个button
			 */
			clear : function(){
				var _t,_s,_o;
				(_t=this.data["_t"]) && delete this.data["_t"];
				(_s = this.data["_s"]) && delete this.data["_s"];
				( _o = (this.data["_o"] || {})) && delete this.data["_o"];
				for(var item in this.data){
					typeof(_o[item])!="undefined" || (_o[item] = this.data[item]);
					delete this.data[item] ; 
				}
				_s && (this.data["_s"] = true);
				if(_t==__status.NEWMODIFIED ){
					(this.data["_t"] = __status.NEWMODIFIED) && !unieap.isEmpty(_o) &&(this.data["_o"] = _o);
				}
				else if(!unieap.isEmpty(_o)){
					(this.data["_t"] = __status.DATAMODIFIED) && (this.data["_o"] = _o);
				}
			},
			
			
			_raiseItemEvent : function(eventName, itemName, value){			
				if(this.rowset.applyEvent(eventName,[this, itemName, value, this.index]) == false){
					return false;
				}
				return true;
			},
			
			/*
			 * @summary：
			 * 		得到Row数据上的某个标识的值，如在实现分组的时候，曾经增加名为_g的标识
			 * @description:
			 * 		在实现组件功能时，会使用本功能，该方法不对最终开发人员开放
			 * @param
			 * 		name 标识的名称
			 * @example:
			 * |	row.getIdentifier("_g")
			 * @return
			 *     返回指定标识对应的值
			 */
			getIdentifier:function(name){
				return this.data?this.data[name]:'';
			},
			
			/*
			 * @summary：
			 * 		设置Row数据上某个标识的值
			 * @description:
			 * 		在实现组件功能时，会使用本功能，该方法不对最终开发人员开放
			 * @example:
			 * |	row.setIdentifier("_g",{ep:true})
			 * @param
			 * 		name 标识名称
			 * @param
			 * 		value 标识值
			 * 		
			 */
			setIdentifier:function(name,value){
				return this.data?this.data[name] = value:'';
			},
			
			/*
			 * @summary：
			 * 		移除Row数据上某个标识
			 * @description:
			 * 		在实现组件功能时，会使用本功能，该方法不对最终开发人员开放
			 * @example:
			 * |	row.removeIdentifier("_g")
			 * @param
			 * 		name 标识名称
			 * 		
			 */
			removeIdentifier:function(name){
				this.data[name] && (delete this.data[name]);
			}
			
		});
	})();
}
if(!dojo._hasResource["unieap.ds.RowSet"]){ 
	dojo._hasResource["unieap.ds.RowSet"] = true;
	dojo.require('unieap.util.util')
	dojo.provide("unieap.ds.RowSet");

	(function(){
		var __status = unieap.ds.Status;
		var __buffer = unieap.ds.Buffer;
		dojo.declare("unieap.ds.RowSet", null, {		
			/**
			 * @declaredClass:
	 		 * 		unieap.ds.RowSet
			 * @summary:
			 * 		RowSet是客户端数据的容器
			 * @classDescription:
			 * 		它类似于关系数据库的Table，而Table内的每行类似于RowSet的每一个Row对象。
			 * 		可以通过操作RowSet来实现客户端数据的排序、过滤、缓存、分页。
			 * 		RowSet为UI控件提供数据支持。
			 * 		在RowSet内部，有三个数组Buffer，一个是primary Buffer，存储新建、更新和未更新的数据行；
			 * 		一个是deleted Buffer，存储被删除的数据行；
			 * 		一个是filter Buffer，存储页面过滤（主要是查找满足条件的数据）后得到的结果（行）。
			 * @example:
			 * |	new unieap.ds.RowSet([
			 * |			{'key':'value','key1':'value1'},
			 * |			{'key':'value','key1':'value1'}
			 * |		]);
			 *		根据一组数据创建RowSet,默认加到主缓冲区中。
			 * @example:
			 * |	new unieap.ds.RowSet({
			 * |		'primary':[],
			 * |		'delete':[],
			 * |		'filter':[]});
			 *		根据多组数据创建RowSet,分别加到各自的缓冲区中。
			 * @img：
			 * 		images/ds/rowset1.png
			 */
			
			constructor : function(data){
				this["primary"] = [];
				this["delete"] = [];
				this["filter"] = [];
				this.initialCount=0;
				if(data){
					if(typeof data.length == "number"){
						this["primary"] = data;
						this.initialCount=data.length;
					}else {
						if(typeof data["primary"] != "undefined"){
							this["primary"] = data["primary"];
							this.initialCount+=data["primary"].length;
						}
						if(typeof data["delete"] != "undefined"){
							this["delete"] = data["delete"] ;
						}
						if(typeof data["filter"]!= "undefined"){
							this["filter"] = data["filter"];
						}
					}
				}
			},
			
			/**
			 * @summary：
			 * 		判断当前RowSet对象内数据是否被修改
			 * @description:
			 * 		遍历所有的数据直到发现有修改状态的数据
			 * @return：
			 * 		{boolean}
			 * @example:
			 * | 		var rowset = new unieap.ds.RowSet([
			 * |	                ${1} {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001",_s:true},  
			 * |	                ${2} {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800",_t:3}, 
			 * |	                ${3} {attr_empno:"1002",NAME:"张韶涵",attr_job:"singer",attr_sal:"9500",_t:1}     
			 * |		]);
			 * |		alert(rowset.isModified());  
			 * ${1}状态位_t=2或没有，表示该row没有变化
			 * ${2}状态位_t=3,表示该row被修改过
			 * ${3}状态位_t=1,表示该row为新增
			 */
			isModified : function(){
				//遍历DELETE
				var modified= this.some(function(row){
						var status = row.getRowStatus();
						return ((status != __status.NEWMODIFIED)) ;
					},null, null, __buffer.DELETE);
				//遍历PRIMARY
				(!modified)&&(modified=this.some(function(row){
							var status = row.getRowStatus();
							return status && status!= __status.NOTMODIFIED ;
						},null, null, __buffer.PRIMARY));
				//遍历FILTER		
				(!modified)&&(modified=this.some(function(row){
							var status = row.getRowStatus();
							return status && status!= __status.NOTMODIFIED ;
						},null, null, __buffer.FILTER))
				return modified;
			},
			
			/**
			 * @summary：
			 * 		提取RowSet对象内部数据
			 * @description：
			 * 		包括主缓冲区、过滤缓冲区和删除缓冲区数据的对象
			 * @return 
			 * 		{object} 
			 * @example:
			 * 	|	var rowset = new unieap.ds.RowSet([
			 *  |	                {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001",_s:true},  
			 *  |	                {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800",_t:3}, 
			 *  |	                {attr_empno:"1002",NAME:"张韶涵",attr_job:"singer",attr_sal:"9500",_t:1}     
			 *  |	]);
			 *  |	unieap.debug(rowset.toData());
			 */
			toData: function() {
				var data = {};
				data["primary"] = this["primary"];
				data["delete"] = this["delete"];
				data["filter"] = this["filter"];
				return data;
			},
			
			/**
			 * @summary:
			 * 		提取RowSet数据为json格式
			 * @return：
			 * 		{string}
			 * @example：
			 *  |	var rowset = new unieap.ds.RowSet([
			 *  |	                {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001",_s:true},  
			 *  |	                {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800",_t:3}, 
			 *  |	                {attr_empno:"1002",NAME:"张韶涵",attr_job:"singer",attr_sal:"9500",_t:1}     
			 *  |	]);
			 *  |	alert(rowset.toJson());
			 */
			toJson : function(){
				var result = [];
				result.push("{");
				result.push("\"primary\":".concat(this.toBufJson(__buffer.PRIMARY)));
				result.push(",");
				result.push("\"filter\":".concat(this.toBufJson(__buffer.FILTER)));
				result.push(",");
				result.push("\"delete\":".concat(this.toBufJson(__buffer.DELETE)));
				result.push("}");
				return result.join("");
			},
			
			/**
			 * @summary:
			 * 		提取RowSet中的某个缓冲区json格式数据
			 * @example:
			 * |	${1}var name=unieap.ds.Buffer.PRIMARY;
			 * |	var rowset = new unieap.ds.RowSet([
			 * |	                {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001",_s:true},  
			 * |	                {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800",_t:3}, 
			 * |	                {attr_empno:"1002",NAME:"张韶涵",attr_job:"singer",attr_sal:"9500",_t:1}     
			 * |	]);
			 * |	rowset.toBufJson(name);
			 * 		${1}取得主缓冲区的json格式string对象		
			 * @param
			 * 		{string} name
			 * 		缓冲区名称
			 * @return:
			 * 		{string}
			 * 		json格式数据
			 */
			toBufJson : function(name){	
				var buf = this._getBuff(name),result = [],item,value;
				for(var i=0,_o,data,key,record;(data=buf[i]);i++){
					_o=data["_o"];
					delete data["_o"];
					record = [];					
					for(key in data){
//						if(key == "_styles" || key == "identifierNO") continue;
						item = [];		
						item.push("\"")	;	
						item.push(key);
						item.push("\"")	;
						item.push(":");
						value = data[key];
						if(dojo.isString(value)){
							item.push(dojo._escapeString(value));
						}
						else{
							//value 为[object Object]或者[object Object]	
							if(/\[object [oO]bject\]/.test(value)){
								item=[];
							}else{
								item.push(value==null?"null":value);	
							}		
												
						}					
						item.length>0&&record.push(item.join(""));
					}				
					if(_o){
						data["_o"]  = _o;
						var dd = [];
						for(key in _o){
							item = [];		
							item.push("\"");	
							item.push(key);
							item.push("\"")	;
							item.push(":");
							value = _o[key];
							if(dojo.isString(value)){
								item.push(dojo._escapeString(value));
							}
							else{						
								item.push(value==null?"null":value);						
							}						
							dd.push(item.join(""));	
						}
						item = [];		
						item.push("_o : {");
						item.push(dd.join(","));
						item.push("}");
						record.push(item.join(""));
					}
					item = [];
					item.push("{");
					item.push(record.join(","));
					item.push("}");		
					result.push(item.join(""));		
				}
				return "[".concat(result.join(",")).concat("]");	
			},
			
			/**
			 * @summary：
			 * 		取得当前RowSet对象内某个缓冲区的数据
			 * @example：
		     * |	var rowset = new unieap.ds.RowSet([
			 * |					{attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001"},
			 * |					{attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800"},
			 * |					{attr_empno:"1002",NAME:"张韶涵",attr_job:"singer",attr_sal:"9500"}
		     * |	]);
			 * |		
		     * |	${1}var name=unieap.ds.Buffer.PRIMARY; 
		     * |	unieap.debug(rowset.getData(name));
			 *	${1}取得主缓冲区的数据对象
			 * @param：
			 * 		{number} bufferName 
			 * 		可选项，默认为主缓冲区
			 * @return：
			 * 		{array}
			 * 		指定缓冲区的数据
			 */
			getData: function(bufferName) {
				return this._getBuff(bufferName);
			},
					
			/**
			 * @summary：
			 * 		取当前RowSet对象的某缓冲区的行数
			 * @param：
			 * 		{number}  bufferName
			 * 		可选项，某缓冲区，默认为主缓冲区。0:PRIMARY；1：FILTER；2:DELETE
			 * @return：
			 * 		{number} 
			 * 		某缓冲区内的Row对象个数，即行数
			 * @example:
			 * |	var rowset = new unieap.ds.RowSet([
			 * |	                {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001",_s:true},  
			 * |	                {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800",_t:3}, 
			 * |	                {attr_empno:"1002",NAME:"张韶涵",attr_job:"singer",attr_sal:"9500",_t:1}     
			 * |	]);
			 * |	var count=rowset.getRowCount(0);
			 * |	alert(count);
			 */
			getRowCount : function(bufferName){
				var buff = this._getBuff(bufferName); 
				return buff.length;
			},
			
			/**
			 * @summary:
			 * 		取RowSet所有数据的总行数
			 * @return 
			 * 		{number}
			 * 		取得当前RowSet对象所有缓冲区内Row对象的总行数
			 * @example:
			 * 	|	var rowset = new unieap.ds.RowSet({'primary':[
			 *  |	                {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001",_s:true},  
			 *  |	                {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800",_t:3}, 
			 *  |	                {attr_empno:"1002",NAME:"张韶涵",attr_job:"singer",attr_sal:"9500",_t:1}     
			 *  |	],'delete':[{attr_empno:"1003",NAME:"牛牛",attr_job:"演员",attr_sal:"104"}]});
			 * 	|	alert(rowset.getTotalCount());
			 */
			getTotalCount : function()
			{
				return (this["primary"].length + this["filter"].length + this["delete"].length);
			},
			
			/**
			 * @summary:
			 * 		获取初始行数
			 * @description:
			 * 		获取主缓冲区和过滤缓冲区的初始行数
			 * @return：
			 * 		{number}
			 * @example:
			 *  |	var rowset = new unieap.ds.RowSet({'primary':[
			 *  |	                {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001",_s:true},  
			 *  |	                {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800",_t:3}, 
			 *  |	                {attr_empno:"1002",NAME:"张韶涵",attr_job:"singer",attr_sal:"9500",_t:1}     
			 *  |	],'delete':[{attr_empno:"1003",NAME:"牛牛",attr_job:"演员",attr_sal:"104"}]});
			 *  |	alert(rowset.getInitialCount());
			 */
			getInitialCount:function(){
				return this.initialCount;
			},
			
			/**
			 * @summary:
			 *  	重新设置初始行数
			 * @description: 
			 * 		重新设置主缓冲区和过滤缓冲区的初始行数,初始行数为主缓冲区和过滤缓冲区的行数
			 * @return:
			 * 		{number}
			 * @example:
			 *  |	var rowset = new unieap.ds.RowSet({'primary':[
			 *  |	                {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001",_s:true},  
			 *  |	                {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800",_t:3}, 
			 *  |	                {attr_empno:"1002",NAME:"张韶涵",attr_job:"singer",attr_sal:"9500",_t:1}     
			 *  |	],'filter':[{attr_empno:"1003",NAME:"牛牛",attr_job:"演员",attr_sal:"104"}]});
			 *  |	rowset.resetInitialCount(); 
			 *  |	unieap.debug(rowset);
			 */
			resetInitialCount:function(){
				var nowcount=this.getRowCount(__buffer.FILTER)+this.getRowCount();
				if(this._dataStore){
					this._dataStore.recordCount+=nowcount-this.initialCount;
				}
				this.initialCount=nowcount;
			},
			
			/**
			 * @summary：
			 * 		判断是否为空的RowSet
			 * @description：
			 * 		空的RowSet代表主缓冲区,过滤缓冲区,删除缓冲区内均没有数据
			 * @return
			 * 		{boolean} 
			 * @example:
			 * |	${1}var rowset1 = new unieap.ds.RowSet([]);    
			 * |	${2}alert(rowset1.isEmpty()); 
			 * ${1}  定义一个空的RowSet
			 * ${2}  本例返回true
			 */
			isEmpty: function() {
				return 0 == this.getTotalCount();
			},
			
			/**
			 * @summary:
			 * 		清除RowSet内所有数据
			 * @description:
			 * 		三个缓冲区数组清零,调用后，isEmpty() 返回true
			 * @example:
			 * | 	var rowset = new unieap.ds.RowSet([
			 * |	                 {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001"},                
			 * |                	 {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800"}, 
			 * |	                 {attr_empno:"1002",NAME:"张韶涵",attr_job:"singer",attr_sal:"9500"}   
			 * |	]);
			 * |	unieap.debug(rowset);
			 * |	rowset.reset();
			 * |	unieap.debug(rowset);
			 */
			reset : function(){
				this["primary"] = [];
				this["filter"] = [];
				this["delete"] = [];
				this.applyEvent("onAfterDeleteAllRows",[this]);
			},
			
			/**
			 * @summary:
			 * 		清除更新标志。
			 * 		row中的resetUpdate方法不支持状态更新，可用RowSet中的resetUpdate(rowIndex)替代，即传入row的index
			 * @description:
			 * 		清除删除缓冲区的数据,清除主缓冲区和过滤缓冲区的更新标志
			 * @example：
			 * |	rowset.resetUpdate(1);
			 * 		清除index为1的数据的更新标识
			 * @example：
			 * |	var rowset = new unieap.ds.RowSet([
		 	 * |			                 {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001"},                
			 * |			                 {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800"}, 
			 * |			                 {attr_empno:"1002",NAME:"张韶涵",attr_job:"singer",attr_sal:"9500"}   
			 * |	]);
			 * |	rowset.setItemValue(0,"NAME","茜茜公主");
			 * |	rowset.deleteRow(2);
			 * |	unieap.debug(rowset);
			 * |	${1}rowset.resetUpdate();  
			 * |	unieap.debug(rowset);
			 * |	或
			 * |	${2}rowset.resetUpdate(0);     
			 * ${1}会清除删除缓冲区的数据,清除主缓冲区和过滤缓冲区的更新标志
			 * ${2}清除主缓冲区内，行索引为0的row对象的更新标志
			 */
			resetUpdate : function(rowIndex){
				if(rowIndex!=null){
					this.getRow(rowIndex).resetUpdate();
					this.applyEvent("onResetUpdate",[rowIndex]);
					return;
				}			
				this["delete"] = [];
				var buff = this["primary"];
				for(var i=0, l =buff.length; i<l; i++){
					 var row=new unieap.ds.Row(this,buff[i]);
					 row.resetUpdate();
					//_rf._resetUpdate(buff[i]);
				}
				buff = this["filter"]; 
				for(var i=0, l =buff.length; i<l; i++){
					var row=new unieap.ds.Row(this,buff[i]);
					row.resetUpdate();
					//_rf._resetUpdate(buff[i]);
				}
				this.resetInitialCount();
				this.applyEvent("onResetUpdate",[]);
			},
			

			/**
			 * @summary:
			 * 		把数据恢复成原始值
			 * @description:
			 * 		恢复所有数据,删除新增的数据,恢复修改过滤的数据
			 * @example:
    		 * |	var rowset = new unieap.ds.RowSet([
			 * |		               {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001"},        
			 * |		               {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800"},   
			 * |		               {attr_empno:"1002",NAME:"张韶涵",attr_job:"歌星",attr_sal:"9500"}           
			 * |	]);
			 * |	//===================================删除=============================================
			 * |	${1}rowset.deleteRows([0,2]);     
			 * |	${2}rowset.discardUpdate()；      
			 * |	//===================================修改=============================================
			 * |	${3}var row = rowset.getRow(0);     
			 * |	${4}row.setItemValue("NAME","郭靖");  
			 * |	${5}rowset.discardUpdate(0)；
			 * |	或
			 * |	${6}rowset.discardUpdate();   
			 * |		
			 * |	//================================新增=============================================
			 * |	rowset.addRow({attr_empno:"1004",NAME:"Jack",attr_job:"演员"});
			 * |	${7}rowset.discardUpdate();   
 			 * |
 			 * ${1}删除行索引为0和2的行
 			 * ${2}对于删除的数据，可不配置参数，即恢复所有数据
 			 * ${3}获得索引行为0的Row对象
 			 * ${4}修改row的NAME值
 			 * ${5}对于已经修改的RowSet对象，可以指定恢复哪一行的数据，参数为行索引
 			 * ${6}如果想恢复全部被修改的数据，可不配置参数
 			 * ${7}对于新增的数据，使用该方法，会把该条数据从缓冲区删除，恢复原来的状态
			 * @param 
			 * 		{number} rowIndex
			 */
			discardUpdate : function(rowIndex){
				if(this.applyEvent("onBeforeDiscardUpdate",typeof(rowIndex)!='undefined'?[rowIndex]:[]) == false) return;
				if(rowIndex!=null){
					this.getRow(rowIndex).discardUpdate();
					return;
				}			
				Array.prototype.push.apply(this["primary"],this["filter"].splice(0,this["filter"].length));
				Array.prototype.push.apply(this["primary"],this["delete"].splice(0,this["delete"].length));
				//this._dataStore.recordCount+=this["delete"].length;
				for(var i =0;i<this["primary"].length;i++){
					if(this["primary"][i]._t==__status.DATAMODIFIED){
						var orig = this["primary"][i]._o;
						for(var p in orig){
							 this["primary"][i][p] = orig[p];
						}
						delete this["primary"][i]._t;
						delete this["primary"][i]._o;
					}
					else if(this["primary"][i]._t==__status.NEWMODIFIED){
						this["primary"].splice(i,1);
						//this._dataStore.recordCount--;
						i--;
					}
				}
				this.applyEvent("onAfterDiscardUpdate",[]);	
			},
			
			/**
			 * @summary:
			 * 		增加一行数据
			 * @example:
			 * |	${1}var rowset = new unieap.ds.RowSet([
			 * |					{attr_empno:"1000",NAME:"Rose",attr_job:"演员"},
			 * |					{attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监"},
			 * |					{attr_empno:"1002",NAME:"张韶涵",attr_job:"歌星"}
			 * |	]);
			 * |	var data = {attr_empno:"1003",NAME:"张柏芝",attr_job:"演员"};
			 * |	rowset.addRow(data);
			 * |	或
			 * |	rowset.addRow(data,false,false);
			 * ${1}新建一个RowSet
			 * @param 
			 * 		{object} data 
			 * 		被增加的行数据
			 * @param 
			 * 		{boolean} clone 
			 * 		是否通过clone方式，因为data数据内可能有状态信息，如“是否被选择”、“是否是修改状态”等
			 * @param 
			 * 		{boolean} keepStatus 
			 * 		是否保留data的状态信息，如果不保留，则为新数据，即状态为NEWMODIFIED。
			 * @return 
			 * 		{unieap.ds.Row} 
			 * 		被添加的Row对象
			 */
			addRow : function (data, clone, keepStatus,setDefValue){	
				if(this.applyEvent("onBeforeAddRow",arguments)==false) return;
				data = this._buildRow(data,clone,keepStatus,setDefValue);
				var newRowIndex = this["primary"].length;
				this["primary"].push(data);	
				var row = new unieap.ds.Row(this, data, newRowIndex);
				if(keepStatus != true){
					row.setRowStatus(__status.NEWMODIFIED);
				}
			    this.applyEvent("onAfterAddRow",[row,this]);
				return row;
			},
			
			/**
			 * @summary:
			 * 		添加多行数据
			 * @param 
			 * 		{array} data 
			 * 		数据对象的数组
			 * @example:
			 * |	${1}var rowset = new unieap.ds.RowSet([]);
			 * |	var datas=[]
			 * |	for(var i=0;i<10;i++){
			 * |	    datas.push({attr_empno:"100"+i,NAME:"name_"+i,attr_job:"演员_"+i});
			 * |	}
			 * |	rowset.addRows(datas);
			 * ${1}新建一个空的RowSet对象
			 */
			addRows : function(data,setDefValue,isNotNewModified){
				if(this.applyEvent("onBeforeAddRows",arguments) == false) return;
				if(!data) data = [];
				if(!(typeof data == "array" || data instanceof Array)) data = [data];
				for(var i=0;i<data.length;i++){
					data[i]=this._buildRow(data[i],null,null,setDefValue);
					var row=new unieap.ds.Row(this,data[i]);
					if(!isNotNewModified)
						row.setRowStatus(__status.NEWMODIFIED);
					this["primary"].push(data[i]);
				 }
				 this.applyEvent("onAfterAddRows",[data,this]);
			},
			
			/**
			 * @summary:
			 * 		插入一行数据
			 * @param: 
			 * 		{object} data 
			 * 		被增加的行数据
			 * @param 
			 * 		{number} rowIndex 
			 * 		被增加行所在的索引位置,默认为最后一条
			 * @param 
			 * 		{boolean} clone 
			 * 		是否通过clone方式，因为data数据内可能有状态信息，如“是否被选择”、“是否是修改状态”等
			 * @param 
			 * 		{boolean} keepStatus
			 * 		 是否保留data的状态信息，如果不保留，则为新数据，即状态为NEWMODIFIED。
			 * @return 
			 * 		{unieap.ds.Row} 
			 * 		被插入的Row对象
			 * @example:
			 * |	var rowset = new unieap.ds.RowSet([
		 	 * |			                 {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001"},                
			 * |			                 {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800"}, 
			 * |			                 {attr_empno:"1002",NAME:"张韶涵",attr_job:"singer",attr_sal:"9500"}   
			 * |	]);
			 * | 	var data = {attr_empno:"1003",NAME:"杨康",attr_job:"木匠",attr_sal:"888"};
			 * |	rowset.insertRow(data,2);
			 * |	或
			 * |	rowset.insertRow(data,2,false,false);
			 * |	unieap.debug(rowset);
			 */
			insertRow : function(data, rowIndex, clone,keepStatus,setDefValue,id){
				if(this.applyEvent("onBeforeAddRow",arguments)==false) return;
				var buff = this["primary"], row;
				if((rowIndex == null) || (rowIndex < 0)||(rowIndex > buff.length )){	
					rowIndex = buff.length;
				}
				data = this._buildRow(data,clone,keepStatus,setDefValue);
				buff.splice(rowIndex,0,data);
				row = new unieap.ds.Row(this, data, rowIndex);
				if(!keepStatus){
					row.setRowStatus(__status.NEWMODIFIED);
				}
				this.applyEvent("onAfterAddRow",[row,this]);
				var grid = unieap.byId(id);
				grid&&grid.managers&&grid.managers.get&&grid.managers.get("RowManager").updateCurrnetRow(Number(rowIndex))
				return row;
			},
			
			/**
			 * @summary:
			 * 		删除指定行
			 * @param 
			 * 		{number} rowIndex 
			 * 		被删除行所在的索引
			 * @return 
			 * 		{unieap.ds.Row}  
			 * 		被删除的行对象，该对象在删除缓冲区
			 * @example:
			 * |	var rowset = new unieap.ds.RowSet([
		 	 * |			                 {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001"},                
			 * |			                 {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800"}, 
			 * |			                 {attr_empno:"1002",NAME:"张韶涵",attr_job:"singer",attr_sal:"9500"}   
			 * |	]);
			 * |	 ${1} rowset.deleteRow(0); 
			 * |	unieap.debug(rowset);
			 *${1}删除行索引为0的row
			 */
			deleteRow : function (rowIndex){
				if(this.applyEvent("onBeforeDeleteRow",arguments)==false) return ;
				var buff = this["primary"];
				if((rowIndex == null) || (rowIndex < 0)||(rowIndex >= buff.length )){	
					return false;
				}
				var rows = buff.splice(rowIndex, 1);
				var deleteindex=this["delete"].length;
				if(rows[0]._t!=1){
					//当不是新增的数据时,才放到删除区，否则直接删除
					this["delete"].push(rows[0]);
				}
				var row = new unieap.ds.Row(this, rows[0], deleteindex);
				/*触发"postDeleteRow"事件*/
				this.applyEvent("onAfterDeleteRow",[row,this]);
				return row;
			},
			
			/**
			 * @summary:
			 * 		批量删除行记录
			 * @param 
			 * 		{array} data
			 * 		 行下标，形如:[1,0,5,4,3];
			 * @example:
			 * |	var rowset = new unieap.ds.RowSet([
		 	 * |			                 {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001"},                
			 * |			                 {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800"}, 
			 * |			                 {attr_empno:"1002",NAME:"张韶涵",attr_job:"singer",attr_sal:"9500"}   
			 * |	]);
			 * |	${1} rowset.deleteRows([0,2]);
			 * |	unieap.debug(rowset);
			 * ${1}批量删除行索引为0和2的row 
			 */
			deleteRows : function (data){
				if(this.applyEvent("onBeforeDeleteRows",arguments)==false) return;
				data = dojo.clone(data).sort(function(a,b){
					return a-b;
				});
				for(var i=data.length-1;i>=0;i--){
					if(data[i]<0||data[i]>=this["primary"].length) continue;
					var rows = this["primary"].splice(data[i], 1);
					if(rows[0]._t!=1){
						//当不是新增的数据时,才放到删除区，否则直接删除
						this["delete"].push(rows[0]);
					}
				}
				this.applyEvent("onAfterDeleteRows",arguments);
			},
			
			/**
			 * @summary:
			 * 		删除所有缓冲区的所有行
			 * @description:
			 * 		包括过滤缓冲区
			 * @example:
			 * | 	var rowset = new unieap.ds.RowSet([
		 	 * |			                 {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001"},                
			 * |			                 {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800"}, 
			 * |			                 {attr_empno:"1002",NAME:"张韶涵",attr_job:"singer",attr_sal:"9500"}   
			 * |	]);
			 * | 	rowset.deleteAllRows();
			 * |	unieap.debug(rowset);
			 */
			deleteAllRows : function(){
				if(this.applyEvent("onBeforeDeleteAllRows",arguments)==false) return ;
				var _p = this["primary"].concat(this["filter"]);
				_p=dojo.filter(_p,function(row){
					return row._t != 1;
				})
				this["delete"] = this["delete"].concat(_p);
				this["primary"] = [];
				this["filter"] = [];
				//this._dataStore.recordCount=0;
				this.applyEvent("onAfterDeleteAllRows",[this]);
			},
			
			/**
			 * @summary：
			 * 		恢复某被删除的行
			 * @param 
			 * 		{number} rowIndex
			 * 		 被恢复的删除行所在的索引
			 * @return 
			 * 		{boolean} 
			 * 		true：恢复成功， false：恢复失败，如索引位置为负值或超出行记录数
			 * @example:
			 * |	var rowset = new unieap.ds.RowSet({'delete':[
			 * |	                 {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001"},                
			 * |	                 {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800"}, 
			 * |	                 {attr_empno:"1002",NAME:"张韶涵",attr_job:"singer",attr_sal:"9500"}   
			 * |	]});
			 * |	unieap.debug(rowset);
			 * |	rowset.unDeleteRow(1);
			 * |	unieap.debug(rowset);
			 */
			unDeleteRow : function(rowIndex)
			{
				var buff = this["delete"];
				if((rowIndex == null) || (rowIndex < 0)||(rowIndex >= buff.length )){	
					return false;
				}
				var rows = buff.splice(rowIndex,1);
				this["primary"].push(rows[0]);
				//this._dataStore.recordCount++;
				return true;
			},
			
			/**
			 * @summary：
			 * 		恢复所有被删除的行
			 * @description:
			 * 		删除缓冲区的数据恢复到主缓冲区中
			 * @example:
			 * |	var rowset = new unieap.ds.RowSet({'delete':[
			 * |	                 {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001"},                
			 * |	                 {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800"}, 
			 * |	                 {attr_empno:"1002",NAME:"张韶涵",attr_job:"singer",attr_sal:"9500"}   
			 * |	]});
			 * |	unieap.debug(rowset);
			 * |	rowset.unDeleteAll();
			 * |	unieap.debug(rowset);
			 */
			unDeleteAll : function()
			{
				var buff = this["delete"];
				var count = this.rowsMove(0, -1, __buffer.DELETE, this, -1, __buffer.PRIMARY);
				return count;
			},
			
			/**
			 * @summary：
			 * 		丢弃某缓冲区中的若干行数据
			 * @description:
			 * 		丢弃数据不是把数据放到删除缓冲区,而是直接删除
			 * @param 
			 * 		{number} startIndex
			 * 		 起始行索引
			 * @param 
			 * 		{number} endIndex
			 * 		 结束行索引
			 * @param 
			 * 		{number} bufferName
			 * 		 可选项，缓冲区名称，默认为主缓冲区
			 * @example:
			 * |	var rowset = new unieap.ds.RowSet({'primary':[
			 * |	                 {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001"},                
			 * |	                 {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800"}, 
			 * |	                 {attr_empno:"1002",NAME:"张韶涵",attr_job:"singer",attr_sal:"9500"}   
			 * |	]});
			 * | 	${1}rowset.rowsDiscard(0,2,unieap.ds.Buffer.PRIMRY); 
			 * |	unieap.debug(rowset);
			 *  ${1}丢弃主缓冲区中行索引为0至1的row对象  
			 */
			rowsDiscard : function(startIndex, endIndex, bufferName)
			{
				var buff = this._getBuff(bufferName);
				if((startIndex == null) || (startIndex < 0)||(startIndex >= buff.length ))
					startIndex = 0;
				if((endIndex == null) || (endIndex < 0)||(endIndex > buff.length ))
					endIndex = buff.length;
				var result = buff.splice(startIndex, endIndex - startIndex);	
				return result;
			},
			
	
			_rowsMove : function(startIndex, endIndex, fromBuffer, toRs, toIndex, toBuffer, isMove )
			{
				if(toRs == null){
					return 0;
				}
				var buff = this._getBuff(fromBuffer);
				var buff2 = toRs._getBuff(toBuffer);
		
				if((startIndex == null) || (startIndex < 0)||(startIndex >= buff.length ))
					startIndex = 0;
				if((endIndex == null) || (endIndex < 0)||(endIndex > buff.length ))
					endIndex = buff.length;
				var  count = endIndex - startIndex;
				if (count <=0){
					return 0;
				}
					
				var rows;
				if(isMove){
					rows = buff.splice(startIndex, count);
				}else{
					rows = buff.slice(startIndex, endIndex);
					//clone rows
					var rows2 = [] , row;
					for(var i=0, l= rows.length;i<l; i++){
						row = this._cloneRow(rows[i]);
						(new unieap.ds.Row(this,row)).setRowStatus(__status.NEWMODIFIED);
						rows2.push(row);
					}
					rows = rows2;
				}
				
				if((toIndex == null) || (toIndex < 0)||(toIndex >= buff2.length ))
						toIndex = buff2.length;
				
				var rows2 = buff2.splice(toIndex, buff2.length - toIndex);
							
				for(var i=0, l = rows.length; i<l; i++){
					buff2.push(rows[i]);
				}
				
				if(rows2.length > 0){
					for(var i=0, l = rows2.length; i<l; i++){
						buff2.push(rows2[i]);
					}
				}
//				buff2=buff2.concat(rows,rows2)
				return (count);
			},
			
			/**
			 * @summary：
			 * 		行拷贝
			 * @param:
			 * 		 {number} startIndex
			 * 		 源RowSet的起始行索引
			 * @param 
			 * 		{number} endIndex 
			 * 		源RowSet的结束行索引（不包含endIndex这行）
			 * @param 
			 * 		{number} fromBuffer 
			 * 		源RowSet的某缓冲区
			 * @param
			 * 		{unieap.ds.RowSet} toRs 
			 * 		目标RowSet
			 * @param
			 * 		{number} toIndex 
			 * 		目标缓冲区的索引
			 * @param
			 * 		{number} toBuffer 
			 * 		目标RowSet的目标缓冲区
			 * @example:
			 * |	var rowset = new unieap.ds.RowSet([
			 * |	                 {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001"},                
			 * |	                 {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800"}, 
			 * |	                 {attr_empno:"1002",NAME:"张韶涵",attr_job:"singer",attr_sal:"9500"}   
			 * |	]);
			 * |	
			 * |	var bufferName = unieap.ds.Buffer.PRIMRY;
			 * |	var bufferName1 = unieap.ds.Buffer.DELETE;
			 * |	${1}var rowset1 = new unieap.ds.RowSet([]);                                     
			 * |	${2}rowset.rowsCopy(0,1,bufferName,rowset1,0,bufferName1);                  
			 * |	unieap.debug(rowset1);
			 * ${1}  定义一个空的rowset
			 * ${2}  把rowset主缓冲中第0条row对象，拷贝到rowset1的delete缓冲区中
			 */
			rowsCopy: function(startIndex, endIndex, fromBuffer, toRs, toIndex, toBuffer ) {
				return this._rowsMove(startIndex, endIndex, fromBuffer, toRs, toIndex, toBuffer, false);
			},
			
			/**
			 * @summary:
			 * 		行移动
			 * @param:
			 * 		{number} startIndex 
			 * 		源RowSet的起始行索引
			 * @param
			 * 		{number} endIndex 
			 * 		源RowSet的结束行索引
			 * @param
			 * 		{number} fromBuffer 
			 * 		源RowSet的某缓冲区
			 * @param
			 * 		{unieap.ds.RowSet} toRs 
			 * 		目标RowSet
			 * @param
			 * 		{number} toIndex 
			 * 		目标缓冲区的索引
			 * @param
			 * 		{number} toBuffer 
			 * 		目标RowSet的目标缓冲区
			 * @example:
			 * |	${1}var rowset = new unieap.ds.RowSet([
			 * |	                 {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001"},                
			 * |	                 {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800"}, 
			 * |	                 {attr_empno:"1002",NAME:"张韶涵",attr_job:"singer",attr_sal:"9500"}   
		 	 * |	]);
			 * |	${2}var rowset1 = new unieap.ds.RowSet([]);               
			 * |	unieap.debug(rowset);
			 * |	${3}rowset.rowsMove(0,2,unieap.ds.Buffer.PRIMRY,rowset1,0,unieap.ds.Buffer.DELETE); 
			 * |	unieap.debug(rowset);
			 * |	unieap.debug(rowset1);
			 * ${1}源RowSet
			 * ${2}目标RowSet
			 * ${3} 把rowset主缓冲区中rowindex=0和1（不包括2）的记录移到rowset1的删除缓冲区中
			 */
			rowsMove : function(startIndex, endIndex, fromBuffer, toRs, toIndex, toBuffer )
			{
				return this._rowsMove(startIndex, endIndex, fromBuffer, toRs, toIndex, toBuffer, true);
			},
			
			/**
			 * @summary:
			 * 		设置行是否被选中状态
			 * @description:
			 * 		将若干行标识为select参数的状态
			 * @example:
			 * |	rowset.setSelectRows(true,0,3);
			 * 		选中前四条数据
			 * @param 
			 * 		{boolean} select 
			 * 		选择状态
			 * @param:
			 * 		{number} startIndex 
			 * 		开始行索引
			 * @param
			 * 		{number} endIndex 
			 * 		结束行索引
			 * @param
			 * 		{number} bufferName 
			 * 		可选项，默认为主缓冲区
			 * @example:
			 * |		var rowset = new unieap.ds.RowSet([
			 * |    				{attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001"},                
			 * |   					{attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800"}, 
			 * |					{attr_empno:"1002",NAME:"张韶涵",attr_job:"singer",attr_sal:"9500"}   
			 * |		]);
			 * |	${1}rowset.selectRows(true,0,2);
			 * |		unieap.debug(rowset);
			 * ${1}将第0、1行设为选中状态
			 */
			selectRows : function(select, startIndex, endIndex, bufferName ){
				select = select||false;
				this.forEach(
					function(row){
						row.setRowSelected(select)
					},
					startIndex, endIndex, bufferName
				);
			},
			
			/**
			 * @summary:
			 * 		取得某缓冲区的被选中行总数
			 * @description：
			 * 		遍历某缓冲区,返回选中行总数
			 * @param
			 * 		{number} bufferName 
			 * 		可选项，默认为主缓冲区
			 * @return
			 * 		{number} 
			 * 		被选中的行总数
			 * @example:
			 * |	var rowset = new unieap.ds.RowSet([
			 * |			${1}{attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001",_s:true},                   
			 * |			{attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800",_s:true},
			 * |			{attr_empno:"1002",NAME:"张韶涵",attr_job:"singer",attr_sal:"9500"}
			 * |	]);
			 * |	${2}var count = rowset.getSelectedCount("primary"); 
			 * ${1}_s=true,表示该行被选中     
			 * ${2}本例返回“2”       
			 */
			getSelectedCount : function(bufferName){
				var count = 0;
				this.forEach(
					function(row){
						if(row.isRowSelected()){
							count ++;
						}
					},
					null, null, bufferName
				);
				return count;
			},
			
			/**
			 * @summary:
			 * 		取得当前被选中的行的Row对象数组
			 * @param
			 * 		{string} bufferName
			 *		可选项，默认为主缓冲区
			 * @return
			 * 		{array} 
			 * 		被选中的行的Row对象数组
			 * @example:
			 * | 	var rowset = new unieap.ds.RowSet([
			 * |			${1}{attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001",_s:true},                   
			 * |			{attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800",_s:true},
			 * |			{attr_empno:"1002",NAME:"张韶涵",attr_job:"singer",attr_sal:"9500"}
			 * |	]);
		 	 * |	${2}unieap.debug(rowset.getSelectedRows(unieap.ds.BUFFER.PRIMARY));       
			 * |	或
			 * |	${3}unieap.debug(rowset.getSelectedRows()); 
			 * ${1}_s=true,表示该行被选中                    
			 * ${2}参数为缓冲区的名称
			 * ${3}如不配置参数，默认为主缓冲区
			 */
			getSelectedRows : function(bufferName){	
				var arr = [];
				this.forEach(function(row){
					if(row.isRowSelected()){
						arr.push(this.getRow(row.getIndex(),bufferName));
					}
				},null,null,bufferName,this);
				return arr;				
			},
			/**
			 * @summary:
			 * 		取得当前选中的行的行号对象数组
			 * @param:
			 * 		{string} bufferName
			 * 		 可选项，默认为主缓冲区
			 * @return 
			 * 		{array}
			 * 		 被选中的行的Row对象行号数组
			 * @example:
			 * |	var rowset = new unieap.ds.RowSet([
			 * |			${1}{attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001",_s:true},                 
			 * |			{attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800",_s:true},
			 * |			{attr_empno:"1002",NAME:"张韶涵",attr_job:"singer",attr_sal:"9500"}
			 * |	]);
			 * |	var indexs=rowset.getSelectedRowIndexs(unieap.ds.BUFFER.PRIMARY);
			 * |	alert(indexs);
			 * ${1} _s=true,表示该行被选中
			 */
			getSelectedRowIndexs : function(bufferName){	
				var arr = [];
				this.forEach(function(row){
					if(row.isRowSelected()){
						arr.push(row.getIndex());
					}
				},null,null,bufferName);
				return arr;				
			},
			
			/**
			 * @summary：
			 * 		取得当前未被选中的行的Row对象数组
			 * @param 
			 * 		{string} bufferName
			 * 		 可选项，默认为主缓冲区
			 * @return 
			 * 		{array} 
			 * 		被选中的行的Row对象数组
			 * @example:
			 * |	var rowset = new unieap.ds.RowSet([
			 * |		              {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001",_s:true},                     
			 * |		              ${1}{attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800",_s:false},   
			 * |		              {attr_empno:"1002",NAME:"张韶涵",attr_job:"singer",attr_sal:"9500"}
			 * |		]);
			 * |	${2}rowset.getUnSelectedRows(unieap.ds.BUFFER.PRIMARY);          
			 * |		或
			 * |	${3}rowset.getUnSelectedRows();    
			 *  ${1}_s=false或没有该标志位,表示该行未被选中               
			 *  ${2}参数为缓冲区的名称
			 *  ${3}如不配置参数，默认为主缓冲区
			 */
			getUnSelectedRows : function(bufferName){	
				var arr = [];
				this.forEach(function(row){
					if(!row.isRowSelected()){
						arr.push(this.getRow(row.getIndex(),bufferName));
					}
				},null,null,bufferName,this);
				return arr;			
			},
			/**
			 * @summary：
			 * 		取得当前未被选中的行的行号对象数组
			 * @param 
			 * 		{string} bufferName
			 * 		 可选项，默认为主缓冲区
			 * @return 
			 * 		{array}
			 *		被选中的行的Row对象数组
			 * @example:
			 * |	var rowset = new unieap.ds.RowSet([
			 * |	              {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001",_s:true},                     
			 * |	              ${1}{attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800",_s:false},   
			 * |	              {attr_empno:"1002",NAME:"张韶涵",attr_job:"singer",attr_sal:"9500"}
			 * |	]);
			 * |	 ${2}rowset.getUnSelectedRowIndexs(unieap.ds.BUFFER.PRIMARY);        
			 * |	或
			 * |	  ${3}rowset.getUnSelectedRowIndexs(); 
			 *  ${1}_s=false或没有该标志位,表示该行未被选中       
			 *  ${2}参数为缓冲区的名称
			 *  ${3}如不配置参数，默认为主缓冲区
			 */
			getUnSelectedRowIndexs : function(bufferName){	
				var arr = [];
				this.forEach(function(row){
					if(!row.isRowSelected()){
						arr.push(row.getIndex());
					}
				},null,null,bufferName);
				return arr;			
			},
			
			/**
			 * @summary：
			 * 		删除所有选中行
			 * @example:
			 * |	var rowset = new unieap.ds.RowSet([
			 * |	               ${1}{attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001",_s:true},         
			 * |	               ${2}{attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800",_s:true}, 
		 	 * |	               {attr_empno:"1002",NAME:"张韶涵",attr_job:"歌星",attr_sal:"9500"}           
			 * |	]);
			 * |	rowset.deleteSelectedRows();
			 * |	unieap.debug(rowset);
			 * ${1}被选中的行
			 * ${2}被选中的行      
			 */
			deleteSelectedRows: function(){
				if(this.applyEvent("onBeforeDeleteSelectedRows",arguments)==false) return;
				var _p = this["primary"] ,_f = this["filter"], _d = this["delete"];
				var arr = [];
				var row;
				for(var i= 0; i< _p.length; i++){
					row = _p[i];
					var isRowSelected=(new unieap.ds.Row(this,row)).isRowSelected();
					if(isRowSelected/*_rf._isRowSelected(row)*/){
						arr.push(this.getRow(i));
						var rows = _p.splice(i,1);
						_d.push(rows[0]);
						//this._dataStore.recordCount--;	
						i--;
					}
				}
				/*触发"postDeleteSelectedRows"事件*/
				this.applyEvent("onAfterDeleteSelectedRows",[arr,this]);
				//this.postDeleteSelectedRows(arr,this);
			},
			
			/**
			 * @summary：
			 * 		通过行索引获取行对象
			 * @param
			 *		{number} rowIndex
			 *		行索引
			 * @param 
			 * 		{number} bufferName 
			 * 		可选项，默认为主缓冲区
			 * @return 
			 * 		{unieap.ds.Row} 
			 * 		返回指定行的Row对象,,没有这条数据时返回null
			 * @example:
			 * |	var rowset = new unieap.ds.RowSet([
			 * |	               {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001"},         
			 * |	               {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800"}, 
		 	 * |	               {attr_empno:"1002",NAME:"张韶涵",attr_job:"歌星",attr_sal:"9500"}           
			 * |	]);
			 * |	var row=rowset.getRow(0);   
			 * |	unieap.debug(row);
			 */
			getRow : function(rowIndex, bufferName)
			{
				var buff = this._getBuff(bufferName);
				if(!buff[rowIndex])
					return null;
				return new unieap.ds.Row(this,buff[rowIndex], rowIndex);
			},
			
			/**
			 * @summary：
			 * 		获取指定缓冲区中,指定索引区间的Row对象
			 * @param 
			 * 		{number} bufferName 
			 * 		可选项，默认为主缓冲区
			 * @param
			 *		{number} beginIndex
			 *		行索引
			 * @param
			 *		{number} endIndex
			 *		行索引
			 * @return
			 * 		{array} 
			 * 		被选中的行的Row对象数组
			 * @example:
			 * |	var rowset = new unieap.ds.RowSet([
			 * |	               {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001"},         
			 * |	               {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800"}, 
		 	 * |	               {attr_empno:"1002",NAME:"张韶涵",attr_job:"歌星",attr_sal:"9500"}           
			 * |	]);
			 * |	var rows=rowset.getRows("primary",0,rowset.getRowCount());   
			 * |	unieap.debug(rows);
			 */
			getRows : function(bufferName,beginIndex,endIndex){
				var arr = [];
				this.forEach(function(row){
					arr.push(this.getRow(row.getIndex(),bufferName));
				},beginIndex,endIndex,bufferName,this);
				return arr;	
			},
			
			/**
			 * @summary：
			 * 		获取行内数据
			 * @param 
			 * 		{number} rowIndex
			 * 		 行索引
			 * @param 
			 * 		{number} bufferName
			 * 		 可选项，默认为主缓冲区
			 * @return 
			 * 		{object|null}
			 * 		所在行内的数据，null：当rowIndex值为负值或超出主缓冲区数组范围时
			 * @example:
			 * |	var rowset = new unieap.ds.RowSet([
			 * |	               {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001"},         
			 * |	               {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800"}, 
		 	 * |	               {attr_empno:"1002",NAME:"张韶涵",attr_job:"歌星",attr_sal:"9500"}           
			 * |	]);
			 * |	${1}var data = rowset.getRowData(0,"primary");      
			 * |	${2}var colValue = data["NAME"];  
			 * |	alert(colValue);
			 * ${1}获取行内数据
			 * ${2}获取“NAME”字段的值
			 */
			getRowData : function(rowIndex, bufferName)
			{
				var buff = this._getBuff(bufferName);
				if((rowIndex == null) || (rowIndex < 0)||(rowIndex >= buff.length ))	
					return null;
				return buff[rowIndex];
			},
			
			
			/**
			 * @summary：
			 * 		遍历当前的RowSet，对每个row进行操作
			 * @description：
			 * 		对当前RowSet对象缓冲区的若干行执行callback操作
			 * @example：
			 * |	var rowset = new unieap.ds.RowSet([
			 * |	               {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001"},         
			 * |	               {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800"}, 
		 	 * |	               {attr_empno:"1002",NAME:"张韶涵",attr_job:"歌星",attr_sal:"9500"}           
			 * |	]);
			 * |	${1}rowset.forEach(function(row){
			 * |		row.setItemValue('dept',20);
			 * |	})
			 * |	unieap.debug(rowset);
			 * 		${1}遍历RowSet中的所有Row对象的数据,对每个Row进行操作
			 * @param:
			 * 		{function} callback
			 * 		 回调函数
			 * @param 
			 * 		{number} startIndex
			 * 		 起始行索引
			 * @param 
			 * 		{number} endIndex 
			 * 		结束行索引
			 * @param 
			 * 		{number} bufferName 
			 * 		缓冲区
			 * @param 
			 * 		{object} thisObject 
			 * 		回调函数里引用的this对象
			 */
			forEach: function(callback, startIndex, endIndex, bufferName, thisObject){
				var buff = this._getBuff(bufferName); 
				var _p = this._getParts(callback, startIndex, endIndex, buff.length);
				var row = new unieap.ds.Row(this);
				for(var i= _p[1],l=_p[2]; i<l; i++){
					row.data = buff[i];
					row.index = i;
					_p[0].call(thisObject, row, i ,this);
				}
			},
			
			_everyOrSome: function(every, callback, startIndex, endIndex, bufferName, thisObject){
				var buff = this._getBuff(bufferName); 
				var _p = this._getParts(callback, startIndex, endIndex, buff.length);
				var row = new unieap.ds.Row(this);
				for(var i= _p[1],l=_p[2]; i<l; i++){
					row.data = buff[i];
					row.index = i;
					var result = !!_p[0].call(thisObject, row, i , this);
					if(every ^ result){
						return result; // Boolean
					}
				}
				return every; // Boolean
			},
			
			/**
			 * @summary:
			 * 		遍历当前的RowSet对象，当遇到不满足的条件时终止遍历
			 * @description
			 * 		当且仅当每个Row对象都满足条件时返回true。
			 * 		当有一个Row对象不满足条件时返回false,并终止遍历。
			 * @example：
			 * |	var rowset = new unieap.ds.RowSet([
			 * |	               {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001",deptno:20},         
			 * |	               {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800",deptno:10}, 
		 	 * |	               {attr_empno:"1002",NAME:"张韶涵",attr_job:"歌星",attr_sal:"9500",deptno:20}           
			 * |	]);
			 * |	${1}var isSatisfied=rowset.every(function(row){
			 * |		return row.getItemValue('deptno')==20;
			 * |	})
			 * |	alert(isSatisfied);
			 * 		${1}判断RowSet的每一个Row对象的deptno值是否都为20。
			 * @param 
			 * 		{function} callback 
			 * 		回调函数
			 * @param 
			 * 		{number} startIndex
			 * 		 起始行索引
			 * @param 
			 * 		{number} endIndex
			 * 		 结束行索引
			 * @param 
			 * 		{number} bufferName
			 * 		 缓冲区
			 * @param 
			 * 		{object} thisObject 
			 * 		回调函数里引用的this对象
			 * @return 
			 * 		{boolean}
			 */
			every: function(callback, startIndex, endIndex, bufferName,thisObject){
				return this._everyOrSome(true, callback, startIndex, endIndex, bufferName, thisObject); // Boolean
			},
			
			/**
			 * @summary:
			 * 		遍历当前的RowSet
			 * @description：
			 * 		当有一个row满足条件时返回true,并终止遍历。
			 * 		否则返回false。
			 * @example：
			 * |	var rowset = new unieap.ds.RowSet([
			 * |	               {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001",deptno:20},         
			 * |	               {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800",deptno:10}, 
		 	 * |	               {attr_empno:"1002",NAME:"张韶涵",attr_job:"歌星",attr_sal:"9500",deptno:20}           
			 * |	]);
			 * |	${1}var isSatified=rowset.some(function(row){
			 * |		return row.getItemValue('deptno')==20;
			 * |	})
			 * |	alert(isSatified);
			 * ${1}判断rowset中是否存在deptno值为20的row，存在则终止遍历
			 * 		
			 * @param 
			 * 		{function} callback
			 * 		 回调函数
			 * @param 
			 * 		{number} startIndex 
			 * 		起始行索引
			 * @param
			 * 		 {number} endIndex
			 * 		 结束行索引
			 * @param
			 * 		 {number} bufferName
			 * 		 缓冲区
			 * @param 
			 * 		{object} thisObject
			 * 		 回调函数里引用的this对象
			 * @return 
			 * 		{boolean}
			 */
			some: function(callback, startIndex, endIndex, bufferName, thisObject){
				return this._everyOrSome(false, callback, startIndex, endIndex, bufferName, thisObject); // Boolean
			},
			
			/**
			 * @summary:
			 * 		遍历过滤
			 * @description：
			 * 		遍历所有的Row,返回由过滤出来的数据组成的RowSet
			 * @example：
			 * |	var rowset = new unieap.ds.RowSet([
			 * |	               {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001",deptno:20},         
			 * |	               {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800",deptno:10}, 
		 	 * |	               {attr_empno:"1002",NAME:"张韶涵",attr_job:"歌星",attr_sal:"9500",deptno:20}           
			 * |	]);
			 * |	${1}var newrs=rowset.forEachFilter(function(row){
			 * |		return row.getItemValue('deptno')==20;
			 * |	})
			 * |	unieap.debug(newrs);
			 * 		${1}从RowSet中过滤出dept为20的Row。返回一个由过滤出来的数据组成的新RowSet对象。
			 * @param 
			 * 		{function} callback
			 * 		 回调函数
			 * @param 
			 * 		{number} startIndex
			 * 		 起始行索引
			 * @param 
			 * 		{number} endIndex 
			 * 		结束行索引
			 * @param 
			 * 		{number} bufferName 
			 * 		缓冲区
			 * @param 
			 * 		{object} thisObject 
			 * 		回调函数里引用的this对象
			 * @return 
			 * 		{unieap.ds.RowSet} 
			 * 		过滤操作后的RowSet对象
			 */
			forEachFilter: function(callback, startIndex, endIndex, bufferName, thisObject){
				var buff = this._getBuff(bufferName); 
				var _p = this._getParts(callback, startIndex, endIndex, buff.length);
				var new_rs = new unieap.ds.RowSet();
				var row = new unieap.ds.Row(this), data;
				for(var i= _p[1],l=_p[2]; i<l; i++){
					data = buff[i];
					row.data = data;
					row.index = i;
					if(_p[0].call(thisObject, row, i , this)){
						new_rs.addRow(data, false, true);
					}
				}
				return new_rs;
			},
			/**
			 * @summary:
			 * 		阻止事件
			 * @description
			 * 		数据操作将不触发事件
			 * @example:
			 *  |	rowset.disabledEvent();
			 */
			disabledEvent : function(){
				this._stopEvent = true ;
			},
			/**
			 * @summary:
			 * 		开启事件
			 * @description
			 * 		默认开启事件
			 * @example:
			 *  |	rowset.enabledEvent();
			 */
			enabledEvent : function(){
				this._stopEvent = false;
			},
			
			applyEvent : function(eventName,args){
				return this._stopEvent || this[eventName].apply(this,args);
			},	
				
			/**
			 * @summary:
			 * 		当Row中字段值改变前触发事件
			 * @example
			 * |	var rowset = new unieap.ds.RowSet([
			 * |	               {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001",deptno:20},         
		 	 * |	               {attr_empno:"1002",NAME:"张韶涵",attr_job:"歌星",attr_sal:"9500",deptno:20}           
			 * |	]);
			 * |	${1}dojo.connect(rowset,'onItemChanging',
			 * |		function(row,name,value,index){
			 * |			alert(row.getItemValue("attr_empno"));	
			 * |		}
			 * |	);
			 * |	rowset.setItemValue(0,"attr_empno","1003");
			 * 		${1}绑定了rowset的onItemChanging事件,参数分别为row,字段名,字段值,索引
			 * @param 
			 * 		{unieap.ds.Row} thisRow 
			 * 		RowSet的当前操作行
			 * @param 
			 * 		{string} itemName 
			 * 		Row中某字段的名称
			 * @param 
			 * 		{object} value 
			 * 		该字段被赋的值
			 * @param 
			 * 		{number} index 
			 * 		该行所在的索引
			 * @return 
			 * 		{boolean} 
			 * 		可以根据该返回值决定下一步的操作,如果自定义的onItemChanging事件存在并且返回false，则不会给Row对象赋值,并且该setItemValue返回false，后续的onItemChanged不会被执行。
			 */
			onItemChanging: function(thisRow, itemName, value, index) {
				//
				//console.info("void onItemChanging");
			},
			
			/**
			 * @summary:
			 * 		当Row中字段值改变后触发事件
			 * @example
			 * |	var rowset = new unieap.ds.RowSet([
			 * |	               {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001",deptno:20},         
		 	 * |	               {attr_empno:"1002",NAME:"张韶涵",attr_job:"歌星",attr_sal:"9500",deptno:20}           
			 * |	]);
			 * |	${1}dojo.connect(rowset,'onItemChanged',
			 * |		function(row,name,value,index){
			 * |			alert(row.getItemValue("attr_empno"));
			 * |		}
			 * |	);
			 * |	rowset.setItemValue(0,"attr_empno","1003");
			 * 		${1}绑定了rowset的onItemChanged事件,参数分别为row,字段名,字段值,索引
			 * @param 
			 * 		{unieap.ds.Row} thisRow
			 * 		 RowSet的当前操作行
			 * @param 
			 * 		{string} itemName
			 * 		 Row中某字段的名称
			 * @param 
			 * 		{object} value
			 * 		 该字段被赋的值
			 * @param 
			 * 		{number} index
			 * 		 该行所在的索引
			 */
			onItemChanged: function (thisRow, itemName, value, index) {
				//
				//console.info("void onItemChanged");
			},	
			
			
			/**
			 * @summary:
			 * 		当RowSet中添加一行新的记录Row时的监听处理函数
			 * @example
			 * |	var rowset = new unieap.ds.RowSet([
			 * |	               {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001",deptno:20},         
		 	 * |	               {attr_empno:"1002",NAME:"张韶涵",attr_job:"歌星",attr_sal:"9500",deptno:20}           
			 * |	]);
			 * |	${1}dojo.connect(rowset,'onBeforeAddRow',
			 * |		function(row,rowset){
			 * |			alert('onBeforeAddRow');		
			 * |		}
			 * |	);
			 * |	var data = {attr_empno:"1003",NAME:"张柏芝",attr_job:"演员"};
			 * |		rowset.addRow(data);
			 * 		${1}绑定了rowset的onBeforeAddRow事件,参数分别为row,rowset
			 * @param:
			 * 		 {unieap.ds.Row} row
			 * 		 被添加的Row对象
			 * @param 
			 * 		{unieap.ds.RowSet} rowSet
			 * 		 当前RowSet对象
			 */
			onBeforeAddRow:function(row,rowSet){
				
			},
			
			/**
			 * @summary:
			 * 		当RowSet中添加一行新的记录Row后的监听处理函数
			 * @example
			 * |	var rowset = new unieap.ds.RowSet([
			 * |	               {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001",deptno:20},         
		 	 * |	               {attr_empno:"1002",NAME:"张韶涵",attr_job:"歌星",attr_sal:"9500",deptno:20}           
			 * |	]);
			 * |	${1}dojo.connect(rowset,'onAfterAddRow',
			 * |		function(row,rowset){
			 * |			alert('onAfterAddRow');		
			 * |		}
			 * |	);
			 * |	var data = {attr_empno:"1003",NAME:"张柏芝",attr_job:"演员"};
			 * |		rowset.addRow(data);
			 * 		${1}绑定了rowset的onAfterAddRow事件,参数分别为row,rowset
			 * @param:
			 * 		 {unieap.ds.Row} row
			 * 		 被添加的Row对象
			 * @param 
			 * 		{unieap.ds.RowSet} rowSet
			 * 		 当前RowSet对象
			 */
			onAfterAddRow:function(row,rowSet){
				
			},
			/**
			 * @summary:
			 * 		当RowSet中增加多行记录Row时的监听处理函数
			 * @example
			 * |	var rowset = new unieap.ds.RowSet([]);
			 * |	${1}dojo.connect(rowset,'onBeforeAddRows',
			 * |		function(rows){
			 * |			alert('onBeforeAddRows');		
			 * |		}
			 * |	);
			 * |	var datas=[]
			 * |	for(var i=0;i<10;i++){
			 * |	    datas.push({attr_empno:"100"+i,NAME:"name_"+i,attr_job:"演员_"+i});
			 * |	}
			 * |	rowset.addRows(datas);
			 * 		${1}绑定了rowset的onBeforeAddRows事件,参数为row数组
			 * @param 
			 * 		{array} rows
			 * 		 被添加的Row对象数组
			 */
			onBeforeAddRows:function(rows){
				
			},
			
			/**
			 * @summary:
			 * 		当RowSet中增加多行记录Row后的监听处理函数
			 * @example
			 * |	var rowset = new unieap.ds.RowSet([]);
			 * |	${1}dojo.connect(rowset,'onAfterAddRows',
			 * |		function(rows){
			 * |			alert('onAfterAddRows');		
			 * |		}
			 * |	);
			 * |	var datas=[]
			 * |	for(var i=0;i<10;i++){
			 * |	    datas.push({attr_empno:"100"+i,NAME:"name_"+i,attr_job:"演员_"+i});
			 * |	}
			 * |	rowset.addRows(datas);
			 * 		${1}绑定了rowset的onAfterAddRows事件,参数为row数组
			 * @param 
			 * 		{array} rows
			 * 		 被添加的Row对象数组
			 */
			onAfterAddRows:function(rows){
				
			},
			
			/**
			 * @summary：
			 * 		当RowSet中删除一行记录Row时的监听处理函数
			 * @example
			 *  |	var rowset = new unieap.ds.RowSet([
			 *  |	               {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001",deptno:20},         
		 	 *  |	               {attr_empno:"1002",NAME:"张韶涵",attr_job:"歌星",attr_sal:"9500",deptno:20}           
			 *  |	]);
			 *  |	${1}dojo.connect(rowset,'onBeforeDeleteRow',
			 *  |		function(row,rowset){
			 *  |			alert('onBeforeDeleteRow');		
			 *  |		}
			 *  |	);
			 *  |	rowset.deleteRow(0);
			 * 		${1}绑定了rowset的onBeforeDeleteRow事件,参数为row,rowset
			 * @param 
			 * 		{unieap.ds.Row} row 
			 * 		被删除的Row对象
			 * @param 
			 * 		{unieap.ds.RowSet} rowSet 
			 * 		当前RowSet对象
			 */
			onBeforeDeleteRow:function(row,rowSet){
			},
			
			/**
			 * @summary：
			 * 		当RowSet中删除一行记录Row后的监听处理函数
			 * @example
			 * |	var rowset = new unieap.ds.RowSet([
			 * |	               {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001",deptno:20},         
		 	 * |	               {attr_empno:"1002",NAME:"张韶涵",attr_job:"歌星",attr_sal:"9500",deptno:20}           
			 * |	]);
			 * |	${1}dojo.connect(rowset,'onAfterDeleteRow',
			 * |		function(row,rowset){
			 * |			alert('onAfterDeleteRow');		
			 * |		}
			 * |	);
			 * |	rowset.deleteRow(0);
			 * 		${1}绑定了rowset的onAfterDeleteRow事件,参数为row,rowset
			 * @param 
			 * 		{unieap.ds.Row} row 
			 * 		被删除的Row对象
			 * @param 
			 * 		{unieap.ds.RowSet} rowSet 
			 * 		当前RowSet对象
			 */
			onAfterDeleteRow:function(row,rowSet){			
			},
			
			/**
			 * @summary：
			 * 		当RowSet中删除多行记录Row时的监听处理函数
			 * @example
			 * |	var rowset = new unieap.ds.RowSet([
			 * |	               {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001",deptno:20},         
			 * |	               {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800",deptno:10}, 
		 	 * |	               {attr_empno:"1002",NAME:"张韶涵",attr_job:"歌星",attr_sal:"9500",deptno:20}           
			 * |	]);
			 * |	${1}dojo.connect(rowset,'onBeforeDeleteRows',
			 * |		function(data){
			 * |			alert('onBeforeDeleteRows');		
			 * |		}
			 * |	);
			 * |	rowset.deleteRows([0,1]);
			 * 		${1}绑定了rowset的onBeforeDeleteRows事件,参数为索引组成的数组
			 * @param 
			 * 		{array} data
			 * 		 行下标，形如:[1,0,5,4,3];
			 */
			onBeforeDeleteRows:function(data){
			},
			
			/**
			 * @summary：
			 * 		当RowSet中删除多行记录Row后的监听处理函数
			 * @example
			 * |	var rowset = new unieap.ds.RowSet([
			 * |	               {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001",deptno:20},         
			 * |	               {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800",deptno:10}, 
		 	 * |	               {attr_empno:"1002",NAME:"张韶涵",attr_job:"歌星",attr_sal:"9500",deptno:20}           
			 * |	]);
			 * |	${1}dojo.connect(rowset,'onAfterDeleteRows',
			 * |		function(data){
			 * |			alert('onAfterDeleteRows');		
			 * |		}
			 * |	);
			 * |	rowset.deleteRows([0,1]);
			 * 		${1}绑定了rowset的onAfterDeleteRows事件,参数为索引组成的数组
			 * @param 
			 * 		{array} data
			 * 		 行下标，形如:[1,0,5,4,3];
			 */
			onAfterDeleteRows:function(){
			},
			
			/**
			 * @summary：
			 * 		当RowSet中删除所有行的监听处理函数
			 * @example
			 * |	var rowset = new unieap.ds.RowSet([
			 * |	               {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001",deptno:20},         
			 * |	               {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800",deptno:10}, 
		 	 * |	               {attr_empno:"1002",NAME:"张韶涵",attr_job:"歌星",attr_sal:"9500",deptno:20}           
			 * |	]);
			 * |	${1}dojo.connect(rowset,'onBeforeDeleteAllRows',
			 * |		function(){
			 * |			alert('onBeforeDeleteAllRows');		
			 * |		}
			 * |	);
			 * |	rowset.deleteAllRows();
			 * 		${1}绑定了rowset的onBeforeDeleteAllRows事件
			 */
			onBeforeDeleteAllRows:function(){
			},
			
			/**
			 * @summary：
			 * 		当RowSet中删除所有行后的监听处理函数
			 * @example
			 * |	var rowset = new unieap.ds.RowSet([
			 * |	               {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001",deptno:20},         
			 * |	               {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800",deptno:10}, 
		 	 * |	               {attr_empno:"1002",NAME:"张韶涵",attr_job:"歌星",attr_sal:"9500",deptno:20}           
			 * |	]);
			 * |	${1}dojo.connect(rowset,'onAfterDeleteAllRows',
			 * |		function(){
			 * |			alert('onAfterDeleteAllRows');		
			 * |		}
			 * |	);
			 * |	rowset.deleteAllRows();
			 * 	${1}绑定了rowset的onAfterDeleteAllRows事件
			 */
			onAfterDeleteAllRows:function(){
			},
			
			
			/**
			 * @summary:
			 * 		当RowSet中删除被选中的多行记录Row时的监听处理函数
			 * @example
			 * |	var rowset = new unieap.ds.RowSet([
			 * |	              ${1} {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001",deptno:20,_s:true},         
			 * |	               {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800",deptno:10}, 
		 	 * |	               {attr_empno:"1002",NAME:"张韶涵",attr_job:"歌星",attr_sal:"9500",deptno:20}           
			 * |	]);
			 * |	${2}dojo.connect(rowset,'onBeforeDeleteSelectedRows',
			 * |		function(arr,rowset){
			 * |			alert('onBeforeDeleteSelectedRows');		
			 * |		}
			 * |	);
			 * |	rowset.deleteSelectedRows();
			 * 		${1}_s值为true表示此行被选中
			 * 		${2}绑定了rowset的onBeforeDeleteSelectedRows事件
			 * @param 
			 * 		{array} arr  
			 * 		被删除的Row对象的集合(array中对象类型为unieap.ds.Row)
			 * @param 
			 * 		{unieap.ds.RowSet} rowSet 
			 * 		当前RowSet对象
			 */
			onBeforeDeleteSelectedRows:function(arr,rowSet){
			},
			
			/**
			 * @summary:
			 * 		当RowSet中删除被选中的多行记录Row后的监听处理函数
			 * @example
			 * |	var rowset = new unieap.ds.RowSet([
			 * |	              ${1} {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001",deptno:20,_s:true},         
			 * |	               {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800",deptno:10}, 
		 	 * |	               {attr_empno:"1002",NAME:"张韶涵",attr_job:"歌星",attr_sal:"9500",deptno:20}           
			 * |	]);
			 * |	${2}dojo.connect(rowset,'onAfterDeleteSelectedRows',
			 * |		function(arr,rowset){
			 * |			alert('onAfterDeleteSelectedRows');		
			 * |		}
			 * |	);
			 * |	rowset.deleteSelectedRows();
			 * 		${1}_s值为true表示此行被选中
			 * 		${2}绑定了rowset的onAfterDeleteSelectedRows事件
			 * @param 
			 * 		{array} arr  
			 * 		被删除的Row对象的集合(array中对象类型为unieap.ds.Row)
			 * @param 
			 * 		{unieap.ds.RowSet} rowSet 
			 * 		当前RowSet对象
			 */			
			onAfterDeleteSelectedRows:function(arr,rowSet){
			},
			
			/**
			 * @summary:
			 * 		回滚RowSet中修改的数据前触发
			 * @param:
			 * 		{number} inRowIndex 要回滚的行号(如果用户直接调用discardUpdate方法不传入参数则inRowIndex不存在)
			 */
			onBeforeDiscardUpdate:function(inRowIndex){},
			
			/**
			 * @summary:
			 * 		回滚RowSet中修改的数据后触发
			 */
			onAfterDiscardUpdate:function(){},
			
			/**
			 * @summary:
			 * 		RowSet进行过滤后的监听处理函数
			 * @example:
			 * |	var rowset = new unieap.ds.RowSet([
			 * |	               {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001",deptno:20,_s:true},         
			 * |	               {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800",deptno:10}, 
		 	 * |	               {attr_empno:"1002",NAME:"张韶涵",attr_job:"歌星",attr_sal:"9500",deptno:20}           
			 * |	]);
			 * |	${1}dojo.connect(rowset,'onFilter',
			 * |		function(){
			 * |			alert('onFilter');		
			 * |		}
			 * |	);
			 * | 	rowset.doFilter('NAME','like','^黄',true);
			 * 		${1}绑定了rowset的onFilter事件
			 * @param: 
			 * 		{object} unieap.ds.RowSet
			 */
			onFilter : function(rowSet){
				
			},
			
			/**
			 * @summary:
			 * 		RowSet进行排序后的监听处理函数
			 * @example:
			 * |	var rowset = new unieap.ds.RowSet([
			 * |	               {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"9000",deptno:20,_s:true},         
			 * |	               {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800",deptno:10}, 
		 	 * |	               {attr_empno:"1002",NAME:"张韶涵",attr_job:"歌星",attr_sal:"9500",deptno:20}           
			 * |	]);
			 * |	${1}dojo.connect(rowset,'onSort',
			 * |		function(){
			 * |			alert('onSort');		
			 * |		}
			 * |	);
			 * |	rowset.sort('attr_sal',1,'number');
			 * 		${1}绑定了rowset的onSort事件
			 * @param: 
			 * 		{object} unieap.ds.RowSet
			 */
			onSort:function(rowSet){
				
			},
			
			/**
			 * @summary:
			 * 		RowSet执行resetUpdate操作后的监听处理函数
			 * @example
			 * |	var rowset = new unieap.ds.RowSet([
		 	 * |			                 {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001"},                
			 * |			                 {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800"}, 
			 * |			                 {attr_empno:"1002",NAME:"张韶涵",attr_job:"singer",attr_sal:"9500"}   
			 * |	]);
			 * |	${1}dojo.connect(rowset,'onResetUpdate',
			 * |		function(){
			 * |			alert('onResetUpdate');		
			 * |		}
			 * |	);
			 * |	rowset.setItemValue(0,"NAME","茜茜公主");
			 * |	rowset.deleteRow(2);
			 * |	rowset.resetUpdate(); 
			 * 		${1}绑定了rowset的onResetUpdate事件
			 * @param 
			 * 		{object} unieap.ds.RowSet
			 */
			onResetUpdate:function(rowset){
				
			},
			
			
			_getBuff:	function(bufferName)
			{
				return (bufferName == __buffer.DELETE ? this["delete"] : (bufferName == __buffer.FILTER?this["filter"]:this["primary"]));
			},
			
			_buildRow	: function(data, clone,keepStatus,setDefValue){
				if(data == null){
					data = {};
				}else if(clone){
					data = this._cloneRow(data,keepStatus);
				}
				if(setDefValue!=false) {
					var metaData = this.getMetaData();
					if(metaData){
						for(var i=0,l=metaData.length; i<l;i++){
							if(data[metaData[i].getName()]==null && metaData[i].getDefaultValue()!=null){
								data[metaData[i].getName()]=metaData[i].getDefaultValue();
							}
						}
					}
				}
				return data;
			},
			/*
			 * @param:
			 * 		{object} data
			 * @param:
			 * 		{object} all
			 * @example:
			 *  |	var ds = new unieap.ds.DataStore("name");
			 *  |	var data = {name:"d",b:2,_o:{b:1}};
			 * 	|	ds.getRowSet().addRow(data,true,false);
			 * 	|	unieap.debug(ds);
			 */
			_cloneRow	: function(data, all){
				all = all || false;
				 var d= dojo.fromJson( dojo.toJson(data||{}));
				if(!all){
					delete d["_t"];
					delete d["_s"];
					delete d["_o"];
				}
				return d;
			},
			
			_getParts : function(cb, s, e, l){
				return [ 
					(typeof cb == "string" ? (new Function("row", "index", "rowset", cb)) : cb),
					((s == null) || (s < 0)||(s >= l ) ? 0 : s),
					((e == null) || (e < 0)||(e >  l ) ? l : e)
				];
			},
			
			/**
			 * @summary:
			 * 		多列排序
			 * @param 
			 * 		{array|object} data 
			 * 		排序条件
			 * 		形如：[{name:"id",asc:1,dataType:"number"},{name:"dept",asc:-1}]
			 * @param
			 * 		 {string} bufferName 
			 * 		缓冲区名称
			 * @example:
			 * |	var rowset = new unieap.ds.RowSet([
			 * |	                 {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001"},                
			 * |	                 {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800"}, 
			 * |	                 {attr_empno:"1002",NAME:"张韶涵",attr_job:"singer",attr_sal:"9500"}   
			 * |	]);
			 * |	${1}rowset.sorts([{name:"attr_empno",asc:1,dataType:"number"},{name:"NAME",asc:-1}],"primary");
			 * |	unieap.debug(rowset);
			 * ${1}asc:1表示升序；-1表示降序
			 */
			sorts : function(data,bufferName){
				if(!dojo.isArray(data)){
					data = [data];
				}
				for(var i=data.length-1;i>=0;i--){
					var d = data[i];
					this.sort(d["name"],d["asc"]||1,d["dataType"],bufferName);
				}
			},
			
			/**
			 * @summary:
			 * 		对当前RowSet对象的主缓冲区内所有行进行排序
			 * @example：
			 * |	var rowset = new unieap.ds.RowSet([
			 * |	                 {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"9700"},                
			 * |	                 {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800"}, 
			 * |	                 {attr_empno:"1002",NAME:"张韶涵",attr_job:"singer",attr_sal:"9500"}   
			 * |	]);
			 * |	${1}rowset.sort('attr_sal',1,'number');
			 * |	unieap.debug(rowset);
			 * 	${1}	对rowset的attr_sal列以number类型进行升序排序
			 * @param 
			 * 		{string} name
			 * 		 待排序的字段名称
			 * @param 
			 * 		{number} asc 
			 * 		1：升序，-1：降序
			 * @param 
			 * 		{string} bufferName
			 * 		 缓冲区名称
			 * @param 
			 * 		{number|String} dataType
			 * 		 该字段的类型
			 */
			sort : function(name,asc,dataType,bufferName){	
				if(!dataType){
					var metaData =this.getMetaData(name);
					if(metaData){
						dataType = unieap.getDataType(metaData.getDataType());
					}
				}	
				var sortComp;
				if(dataType=="number"||dataType=="date"){
					sortComp=function(a,b){
						if(a[name]==null) return asc*1;
						if(b[name]==null) return asc*-1;
						a = Number(a[name]);b = Number(b[name]);	
//						if(isNaN(b=parseFloat(b[name],10)))  return asc*1;
//						if(isNaN(a=parseFloat(a[name],10)))  return asc*-1;											
						return asc*(a-b);
					}
				}else{
					sortComp=function(a,b){
						return asc*((a[name]+"").localeCompare(b[name]+""));//支持中文排序
					}
				}
				this._getBuff(bufferName).sort(sortComp);
				this.applyEvent("onSort",[this]);
			},
			
			/**
			 * @summary:
			 * 		计算某列的合计值
			 * @description:
			 * 		注意只有数字类型的字段才可以求和
			 * @param 
			 * 		{string} name
			 * 		 列名
			 * @param 
			 * 		{string} pattern 
			 * 		格式化样式
			 * @param 
			 * 		{string|null} bufferName
			 * 		 缓冲区名称，默认为primary
			 * @return 
			 * 		{number}
			 * @example:
			 * |	var rowset = new unieap.ds.RowSet([
			 * |	                 {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001"},                
			 * |	                 {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800"}, 
			 * |	                 {attr_empno:"1002",NAME:"张韶涵",attr_job:"singer",attr_sal:"9500"}   
			 * |	]);
			 * |	${1}var count=rowset.sum("attr_sal","###,###.00","primary");
			 * |	alert(count);
			 * ${1}形如“###,###.00”
			 */
			sum : function(name,pattern,bufferName){
				//U_EAP00027295
//				this._isNumberType(name);
				var count = 0;
				this.forEach(function(row){
					var value = row.data[name];
					if(value!=null){
						count+=Number(value,10); 
					}
				},null,null,bufferName);
				if(pattern!=null){
					dojo.require("dojo.number");
					dojo.require("unieap.patch.number");
					count=dojo.number.format(count,{pattern:pattern});
				}
				return count;
			},
			
			/**
			 * @summary:
			 * 		计算某列的最大值
			 * @param 
			 * 		{string} name 
			 * 		列名
			 * @param 
			 * 		{string|null} bufferName 
			 * 		缓冲区名称，默认为primary
			 * @return 
			 * 		{number}
			 * @example:
			 * |	var rowset = new unieap.ds.RowSet([
			 * |	                 {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001"},                
			 * |	                 {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800"}, 
			 * |	                 {attr_empno:"1002",NAME:"张韶涵",attr_job:"singer",attr_sal:"9500"}   
			 * |	]);
			 * |	${1}alert(rowset.max("attr_sal"));
			 * |	或
			 * |	alert(rowset.max("attr_sal","primary")); 
		 	 * ${1} 本例attr_sal列的最大值为：9500
			  */
			max : function(name,bufferName){
				return this._mm(name,"max",bufferName);
			},
			
			/**
			 * @summary:
			 * 		计算某列的最小值
			 * @param 
			 * 		{string} name 
			 * 		列名
			 * @param 
			 * 		{string|null} bufferName
			 * 		 缓冲区名称，默认为primary
			 * @return 
			 * 		{number}
			 * @example:
			 * | 	var rowset = new unieap.ds.RowSet([
			 * |	                 {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001"},                
			 * |	                 {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800"}, 
			 * |	                 {attr_empno:"1002",NAME:"张韶涵",attr_job:"singer",attr_sal:"9500"}   
			 * |	]);
			 * |	alert(rowset.min("attr_sal"));
			 * |	或
			 * |	${1}alert(rowset.min("attr_sal","primary"));                  
			 * ${1}本例attr_sal列的最小值为：1001
			 */
			min : function(name,bufferName){
				return this._mm(name,"min",bufferName);
			},
			
			_mm : function(name,operator,bufferName){
				//U_EAP00027295
//				this._isNumberType(name);
				var result = "";
				var arr = [];
				this.forEach(function(row){
					var value = row.data[name];
					if(value!=null){
						arr.push(value);
					}
				},null,null,bufferName);
				if(!unieap.isEmpty(arr)){
				   result = Math[operator].apply(Math,arr);
				   result = window.isNaN(result)?"":result;
				}
				return  result;
			},
			
			/**
			 * @summary:
			 * 		计算某列的平均值
			 * @param 
			 * 		{string} name
			 * 		 列名
			 * @param 
			 * 		{string} pattern
			 * 		 格式化样式
			 * @param 
			 * 		{string|Null} bufferName
			 * 		 缓冲区名称，默认为primary
			 * @return 
			 * 		{number}
			 * @example:
			 * |	var rowset = new unieap.ds.RowSet([
			 * |	               {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001"},
			 * |	               {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800"},
			 * |	               {attr_empno:"1002",NAME:"张韶涵",attr_job:"歌星",attr_sal:"9500"}
			 * |	]);
			 * |	rowset.avg("attr_sal","###.##","primary");
			 */
			avg : function(name,pattern,bufferName){
				if(this._getBuff(bufferName).length==0) return 0;
				var count = this.sum(name,null,bufferName);
				var result = count/this._getBuff(bufferName).length;
				if(pattern!=null){
					dojo.require("dojo.number");
					dojo.require("unieap.patch.number");
					result=dojo.number.format(result,{pattern:pattern});
				}
				return result;
			},
			
			//判断是否数字类型
			_isNumberType: function(name){
				var metaData =this.getMetaData(name);
				if(metaData){
					if(unieap.getDataType(metaData.getDataType())!="number"){
						throw new Error("Don't support to calc string");
					}
					return metaData.getDataType();
				}
			},
			
			/**
			 * @summary:
			 * 		页面过滤操作
			 * @param 
			 * 		{string} name 
			 * 		列名称，如果为null则清空过滤缓冲区
			 * @param 
			 * 		{string} relation 
			 * 		比较表达式
			 * @param 
			 * 		{string|number} 
			 * 		查询值
			 * @param 
			 * 		{boolean|string} ignoreCase|dataFormat
			 * 		字符串是否区分大小写|日期的格式内容
			 * @example:
			 * | 	var filter={}
			 * |	${1}filter.pattern="${conditionA} && (${conditionB} || ${conditionC})"
			 * |	filter.condition={
			 * |		conditionA:{name : "empname",relation : "like", value:"^杨", ignoreCase:true},
			 * |		conditionB : {name : "deptno",relation : ">=", value:id},
			 * |		conditionC : {name : "hirdate",relation : "!=", value:new Date(2007,10,10),dataFormat:"yyyy-MM-dd"}
			 * |	}
			 * |	rowset.doFilter(filter);
			 * 		${1}多个条件时
			 *  @example：
			 * | 	${2}rowset.doFilter('empname','like','^杨',true);
			 * 		${2}单个条件
			 * 
			 */
			doFilter : function(name,relation,value,ignoreCase){
				var primary = this._getBuff(__buffer.PRIMARY),
						filter = this._getBuff(__buffer.FILTER);
				if(name==null){ 
					Array.prototype.push.apply(primary,filter.splice(0,filter.length));
					this.applyEvent("onFilter",[this]);
					return;
				}
				var data = arguments[0];
				if(arguments.length>1){
					data = {
						name : name,
						relation : relation,
						value : value,
						ignoreCase : ignoreCase,
						dataFormat : ignoreCase  //对于日期要传入dataFormat日期格式
					};
				}
				var applyFilter = this._getApplyFilter(data);
				for(var i = primary.length-1;i>=0;i--){
					if(!applyFilter(primary[i])){
						filter.unshift(primary.splice(i,1)[0]);
					}
				}
				this.applyEvent("onFilter",[this]);
			},
			/**
			 * @summary:
			 * 		获取满足条件的行索引数组
			 * @description：
			 * 		参数传递用法等同于doFilter调用
			 * @param:
			 * 		{object} data
			 * @return:
			 * 		{array}
			 * @example:
			 * |	${1}var rows = rowset.getSatisfiedFilterRows({name : "NAME",relation : "like", value:'齐'});
			 * ${1}单条件
			 * @example:
			 * |	var filter={} 
			 * |	${2}filter.pattern="${conditionA} && (${conditionB} || ${conditionC})" 
			 * |	filter.condition={ 
			 * |	                   conditionA:{name : "empname",relation : "like", value:"^杨", ignoreCase:true}, 
			 * |	                   conditionB:{name : "deptno",relation : ">=", value:id}, 
			 * |	                   conditionC:{name : "hirdate",relation : "!=", value:new Date(2007,10,10),dataFormat:"yyyy-MM-dd"} 
			 * |	                 } 
			 * |	var rows = rowset.getSatisfiedFilterRows(filter);
			 * ${2}多条件
			 */
			getSatisfiedFilterRows : function(data){
				var primary = this._getBuff(__buffer.PRIMARY),
					   applyFilter = this._getApplyFilter(data), 
					   result = [];
				for(var i=0,l = primary.length;i<l;i++){
					if(applyFilter(primary[i])){
							result.push(i);
					}
				}
				return result;
			},
			/*
			 * @summary:
			 * 		用于树构造层次关系
			 * @private
			 */
			doClassifyFilter : function(data,primary,filter){
				Array.prototype.push.apply(primary,filter.splice(0,filter.length));
				var applyFilter = this._getApplyFilter(data);
				for(var i = primary.length-1;i>=0;i--){
					if(!applyFilter(primary[i])){
						filter.unshift(primary.splice(i,1)[0]);
					}
				}
			},
			_getApplyFilter : function(data){
					var rowSet=this,
					assembleCondition = function(data){
						var dataType = rowSet._getDataType(data.name,data.value);
						if(data.value!=null){							
							if(data.relation == "like"){
								data.value = new RegExp(data.value, "i");
							}
							else{
								if(data.value instanceof  Date){								
									data.value = data.value.getTime();
									dataType = "date";
								}
								if(dataType == "date"){
									data.place = unieap.getRelativeTimePlace(data.dataFormat);
									data.value = unieap.getRelativeTime(data.value,data.place);
								}
							}
						}
						data.compare = unieap.getCompare(dataType,data.relation).compare;
					} ;
					
					var pattern = data["pattern"] || "&&", //条件间逻辑关系
						   p = (pattern=="&&"||pattern=="||")?[]:null, 
						   condition = data["condition"] || 
						   (unieap.getLength(data)>1? {firstCondition:data} :data);	
					
					for(var name in condition){
						p && p.push(" ${".concat(name).concat("} "));						
						assembleCondition(condition[name]);
					}	
					p && (pattern = p.join(pattern));
					
					var scope ={
						judge: function(item,name){
							var data = condition[name];
							return data["compare"](item[data["name"]],data["value"],data["place"] || data["ignoreCase"]);
						}
					}
					for(var name in condition){
						var re = new RegExp("\\$\\{".concat(name).concat("\\}"),"g"); 
						pattern = pattern.replace(re,"this.judge(context,\""+name+"\")");
					}	
					return dojo.hitch(scope,new Function("var context=arguments[0]; return ("+pattern+")"));
			},
			
			_getDataType : function(name,value){
				var metaData = this.getMetaData(name);
				if(metaData){
						return unieap.getDataType(metaData.getDataType());
					}
				if(typeof value=="number") 
					return "number";
				else 
					return "string";
			},
			
			/**
			 * @summary
			 * 		获取指定列的MetaData对象
			 * @param 
			 * 		{string} name
			 * 		 列名称
			 * @return 
			 * 		{object} 
			 * 		MetaData对象
			 * @example:
			 *	 |	var meta=rowset.getMetaData("NAME");
			 *	 |	unieap.debug(meta);
			 */
			getMetaData : function(name){
				var metaData = this._dataStore && this._dataStore.getMetaData(name) || null;
				return metaData
			},
			
			/**
			 * @summary：
			 * 		获取rowSetName，如果是自定义SQL则返回statementName
			 * @return 
			 * 		{string}
			 * @example:
			 * |	rowset.getName();
			 */
			getName : function(){
				var store = this.getDataStore();
				if(!store){
					return "";
				}
				var name = store.getStatementName();
				if(name&&name!=""){
					return name;
				}
				return store.getRowSetName();
			},
			
			/**
			 * @summary:
			 * 		设置dataStore
			 * @param 
			 * 		{unieap.ds.DataStore} dataStore
			 * @example:
			 * 	|	rowset.setDataStore(dataStore);
			 */
			setDataStore : function(dataStore){
				this._dataStore = dataStore;
			},
			
			/**
			 * @summary:
			 * 		得到DataStore
			 * @return:
			 * 		{unieap.ds.DataStore} 
			 * @example:
			 * |	rowset.getDataStore();
			 */
			getDataStore : function(){
				return this._dataStore;
			},
			
			/**
			 * @summary:
			 * 		更新一行数据
			 * @param 
			 * 		{number} rowIndex  
			 * 		行索引
			 * @param  
			 * 		{unieap.ds.Row} row
			 * 		 行对象
			 * @example:
			 *  |	var rowset = new unieap.ds.RowSet([
			 *  |	                 {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001"},
			 *  |	                 {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800",_s:true},
			 *  |	                 {attr_empno:"1002",NAME:"张韶涵",attr_job:"singer",attr_sal:"9500"}
			 *  |	]);
			 *  |	var row = rowset.getRow(0);
			 *  |	rowset.updateRow(1,row);
			 *  |	unieap.debug(rowset);
			 */
			updateRow : function(rowIndex,row){
				var buff = this._getBuff();
				if(buff[rowIndex]){
					buff[rowIndex]=dojo.mixin(row.getData(),{_s:buff[rowIndex]._s?true:false});
					return true;
				}
				return false;
			},
			
			
			/**
			 * @summary:
			 * 		设置指定行的某列值
			 * @param 
			 * 		{number} rowIndex 
			 * 		行下标
			 * @param 
			 * 		{string} name 
			 * 		列名
			 * @param 
			 * 		{string|Number|Null} value
			 * 		 列值
			 * @param 
			 * 		{sString} bufferName 
			 * 		缓冲区名称
			 * @example:
			 * |	var rowset = new unieap.ds.RowSet([
			 * |	               {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001"},
			 * |	               {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800"},
			 * |	               {attr_empno:"1002",NAME:"张韶涵",attr_job:"歌星",attr_sal:"9500"}
			 * |	]);
			 * |	rowset.setItemValue(0,"NAME","黄日华");
			 * |	unieap.debug(rowset);
			 */
			setItemValue : function(rowIndex,name, value,bufferName){
				this.getRow(rowIndex,bufferName).setItemValue(name,value);
			},
			
			/**
			 * @summary:
			 * 		设置指定行的某列日期值
			 * @param 
			 * 		{number} rowIndex
			 * 		 行下标
			 * @param 
			 * 		{string} name
			 * 		 列名
			 * @param 
			 * 		{Date} value
			 * 		 列值
			 * @param 
			 * 		{string} bufferName
			 * 		 缓冲区名称
			 * @example:
			 * |	var rowset = new unieap.ds.RowSet([
			 * |	               {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001"}
			 * |	]);
			 * |	var date = new Date();
			 * |	${1}rowset.setDate(0,"attr_hiredate",date); 
			 * |	unieap.debug(rowset);  
			 * ${1}设置rowset中行索引为0的row的“attr_hiredate”列的值为date
			 */
			setDate : function(rowIndex,name, value,bufferName){
				if(value instanceof Date){
					value = value.getTime();
				}
				this.getRow(rowIndex,bufferName).setItemValue(name,value);
			},
			
			/**
			 * @summary:
			 * 		获得指定行的某列值
			 * @param 
			 * 		{number} rowIndex
			 * 		 行下标
			 * @param 
			 * 		{string} name
			 * 		 列名
			 * @param 
			 * 		{string} bufferName
			 * 		缓冲区名称
			 * @return 
			 * 		{object} 
			 * 		列值
			 * @example:
			 * |	var rowset = new unieap.ds.RowSet([
			 * |	               {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001"}
			 * |	]);
			 * |	alert(rowset.getItemValue(0,"NAME","primary"));
			 */
			getItemValue : function(rowIndex,name, bufferName){
				// return this.getRow(rowIndex,bufferName).getItemValue(name);
                if(this.getRow(rowIndex,bufferName) == null){
                    return null;
                }else{
                    return this.getRow(rowIndex,bufferName).getItemValue(name);
                }
			},
			
			/**
			 * @summary:
			 * 		获得指定行的某列日期值
			 * @param 
			 * 		{number} rowIndex
			 * 		 行下标
			 * @param 
			 * 		{string} name
			 * 		 列名
			 * @param 
			 * 		{string} bufferName 
			 * 		缓冲区名称
			 * @return 
			 * 		{Date|null}
			 * 		 列值
			 * @example:
			 * |	var rowset = new unieap.ds.RowSet([
			 * |	               {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001",attr_hiredate:1260855744997}
			 * |	]);
			 * |	${1}rowset.getDate(0,"attr_hiredate","primary"); 
			 * ${1}获取 主缓冲区 行索引为0的row的“attr_hiredate”字段的日期值
			 */
			getDate : function(rowIndex,name, bufferName){
				var value = this.getRow(rowIndex,bufferName).getItemValue(name);
				return value?new Date(parseInt(value,10)):null;
			},
			
			/**
			 * @summary:
			 * 		获得指定行的某列整型值
			 * @param 
			 * 		{number} rowIndex
			 * 		 行下标
			 * @param 
			 * 		{string} name 
			 * 		列名
			 * @param 
			 * 		{string} bufferName
			 * 		缓冲区名称
			 * @return 
			 * 		{int|null} 
			 * 		列值
			 * @example:
			 * |	var rowset = new unieap.ds.RowSet([
			 * |	               {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001",attr_hiredate:1260855744997}
			 * |	]);
			 * |	alert(rowset.getInt(0,"attr_sal","primary"));
			 */
			getInt : function(rowIndex,name,bufferName){
				var value = this.getRow(rowIndex,bufferName).getItemValue(name);
				return value?parseInt(value,10):null;
			},
			
			/**
			 * @summary:
			 * 		获得指定行的某列浮点值
			 * @param 
			 * 		{number} rowIndex 
			 * 		行下标
			 * @param 
			 * 		{string} name
			 * 		 列名
			 * @param 
			 * 		{string} bufferName
			 * 		 缓冲区名称
			 * @return 	
			 * 		{float|null} 
			 * 		列值
			 * @example:
			 * |	var rowset = new unieap.ds.RowSet([
			 * |	               {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001",attr_hiredate:1260855744997}
			 * |	]);
			 * |	alert(rowset.getFloat(0,"attr_sal","primary"));
			 */
			getFloat : function(rowIndex,name,bufferName){
				var value = this.getRow(rowIndex,bufferName).getItemValue(name);
				return value?parseFloat(value,10):null;
			},
			
			/**
			 *@summary:
			 *		 获得指定行的某列原始值
			 * @param 
			 * 		{number} rowIndex 
			 * 		行下标
			 * @param 
			 * 		{string} name
			 * 		 列名
			 * @param 
			 * 		{string} bufferName
			 * 		 缓冲区名称
			 * @return 	
			 * 		{object} 
			 * 		列值
			 * @example:
			 * |	var rowset = new unieap.ds.RowSet([
			 * |	                 {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001"},
			 * |	                 {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800"},
			 * |	                 {attr_empno:"1002",NAME:"张韶涵",attr_job:"singer",attr_sal:"9500"}
			 * |	]);
			 * |	rowset.setItemValue(0,"NAME","郭靖");
			 * |	alert("原始值为:"+rowset.getItemOrigValue(0,"NAME","primary")+"\n"+"当前值为："+rowset.getItemValue(0,"NAME"));
			 */
			getItemOrigValue : function(rowIndex,name,bufferName){
				return this.getRow(rowIndex,bufferName).getItemOrigValue(name);
			},
			
			/**
			 * @summary:
			 * 		获得指定行的修改状态
			 * @param 
			 * 		{number} rowIndex 
			 * 		行下标
			 * @param 
			 * 		{string} bufferName
			 * 		 缓冲区名称
			 * @return 
			 * 		{number} 
			 * 		新增、修改、未变化
			 * @example:
			 * |	var rowset = new unieap.ds.RowSet([
			 * |	                 {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"9700",_t:1},                
			 * |	                 {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800"}, 
			 * |	                 {attr_empno:"1002",NAME:"张韶涵",attr_job:"singer",attr_sal:"9500"}   
			 * |	]);
			 * | 	${1}alert(rowset.getRowStatus(0,"primary"));
			 *  ${1}获取主缓冲区中行索引为0的修改状态，返回1为新增、2为未修改、3为已修改
			 */
			getRowStatus : function (rowIndex,bufferName){
				return this.getRow(rowIndex,bufferName).getRowStatus();
			},
			
			/**
			 * @summary:
			 *		 设置指定行的修改状态
			 * @param 
			 * 		{number} rowIndex 
			 * 		行下标
			 * @param 
			 * 		{number} status
			 * 		新增、修改、未变化
			 * @param 
			 * 		{string} bufferName
			 * 		 缓冲区名称
			 * @example:
			 * |	var rowset = new unieap.ds.RowSet([
			 * |	                 {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"9700",_t:1},                
			 * |	                 {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800"}, 
			 * |	                 {attr_empno:"1002",NAME:"张韶涵",attr_job:"singer",attr_sal:"9500"}   
			 * |	]);
			 * | 	${1}rowset.setRowStatus(0,3,"primary");
			 * |	unieap.debug(rowset);
			 *  ${1}修改primary缓冲区第0行为新增状态
			 * @description：
			 * 		状态位_t=1,表示该row为新增
			 * 		状态位_t=2或没有，表示该row没有变化
			 * 		状态位_t=3,表示该row被修改过
			 */
			setRowStatus : function (rowIndex,status,bufferName){
				this.getRow(rowIndex,bufferName).setRowStatus(status);
			},
			
			/**
			 * @summary:
			 * 		指定行是否选中
			 * @param 
			 * 		{number} rowIndex 
			 * 		行下标
			 * @param 
			 * 		{string} bufferName
			 * 		 缓冲区名称
			 * @return 
			 * 		{boolean} 
			 * @example:
			 * | 	var rowset = new unieap.ds.RowSet([
			 * |	                ${1} {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001",_s:true},    
			 * |	                 {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800"}                     
			 * |	]);
			 * |	${2}alert(rowset.isRowSelected(0));
			 * |	或
			 * |	alert(rowset.isRowSelected(0,"primary"));   
			 * ${1}状态位_s=true，表示该row被选中
			 * ${2}本例返回true
			 */
			isRowSelected : function (rowIndex,bufferName){
				return this.getRow(rowIndex,bufferName).isRowSelected();
			},		
			/**
			 * @summary:
			 * 		设置指定行的选中状态
			 * @param 
			 * 		{number} rowIndex 
			 * 		行下标
			 * @param 
			 * 		{boolean} selected 
			 * 		true/false
			 * @param 
			 * 		{string} bufferName 
			 * 		缓冲区名称
			 * @example:
			 * |	var rowset = new unieap.ds.RowSet([
		 	 * |	                 {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001"},                
			 * |	                 {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800"}, 
			 * |	                 {attr_empno:"1002",NAME:"张韶涵",attr_job:"singer",attr_sal:"9500"}   
			 * |	]);
			 * |	rowset.setRowSelected(0,true);
			 * |	unieap.debug(rowset);
			 */
			setRowSelected : function (rowIndex,selected,bufferName){
				this.getRow(rowIndex,bufferName).setRowSelected(selected);
			},
			
			/**
			 * @summary:
			 * 		清空指定行的数据
			 * @param 
			 * 		{number} rowIndex
			 * 		行下标
			 * @param 
			 * 		{string} bufferName
			 * 		缓冲区名称
			 * @example:
			 * |	var rowset = new unieap.ds.RowSet([
			 * |	               {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001"},
			 * |	               {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800"},
			 * |	               {attr_empno:"1002",NAME:"张韶涵",attr_job:"歌星",attr_sal:"9500"}
			 * |	]);
			 * |	unieap.debug(rowset);
			 * |	rowset.clear(0,"primary");
			 * |	unieap.debug(rowset);
			 */
			clear : function(rowIndex,bufferName){
				this.getRow(rowIndex,bufferName).clear(rowIndex);
			},
			
			/**
			 * @summary：
			 * 		RowSet收集策略
			 * @param：
			 * 		 {string} pattern
			 * 		 收集表达式
			 * @return
			 * 		 {unieap.ds.RowSet}
			 * @example:
			 * |	var rowset = new unieap.ds.RowSet([
			 * |	               ${1}{attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001",_s:true},         
			 * |	               ${2}{attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800",_t:1},      
			 * |	               ${3}{attr_empno:"1002",NAME:"张韶涵",attr_job:"歌星",attr_sal:"9500",_t:3}           
			 * |	]);
		 	 * |	
			 * |	${4}var rowset1 = rowset.collect("select");              
			 * |	${5}var rowset2 = rowset.collect("insert");              
			 * |	${6}var rowset3 = rowset.collect("update");              
			 * |	${7}var rowset4 = rowset.collect("delete"); 
			 * |	${8}var rowset5 = rowset.collect("auto");              
			 * |	${9}var rowset6 = rowset.collect("none");              
			 * |	${10}var rowset7 = rowset.collect("all");              
			 * ${1}被选中的行(用_s:true来标识)
			 * ${2}新增的行(用_t:1来标识)
			 * ${3}更新的行(用_t:3来标识)
			 * ${4}收集选中行
			 * ${5}收集新增行
			 * ${6}收集更新行
			 * ${7}收集delete缓冲区的行
			 * ${8}收集收集改变数据
			 * ${9}不收集任何数据
			 * ${10}收集所有的数据
			 */
			collect : function(pattern){
				var newRowSet = new unieap.ds.RowSet();
				switch(pattern){
					case "auto" : this._collectAuto(newRowSet) ; break;
					case "none" : this._collectNone(newRowSet) ; break;
					case "all" : this._collectAll(newRowSet) ; break;
					case "update" : this._collectUpdate(newRowSet) ; break;
					case "delete" : this._collectDelete(newRowSet) ; break;
					case "insert" : this._collectInsert(newRowSet) ; break;
					case "select" : this._collectSelect(newRowSet); break;
					default : 
						if(dojo.isFunction(pattern)) 	this._collectCallback(newRowSet,pattern);  break;
				}
				newRowSet.setDataStore(this.getDataStore());
				return newRowSet;
			},
			
			//收集所有的数据
			_collectAll : function(newRowSet){
				newRowSet["primary"] = this["primary"] ;
				newRowSet["filter"] = this["filter"];
				newRowSet["delete"] = this["delete"] ;
			},
			//不收集任何数据
			_collectNone : function(newRowSet){
				newRowSet["primary"] = [] ;
				newRowSet["filter"] = [] ;
				newRowSet["delete"] = [] ;
			},
			//自动收集改变数据
			_collectAuto : function(newRowSet){
				var callback = function(row){
					if(row.getRowStatus()==__status.DATAMODIFIED||row.getRowStatus()==__status.NEWMODIFIED)
						return true;
					return false;
				};
				this._collectBuffer(newRowSet,callback,__buffer.PRIMARY);
				this._collectBuffer(newRowSet,callback,__buffer.FILTER);
				this._collectDelete(newRowSet);
			},
			//收集删除数据，排除新增的
			_collectDelete : function(newRowSet){
				this._collectBuffer(newRowSet,function(row){
					if(row.getRowStatus()!=__status.NEWMODIFIED)
						return true;				
					return false;
				},__buffer.DELETE);
			},
			//收集修改的
			_collectUpdate : function(newRowSet){
				var callback = function(row){
					if(row.getRowStatus()==__status.DATAMODIFIED)
						return true;
					return false;
				};
				this._collectBuffer(newRowSet,callback,__buffer.PRIMARY);
				this._collectBuffer(newRowSet,callback,__buffer.FILTER);
			},
			//收集新增的
			_collectInsert : function(newRowSet){
				var callback = function(row){
					if(row.getRowStatus()==__status.NEWMODIFIED)
						return true;
					return false;
				};
				this._collectBuffer(newRowSet,callback,__buffer.PRIMARY);
				this._collectBuffer(newRowSet,callback,__buffer.FILTER);
			},
			//收集选中的记录
			_collectSelect : function(newRowSet){
				var callback = function(row){
					if(row.isRowSelected())
						return true;
					return false;
				};
				this._collectBuffer(newRowSet,callback,__buffer.PRIMARY);
				this._collectBuffer(newRowSet,callback,__buffer.FILTER);
				this._collectBuffer(newRowSet,callback,__buffer.DELETE);
			},
			//自定义收集
			_collectCallback : function(newRowSet,callback){
				this._collectBuffer(newRowSet,callback,__buffer.PRIMARY);
				this._collectBuffer(newRowSet,callback,__buffer.FILTER);
				this._collectBuffer(newRowSet,callback,__buffer.DELETE);
			},		
			//收集指定缓冲区数据
			_collectBuffer : function(newRowSet, callback,bufferName){
				var buffer = newRowSet._getBuff(bufferName);
				try{
					this.forEach(function(row){
						if(callback(row,bufferName)){
							buffer.push(row.getData());
						}
					},null,null,bufferName);		
				}catch(e){
					//对于一些不需要收集的buffer，直接抛出一个Error即可跳出				
				}	
			},
			
			
			/*
			 * @summary:
			 * 		使其只有一个主键
			 * @param 
			 * 		{string} name 
			 * 		列名称，可以是联合主键
			 * @return 
			 * 		{array} 
			 * 		重复主键记录
			 */
			doPrimaryKey : function(name){
				if(arguments.length<1) return;
				var filterKeyMap = {}, 
					  arg = arguments,
					  result = new Array(),
					  buff = this._getBuff(), 
					  getKey = (arguments.length==1) && function(data){
					  		return data[name];
					  }|| function(data){
					  	  var keys = [];
					      for(var i=arg.length-1;i>=0;i--){
					      	  keys.push(data[arg[i]]);
					      }
					      return keys.join("_");
					  };
				for(var i=buff.length -1;i>=0;i--){
					var key = getKey(buff[i]);
					filterKeyMap[key] && result.push(buff.splice(i,1)[0]) || (filterKeyMap[key]  =1);
				}
				return result;
			},
			
			
			/*
			 * @summary:
			 * 		追加记录
			 * @param:
			 * 		{unieap.ds.RowSet} rowSet
			 * @param:
			 * 		{string} coverage	
			 * 		replace : 替换;
			 *      append : 追加记录，默认;
			 *      union : 取列并集;
			 * @example:
			 * |	 var rowset = new unieap.ds.RowSet([
			 * |	               {attr_empno:"1000",NAME:"黄蓉",attr_job:"演员"},
			 * |	               {attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监"},
			 * |	               {attr_empno:"1002",NAME:"张韶涵",attr_job:"歌星"}
			 * |	]);
			 * |	var rowset1 = new unieap.ds.RowSet([
			 * |	                  {attr_empno:"1003",NAME:"Rose",attr_job:"演员"},
			 * |	                  {attr_empno:"1004",NAME:"Tony",attr_job:"技术总监"},
			 * |	                  {attr_empno:"1005",NAME:"Bill",attr_job:"软件工程师"}
			 * |	]);
			 * |	rowset.append(rowset1,"replace");   
			 * |	rowset.append(rowset1,"append");   
			 * |	rowset.append(rowset1,"union");     
			 */
			append : function(rowSet,coverage){
				if(this == rowSet) return;
				switch(coverage){
					case "replace" :
						this["primary"] = rowSet["primary"];	
						this["filter"] = rowSet["filter"];
						this["delete"] = rowSet["delete"];
						this.initialCount = this["primary"].length;
						break;
					case "append" :
						Array.prototype.push.apply(this["primary"],rowSet["primary"]);
						Array.prototype.push.apply(this["filter"],rowSet["filter"]);
						Array.prototype.push.apply(this["delete"],rowSet["delete"]);
						this.initialCount += rowSet["primary"].length;
						break;
					case "union" : 
						if(this["primary"].length == rowSet["primary"].length){
							for(var i=0,data; (data = this["primary"][i]);i++){
								dojo.mixin(data,rowSet["primary"][i]);
							}
						}
				}
			},
			
		   /**
			* @summary:
			* 		克隆RowSet
			* @description：
			* 		克隆一个新的RowSet
			* @example:
			*  |	var newRowSet = oldRowSet.clone();
			*/
			clone : function(){
				var object = dojo.fromJson(this.toJson());
				var newRowSet = new unieap.ds.RowSet(object);
				return newRowSet;
			},
			
		   /**
			* @summary:
			* 		根据RowSet对象行集记录自动生成完整的树形结构	
			* @description：
			*		遍历一遍循环生成树结构，结构形如：{data:{id:"rootId",label:"根节点"},children:[{...},{...}]}
			* @param：
			* 		{object} data
			* 		传入的构造树的必要条件，id树唯一标识字段名称、parent父节点字段名称、root树根节点标识
			* @return:
			*		返回树根节点
			* @example:
			* |	${1}var treeRowset = new unieap.ds.RowSet([
			* |	                  {nodeID:"1000",parentID:"", title:"黄蓉",isLeaf:false},
			* |	                  {nodeID:"1001",parentID:"1000", title:"齐衷斯",isLeaf:true},
			* |	                  {nodeID:"1002",parentID:"1000", title:"张韶涵",isLeaf:true}
			* |	]);
			* |	
			* |	unieap.debug(treeRowset.generateTreeSet({id:"nodeID",parent:"parentID",label:"title",leaf:"isLeaf",root:"1000"}));
			* ${1}定义一个RowSet对象
			*  @img：
		    * 		images/ds/rowSet/generateTreeSet.png
			*/
			generateTreeSet : function(data){
				var pri = this["primary"], cm = {}, row ,
					ei , ep, id = data["id"] ,
					parent=data["parent"],
					props = data["props"];
				for(var i=0;(row = pri[i]);i++){
					ei = row[id];
					ep = row[parent]==null ? null : row[parent];
					(cm[ei] || (cm[ei]={}))["data"] = row;
					for(var key in props){
						cm[ei][key] = props[key];
					}
					if(!cm[ep]){
						cm[ep]={};
					}
					if(!cm[ep]["children"]){
						cm[ep]["children"] = [];
					}
					cm[ep]["children"].push(cm[ei]);
				}
				if(!cm[data["root"]]){
					return {};
				}
				if(!("data" in cm[data["root"]])){
					(cm[data["root"]]["data"] = {})[id] = data["root"];
				}
				return cm[data["root"]];
			}
		});
	})();
}	
if (!dojo._hasResource["unieap.ds.MetaData"]) {
	dojo._hasResource["unieap.ds.MetaData"] = true;
	dojo.provide("unieap.ds.MetaData");
	
	dojo.declare("unieap.ds.MetaData", null, {
		/**
		 * @declaredClass:
		 * 		unieap.ds.MetaData
		 * @summary:
		 * 		元数据信息。
		 * @description:
		 * 		元数据封装了DataStore中列的信息，包括主键、数据类型、是否可以为空等信息。
		 * @example：
		 * |	new unieap.ds.MetaData("empno",
		 * |			{primaryKey:true,label:"员工编号",dataType:4,nullable:false,precision:4}
		 * |	)
		 */
		
//		/**
//		 * @summary:
//		 * 		定义属性名
//		 * @type:
//		 * 		{string}
//		 */
//		name: "",
//		/**
//		 * @summary:
//		 * 		定义显示文本
//		 * @type:
//		 * 		{string}
//		 */
//		label:"",
//		/**
//		 * @summary:
//		 * 		定义主键
//		 * @type:
//		 * 		{boolean}
//		 */
//		primaryKey : null,
//		/**
//		 * @summary:
//		 * 		定义数据类型
//		 * @type:
//		 * 		{number}
//		 */
//		dataType : null,
//		/**
//		 * @summary:
//		 * 		定义输入长度
//		 * @type:
//		 * 		{number}
//		 */
//		precision : null,
//		/**
//		 * @summary:
//		 * 		定义精确度
//		 * @type:
//		 * 		{number}
//		 */
//		scale : null,
//		/**
//		 * @summary:
//		 * 		值是否为空，默认为true
//		 * @type:
//		 * 		{boolean}
//		 */
//		nullable : null,
//		/**
//		 * @summary:
//		 * 		定义增加记录时的默认值
//		 * @type:
//		 * 		{string|number|boolean}
//		 */
//		defaultValue : null,
//		/**
//		 * @summary:
//		 * 		定义格式化信息
//		 * @type:
//		 * 		{string}
//		 * @example:
//		 * | yyyy-MM-dd hh:mm:ss
//		 * | #,###.00
//		 */
//		format : null,
//		/**
//		 * @summary:
//		 * 		小于等于指定的数值
//		 * @type:
//		 * 		{number}
//		 */
//		max : null,
//		/**
//		 * @summary:
//		 * 		大于等于指定的数值
//		 * @type:
//		 * 		{number}
//		 */
//		min : null,
//		/**
//		 * @summary:
//		 * 		规定数值范围
//		 * @type:
//		 * 		{object}
//		 * @example:
//		 * | {min:1,max:3}
//		 * | {min:1,max:Infinity} == {min:1}
//		 * | {min:-Infinity,max:3} == {max:3}
//		 */
//		range : null,
//		/**
//		 * @summary:
//		 * 		大于等于指定的时间
//		 * @type:
//		 * 		{number}
//		 * @example:
//		 * | new Date(2009,0,1).getTime()
//		 */
//		past : null,
//		/**
//		 * @summary:
//		 * 		小于等于指定的时间
//		 * @type:
//		 * 		{number}
//		  * @example:
//		 * | new Date(2010,5,3).getTime()
//		 */
//		future : null,
//		/**
//		 * @summary:
//		 * 		正则表达式定义
//		 * @type:
//		 * 		{string}
//		 */
//		pattern : null,
//		
//		/**
//		 * @summary:
//		 * 		最大长度
//		 * @type:
//		 * 		{number}
//		 */
//		maxLength:null,
		
//		/**
//		 * @summary:
//		 * 		最小长度
//		 * @type:
//		 * 		{number}
//		 */
//		minLength:null
//		/**
//		 * @summary:
//		 * 		属性提示信息
//		 * @type:
//		 * 		{object}
//		 * @example:
//		 * |{
//		 * |	nullable : "输入值不可以为空",
//		 * |	precision : "长度不能大于10",
//		 * |	scale : "精确度不能大于2",
//		 * |	max : "值能不能大于100",
//		 * |	min : "值能不能小于5",
//		 * |	range : "值介于5到100之间",
//		 * |	past : "时间需大于2010/03/21",
//		 * |	future : "时间需小于2010/05/02",
//		 * |	pattern : "值应该符合Email格式",
//		 * |	maxLength:"最大长度只能为5",
//		 * |	minLength:"最小长度为3"
//		 * |}
//		 */
//		prompts : null,
		
		constructor: function(name, metaData){
			if (arguments.length == 0) 
				return;
			this.setData(metaData);
			this.setName(name);
		},
		/**
		 * @summary：
		 * 		设置元数据
		 * @param:
		 * 		{object} metaData 
		 * @example:
		 * |	var metaData={primaryKey:false,label:"姓名",dataType:12,nullable:true}
		 * |	var meta = new unieap.ds.MetaData("empname",
		 * |			{primaryKey:true,label:"员工编号",dataType:4,nullable:false,precision:4});
		 * |	meta.setData(metaData);
		 * |	unieap.debug(meta);
		 */
		setData: function(metaData){
			dojo.mixin(this, metaData);
		},
		/**
		 * @summary：
		 * 		取得列名
		 * @example:
		 *  |	var meta = new unieap.ds.MetaData("empname",
		 *  |			{primaryKey:true,label:"员工编号",dataType:4,nullable:false,precision:4}
		 *  |		);
		 *  |	alert(meta.getName());
		 */
		getName: function(){
			return this.name;
		},
		/**
		 * @summary:
		 * 		设置名称
		 * @example:
		 *  |	var meta = new unieap.ds.MetaData("empno",
		 *  |			{primaryKey:true,label:"员工编号",dataType:4,nullable:false,precision:4}
		 *  |	);
		 *  |	meta.setName("no");
		 *  |	unieap.debug(meta);
		 */
		setName: function(name){
			this.name = name;
		},
		/**
		 * @summary：
		 * 	取得显示的名称label
		 * @example:
		 *  |	var meta = new unieap.ds.MetaData("empname",
		 *  |			{primaryKey:true,label:"员工编号",dataType:4,nullable:false,precision:4}
		 *  |		);
		 *  |	alert(meta.getLabel());
		 */
		getLabel: function(){
			return this.label;
		},
		/**
		 * @summary:
		 * 		设置显示名称label信息
		 * @example:
		 *  |	var meta = new unieap.ds.MetaData("empno",
		 *  |			{primaryKey:true,label:"员工编号",dataType:4,nullable:false,precision:4}
		 *  |	);
		 *  |	meta.setLabel("编号");
		 *  |	unieap.debug(meta);
		 */
		setLabel: function(label){
			this.label = label;
		},
		/**
		 * @summary:
		 * 		取得数据类型，与java.sql.Types相对应
		 * @example:
		 *  |	var meta = new unieap.ds.MetaData("empno",
		 *  |			{primaryKey:true,label:"员工编号",dataType:4,nullable:false,precision:4}
		 *  |	);
		 *  |	alert(meta.getDataType());
		 */
		getDataType: function(){
			return this.dataType;
		},
		/**
		 * @summary:
		 * 		设置数据类型
		 * @example:
		 *  |	var meta = new unieap.ds.MetaData("empno",
		 *  |			{primaryKey:true,label:"员工编号",dataType:4,nullable:false,precision:4}
		 *  |	);
		 *  |	meta.setDataType(8);
		 *  |	unieap.debug(meta);
		 */
		setDataType: function(dataType){
			this.dataType = dataType;
		},
		/**
		 * @summary:
		 * 		是否为主键
		 * @example:
		 *  |	var meta = new unieap.ds.MetaData("empno",
		 *  |			{primaryKey:true,label:"员工编号",dataType:4,nullable:false,precision:4}
		 *  |	);
		 *  |	${1}alert(meta.isPrimaryKey());
		 *  ${1}本例中设置了empno为主键，返回为true
		 */
		isPrimaryKey: function(){
			return !!this.primaryKey;
		},
		/**
		 * @summary:
		 * 		设置是否为主键
		 * @example:
		 *  |	var meta = new unieap.ds.MetaData("empno",
		 *  |			{primaryKey:true,label:"员工编号",dataType:4,nullable:false,precision:4}
		 *  |	);
		 *  |	meta.setPrimaryKey(false);
		 *  |	unieap.debug(meta);
		 */
		setPrimaryKey: function(primaryKey){
			this.primaryKey = primaryKey;
		},
		/**
		 * @summary:
		 * 		如果数据类型为数字类型，设置数字长度信息
		 * @example:
		 *  |	var meta = new unieap.ds.MetaData("empno",
		 *  |			{primaryKey:true,label:"员工编号",dataType:4,nullable:false,precision:4}
		 *  |	);
		 *  |	alert(meta.getPrecision());
		 */
		getPrecision: function(){
			return this.precision;
		},
		/**
		 * @summary:
		 * 		设置数字长度
		 * @example:
		 *  |	var meta = new unieap.ds.MetaData("empno",
		 *  |			{primaryKey:true,label:"员工编号",dataType:4,nullable:false,precision:4}
		 *  |	);
		 *  |	meta.setPrecision(8);
		 *  |	unieap.debug(meta);
		 */
		setPrecision: function(precision){
			this.precision = precision;
		},
		/**
		 * @summary:
		 * 		如果数据类型为数字类型，获取小数点位数信息
		 * @example:
		 *  |	var metaDatas = getWidgetById('grid').getBinding().getDataStore().getMetaData();
		 *  |       metaDatas[0].setScale(2);
		 *  |       alert(metaDatas[0].getScale());
		 */
		getScale: function(){
			return this.scale;
		},
		/**
		 * @summary:
		 * 		设置小数点位数
		 * @example:
		 *  |	var meta = new unieap.ds.MetaData("empno",
		 *  |			{primaryKey:true,label:"员工编号",dataType:4,nullable:false,precision:4}
		 *  |	);
		 *  |	 meta.setScale(2);
		 *  |	unieap.debug(meta);
		 */
		setScale: function(scale){
			this.scale = scale;
		},
		/**
		 * @summary:
		 * 		是否可以为空
		 * @example:
		 *  |	var meta = new unieap.ds.MetaData("empno",
		 *  |				{primaryKey:true,label:"员工编号",dataType:4,nullable:false,precision:4}
		 *  |	);
		 *  |	${1}alert(meta.isNullable());
		 *  ${1}本例中设置了empno不可以为空，返回为false
		 */
		isNullable: function(){
			return this.nullable != false;
		},
		/**
		 * @summary:
		 * 		设置是否可以为空
		 * @example:
		 *  |	var meta = new unieap.ds.MetaData("empno",
		 *  |			{primaryKey:true,label:"员工编号",dataType:4,nullable:false,precision:4}
		 *  |	);
		 *  |	meta.setNullable(true);
		 *  |	unieap.debug(meta);
		 */
		setNullable: function(nullable){
			this.nullable = nullable;
		},
		/**
		 * @summary:
		 * 		设置默认值
		 * @example:
		 *  |	var meta = new unieap.ds.MetaData("empno",
		 *  |			{primaryKey:true,label:"员工编号",dataType:4,nullable:false,defaultValue:111}
		 *  |	);
		 *  |	alert(meta.getDefaultValue());
		 */
		getDefaultValue: function(){
			return this.defaultValue;
		},
		/**
		 * @summary:
		 * 		设置默认值
		 * @example:
		 *  |	var meta = new unieap.ds.MetaData("empno",
		 *  |			{primaryKey:true,label:"员工编号",dataType:4,nullable:false,precision:4}
		 *  |	);
		 *  |	meta.setDefaultValue(111);
		 *  |	unieap.debug(meta);
		 *  
		 */
		setDefaultValue: function(defaultValue){
			this.defaultValue = defaultValue;
		},
		/**
		 * @summary:
		 * 		如果数据类型为日期类型，设置日期显示格式
		 * @return:
		 * 		{string}
		 * @example:
		 *  |	var meta = new unieap.ds.MetaData("date",
		 *  |			{primaryKey:false,label:"日期",dataType:97,nullable:true,format:"yyyy-MM-dd"}
		 *  |		);
		 *  |	alert(meta.getFormat());
		 */
		getFormat: function(){
			return this.format;
		},
		/**
		 * @summary:
		 * 		设置日期类型的格式化信息
		 * @example:
		 *  |	var meta = new unieap.ds.MetaData("empno",
		 *  |			{primaryKey:false,label:"日期",dataType:97,nullable:true}
		 *  |	);
		 *  |	meta.setFormat("yyyy-MM-dd");
		 *  |	unieap.debug(meta);
		 */
		setFormat: function(format){
			this.format = format;
		},
		/**
		 * @summary:
		 * 		获取最大值，默认为正无穷
		 * @return:
		 * 		{number} 整型数值
		 * @example:
		 * | var meta = new unieap.ds.MetaData("empno",
		 * |			{primaryKey:false,label:"编号",dataType:4,nullable:true,max:100}
		 * |	);
		 * | alert(meta.getMax());
		 */
		getMax : function(){
			return this.max;
		},
		/**
		 * @summary:
		 * 		设置最大值
		 * @param:
		 * 		{number} max 整数
		 * @example:
		 *  |	var meta = new unieap.ds.MetaData("empno",
		 *  |			{primaryKey:false,label:"编号",dataType:4}
		 *  |	);
		 *  |	meta.setMax(100);
		 *  |	unieap.debug(meta);
		 */
		setMax : function(max){
			this.max = max;
		},
		/**
		 * @summary:
		 * 		获取最小值，默认为负无穷
		 * @return:
		 * 		{number} 整型数值
		 * @example:
		 * | var meta = new unieap.ds.MetaData("empno",
		 * |			{primaryKey:false,label:"编号",dataType:4,nullable:true,min:-1}
		 * |	);
		 * | alert(meta.getMin());
		 */
		getMin : function(){
			return this.min;
		},
		/**
		 * @summary:
		 * 		设置最大值
		 * @param:
		 * 		{number} min 整数
		 * @example:
		 *  |	var meta = new unieap.ds.MetaData("empno",
		 *  |			{primaryKey:false,label:"编号",dataType:4}
		 *  |	);
		 *  |	meta.setMin(1);
		 *  |	unieap.debug(meta);
		 */
		setMin : function(min){
			this.min = min;
		},
		/**
		 * @summary:
		 * 		获取值的取值范围，默认为空
		 * @return:
		 * 		{object} 范围定义对象
		 * @example:
		 * | var meta = new unieap.ds.MetaData("empno",
		 * |			{primaryKey:false,label:"编号",dataType:4,nullable:true,range:{min:1,max:100}}
		 * |	);
		 * | alert(meta.getRange());
		 */
		getRange : function(){
			return this.range;
		},
		/**
		 * @summary:
		 * 		设置值的范围
		 * @param:
		 * 		{range} min 整数
		 * @example:
		 *  |	var meta = new unieap.ds.MetaData("empno",
		 *  |			{primaryKey:false,label:"编号",dataType:4}
		 *  |	);
		 *  |	meta.setRange({min:1,max:100});
		 *  |	unieap.debug(meta);
		 */
		setRange : function(range){
			this.range = range;
		},
		/**
		 * @summary:
		 * 		获取最小时间整型值
		 * @return:
		 * 		{number} 时间整型数据
		 * @example:
		 * | var meta = new unieap.ds.MetaData("hirdate",
		 * |			{primaryKey:false,label:"日期",dataType:93,nullable:true,past: new Date().getTime()}
		 * |	);
		 * | alert(meta.getPast());
		 */
		getPast : function(){
			return this.past;
		},
		/**
		 * @summary:
		 * 		设置最小时间
		 * @param:
		 * 		{number} past 时间整型数值
		 * @example:
		 *  |	var meta = new unieap.ds.MetaData("hirdate",
		 *  |			{primaryKey:false,label:"日期",dataType:93}
		 *  |	);
		 *  |	meta.setPast(new Date().getTime());
		 *  |	unieap.debug(meta);
		 */
		setPast : function(past){
			this.past = past;
		},
		/**
		 * @summary:
		 * 		获取最大时间整型值
		 * @return:
		 * 		{number} 时间整型数据
		 * @example:
		 * | var meta = new unieap.ds.MetaData("hirdate",
		 * |			{primaryKey:false,label:"日期",dataType:93,nullable:true,past: new Date(2012,1,1).getTime()}
		 * |	);
		 * | alert(meta.getPast());
		 */
		getFuture : function(){
			return this.future;
		},
		/**
		 * @summary:
		 * 		设置最大时间
		 * @param:
		 * 		{number} future 时间整型数值
		 * @example:
		 *  |	var meta = new unieap.ds.MetaData("hirdate",
		 *  |			{primaryKey:false,label:"日期",dataType:93}
		 *  |	);
		 *  |	meta.setFuture(new Date(2012,1,1).getTime());
		 *  |	unieap.debug(meta);
		 */
		setFuture : function(future){
			this.future = future;
		},
		/**
		 * @summary:
		 * 		获取正则表达式，默认为空
		 * @return:
		 * 		{string} 表达式内容
		 * @example:
		 * | var meta = new unieap.ds.MetaData("salay",
		 * |			{primaryKey:false,label:"工资",dataType:4,nullable:true,pattern:"^\\d+$"}
		 * |	);
		 * | alert(meta.getPattern());
		 */
		getPattern : function(){
			return this.pattern;
		},
		/**
		 * @summary:
		 * 		设置校验的正则表达
		 * @param:
		 * 		{string} pattern 正则表达
		 * @example:
		 * | var meta = new unieap.ds.MetaData("salay",
		 * |			{primaryKey:false,label:"工资",dataType:4,nullable:true}
		 * |	);
		 * | meta.setPattern("^\\d+$");
		 * | unieap.debug(meta);
		 */
		setPattern : function(pattern){
			this.pattern = pattern;
		},
		/**
		 * @summary:
		 * 		得到属性值
		 * @param:
		 * 		{string} name 属性名称
		 * @return:
		 * 		{object} 返回值，任意对象
		 * @example:
		 *  |	var meta = new unieap.ds.MetaData("empno",
		 *  |			{primaryKey:true,label:"员工编号",dataType:4,nullable:false,precision:4}
		 *  |	);
		 *  |	meta.setAttribute("attr","test");
		 *  |	alert(meta.getAttribute("attr"));
		 *  
		 */
		getAttribute: function(name){
			return this[name];
		},
		/**
		 * @summary:
		 * 		设置属性
		 * @param:
		 * 		{string} name 属性名称
		 * @param:
		 * 		{object} value 属性值
		 * @example:
		 *  |	var meta = new unieap.ds.MetaData("empno",
		 *  |			{primaryKey:true,label:"员工编号",dataType:4,nullable:false,precision:4}
		 *  |	);
		 *  |	meta.setAttribute("attr","test");
		 *  |	unieap.debug(meta);
		 */
		setAttribute: function(name, value){
			this[name] = value;
		},
		
		/**
		 * @summary:
		 * 		获得能输入的最大长度
		 * @return:
		 * 		{number}
		 */
		getMaxLength:function(){
			return this.maxLength;
		},
		
		/**
		 * @summary:
		 * 		设置能输入的最大长度
		 * @param:
		 * 		{number} maxLength
		 */
		setMaxLength:function(maxLength){
			this.maxLength=maxLength;
		},
		
		/**
		 * @summary:
		 * 		获得必须输入的最小长度
		 * @return:
		 * 		{number}
		 */
		getMinLength:function(){
			return this.minLength;
		},
		
		/**
		 * @summary:
		 * 		设置必须输入的最小长度
		 * @param:
		 * 		{number} minLength
		 */
		setMinLength:function(minLength){
			this.minLength=minLength;
		},
		/**
		 * @summary:
		 * 		根据属性名称获取，校验提示信息，默认为空
		 * @param:
		 * 		{string} name 属性名
		 * @return:
		 * 		{string} 提示信息
		 * @example:
		 *  |	var meta = new unieap.ds.MetaData("empno",
		 *  |			{primaryKey:true,label:"员工编号",dataType:4,nullable:false,precision:4,prompts:{nullable:"编号输入值不能为空。",precision:"编号长度不能大于4"}}
		 *  |	);
		 *  |	unieap.debug(meta.getPrompt("nullable"));
		 */
		getPrompt : function(name){
			return (this.prompts || (0))[name];
		},
		/**
		 * @summary:
		 * 		设置属性提示信息
		 * @param:
		 * 		{string} name 属性名
		 * @param:
		 * 		{string} value 提示信息
		 * @example:
		 *  |	var meta = new unieap.ds.MetaData("empno",
		 *  |			{primaryKey:true,label:"员工编号",dataType:4,nullable:false,precision:4}
		 *  |	);
		 *  |	meta.setPrompt("nullable","编号输入值不能为空。");
		 *  |  unieap.debug(meta);
		 */
		setPrompt : function(name,value){
			 (this.prompts = this.prompts || {})[name] = value;
		}
	});
}
if (!dojo._hasResource["unieap.ds.DataStore"]) {
	dojo._hasResource["unieap.ds.DataStore"] = true;
	dojo.provide("unieap.ds.DataStore");
	
	dojo.declare("unieap.ds.DataStore",null,{
		/**
		 * @declaredClass:
		 * 		unieap.ds.DataStore
		 * @classDescription:
		 * 		DataStore是RowSet的超集，一个DataStore中至多包含一个RowSet.
		 * 		包含数据信息,如分页大小、记录条数等。
		 * @summary:
		 * 		DataStore
		 * @example：
		 * |	${1}new unieap.ds.DataStore('store1');
		 * 		${1}创建一个空的DataStore
		 * @example：
		 * |	var ds={
		 * |		metaData:{},
		 * |		pageSize:45,
		 * |		pageNumber:1,
		 * |		recordCount:45,
		 * |		name:'store1',
		 * |		rowset:[{...},{...}]
		 * |	}
		 * |	new unieap.ds.DataStore(ds);
		 * 		根据数据结构创建一个DataStore
		 * @example：
		 * |	new unieap.ds.DataStore('store1',ds);
		 *		根据数据结构创建一个名为'store1'的dataStore
		 * @img:
		 * 		images/ds/dataStore.png
		 */
		constructor: function(name, dataStore) {				
				this._initData();
				if (arguments.length == 2) {
					this.name = name;
					dojo.isString(dataStore) && (dataStore = dojo.fromJson(dataStore));
					this._loadData(dataStore);					
				}
				else if (arguments.length == 1){
					var _temp = arguments[0];
					if(typeof _temp =="object") {						
						this._loadData(_temp);		
					}
					else{	
						this.name = _temp;	
					}
				}
				this.rowSet.setDataStore(this);
				
		},
		
		//初始化必要数据
		_initData : function(){
			this.name = "";
			this.pageNumber = 1;
			//Math.pow(2,31)-1
            // this.pageSize = 100;
			this.pageSize = 2147483647;
			this.recordCount = 0;
			this.rowSet=new unieap.ds.RowSet();
		},
		
		//加载数据
		_loadData : function(dataStore){

			if(dataStore instanceof Array){
				this.setRecordCount(dataStore.length);
				this.rowSet = new unieap.ds.RowSet(dataStore);
				return;
			}
			if(dataStore.rowSet){
				this.rowSet = new unieap.ds.RowSet(dataStore.rowSet);
				delete dataStore["rowSet"];
			}				
			dojo.mixin(this,dataStore);
		},	
		
		/**
		 * @summary:
		 * 		设置DataStore的名称
		 * @description：
		 * 		为数据结构中的name字段的值
		 * @param 
		 * 		{string} name  
		 * 		DataStore的名称
		 * @example：
		 * |	 var ds = new unieap.ds.DataStore("test");
		 * |	${1}ds.setName('HelloStore');
		 * |	unieap.debug(ds);
		 *${1}设置ds的name为'HelloStore'	
		 */
		setName: function(name) {
			this.name = name;
		},
				
		/**
		 * @summary:
		 * 		设置DataStore的分页大小
		 * @description:
		 * 		为数据结构中的pageSize字段的值
		 * @param 
		 * 		{number} pageSize
		 * 		 分页大小
		 * @example：
		 *  |	 var ds = new unieap.ds.DataStore("test");
		 *  |	${1}ds.setPageSize(26);
		 *  |	unieap.debug(ds);
		 * ${1}设置ds的分页大小为26 
		 */		
		setPageSize: function(pageSize) {
			this.pageSize =pageSize;
		},
		
		/**
		 * @summary:
		 * 		设置DataStore的分页序号,为数据结构中的pageNumber字段的值
		 * @param 
		 * 		{number} pageNo 
		 * 		分页序号
		 * @example：
		 * |	 var ds = new unieap.ds.DataStore("test");
		 * |	${1}ds.setPageNumber(1);
		 * |	unieap.debug(ds);
		 * ${1}	设置当前页为第一页
		 * 
		 */		
		setPageNumber: function(pageNo) {
			this.pageNumber = pageNo;
		},
		
			
		/**
		 * @summary:
		 * 		设置服务器端DataSet名称
		 * @param 
		 * 		{string} dataSetName 
		 * 		后端DataSet文件名称
		 * @example:
		 *  |	 var ds = new unieap.ds.DataStore("test");
		 *  |	 ${1}ds.setRowSetName("emp");
		 *  |	或
		 *  |	 ${2}ds.setRowSetName("com.neusoft.unieap.ria.Emp");
		 *  |	unieap.debug(ds);
		 *  ${1}drm实现时，参数为DataSet配置文件名称
		 *  ${2}hibernate实现时，参数为javaBean类名
		 */
		setRowSetName:function(rowSetName){
			this.rowSetName =rowSetName;
		},
		
		/**
		 * @summary:
		 * 		设置记录数
		 * @description:
		 * 		当前DataStore的记录数,需要注意的是此记录数不实时更新。
		 * 		一般由后台构造。
		 * @param 
		 * 		{number} recordCount
		 * @example：
		 * |	 var ds = new unieap.ds.DataStore("test");
		 * |	${1}ds.setRecordCount(33);
		 * |	unieap.debug(ds);
		 * ${1}	设置记录数为33
		 */		
		setRecordCount : function(recordCount){
			this.recordCount = recordCount;
		},
		
		/**
		 * @summary：
		 * 		设置查询的过滤条件
		 * @description：
		 * 		其形式为sql中的where条件，如"role='admin' and dept=20"
		 * 		用于发送请求,由后台进行处理。
		 * @param 
		 * 		{string} filter 
		 * 		过滤条件
		 * @example：
		 * |	var ds = new unieap.ds.DataStore("test");
		 * |	var filter = "empno = ?";
		 * |	${1}ds.setCondition(filter);
		 * |	unieap.debug(ds);
		 * ${1}	设置查询条件为"empno = ?"， 当查询条件中存在“?”时需要传入查询条件值，即调用insertConditionValue方法
		 */
		setCondition:function(filter){
			this.condition =filter;
		},
				
		/**
		 * @summary：
		 * 		设置排序条件
		 * @description：
		 * 		其形式为sql中的排序条件,即order by后面部分，如"username desc, roleName"。
		 * 		用于服务端排序，发送请求由后台处理。
		 * @param：
		 * 		{string} order 
		 * 		排序条件
		 * @example：
		 * |	var ds = new unieap.ds.DataStore("test");
		 * |	${1}ds.setOrder("[name] asc")
		 * |	unieap.debug(ds);
		 * 		${1}指定name	列的排序方式,此处drm实现时若name为别名（前台绑定名）需要用“[]”标识。
		 * 		列名不需要，若hibernate实现也不需要
		 */
		setOrder:function(order){
			this.order =order;
		},
		
		/**
		 * @summary：
		 * 		设置分组信息
		 * @param：
		 * 		{string} group
		 * @example:
		 *  |	var ds = new unieap.ds.DataStore("test");
		 *  |	${1}ds.setGroup("dept,hiredate");
		 *  |	unieap.debug(ds);
		 * 		${1}设置group信息，请求数据	
		 */		
		setGroup : function(group){
			this.group = group;
		},
		
		/*
		 * @summary：
		 * 		设置元数据描述信息
		 * @param
		 * 	 	{object} metaData 
		 * 		数据对象
		 * @example:
		 * 	|	 ds.setMetaData(metData);
		 */
		setMetaData : function(metData){
			this.metaData = metData;
		},
		
		/**
		 * @summary:
		 * 		添加元数据描述信息
		 * @param 
		 * 		{string|unieap.ds.MetaData}  name 列名称,或者是unieap.ds.MetaData对象
		 * @param 
		 * 		{object} metaData 
		 * 		元数据对象
		 * @example:
		 *  |	var ds = new unieap.ds.DataStore("test");
		 *  |	var meta={primaryKey:true,label:"员工编号",dataType:4,nullable:false,precision:4};	
		 * 	|	ds.addMetaData("attr_empno",meta);
		 *  |	unieap.debug(ds);
		 * @example:
		 * 	|	var metaData = new unieap.ds.MetaData("attr_empno");
		 * 	|	metaData.setPrimaryKey(true);
		 * 	|	metaData.setDataType(4);
		 * 	|	metaData.setNullable(false);
		 * 	|	var ds = new unieap.ds.DataStore("test");
		 * 	|	ds.addMetaData(metaData);
		 * 	|	unieap.debug(ds);
		 */
		addMetaData : function(name,metaData){	
			var _metaData = metaData || {}, _d,_m = this.metaData;
			if(arguments.length==1 && (_d = arguments[0])){
				for(var item in _d){
					if(!dojo.isFunction(_d[item])){
						_metaData[item] = _d[item];
					}
				}
				name = _metaData["name"];
				if(name==null) return ;
			}		
			if(!this.metaData){
				this.metaData = {}; 
				_m = this.metaData["columns"] = {};
			}
			else if(this.metaData["columns"]){
				_m = this.metaData["columns"];
			}
			_m[name] = _metaData;	
		},
		
		/**
		 * @summary:
		 * 		设置自定义sql的模板名称
		 * @param 
		 * 		{string} statementName 
		 * 		sql模板名称
		 * @example:
		 * |	var ds = new unieap.ds.DataStore("test");
		 * |	${1}ds.setStatementName("emp");
		 * |	unieap.debug(ds);
		 *  ${1}emp为statement配置文件名称
		 */
		setStatementName : function(statementName){
			this.statementName = statementName;
		},
		
		/**
		 * @summary:
		 * 		添加查询值
		 * @param 
		 * 		{string} value 查询值，不能为null
		 * @param 
		 * 		{number} dataType
		 * @example:
		 * |	var ds = new unieap.ds.DataStore("test");
		 * |	${1}ds.insertConditionValue("%王",unieap.DATATYPES.VARCHAR,0);
		 * |	unieap.debug(ds);
		 *  ${1}需要和setCondition方法配合使用，对应于查询条件condition中的“?”
		 */
		insertConditionValue : function(value,dataType,index){
			this.conditionValues?this.conditionValues:(this.conditionValues = []);
			if(!index == undefined){
				this.conditionValues[index]=[value,dataType];	
			}else{
				this.conditionValues.push([value,dataType])
			}
		},
		
		/**
		 * @summary:
		 * 		移除conditionValues变量
		 * @example:
		 * |	var ds = new unieap.ds.DataStore("test");
		 * |	ds.insertConditionValue("%王",unieap.DATATYPES.VARCHAR,0);
		 * |	ds.removeConditionValues();
		 * |	unieap.debug(ds);
		 */
		removeConditionValues : function(){
			this.conditionValues=null;
		},
		/**
		 * @summary:
		 * 		 查询后条件重置。将查询条件、查询条件对应值、翻页信息等重置
		 * @example:
		 * |	var ds = new unieap.ds.DataStore("test");
		 * |	ds.setCondition("ename like ?");
		 * |	ds.insertConditionValue("%王",unieap.DATATYPES.VARCHAR,0);
		 * |	ds.setPageSize(10);
		 * |	ds.setPageNumber(3);
		 * |	${1}ds.resetCondition();
		 * |	unieap.debug(ds);
		 * ${1}查询后调用此方法，将查询条件和条件中“?”对应值清空，防止下次查询时“?"与值对应不上。
		 */
		resetCondition:function(){
			this.condition="";
			this.conditionValues=null;
			this.pageNumber=1;
			this.recordCount=0;
		},
		/**
		 * @summary：
		 * 		添加用于自定义查询的属性名称和值
		 * @description:
		 * 		定义在使用statementName自定义查询时，替换自定义sql模板中的变量，内容可以为空。
		 * @param 
		 * 		{string} name 
		 * 		属性名
		 * @param 
		 * 		{string} value 
		 * 		属性值，不能为null
		 * @param 
		 * 		{number} dataType
		 * 		Java中的数据类型，见global.js中的unieap.DATATYPES变量
		 * @example:
		 * 
		 * 	|	${1}#set($select ="select * from up_demo_emp")		
		 *	|	#set($condition="")	
		 *	|	#set($list = [${emp},${dept}])
		 *	|	#foreach($c in $list)
		 *	|		#if(${c})
		 *	|    	   #set($condition=$condition+" and " + ${c}+"=?")
		 *	| 	 #end
		 *	|	#end
		 *	|	#if(${hiredate}) 
		 *	|		#set($condition=$condition+" and " + ${hiredate}+" = date'"+${date}+"'") 
		 *	|	#end
		 *	|	#if($condition=="") $select
		 *	|	#else $select where ${condition.substring(5)} 
		 *	|	#end
		 *  ${1}statement配置文件
		 *  @example:	
		 *  |	var ds = new unieap.ds.DataStore("test");
		 *  |	${2}ds.addAttribute("emp","EMPNO","8");
		 *  |	${3}ds.addAttribute("dept","DEPTNO","4");
		 *  |	unieap.debug(ds);
		 *  
		 * 	${2}name参数对应配置文件中的变量，value参数对应变量替换值。
		 * 		此处变量emp对应与配置文件中的“${emp}”，即将模板中的“${emp}”用EMPNO替代，数据类型为java.sql.Types.DOUBLE；
	     *  ${3}将变量comp替换成比较表达式等号“=”数据类型为java.sql.Types.VARCHAR
		 */
		addAttribute : function(name,value,dataType){
			(this.attributes?
				this.attributes:
				(this.attributes = {})
			)[name] = [value,dataType]; 
		},
		
		/**
		 * @summary:
		 * 		删除自定义属性
		 * @param 
		 * 		{string} name 
		 * 		属性名称
		 * @example:
		 * |	var ds = new unieap.ds.DataStore("test");
		 * |	ds.addAttribute("emp","EMPNO","8");
		 * |	ds.addAttribute("comp","=","12");
		 * |	ds.removeAttribute("emp");
		 * |	unieap.debug(ds);
		 */
		removeAttribute : function(name){
			this.attributes && delete this.attributes[name];
		},
		
		/**
		 * @summary:
		 * 		删除自定义属性所有内容
		 * @example:
		 * |	var ds = new unieap.ds.DataStore("test");
		 * |	ds.addAttribute("emp","EMPNO","8");
		 * |	ds.addAttribute("comp","=","12");
		 * |	ds.removeAttributes();
		 * |	unieap.debug(ds);
		 */
		removeAttributes : function(){
			delete this["attributes"];
		},
		
		/**
		 * @summary：
		 * 		设置自定义查询属性对象
		 * @param
		 * 		 {object} attributes 属性对象
		 * @example:
		 * |	var attributes={emp:["EMPNO",unieap.DATATYPES.DOUBLE],
		 * |					empname:["小白",unieap.DATATYPES.VARCHAR]};
		 * |	var ds = new unieap.ds.DataStore("test");
		 * |	ds.setAttributes(attributes);
		 * |	unieap.debug(ds);
		 */
		setAttributes : function(attributes){
			this.attributes = attributes;
		},
		
		/**
		 * @summary:
		 * 		设置连接池
		 * @param 
		 * 		{string} pool 数据源名称
		 * @example:
		 * |	var ds = new unieap.ds.DataStore("test");
		 * |	ds.setPool("UNIEAP");
		 * |	unieap.debug(ds);
		 */
		setPool : function(pool){
			this.pool =pool ;
		},
		
		
		/**
		 * @summary:
		 * 		添加统计列
		 * @param 
		 * 		{string} name 列名
		 * @param 
		 * 		{String} op 统计操作
		 * 		sum|avg|max|min
		 * @example:
		 * |	var ds = new unieap.ds.DataStore("test");
		 * |	ds.addStatistic("attr_sal","max");
		 * |	unieap.debug(ds);
		 */
		addStatistic : function(name,op){
			this.statistics = this.statistics || {};
			(this.statistics[name] = this.statistics[name] || {})[op] = "";
		},
		/**
		 * @summary:
		 * 		移除统计列
		 * @description:
		 * 		当op不为空时删除name列指定操作符，
		 * 		否则删除name列的所有统计方式
		 * @param 
		 * 		{string} name 列名
		 * @param 
		 * 		{String} op 统计操作
		 * 		sum|avg|max|min
		 * @example:
		 * |	var ds = new unieap.ds.DataStore("test");
		 * |	ds.addStatistic("attr_sal","max");
		 * |	ds.addStatistic("attr_sal","min");
		 * |	ds.removeStatistic("attr_sal","min");
		 * |	unieap.debug(ds); 
		 */
		removeStatistic : function(name,op){
			this.statistics = this.statistics || {};
			if(op && this.statistics[name]){
				delete this.statistics[name][op];
				if(unieap.isEmpty(this.statistics[name])){
					delete this.statistics[name];
				}
			}
			else{
				delete this.statistics[name];
			}
		}, 
		/**
		 * @summary:
		 * 		设置统计列对象集合
		 * @param 
		 * 		{object} statistics 
		 * @example:
		 * |	var ds = new unieap.ds.DataStore("test");
		 * |	var statistics = {"attr_sal":{"max":5555,"min":222},attr_empno: {"min": ""}};
		 * |	ds.setStatistics(statistics);
		 * |	unieap.debug(ds); 
		 */
		setStatistics : function(statistics){
			this.statistics = statistics;
		},
		
		/**
		 * @summary:
		 * 		设置RowSet
		 * @param 
		 * 		{object} rowSet
		 * @example:
		 * |	var ds = new unieap.ds.DataStore("test",[
		 * |					{'key':'value','key1':'value1'},
		 * |					{'key':'value','key1':'value1'}]);
		 * |	var rowset = new unieap.ds.RowSet([
		 * |					{attr_empno:"1000",NAME:"黄蓉",attr_sal:"1001",_s:true}, 
		 * |					{attr_empno:"1002",NAME:"张韶涵",attr_sal:"9500",_t:1} 
		 * |			]);
		 * |	ds.setRowSet(rowset);
		 * |	unieap.debug(ds);
		 * |
		 */
		setRowSet : function(rowSet){
			this.rowSet = rowSet;
			this.rowSet.setDataStore(this);
			this.recordCount=this.rowSet.getTotalCount();
		},
		
		
		/*
		 * @summary：
		 * 		设置DataStore类型
		 * @param：
		 * 		 {string|null} 
		 * 		type enums：static、incomplete、dynamic
		 * 		static： 静态数据，数据采集时不收集该DataStore的数据
		 * 		incomplete： 部分数据，codelist取回部分数据 标示codelist数据不完整
		 * 		dynamic： 动态数据，用于数据收集
		 * 		不传type参数，默认数据可收集（一般可以不传这个参数）
		 * 
		 */
		setType : function(type){
			this.type = type;
		},
		
		/*
		 * @summary：
		 * 		设置sql是否含有distinct操作
		 * @param 
		 * 		{boolean} distinct 
		 * @example:
		 * |	var ds = new unieap.ds.DataStore("test");
		 * |	ds.setDistinct(false);
		 * |	unieap.debug(ds);
		 */
		setDistinct : function(distinct){
			this.distinct = distinct;
		},
		
		/**
		 * @summary：
		 * 		 取得DataStore的名称
		 * @description:
		 * 		也可以通过DataStore的实例dataStore.name取得
		 * @return 
		 * 		{string} 
		 * 		DataStore的名称
		 * @example:
		 * |	var ds = new unieap.ds.DataStore("test");
		 * |	alert(ds.getName());
		 */		
		getName: function() {
			return this.name;
		},
		/**
		 * @summary：
		 * 		取得DataStore里的RowSet分页参数
		 * @description:
		 * 		也可以通过DataStore的实例dataStore.pageSize取得
		 * @return 
		 * 		{number} 
		 * 		分页大小
		 * @example:
		 * |	var ds = new unieap.ds.DataStore("test");
		 * |	ds.setPageSize(10);
		 * |	alert(ds.getPageSize());
		 */
		getPageSize: function() {
			return this.pageSize;
		},
		
	
		/**
		 * @summary：
		 * 		取得DataStore里面的总记录数信息
		 * @description：
		 * 		不实时更新
		 * @return: 
		 * 		{number} 总记录数
		 * @example:
		 * |	var ds = new unieap.ds.DataStore("test");
		 * |	alert(ds.getRecordCount());
		 */
		getRecordCount: function() {
			return this.recordCount;
		},
		
		/**
		 * @summary:
		 * 		取得DataStore里面的总记录数信息
		 * @description：
		 * 		实时更新
		 * @return：
		 * 		{number} 总记录数
		 * @example:
		 * |	var ds = new unieap.ds.DataStore("test");
		 * |	alert(ds.getRealRecordCount());
		 */
		getRealRecordCount:function(){
			var rowChangeCount=0
			if(this.rowSet){
				var r=this.rowSet.getRowCount();
				var i=this.rowSet.getInitialCount();
				//增加的行数
				rowChangeCount=r-i;
			}
			return this.recordCount+rowChangeCount;
		},		

		/**
		 * @summary：
		 * 		取得DataStore里的RowSet所在的当前分页序号
		 * @return 
		 * 		{number} 当前分页序号
		 *  @example:
		 * |	var ds = new unieap.ds.DataStore("test");
		 * |	alert(ds.getPageNumber());
		 */
		getPageNumber: function() {
			return this.pageNumber;
		},
		
		/**
		 * @summary：
		 * 		取得DataStore里的RowSet实例
		 * @description:
		 * 		也可以通过DataStore的实例dataStore.rowSet取得
		 * @return 
		 * 		{unieap.ds.RowSet} 
		 * 		当前DataStore里的RowSet对象
		 * @example:
		 * |	var ds = new unieap.ds.DataStore("test",[
		 * |				{'key':'value','key1':'value1'},
		 * |				{'key':'value','key1':'value1'}]
		 * |	);
		 * |	var rowset = ds.getRowSet();
		 * |	unieap.debug(rowset);
		 */		
		getRowSet: function() {
			return this.rowSet;
		},
		
		/**
		 * @summary：
		 * 		取得DataSet名称
		 * @return 
		 * 		{string} DataSet名称
		 * @example:
		 * |	var ds = new unieap.ds.DataStore("test");
		 * |	ds.setRowSetName("emp");
		 * |	alert(ds.getRowSetName());
		 */
		getRowSetName : function(){
			return this.rowSetName;
		},
		
		/**
		 * @summary：
		 * 		取得分组信息
		 * @return
		 * 		 {String} 分组信息
		 * @example:
		 *  |	var ds = new unieap.ds.DataStore("test");
		 *  |	ds.setGroup("dept,hiredate");
		 *  |	alert(ds.getGroup());
		 */
		getGroup : function(){
			return this.group;
		},
		
		/**
		 * @summary：
		 * 		取得过滤条件字符串
		 * @return 
		 * 		{string} 过滤条件
		 * @example：
		 * |	var ds = new unieap.ds.DataStore("test");
		 * |	var filter = "empno = ?";
		 * |	ds.setCondition(filter);
		 * |	alert(ds.getCondition());
		 */
		getCondition : function(){
			return this.condition || "";
		},
		
		/**
		 * @summary：
		 * 		取得排序字符串
		 * @return 
		 * 		{string} 排序条件
		 * @example：
		 * |	var ds = new unieap.ds.DataStore("test");
		 * |	ds.setOrder("[name] asc")
		 * |	alert(ds.getOrder());
		 */
		getOrder : function(){
			return this.order || "";
		},
		
		/**
		 * @summary：
		 * 		取得元数据信息对象
		 * @param 
		 * 		{string} name 
		 * 		元数据属性名称，如果为null，则返回所有元素据对象
		 * @return 
		 * 		{unieap.ds.MetaData} 元数据信息对象
		 * @example:
		 *  |	var ds = new unieap.ds.DataStore("test");
		 *  |	var meta={primaryKey:true,label:"员工编号",dataType:4,nullable:false,precision:4};	
		 * 	|	ds.addMetaData("attr_empno",meta);
		 *  |	unieap.debug(ds.getMetaData("attr_empno"));
		 */
		getMetaData : function(name){
			if(!name){ 
				if(this.metaData){
					var metaData = this.metaData;
					this.metaData["columns"] && (metaData=this.metaData["columns"]);
					var result = [];
					for(var column in metaData){
						result.push(new unieap.ds.MetaData(column,metaData[column]));
					}
					return result;
				}
				return this.metaData;
			}
			var _item = null;
			this.metaData && (this.metaData["columns"] && (_item=this.metaData["columns"][name]) || (_item=this.metaData[name]));
			if(_item){
				return new unieap.ds.MetaData(name,_item);
			}
			return null;
		},
		
		/**
		 * @summary：
		 * 		获得自定义查询Sql模板name
		 * @return 
		 * 		{string} Sql模板的名称
		 * @example:
		 * |	var ds = new unieap.ds.DataStore("test");
		 * |	${1}ds.setStatementName("emp");
		 * |	alert(ds.getStatementName());
		 */
		getStatementName : function(){
			return this.statementName;
		},
		
			
		//得到值和数据类型的内部对象
		_getPart : function(_temp){
			return {
					getValue : function(){ 
						return _temp[0];
					},
					getDataType : function(){
						return _temp[1];
					},	
					toString : function(){
						return this.getValue();
					}			
				}
		},
		

		
		/**
		 * @summary：
		 * 		获取查询值数组对象
		 * @return 
		 * 		{array} 
		 * 		数组对象，形如：[[value,dataType],...]
		 * @example:
		 * |	var ds = new unieap.ds.DataStore("test");
		 * |	ds.insertConditionValue("%王",unieap.DATATYPES.VARCHAR,0);
		 * |	unieap.debug(ds.getConditionValues());
		 * @img:
		 * 		images/ds/dataStore/getConditionValues.png
		 */
		getConditionValues : function(){
			return this.conditionValues;
		},
		
		/**
		 * @summary：
		 * 		 获取指定位置自定义Sql属性值
		 * @param 
		 * 		{number} index 查询下标
		 * @return 
		 * 		{object} 
		 * 		值和数据类型对象，可以通过getValue()和getDataType()方法分别取得值和数据类型，
		 * 		不写方法默认调用toString返回为查询值,形如：getAttribute(1)等同于getAttribute(1).getValue()	
		 * @example:
		 * |	var attributes={emp:["EMPNO",unieap.DATATYPES.DOUBLE],
		 * |					empname:["小白",unieap.DATATYPES.VARCHAR]};
		 * |	var ds = new unieap.ds.DataStore("test");
		 * |	ds.setAttributes(attributes);
		 * |	${1}alert(ds.getAttribute("empname"));
		 * |	${2}alert(ds.getAttribute("empname").getDataType());
		 * ${1} 取得变量empname的值
		 * ${2} 取得变量empname的数据类型
		 */	
		getAttribute : function(name){
			var _temp = null;
			if(this.attributes && (_temp = this.attributes[name])){
				return this._getPart(_temp);
			}
			return null;
		},
		/**
		 * @summary：
		 * 		获取自定义Sql属性对象
		 * @return 
		 * 		{object} 属性对象，形如：{name:[value,dataType],...}
		 *  @example:
		 * |	var attributes={emp:["EMPNO",unieap.DATATYPES.DOUBLE],empname:["小白",unieap.DATATYPES.VARCHAR]};
		 * |	var ds = new unieap.ds.DataStore("test");
		 * |	ds.setAttributes(attributes);
		 * |	unieap.debug(ds.getAttributes());
		 */
		getAttributes : function(){
			return this.attributes;
		},
		
		/**
		 * @summary：
		 * 		获取连接池标识，用于用户使用自定义的数据源。
		 * @return {string} 
		 * @example:
		 * |	var ds = new unieap.ds.DataStore("test");
		 * |	ds.setPool("UNIEAP");
		 * |	alert(ds.getPool());
		 */
		getPool : function(){
			return this.pool;
		},
		
		/**
		 * @summary：
		 * 		获取某列的统计值
		 * @description:
		 * 		当op为空时返回name列所有的统计方式
		 * 		当op不为空时返回name列指定的统计方式
		 * @param 
		 * 		{string} name
		 * 		 列名称
		 * @param
		 * 		{string} op
		 * 		操作符
		 * 		type enums：{sum|avg|min|max}
		 * @return 
		 * 		{object} 
		 * @example:
		 * |	var ds = new unieap.ds.DataStore("test");
		 * |	var statistics = {"attr_sal":{"max":"555","min":"111"},attr_empno: {"min": "22"}};
		 * |	ds.setStatistics(statistics);
		 * |	alert(ds.getStatistic("attr_sal","max"));
		 */
		getStatistic : function(name,op){
			if(this.statistics && this.statistics[name]){				
				return op ?this.statistics[name][op] : this.statistics[name];
			}
			return null;
		},
		
		/**
		 * @summary：
		 * 		获取统计列对象集合
		 * @return 
		 * 		{object|Null}
		 * @example:
		 * |	var ds = new unieap.ds.DataStore("test");
		 * |	var statistics = {"attr_sal":{"max":"555","min":"111"},attr_empno: {"min": "22"}};
		 * |	ds.setStatistics(statistics);
		 * |	unieap.debug(ds.getStatistics());
		 */		
		getStatistics : function(){
			return this.statistics;
		},
		
		/*
		 * @summary：
		 * 		获得DataStore的类型
		 * @return 
		 * 		{string|Null} 
		 * 		static 静态数据，数据采集时不收集该DataStore的
		 * 		incomplete 部分数据，codelist取回部分数据 
		 * 		dynamic 动态数据，用于数据收集
		 */
		getType : function(){
			return this.type;
		},
		
		/*
		 * @summary：
		 * 		获取sql是否有distinct操作
		 * @return：
		 * 		{boolean}
		 */
		isDistinct : function(){
			return this.distinct===true;
		},
		
		/*
		 * @summary：
		 * 		是否能收集数据
		 * @return 
		 * 		{boolean}
		 */
		canCollect : function(){
			return !this.getType() || this.getType()=="dynamic";
		},
		
		/**
		 * @summary：
		 * 		将DataStore对象转化为标准数据格式
		 * @return 
		 * 		{object} 
		 * 		数据对象，序列号的标准格式
	 	 *  @example:
	 	 *  |	var ds = new unieap.ds.DataStore("test");
		 *  |	var rowset = new unieap.ds.RowSet([
		 *  |			{attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001",_s:true},  
		 *  |			{attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800",_t:3}, 
		 *  |			{attr_empno:"1002",NAME:"张韶涵",attr_job:"singer",attr_sal:"9500",_t:1}     
		 *  |	]);
		 *  |	ds.setRowSet(rowset);
		 *  |	unieap.debug(rowset.toData());
		 */
		toData: function() {
			var data = {} ;
			data["rowSet"] = this.rowSet.toData();
			data["name"] = this.name;
			data["pageNumber"] = this.pageNumber;
			data["pageSize"] = this.pageSize;	
			data["recordCount"] = this.recordCount;	
			this.rowSetName && (data["rowSetName"] = this.rowSetName);
			this.order && (data["order"] = this.order);
			this.conditionValues && (data["conditionValues"] = this.conditionValues);
			this.parameters && (data["parameters"] = this.parameters);			
			this.metaData &&  (data["metaData"] = this.metaData);				
			if(this.statementName&&this.statementName!=""){
				data["statementName"] = this.statementName;
				this.getAttributes() && (data["attributes"] = this.attributes);
			}else{			
				this.condition && (data["condition"] = this.condition);	
				this.group && (data["group"] = this.group);	
			}			
			this.pool && (data["pool"] = this.pool);
			this.statistics && (data["statistics"] = this.statistics);
			this.distinct && (data["distinct"]=true);
			return data;
		},
		
		/**
		 * @summary：
		 * 		将DataStore对象转化为标准json数据格式
		 * @return 
		 * 		{string} 
		 * 		json数据对象
		 *  @example:
	 	 *  |	var ds = new unieap.ds.DataStore("test");
		 *  |	var rowset = new unieap.ds.RowSet([
		 *  |			{attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001",_s:true},  
		 *  |			{attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800",_t:3}, 
		 *  |			{attr_empno:"1002",NAME:"张韶涵",attr_job:"singer",attr_sal:"9500",_t:1}     
		 *  |	]);
		 *  |	ds.setRowSet(rowset);
		 *  |	alert(ds.toJson());
		 */
		toJson : function(){
			var result = [];
			result.push("rowSet:".concat(this.rowSet.toJson()));
			result.push("name:\"".concat(this.name).concat("\""));
			result.push("pageNumber:".concat(this.pageNumber));
			result.push("pageSize:".concat(this.pageSize));
			result.push("recordCount:".concat(this.recordCount));
			this.rowSetName && result.push("rowSetName:\"".concat(this.rowSetName).concat("\""));
			this.order && result.push("order:\"".concat(this.order).concat("\""));
			this.conditionValues && result.push("conditionValues:".concat(dojo.toJson(this.conditionValues)));
			this.parameters && result.push("parameters:".concat(dojo.toJson(this.parameters)));
			this.metaData && result.push("metaData:".concat(dojo.toJson(this.metaData)));
			if(this.statementName&&this.statementName!=""){
				this.statementName && result.push("statementName:\"".concat(this.statementName).concat("\""));
				this.attributes && result.push("attributes:".concat(dojo.toJson(this.attributes)));
			}else{		
				this.condition && result.push("condition:\"".concat(this.condition).concat("\""));	
				this.group && result.push("group:\"".concat(this.group).concat("\""));	
			}		
			this.pool && result.push("pool:\"".concat(this.pool).concat("\""));		
			this.statistics && result.push("statistics:".concat(dojo.toJson(this.statistics)));
			this.distinct && result.push("pool:".concat(this.distinct));	
			return "{".concat(result.join(",").concat("}"));
		},
		
		/**
		 * @summary：
		 * 		收集dataStore相关信息
		 * @param 
		 * 		{string} pattern 
		 * 		收集RowSet策略
		 * @return 
		 * 		{unieap.ds.DataStore} 
		 * 		临时的DataStore对象
		 * @example:
	 	 *  |	var ds = new unieap.ds.DataStore("test");
		 *  |	var rowset = new unieap.ds.RowSet([
		 *  |			{attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001",_s:true},  
		 *  |			{attr_empno:"1001",NAME:"齐衷斯",attr_sal:"8800",_t:3,_o:{attr_empno:"2003"}}, 
		 *  |			{attr_empno:"1002",NAME:"张韶涵",attr_job:"singer",attr_sal:"9500",_t:1}     
		 *  |	]);
		 *  |	ds.setRowSet(rowset);
		 *  |	${1}unieap.debug(ds.collect({metaData:false,policy:"all"}));  
		 *  |	${2}unieap.debug(ds.collect("select"));
		 *  |	${3}unieap.debug(ds.collect("insert"));
		 *  |	${4}unieap.debug(ds.collect("update"));              
		 *  |	${5}unieap.debug(ds.collect("delete")); 
		 *  |	${6}unieap.debug(ds.collect("auto"));              
		 *  |	${7}unieap.debug(ds.collect("none"));              
		 *  |	${8}unieap.debug(ds.collect("all"));  
		 *   ${1}收集除了metaData外的所有数据
		 *   ${2}收集选中数据
		 *   ${3}收集新增数据
		 *   ${4}收集修改数据
		 *   ${5}收集删除缓冲区数据
		 *   ${6}收集更改的数据，包括新增、修改、删除的数据
		 *   ${7}不收集数据
		 *   ${8}收集所有数据
		 */
		collect :function(pattern){
			var dataStore  = new unieap.ds.DataStore();
			dojo.mixin(dataStore,this);
			if(!((dojo.isObject(pattern)&&pattern["metaData"]) || dataStore["statementName"])){
				delete dataStore["metaData"];  
			}
			if(dojo.isObject(pattern)){
				pattern = pattern["policy"]
			}	
			dataStore["rowSet"] = this["rowSet"].collect(pattern);
			dataStore["rowSet"].setDataStore(dataStore);
			return dataStore;
		},
		
		/**
		 * @summary:
		 * 		转移数据
		 * @param:
		 *		{dataStore} unieap.ds.DataStore
		 *		替换的DataStore对象
		 * @param:
		 * 		{string} coverage	
		 *		replace（替换）；
		 *		discard（抛弃，默认）；
		 *		append（追加记录）；
		 *		union（ 取记录列的并集）；
		 *		updateProps（只改变属性，用于更新统计数）。
		 * @description：
		 * 		从另一个Store的数据转移到现在的store中
		 * @example:
		 *  |	${1}var ds = new unieap.ds.DataStore("test",[
		 *  |			{attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001",_s:true},  
		 *  |			{attr_empno:"1001",NAME:"齐衷斯",attr_job:"技术总监",attr_sal:"8800",_t:3}, 
		 *  |			{attr_empno:"1002",NAME:"张韶涵",attr_job:"singer",attr_sal:"9500",_t:1}     
		 *  |	]);
		 *  |	${2}var ds1 = new unieap.ds.DataStore("test",[
		 *  |			{no:"250",name:"大白",attr_sal:"1080",attr_deptno:"10"},
		 *  |			{no:"319",name:"二白",attr_sal:"50000",attr_deptno:"10"},
		 *  |			{no:"216",name:"三白",attr_sal:"3200",attr_deptno:"40"}
		 *  |	]);
		 *  |	ds1.addStatistic("attr_sal","max");
		 *  ${1}生成ds对象，供此方法以下用例使用
		 *  ${2}生成ds1对象，供此方法以下用例使用
		 *  @example:
		 *  |	${3}ds.append(ds1,"replace")
		 *  |	unieap.debug(ds);
		 *   ${3}ds1替代ds
		 *  @img：
		 * 		images/ds/dataStore/append/replace.png
		 *   @example:
		 *  |	${4}ds.append(ds1,"discard")
		 *  |	unieap.debug(ds);
		 *  ${4}ds数据不变
		 *  @img：
		 * 		images/ds/dataStore/append/discard.png
		 *  @example:
		 *  |	${5}ds.append(ds1,"append")
		 *  |	unieap.debug(ds);
		 *  ${5}ds中追加ds1中数据
		 *  @img：
		 * 		images/ds/dataStore/append/append.png
		 *  @example:
		 *  |	${6}ds.append(ds1,"union")
		 *  |	unieap.debug(ds);
		 *  ${6}ds和ds1的列取并集，如果同名则ds被ds1中替换
		 *   @img：
		 * 		images/ds/dataStore/append/union.png
		 *   @example:
		 *  |	${7}ds.append(ds1,"updateProps")
	 	 *  |	unieap.debug(ds);
	 	 *  ${7}将ds1的属性如小计合计信息替换到ds中
	 	 *  @img：
		 * 		images/ds/dataStore/append/updateProps.png
		 */
		append : function(dataStore,coverage){
			if(!dataStore instanceof unieap.ds.DataStore||this==dataStore || "discard" == coverage) return;
			//拷贝基本属性
			if(coverage!="union" && coverage!="append"){
				var properties = ["name","pageNumber","recordCount","pageSize","rowSetName","order","condition","conditionValues","parameters","metaData","statementName","attributes","group","pool","statistics","distinct"];
				for(var i = 0,name;(name=properties[i]);i++){
					if(dataStore[name]==null){
						delete this[name];
						continue;
					}
					this[name] = dataStore[name];
				}
				
			}
			//如果为append,需要更新record记录数
			coverage=='append'&&(this.recordCount+=dataStore.getRowSet().getRowCount());
			
			//拷贝记录
			this.rowSet.append(dataStore["rowSet"],coverage); 
			if(coverage!="updateProps"){
				this.onRowSetChanged();
			}
			else{
				this.onPropsChanged();
			}
		},
		
		/**
		 * @summary:
		 * 		克隆DataStore
		 * @param:
		 *		{String} dsName
		 *		新的DataStore名字
		 * @description：
		 * 		克隆一个新的DataStore
		 * @example:
		 *  |	var oldStore = dataCenter.getDataStore("oldStore");
		 *  |	var newStore = oldStore.clone("newStore");
		 */
		clone : function(dsName){
			if(!this  instanceof unieap.ds.DataStore) return;
			var returnStore = new unieap.ds.DataStore(dsName);
			var properties = ["pageNumber","recordCount","pageSize","rowSetName","order","condition","conditionValues","parameters","metaData","statementName","attributes","group","pool","statistics","distinct"];
			for(var i = 0,name;(name=properties[i]);i++){
				returnStore[name] =this[name];
			}
			var newRowSet = this.getRowSet().clone();
			//处理ie浏览器，防止ie返回 _o标记里面有NaN  2018-11-27 林栋
			if(newRowSet && newRowSet.primary.length >0){
				for(var k=0;k < newRowSet.primary.length;k++){
					if(newRowSet.primary[k]['_o']){
						for(x in newRowSet.primary[k]['_o']){
							if(isNaN(newRowSet.primary[k]['_o'][x])){
								newRowSet.primary[k]['_o'][x] = null
								}
							}	
						}		
					}
			}

			returnStore.setRowSet(newRowSet);
			return returnStore;
		},
		
		/**
		 * @summary：
		 * 		行记录发生变化监听事件
		 * @example:
		 *  |	var ds = new unieap.ds.DataStore("test",[
		 *  |			{attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001",_s:true}
		 *  |		]);
		 *  |	dojo.connect(ds,"onRowSetChanged",function(){
		 *  |		alert("onRowSetChanged");
		 *  |	});
		 *  |	var ds1 = new unieap.ds.DataStore("test",[
		 *  |			{no:"250",name:"大白",attr_sal:"1080",attr_deptno:"10"}
		 *  |		]);
		 *  |	ds.append(ds1,"replace");
		 *  |	
		 */
		onRowSetChanged:function(){
			
		},
		/**
		 * @summary：
		 * 		当记录不变时，属性发生变化监听事件
		 *  @example:
		 *  |	var ds = new unieap.ds.DataStore("test",[
		 *  |			{attr_empno:"1000",NAME:"黄蓉",attr_job:"演员",attr_sal:"1001",_s:true}
		 *  |		]);
		 *  |	dojo.connect(ds,"onPropsChanged",function(){
		 *  |		alert("onPropsChanged");
		 *  |	});
		 *  |	var ds1 = new unieap.ds.DataStore("test");
		 *  |	ds1.addStatistic("attr_sal","max");
		 *  |	ds.append(ds1,"updateProps");
		 *  |	
		 */
		onPropsChanged:function(){
			
		},
		/*
		 * @summary：
		 * 		是不是全部数据
		 * @return
		 * 		{boolean}
		 */
		isFullData : function(){
			return this.getType() != "incomplete";
		},
		
		/**
		 * @summary：
		 * 		取得服务器端返回的某个参数值
		 * @param 
		 * 		{string} name 
		 * 		参数名称
		 * @return
		 * 		{object} 
		 * 		如果值为数组，则取数组的第一个值
		 * @example:
		 * |	var ds = new unieap.ds.DataStore("test");
		 * |	ds.setParameter("param",11);
		 * |	ds.setParameter("param1",[10,11]);
		 * |	alert(ds.getParameter("param"));
		 * |	alert(ds.getParameter("param1"));
		 */				
		getParameter: function(name) {	
			if(!this.parameters){this.parameters={}}
			var value = this.parameters[name];
			if (value != "undefined" ) {
				if (typeof value == "array" || value instanceof Array){
					return value[0];
				}
				return value;
			} 
		}, 
		
		

		/*
		 * @summary:
		 * 		向DataStore中添加自定义参数信息
		 * @description:
		 * 		当存在重复键时，其值为数组形式， 否则为单值，如 {roleId:[10,11], org:"neusoft"}
		 * @param 
		 * 		{string} name
		 * 		参数名称
		 * @param 
		 * 		{object} value
		 * 		参数值
		 * @example:
		 * |	var ds = new unieap.ds.DataStore("test");
		 * |	ds.addParameter("param","param");
		 * |	ds.addParameter("param1",[10,11]);
		 * |	unieap.debug(ds);
		 */				
		addParameter:function(name, value) {	
			if(!this.parameters){this.parameters={}}
			if (typeof this.parameters[name] == "array" || this.parameters[name] instanceof Array) {
				this.parameters[name].push(value);
			}
			else{			
				this.parameters[name] = value;
			}
		},
		
		
		/**
		 * @summary:
		 * 		设置自定义参数信息，譬如查询条件的键值对
		 * @param 
		 * 		{string} name
		 *		 参数名称
		 * @param 
		 * 		{object} value
		 *		 参数值
		 * @example:
		 * |	var ds = new unieap.ds.DataStore("test");
		 * |	ds.setParameter("param",555);
		 * |	ds.setParameter("param1",[10,11]);
		 * |	unieap.debug(ds);
		 */
		setParameter : function(name, value){	
			if(!this.parameters){this.parameters={}}
			this.parameters[name] = value;
		},
		
		
		/**
		 * @summary：
		 * 		删除变量
		 * @param：
		 * 		 {string} name 键值名称
		 * @example:
		 * |	var ds = new unieap.ds.DataStore("test");
		 * |	ds.addParameter("param","param");
		 * |	ds.addParameter("param1",[10,11]);
		 * |	ds.removeParameter("param1");
		 * |	unieap.debug(ds);
		 */
		removeParameter: function(name){
			delete this.parameters[name];
		}
		
	});
}
if (!dojo._hasResource["unieap.ds"]) {
    dojo._hasResource["unieap.ds"] = true;
    dojo.provide("unieap.ds");
	//引入常量
	dojo.require("unieap.ds.Constants");
	//引入数据结构
	dojo.require('unieap.ds.Row');
	dojo.require('unieap.ds.RowSet');
	dojo.require('unieap.ds.MetaData');
	dojo.require('unieap.ds.DataStore');
	dojo.require('unieap.ds.DataCenter');
}
dojo.require("unieap.util.util");
dojo.require("unieap.ds.DataCenter");
dojo.provide("unieap.patch.loader");


//兼容Aclome使用场景
var compatAclome = false;
if("undefined"!=typeof(aclomeCompat))
	compatAclome = aclomeCompat;

function getWidgetById(id) {
	return dijit.byId(id);
}

function getElementById(id) {
	return dojo.byId(id);
}

function getRootNode() {
	return null;
}

function getRealId(id) {
	return id;
}

// if (!window.unieap) {
// 	unieap = {};
// }

unieap.getRealId = function(id) {
	return id;
}

unieap.getElementById = function(id) {
	return dojo.byId(id);
}

unieap.define = function(context, func) {
	if (dojo.isFunction(arguments[0])) {
		func = context;
		context = "";
	}
	var funcStr = func.toString().replace(/(^function\s*\(\)\s*\{)+?|(}$)+?/g,"");

	// 处理同名 view
	try {
		var oldContext = context;
		// if(unieap.loaderExpand.isReplace(oldContext)){
		// 检查 view 实例是否已经存在
		if(unieap.loaderExpand.isReplace(oldContext)){
			//替换函数中内容
			funcStr = unieap.loaderExpand.viewJsReplace(oldContext,funcStr);
			//替换 define 名称
			context = unieap.loaderExpand.getNewName(oldContext);
			unieap.loaderExpand.addLoadCount(oldContext);
		}else{
			unieap.loaderExpand.reset(oldContext);
		}


	} catch (e) {
		console.error(e);
	}
	//页面是否加载完毕，用于判断单帧是单独访问页面
	if (!dojo._initFired) {
		var	clazz =  new Function("var dataCenter = window.dataCenter;\n"+funcStr),
		context = context || "default";
		var instance = new clazz();
		window[context] = instance;
		// 修改实例名称_viewName，以便关联给unieapViewContextHolder
		instance._viewName = context;
		viewContextHolder[context] = {
			dataCenter: window.dataCenter
		}
		if (instance.onload) {
			dojo.addOnLoad((function(instance) {
				return function() {
					instance.onload()
				};
			})(instance));
		}

		instance = null;
		return;
	}
	//保存用户自定的方法
	DefinitionLocalMap = {
		proxyString: funcStr,
		context: context
	};
}

var viewContextHolder = {},
	DefinitionLocalMap = null;



unieap.loader = new function() {
	//	unieap.loader.load({
	//		data:{name:'',password:''},
	//		node: rootNode,
	//		url:'/test/a.html',
	//		showLoading : true
	//	})
	this.load = function(loadArgs) {
		//xdashboard用户桌面管理
		unieap.getTopWin().xdashboard = {};
		unieap.getTopWin().xdashboard.isLoading = true;
		dojo.require("unieap.util.util");
		loadArgs = normalizeArgs(loadArgs);
		if (_loadedResources == null) {
			initLoadedResources();
		}
		dojo._postLoad = false;
		var response = null;
		if(loadArgs.isXdashboard && window.sessionStorage && (response = window.sessionStorage.getItem(loadArgs.url))){
			loadSuccessed(response, loadArgs);
		}else{
			if(loadArgs.method == "post"){
				dojo.xhrPost({
					url: loadArgs.url,
					preventCache: true,
					content: loadArgs.data || {},
					load: function(response) {
						//window.sessionStorage.setItem(loadArgs.url,response);
						loadSuccessed(response, loadArgs);
					},
					error: function(error) {
						loadArgs.showTabLoading ? loadArgs.xhrLoadingHandle.shutDown() : unieap.showXhrLoading(false); //U_EAP00028154
						loadFailed(error, loadArgs);
					}
				});
			}else{
			dojo.xhrGet({
				url: loadArgs.url,
				preventCache: true,
				content: loadArgs.data || {},
				load: function(response,ioargs) {
					if (ioargs && ioargs.xhr && ioargs.xhr.responseURL){
						// 修改重定向的url
						loadArgs.url = ioargs.xhr.responseURL;
					}

					//window.sessionStorage.setItem(loadArgs.url,response);
					loadSuccessed(response, loadArgs);
				},
				error: function(error) {
					unieap.getTopWin().xdashboard.isLoading = false;
					loadArgs.showTabLoading ? loadArgs.xhrLoadingHandle.shutDown() : unieap.showXhrLoading(false); //U_EAP00028154
					loadFailed(error, loadArgs);
				}
			});
			}
		}
	};

	var templateString = "var dataCenter= arguments[0] || window.dataCenter,"
			+ "rootNode=arguments[1],"
			+ "rootId= rootNode && rootNode.id || '';\n"
			+ "this.rootNode=rootNode;\n"
			+ "function getWidgetById(id){return dijit.byId(rootId + id);}\n"
			+ "function getRootNode(){return rootNode;}\n"
			+ "function getRealId(id){return rootId+id;}\n"
			+ "this.getWidgetById = function(id){return getWidgetById(id);}\n"
			+ "this.getElementById = function(id){return getElementById(id);}\n"
			+ "this.getRootNode = function(){return this.rootNode;}\n"
			+ "var unieap = new UnieapDecorate();\n"
			// 新增vadp全局变量用于以后替换unieap CH
			//+ "var vadp = unieap;\n"
			+ "unieap.byId = function(id){return getWidgetById(id);}\n"
			+ "unieap.getRealId = function(id){return getRealId(id);}\n"
			+ "unieap.getElementById = function(id){return getElementById(id);}\n"
			// + "var $ = function( selector, context ) { return new jQuery.fn.init( selector, dojo.byId(rootId)); };\n"
			+ "var _scribeHandles = [];\n"
			+ "this._scribeHandles = _scribeHandles;\n"
			+ "unieap.subscribe = function(topic,fun){var subscriber=window.unieap.subscribe(topic,fun);if(subscriber!=null)_scribeHandles.push(subscriber);}\n";
			
			
			if(compatAclome){
		templateString += "function getElementById(id){return dojo.query((rootNode?'#'+rootId+' ':'')+'#'+id)[0];}\n"
			+ "var dojo = new DojoDecorate(),dojoAddOnloads=[];\n"
			+ "dojo.addOnLoad = function(f){dojoAddOnloads.push(f);}\n"
			+ "this.onload=function(){for(var i=0;i<dojoAddOnloads.length;i++){dojoAddOnloads[i]();}}\n";
		}
	else{templateString += "function getElementById(id){return dojo.byId(rootId + id);}\n";}

	
	var pageParamsTemp = "dataCenter['params']=unieap.page.params\n"
	var templateHolder = {};

	var _loadedResources = null;
	var _locProc = document.location.protocol;
	//RIA换肤功能--sun-yh
	this.setLoadedResources = function(resource, isLoad){
		if(_loadedResources) _loadedResources[resource] = isLoad;
	}
	function normalizeArgs(loadArgs) {
		if (dojo.isString(loadArgs)) {
			loadArgs = {
				url: loadArgs
			};
		}
		loadArgs.node = (loadArgs.node || document.body);
		loadArgs.xhrLoadingHandle = (loadArgs.showTabLoading ? unieap.openTabLoading(loadArgs.node.id) : unieap.showXhrLoading(true)); //U_EAP00028154
		var injectTemplate = loadArgs.injectTemplate || "";
		if (injectTemplate.length > 0 && /\.template$/g.test(injectTemplate)) {
			if (injectTemplate in templateHolder) {
				loadArgs.injectTemplate = templateHolder[injectTemplate];
			} else {
				dojo.xhrGet({
					url: dojo.moduleUrl("") + injectTemplate,
					sync: true,
					load: function(response) {
						loadArgs.injectTemplate = templateHolder[injectTemplate] = response;
					}
				});
			}
		}
		return loadArgs;
	}

	function initLoadedResources() {
		_loadedResources = {};
		var head = document.getElementsByTagName("head")[0] || document.documentElement,
			stylesheets = head.getElementsByTagName("link");
		for (var i = 0, stylesheet; stylesheet = stylesheets[i]; i++) {
			_loadedResources[stylesheet.href] = 1;
		}
		var scripts = head.getElementsByTagName("script");
		for (var i = 0, script; script = scripts[i]; i++) {
			if (script.src && !enforceLoad(script)) {
				_loadedResources[script.src] = 1;
			}
		}
	}

	function loadSuccessed(response, loadArgs) {
		//0.准备解析参数
		var parsePrompts = initParsePrompts(response, loadArgs);
		//1.处理注释
		parseComments(parsePrompts);
		//2.处理样式表
		parseStyles(parsePrompts);
		// 处理同名 view
		try {
			if(unieap.loaderExpand.isMatchJsp(loadArgs.url)) {
				var pageName = unieap.loaderExpand.regJsp(loadArgs.url);
				parsePrompts.inHtmlStr = unieap.loaderExpand.viewJspReplace(pageName,parsePrompts.inHtmlStr);
			}
			//$(parsePrompts.node).attr('pageUrl',loadArgs.url);
		} catch (e) {
			console.error(e);
		}
		//3.处理脚本
		var deferredScriptsHandle = parseScripts(parsePrompts);
		//4.处理页面内容元素
		parsePrompts.advancedScriptsReady.addCallback(parseContents);
		//5.处理延后的脚本
		parsePrompts.contentShownReady.addCallback(deferredScriptsHandle);
	}

	function loadFailed(e, loadArgs) {
		if (_timeoutProcess(e, loadArgs)) {
			return;
		}
		loadArgs.node.innerHTML = e.responseText || e.message || e.description;
		loadArgs.error && loadArgs.error(e);

		function _timeoutProcess(e, loadArgs) {
			if (e.status == 401 || e.status == 403) {
//				if (unieap.session.dialogRelogin) {
//					dojo.require("unieap.dialog.DialogUtil");
//					var j_application = unieap.appPath.substring(unieap.WEB_APP_NAME.length + 1);
//					DialogUtil.showDialog({
//						url: unieap.WEB_APP_NAME + unieap.relogin,
//						dialogData: {
//							"j_application": j_application
//						},
//						width: "360",
//						height: unieap.reloginDialogHeight || "270",
//						resizable: false,
//						isExpand: false,
//						isClose: false,
//						hideTitle:true,
//						//会话过期,请重新登录
//						title: RIA_I18N.rpc.sessionOut,
//						onComplete: function(value) {
//							if (value == "success") {
//								unieap.loader.load(loadArgs);
//							}
//						}
//					});
//				} else {
					var topWin = unieap.getTopWin();
					var hash = topWin.location.hash;
					var locationURL = unieap.WEB_APP_NAME + unieap.relogin;
					if(hash || locationURL.endWith("#")){
						if(hash)
							locationURL = locationURL.substring(0,locationURL.lastIndexOf(location.hash));
						if(locationURL.endWith("#")){
							locationURL = locationURL.substring(0,locationURL.length-1);
						}
						topWin.location.href=locationURL;
					}else{
						topWin.location = topWin.location;
					}
				//}
				//return true;
			}
			return false;
		}
	}

	function initParsePrompts(response, loadArgs) {
		var node = loadArgs.node,
			id = node.id,
			rootWidget = unieap.byId(id);

		unieap.destroyWidgets(node);

		node.setAttribute("xhr", true);

		var runtimeLocalMap = {
			dataCenter: null, //数据对象
			context: null, //上下文对象
			rootNode: node,
			instances: [], //上下文对象队列
			topics: null //缓存页面中发布订阅的handles
		};
		viewContextHolder[id] = runtimeLocalMap;

		var parsePrompts = {
			htmlHead: document.getElementsByTagName("head")[0] || document.documentElement,
			isXDialogLoad: (typeof(rootWidget) != "undefined") ? ((rootWidget.declaredClass == "unieap.xdialog.Dialog") ? true : false) : false,
			isXdashboard:false,
			rootWidget: rootWidget,
			inHtmlStr: response,
			runtimeLocalMap: runtimeLocalMap,
			advancedScriptsReady: new dojo.Deferred(),
			deferredScriptsReady: new dojo.Deferred(),
			contentShownReady: new dojo.Deferred()
		};
		dojo.mixin(parsePrompts, loadArgs);

		//aclome需要对节点进行提前处理
		if(compatAclome){
			handleBodyLoading(parsePrompts);
		}
		handleXdialogLoading(parsePrompts);

		return parsePrompts;
	}

	function parseComments(parsePrompts) {
		parsePrompts.inHtmlStr = parsePrompts.inHtmlStr.replace(/<!--[\s\S]*?-->/ig, function() {
			return ""
		});
	}

	function parseStyles(parsePrompts) {
		var linkRe = /(<link[^<>]*><\/link>|<link[^<>]*\/>)/ig,
			styleRe = /<style[^@]*?<\/style>/ig,
			hrefRe = new RegExp('href=["][^"\']*["]', "i"),
			insertLinkEle = null,
			insertStyleEle = null,
			url = "";

		parsePrompts.inHtmlStr = parsePrompts.inHtmlStr.replace(linkRe, function(linkStr) {
			var matchResult = linkStr.match(hrefRe);
			if (matchResult && matchResult.length > 0) {
				url = matchResult[0];
				url = url.substring(url.indexOf('"') + 1, url.lastIndexOf('"'));
				if (url != null) {
					var loaded = isLoadedUrl(url);
					if (!loaded) {
						if (insertLinkEle == null) {
							insertLinkEle = document.createElement("link");
							insertLinkEle.rel = "stylesheet";
							insertLinkEle.type = "text/css";
							insertLinkEle.media = "screen";
						} else
							insertLinkEle = insertLinkEle.cloneNode(false);
						insertLinkEle.href = url;
						parsePrompts.htmlHead.appendChild(insertLinkEle);
						_loadedResources[url] = 1;
					}
					return "";
				}
			}
			return linkStr;
		});
		// TODO:Style元素中定义的样式尚未考虑
		var styleElements = parsePrompts.htmlHead.getElementsByTagName("style");
		if (styleElements.length == 0) {//如果不存在style元素则创建
		if (document.createStyleSheet) {    //ie
		    document.createStyleSheet();
		} else {
		    var tempStyleElement = document.createElement('style'); //w3c
			tempStyleElement.setAttribute("type", "text/css");
	        parsePrompts.htmlHead.appendChild(tempStyleElement);
		    }
		}
		insertStyleEle = styleElements[0];
		parsePrompts.inHtmlStr = parsePrompts.inHtmlStr.replace(styleRe, function(styleStr) {
			styleStr = styleStr.substring(styleStr.indexOf('>')+1,styleStr.lastIndexOf('<'));
			if (insertStyleEle.styleSheet) {    //ie
		        insertStyleEle.styleSheet.cssText += styleStr;
		    } else if (document.getBoxObjectFor) {
		        insertStyleEle.innerHTML += styleStr; //火狐支持直接innerHTML添加样式表字串
		    } else {
		        insertStyleEle.appendChild(document.createTextNode(styleStr))
		    }
			return "";
		});
	}

	function parseScripts(parsePrompts) {
		var scriptRe = new RegExp("(<SCRIPT[\\s\\S]*?</SCRIPT>)|(<SCRIPT[^>]*?/>)", "ig"),
			scriptTagRe = /<script[^>]*>/i,
			scriptsAdvanced = [],
			scriptsDeferred = [],
			resolvePrompts = {
				baseURL: parsePrompts.url.substring(0, parsePrompts.url.lastIndexOf("/") + 1),
				regExps: [{
					name: "scope",
					exp: /scope=(['"])[^'"]*\1/
				}, {
					name: "advanced",
					exp: /advanced=(['"])[^'"]*\1/
				}, {
					name: "load",
					exp: /load=(['"])[^'"]*\1/
				}, {
					name: "context",
					exp: /context=(['"])[^'"]*\1/
				}, {
					name: "parallel",
					exp: /parallel/
				}]
			};


		parsePrompts.inHtmlStr = parsePrompts.inHtmlStr.replace(scriptRe, function(scriptStr) {
			var scriptInfo = resolveScriptStr(scriptStr, resolvePrompts);
			if (needLoading(scriptInfo)) {
				if (scriptInfo.advanced && scriptInfo.advanced === "false")
					scriptsDeferred.push(scriptInfo);
				else
					scriptsAdvanced.push(scriptInfo);
			}
			return "";
		});

		exeScriptsSequentially(scriptsAdvanced, parsePrompts, parsePrompts.advancedScriptsReady);

		var deferredScriptsHandle = function(parsePrompts) {
			var scriptsDeferredDone = exeScriptsSequentially(scriptsDeferred, parsePrompts);
			scriptsDeferredDone.addCallback(onLoadCompleted);
		};
		return deferredScriptsHandle;
	}

	function parseContents(parsePrompts) {
		if(compatAclome){
			var node = parsePrompts.node;
		}else{
			var node = handleBodyLoading(parsePrompts);
		}
		try{
			parsePrompts.parseResult = dojo.parser.parseIgnoringJsContext(node, {
				xhr: true,
				currentDataCenter: parsePrompts.runtimeLocalMap.dataCenter || window.dataCenter
			});
		}
		catch(e)
		{
			dojo._loaders = [];
			e.name = "dojoParseError";
			throw(e);
		}

		if(typeof t_click !== "undefined")
			console.info(new Date()-t_click);

		setTimeout(function() {
			parsePrompts.contentShownReady.callback(parsePrompts);
		}, 0);
		//TODO:尚未考虑body中的style元素
	}

	function onLoadCompleted(parsePrompts) {
		if("undefined" !=typeof(globalDataCenter)){
			dataCenter = globalDataCenter;
		}
		var runtimeLocalMap = parsePrompts.runtimeLocalMap,
			dc = runtimeLocalMap.dataCenter || window.dataCenter,
			bindings = parsePrompts.parseResult.bindingRecords,
			w = window;
		if(!unieap.helpTipMode) {
			for (var i = bindings.length; i--;) {
				var binding = bindings[i];
				switch (binding.type) {
					case "unieap.tree.Tree":
						{
							w[binding.jsId].getBinding().setDataStore(w[binding.jsId].getRootNode(), dc.getDataStore(binding.storeName));
							break;
						}
					default:
						{
							w[binding.jsId].getBinding().setDataStore(dc.getDataStore(binding.storeName));
							break;
						}
				}
				if (!binding.keepVar)
					w[binding.jsId] = null;
			}
		}
		parsePrompts.showTabLoading ? parsePrompts.xhrLoadingHandle.shutDown() : unieap.showXhrLoading(false); //U_EAP00028154
		unieap.getTopWin().xdashboard.isLoading = false;
		if(parsePrompts._afterPageLoad){
			try{
				dojo._callLoaded();
				parsePrompts._afterPageLoad.apply();
			}catch(e){
				parsePrompts._afterPageLoad.apply();
			}

		}else{
			dojo._callLoaded();
		}
		dojo.forEach(runtimeLocalMap.instances, function(elem) {
			elem[1].onload && elem[1].onload();
		});
		runtimeLocalMap = null;
		//执行用户的回调
		parsePrompts.load && parsePrompts.load();
		//解决xDialog下没有该方法，但是如果xDialog里有AdaptiveContainer，可能还是有问题的。
		parsePrompts.rootWidget && parsePrompts.rootWidget.resizeContainer && parsePrompts.rootWidget.resizeContainer();
		//清除dojo._unloaders数组，避免内存泄露
		if(!compatAclome){
			dojo._unloaders = [];
		}
		return;
	}

	function exeScriptsSequentially(scriptInfoArr, parsePrompts, scriptDoneDeferred) {
		var node = parsePrompts.node,
			htmlHead = parsePrompts.htmlHead,
			runtimeLocalMap = parsePrompts.runtimeLocalMap,
			scriptDoneDeferred = arguments[2] || new dojo.Deferred(),
			indexPointer = 0;
		if(scriptInfoArr.length == 0) unieap.getTopWin().xdashboard.isLoading = false;
		function handleScript() {
			var scriptInfo = scriptInfoArr[indexPointer];
			if (null == scriptInfo) {
				scriptDoneDeferred.callback(parsePrompts);
				return;
			}
			var src = scriptInfo.src;
			if (src) {
				runtimeLocalMap.context = scriptInfo.context;
				if (dojo.isIE && scriptInfo.parallel) {
					dojo.xhrGet({
						url: src,
						sync: false,
						load: function(text) {
							var contents = dojo._scopePrefix + text + dojo._scopeSuffix;
							dojo.eval(contents);
							autowiredefine(node, parsePrompts.injectTemplate, runtimeLocalMap);
							handleScript(indexPointer++);
						}
					});
				} else {
					var jsCode = "";
					if(parsePrompts.isXdashboard && window.sessionStorage && (jsCode = window.sessionStorage.getItem(src))){
						console.info("cache");
						var contents = dojo._scopePrefix + jsCode + dojo._scopeSuffix;
						dojo.eval(contents);
						doAutowiredefine();
					}else if(parsePrompts.isXdashboard && window.sessionStorage){
						dojo.xhrGet({
							url: src,
							sync: false,
							load: function(text) {
								var contents = dojo._scopePrefix + text + dojo._scopeSuffix +"\r\n//# sourceURL=" + src;
								dojo.eval(contents);
								//window.sessionStorage.setItem(src,text);
								doAutowiredefine();
							}
						});
					}
					else{
						//异步串行加载脚本
						var dynamicalScript = document.createElement("script");
						dynamicalScript.src = scriptInfo.src;
						dynamicalScript.onload = dynamicalScript.onreadystatechange = scriptOnLoad;
						htmlHead.appendChild(dynamicalScript);
					}
				}
			} else {
				var inlineCode = dojo._scopePrefix + scriptInfo.jsText + dojo._scopeSuffix;
				var dynamicalScript = document.createElement("script");
				dynamicalScript.text = inlineCode;
				htmlHead.appendChild(dynamicalScript);
				htmlHead.removeChild(dynamicalScript);
				//使得dataCenter成为私有变量
				if (/(var\s+dataCenter)+?/g.test(inlineCode)) {
					runtimeLocalMap.dataCenter = window.dataCenter;
				}
				handleScript(indexPointer++);
			}
		}

		function doAutowiredefine() {
			var hasDuplicateContext = false;
			//JavaScript为单线程执行，执行js文件会同步执行回调方法，不会并行执行其他的js操作，不会出现资源锁问题
			hasDuplicateContext = autowiredefine(node, parsePrompts.injectTemplate, runtimeLocalMap);
			if (!hasDuplicateContext) {
				handleScript(indexPointer++);
			} else {
				//如果存在重复上下文，以Iframe方式加载，首先清除之前已经加载过的变量
				dojo._loaders = [];
				unieap.destroyWidgets(node);
				node.innerHTML = "";
				if(parsePrompts.isXDialogLoad || compatAclome){
					var contentPane = new unieap.layout.ContentPane();
					node.appendChild(contentPane.domNode);
					contentPane.setHref(parsePrompts.url);
					dojo.style(contentPane.domNode, {
						"overflow": "hidden",
						"position": "relative",
						"visibility": "visible",
						"height": "100%"
					});
				}
				else if(dijit.byNode(node)){
					dijit.byNode(node).setHref(parsePrompts.url);
					dojo.style(node, {
						"overflow": "auto",
						"position": "relative",
						"visibility": "visible"
					});
				}else{
					//处理桌面管理，如果是重复加载的页面
					_loadIframes(node,parsePrompts.url);
				}
				parsePrompts.showTabLoading ? parsePrompts.xhrLoadingHandle.shutDown() : unieap.showXhrLoading(false); //U_EAP00028154
			}
		}

		function scriptOnLoad() {
			if (!this.readyState || this.readyState === "loaded" || this.readyState === "complete") {
				this.onload = this.onreadystatechange = null;
				this.parentNode && this.parentNode.removeChild(this);
				doAutowiredefine();
			}
		}
		handleScript();
		return scriptDoneDeferred;
	}

	function handleXdialogLoading(parsePrompts) {
		//如果是Xdialog方式加载，需要首先缓存当前的_currentNodeOfSingleFrame
		var node = parsePrompts.node;
		if (parsePrompts.isXDialogLoad && typeof(_currentNodeOfSingleFrame) != "undefined" && _currentNodeOfSingleFrame != null && _currentNodeOfSingleFrame.id != node.id) {
			var viewContext = viewContextHolder[_currentNodeOfSingleFrame.id];
			if (typeof(viewContext) != "undefined" && viewContext != null) {
				_saveCurrentViewContext(viewContext);
			}
			//并且更新当前节点为XDialog的ContainerNode
			_currentNodeOfSingleFrame = node;
			//并且将当前XDialog的ContainerNode放入到数组中维护，防止在此XDialog之上又弹出新的XDialog
			_currentNodesOfSingleFrame.push(node);
		}
	}

	function handleBodyLoading(parsePrompts) {
		var objectRe = new RegExp("<object[\\s\\S]*?</object>", "ig"), bodyRe = new RegExp(
					"<body[\\s\\S]*?</body>", "ig"), inHtmlStr = parsePrompts.inHtmlStr, objectsStr = "", bodysStr = "";
			// 取得所有body定义，并且将原html中的body清空
			inHtmlStr = inHtmlStr.replace(bodyRe, function(bodyStr) {
				bodysStr += bodyStr;
				return "";
			});
			// 取得所有不在body下的obejct定义
			var objectResults = inHtmlStr.match(objectRe);
			if (objectResults) {
				for ( var i = 0, length = objectResults.length; i < length; i++) {
					objectsStr += objectResults[i];
				}
			}
			if(compatAclome){
				inHtmlStr += bodysStr;//重新加入body，以便之后能够对body之中的script进行解析
			}

			// 将所有object定义放入一个body定义中
			if (objectsStr.length > 0) {
				bodysStr = "<body>" + objectsStr + "</body>" + bodysStr;
			}
			var node = parsePrompts.node;
			dojo.style(node, {
				"overflow" : "auto",
				"position" : "relative"
			});
			node.innerHTML = bodysStr;
			return node;
	}


	function isLoadedUrl(url) {
		if(url.indexOf("?")>-1){
			var paraStr = url.substring(url.indexOf("?")+1);
			var paras = paraStr.split("&");
			if(paras.length == 1 && paras[0].indexOf("version")==0){
				url = url.substring(0,url.indexOf("?"));
			}
		}
		var fullUrl = url;
		//IE兼容视图下取到的src不带协议和端口
		if (fullUrl.substring(0, 4) != "http") {
			fullUrl =  _locProc +"//" + window.location.host + fullUrl;
		}
		if (_loadedResources[fullUrl] || _loadedResources[url])
			return true;
		else
			return false;
	}

	function enforceLoad(scriptInfo) {
		var url = scriptInfo.src,
			load, scope;

		if (scriptInfo.tagName) {
			//Dom object
			load = scriptInfo.getAttribute("load");
			scope = scriptInfo.getAttribute("scope");
		} else {
			//Json object
			load = scriptInfo.load;
			scope = scriptInfo.scope;
		}

		if (load == "enforce") return true;
		if (load == "cache") return false;
		if(compatAclome){
			if(!/\/unieap\/|\/aclome-app-ui\/|\/aclome-app-chart\//.test(url)) return true;
		}else{
			if (typeof(scope) != "undefined" && (scope == "view" || scope == "processor")) return true;
			if(!/\/techcomp\/ria/.test(url)) return true;
		}
		return false;
	}

	function resolveScriptStr(scriptStr, resolvePrompts) {
		//resolvePrompts={
		// baseURL:"",
		// regExps: [{name:"src",exp:/src=(['"])[^'"]*\1/i},{name:"deferred",exp:/deferred/i}]
		//}
		var result = {},
			regExps = resolvePrompts.regExps,
			gtI = scriptStr.indexOf(">"),
			beginningScript = scriptStr.slice(scriptStr.indexOf("<"), gtI + 1),
			mSrc = beginningScript.match(/src=(['"])[^'"]*\1/i),
			jsText = "";
		if (mSrc != null || (jsText = trim(scriptStr.slice(gtI + 1, scriptStr.lastIndexOf("<")))).length > 0) {
			var src;
			result.src = (mSrc === null ? null : (src = ((src = mSrc[0].substring(mSrc[0].indexOf("=") + 1)).slice(1, src.length - 1))).search("/") === 0 ||src.search("http")===0? src : resolvePrompts.baseURL + src);
			result.jsText = (jsText.length > 0 ? jsText : null);
			for (var i = regExps.length; i--;) {
				var regExp = regExps[i],
					m = beginningScript.match(regExp.exp);
				if (m != null) {
					m = m[0].split("=");
					if (m.length === 2)
						result[regExp.name] = m[1].slice(1, m[1].length - 1);
					else
						result[regExp.name] = true;
				} else
					result[regExp.name] = null;
			}
		}
		return result;
	}

	function needLoading(scriptInfo) {
		var src = scriptInfo.src;
		if (src && !isLoadedUrl(src)) {
			if (!enforceLoad(scriptInfo)) {
				_loadedResources[src] = 1;
			}
			return true;
		}
		if (scriptInfo.jsText)
			return true;
		return false;
	}

	function autowiredefine(node, injectTemplate, runtimeLocalMap) {
		if (null != DefinitionLocalMap) {
			//防止打开的页面当中没有新建dataCenter的情况，使得局部dataCenter和globalDataCenter引用相同
			var dc = runtimeLocalMap.dataCenter;
			if (!dc || ("undefined" !=typeof(globalDataCenter) && dc == globalDataCenter)) {
				var dataCenter = new unieap.ds.DataCenter();
				window["dataCenter"] = dataCenter;
				runtimeLocalMap.dataCenter = dataCenter;
			}
			var proxyString = DefinitionLocalMap.proxyString,
				context = DefinitionLocalMap.context || runtimeLocalMap.context || ("view:" + node.id);
			//已经存在同名上下文的变量，这时采用Iframe方式去加载
			if (typeof(window[context]) != "undefined" && window[context] != null && window[context].id != context) {
				DefinitionLocalMap = null;
				runtimeLocalMap = null;
				return true;
			}
			try {
                var clazz = new Function(templateString + "\n"+pageParamsTemp+"\n"+ injectTemplate + "\n" + proxyString + "\nthis.dataCenter = dataCenter;"+ "\r\n//# sourceURL=/" +"view_" + node.id + context),
                    instance = new clazz(runtimeLocalMap.dataCenter, node);
                window[context] = instance;
				DefinitionLocalMap = null;
				// 修改实例名称_viewName，以便关联给unieapViewContextHolder
				instance._viewName = context;
                runtimeLocalMap.dataCenter = instance.dataCenter;
                runtimeLocalMap.context = context;
                runtimeLocalMap.instances.push([context, instance]);
            }catch (e) {
                console.log(e);
            }

		}
	}

	function trim(text) {
		text = text.replace(/^\s+/, "");
		for (var i = text.length - 1; i-- > 0;) {
			if (/\S/.test(text.charAt(i))) {
				text = text.substring(0, i + 1);
				break;
			}
		}
		return text;
	}
	function _loadIframes(node, url) {
		try{
			var widget = dijit.byNode(node.parentNode.parentNode.parentNode.parentNode);
		}catch(e){
			return;
		}
		if(widget){
			unieap.getTopWin().xdashboard.isLoading = false;
			var  fn= dojo.create("iframe");
			// add by lugj  增加loading条
			fn.onreadystatechange = fn.onload = function(evt){
				if (!this.readyState ||
					this.readyState == "loaded" ||
					this.readyState == "complete") {
				}
			};
			fn.setAttribute('frameborder', '0', 0);
			fn.style.width="100%";
			fn.src=url;
			// add by lugj  增加loading条
			if(widget._fixHeight){
				fn.style.height="100%";
			}else{
				fn.setAttribute('scrolling', 'no', 0);
			}
			//add by xiexq, iframe内部出滚动条
			fn.setAttribute('scrolling', 'yes', 0);

			node.appendChild(fn);
		}
	}

}();

/**
 * 从 url 中获取 Querystring 参数
 *
 * @param name
 * @param url
 * @returns {string|null}
 */
function getParameterByName(name, url) {
	if (!url) url = window.location.href;
	name = name.replace(/[\[\]]/g, '\\$&');
	var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
		results = regex.exec(url);
	if (!results) return null;
	if (!results[2]) return '';
	return decodeURIComponent(results[2].replace(/\+/g, ' '));
}

/**
 * 改写同名 viewname
 */
/**
 * 通过访问的 url 得到 viewName
 * @param loadUrl
 * @return
 */
function getViewNameFromUrl(loadUrl){
	// var viewJspStr='/ui/vhwsp';
	// var viewJspEntryStr='_entry.action';
	// if(loadUrl.indexOf(viewJspStr) != -1){
	// 	loadUrl = loadUrl.substring(0,loadUrl.indexOf(viewJspStr));
	// }else if(loadUrl.indexOf(viewJspEntryStr) != -1){
	// 	loadUrl = loadUrl.substring(0,loadUrl.indexOf(viewJspEntryStr));
	// }
	// var pageName = loadUrl.substring(loadUrl.lastIndexOf('/') + 1,loadUrl.length);
	// if(pageName.lastIndexOf('_') > 0){
	// 	pageName = pageName.substring(pageName.lastIndexOf('_') + 1);
	// }
	var page = getParameterByName('page',loadUrl);
	var params = page.split('-');
	var pageName ='';
	if (params.length === 0){
		pageName = page;
	}else {
		pageName = params[params.length-1];
	}

	return pageName;
}

unieap.loaderExpand = unieap.loaderExpand || {
	//是否启用替换,如出现疑似此扩展造成的问题可设为false
	isEnabled:true,
	viewJspStr:'ui/vhwsp',
	viewJspEntryStr:'_entry.action',
	loadJspConfig:{},

	//获取替换名
	getNewName:function(pageName){
		var _jspConfig = this.loadJspConfig[pageName];
		var newPageName = _jspConfig.pageName + "_" + _jspConfig.count;
		return newPageName;
	},
	//是否匹配为 -view.jsp的请求
	isMatchJsp:function(loadUrl){

		//debugPrint(loadUrl);

		var isMatchViewJsp = false;
		if(loadUrl){
			if(loadUrl.indexOf(this.viewJspStr) != -1){
				console.log('匹配:'+this.viewJspStr);
				isMatchViewJsp = true;
			}
			// else if(loadUrl.indexOf(this.viewJspEntryStr) != -1){
			// 	console.log('匹配:'+this.viewJspEntryStr);
			// 	isMatchViewJsp = true;
			// }
		}
		return isMatchViewJsp;
	},
	//记录至Config中
	regJsp:function(loadUrl){
		pageName = getViewNameFromUrl(loadUrl);
		if(!this.loadJspConfig[pageName]){
			this.loadJspConfig[pageName] = {
				loadUrl:loadUrl,
				pageName:pageName,
				count:0
			};
		}
		return pageName;
	},
	//替换 -view.jsp 中代码
	//		xxx. 和xxx,
	viewJspReplace:function(pageName,inHtmlStr){

		var _loadJspConfig = this.loadJspConfig[pageName];
		if(this.isReplace(pageName)){
			var newPageName = this.getNewName(pageName);

			inHtmlStr = inHtmlStr.replace(new RegExp(pageName+'\\.','g'),newPageName+'.');
			inHtmlStr = inHtmlStr.replace(new RegExp(pageName+',','g'),newPageName+',');
			console.log('替换页面[ui/vhwsp?page=' + pageName + ']中[' + pageName + ']为[' + newPageName + ']');
		}else{
			console.log('不替换 ui/vhwsp?page='+pageName+'内容');
		}
		return inHtmlStr;
	},
	//是否加载过,并记录在Config中
	isReplace:function(pageName){
		var _jspConfig = this.loadJspConfig[pageName];
		if(this.isEnabled && _jspConfig && _jspConfig.count > 0){
			return true;
		}else{
			return false;
		}
	},
	addLoadCount:function(pageName){
		var _jspConfig = this.loadJspConfig[pageName];
		if(_jspConfig){
			_jspConfig.count++;
			console.log('页面:'+ _jspConfig.pageName + '加载完成' + _jspConfig.count + '次');
		}
	},
	reset:function(pageName){
		var _jspConfig = this.loadJspConfig[pageName];
		if(_jspConfig){
			_jspConfig.count = 1;
			console.log('页面:'+ _jspConfig.pageName + '加载次数重置');
		}
	},
	//替换 -view.js 中代码
	//		define 的名称
	//		javascript:xxx
	viewJsReplace:function(pageName,funcStr){
		var _jspConfig = this.loadJspConfig[pageName];
		if(this.isReplace(pageName)){
			var newPageName = this.getNewName(pageName);
			console.log('替换页面[' + pageName + '-view.js (Define) ]中[' + pageName + ']为[' + newPageName + ']');
			// var view = new _equiDoc.equiEqui.equiEquiMain.View();
			//funcStr = funcStr.replace(new RegExp(pageName+'\\.View','ig'),newPageName+'.View');
			// javascript:equiEquiMain.
			funcStr = funcStr.replace(new RegExp('javascript:'+pageName,'ig'),'javascript:'+newPageName);
			funcStr = funcStr.replace(new RegExp('onclick="'+pageName,'ig'),'onclick="'+newPageName);
			funcStr = funcStr.replace(new RegExp('onclick=\\\\"'+pageName,'ig'),'onclick=\\"'+newPageName);
			funcStr = funcStr.replace(new RegExp("onclick='"+pageName,'ig'),"onclick='"+newPageName);
			funcStr = funcStr.replace(new RegExp("onclick=\\\\'"+pageName,'ig'),"onclick=\\'"+newPageName);
		}else{
			console.log('不替换 '+_jspConfig.pageName+'-view.js内容');
		}
		return funcStr;
	}
};

function _doAfterDijitRegistry(id,widget){
	
}
dojo.provide("unieap.patch.boosters");
(function(){
	if(false === unieap.isBoosters ){
		return;
	}
	dojo.require("dijit._Widget");
	var _WidgetConnect = dijit._Widget.prototype.connect;
	var bindEvents = {};
	var uiEvents = { //常用的监听事件定义
			'onmouseover' : 1,
			'onmouseout' : 1,
			'onmousemove' : 1,
			'onmousedown' : 1, 
			'onmouseup' : 1, 
			'onmove' : 1,
			'onclick' : 1, 
			'ondblclick' : 1, 
			'oncontextmenu' : 1,
			'onkeyup' : 1, 
			'onkeydown' : 1, 
			'onkeypress' : 1,
			'onfocus' : 1,
			'onblur' : 1,
			'onchange' : 1,
			'oncopy' : 1,
			'onpaste' : 1,
			'oncut' : 1
	};
function attachEvents(node){
	var widgetId;
	while(node){
		if(node.getAttribute && (widgetId= node.getAttribute("widgetId"))){
			unieap.attachEvent(dijit.byId(widgetId));
		}else if(node.getAttribute&&(widgetId= node.getAttribute("for"))){
			var index = widgetId.indexOf("_unieap_input");
			if(index>-1){
				unieap.attachEvent(dijit.byId(widgetId.substring(0,index)));
			}
		}
		node = node.parentNode;
	}
};
unieap.attachEvent = function(widget){
	if(widget){
		var widgetId = widget.id;
		if(widgetId in bindEvents){
			var cEvents = bindEvents[widgetId]; 
			for(var i=0,event;event=cEvents[i];i++){
				if(event[1]=="onfocus"){ //connect导致原来的方法还起作用
					event[0].onfocus = null;
				}
				_WidgetConnect.apply(widget,event);
			}
			delete bindEvents[widgetId]; 
		}
	}
}
dojo.addOnLoad(function(){
	dojo.connect(document.body,"onmouseover",function(evt){
		attachEvents(evt.target);
	});
});

//重载dijit的remove方法，及时删除widget事件定义
var _remove = dijit.registry.remove;
dijit.registry.remove = function(id){
	_remove.apply(dijit.registry,arguments);
	delete bindEvents[id]
};

//重载dijit.registry的add方法，在不同的上下文下，允许出现相同的id
var _add=dijit.registry.add;

dijit.registry.add=function(widget){
	var id = widget.id;
	//如果存在WIDGET_CONTEXT上下文，就修改widget控件的id属性
	widget.id = (widget._rootID||"") + id;
	 //判断是否存在这个id 如果存在 销毁  LD
    if(dijit.byId(id) && dijit.byId(id).destroy){
	    dijit.byId(id).destroy();
    }
	_add.apply(dijit.registry,arguments);
	_doAfterDijitRegistry(id,widget);
}


//mouseoverEventProxy
unieap.mep = function(target){
	var node = target;
	while(node){
		if(node.getAttribute && (widgetId= node.getAttribute("widgetId"))){
			target.onmouseover = null;
			if(!(widgetId in bindEvents)){
				return;
			}
			var cEvents = bindEvents[widgetId]; 
			for(var i=0,event;event=cEvents[i];i++){
				_WidgetConnect.apply(dijit.byId(widgetId),event);
			}
			delete bindEvents[widgetId]; 
			break;
		}
		node = node.parentNode;
	}
	if(document.createEventObject){
		target.fireEvent("onmouseover"); 
	} else {
		var event = document.createEvent("MouseEvent"); 
		event.initMouseEvent("mouseover",true,false);
		target.dispatchEvent(event); 
	}
}
//focusEventProxy
unieap.fep = function(target){
	var node = target;
	while(node){
		if(node.getAttribute && (widgetId= node.getAttribute("widgetId"))){
			target.onfocus = null;
			if(!(widgetId in bindEvents)){
				return;
			}
			var cEvents = bindEvents[widgetId]; 
			for(var i=0,event;event=cEvents[i];i++){
				_WidgetConnect.apply(dijit.byId(widgetId),event);
			}
			delete bindEvents[widgetId]; 
			break;
		}
		node = node.parentNode;
	}
	if(document.createEventObject){
		target.fireEvent("onfocus"); 
	} else {
		var event = document.createEvent("Event"); 
		event.initEvent("focus",true,false);
		target.dispatchEvent(event); 
	}
}
dojo.extend(dijit._Widget,{
	connect : function(obj,event,method,flag){
		if(false == flag || !(event in uiEvents)){
			_WidgetConnect.apply(this,arguments);
			return;
		}
		var cEvents = bindEvents[this.id] || (bindEvents[this.id] = []);
		cEvents.push([obj,event, method]);
	}	
});


//overload parser class
dojo.parser = new function(){
	// summary: The Dom/Widget parsing package
	var d = dojo;
	
	this._attrName = d._scopeName + "Type";
	this._query = "[" + this._attrName + "]";
	function val2type(/*Object*/ value){
		// summary:
		//		Returns name of type of given value.
		if(d.isString(value)){ return "string"; }
		if(typeof value == "number"){ return "number"; }
		if(typeof value == "boolean"){ return "boolean"; }
		if(d.isFunction(value)){ return "function"; }
		if(d.isArray(value)){ return "array"; } // typeof [] == "object"
		if(value instanceof Date) { return "date"; } // assume timestamp
		if(value instanceof d._Url){ return "url"; }
		return "object";
	}

	function str2obj(/*String*/ value, /*String*/ type){
		// summary:
		//		Convert given string value to given type
		switch(type){
			case "string":
				return value;
			case "number":
				return value.length ? Number(value) : NaN;
			case "boolean":
				// for checked/disabled value might be "" or "checked".  interpret as true.
				return typeof value == "boolean" ? value : !(value.toLowerCase()=="false");
			case "function":
				if(d.isFunction(value)){
					value=value.toString();
					value=d.trim(value.substring(value.indexOf('{')+1, value.length-1));
				}
				try{
					if(value.search(/[^\w\.]+/i) != -1){
						// The user has specified some text for a function like "return x+5"
						return new Function(value);
					}else{
						// The user has specified the name of a function like "myOnClick"
						return d.getObject(value, false);
					}
				}catch(e){ return new Function(); }
			case "array":
				return value ? value.split(/\s*,\s*/) : [];
			case "date":
				switch(value){
					case "": return new Date("");	// the NaN of dates
					case "now": return new Date();	// current date
					default: return d.date.stamp.fromISOString(value);
				}
			case "url":
				return d.baseUrl + value;
			default:
				return d.fromJson(value);
		}
	}

	var instanceClasses = {
	};

	dojo.connect(dojo, "extend", function(){
		instanceClasses = {};
	});
	//获取组件类的定义
	function getClassInfo(/*String*/ className){
		if(!instanceClasses[className]){
			// get pointer to widget class
			var cls = d.getObject(className);
			if(!d.isFunction(cls)){
				throw new Error("Could not load class '" + className +
					"'. Did you spell the name correctly and use a full path, like 'dijit.form.Button'?");
			}
			var proto = cls.prototype;
	
			// get table of parameter names & types
			var params = {};
			if(proto.UserInterfaces){
				params = proto.UserInterfaces;
			}
			else{
				var dummyClass = {};
				for(var name in proto){
					if(name.charAt(0)=="_"){ continue; } 	// skip internal properties
					if(name in dummyClass){ continue; }		// skip "constructor" and "toString"
					var defVal = proto[name];
					params[name]=val2type(defVal);
				}
			}
			instanceClasses[className] = { cls: cls, params: params };
		}
		return instanceClasses[className];
	}
	//获取属性配置内容
	function getAnnotation(node){
		var annotation  = node.getAttribute("unieap-data-annotation");
		return annotation && annotation.split(",");
	}
	this.instantiate = function(/* Array */nodes, /* Object? */mixin, /* Object? */args,/* function?*/callBack){
		var thelist = [], dp = dojo.parser,containerlist=[];
		mixin = mixin||{};
		args = args||{};
		for(var k=0,node;node=nodes[k];k++){
			if(!node){ return; }
			var type = dp._attrName in mixin?mixin[dp._attrName]:node.getAttribute(dp._attrName);
			if(!type || !type.length){ return; }
			var clsInfo = getClassInfo(type),
				clazz = clsInfo.cls;

			// read parameters (ie, attributes).
			// clsInfo.params lists expected params like {"checked": "boolean", "n": "number"}
			var params = {},
				attributes = node.attributes,
				parameters = clsInfo.params,
				annotation = getAnnotation(node);
				//使用注释方式告诉组件使用了哪些属性
			if(annotation!=null){
				for(var i=0,name;name=annotation[i];i++){
					var item = attributes.getNamedItem(name);
					if(item==null) continue;
					var value = item.value;
					switch(name){
						case "class":
							value = node.className;
							break;
						case "style":
							value = node.style && node.style.cssText; 
					}
					var _type = parameters[name];
					if(_type && typeof value == "string"){
						params[name] = str2obj(value, _type);
					}else{
						params[name] = value;
					}
				}
			}
			else{
				for(var name in parameters){
					var item = name in mixin?{value:mixin[name],specified:true}:attributes.getNamedItem(name);
					if(!item || (!item.specified && (!dojo.isIE || name.toLowerCase()!="value"))){ continue; }
					var value = item.value;
					// Deal with IE quirks for 'class' and 'style'
					switch(name){
					case "class":
						value = "className" in mixin?mixin.className:node.className;
						break;
					case "style":
						value = "style" in mixin?mixin.style:(node.style && node.style.cssText); // FIXME: Opera?
					}
					var _type = parameters[name];
					if(typeof value == "string"){
						params[name] = str2obj(value, _type);
					}else{
						params[name] = value;
					}
				}
			}
			if(args["xhr"]){
				params['_rootID'] =  args["rootNode"].id;
			}
			if("dataCenter"==clazz.prototype.Autowired){
				params['dataCenter'] = args['dataCenter'];
			}
			
			var markupFactory = clazz.markupFactory || clazz.prototype && clazz.prototype.markupFactory;
			// create the instance
			var instance = markupFactory ? markupFactory(params, node, clazz) : new clazz(params, node);
			thelist.push(instance);
			if(	!args.noStart && instance  && 
					instance.startup &&
					!instance._started && 
					(!instance.getParent || !instance.getParent())
				){
				containerlist.push(instance);
			}

			// map it to the JS namespace if that makes sense
			var jsname = node.getAttribute("jsId");
			if(jsname){
				d.setObject(jsname, instance);
			}
		};

		//在回调方法中将临时片段中的节点放回body,保证startup正常运行
		if(callBack){
			callBack();
		}
		
		if(!mixin._started){
			for(var i=containerlist.length-1;i>=0;i--){
				var instance = containerlist[i];
				instance.startup();
			}
		}
		return thelist;
	};
	//查找节点，根据postponeRender属性判断是否查找子节点，用于懒渲染功能
	function queryNodes(attrName,rootNode,args){
		var list = [],
			 node = rootNode.firstChild;
		while(node){
			if(node.getAttribute){
				if(node.getAttribute(attrName)){
					list.push(node);
					if("true"==node.getAttribute("postponeRender")){
						node = node.nextSibling;
						continue;
					}
				}else if(args["xhr"] && !compatAclome){
					//在单帧情况下对于html元素带id的加上rootId的前缀
					if(node.getAttribute("id"))
						node.setAttribute("id", ((args["rootNode"] ? args["rootNode"].id : "") || "") + node.getAttribute("id"));
					if(node.getAttribute("for"))
						node.setAttribute("for", ((args["rootNode"] ? args["rootNode"].id : "") || "") + node.getAttribute("for") + "_unieap_input");
				}
				var subList = queryNodes(attrName,node,args);
				if(subList.length>0){
					Array.prototype.push.apply(list,subList);
				}
			}
			node = node.nextSibling;
		}
		return list;
	}
	//把普通的Element转换成DocumentFragment文档片段
	function createDocumentFragment(node){
		if (11 != node.nodeType && !(dojo.isIE && dojo.isIE < 8)
			&& document.getElementsByTagName("OBJECT").length == 0) {
			// 如果nodeType类型不是documentFragment
			// 不是IE6 IE7
			// 没有object节点， flash在DocumentFragment中渲染会出现意想不到的问题
			var fragment = document.createDocumentFragment();
			while (node.hasChildNodes()) {
				fragment.appendChild(node.firstChild);
			}
			return fragment;
		}
		return node;
	}
	
	this.parse = function(/*DomNode?*/ node, /* Object? */ args){
		var fragment;
		args = args || {};
		//指定传入的DataCenter
		args.dataCenter = args.currentDataCenter;
		//指定parse的节点，默认是body
		node = node || document.body;
		//普通的加载方式
		if(!args["xhr"]){
			if(unieap.Action){
				var context = unieap.Action.getViewContext(node);
				if(context && context.rootNode){
					args["xhr"]=true;
					args["rootNode"] = context.rootNode; //一直找到xhr加载的根节点
					args["dataCenter"] = context.dataCenter;
				}
			}
			fragment = createDocumentFragment(node);
		}
		//此时是xhr加载方式，传递进来的rootNode是普通的Element或者DocumentFragment
		else{
			fragment = args.fragment || createDocumentFragment(node);
			args["rootNode"] = node;
		}
		//在单帧情况下对于html元素带id的加上rootId的前缀
		var list = queryNodes(this._attrName, fragment,args);

		if(args["xhr"] && unieap.animate){
			dojo.style(node,'opacity',0);
			dojo.animateProperty({
				node:node,
				properties:{opacity:1},
				duration:500
			}).play()
		}
		
		// go build the object instances
		var result =  this.instantiate(list, null, args,function(){
			node!=fragment && node.appendChild(fragment);			
		});
		return result;
	};
	
	var increament = 0;
	function queryNodesIgnoringJsContext(attrName, rootNode, args) {
		var list = [],
			node = rootNode.firstChild,
			type = "",
			binding = "",
			bindingRecords = [];
		while (node) {
			if (node.getAttribute) {
				if ((type = node.getAttribute(attrName))) {
					list.push(node);
					if ((binding = node.getAttribute("binding")) && node.getAttribute("dojoType") != "unieap.form.FormList"&& !node.getAttribute("insertBlankRow")) {
						var bindingStr = binding.replace(/[\s,]*store:.*?(,|})/,function(storeStr){
							var result = "";
							storeStr = dojo.trim(storeStr);
							var fst = storeStr.charAt(0);
							var lst = storeStr.charAt(storeStr.length-1);
							
							if(fst===",")
							{
								//{...,store:'store'}
								if(lst==="}")
									result = "}";
								//{...,store:'store',...}
								else //if(lst===",")
									result = ",";
							}
							else //if(fst!==",")
							{
								//{store:'store',...}
								if(lst===",")
									result = "";
								//{store:'store'}
								else //if(lst==="}")
									result = "}";
							}
							storeStr = storeStr.replace(/[,}]/g,"");	
							var storeName = eval(storeStr.split(":")[1]);
							var jsId = node.getAttribute("jsId"),
							keepVar = true;
							if(!jsId)
							{
								jsId = ["jsId", increament++].join("-");
								node.setAttribute("jsId", jsId);
								keepVar = false;
							} 
							bindingRecords.push({
								jsId: jsId,
								type: type,
								storeName: storeName,
								keepVar:keepVar
							});
							
							return result;
						});
						
						node.setAttribute("binding",bindingStr);
					}
					if ("true" == node.getAttribute("postponeRender")) {
						node = node.nextSibling;
						continue;
					}
				} else if (args["xhr"] && !compatAclome) {
					//在单帧情况下对于html元素带id的加上rootId的前缀
					if(node.getAttribute("id"))
						node.setAttribute("id", ((args["rootNode"] ? args["rootNode"].id : "") || "") + node.getAttribute("id"));
					if(node.getAttribute("for"))
						node.setAttribute("for", ((args["rootNode"] ? args["rootNode"].id : "") || "") + node.getAttribute("for") + "_unieap_input");
				}
				var queryResult = queryNodesIgnoringJsContext(attrName, node, args);
				if (queryResult.nodeList.length > 0) {
					Array.prototype.push.apply(list, queryResult.nodeList);
				}
				if (queryResult.bindingRecords.length > 0) {
					Array.prototype.push.apply(bindingRecords, queryResult.bindingRecords);
				}
			}
			node = node.nextSibling;
		}
		return {
			nodeList: list,
			bindingRecords: bindingRecords
		};
	}

	this.parseIgnoringJsContext = function( /*DomNode?*/ node, /* Object? */ args) {
		var fragment;
		args = args || {};
		//指定传入的DataCenter
		args.dataCenter = args.currentDataCenter;
		//指定parse的节点，默认是body
		node = node || document.body;
		//普通的加载方式
		if (!args["xhr"]) {
			if (unieap.Action) {
				var context = unieap.Action.getViewContext(node);
				if (context && context.rootNode) {
					args["xhr"] = true;
					args["rootNode"] = context.rootNode; //一直找到xhr加载的根节点
				}
			}
			fragment = createDocumentFragment(node);
		}
		//此时是xhr加载方式，传递进来的rootNode是普通的Element或者DocumentFragment
		else {
			fragment = args.fragment || createDocumentFragment(node);
			args["rootNode"] = node;
		}
		//在单帧情况下对于html元素带id的加上rootId的前缀
		var queryResult = queryNodesIgnoringJsContext(this._attrName, fragment, args),
			list = queryResult.nodeList,
			bindingRecords = queryResult.bindingRecords;
		if (args["xhr"] && unieap.animate) {
			dojo.style(node, 'opacity', 0);
			dojo.animateProperty({
				node: node,
				properties: {
					opacity: 1
				},
				duration: 500
			}).play()
		}

		// go build the object instances
		var result = this.instantiate(list, null, args, function() {
			node != fragment && node.appendChild(fragment);
		});

		return {
			parsingResult: result,
			bindingRecords: bindingRecords
		};
	};
	
	
}();
})();

if (!dojo._hasResource["unieap.rpc"]) { //_hasResource checks added by build. Do not use _hasResource directly in your code.
    dojo._hasResource["unieap.rpc"] = true;
    dojo.provide("unieap.rpc");
    dojo.require("unieap.ds");
    dojo.require("unieap.util.util");

    dojo.declare("unieap.Action", null);
    /**
     * @summary:
     * 		定义了与后台交互的一些方法
     * @classDescription:
     * 		在项目中这些方法可被重写。
     * @declaredClass:
     * 		unieap.Action
     */

    if ("undefined" == typeof (globalDataCenter)) {
        globalDataCenter = dataCenter = new unieap.ds.DataCenter();
    }

    //ajax成功回调失败会触发弹出一个显示异常的dialog,该方法在弹出dialog之前调用，用户可以根据需要来复写相关逻辑

    function doAfterFailedCustomLoad() {}

    unieap.riaPath = dojo.moduleUrl("");

    unieap.dbDialect = "drm";

    unieap.buildRequestPath = function (url, parameters) {
        var path = [];
        for (var name in parameters) {
            path.push(name + "=" + encodeURIComponent(parameters[name]));
        }
        if (path.length == 0) {
            return url;
        }
        path = path.join("&");
        return url.concat(url.lastIndexOf("?") > 0 ? "&" : "?").concat(path);
    }
    //超时处理
    _timeoutProcess = function (json, data, dc, showLoading) {
        if (dojo.isString(json) &&
            json.match(unieap.session.timeout) &&
            data["sessionout"] != false) {
            if (unieap.session.dialogRelogin) {
                dojo.require("unieap.dialog.DialogUtil");
                var j_application = unieap.appPath.substring(unieap.WEB_APP_NAME.length + 1);
                DialogUtil.showDialog({
                    url: unieap.WEB_APP_NAME + unieap.relogin,
                    dialogData: {
                        "j_application": j_application
                    },
                    width: "563",
                    height: "318",
                    resizable: false,
                    isExpand: false,
                    isClose: false,
                    //会话过期,请重新登录
                    title: RIA_I18N.rpc.sessionOut,
                    onComplete: function (value) {
                        if (value == "success") {
                            unieap.Action.requestData(data, dc, showLoading);
                        }
                    }
                });
            } else {
                var topWin = unieap.getTopWin();
                var hash = topWin.location.hash;
                var locationURL = topWin.location.toString();
                if (hash || locationURL.endWith("#")) {
                    if (hash)
                        locationURL = locationURL.substring(0, locationURL.lastIndexOf(location.hash));
                    if (locationURL.endWith("#")) {
                        locationURL = locationURL.substring(0, locationURL.length - 1);
                    }
                    topWin.location.href = locationURL;
                } else {
                    topWin.location = topWin.location;
                }
            }
            return true;
        }
        return false;
    }
    //帐号踢出处理（用于v4）
    _accountKickedProcess = function () {}
    // 异常弹出是否可控制（用于v4，v3中值为false）
    _isExceptionControl = function () {
        return false;
    }
    //异常处理
    _exceptionProcess = function (json, data, _dc, complete) {
        //异常处理
        if (_dc.getCode() < 0) {
            dojo.require("unieap.dialog.MessageBox");
            MessageBox.alert({
                //错误提示
                title: RIA_I18N.rpc.errorTip,
                //message : _dc.getTitle() || "请求操作失败",
                message: _dc.getTitle() || RIA_I18N.rpc.errorMessage,
                onComplete: function () {
                    if (data.error) {
                        data.context ? data.error.call(data.context, _dc) : data.error(_dc);
                    }
                }
            });
            return true;
        }
        var dc = data.dc || globalDataCenter;

        dc.append(_dc, data.coverage || "discard");
        if (_dc.getCode() > 0) {
            dojo.require("unieap.dialog.MessageBox");
            MessageBox.alert({
                //成功提示
                title: RIA_I18N.rpc.success,
                //message : _dc.getTitle() || "请求操作成功" ,
                message: _dc.getTitle() || RIA_I18N.rpc.successMessage,
                onComplete: complete
            });
            return true;
        }
        return false;

    }

    //时间差的计算
    getDateDiff = function (startTime) {
        //将xxxx-xx-xx的时间格式，转换为xxxx/xx/xx的格式
        //		startTime=startTime.replace(/-/g,"/");
        //		endTime=endTime.replace(/-/g,"/");
        var ptime = new Date(startTime); //发布时间
        var ctime = new Date(); //当前时间

        var divday = 1000 * 3600 * 24; //作为除数的数字
        var divhour = 1000 * 3600;
        var divminute = 1000 * 60;
        var divsecond = 1000;

        var timedur = ctime.getTime() - ptime.getTime();
        var days = parseInt(timedur / parseInt(divday)); //获得天数

        timedur = timedur % parseInt(divday); //获得小时数
        var hours = parseInt(timedur / parseInt(divhour));

        timedur = timedur % parseInt(divhour); //获得分钟数
        var minutes = parseInt(timedur / parseInt(divminute));

        timedur = timedur % parseInt(divminute); //获得秒数
        var seconds = timedur / parseInt(divsecond);
        var optime = null; //作为最后输出的时间字符串output time

        if (days) {
            optime = days + " 天前";
        } else if (hours) {
            optime = hours + " 小时前";
        } else if (minutes) {
            optime = minutes + " 分钟前";
        } else {
            optime = "刚刚";
        }
        return optime.toString();
    }


    //liMenu拼串函数
    liManufacturer = function (tipContent) {
        if (typeof (tipContent) != "undefined") {
            var tip = tipContent;
            var title = tip.subject;
            var time = tip.publishedTime.time;
            var result_time = getDateDiff(time);
            var publisher = tip.publisher;
            var liMenu = $("<li class='messagelist-forshort'></li>");
            var aMenu = $("<a name='" + tip.id + "'></a>");
            if (infotipBrowserData) {
                aMenu.bind("click", infotipBrowserData, $.proxy(function (event) {
                    var currenti = $(this).find("i"); //找到要替换的图片所在的位置
                    currenti.empty(); //点击时去掉原有样式，再插入一个新img图标进去
                    var imageMenu = $("<img src='" + unieap.WEB_APP_NAME +
                        "/techcomp/menu/source/images/email_open.png' style='float:right;'>");
                    imageMenu.appendTo(currenti);
                    var topWin = unieap.getTopWin();
                    var framePageContainer = topWin.unieap.byId("framePageContainer");
                    var selectId = this.name;
                    if (framePageContainer) {
                        var children = framePageContainer.getChildren();
                        if (dojo.some(children, function (child) {
                                if (child.pageId == "page_" + infotipBrowserData.id) {
                                    pagePane = child;
                                    framePageContainer.selectChild(pagePane);
                                    if (topWin.clientBrowser) {
                                        topWin.clientBrowser.selectInfotip(selectId);
                                    }
                                    return true;
                                }
                            })) {
                            return;
                        } else {
                            unieap.open(infotipBrowserData.location + "?infotipID=" + this.name, infotipBrowserData.id,
                                infotipBrowserData.label);
                        }
                    }


                }));
            }
            var labelMenu = $("<span class='subject'></span>");
            var photoMenu = $("<span class='photo'><img src='" + unieap.WEB_APP_NAME +
                "/techcomp/menu/source/images/header.jpg' alt=''></span>");
            var fromMenu = $("<span class='from'>" + publisher + "</span>");
            var timeMenu = $("<span class='time' name='" + time + "'>" + result_time +
                "<i class='ilabel' style='display:block;'><img src='" + unieap.WEB_APP_NAME +
                "/techcomp/menu/source/images/e_mail.png' style='float:right;' ></i></span>");
            var messageMenu = $("<span class='message' title='" + title + "'>" + title + "</span>");

            fromMenu.appendTo(labelMenu);
            timeMenu.appendTo(labelMenu);
            photoMenu.appendTo(aMenu);
            labelMenu.appendTo(aMenu);
            messageMenu.appendTo(aMenu);
            aMenu.appendTo(liMenu);
            return liMenu;

        }
    }

    //右下角消息弹窗
    _handlePushingTipsDown = function (tipList) {
        var subjectMaxLength = 20;
        var result_sb = $("<div class='NewsText'></div>");
        var RightNews = $("<div class='RightNews' style='overflow:auto;'></div>");
        RightNews.appendTo(result_sb);
        var tipConfig = tipList[0].config;
        var tipListContents = tipList[0].abbr;
        var tipsNum = tipListContents.length;
        for (var i = 0; i < tipsNum; i++) {
            var tip = tipListContents[i];
            var id = tip.id;
            var title = tip.subject;
            var publisher = tip.publisher;
            var time = new Date(tip.publishedTime.time);
            //        	time=Todate(time);
            time = unieap.dateFormatToString(time, "yyyy/MM/dd");
            var divMenu = $("<div class='DrugNewsText'></div>");
            var aaMenu = $("<a id='" + id + "' title='" + title + "'></a>");
            var firstdtMenu = $("<dt class='NewsPic'>" + time + "</dt>");
            //var middtMenu=$("<dt class='publisher'>&nbsp;["+publisher+"]&nbsp;</dt>");
            var seconddtMenu = $("<dt class='NewsCen1'>&nbsp;&nbsp;&nbsp;" + (title.length > subjectMaxLength ?
                title.substring(0, subjectMaxLength) +
                "..." : title) + "</dt>");
            firstdtMenu.appendTo(aaMenu);
            //middtMenu.appendTo(aaMenu);
            seconddtMenu.appendTo(aaMenu);
            aaMenu.appendTo(divMenu);
            divMenu.appendTo(RightNews);
        }



        var moreDiv = $("<div class='DrugNewsMore' style='display:block;'></div>");
        var moreA = $("<a id='drugNewsMore'>更多消息...</a>");
        moreA.appendTo(moreDiv);
        moreDiv.appendTo(RightNews);


        var dialogProps = {};

        dialogProps.draggable = false;

        dialogProps.resizable = false;

        dialogProps.show = {
            effect: "blind",
            duration: 1000
        };

        dialogProps.position = {
            my: "right bottom",
            at: "right-" + (30 + i * 5) + " bottom-" + (30 + i * 5),
            of: $(document)
        };

        if (tipConfig) {
            dialogProps.title = tipConfig.headLine ? tipConfig.headLine :
                "";
            dialogProps.height = tipConfig.height ? tipConfig.height :
                "100";
            dialogProps.width = tipConfig.width ? tipConfig.width : "120";
            var timeoutConfig = tipConfig.dialogTimeOut != null ? tipConfig.dialogTimeOut : 5000;

            dialogProps.dialogClass = "infotipDialog";

            dialogProps.open = function () {
                $("div[class='DrugNewsText'] a", this)
                    .css("cursor", "pointer")
                    .click(function () {
                        $.Open_UNIEAP_INFOTIP_CLIENTBROWSER_dialog($(
                                this).attr("id") &&
                            $(this).attr("id").length > 0 ? $(
                                this).attr("id") :
                            null);
                        var currentDlg = $("div[class~='infotipDialog']:visible div[class~='ui-dialog-content']");
                        if (currentDlg.length > 0)
                            $(currentDlg).dialog("close");
                    });
                $("div[class='DrugNewsMore'] a", this)
                    .css("cursor", "pointer")
                    .click(function () {
                        $.Open_UNIEAP_INFOTIP_CLIENTBROWSER_dialog_v2();
                        var currentDlg = $("div[class~='infotipDialog']:visible div[class~='ui-dialog-content']");
                        if (currentDlg.length > 0)
                            $(currentDlg).dialog("close");
                    });
            }
        }

        var tipDia = $("<div>" + result_sb.html() + "</div>").dialog(dialogProps);
        $('.ui-dialog-titlebar', tipDia.parent()).addClass('changebg');
        $('.ui-dialog-titlebar #ui-id-2').text('消息通知');
        $('.ui-dialog-titlebar .ui-dialog-title').text('消息通知');
        var t = setTimeout(function () {
            tipDia.dialog("close")
        }, timeoutConfig);

        $(tipDia[0].parentElement).hover(function () {
            clearTimeout(t);
        });

        $(tipDia[0].parentElement).mouseleave(function () {
            t = setTimeout(function () {
                tipDia.dialog("close")
            }, timeoutConfig);
        });


    }


    //消息推送处理
    _handlePushingTips = function (tipList, unReadNum) {
        if (unieap.oldInfoTipPush) {
            if (typeof tipDia !== "undefined" && tipDia.dialog("isOpen"))
                return;
            if (typeof (tipList) != "undefined") {
                for (var i = 0, l = tipList.length; i < l; i++) {
                    var tip = tipList[i];

                    var dialogProps = {};

                    dialogProps.draggable = false;

                    dialogProps.resizable = false;

                    dialogProps.show = {
                        effect: "blind",
                        duration: 1000
                    };

                    dialogProps.position = {
                        my: "right bottom",
                        at: "right-" + (30 + i * 5) + " bottom-" + (30 + i * 5),
                        of: $(document)
                    };

                    if (tip.config) {
                        dialogProps.title = tip.config.headLine ? tip.config.headLine :
                            "";
                        dialogProps.height = tip.config.height ? tip.config.height :
                            "100";
                        dialogProps.width = tip.config.width ? tip.config.width : "120";

                        dialogProps.dialogClass = "infotipDialog";

                        dialogProps.open = function () {
                            $("div[class='DrugNewsText'] a", this)
                                .css("cursor", "pointer")
                                .click(function () {
                                    $.Open_UNIEAP_INFOTIP_CLIENTBROWSER_dialog($(
                                            this).attr("id") &&
                                        $(this).attr("id").length > 0 ? $(
                                            this).attr("id") :
                                        null);
                                    var currentDlg = $("div[class~='infotipDialog']:visible div[class~='ui-dialog-content']");
                                    if (currentDlg.length > 0)
                                        $(currentDlg).dialog("close");
                                });
                            $("div[class='DrugNewsMore'] a", this)
                                .css("cursor", "pointer")
                                .click(function () {
                                    $.Open_UNIEAP_INFOTIP_CLIENTBROWSER_dialog_v2();
                                    var currentDlg = $("div[class~='infotipDialog']:visible div[class~='ui-dialog-content']");
                                    if (currentDlg.length > 0)
                                        $(currentDlg).dialog("close");
                                });
                        }

                        dialogProps.close = function () {
                            $("#tip").animate({
                                'bottom': 30
                            }, 1000);
                        }
                    }

                    var tipDia = $("<div>" + tip.abbr + "</div>").dialog(dialogProps);
                    var timeoutConfig = tip.config.dialogTimeOut != null ? tip.config.dialogTimeOut :
                        5000;
                    var t = setTimeout(function () {
                        tipDia.dialog("close")
                    }, timeoutConfig);

                    $(tipDia[0].parentElement).hover(function () {
                        clearTimeout(t);
                    });

                    $(tipDia[0].parentElement).mouseleave(function () {
                        t = setTimeout(function () {
                            tipDia.dialog("close")
                        }, timeoutConfig);
                    });
                }
            }
            $.Set_UNIEAP_INFOTIP_TIPSNUM && $.Set_UNIEAP_INFOTIP_TIPSNUM(unReadNum);
            $("#tip").css({
                'width': dialogProps.width
            });
            $("#tip").animate({
                'bottom': Number(dialogProps.height) + 35
            }, 1000);
        } else {
            if (tipList && tipList.length > 0) {
                if (!unieap.bootstrapMenu) {
                    _handlePushingTipsDown(tipList);
                } else {
                    var tipContentList = tipList[0].abbr;
                    var subjectMaxLength = 4;
                    var ul = $("#dropdown_menu_list");
                    $(".infotip_waitfor_li", ul).remove();
                    var existnum = $("#dropdown_menu_list li").length; //获取ul里已有的li数量

                    //剔除重复的消息，通过比较新来消息的id值和已有消息的id值来去重，重复的项忽略，不重复的项加入新消息队列tipListAfter
                    var orgtiplist = new Array(); //将原始的传过来的tipContentList队列orgtiplist，用于比较
                    for (var k = 0; k < tipContentList.length; k++) { //将tipContentList的内容装入队列orgtiplist
                        orgtiplist.push(tipContentList[k]);
                    }
                    var orgCount = orgtiplist.length; //orgCount：初始来的消息队列的长度
                    var existids = new Array(); //existids:存放已有的ul中各li的id值的数组
                    var ids = 0; //id的计数器

                    $(".messagelist-forshort a").each(function (i) { //将所有现有的id值存入数组existids
                        existids[ids] = this.name;
                        ids++;
                    });

                    var num = 0; //去重后的新消息队列tipListAfter的计数器为num
                    var tipListAfter = new Array();
                    for (var i = 0; i < orgCount; i++) { //比较过程，重复的忽略，不重复的加入新队列tipListAfter
                        var item = orgtiplist.shift();
                        for (var j = 0; j < existnum; j++) {
                            if (item.id == existids[j]) {
                                break;
                            }
                        }
                        tipListAfter[num] = item;
                        num++;


                    }

                    //将去重后的消息队列tipListAfter显示出来
                    if (typeof (tipListAfter) != "undefined") { //tipListAfter不为空

                        var size = tipListAfter.length;
                        if (size > 0) {
                            var win = unieap.getTopWin();
                            if (!win.infotipTimer) {
                                win.infotipTimer = blinkTitleShow();
                                setTimeout(function () { //此处是过一定时间后自动消失
                                    blinkTitleClear(win.infotipTimer);
                                    win.infotipTimer = null;
                                }, unieap.newInfoTipTime);
                            }
                        }
                        if (existnum == 0) { //加载时

                            for (var i = 0; i < tipListAfter.length; i++) {

                                var liMenu = liManufacturer(tipListAfter[i]);
                                liMenu.appendTo(ul);
                            }
                        }
                        if (existnum != 0) { //其他有消息推送时

                            for (var i = 0; i < tipListAfter.length; i++) {

                                var liMenu = liManufacturer(tipListAfter[i]);
                                if (existnum == subjectMaxLength) {
                                    var first_child = $("#dropdown_menu_list li:nth-child(1)");
                                    liMenu.insertBefore(first_child);
                                    ul.children().last().remove();
                                    existnum = subjectMaxLength;
                                }
                                if ((existnum > 0) && (existnum < subjectMaxLength)) {
                                    var first_child = $("#dropdown_menu_list li:nth-child(1)");
                                    liMenu.insertBefore(first_child);
                                    existnum++;
                                }
                                if (existnum == 0) {
                                    liMenu.appendTo(ul);
                                    existnum++;
                                }

                            }
                        }
                    }
                }
            }
            $.Set_UNIEAP_INFOTIP_TIPSNUM && $.Set_UNIEAP_INFOTIP_TIPSNUM(unReadNum);
        }
    }

    dojo.mixin(unieap.Action, {

        //获取代码缓存地址
        CODELISTURL: "/rpc.do?method=getCodeList",
        //获取多个代码缓存地址
        MULTICODELISTURL: "/rpc.do?method=getMultiCodeList",
        //查询数据地址
        QUERYURL: "/rpc.do?method=doQuery",
        //统计地址
        COUNTURL: "/rpc.do?method=doCount",
        //更新数据地址
        UPDATEURL: "/rpc.do?method=doUpdate",
        //打印地址
        PRINTURL: "/rpc.do?method=doPrint",
        //导出地址
        EXPORTURL: "/rpc.do?method=doExport",
        //获取个性化信息地址
        GINDIVIDUALURL: "/rpc.do?method=getIndividual",
        //保存个性化信息地址
        SINDIVIDUALURL: "/rpc.do?method=setIndividual",
        //获取缓存地址
        CACHEURL: "/rpc.do?method=loadCacheData",

        /**
         * @summary:
         *		向服务器端发送ajax http request请求的通用方法，传输协议为dataCenter
         * @param
         *	 	{object} data 请求参数对象
         * @example:
         * |	var data={
         * |		${1}url:"/eapdomain/login.do?method=begin",
         * |		${2}parameters:{role: "admin", dept: "telcom"},
         * |		${3}headers:{ajax:"true",charset:"utf-8"},
         * |		${4}sync:true,
         * |		${5}timeout:120,
         * |		${6}preventCache:false,
         * |		${7}load:function(${8}dc, ${9}xhr){
         * |			},
         * |		error:function(${10}responseText, ${11}xhr){
         * |			},
         * |		${12}context:this,
         * |		${13}coverage : "discard"
         * |	}
         * |	unieap.Action.requestData(data,dc,false);
         * ${1}必填项，向服务器请求的URL
         * ${2}可选项，向服务器请求的参数
         * ${3}可选项，向服务器头部请求的参数,在服务器端通过HttpServletRequest.getHeader方法可以取得
         * ${4}可选项，true表示同步。请求同步或异步，默认为异步
         * ${5}可选项，请求超时时间，单位为秒，默认为120秒
         * ${6}可选项，是否阻止该请求在客户端浏览器缓存，默认为true，即不缓存
         * ${7}可选项，请求成功后的回调函数
         * ${8}dc 请求成功后生成的dataCenter对象
         * ${9}xhr 当前的XMLHttpRequest请求对象
         * ${10}responseText 出错的响应内容
         * ${11}xhr 当前的XMLHttpRequest请求对象
         * ${12}可选项，load或error方法的上下文
         * ${13}替换DataStore的策略
         * @param
         * 		{unieap.ds.DataCenter|Null}
         * 		dc 传输的数据对象
         * @param
         * 		{Boolean|Null} showLoading
         * 		是否显示进度条，默认显示异步方式使用
         * @return
         * 		{unieap.ds.DataCenter|void}
         * 		同步的时候返回DataCenter对象，异步的时候无返回值
         */
        requestData: function (data, dc, showLoading) {
            var requestURL = unieap.buildRequestPath(data.url, data.parameters);

            //防止dc被序列化的时候 报出堆栈溢出 2019-10-23 LD
            if (dc && dc.parameters) {
                for (item in dc.parameters) {
                    if (typeof (dc.parameters[item]) == 'object') {
                        if (item.toLowerCase() == 'id') {
                            delete dc.parameters[item]
                        }
                    }
                }
            }
            var json = dc && dc.toJson ? dc.toJson() : String(dc || "");
            var _dc = null;

            if (!data.sync && showLoading != false) { //异步
                unieap.showXhrLoading(true);
            }
            var contentType = data.contentType || "application/json";
            if (unieap.isEncrypt == true) {
                dojo.require("unieap.util.encrypt");
                var digest = hex_sha1(escape(json).toLowerCase());
                data.headers = data.headers || {};
                data.headers["digest"] = digest;
            }
            var timeout = unieap.global.timeout ? unieap.global.timeout : 120 * 1000;
            dojo.rawXhrPost({
                url: requestURL,
                sync: data.sync,
                preventCache: (data.preventCache ? data.preventCache : true),
                // contentType: "multipart/form-data",
                timeout: ((data.timeout) ? data.timeout : timeout),
                headers: dojo.mixin({
                    ajaxRequest: true
                }, data.headers, {
                    "Content-Type": contentType
                }),
                postData: json,
                load: function (text, args) {
                    var json = text;
                    if (!data.sync && showLoading != false) { //异步
                        unieap.showXhrLoading(false);
                    }
                    try {
                        json = dojo.fromJson(text);
                    } catch (e) {}
                    //超时处理
                    if (_timeoutProcess(json, data, dc, showLoading))
                        return;

                    //帐号被踢出的处理(用于v4)
                    if (_accountKickedProcess(json))
                        return;

                    function complete() {
                        if (data.load) {
                            try {
                                data.context ? data.load.call(data.context, _dc, args.xhr) : data.load(_dc, args.xhr);
                            } catch (e) {
                                console.error(e);
                                //alert("请求数据成功！但回调方法出错；请检查自定义load回调函数。\n "+dojo.toJson(e,true));
                                doAfterFailedCustomLoad();
                                var dataLoadString = data.load.toString();
                                var isV4 = dataLoadString.indexOf("_load && _load(dc);") != -1 ? true : false;
                                //如果是V4的方法
                                if (isV4) {
                                    //									var viewIndex = dataLoadString.indexOf("view.");
                                    //									dataLoadString = dataLoadString.substring(viewIndex);
                                    //									//去除干扰项"_load && _load(dc);"
                                    //									var successFuncIndex = dataLoadString.indexOf(";");
                                    //									var successFuncName =  dataLoadString.substring(0,successFuncIndex);
                                    //									successFuncName = successFuncName.replace("view.","");
                                    if (dojo.isFF) {
                                        alert(RIA_I18N.rpc.loadError + "\n" + dojo.toJson(e, true));
                                    } else {
                                        alert(RIA_I18N.rpc.loadError + "\n");
                                    }
                                } else { //V3的情况
                                    if (dojo.isFF) {
                                        alert(RIA_I18N.rpc.loadError + "\n" + dataLoadString + "\n" + dojo.toJson(e, true));
                                    } else {
                                        console.log(RIA_I18N.rpc.loadError + "\n" + dataLoadString);
                                    }
                                }
                                //								alert(RIA_I18N.rpc.loadError+"\n "+dojo.toJson(e,true));
                            }
                        }
                    }

                    //推送消息的处理
                    if (json.body && (json.body.infotips || json.body.unReadNum)) {
                        _handlePushingTips(json.body.infotips, json.body.unReadNum);
                    }

                    try {
                        json.body.dataStores; //确定返回来的是否为DataCenter格式的Json对象
                        _dc = new unieap.ds.DataCenter(json);
                        if (_dc.dataStores && _dc.dataStores.result && _dc.dataStores.result.parameters && _dc.dataStores.result.parameters
                            ._pageKey) {
                            //防止pagekey中带加号 转码一下
                            _dc.setParameter('_pageKey', _dc.dataStores.result.parameters._pageKey);
                        }
                        //异常处理
                        if (_isExceptionControl()) {
                            if (_dc.getCode() < 0) {
                                data.error(args.xhr);
                                return;
                            } else {
                                var dc = data.dc || globalDataCenter;
                                dc.append(_dc, data.coverage || "discard");
                                if (_dc.getCode() > 0) {
                                    dojo.require("unieap.dialog.MessageBox");
                                    MessageBox.alert({
                                        // 成功提示
                                        title: RIA_I18N.rpc.success,
                                        // message : _dc.getTitle() || "请求操作成功" ,
                                        message: _dc.getTitle() || RIA_I18N.rpc.successMessage,
                                        onComplete: complete
                                    });
                                }
                            }
                        } else {
                            if (_exceptionProcess(json, data, _dc, complete)) {
                                return;
                            }
                        }

                    } catch (e) {
                        // _dc = json;
                    }

                    complete();
                },
                error: function (text, args) {
                    var result = text.responseText;
                    if (text.status == 401 || text.status == 403) {
                        dojo.require("unieap.dialog.MessageBox");
                        MessageBox.alert({
                            yesStr: "确认",
                            message: RIA_I18N.rpc.sessionOut,
                            onComplete: unieap.getTopWin().app.logout
                        });
                        return false;
                    }
                    if (!data.sync && showLoading != false) { //异步
                        unieap.showXhrLoading(false);
                    }
                    if (_timeoutProcess(result, data, dc, showLoading))
                        return;
                    //帐号被踢出的处理(用于v4)
                    if (_accountKickedProcess(result))
                        return;
                    if (data.error) {
                        data.context ? data.error.call(data.context, result, args.xhr) : data.error(result, args.xhr)
                    }
                }
            });
            //同步返回
            if (data.sync) {
                return _dc;
            }
        },

        /**
         * @summary：
         * 		同步获取DataStore，用于获取下拉列表数据
         * @description:
         * 		先从缓存中取，如果没有则发请求从服务端获取数据并放到缓存中
         * @param:
         * 		{string} storeName dataStore的名字
         * @return
         * 		{unieap.ds.DataStore}
         */
        getCodeList: function (store) {
            if (!store) {
                return;
            }
            //从缓存中获取数据
            var ds = unieap.getDataStore(store, null, true);
            if (ds) {
                return ds;
            }
            var dc = new unieap.ds.DataCenter();
            dc.setParameter("store", store);
            unieap.Action.requestData({
                url: unieap.WEB_APP_NAME + this.CODELISTURL,
                sync: true,
                load: function (dc) {
                    ds = dc.getSingleDataStore();
                    if (ds) {
                        var name = ds.getName();
                        var timeStamp = dc.getParameter(name);
                        unieap.setDataStore(ds, dataCenter, true, timeStamp);
                    }
                }
            }, dc);
            return ds;
        },


        /**
         * @summary：
         * 		异步获取多个DataStore，用于获取下拉列表数据或值转义
         * @description：
         * 		多用于Form绑定和Grid的代码表转义，两种情形为：
         * 		1、Form中有多个ComboBox组件和InlineEditBox，且provider中没有对应DataStore时，发请求只获取Form所绑定行所需的部分行数据信息
         * 		2、Grid中多需要列值转义，如果客户端缓存中没有相应的DataStore，则自动发请求获取相关的全部DataStore信息
         * @param：
         * 		{array} inData
         * @param：
         * 		{Function} callback
         * 		定义的回调方法，传入的参数为unieap.ds.DataCenter对象和数组对象inData
         * @example
         * 	| 	function demo(){
         *	|		unieap.Action.getMultiCodeList(['key1','key2'],function(dc){
         *	|			unieap.debug(dc);
         *	|		});
         *	| 	}
         *
         */
        getMultiCodeList: function (inData, callback) {

            if (!inData || unieap.isEmpty(inData = unieap.array_unique(inData))) {
                callback && callback();
            } else {
                var dc = new unieap.ds.DataCenter();
                var requestKeys = [];
                for (var i = 0; i < inData.length; i++) {
                    //首先从缓冲中查找数据
                    var ds = unieap.getDataStore(inData[i], null, true);
                    if (!ds) {
                        requestKeys.push(inData[i]);
                    } else {
                        dc.addDataStore(ds);
                    }
                }
                if (requestKeys.length == 0) {
                    callback && callback(dc);
                } else if (requestKeys.length > 0) {
                    dc.setParameter("stores", inData);
                    unieap.Action.requestData({
                        url: unieap.WEB_APP_NAME + this.MULTICODELISTURL,
                        //由于struts2后台不能连续多次提交请求，不然返回的数据不对，需要设置为同步
                        //但同步会影响性能!!!
                        //UniEAP V3采用struts 1.x,不存在此问题，如果用该版本，把sync属性去掉
                        sync: true,
                        load: function (dc) {
                            if (dc == "") return;
                            var stores = dc.getDataStores();
                            for (var name in stores) {
                                var timeStamp = dc.getParameter(name);
                                unieap.setDataStore(dc.getDataStore(name), dataCenter, true, timeStamp);
                            }
                            callback && callback(dc);
                        },
                        error: function () {
                            callback && callback();
                        }
                    }, dc);
                }
            }
        },

        /**
         * @summary：
         * 		普通RowSet查询操作
         * @description:
         * 		只适合单个DataStore查询，用于Grid翻页等操作获取数据，用户也可直接调用加载某个DataStore数据
         * 		自动替换DataCenter对象中的同名对象
         * @param：
         * 		{unieap.ds.DataStore} store
         * 		所有查询的DataStore对象，包括查询的必要信息
         * @param：
         * 		{object} inData
         * 		传递的其他信息，可以为空
         * @example:
         * |	var data={
         * |		${1}load:function(ds,dc){},
         * |		${2}error:function(error){},
         * |		${3}onBeforeQuery:function(dc,indata){},
         * |		${4}sync:true,
         * |		${5}synCount:true,
         * |		${6}url:"store.do",
         * |		${7}countUrl:"count.do",
         * |		${8}parameters：{...}
         * |		${9}operator:"sort",
         * |	}
         * |	unieap.Action.doQuery(store,data);
         * ${1}成功回调方法，传入的值为DataStore和DataCenter对象
         * ${2}失败回调方法，传入的值为错误信息
         * ${3}查询前的回调方法，传入值为DataCenter对象和inData，返回值为false不提交
         * ${4}请求同步异步方式，默认为同步（true）请求方式
         * ${5}是否同步获取统计数，默认为同步（true）请求方式
         * ${6}自定义查询的url地址
         * ${7}自定义统计查询的url地址
         * ${8}定义额外的提交参数
         * ${9}操作方式，用于Grid查询操作{query、paging、sort等}
         */
        doQuery: function (store, inData) {
            var dc = new unieap.ds.DataCenter();
            var ds = store.collect("none");
            dc.addDataStore(ds);
            inData = inData || {};
            inData["synCount"] = inData["synCount"] != false;
            //设置是否异步获取统计值，包括总记录数求和、平均、最大、最小等操作
            dc.setParameter("synCount", String(inData["synCount"]));
            if (inData.onBeforeQuery && inData.onBeforeQuery(dc, inData) == false) return;
            var path = unieap.WEB_APP_NAME + (inData["url"] ? inData["url"] : unieap.Action.QUERYURL);
            path = unieap.buildRequestPath(path, inData.parameters);
            unieap.Action.requestData({
                url: path,
                dc: inData.dc || dataCenter,
                sync: inData["sync"] != false,
                load: function (dc) {
                    var ds = dc.getSingleDataStore();
                    inData.load && inData.load(ds, dc);
                    if (!inData["synCount"]) { //异步获取统计数
                        dc = new unieap.ds.DataCenter();
                        dc.addDataStore(ds.collect("none"));
                        path = unieap.WEB_APP_NAME + (inData["countUrl"] ? inData["countUrl"] : unieap.Action.COUNTURL);
                        path = unieap.buildRequestPath(path, inData.parameters);
                        unieap.Action.requestData({
                            url: path,
                            load: function (dc) {
                                var ds = dc.getSingleDataStore();
                                var currentDC = inData.dc || "";
                                if ('undefined' == typeof (globalDataCenter)) {
                                    currentDC = currentDC || dataCenter;
                                } else {
                                    currentDC = currentDC || globalDataCenter;
                                }

                                var store = newdc.getDataStore(ds.getName());
                                //更新统计数
                                store.append(ds, "updateProps");
                            }
                        }, dc);
                    }
                },
                error: function (xhr) {
                    inData.error && inData.error(xhr);
                }
            }, dc);
        },


        /**
         * @summary：
         * 		普通RowSet集合持久化操作
         * @description:
         * 		Grid使用此接口进行持久化操作，用户也可直接调用进行保存操作
         * 		成功后自动调用resetUpdate本地持久化Rowset的数据
         * @param：
         * 		{unieap.ds.DataStore} store
         * 		所有保存的DataStore对象，收集数据方式为auto包括新增、修改和删除记录
         * 	@param：
         * 		{object} inData
         * 		传递的其他信息，可以为空
         * @example:
         * |	var data={
         * |		${1}load:function(ds){},
         * |		${2}error:function(error){},
         * |		${3}onBeforeSubmit:function(dc){},
         * |		${4}url:"submit.do",
         * |		${5}parameters:{a:'a',b:'b'}
         * |	}
         * |	unieap.Action.doUpdate(store,data);
         * ${1}成功回调方法，传入的值为DataStore
         * ${2}error：{function} 失败回调方法，传入的值为错误信息
         * ${3}提交前的回调方法，传入值为DataCenter对象，返回值为false不提交
         * ${4}自定义提交url地址
         * ${5}定义额外的提交参数
         */
        doUpdate: function (store, inData) {
            var dc = new unieap.ds.DataCenter();
            var ds = store.collect("auto");
            dc.addDataStore(ds);
            inData = inData || {};
            if (inData.onBeforeSubmit && inData.onBeforeSubmit(dc) == false) return;
            var path = unieap.WEB_APP_NAME + (inData["url"] ? inData["url"] : this.UPDATEURL);
            path = unieap.buildRequestPath(path, inData.parameters);
            unieap.Action.requestData({
                url: path,
                load: function (dc) {
                    //本地数据持久化
                    store.getRowSet().resetUpdate();
                    inData.load && inData.load(dc);
                },
                error: function (xhr) {
                    inData.error && inData.error(xhr);
                }
            }, dc);
        },


        /*
         * @summary:
         * 		打印RowSet结果集
         * @description:
         * 		如果传入的DataStore的rowSetName为空,则不执行打印操作
         * @param:
         * 		{object} inData
         * @example:
         * |	var data={
         * |		${1}store:store,
         * |		${2}layout:
         * |		[
         * |			[
         * |				[
         * |					{name:"attr_empno",label:"员工编号",width:"80"}
         * |				]
         * |			],
         * |			[
         * |				[
         * |					{name:"attr_ename",label:"姓名" , rowSpan:2,width:"150"},
         * |					{label:"基本信息",colSpan:4,isMulTitle:true}
         * |				],
         * |				[
         * |					{name:"attr_deptno",label:"部门", colSpan:1, width:"150",decoder:{"10":"财务部","20":"开发部"}},
         * | 					{name:"attr_hiredate",label:"入职日期" , width:"160", dataFormat:'yyyy-MM-dd'},
         * | 					{name:"attr_job",label:"职位", width:"150"},
         * |					{name:"attr_sal",label:"工资", width:"150",dataFormat:'#,###.00'}
         * |				]
         * |			]
         * |		],
         * |		${3}url:"/customRpc.do?method=print",
         * |		${4}unitedCells:['detp','city'],
         * |		${5}parameters:{username:"zhangsan",password:"***"},
         * |		${6}lockedData：[{salary:"最大：20000"},{salary:"平均：4000"}],
         * |		${7}footer："平均工资：4000  最大年限 1",
         * |	}
         * |	unieap.Action.doPrint(data);
         * ${1}要打印的DataStore对象
         * ${2}列描述信息集合（包括名称、宽度、转义字典、格式化等信息）
         * ${3}自定义提交url地址
         * ${4}合并单元格信息
         * ${5}传递其他额外信息
         * ${6}锁定行数据，可以为空
         * ${7}字符串类型，自定义信息，可以为空
         */
        doPrint: function (inData) {
            var url = unieap.WEB_APP_NAME + (inData["url"] ? inData["url"] : this.PRINTURL);
            url = unieap.buildRequestPath(url, inData.parameters);
            if (!inData.layout) {
                //alert("导出的布局信息为空！");
                alert(RIA_I18N.rpc.layoutInfoEmpty);
                return;
            }

            var dc = new unieap.ds.DataCenter();
            var ds = inData["store"];
            //如果rowSetName不存在,不执行打印操作
            if (!ds.getRowSetName()) {
                dojo.require("unieap.dialog.MessageBox");
                MessageBox.alert({
                    type: 'warn',
                    yesStr: RIA_I18N.rpc.confirmButton,
                    title: RIA_I18N.rpc.info,
                    message: RIA_I18N.rpc.printError,
                    motion: false
                })
                return;
            };
            ds = ds.collect({
                policy: 'none',
                metaData: true
            }); //只收集metaData,不收集数据
            ds.setPageSize(-1);
            dc.setParameter("layout", inData["layout"]);
            inData["unitedCells"] && dc.setParameter("unitedCells", inData["unitedCells"]);
            dc.addDataStore(ds);


            unieap.Action.requestData({
                url: url,
                sync: true,
                load: function (dc) {
                    var form = dojo.byId('unieap-print-form'),
                        iframe;
                    if (!form) {
                        if (dojo.isIE < 9) {
                            iframe = dojo.create("<iframe name='printIframe' style='border:0px;' width=0 height=0></iframe>");
                        } else {
                            iframe = dojo.create('iframe', {
                                name: 'printIframe',
                                style: {
                                    border: '0px'
                                },
                                width: 0,
                                height: 0
                            });
                        }
                        dojo.place(iframe, dojo.body());
                        form = dojo.create('form', {
                            id: 'unieap-print-form',
                            method: 'post',
                            target: 'printIframe'
                        });
                        dojo.place(form, dojo.body());
                        var input = dojo.create('input', {
                            type: 'hidden',
                            name: 'myAction',
                            value: 'rpc.do?method=doPrint'
                        })
                        dojo.place(input, form);
                        input = dojo.create('input', {
                            type: 'hidden',
                            name: 'uid',
                            value: ''
                        });
                        dojo.place(input, form);
                        form.action = unieap.WEB_APP_NAME + "/unieap/pages/report/jsp/show/UniPrint.jsp";

                    }
                    form.submit();
                }
            }, dc, false);
        },

        /**
         * @summary：
         * 		获取控件的上下文
         * @return：
         * 		{object|Element} obj
         * @example:
         * |<script>
         * | 	var dc = unieap.Action.getViewContext(unieap.byId('form'));
         * |</script>
         */
        getViewContext: function (obj) {
            if (null != obj.declaredClass) {
                var rootID = obj._rootID;
                if (rootID) {
                    return viewContextHolder[rootID];
                }
            } else {
                var node = obj;
                while (node) {
                    if (node.getAttribute && node.getAttribute("xhr")) {
                        return viewContextHolder[node.getAttribute("id")];
                    }
                    node = node.parentNode;
                }
            }
            //返回frameset结构的页面上下文
            if ("undefined" == typeof (viewContextHolder)) {
                return null;
            }
            if (viewContextHolder["default"] == null) {
                for (var key in viewContextHolder) {
                    return viewContextHolder[key];
                }
            }
            return viewContextHolder["default"];
        },

        exportFinishCheck: function () {
            var self = this;
            var fUrl = unieap.WEB_APP_NAME + "/techcomp/ria/csvExportAction!getExportFinishedFlag.action";
            setTimeout(function () {
                unieap.Action.requestData({
                    url: fUrl,
                    load: function (dc) {
                        try {
                            if (true == dc) {
                                unieap.showLoading(false);
                            } else if ("error" == dc) {
                                unieap.showLoading(false);
                                MessageBox.alert({
                                    title: '提示框',
                                    message: '导出数据错误。'
                                })
                            } else {
                                self.exportFinishCheck();
                            }
                        } catch (e) {}
                    }
                }, null, false);
            }, 500);
        },

        /**
         * @summary：
         * 		导出RowSet结果集 该方法为服务器导出
         * @param:
         * 		{object} inData 导出相关信息
         * @example：
         * |	var data={
         * |		${1}store:store,
         * |		${2}layout:
         * |		[
         * |			[
         * |				[
         * |					{name:"attr_empno",label:"员工编号",width:"80"}
         * |				]
         * |			],
         * |			[
         * |				[
         * |					{name:"attr_ename",label:"姓名" , rowSpan:2,width:"150"},
         * |					{label:"基本信息",colSpan:4,isMulTitle:true}
         * |				],
         * |				[
         * |					{name:"attr_deptno",label:"部门", colSpan:1, width:"150",decoder:{"10":"财务部","20":"开发部"}},
         * | 					{name:"attr_hiredate",label:"入职日期" , width:"160", dataFormat:'yyyy-MM-dd'},
         * | 					{name:"attr_job",label:"职位", width:"150"},
         * |					{name:"attr_sal",label:"工资", width:"150",dataFormat:'#,###.00'}
         * |				]
         * |			]
         * |		],
         * |		${3}url:"/customRpc.do?method=print",
         * |		${4}unitedCells:['detp','city'],
         * |		${5}parameters:{username:"zhangsan",password:"***"},
         * |		${6}lockedData：[{salary:"最大：20000"},{salary:"平均：4000"}],
         * |		${7}footer："平均工资：4000  最大年限 1",
         * |		${8}type:'server'
         * |	}
         * |	unieap.Action.doExport(data);
         * ${1}要导出的DataStore对象
         * ${2}列描述信息集合（包括名称、宽度、转义字典、格式化等信息）
         * ${3}自定义提交url地址
         * ${4}合并单元格信息
         * ${5}传递其他额外信息
         * ${6}锁定行数据，可以为空
         * ${7}字符串类型，自定义信息，可以为空
         * ${8}导出方式(server为服务器端导出，client为客户端导出)
         */
        doExport: function (inData) {
            var url = unieap.WEB_APP_NAME + (inData["url"] ? inData["url"] : this.EXPORTURL);
            url = unieap.buildRequestPath(url, inData.parameters);
            url = unieap.WEB_APP_NAME + '/techcomp/ria/commonProcessor?page=excelExport';
            inData.type = 'server';
            if (!inData.layout) {
                //alert("导出的布局信息为空！");
                alert(RIA_I18N.rpc.layoutInfoEmpty);
                return;
            }
            var dc = new unieap.ds.DataCenter();
            var ds = inData["store"];
            var checkArr = function(arr){
                $.each(arr,function(j,child){
                    if(child.grid){
                        child.grid= {}
                    }
                    child.id = child.name
                    if(child.childs&&child.childs.length>0){
                        checkArr(child.childs)
                    }
                })
                return arr
            }
            var checkLyout = function(arr){//判断是否是多表头
                var colspan = false    
             $.each(arr,function(i,child){
                     if(child instanceof Array){
                        colspan = checkLyout(child)
                     }else{
                         if((child.colSpan&&child.colSpan>1)||(child.rowSpan&&child.rowSpan>1)){
                         colspan = true
                         }
                        }
                    
                 })
              return colspan
             }
            if(inData.addStructure){
                var formatter = function(data){
                    $.each(data,function(i,child){
                        if(child.displayFormatter&&child.displayFormatter.dataFormat == "###,###.00")
                        {
                            child.displayFormatter.dataFormat = "###,##0.00"
                        }else if(child.childs&&child.childs.length){
                            formatter(child.childs)
                        }   
                    })
                    return data
                }
                formatter(inData.addStructure)
            }
            var structure;
            //如果是多表头 并且structure回来的数据没有childs 就 重新组装表头
            if ((inData.layout[0].length > 1 || inData.layout.length > 1) && !unieap.Action.hasChilds(inData.structure)) {
                if (inData.addStructure&&checkLyout(inData.addStructure)) {//如果是动态加载进来的多表头
                    structure = [[checkArr(inData.addStructure)]]
                } else {
                    if (inData.layout[0] && inData.layout[0].length > 1) {
                        structure = [
                            [unieap.Action.setNewLayout(inData.layout)[0]]
                        ];
                    } else {
                        structure = [
                            [unieap.Action.careatNewLayout(inData.layout)]
                        ];
                    }
                }

            } else {
                structure = [
                    [unieap.Action.careatLayout(inData.structure)]
                ]; //过滤表头 改使用inData.structure
            }

            dc.setParameter("_layout", structure);
            inData["exportLabels"] && dc.setParameter("exportLabels", inData["exportLabels"]);
            inData["unitedCells"] && dc.setParameter("unitedCells", inData["unitedCells"]);
            inData["exportType"] && dc.setParameter("_exportType", inData["exportType"]);
            dc.setParameter("_type", inData["type"]);
            dc.setParameter("dsName", ds.getName());
            for (var param in inData['parameters'] || {}) {
                dc.setParameter(param, inData['parameters'][param]);
            }
            inData["footer"] && dc.setParameter("footer", inData["footer"]);
            inData["lockedData"] && dc.addDataStore(new unieap.ds.DataStore("lockedStore", inData["lockedData"]));
            if (inData["type"] == "server") {
                ds = ds.collect({
                    policy: 'none',
                    metaData: true
                });
                ds.setPageSize(-1);
            }
            //dc.addDataStore(ds);
            var form = dojo.byId("unieap_export_form"),
                iframe;
            if (!form) {
                if (dojo.isIE < 9) {
                    iframe = dojo.create("<iframe name='exportIframe' style='border:0px' width=0 height=0></iframe>");
                } else {
                    iframe = dojo.create('iframe', {
                        name: 'exportIframe',
                        style: {
                            border: '0px'
                        },
                        width: 0,
                        height: 0
                    });
                }
                dojo.place(iframe, dojo.body())
                form = dojo.create("form", {
                    id: "unieap_export_form",
                    name: "unieap_export_form",
                    method: "post",
                    enctype: "multipart/form-data",
                    target: 'exportIframe'
                });

                var input = dojo.create("input", {
                    name: "data",
                    type: "hidden"
                });

                dojo.place(input, form);
                dojo.place(form, document.body);
            } else {
                input = form.firstChild;
            }

            var inputVal = dc;
            var newDC = $.extend({}, dc);
            var inputVal = {};
            inputVal.dataStores = newDC.dataStores;

            inputVal.header = newDC.header;
            inputVal.parameters = newDC.parameters;
            inputVal.toJson = newDC.toJson;
            var viewName = inData.viewName,
                lastArgs;
            var processorNam = inData.processorNam;
            var gridProcessor = null;
            try { //防止传参进来的时候 没有带viewName
                gridProcessor = unieap.byId(inData.gridId).binding.originStore ? unieap.byId(inData.gridId).binding.originStore[
                    parameters][processor] : '';
            } catch (error) {
            }
            if (viewName) { //如果从分页里面取到的值为null  就取global里面的 lastArgs
                var view = null
                try {
                    view = eval(viewName);
                    lastArgs = view ? view.lastArgs[processorNam] : null;
                }catch(error) {

                }
                lastArgs = view ? view.lastArgs[processorNam] : null;
                if (!lastArgs||(lastArgs._rootNodeId != unieap.byId(inData.gridId)._rootID)) {
                    var lastArgsList = window['lastArgs'];
                    for(var i=lastArgsList.length-1;i>-1;i--){
                        if(lastArgsList[i]._rootNodeId == unieap.byId(inData.gridId)._rootID){
                            lastArgs = lastArgsList[i];
                            break;
                        }
                    }
                    // lastArgs = window['lastArgs'][window['lastArgs'].length - 1]
                }
            } else if (gridProcessor) {
                var view = eval(gridProcessor.view);
                lastArgs = view.lastArgs[gridProcessor.name];
            } else {
                // lastArgs = window['lastArgs'][window['lastArgs'].length - 1];
                var lastArgsList = window['lastArgs'];
                for(var i=lastArgsList.length-1;i>-1;i--){
                    if(lastArgsList[i]._rootNodeId == unieap.byId(inData.gridId)._rootID){
                        lastArgs = lastArgsList[i];
                        break;
                    }
                }
            }
            inputVal.parameters._exportType = inData.exportType == 'PDF' ? 'pdf' : 'xlsx'; //xls  2003  xlsx 2007   pdf   三种模式可选 暂时写死 Excel2007
            inputVal.parameters.dcID = lastArgs.boInvoked.dcID; //'acctBank';
            inputVal.parameters._boId = lastArgs.boInvoked.boID; //'testBO';
            inputVal.parameters._methodName = lastArgs.boInvoked.methodName; //'getList1';

            if (inData.store.parameters && inData.store.parameters._pageKey) { //如果有pageKey  就传pageKey给后台
                inputVal.parameters._pageKey = inData.store.parameters._pageKey
            } else if (lastArgs._pageKey) {
                inputVal.parameters._pageKey = lastArgs._pageKey;
            }
            var _methodParameterTypes = [];
            var _parameterTypes = [];
            var _parameters = [];
            for (var i = 0; i < lastArgs.uParameters.length; i++) {
                var uParam = lastArgs.uParameters[i];
                _methodParameterTypes.push(uParam.javaType);
                _parameterTypes.push(uParam.type);
                _parameters.push(uParam.name);
                if (uParam.value instanceof unieap.ds.DataStore) {
                    inputVal.dataStores[uParam.name] = uParam.value;
                } else {
                    inputVal.parameters[uParam.name.split("(")[0]] //防止 key 带(*****) 导致后端不识别
                    = uParam.value;
                }

            }
            if (!inputVal.parameters._pageKey) {
                delete inputVal.parameters._pageKey; //安贞环境 薪资结构 容易误传pagekey 
                // inputVal.parameters._pageKey = unieap.byId(inData.gridId).dataCenter.getParameter('_pageKey')
            } 

            if (inputVal.parameters._pageKey) { //避免pagek出现加号 导致放到form里面input不识别的问题
                inputVal.parameters._pageKey = inputVal.parameters._pageKey
            }

            inputVal.parameters._methodParameterTypes = _methodParameterTypes.join(','); //'java.lang.String';
            inputVal.parameters._parameterTypes = _parameterTypes.join(','); //'string';
            inputVal.parameters._parameters = _parameters.join(',');
            if (unieap.isEncrypt) {
                dojo.require("unieap.util.encrypt");
                var digestInput = form.lastChild;
                if (digestInput.getAttribute("name") != "digest") {
                    digestInput = dojo.create('input', {
                        type: 'hidden',
                        name: 'digest'
                    });
                    dojo.place(digestInput, form);
                }
                digestInput.value = hex_sha1(escape(input.value).toLowerCase());
            }
            form.action = url;
            form.enctype = 'multipart/form-data';
            var menuId, menu;
            if (unieap.byId(inData.gridId) && unieap.byId(inData.gridId).dataCenter && unieap.byId(inData.gridId).dataCenter.getParameter(
                    'menuId')) {
                menuId = unieap.byId(inData.gridId).dataCenter.getParameter('menuId');
                form.action += '&menuId=' + menuId; //分库导出时增加menuId避免分库导出空数据
                menu = JSON.stringify(app.getMenuById(menuId)) == '{}' ? {
                    title: '导出文件'
                } : app.getMenuById(menuId);
            } else {
                //iframe加载导出
                if (view && view.dataCenter) {
                    menuId = view.dataCenter.getParameter('menuId') || view.dataCenter.getParameter('unieapMenuId');
                    if(menuId){
                        form.action += '&menuId=' + menuId; //分库导出时增加menuId避免分库导出空数据
                    }
                    menu = !top.app||JSON.stringify(top.app.getMenuById(menuId)) == '{}' ? {
                        title: '导出文件'
                    } : top.app.getMenuById(menuId);
                }

            }
            if (unieap.byId(inData.gridId) && unieap.byId(inData.gridId).ExportManager && unieap.byId(inData.gridId).ExportManager.exportData) { //自定义导出页头页脚的名称
                menu.title = unieap.byId(inData.gridId).ExportManager.exportData.name
            }
            var temp = menu ? unieap.Action.careatExporeatDialo(menu.title, unieap.Action.aboutExport.careatExportDom(inData.gridId,
                menu.title), 'server') : unieap.Action.careatExporeatDialo('导出文件', unieap.Action.aboutExport.careatExportDom(inData.gridId,
                '导出文件'), 'server')
            var exportsdialog
            if (unieap.byId('exsportNameDialog')) {
                exportsdialog = unieap.byId('exsportNameDialog');
            } else {
                exportsdialog = XDialogUtil.createDialog({
                    title: "导出文件",
                    width: "600",
                    height: "450",
                    resizable: true,
                    isMax: false,
                    isExpand: false,
                    id: 'exsportNameDialog',
                    inner: temp,
                    dialogData: inData,
                    iconCloseComplete: true,
                    onComplete: function (data) {
                        if (data) {
                            var exportFileName = document.getElementById('exportFileName') || parent.window.document.getElementById(
                                'exportFileName');
                            var checkedTypePdf = document.getElementById('checkedTypePdf') || parent.window.document.getElementById(
                                'checkedTypePdf');
                            var exportFooterTitle = document.getElementById('exportFooterTitle') || parent.window.document.getElementById(
                                'exportFooterTitle');
                            var fileName = exportFileName.value;
                            var checkedExport = document.getElementById('checkedExport') || parent.window.document.getElementById(
                                'checkedExport');
                            var checkedTypePrint = document.getElementById('checkedTypePrint') || parent.window.document.getElementById(
                                'checkedTypePrint');
                            var flieStates = checkedExport.checked ? 'server' : 'client';

                            if (fileName == '' || fileName.length == 0 || fileName.length > 255) {
                                MessageBox.alert({
                                    type: "error",
                                    message: '文件名不得为空！'
                                });
                                return;
                            }
                            fileName = fileName.replace(/\s+/g, "");
                            var layout = unieap.Action.aboutExport.careatExportData()
                            var checked = document.getElementById('checkedTypePdf') || parent.window.document.getElementById(
                                'checkedTypePdf');
                            var fileType = checked.checked ? 'pdf' : 'xlsx'
                            var checkedTypeCSV = document.getElementById('checkedTypeCSV') || parent.window.document.getElementById(
                                'checkedTypeCSV');
                                if(checkedTypeCSV.checked) { //增加如果是CSV文件
                                    fileType = 'CSV'
                                }
                            // var SimpleExport = document.getElementById('SimpleExport') || parent.window.document.getElementById(
                            //     'SimpleExport');
                              
                            //     if(SimpleExport.checked) { //增加如果简单exl文件
                            //         fileType = 'xlsx'
                            //     }

                            if (checkedTypePrint.checked) { //如果是打印 默认pdf 然后获取参数
                                // {  unieap.byId('pane_101001101000grid1').getSortInfo()
                                //         "pageSet":{
                                //             "horizontalCompress":false, //是否压缩打印
                                //             "defaultUnit":"TenthsOfAMillimeter",//为打印模板设计单位  Point 打印机点(1/72英寸),磅  Pixel 像素 Millimeter 毫米   TenthsOfAMillimeter 0.1毫米  HunderdthsOfAmillimeter 0.01mm Inch英寸 ThousandthsOfAnInch 0.001英寸
                                //             "paperkind":"iso-a4", 纸张尺寸
                                //             "height":2970, 
                                //             "width":2100,
                                //             "landscape":false, 是否横向 
                                //             "pageMargin":{ 纸张间距
                                //                 "left":150,
                                //                 "right":150,
                                //                 "top":100,
                                //                 "bottom":100
                                //             }
                                //         }
                                //     }
                                fileType = 'pdf';
                                inputVal.parameters._pdfPreview = "true"; //是导出流文件直接下载还是导出预览打印
                                var pageSet = {
                                    defaultUnit:"TenthsOfAMillimeter",//打印模板设计单位
                                };
                                var landscapeFalse = document.getElementById('landscapeFalse') || parent.window.document.getElementById(
                                    'landscapeFalse');
                                    pageSet.landscape = landscapeFalse.checked?false:true; //是否横向显示
                                 var paperkind =  document.getElementById('paperkind') || parent.window.document.getElementById(
                                    'paperkind')
                                    var horizontalCompress = document.getElementById('horizontalCompress') || parent.window.document.getElementById(
                                        'horizontalCompress');
                                        pageSet.horizontalCompress = horizontalCompress.checked?false:true; //是否水平压缩显示
                                        switch(paperkind[paperkind.selectedIndex].value){
                                            case 'A4':
                                                pageSet.width = 2100;
                                                pageSet.height = 2970;
                                            break;
                                            case 'A3':
                                                pageSet.width = 4200;
                                                pageSet.height = 2970;
                                            break;
                                            case 'h95':
                                                pageSet.width = 2430;
                                                pageSet.height = 950;
                                            break;
                                            case 'h200':
                                                pageSet.width = 2430;
                                                pageSet.height = 2800;
                                            break;
                                        }
                                        layout.pageSet = pageSet
                                    }
                               
                            inputVal.parameters._exportType = fileType;
                            inputVal.parameters['_exportFilename'] = fileName;
                         
                            var grid = unieap.byId(inData.gridId);
                            if (flieStates === 'client') { //如果选择当前页面导出
                                var gridInData = grid.getGridData();
                                var gridData = gridInData.store.rowSet.primary;
                                if (grid.xtree) {
                                    var XTreeManager = grid.managers.managers.XTreeManager;
                                    for (var i = 0; i < gridData.length; i++) {
                                        var level = XTreeManager._getDepthByRowData(gridData[i]);
                                        var space4 = "  ";
                                        for (var j = 0; j < level; j++) {
                                            space4 += space4;
                                        }
                                        if (level > 1) {
                                            gridData[i][grid.xtree.label] = space4 + gridData[i][grid.xtree.label].trim();
                                        }
                                    }
                                }
                                inputVal.parameters._type = flieStates;
                                          //避免后端因为客户端导出不转格式
                                          var dateArr = [];
                                          var getDateName = function(layout){
                                              dojo.forEach(layout, function(item,index){
                                                  if(Object.prototype.toString.call(item) == '[object Array]'){
                                                      getDateName(item);
                                                  }else if(item.dataType=='date'&&item.dataFormat.toLocaleLowerCase() == 'yyyy-mm-dd'){
                                                      dateArr.push(item.name)
                                                  }
                                              })
                                          }
                                          getDateName(inputVal.parameters._layout||inputVal.parameters.layout);
                                          if(dateArr.length){
                                              var changeDate = function(cTime){
                                                  var date = new Date(cTime);
                                                  var year = date.getFullYear();
                                                  var month = date.getMonth()+1;
                                                  var day = date.getDate();
                                                  month = month < 10 ? "0"+month:month;
                                                  day = day < 10 ? "0"+day:day;
                                                  return year+'-'+month+'-'+day;
                                              }
                                              dojo.forEach(gridData,function(item,index){
                                                  dojo.forEach(dateArr,function(item2,index2){
                                                      if(item[item2]){
                                                          item[item2] = changeDate(item[item2])
                                                      }
                                                  })
                                              })
                                          }
                                          inputVal.parameters._exportData = gridData;
                            }
                            if (grid && grid.ExportManager && grid.ExportManager.formData && grid.ExportManager.formData.subtitles) {
                                layout.title.subtitles = grid.ExportManager.formData.subtitles;
                                if (grid.ExportManager.formData.PrintMode) {
                                    layout.title.PrintMode = grid.ExportManager.formData.PrintMode;
                                }
                            }
                            layout.body = inputVal.parameters._layout;
                            inputVal.parameters._layout = layout;
                            input.value = inputVal.toJson();
                            try { //避免页面里面太多表格 谷歌浏览器弹出下载条 高度计算错误 重置container
                                var observer = new MutationObserver(function (mutations, observer) {
                                    unieap.byId(thisDome.id)._resizeContainer()
                                });
                                var config = {
                                    attributes: true,
                                    attributeOldValue: true,
                                    attributeFilter: [
                                        'style'
                                    ]
                                };
                                var el = document.getElementById(thisDome.id);
                                observer.observe(el, config);
                            } catch (e) {

                            }
                            form.submit();
                            unieap.getXDialog().close();
                            parent.window.vadpUI&&parent.window.vadpUI.message.success('服务器正在导出,请勿重复操作,稍后会自行下载...',[4]);
                            function reload() {
                                this.focus();
                                this.contentWindow.print();
                            }
                            if( checkedTypePrint.checked ){
                                iframe.onload = reload;
                                this.focus();
                                this.contentWindow.print();
                            }
                          


                        } else {
                            return
                        }
                    }
                });
            }


            exportsdialog.show();



        },
        /**
         * @summary：
         * 		前台导出表格
         * @param：
         * 		{string} id
         * 		Grid的唯一标识
         * @return：
         * 		{array|null}
         * @description：
         * 		lock是否锁定{1是|0否}，show是否显示{1是|0否}，index列顺序，
         * 		label显示名称，sort指定排序信息只能指定一个（暂时没有实现）
         * 	@example：
         * 	| [
         * 	|	{lock:1,show:1,index:0,label:"职位"},
         * 	|	{lock:0,show:1,index:1,label:"工资",sort:"asc"}
         * 	| ]	
         * 	unieap.Action.doClientExport(id,type);
         * id 为表格的全部id 加了rootID的
         * type 暂时默认为exl
         */

        doClientExport: function (id, type, clientType) {
            //type = type ? type : 'excel';
            var grid = unieap.byId(id);
            var inData = grid.getGridData();
            var gridData = inData.store.rowSet.primary;
            if (grid.xtree) {
                var XTreeManager = grid.managers.managers.XTreeManager;
                for (var i = 0; i < gridData.length; i++) {
                    var level = XTreeManager._getDepthByRowData(gridData[i]);
                    var space4 = "  ";
                    for (var j = 0; j < level; j++) {
                        space4 += space4;
                    }
                    if (level > 1) {
                        gridData[i][grid.xtree.label] = space4 + gridData[i][grid.xtree.label].trim();
                    }
                }
            }
            var url = unieap.WEB_APP_NAME + (inData["url"] ? inData["url"] : this.EXPORTURL);
            url = unieap.buildRequestPath(url, inData.parameters);
            url = unieap.WEB_APP_NAME + '/techcomp/ria/commonProcessor?page=excelExport';
            inData.type = clientType ? clientType : 'client';
            inData._exportType = type ? type : 'excel';
            inData._exportType = inData._exportType.toUpperCase();
            if (gridData.length == 0) {
                //alert("导出的布局信息为空！");
                alert('暂无数据导出');
                return;
            }
            if (!inData.layout) {
                //alert("导出的布局信息为空！");
                alert(RIA_I18N.rpc.layoutInfoEmpty);
                return;
            }
            var dc = new unieap.ds.DataCenter();
            var ds = inData["store"];
            var structure;
            //如果是多表头 并且structure回来的数据没有childs 就 重新组装表头
            if ((inData.layout[0].length > 1 || inData.layout.length > 1) && !unieap.Action.hasChilds(inData.structure)) {
                if (inData.layout[0] && inData.layout[0].length > 1) {
                    structure = [
                        [unieap.Action.setNewLayout(inData.layout)[0]]
                    ];
                } else {
                    structure = [
                        [unieap.Action.careatNewLayout(inData.layout)]
                    ];
                }
            } else {
                structure = [
                    [unieap.Action.careatLayout(inData.structure)]
                ]; //过滤表头 改使用inData.structure
            }

            dc.setParameter("_layout", structure);
            inData["exportLabels"] && dc.setParameter("exportLabels", inData["exportLabels"]);
            inData["unitedCells"] && dc.setParameter("unitedCells", inData["unitedCells"]);
            inData["_exportType"] && dc.setParameter("_exportType", inData["_exportType"]);
            dc.setParameter("_type", inData["type"]);
            dc.setParameter("_exportData", gridData);

            inData["footer"] && dc.setParameter("footer", inData["footer"]);
            inData["lockedData"] && dc.addDataStore(new unieap.ds.DataStore("lockedStore", inData["lockedData"]));

            var form = dojo.byId("unieap_export_form"),
                iframe;
            if (!form) {
                if (dojo.isIE < 9) {
                    iframe = dojo.create("<iframe name='exportIframe' style='border:0px' width=0 height=0></iframe>");
                } else {
                    iframe = dojo.create('iframe', {
                        name: 'exportIframe',
                        style: {
                            border: '0px'
                        },
                        width: 0,
                        height: 0
                    });
                }
                dojo.place(iframe, dojo.body())
                form = dojo.create("form", {
                    id: "unieap_export_form",
                    name: "unieap_export_form",
                    method: "post",
                    enctype: "multipart/form-data",
                    target: 'exportIframe'
                });

                var input = dojo.create("input", {
                    name: "data",
                    type: "hidden"
                });

                dojo.place(input, form);
                dojo.place(form, document.body);
            } else {
                input = form.firstChild;
            }

            var inputVal = dc;
            var newDC = $.extend({}, dc);
            var inputVal = {};
            inputVal.dataStores = newDC.dataStores;

            inputVal.header = newDC.header;
            inputVal.parameters = newDC.parameters;
            inputVal.toJson = newDC.toJson;

            inputVal.parameters._exportType = inData._exportType == 'PDF' ? 'pdf' : 'xlsx'; //xls  2003  
            if (inData.type != 'client' && inData.store && inData.store.parameters) {
                inputVal.parameters['_pageKey'] = inData.store.parameters._pageKey
            }
            input.value = inputVal.toJson();

            if (unieap.isEncrypt) {
                dojo.require("unieap.util.encrypt");
                var digestInput = form.lastChild;
                if (digestInput.getAttribute("name") != "digest") {
                    digestInput = dojo.create('input', {
                        type: 'hidden',
                        name: 'digest'
                    });
                    dojo.place(digestInput, form);
                }
                digestInput.value = hex_sha1(escape(input.value).toLowerCase());
            }
            form.action = url;
            form.enctype = 'multipart/form-data';
            var menuId, menu;
            if (unieap.byId(id) && unieap.byId(id).dataCenter && unieap.byId(id).dataCenter.getParameter('menuId')) {
                menuId = unieap.byId(id).dataCenter.getParameter('menuId');
                form.action += '&menuId=' + menuId; //分库导出时增加menuId避免分库导出空数据
                menu = JSON.stringify(app.getMenuById(menuId)) == '{}' ? {
                    title: '导出文件'
                } : app.getMenuById(menuId);
            }
            if (unieap.byId(id) && unieap.byId(id).ExportManager && unieap.byId(id).ExportManager.exportData) { //自定义导出页头页脚的名称
                menu.title = unieap.byId(id).ExportManager.exportData.name
            }
            var temp = menu ? unieap.Action.careatExporeatDialo(menu.title, unieap.Action.aboutExport.careatExportDom(id,
                menu.title), 'client') : unieap.Action.careatExporeatDialo('导出文件', unieap.Action.aboutExport.careatExportDom(inData.gridId,
                '导出文件'), 'client')

            var exportsdialog
            if (unieap.byId('exsportNameDialog')) {
                exportsdialog = unieap.byId('exsportNameDialog');
            } else {
                exportsdialog = XDialogUtil.createDialog({
                    title: "导出文件",
                    width: "600",
                    height: "400",
                    resizable: true,
                    isMax: false,
                    isExpand: false,
                    id: 'exsportNameDialog',
                    inner: temp,
                    iconCloseComplete: true,
                    onComplete: function (data) {
                        if (data) {
                            var exportFileName = document.getElementById('exportFileName') || parent.window.document.getElementById(
                                'exportFileName');
                            var checkedTypePdf = document.getElementById('checkedTypePdf') || parent.window.document.getElementById(
                                'checkedTypePdf');
                            var exportFooterTitle = document.getElementById('exportFooterTitle') || parent.window.document.getElementById(
                                'exportFooterTitle');
                            var fileName = exportFileName.value;
                            if (fileName == '' || fileName.length == 0 || fileName.length > 255) {
                                MessageBox.alert({
                                    type: "error",
                                    message: '文件名不得为空！'
                                });
                                return;
                            }
                            fileName = fileName.replace(/\s+/g, "");
                            var checked = document.getElementById('checkedTypePdf') || parent.window.document.getElementById(
                                'checkedTypePdf');
                            var fileType = checked.checked ? 'pdf' : 'xlsx'
                            inputVal.parameters._exportType = fileType;
                            inputVal.parameters['_exportFilename'] = fileName;
                            var layout = unieap.Action.aboutExport.careatExportData()
                            if (grid && grid.ExportManager && grid.ExportManager.formData && grid.ExportManager.formData.subtitles) {
                                layout.title.subtitles = grid.ExportManager.formData.subtitles;
                                if (grid.ExportManager.formData.PrintMode) {
                                    layout.title.PrintMode = grid.ExportManager.formData.PrintMode;
                                }
                            }
                            layout.body = inputVal.parameters._layout;
                            inputVal.parameters._layout = layout;
                            input.value = inputVal.toJson();
                            try { //避免页面里面太多表格 谷歌浏览器弹出下载条 高度计算错误 重置container
                                var observer = new MutationObserver(function (mutations, observer) {
                                    unieap.byId(thisDome.id)._resizeContainer()
                                });
                                var config = {
                                    attributes: true,
                                    attributeOldValue: true,
                                    attributeFilter: [
                                        'style'
                                    ]
                                };
                                var el = document.getElementById(thisDome.id);
                                observer.observe(el, config);
                            } catch (e) {

                            }
                            
                            form.submit();
                            vadpUI&&vadpUI.message.success('服务器正在导出,请勿重复操作,稍后会自行下载...');
                            unieap.getXDialog().close();
                        } else {
                            return
                        }
                    }
                });
            }


            exportsdialog.show();


        },


        /**
         * @summary：
         * 		获取指定Grid的个性化定义信息，同步请求
         * @param：
         * 		{string} id
         * 		Grid的唯一标识
         * @return：
         * 		{array|null}
         * @description：
         * 		lock是否锁定{1是|0否}，show是否显示{1是|0否}，index列顺序，
         * 		label显示名称，sort指定排序信息只能指定一个（暂时没有实现）
         * 	@example：
         * 	| [
         * 	|	{lock:1,show:1,index:0,label:"职位"},
         * 	|	{lock:0,show:1,index:1,label:"工资",sort:"asc"}
         * 	| ]	
         */
        getIndividual: function (id) {
            //表格个性化去掉前台缓存，每次都会发请求，后台有缓存不会每次都执行SQL语句
            //var obj = window["unieap.individual"];
            var obj = false;
            if (unieap.WEB_APP_NAME == null) return null;
            if (!obj) {
                unieap.Action.requestData({
                    url: unieap.WEB_APP_NAME + this.GINDIVIDUALURL,
                    parameters: {
                        path: unieap.cmpPath
                    },
                    sync: true,
                    timeout: 5000,
                    load: function (dc) {
                        var msg = dc.getParameter("individual");
                        obj = window["unieap.individual"] = msg;
                    },
                    error: function (err) {
                        obj = {};
                        err.getDetail ? alert(err.getDetail()) : alert(RIA_I18N.rpc.getInfoError);
                    }
                });
            }
            return obj[id] || null;
        },


        /**
         * @summary：
         * 		保存Grid个性化定制信息
         * @param：
         * 		{object} inData
         * 		保存个性化所提供的必要信息
         * @example:
         * |	var data={
         * |		${1}id:"myGrid",
         * |		${2}data:[
         * |			{lock:1,show:1,index:0,label:"职位"},
         * |			{lock:0,show:1,index:1,label:"工资",sort:"asc"}
         * |		],
         * |		${3}callback:function(dc){
         * |		}
         * |	}
         * |	unieap.Action.setIndividual(data);
         * ${1}{string} Grid的唯一标识
         * ${2}保存的数据，如果为null时清除服务器保存的Grid个性化信息
         * ${3}成功回调方法，返回参数为DataCenter对象	
         */
        setIndividual: function (inData) {
            if (unieap.WEB_APP_NAME == null) {
                inData.callback && inData.callback();
                return;
            }
            var value = inData['data'];
            if (!inData || !(value instanceof Array)) {
                return;
            }

            var obj = window["unieap.individual"];
            if (obj && (dojo.toJson(obj[inData["id"]]) == dojo.toJson(value))) {
                return;
            }
            var dc = new unieap.ds.DataCenter();
            dc.setParameter("individual", value);
            unieap.Action.requestData({
                url: unieap.WEB_APP_NAME + this.SINDIVIDUALURL,
                parameters: {
                    id: inData["id"],
                    path: unieap.cmpPath
                },
                preventCache: true,
                timeout: 5000,
                load: function (dc) {
                    obj && (obj[inData["id"]] = value); //更新本地的缓存个性化数据
                    inData.callback && inData.callback(dc);
                },
                error: function (err) {

                    err.getDetail ? alert(err.getDetail()) : alert(RIA_I18N.rpc.saveError);
                }
            }, dc);
        },


        /*
         * @summary:
         * 		登录后初始化加载缓存数据
         * @param：
         * 		{menu} mode 
         * 		加载模式{load加载所有代码表数据|check检查时间戳只加载有变化的代码表数据}
         * @param:
         * 		{function} callback 回调方法
         */
        loadCacheData: function (mode, callback) {
            dojo.require("unieap.cache");

            var loading = document.createElement("div");
            loading.style.cssText =
                "position:absolute;bottom:0px;left:0px;overflow:hidden;height:20px;border:1px solid #eee;width:120px;background:#fff;font:12px;";
            //loading.innerHTML = "正在装载缓存数据...";
            loading.innerHTML = RIA_I18N.rpc.loadingCache;
            document.body.appendChild(loading);
            //返回本地时间戳对象,格式为object['key']=>timestamp

            var dc = new unieap.ds.DataCenter();
            if (mode == "check") {
                var localTimeStamps = unieap.cache.getAllTimeStamps();
                dc.setParameter("timeStamps", localTimeStamps);
            }
            unieap.Action.requestData({
                url: unieap.WEB_APP_NAME + this.CACHEURL,
                sync: false,
                parameters: {
                    mode: mode
                },
                load: function (dc) {

                    var serverTimeStamps = dc.getParameter('timeStamps');
                    var keys = [];
                    var values = [];
                    var stamps = [];
                    for (var name in dc.dataStores) {
                        var ds = dc.dataStores[name];
                        keys.push(name);
                        values.push(ds.getRowSet().toBufJson("primary"));
                        stamps.push(serverTimeStamps[name]);
                    }
                    unieap.cache.putMultiple(keys, values, stamps);
                    loading.style.visibility = "hidden";
                    callback && callback();
                },
                timeout: 5000,
                error: function (text) {
                    //loading.innerHTML="装载缓存数据失败。";
                    loading.innerHTML = RIA_I18N.rpc.loadCacheError;
                }
            }, dc, false);
        },

        /**
         * @summary:
         * 		提交带有FileInput控件的表单
         * @description:
         * 		本方法要求服务器返回具有特定格式的数据，否则前台会提示错误。
         * 		数据格式为::<textarea>+json+</textarea>,例如 "<textarea>{name:'jack'}</textarea>"。
         * @param:
         * 		{object} obj 
         * @example:
         * |	<form dojoType="unieap.form.Form" enctype="multipart/form-data" method="post">
         * |		<div dojoType="unieap.form.TextBox" name="age"></div>
         * |		<div dojoType="unieap.form.FileInput" name="yourFile"></div>
         * |	</form>
         * |	function success(res,args){console.info(arguments);}
         * |	function error(res,args){console.info(arguments);}
         * |	${1}var args={
         * |		${2}url:'/application/demo.do',
         * |		${3}load:success,
         * |		${4}error:error,
         * |		${5}timeout:2000,
         * |		${6}parameters:{'dc':new unieap.ds.DataCenter().toJson()}
         * |	};
         * |	unieap.Action.upload(args);
         * ${1}上传的参数
         * ${2}提交路径
         * ${3}成功后的回调
         * ${4}失败后的回调，包括url不存在、超时等状况
         * ${5}设置超时的时间
         * ${6}额外的参数（可以传DataCenter数据，后台通过request.getParameter方式来获取）
         */
        upload: function (obj, showLoading) {
            dojo.require("dojo.io.iframe");
            obj.parameters = obj.parameters || {};
            var _dc = null;
            var url = obj.url || "";
            url = unieap.buildRequestPath(url, {
                ajaxRequest: true
            });
            if (showLoading) {
                unieap.showXhrLoading(true);
            }
            dojo.io.iframe.send({
                url: url || "",
                handleAs: 'json',
                form: obj.form || "",
                timeout: obj.timeout || 1000 * 120, //12s后超时
                content: obj.parameters,
                load: function (res, args) {
                    var json = res;
                    if (showLoading) {
                        unieap.showXhrLoading(false);
                    }
                    try {
                        json = dojo.fromJson(res);
                    } catch (e) {}

                    function complete() {
                        if (obj.load) {
                            try {
                                obj.context ? obj.load.call(obj.context, _dc, args.xhr) : obj.load(_dc, args.xhr);
                            } catch (e) {
                                //alert("请求数据成功！但回调方法出错；请检查自定义load回调函数。\n "+dojo.toJson(e,true));
                                doAfterFailedCustomLoad();
                                alert(RIA_I18N.rpc.loadError + "\n " + dojo.toJson(e, true));
                            }
                        }
                    }
                    try {
                        json.body.dataStores; //确定返回来的是否为DataCenter格式的Json对象
                        _dc = new unieap.ds.DataCenter(json);

                        //异常处理
                        if (_isExceptionControl()) {
                            if (_dc.getCode() < 0) {
                                obj.error(res);
                                return;
                            } else {
                                var dc = obj.dc || globalDataCenter;
                                dc.append(_dc, obj.coverage || "discard");

                                if (_dc.getCode() > 0) {
                                    dojo.require("unieap.dialog.MessageBox");
                                    MessageBox.alert({
                                        // 成功提示
                                        title: RIA_I18N.rpc.success,
                                        // message : _dc.getTitle() || "请求操作成功" ,
                                        message: _dc.getTitle() || RIA_I18N.rpc.successMessage,
                                        onComplete: complete
                                    });
                                }
                            }
                        } else {
                            if (_exceptionProcess(json, obj, _dc, complete)) {
                                return;
                            }
                        }
                    } catch (e) {
                        _dc = json;
                    }
                    complete();
                },
                error: function (res, args) {
                    if (showLoading) {
                        unieap.showXhrLoading(false);
                    }
                    obj.error && dojo.hitch(obj, obj.error(res, args));
                }
            });
        },
        /*
         * @summary:
         * 		构造导出表头
         * @param：
         * 		{menu} mode 
         * 		递归筛选表头信息 避免导出错误
         * @param:
         * 		{function} args 数组
         */
        careatLayout: function (args) {
            var views = args;
            var newArr = [],
                newObj = {};
            dojo.forEach(views, function (view2) {
                newObj = view2;
                view2.label = view2.label;
                view2['id'] = view2['name'];
                if (view2['hidden']) {
                    return
                } //如果有hidden就隐藏表头不给后台传
                if (view2.width == 'NaNpx' || view2.width == NaN) { //防止宽度为auto
                    view2.width = 200;
                } else {
                    if (view2.width && typeof (view2.width) == "string") { //如果是带px和百分比的 重新改变宽度
                        view2.width = view2.width.replace('px', '');
                        view2.width = view2.width.replace('%', '0');
                    }
                    if (view2.width && view2.width != 1 && view2.width < 40) { //防止特别情况表头宽度过于窄 导致导出的表格出问题
                        view2.width = (view2.width).toString() + '0';
                    }
                }
                if (view2['dataFormat'] === 'yyyy-MM-dd') {
                    view2['dataType'] = 'date'
                }

                if (view2['colSpan'] == undefined) {
                    view2['colSpan'] = 1;
                }
                if (view2.styles) {
                    view2 = unieap.Action.setAlignStyle(view2);
                }
                if (view2['decoder']) { //防止decoder是null 后台会报错
                    for (var decoderKey in view2['decoder']) {
                        if (view2['decoder'][decoderKey] == null || view2['decoder'][decoderKey] == 'null' || decoderKey == 'null' ||
                            decoderKey == null) {
                            delete view2['decoder'][decoderKey];
                        }
                    }
                }
                if (view2['childs'] && view2['childs'].length > 0) {
                    newObj.childs = unieap.Action.careatLayout(view2.childs);
                }
                if (view2.width > 5 && !view2.hidden) {
                    newArr.push(newObj);

                }


            })
            return newArr;
        },
        /*
         * @summary:
         * 		筛选表头是否有自己定义的文字对齐方式
         * @param：
         * 		{menu} mode 
         * 		筛选表头是否有自己定义的文字对齐方式
         * @param:
         * 		{function} data  表头cell值
         */
        setAlignStyle: function (data) {
            var align = '';
            if (data.styles.indexOf(':center') > 9 || data.styles.indexOf(': center') > 9) {
                align = 'center';
            } else if (data.styles.indexOf(':left') > 9 || data.styles.indexOf(': left') > 9) {
                align = 'left';
            } else if (data.styles.indexOf(':right') > 9 || data.styles.indexOf(': right') > 9) {
                align = 'right';
            }
            if (!data.displayFormatter) {
                data['displayFormatter'] = {};
            }
            data.displayFormatter['align'] = align;
            return data
        },
        /*
         * @summary:
         * 		筛选表头信息判断表头是否有子元素
         * @param：
         * 		{menu} mode 
         * 		筛选表头信息判断表头是否有子元素
         * @param:
         * 		{function} args 数组
         */
        hasChilds: function (structures) {
            var returnTrue = false;
            for (var i = 0; i < structures.length; i++) {
                if (structures[i]['childs']) {
                    returnTrue = true;
                    break;
                }
            }
            return returnTrue

        },
        /*
         * @summary:
         * 		如果是多表头  并且structure参数有误 就重新创建关联多表头
         * @param：
         * 		{menu} mode 
         * 		筛选表头信息判断表头是否有子元素
         * @param:
         * 		{function} args 数组
         */
        careatNewLayout: function (layout) {
            var delHtmlTag = function (str) { //删除表头html标签 和替换E标签
                return str.replace(/<[^>]+>/g, "").replace("(E)", "").replace("*", "");
            }
            var newArr = new Array();
            $.each(layout, function (i, layout1) { //判断laout的宽度是否有px  如果有px去掉px 
                $.each(layout1, function (j, layout2) {
                    if (layout2.length > 0) { //判断是否是多层表头 如果是多层表头 首层加处理
                        $.each(layout2, function (p, newArrChild) {
                            if (newArrChild['colSpan'] > 1 || newArrChild['isMulTitle']) {
                                newArrChild['childs'] = [];
                            }
                            var isChild = false;
                            var idx = 0;
                            $.each(newArr, function (q, arrChild) { //避免固定表头layout进来数据分三列 导致计算多表头错误
                                if (arrChild['colSpan'] > 1 && arrChild['childs'].length < arrChild['colSpan'] && j > 0) {
                                    isChild = true;
                                    arrChild['childs'].push(newArrChild);
                                    return false
                                }
                            })


                            !isChild && newArr.push(newArrChild);
                        })
                    }
                    $.each(layout2, function (k, layout3) {
                        layout3['id'] = layout3['name'];
                        layout3['label'] = delHtmlTag(layout3['label']);
                        if (layout3.width == 'NaNpx' || layout3.width == NaN) { //防止宽度为auto
                            layout3.width = 200;
                        } else {
                            if (layout3.width && typeof (layout3.width) == "string") { //如果是带px和百分比的 重新改变宽度
                                layout3.width = layout3.width.replace('px', '');
                                layout3.width = layout3.width.replace('%', '0');
                            }
                            if (layout3.width && layout3.width != 1 && layout3.width < 40) { //防止特别情况表头宽度过于窄 导致导出的表格出问题
                                layout3.width = (layout3.width).toString() + '0';
                            }

                        }

                        if (layout3['colSpan'] == undefined) {
                            layout3['colSpan'] = 1;
                        }
                        if (layout3['dataFormat'] === 'yyyy-MM-dd') {
                            layout3['dataType'] = 'date'
                        }
                        if (layout3.styles) {
                            layout3 = unieap.Action.setAlignStyle(layout3);
                        }
                        if (layout3['decoder']) { //防止decoder是null 后台会报错
                            for (x in layout3['decoder']) {
                                if (layout3['decoder'][x] == null || layout3['decoder'][x] == 'null') {
                                    delete layout3['decoder'][x];
                                }
                            }
                        }
                        if (newArr.length > 0 && newArr.indexOf(layout3) == -1) { //增加到头部下面的childs里面 分离表格层级
                            $.each(newArr, function (q, layout4) {
                                if (layout4['colSpan'] > 1 && (layout4['childs'].length < layout4['colSpan'])) {
                                    layout4['childs'].push(layout3);
                                    return false
                                }
                            })
                        }

                    })
                })
            });

            if (newArr.length > 0) {
                layout = newArr;
            }
            return layout
        },
        /*
         * @summary:
         * 		如果是多表头  并且structure参数有误 并且layout起码超过3层 递归重构表头
         * @param：
         * 		{menu} mode 
         * 		筛选表头信息判断表头是否有子元素
         * @param:
         * 		{function} args 数组
         */
        setNewLayout: function (layout) {
            var newLayout = layout[0]
            var getChildLength = function(parent){
                var length = 0
                parent.childs.forEach(function(item,index){
                   length += item.colSpan
                })
                return length
            }
            var setLayoutForEach = function (parent, childs) {
                for (var i = 0; i < parent.length; i++) {
                    for (var k = 0; k < childs.length; k++) {
                        childs[k] = clearLayOut(childs[k])
                        if (parent[i]['isMulTitle'] && !parent[i]['childs']) {
                            parent[i]['childs'] = [];
                            parent[i]['colSpan'] = parent[i]['colSpan'] ? parent[i]['colSpan'] : 1;
                        }
                        if (parent[i]['colSpan'] && getChildLength(parent[i]) < parent[i]['colSpan']) {
                            if (!childs[k]['updateParent']) {
                                parent[i]['childs'].push(childs[k]);
                                childs[k]['updateParent'] = true;
                            }
                        }
                    }
                }
                return parent
            }
            var clearLayOut = function (layout3) {
                var delHtmlTag = function (str) { //删除表头html标签 和替换E标签
                    return str.replace(/<[^>]+>/g, "").replace("(E)", "").replace("*", "");
                }
                layout3['id'] = layout3['name'];
                layout3['label'] = delHtmlTag(layout3['label']);
                if (layout3.width == 'NaNpx' || layout3.width == NaN) { //防止宽度为auto
                    layout3.width = 200;
                } else {
                    if (layout3.width && typeof (layout3.width) == "string") { //如果是带px和百分比的 重新改变宽度
                        layout3.width = layout3.width.replace('px', '');
                        layout3.width = layout3.width.replace('%', '0');
                    }
                    if (layout3.width && layout3.width != 1 && layout3.width < 40) { //防止特别情况表头宽度过于窄 导致导出的表格出问题
                        layout3.width = (layout3.width).toString() + '0';
                    }

                }
                if (layout3['colSpan'] == undefined) {
                    layout3['colSpan'] = 1;
                }
                if (layout3['dataFormat'] === 'yyyy-MM-dd') {
                    layout3['dataType'] = 'date'
                }
                if (layout3.styles) {
                    layout3 = unieap.Action.setAlignStyle(layout3);
                }
                if (layout3['decoder']) { //防止decoder是null 后台会报错
                    for (x in layout3['decoder']) {
                        if (layout3['decoder'][x] == null || layout3['decoder'][x] == 'null') {
                            delete layout3['decoder'][x];
                        }
                    }
                }
                return layout3
            };
            for (var i = newLayout.length - 1; i != -1; i--) {
                if (i == 0) {
                    for (var k = 0; k < newLayout[i].length; k++) {
                        newLayout[i][k] = clearLayOut(newLayout[i][k]);

                    }
                }
                if (i - 1 >= 0) {
                    setLayoutForEach(newLayout[i - 1], newLayout[i]);
                }
            }
            return newLayout
        },
        trClick: function (type) {
            var changeDoms = function(isChecked,doms){
                for (var i = 0; i < doms.length; i++) {
                    if (!isChecked) {
                        doms[i].style.display = 'none';
                        doms[i].style.visibility = 'hidden';
                    } else {
                        doms[i].style.display = 'table-row';
                        doms[i].style.visibility = 'visible';
                    }
                }
            }
           
            var chickedId;
            var checkedTypes =parent.window.document.getElementsByName('checkedType') || document.getElementsByName('checkedType');
            if(checkedTypes&&checkedTypes.length>0){
                dojo.forEach(checkedTypes,function(item,index){
                    if(item.checked){
                        chickedId = item.id;
                    }
                })
            }
             
           
            switch (chickedId){
                case 'checkedTypeExl': //excel
                changeDoms(true,document.getElementsByClassName('splitPageRowsTr'))
                changeDoms(false, document.getElementsByClassName('exportDialogPrintTr'))
                var isChicked = document.getElementById('splitPageTrue')&&document.getElementById('splitPageTrue').checked;
                changeDoms(isChicked,document.getElementsByClassName('splitPageRowsNub'))
                changeDoms(true,document.getElementsByClassName('exportNoCsv'))
              
                break
                case 'checkedTypePdf' ://PDF
                changeDoms(true,document.getElementsByClassName('exportDialogPrintTr'))
                changeDoms(false,document.getElementsByClassName('splitPageRowsTr'))
                changeDoms(false, document.getElementsByClassName('splitPageRowsNub'))
                changeDoms(true,document.getElementsByClassName('exportNoCsv'))
                break;
                case 'checkedTypeCSV' ://csv
                changeDoms(false,document.getElementsByClassName('splitPageRowsTr'))
                changeDoms(false,document.getElementsByClassName('exportDialogPrintTr'))
                changeDoms(false, document.getElementsByClassName('splitPageRowsNub'))
                changeDoms(false,document.getElementsByClassName('exportNoCsv'))
                break;
                case 'SimpleExport'://简单exl
                 changeDoms(false,document.getElementsByClassName('exportDialogPrintTr'))
                 changeDoms(true,document.getElementsByClassName('splitPageRowsTr'))
                 changeDoms(false, document.getElementsByClassName('splitPageRowsNub'))
                 changeDoms(true,document.getElementsByClassName('exportNoCsv'))
                break
                default : //打印
                changeDoms(true,document.getElementsByClassName('exportDialogPrintTr'))
                changeDoms(false,document.getElementsByClassName('splitPageRowsTr'))
                changeDoms(false, document.getElementsByClassName('splitPageRowsNub'))
                changeDoms(true,document.getElementsByClassName('exportNoCsv'))
                break
            }
           
                
           

        },
        /*
         * @summary:
         * 		创建导出dialog里面的html内容
         * @param：
         * 		{menu} mode 
         * 		传递进来导出文件默认显示框
         * @param:
         * 		{function} args 数组
         */
        careatExporeatDialo: function (fileName, options, type) {


            var dom = '<div class="u-xdlg-mmm" dojoattachpoint="dialogMiddleMain">' +
                '<div class="u-xdlg-mmf" dojoattachpoint="dialogMain" style="height:100%">' +
                '<div class="u-xdlg-mmc" dojoattachpoint="dialogMainContent" id="xdialog_import" xhr="true" style="overflow: auto; position: relative; padding-bottom: 52px;">' +
                '<div class="content_d" style="overflow: scroll;" id="xdialog_xdialog_exsportNameLog">' +
                '<div>' +
                '<div dojoattachpoint="inputNode,focusNode" style="overflow:hidden;width:100%;zoom:100%;"id="xdialog_importimportTypeRadio_unieap_input" style="padding-left: 25px;">' +
                '<table class="u-form-chkGroup-tab">' +
                '<tbody>'
            if (type == 'server') {
                dom += '<tr style="height:45px;">' +
                    '<td align="center">导出类型:</td>' +
                    '<td align="center" class="u-form-chkGroup-cell">' +
                    '<div class="u-form-rdoBtn">' +
                    '<div class="u-form-modified" style="display: none;"></div>' +
                    '<input class="export-chekcInput" type="radio" name="checkedExport"   checked="checked" id="checkedExport" /><label></label>' +
                    '</div></td>' +
                    '<td class="u-form-chkGroup-label-td" align="left"><label for="checkedExport" class="u-form-chkGroup-label">全部导出</label></td>' +
                    '<td align="center" class="u-form-chkGroup-cell">' +
                    '<div class="u-form-rdoBtn">' +
                    '<div class="u-form-modified" style="display: none;"></div>' +
                    '<input  class="export-chekcInput" type="radio" name="checkedExport"  id="checkedExportForNow"  /><label></label>' +
                    '</div> </td>' +
                    '<td class="u-form-chkGroup-label-td" align="left">' +
                    '<label class="u-form-chkGroup-label" for="checkedExportForNow">当前页面导出</label></td>' +

                    '</tr>'
            }

            dom +=

                '<tr style="height:45px;" onClick="unieap.Action.trClick()">' +
                '<td align="center">文件类型:</td>' +
                '<td align="left" colSpan="8">'+
                 '<label   class="u-form-chkGroup-label" for="checkedTypeExl" style="width:80px">' +
                '<input  class="export-chekcInput" type="radio" name="checkedType" value="right" style="margin-right:3px"  checked  id="checkedTypeExl"  />EXCEL</label>' +

                // '<label   class="u-form-chkGroup-label" for="SimpleExport" style="width:100px">' +
                // '<input  class="export-chekcInput" type="radio" name="checkedType" value="right" style="margin-right:3px"  id="SimpleExport"  />简单EXCEL</label>' +

                '<label   class="u-form-chkGroup-label" for="checkedTypeCSV" style="width:80px">' +
                '<input  class="export-chekcInput" type="radio" name="checkedType" value="right" style="margin-right:3px"   id="checkedTypeCSV"  />CSV</label>' +
                
                '<label   class="u-form-chkGroup-label" for="checkedTypePdf" style="width:80px">' +
                '<input  class="export-chekcInput" type="radio" name="checkedType" value="right"  id="checkedTypePdf" style="margin-right:3px"  />PDF</label>' +

                '<label   class="u-form-chkGroup-label" for="checkedTypePrint" style="width:80px" >' +
                '<input  class="export-chekcInput" type="radio" name="checkedType" value="right"  id="checkedTypePrint"  style="margin-right:3px"  />打印</label>' +
               
                '</td>'+
            
                '</tr>' +


                '<tr style="height:45px;"  id="splitPageRowsTr" onClick="unieap.Action.trClick(true)"  class="splitPageRowsTr">' +
                '<td align="center">分页导出:</td>' +
                '<td align="center" class="u-form-chkGroup-cell">' +
                '<div class="u-form-rdoBtn">' +
                '<div class="u-form-modified" style="display: none;"></div>' +
                '<input  class="export-chekcInput" type="radio" name="splitPage"  checked="checked"  id="splitPageRowsFalse"  /><label></label>' +
                '</div> </td>' +
                '<td class="u-form-chkGroup-label-td" align="left">' +
                '<label class="u-form-chkGroup-label" for="splitPageRowsFalse">否</label></td>' +
                '<td align="center" class="u-form-chkGroup-cell">' +
                '<div class="u-form-rdoBtn">' +
                '<div class="u-form-modified" style="display: none;"></div>' +
                '<input class="export-chekcInput" type="radio" name="splitPage"   id="splitPageTrue" /><label></label>' +
                '</div></td>' +
                '<td class="u-form-chkGroup-label-td" align="left"><label for="splitPageTrue" class="u-form-chkGroup-label">是</label></td>' +
                '</tr>' +

                '<tr style="height:45px; display:none;visibility: hidden;" id="splitPageRowsNub"  class="splitPageRowsNub" >' +
                '<td align="center">分页条数:</td>' +
                '<td align="center" class="u-form-chkGroup-cell" colspan="2">' +
                '<div dojoattachpoint="fieldNode" class="u-form-field u-form-file-required-error" style="width:180px;">' +
                '<div dojoattachpoint="modifiedNode" style="visibility:hidden" class="u-form-modified"></div>' +
                '<div dojoattachpoint="errorNode" class="u-form-error" style="display: none;"></div>' +
                '<div class="u-form-textbox-field">' +
                '<input dojoattachpoint="inputNode,focusNode,hoverNode" value="5000" class="u-form-textbox-input u-form-textbox-input-required"  autocomplete="off" ;maxlength="20" dojoattachpoint="spitPageRows" id="spitPageRows" style="text-align: left;" /></div>' +
                '</div></td></tr>' +


                '<tr style="height:45px;" >' +
                '<td align="center">文件名称:</td>' +
                '<td align="center" class="u-form-chkGroup-cell" colspan="2">' +
                '<div dojoattachpoint="fieldNode" class="u-form-field u-form-file-required-error" style="width:180px;">' +
                '<div dojoattachpoint="modifiedNode" style="visibility:hidden" class="u-form-modified"></div>' +
                '<div dojoattachpoint="errorNode" class="u-form-error" style="display: none;"></div>' +
                '<div class="u-form-textbox-field">' +
                '<input dojoattachpoint="inputNode,focusNode,hoverNode" value="' + fileName +
                '" class="u-form-textbox-input u-form-textbox-input-required"  autocomplete="off" ;maxlength="20" dojoattachpoint="exportFileName" id="exportFileName" style="text-align: left;" /></div>' +
                '</div></td></tr>' +


                '<tr style="height:45px; display:none;visibility: hidden;" class="exportDialogPrintTr" >' +
                '<td align="center">方向设置:</td>' +
                '<td align="center" class="u-form-chkGroup-cell">' +
                '<div class="u-form-rdoBtn">' +
                '<div class="u-form-modified" style="display: none;"></div>' +
                '<input  class="export-chekcInput" type="radio" name="landscape"  checked="checked"  id="landscapeTrue"   /><label></label>' +
                '</div> </td>' +
                '<td class="u-form-chkGroup-label-td" align="left">' +
                '<label class="u-form-chkGroup-label" for="landscapeTrue">是</label></td>' +
                '<td align="center" class="u-form-chkGroup-cell">' +
                '<div class="u-form-rdoBtn">' +
                '<div class="u-form-modified" style="display: none;"></div>' +
                '<input class="export-chekcInput" type="radio" name="landscape"   id="landscapeFalse" /><label></label>' +
                '</div></td>' +
                '<td class="u-form-chkGroup-label-td" align="left"><label for="landscapeFalse" class="u-form-chkGroup-label">否</label></td>' +
                '</tr>' +


                '<tr style="height:45px; display:none;visibility: hidden;" class="exportDialogPrintTr" >' +
                '<td align="center">纸张设置:</td>' +
                '<td align="center" class="u-form-chkGroup-cell" colspan="2">' +
               
                '<select id="paperkind">'+
                    '<option checked value="A4">A4</option>'+
                    '<option value="A3">A3</option>'+
                    '<option value="h95">三联单（243*95）</option>'+
                    '<option value="h200">三联单（243*280）</option>'+
                '</select> ' +
            
                '</td></tr>' +
                
                '<tr style="height:45px; display:none;visibility: hidden;" class="exportDialogPrintTr" >' +
                '<td align="center">水平压缩:</td>' +
                '<td align="center" class="u-form-chkGroup-cell">' +
                '<div class="u-form-rdoBtn">' +
                '<div class="u-form-modified" style="display: none;"></div>' +
                '<input  class="export-chekcInput" type="radio" name="horizontalCompress"  checked="checked"  id="horizontalCompress"   /><label></label>' +
                '</div> </td>' +
                '<td class="u-form-chkGroup-label-td" align="left">' +
                '<label class="u-form-chkGroup-label" for="horizontalCompress">否</label></td>' +
                '<td align="center" class="u-form-chkGroup-cell">' +
                '<div class="u-form-rdoBtn">' +
                '<div class="u-form-modified" style="display: none;"></div>' +
                '<input class="export-chekcInput" type="radio" name="horizontalCompress"  id="horizontalCompressTrue" /><label></label>' +
                '</div></td>' +
                '<td class="u-form-chkGroup-label-td" align="left"><label for="horizontalCompressTrue" class="u-form-chkGroup-label">是</label></td>' +
                '</tr>' +
               

                '<tr style="height:45px;" class="exportNoCsv" >' +
                '<td align="center">页眉设置:</td>' +
                '<td align="center" class="u-form-chkGroup-cell">' +
                '<div class="u-form-rdoBtn">' +
                '<div class="u-form-modified" style="display: none;"></div>' +
                '<input  class="export-chekcInput" type="radio" name="titleAlign" title="居左" id="exportTitleLeft" value="left"/><label></label>' +
                '</div>' +
                '</td>' +
                '<td class="u-form-chkGroup-label-td" align="left">' +
                '<label for="exportTitleLeft" class="u-form-chkGroup-label">居左</label>' +
                '</td>' +
                '<td align="center" class="u-form-chkGroup-cell">' +
                '<div class="u-form-rdoBtn">' +
                '<div class="u-form-modified" style="display: none;"></div>' +
                '<input  class="export-chekcInput" type="radio" name="titleAlign" checked="checked" value="center"  id="exportTitleCenter" title="居中" />' +
                '<label></label>' +
                '</div>' +
                '</td>' +
                '<td class="u-form-chkGroup-label-td" align="left"><label class="u-form-chkGroup-label" for="exportTitleCenter">居中</label>' +
                '</td>' +
                '<td align="left" class="u-form-chkGroup-cell">' +
                '<div class="u-form-rdoBtn" style="width:50px">' +
                '<div class="u-form-modified" style="display: none;"></div>' +
                '<label   class="u-form-chkGroup-label" for="exportTitleRight">' +
                '<input  class="export-chekcInput" type="radio" name="titleAlign" value="right"  id="exportTitleRight" title="居右" />居右</label>' +
                '</div>' +
                '</td>' +
                '<td class="u-form-chkGroup-label-td" align="left">' +
                '</td>' +
                '<td>&nbsp;</td>' +
                '<td>&nbsp;</td>' +
                '</tr>' +


                '<tr style="height:45px;">' +
                '<td align="center">页眉名称:</td>' +
                '<td align="center" class="u-form-chkGroup-cell" colspan="2">' +
                '<div dojoattachpoint="fieldNode" class="u-form-field u-form-file-required-error" style="width:180px;">' +
                '<div dojoattachpoint="modifiedNode" style="visibility:hidden" class="u-form-modified"></div>' +
                '<div dojoattachpoint="errorNode" class="u-form-error" style="display: none;"></div>' +
                '<div class="u-form-textbox-field">' +
                '<input dojoattachpoint="inputNode,focusNode,hoverNode" value=' + fileName +
                ' class="u-form-textbox-input u-form-textbox-input-required"  autocomplete="off" ;maxlength="20" dojoattachpoint="exportTitleName"  id="exportTitleName" style="text-align: left;" />' +
                '</div>' +
                '</div>' +
                '</td>' +
                '<td></td>' +
                '<td></td>' +
                '<td></td>' +
                '<td></td>' +
                '</tr>' +
                '<tr style="height:45px;" class="exportNoCsv">' +
                '<td align="center">页脚设置:</td>' +
                '<td align="center" class="u-form-chkGroup-cell">' +
                '<div class="u-form-rdoBtn">' +
                '<div class="u-form-modified" style="display: none;"></div>' +
                '<input varlue="left" class="export-chekcInput" type="radio" name="footerAlign" title="居左" id="exportfooterLeft" /><label></label>' +
                '</div>' +
                '</td>' +
                '<td class="u-form-chkGroup-label-td" align="left">' +
                '<label for="exportfooterLeft" class="u-form-chkGroup-label">居左</label>' +
                '</td>' +
                '<td align="center" class="u-form-chkGroup-cell">' +
                '<div class="u-form-rdoBtn">' +
                '<div class="u-form-modified" style="display: none;"></div>' +
                '<input class="export-chekcInput" type="radio" name="footerAlign" id="exportFooterCenter" value="center" title="居中" /><label></label>' +
                '</div>' +
                '</td>' +
                '<td class="u-form-chkGroup-label-td" align="left">' +
                '<label class="u-form-chkGroup-label" for="exportFooterCenter">居中</label>' +
                '</td>' +
                '<td align="left" class="u-form-chkGroup-cell">' +

                '<div class="u-form-rdoBtn" style="width:50px">' +
                '<div class="u-form-modified" style="display: none;"></div>' +
                '<label   class="u-form-chkGroup-label" for="exportFooterRight">' +
                '<input  class="export-chekcInput" type="radio" name="footerAlign" checked="checked"  id="exportFooterRight" title="居右" value="right"/>居右</label>' +
                '</div>' +
                '</td>' +
                '<td class="u-form-chkGroup-label-td" align="left">' +

                '</td>' +
                '<td>&nbsp;</td>' +
                '<td>&nbsp;</td>' +
                '</tr>' +
                '<tr style="height:45px;" class="exportNoCsv">' +
                '<td align="center">页脚名称:</td>' +
                '<td align="center" class="u-form-chkGroup-cell" colspan="4">';
                var getApp = window.app || top.window.app;
                if(getApp){
                    dom +='<div class="u-form-rdoBtn" style="width:78px">' +
                    '<div class="u-form-modified" style="display: none;"></div>' +
                    '<label   class="u-form-chkGroup-label" for="exportFooterHospitalName">' +
                    '<input  class="export-chekcInput" type="checkbox" name="exportFooterHospitalName" checked="checked"  id="exportFooterHospitalName" title="组织名称" value="right"/>组织名称</label>' +
                    '</div>' +
                    '<div class="u-form-rdoBtn" style="width:78px">' +
                    '<div class="u-form-modified" style="display: none;"></div>' +
                    '<label   class="u-form-chkGroup-label" for="exportFooterSetName">' +
                    '<input  class="export-chekcInput" type="checkbox" name="exportFooterSetName" checked="checked"  id="exportFooterSetName" title="账套名称" value="right"/>账套名称</label>' +
                    '</div>' +
                    '<div class="u-form-rdoBtn" style="width:78px">' +
                    '<div class="u-form-modified" style="display: none;"></div>' +
                    '<label   class="u-form-chkGroup-label" for="exportFooterUser">' +
                    '<input  class="export-chekcInput" type="checkbox" name="exportFooterUser" checked="checked"  id="exportFooterUser" title="登录用户" value="right"/>登录用户</label>' +
                    '</div>' 
                }
                
                dom += '<div class="u-form-rdoBtn" style="width:78px">' +
                '<div class="u-form-modified" style="display: none;"></div>' +
                '<label   class="u-form-chkGroup-label" for="exportFooterCampany">' +
                '<input  class="export-chekcInput" type="checkbox"  checked="checked" name="exportFooterCampany"  id="exportFooterCampany" title="望海康信" value="right"/>望海康信</label>' +
                '</div>' +
                '</td>' +
                '</tbody> </table></div></div></div>' +
                '<div class="fixed_buttons" id="xdialog_exsportName"><a href="javascript:void(0);" class="u-form-btn-outer" tabindex="-1" style="text-decoration:none;vertical-align:middle;">' +
                '<button type="button" class="u-form-btn" dojoattachpoint="focusNode, inputNode,btnNode"  onclick="unieap.getXDialog().close()" accesskey="">' +
                '<table style="display:inline-block">' +
                '<tbody>' +
                '<tr>' +





                '<td dojoattachpoint="iconNode"></td>' +
                '<td class="u-form-btn-txt" dojoattachpoint="labelNode">取消</td>' +
                '</tr>' +
                '</tbody>' +
                '</table>' +
                '</button></a>' +
                '<a href="javascript:void(0);" class="u-form-btn-outer btn-primary" tabindex="-1"  style="text-decoration:none;vertical-align:middle;"><button type="button" class="u-form-btn"  dojoattachpoint="focusNode, inputNode,btnNode" onclick="unieap.getXDialog().onComplete(1)" id="xdialog_importbutton1_unieap_input" accesskey="">' +
                '<table style="display:inline-block">' +
                '<tbody>' +
                '<tr>' +
                '<td dojoattachpoint="iconNode"></td>' +
                '<td class="u-form-btn-txt" dojoattachpoint="labelNode">确定</td>' +
                '</tr>' +
                '</tbody>' +
                '</table>' +
                '</button></a></div>' +
                '</div>' +
                '</div>' +
                '<div class="u-xdlg-mmb" style="display: none;" align="cen" off";maxlength="20" id="exportFileName" style="text-align: left;" />' +
                '</div></div>' +
                '</td>' +
                '<td></td><td></td><td></td><td></td></tr></tbody> </table></div></div></div>' +
                '<div class="fixed_buttons" id="xdialog_exsportName"><a href="javascript:void(0);" class="u-form-btn-outer" tabindex="-1" style="text-decoration:none;vertical-align:middle;">' +
                '<button type="button" class="u-form-btn" dojoattachpoint="focusNode, inputNode,btnNode" onclick="unieap.getXDialog().close()" accesskey="">' +
                '<table style="display:inline-block">' +
                '<tbody>' +
                '<tr>' +
                '<td dojoattachpoint="iconNode"></td>' +
                '<td class="u-form-btn-txt" dojoattachpoint="labelNode">取消</td>' +
                '</tr>' +


                '</tbody>' +
                '</table>' +
                '</button></a>' +
                '<a href="javascript:void(0);" class="u-form-btn-outer btn-primary" tabindex="-1"  style="text-decoration:none;vertical-align:middle;">' +
                '<button type="button" class="u-form-btn"  dojoattachpoint="focusNode, inputNode,btnNode" onclick="unieap.getXDialog().onComplete(1)" id="xdialog_importbutton1_unieap_input" accesskey="">' +
                '<table style="display:inline-block">' +
                '<tbody>' +
                '<tr>' +
                '<td dojoattachpoint="iconNode"></td>' +
                '<td class="u-form-btn-txt" dojoattachpoint="labelNode">确定</td>' +
                '</tr>' +
                '</tbody>' +
                '</table>' +
                '</button></a></div>' +
                '</div>' +
                '</div>' +
                '<div class="u-xdlg-mmb" style="display: none;" align="center" dojoattachpoint="dialogMiddleButton"></div>' +
                '</div>'

            return dom
        },

        //   page页面load的时候 设置当前表格导出默认信息  不设置有默认值 
        // unieap.byId('grid1').ExportManager.details = {{
        //     title:{
        //         align:'center',
        //         value:'辅助明细账',
        //         fontName:"宋体",
        //         fontSize:25,
        //         fontWeight:700
        //     },
        //     body:[],
        //     footer:[
        //         { 
        //         align:'right',
        //         value:'望海康信',
        //         fontName:"宋体",
        //         fontSize:25,
        //         fontWeight:700 
        //   }
        //  ]    
        // }
        aboutExport: {

            careatExportDom: function (id, title) {

                var grid = unieap.byId(id);
                var details = null;
                var obj = {};
                var htmlDom = '';
                var getApp = window.app || top.window.app;
                if (grid.ExportManager && grid.ExportManager.details) {
                    details = grid.ExportManager.details;
                }
                if (!details) {
                    htmlDom =
                        '<option value ="campany">望海康信</option><option value ="user">登录用户</option><option value="hospitalName">医院名称</option>'
                    if (getApp&&getApp.getContextInfo() && getApp.getContextInfo().copy && JSON.stringify(getApp.getContextInfo().copy.name) !=
                        '{}') {
                        htmlDom += '<option value="setName">账套名称</option>'
                    }
                    obj = {
                        title: {
                            align: 'center',
                            value: title
                        },
                        footer: {
                            align: 'right',
                            value: htmlDom
                        }
                    }

                } else {
                    obj.title = details.title;
                    obj.footer = {};
                    obj.fo

                }

                return obj
            },
            careatExportData: function (id) {
                var obj = {};
                var titleAlign = document.getElementsByName("titleAlign").length != 0 ? document.getElementsByName("titleAlign") :
                    parent.window.document.getElementsByName('titleAlign');
                var footerAlign = document.getElementsByName("footerAlign").length != 0 ? document.getElementsByName(
                    "footerAlign") : parent.window.document.getElementsByName('footerAlign');
                var titleDom = document.getElementById("exportTitleName") || parent.window.document.getElementById(
                    'exportTitleName');
                for (var i = 0; i < titleAlign.length; i++) {
                    if (titleAlign[i].checked) {
                        var titleTextAlign = titleAlign[i].value;
                    }
                }
                for (var i = 0; i < footerAlign.length; i++) {
                    if (footerAlign[i].checked) {
                        var footerTextAlign = footerAlign[i].value;
                    }
                }
                var footerList = [];
                var campany = document.getElementById('exportFooterCampany') || parent.window.document.getElementById(
                    'exportFooterCampany');
                var user = document.getElementById('exportFooterUser') || parent.window.document.getElementById(
                    'exportFooterUser');
                var hospitalName = document.getElementById('exportFooterHospitalName') || parent.window.document.getElementById(
                    'exportFooterHospitalName');
                var setName = document.getElementById('exportFooterSetName') || parent.window.document.getElementById(
                    'exportFooterSetName');
                var splitPageTrue  = document.getElementById('splitPageTrue') || parent.window.document.getElementById(
                    'splitPageTrue');
                var getApp = window.app || top.window.app;
                var getNowFormatDate = function () {
                    var date = new Date();
                    var seperator1 = "-";
                    var year = date.getFullYear();
                    var month = date.getMonth() + 1;
                    var strDate = date.getDate();
                    if (month >= 1 && month <= 9) {
                        month = "0" + month;
                    }
                    if (strDate >= 0 && strDate <= 9) {
                        strDate = "0" + strDate;
                    }
                    var currentdate = year + seperator1 + month + seperator1 + strDate;
                    return currentdate;
                }
                if (hospitalName&&hospitalName.checked) {
                    footerList.push({
                        fontSize: 12,
                        fontWeight: 500,
                        pageAlign: footerTextAlign,
                        value: '组织:' + (getApp.getContextInfo() && getApp.getContextInfo().unit.name)
                    })
                }
                if (setName&&setName.checked) {
                    var name = (getApp.getContextInfo() && getApp.getContextInfo().copy.name) || ''
                    footerList.push({
                        fontSize: 12,
                        fontWeight: 500,
                        pageAlign: footerTextAlign,
                        value: '账套:' + name
                    })
                }
                if (user&&user.checked) {
                    footerList.push({
                        fontSize: 12,
                        fontWeight: 500,
                        pageAlign: footerTextAlign,
                        value: '制单人:' + (getApp.getCurrentUser() && getApp.getCurrentUser().name) + '  制单日期:' + getNowFormatDate()
                    })
                }

                if (campany&&campany.checked) {
                    footerList.push({
                        fontSize: 12,
                        fontWeight: 500,
                        pageAlign: footerTextAlign,
                        value: '[望海康信]'
                    })
                }
                obj = {
                    title: {
                        pageAlign: titleTextAlign,
                        value: titleDom.value,
                        
                    },
                    footer: footerList
                }
                // spitPageRows:5000,
                var chickedId;
                var checkedTypes = parent.window.document.getElementsByName('checkedType')||document.getElementsByName('checkedType');
                if(checkedTypes&&checkedTypes.length>0){
                    dojo.forEach(checkedTypes,function(item,index){
                        if(item.checked){
                            chickedId = item.id;
                        }
                    })
                }
                var checked = document.getElementById('checkedTypeExl') || parent.window.document.getElementById(
                    'checkedTypeExl');
                var fileType = checked.checked ? 'xlsx' : 'null'
                if(splitPageTrue.checked && fileType=='xlsx'){//如果设置了分页信息
                    var   spitPageRows =  document.getElementById("spitPageRows") || parent.window.document.getElementById(
                        'spitPageRows')
                    obj.title.spitPageRows = spitPageRows.value
                }
              
                return obj 

            }
        }
    });
}
dojo.require("unieap.global");
dojo.require("unieap.util.util");
dojo.provide("unieap.clientCache.localStorage");
dojo.declare("unieap.clientCache", null, {
	
	DB_NAME : unieap.defaultCacheDBName,
	
	constructor: function(param) {
		dojo.mixin(this, param);
	},
	
	
	/**
	 * @summary:
	 * 		判断当前浏览器是否支持HTML5本地缓存
	 * @description:
	 * 		如果支持返回true，否则返回false
	 */
	isAvailable : function(){
		return unieap.global.isUseClientCache && ('localStorage' in window) && window['localStorage'] !== null && window['localStorage'] !== undefined;
	},
	
	
	/**
	 * @summary:
	 * 		清除缓存中所有记录
	 * @example:
	 * |<script>
	 * |	unieap.cache.clear();
	 * |</script> 	
	 * 通过unieap的debug工具查看缓存数据是否被清空	
	 */
	clear : function(){
		if(!this.isAvailable()){
			return;
		}
		var keys =  this.getKeys();
		for(var i = 0; i < keys.length; i++){
			key = keys[i];
			window.localStorage.removeItem(this.DB_NAME+key);
		}
	},
	
	/**
	 * @summary:
	 * 		往缓存中插入数据
	 * @param：
	 * 		{string} key  
	 * @param：
	 * 		{string} value 
	 * @param：
	 * 		{string} timestamp 
	 * @example:
	 * |<script>
	 * |	var value = "[
	 * |		{CODEVALUE:1,CODENAME:'汉族'},
	 * |		{CODEVALUE:2,CODENAME:'回族'},
	 * |		{CODEVALUE:3,CODENAME:'白族'}
	 * |	]";
	 * |	unieap.cache.put("dept",value,String(new Date().getTime()));
	 * |</script> 	
	 * 通过unieap的debug工具查看缓存数据是否被清空
	 */
	put : function(key,value,timestamp) {
		if(!this.isAvailable()){
			return;
		}
		var cacheKey,cacheValue = {};
		cacheValue.value = value;
		//cacheValue.timestamp = timestamp || 1;
		//cacheValue.timestamp = timestamp || 2649600001; // 2020.1.6 chentaoyu 修改默认缓存时间戳为当前写入时间
		cacheValue.timestamp = timestamp || String(new Date().getTime());
		cacheKey = this.DB_NAME+key;
		var value = dojo.toJson(cacheValue);//obj2Str(cacheValue);
		window.localStorage.setItem(cacheKey,value);
	},
	
	
	/**
	 * @summary:
	 * 		往缓存中插入数据
	 * @param：
	 * 		{string} key  
	 * @example:
	 * |<script>
	 * |	unieap.cache.remove("key");
	 * |</script> 	
	 * 通过unieap的debug工具查看缓存数据是否被清空
	 */
	remove : function(key){
		var cacheKey = this.DB_NAME+key;
		window.localStorage.removeItem(cacheKey);
	},
	
	
	/**
	 * @summary:
	 * 		往缓存中插入数据
	 * @param：
	 * 		{string} keys  
	 * @param：
	 * 		{string} values 
	 * @param：
	 * 		{string} timestamps 
	 */
	putMultiple : function(keys,values,timestamps) {
		if(!this.isAvailable()){
			return;
		}
		var key,value,timestamp;
		for(var i=j=k=0;i < keys.length; i++){
			key=keys[i];
			value=values[j];
			//timestamp=timestamps&&timestamps[k]||1;
			timestamp=timestamps&&timestamps[k]||2649600001; 
			this.put(key,value,timestamp);
			j++;
			k++;
		}
	},
	
	
	/**
	 * @summary:
	 * 		从缓存中获得数据
	 * @param：
	 * 		{string} key  
	 * @return：
	 * 		{string} value 
	 */
	get : function(key) {
		if(!this.isAvailable() || key == null){
			return;
		}
		var json,obj,cacheKey;
		cacheKey = this.DB_NAME+key;
		json = window.localStorage.getItem(cacheKey);
		obj = dojo.fromJson(json)//str2Obj(value);
		return (obj == null ? null : obj.value);
	},
	
	
	/**
	 * @summary:
	 * 		从缓存中获得所有key值
	 * @return：
	 * 		{string[]} keys 
	 */
	getKeys : function(){
		if(!this.isAvailable()){
			return;
		}
		var key,keys = [];
		for(var i = 0; i < window.localStorage.length; i++){
			key = window.localStorage.key(i);
			if(key.indexOf(this.DB_NAME) > -1){
				key = key.substring(this.DB_NAME.length);
				keys.push(key);
			}
		}
		return keys;
	},
	
	
	/**
	 * @summary:
	 * 		获取缓存中记录总数
	 * @return：
	 * 		{string} count 
	 */
	getCount : function(){
		if(!this.isAvailable()){
			return;
		}
		var key,count = 0;
		for(var i = 0; i < window.localStorage.length; i++){
			key = window.localStorage.key(i);
			if(key.indexOf(this.DB_NAME) > -1){
				count++;
			}
		}
		return count;
	},
	
	/**
	 * @summary:
	 * 		获取缓存中所有记录的timestamp
	 * @return：
	 * 		{string[]} timestamps 
	 */
	getAllTimeStamps : function(){
		if(!this.isAvailable()){
			return;
		}
		var key,json,obj,timestamp,timestamps = {};
		var keys = this.getKeys();
		for(var i = 0; i < keys.length; i++){
			key = keys[i];
			json = window.localStorage.getItem(this.DB_NAME+key);
			obj = dojo.fromJson(json);
			timestamp = parseInt(obj.timestamp);
			if(timestamp > 2649600000){
				timestamps[key] = timestamp;
			}
		}
		return timestamps;
	}

});
dojo.require("unieap.global");
dojo.require("unieap.util.util");
dojo.provide("unieap.cache");
(function(){
	var isInstalledGears = function(){
		if (window.google && google.gears) {
			return google.gears;
		}
		var factory = null;
		// Firefox
		if (typeof GearsFactory != 'undefined') {
			factory = new GearsFactory();
		} else {
			// IE
			try {
				factory = new ActiveXObject('Gears.Factory');
				if (factory.getBuildInfo().indexOf('ie_mobile') != -1) {
					factory.privateSetGlobalObject(this);
				}
			} catch (e) {
				// Safari
				if ((typeof navigator.mimeTypes != 'undefined')
						&& navigator.mimeTypes["application/x-googlegears"]) {
					factory = document.createElement("object");
					factory.style.display = "none";
					factory.width = 0;
					factory.height = 0;
					factory.type = "application/x-googlegears";
					document.documentElement.appendChild(factory);
				}
			}
		}
		if (!factory) {
			return null;
		}
		if (!window.google) {
			google = {};
		}
		if (!google.gears) {
			google.gears = {
				factory : factory
			};
		}
		return  typeof( google.gears ) !== "undefined"  ;
	};
	var isHTML5Available = ('localStorage' in window) && window['localStorage'] !== null && window['localStorage'] !== undefined,
		isGooglegearAvailable = isInstalledGears();
	if(isHTML5Available){
		dojo.require("unieap.clientCache.localStorage");
	}else if(isGooglegearAvailable){
		dojo.require("unieap.clientCache.googlegear");
	} else if(dojo.isIE){
		dojo.require("unieap.clientCache.userData");
	}
	unieap.cache = new unieap.clientCache();
	
})();
dojo.require("unieap.rpc");

unieap.dbDialect = "hibernate";

dojo.mixin(
				unieap.Action,
				{

					// 获取代码缓存地址
					CODELISTURL : "/techcomp/ria/getSingleCodesList.action",
					// 获取多个代码缓存地址
					MULTICODELISTURL : "/techcomp/ria/getMultiCodeList.action",
					// 查询数据地址
					QUERYURL : "/techcomp/ria/commonProcessor?page=settting-initEdit",
					// 统计地址
					COUNTURL : "/techcomp/ria/rpc!count.action",
					// 更新数据地址
					UPDATEURL : "/techcomp/ria/rpc!update.action",
					// 打印地址
					PRINTURL : "/?.action",
					// 导出地址
					EXPORTURL : "/techcomp/ria/csvExportAction!export.action",
					// 获取个性化信息地址
					GINDIVIDUALURL : "/techcomp/ria/rpc!getIndividual.action",
					// 保存个性化信息地址
					SINDIVIDUALURL : "/techcomp/ria/rpc!setIndividual.action",
					// 获取缓存地址
					CACHEURL : "/techcomp/ria/checkCache.action",

					loadAllCodes : function(codelistKey) {
						var data = {
							url : unieap.WEB_APP_NAME
									+ "/techcomp/ria/getAllCodesByCodelistKey.action",
							parameters : {
								store : codelistKey
							},
							headers : {
								ajax : "true",
								charset : "utf-8"
							},
							sync : true,
							timeout : 120,
							load : function(dc, xhr) {
								var store = dc.getDataStore(codelistKey);
								dataCenter.addDataStore(store);
							},
							context : this
						};
						unieap.Action.requestData(data, dataCenter, false);
					},
					/*
					 * @summary: 登陆后初始化加载缓存数据 @param： {menu} mode
					 * 加载模式{load加载所有代码表数据|check检查时间戳只加载有变化的代码表数据} @param:
					 * {function} callback 回调方法
					 */
					loadCacheData : function(mode, callback) {
						dojo.require("unieap.cache");

						var loading = document.createElement("div");
						loading.style.cssText = "position:absolute;bottom:0px;left:0px;overflow:hidden;height:20px;border:1px solid #eee;width:120px;background:#fff;font:12px;";
						// loading.innerHTML = "正在装载缓存数据...";
						loading.innerHTML = RIA_I18N.rpc.loadingCache;
						document.body.appendChild(loading);
						// 返回本地时间戳对象,格式为object['key']=>timestamp

						var dc = new unieap.ds.DataCenter();
						if (mode == "check" || mode == "update") {
							var localTimeStamps = unieap.cache
									.getAllTimeStamps();
							dc.setParameter("timeStamps", localTimeStamps);
						}
						unieap.Action.requestData( {
							url : unieap.WEB_APP_NAME + this.CACHEURL,
							sync : false,
							parameters : {
								mode : mode
							},
							load : function(dc) {
								var serverTimeStamps = dc.getParameter('timeStamps');
								if(mode == "check"){
									for(var name in serverTimeStamps){
										unieap.cache.remove(name);
									}
								}else if(mode == "update"){
									for(var name in serverTimeStamps){
										var ds = dc.getDataStore(name);
										if(ds){
											unieap.setDataStore(ds,dc,true,serverTimeStamps[name]);
										}
									}
								}
								loading.style.visibility = "hidden";
								callback && callback();
							},
							timeout : 50000,
							error : function(text) {
								// loading.innerHTML="装载缓存数据失败。";
							loading.innerHTML = RIA_I18N.rpc.loadCacheError;
						}
						}, dc, false);
					}
				});
//用于记录session过期时发的请求，在重新登录后，向后台发送
var dataTimeOutArray = new Array();
var dcTimeOutArray = new Array();
var showLoadingTimeOutArray = new Array();
//超时处理
_timeoutProcess = function(json,data,dc,showLoading){
	if(dojo.isString(json)  &&  
		json.match(unieap.session.timeout) && 
		data["sessionout"]!=false){
		if (unieap.session.dialogRelogin){
			dojo.require("unieap.dialog.DialogUtil");
			var dialog = unieap.getDialog();
			dataTimeOutArray.push(data);
			dcTimeOutArray.push(dc);
			showLoadingTimeOutArray.push(showLoading);
			if (typeof(dialog)=='undefined'||dialog.url.indexOf(unieap.relogin)<0){
				DialogUtil.showDialog({
					url : unieap.WEB_APP_NAME+unieap.relogin,
					width: "360",
					height: unieap.reloginDialogHeight || "270",
					resizable:false,
					isExpand:false,
					isClose:false,
					hideTitle:true,
					//会话过期,请重新登录
					title : RIA_I18N.rpc.sessionOut,
					onComplete:function(value){
						if(value=="success"){
							for (var i=0;i<dataTimeOutArray.length;i++){
								unieap.Action.requestData(dataTimeOutArray[i],dcTimeOutArray[i],showLoadingTimeOutArray[i]);
							}
							dataTimeOutArray = new Array();
							dcTimeOutArray = new Array();
							showLoadingTimeOutArray = new Array();
						}
					}									
				});	
			}
		}
		else{
			var topWin = unieap.getTopWin();
			topWin.location=topWin.location;
		}	
		return true;						
	}
	return false;	
}
//异常弹出是否可控制
_isExceptionControl = function(){
	return true;
}
// 异常处理for v4
_exceptionProcess = function(xhr) {
	var json = null;
	if (xhr.responseText) {
		json = dojo.fromJson(xhr.responseText);
	} else {
		json = xhr;
	}
	var _dc = new unieap.ds.DataCenter(json);
	if (_dc.getCode() == -1) {
		unieapx.exception.Handler.handleSystemException(_dc);
	}else if(_dc.getCode() == -2){
        unieapx.exception.Handler.handleSystemException(_dc);
	} else {
		unieapx.exception.Handler.handleBusinessException(_dc);
	}
}
//帐号踢出处理
_accountKickedProcess = function(json){
	if(dojo.isString(json)  &&  
		json.match(unieap.account.kicked)){
		var topWin = unieap.getTopWin();
		topWin.location = unieap.WEB_APP_NAME + unieap.kicked; 
		return true;						
	}
	return false;	
}

dojo.require("unieap.rpc");
var __buffer = unieap.ds.Buffer;
var __status = unieap.ds.Status;

//*-------------------------------------------------弹开帮助页面的全局方法 BEGIN--------------------------------------------------------*/
function getAllHelpPage(apppath,helpMenuId){
	var appName = (unieap.appName || unieap.getTopWin().unieap.appName);//非单帧 走unieap.getTopWin().unieap.appName
	var w=screen.availWidth;
		var h=screen.availHeight-150;
		var sFeatures = "fullscreen=0,toolbar=0,location=0,directories=0,status=1,menubar=0";
		sFeatures += ",scrollbars=1,resizable=1,top=50,left=50,width=" + (w-150) + ",height=" + h + " ";       
	window.open(apppath+"/techcomp/ria/allHelpInfo-view.jsp?helpMenuId="+helpMenuId +"&appName=" + appName, "allHelpFrame", sFeatures);
}

function getAllHelpPageForIconOnClick(){
	var menuId = null;
	var pageId = unieap.getTopWin()._currentSelectedPageId;//view.js定义的变量
	if(pageId){
		menuId = pageId.substring(5);//获取menuId,pageId = "page_" + meunId
	}
	getAllHelpPage(unieap.WEB_APP_NAME, menuId);// menuId may be null
}
//*-------------------------------------------------弹开帮助页面的全局方法 END--------------------------------------------------------*/

//*-------------------------------------------------录制脚本相关的全局方法 BEGIN--------------------------------------------------------*/
 function toggleScriptModel(view,isOpen) {
     dojo.require("dijit.Toolbar");
     var rootId = view._rootNodeId;
     if (isOpen) {
        if (typeof(dijit.byId(rootId+"recordScript_toolbar")) == 'undefined') {
	        var recordScript_toolbar = new dijit.Toolbar({}, rootId+"recordScript_toolbar");
        }
        dojo.require("dijit.form.Button");
        var button = new dijit.form.Button({
            label: '录制脚本模式',
            showLabel: true,
            iconClass: "dijitEditorIcon dijitEditorIconNewPage",
            baseClass: ""
        });
        dijit.byId(rootId+"recordScript_toolbar").addChild(button);
        dojo.animateProperty({　　
			node:dojo.byId(rootId+"recordScript_toolbar"),
            duration: 　1200,
            properties: {
                 opacity: {
                      start: 0,
                      end: 1
                 }
             }　
         }).play();
         if (rootId != "") {
         	  var rootWidget = unieap.byId(rootId);
			  var isXDialogLoad = (typeof(rootWidget) != "undefined") ? ((rootWidget.declaredClass == "unieap.xdialog.Dialog") ? true : false) : false;
			  if(!isXDialogLoad){
              	unieap.recordScriptMap[rootId] = true;
			  }
         }
     }
     else {
          var mine = view;
          dojo.animateProperty({
			   node:dojo.byId(rootId+"recordScript_toolbar"),
               duration: 1200,
               properties: {
	               opacity: {
	                     start: 1,
	                     end: 0
	               }
                },
	           onEnd: function () {
	               dijit.byId(rootId+"recordScript_toolbar").destroyDescendants();
	           }
          }).play();
          if (rootId != "") {
               delete unieap.recordScriptMap[rootId];
          }
          dojo.style(dojo.byId(rootId+"recordScript_toolbar"),"border","0px"); //待完善
          dojo.style(dojo.byId(rootId+"recordScript_toolbar"),"padding","0px"); //待完善
      }
}
function addCaseButton(view,caseInfo) {
     dojo.require("dijit.form.Button");
     var rootId = view._rootNodeId;
     var button = new dijit.form.Button({
         label: caseInfo.caseName,
         showLabel: true,
         iconClass: "dijitEditorIcon dijitEditorIconPaste",
         caseId: caseInfo.caseId,
         onClick: function (evt) {
              view.navigator.forward("testcomp", "unittest", "testCase", "用例设计", caseInfo.caseId);
         }
      });
      dijit.byId(rootId+"recordScript_toolbar").addChild(button);
}

//获取相关脚本信息
function collectRecordScript(dc,view,processorName){
	if(unieap.recordScript){
		var tempView = view;
		if(view._viewcContext){
			var viewContextKey = view._rootNodeId == ""?"viewContext":view._rootNodeId;
			var viewContextArray = unieapViewContextHolder[viewContextKey];
			tempView = viewContextArray[viewContextArray.length-1];
			if(!viewContextHolder[viewContextKey]){
				return;
			}
			var instances = viewContextHolder[viewContextKey].instances;
			for(var i = 0; i < instances.length; i++){
				var instance = instances[i];
				if(instance[0] == tempView.name){
					tempView = instance[1];
					break;
				}
			}
		}
		if(tempView._isRecordScriptOpen){
			var rootId = tempView._rootNodeId;
			if(dijit.byId(rootId+"recordScript_toolbar")){
				var prefix = (tempView && tempView._rootNodeId) ? tempView._rootNodeId : ""; 
				var parameters = [];
				if(dc.parameters && dc.parameters._parameters){
					parameters = dc.parameters._parameters.split(',');
				}
				var parameterValues = [];
				for(var i = 0; i < parameters.length; i++){
					if(typeof(dc.getParameter(parameters[i])) == 'undefined'){
						if(!dc.getDataStore(parameters[i])){
							parameterValues.push("");
						}else{
							parameterValues.push(dc.getDataStore(parameters[i]).toJson());
						}
					}else{
						parameterValues.push(dc.getParameter(parameters[i]));
					}
				}
				var dialogData = {
									'processorName' : processorName,
									'methodBoId' :dc.getParameter('_boId'),
									'parameterValues' : parameterValues,
									'methodName' : dc.getParameter('_methodName')
								 };
	//			unieap.scriptDQ.push(dialogData);
				unieap.scriptDQ.unshift(dialogData);
				//将dc中传入_methodId
				dc.setParameter("_methodId","true");
			}
		}
	}
}

//处理相关脚本信息
function handleRecordScript(dc,view,processorName){
	if(unieap.recordScript){
		var tempView = view;
		if(view._viewcContext){
			var viewContextKey = view._rootNodeId == ""?"viewContext":view._rootNodeId;
			var viewContextArray = unieapViewContextHolder[viewContextKey];
			tempView = viewContextArray[viewContextArray.length-1];
			if(!viewContextHolder[viewContextKey]){
				return;
			}
			var instances = viewContextHolder[viewContextKey].instances;
			for(var i = 0; i < instances.length; i++){
				var instance = instances[i];
				if(instance[0] == tempView.name){
					tempView = instance[1];
					break;
				}
			}
		}
		if(tempView._isRecordScriptOpen){
			var rootId = tempView._rootNodeId;
			if(dijit.byId(rootId+"recordScript_toolbar")){
				for(var i = 0; i < unieap.scriptDQ.length;i++){
					if(unieap.scriptDQ[i]['processorName'] == processorName){
						unieap.scriptDQ[i]['methodId'] = dc.getParameter('_methodId');
						unieap.scriptDQ[i]['_sessionVarString'] = dc.getParameter('_sessionVarString');
						unieap.scriptDQ[i]['_requestVarString'] = dc.getParameter('_requestVarString');
					}
				}
				if(unieap.scriptCount < unieap.scriptDQ.length-1){
					unieap.scriptCount++;
					return;
				}else{  //最后一次
					unieap.scriptCount = 0;
					_handleLoadScript(tempView);
				}
				
			}
		}
	}
}

function _handleLoadScript(view){
//	var dialogData = unieap.scriptDQ.pop();
	var dialogData = unieap.scriptDQ.shift();
	var dialog = DialogUtil.createDialog({
					title:"录制测试数据",
					height:"150", 
					width:"350",
					url:unieap.WEB_APP_NAME+'/testcomp/unittest/processorAOP-view.jsp',
					iconCloseComplete : true,
					dialogData : dialogData,
					animate : true,
					'onComplete' : function(returnVal){
						if(returnVal != null){
							var caseInfo = unieap.fromJson(returnVal);
							//发送当前请求的为viewc，要获取其外层view，让外层view来处理
							if(view._viewcContext){
								var viewContextKey = this._rootNodeId == ""?"viewContext":this._rootNodeId;
								var viewObj = unieapViewContextHolder[viewContextKey][unieapViewContextHolder.length-1];
								addCaseButton(viewObj,caseInfo);
							}else{  //发送当前请求的为view，直接处理
								addCaseButton(view,caseInfo);
							}
						}
						if(unieap.scriptDQ.length > 0){
							_handleLoadScript(view);  //递归调用
//							arguments.callee(view);  //递归调用
						}
					}
				});
	dialog.show();
}
//*---------------------------------------------------录制脚本相关的全局方法 END--------------------------------------------------------------------------------*/

///**
// * 
// * 在processor请求之前调用
// * @param dc：请求提交的datacenter
// * @param view：该请求发起的view模型js对象
// * @param processorName：该请求对应processor的方法名
// * @return true：请求继续执行，false：请求中断
// * 
// */
function doBeforeRequest(dc,view,processorName){
	collectRecordScript(dc,view,processorName);  //添加录制脚本AOP
    return true;
}
///**
// * 
// * 在processor的成功回调之前调用
// * @param dc：成功回调的结果datacenter
// * @param view：该请求发起的view模型js对象
// * @param processorName：该请求对应processor的方法名
// * @return true：成功回调继续执行，false：成功回调中断
// * 
// */
function doBeforeSuccessResponse(dc,view,processorName){
    return true;
}
///**
// * 
// * 在processor的成功回调之后调用
// * @param dc：成功回调的结果datacenter
// * @param view：该请求发起的view模型js对象
// * @param processorName：该请求对应processor的方法名
// * @return void
// * 
// */
function doAfterSuccessResponse(dc,view,processorName){
	handleRecordScript(dc,view,processorName);  //添加录制脚本AOP
}
///**
// * 
// * 在processor的失败回调之前调用
// * @param dc：成功回调的结果datacenter
// * @param view：该请求发起的view模型js对象
// * @param processorName：该请求对应processor的方法名
// * @return true：失败回调继续执行，false：失败回调中断
// */
function doBeforeFailedResponse(dc,view,processorName){
	return true;
}
///**
// * 
// * 在processor的失败回调之后调用
// * @param dc：成功回调的结果datacenter
// * @param view：该请求发起的view模型js对象
// * @param processorName：该请求对应processor的方法名
// * @return void
// * 
// */
function doAfterFailedResponse(dc,view,processorName){
	handleRecordScript(dc,view,processorName);  //添加录制脚本AOP
}
if (!dojo._hasResource["unieap.view.View"]) {
	dojo.provide("unieap.view.View");
	dojo.declare("unieap.view.View", null, {
		
		_viewName : null,

		mixinMethodsSourceCache : new Array(),
		_emptyFn : function(){},
		
		processor : null,
		
		stateObj:null,
		
		state:null,
		
		getViewName: function(){
			return this._viewName;
		},

		postscript: function(){
			this.create();
		},
		
		getProcessor : function(){
			return this.processor;
		},
		
		
		create : function(){
		},
		
		init : function(){
			// 子类在此函数中实现页面加载时的初始操作
		},
		
		page_load: function () {
			//子类的page_load方法调用之前，会首先调用父类的page_load方法
			//将当前页面的view和viewc的名字保存起来
			var viewContextKey = this._rootNodeId == ""?"viewContext":this._rootNodeId;
			if(unieapViewContextHolder){
				var viewContext = unieapViewContextHolder[viewContextKey];
				if(!viewContext){
					viewContext = [];
					unieapViewContextHolder[viewContextKey] = viewContext;
				}
				var dcPatternArray = this.declaredClass.split("."),
					type = "view";
				
				if(this._viewcContext){
					type = "viewc";
				}
				var _viewName = this._viewName ? this._viewName : dcPatternArray[dcPatternArray.length-2];
				viewContext.push({
					name : _viewName,
					type : type,
					declaredClass : this.declaredClass
				});
				this._viewName = _viewName;
			}
			
			//*******************************录制脚本相关初始化功能 BEGIN*****************************************/
			if(unieap.recordScript){
				if(!this._viewcContext){
					
					var div = document.createElement("div");
					div.id = this._rootNodeId+"recordScript_toolbar_div";
					dojo.addClass(div,"claro");
					var span = document.createElement("span");
					span.id=this._rootNodeId+"recordScript_toolbar";
					dojo.place(span, div, "first");
					dojo.style(span,"border","0px");
					//如果是普通的view，将<div>放置于<body>下，如果是XDialog对应的view，将<div>放置于XDialog的dialogMainContent结点下
					var	rootNode  = (this._rootNodeId == "")?dojo.body():dojo.byId(this._rootNodeId);
					if(this._rootNodeId != "" && unieap.byId(this._rootNodeId) != null && unieap.byId(this._rootNodeId).declaredClass == "unieap.xdialog.Dialog"){
						rootNode = unieap.byId(this._rootNodeId).dialogMainContent;
					}
					dojo.place(div, rootNode, 'first');
		
		            if (this._rootNodeId != "" && unieap.recordScriptMap[this._rootNodeId]) {
		                this._isRecordScriptOpen = true;
		                toggleScriptModel(this, true);
		            }
		            else {
		                this._isRecordScriptOpen = false;
		                var recordScript_toolbar = document.getElementById(this._rootNodeId+"recordScript_toolbar");
		                recordScript_toolbar && dojo.style(recordScript_toolbar, "display", "none");
		            }
					
					//本view订阅录制脚本相关事件
					var self = this;
		            var handler = unieap.subscribe("unitTestRecordScript", function (obj) {
		                if (typeof (self._isRecordScriptOpen) == 'undefined' || self._isRecordScriptOpen == null) {
		                	self._isRecordScriptOpen = true;
		                }
		                else {
		                	self._isRecordScriptOpen = !self._isRecordScriptOpen;
		                }
		                toggleScriptModel(self, self._isRecordScriptOpen);
		            });
		            
		            if (typeof (this._scribeHandles) != "undefined") {
		               this._scribeHandles.push(handler);
		            }
		            
				}
			}
            //*******************************录制脚本相关初始化功能 END*******************************************/
		},
		
		mapToJson:function(mapData){
			var jsonData = {};
			if(!mapData){
				return null;
			}
			for(var key in mapData){
				if(mapData[key] instanceof unieap.ds.DataStore 
				  || (mapData[key]!=null && mapData[key].declaredClass && mapData[key].declaredClass == "unieap.ds.DataStore")){
					jsonData[key] = mapData[key].toJson();
				}else{
					jsonData[key] = mapData[key];
				}
			}
			return jsonData;
		},

// forward:function(scid,dcid,module,viewPath,parameters){
// var
// base=unieap.WEB_APP_NAME+"/"+scid+"/"+dcid+"/"+(module?module+"_":"")+viewPath.replace('/','_')+"_entry.action";
// var url=unieap.buildRequestPath(base,parameters);
// window.location.href = url;
// },
		
		// add by wukj view forward 支持传递dataCenter
		forward : function(scid,dcid,viewPath,dc,parameters){
			var dataCenter = dc?dc : new unieap.ds.DataCenter();
// for(var x in parameters){
// dataCenter.addParameter(x,parameters[x]);
// }
			var reg = new RegExp("/","g"); 
			var base=unieap.WEB_APP_NAME+"/"+scid+"/"+dcid+"/"+viewPath.replace(reg,'_')+"_entry.action";
			var url=unieap.buildRequestPath(base,parameters);
			var form = dojo.create("form");
			form.action = url;
			form.method = "post";
			form.style.display = "none";
			var textarea = dojo.create("textarea");
			textarea.name = "_forwardDataCenter";
			textarea.value = dataCenter && dataCenter.toJson?dataCenter.toJson():String(dataCenter || "");
			form.appendChild(textarea);
			dojo.query("body")[0].appendChild(form);
			form.submit();
			return form;
		},
		_getFuncBindJSONStr : function(eventName, handlerVarName)
		{
			var x = "{" + eventName + " : " + handlerVarName + "};";
			return x;	
		},
		_getExistingFuncImpl : function(obj,eventName)
		{
			var x = obj[eventName];
			if(dojo.isFunction(x))
			{
				return x;
			}
			return this._emptyFn;
		},
		_getOriginImplKey : function(controlId, eventName)
		{
			return controlId + "_" + eventName;
		},
		connect : function(controlRef, eventName, eventHandler)
		{
			if(!dojo.isObject(controlRef) || controlRef == null) return;
			if(!dojo.isString(eventName) || eventName.length == 0) return;
			if(!dojo.isFunction(eventHandler)) return;
			
			var originImplKey = this._getOriginImplKey(controlRef.id, eventName);
			
			var sc = this.mixinMethodsSourceCache[originImplKey];
			if(sc == undefined || sc == null)
			{
				this.mixinMethodsSourceCache[originImplKey] = this._getExistingFuncImpl(controlRef, eventName);
			}
			var funcJSONStr = this._getFuncBindJSONStr(eventName, "eventHandler");
			eval("var funcJSON=" + funcJSONStr + ";");
			dojo.mixin(controlRef, funcJSON);
		},
		disconnect : function(controlRef, eventName)
		{
			if(!dojo.isObject(controlRef) || controlRef == null) return;
			if(!dojo.isString(eventName) || eventName.length == 0) return;
			
			var originImplKey = this._getOriginImplKey(controlRef.id, eventName);
			var originImpl = this.mixinMethodsSourceCache[originImplKey];
			if(originImpl == undefined || originImpl == null) return;
			
			var funcJSONStr = this._getFuncBindJSONStr(eventName, "originImpl");
			eval("var funcJSON=" + funcJSONStr + ";");
			dojo.mixin(controlRef, funcJSON);
			this.mixinMethodsSourceCache[originImplKey] = null;
		},	
		dataStore :  {
			collect : function(store, pattern, ignoreData){
				var dataStore  = new unieap.ds.DataStore();
				dojo.mixin(dataStore,store);
				if(!((dojo.isObject(pattern)&&pattern["metaData"]) || dataStore["statementName"])){
					delete dataStore["metaData"];  
				}
				if(dojo.isObject(pattern)){
					pattern = pattern["policy"];
				}	
				var newRowSet = new unieap.ds.RowSet();
				var array = pattern.split(',');
				if(array.length > 0){
					var len = array.length;
					var item = null;
					for(var index = 0; index < len; index++){
						item = array[index];
						switch(dojo.trim(item)){
							case "auto" : this._collectAuto(newRowSet, store["rowSet"]) ; break;
							case "none" : this._collectNone(newRowSet) ; break;
							case "all" : this._collectAll(newRowSet, store["rowSet"]) ; break;
							case "update" : this._collectUpdate(newRowSet, store["rowSet"]) ; break;
							case "delete" : this._collectDelete(newRowSet, store["rowSet"]) ; break;
							case "insert" : this._collectInsert(newRowSet, store["rowSet"], ignoreData) ; break;
							case "select" : this._collectSelect(newRowSet, store["rowSet"]); break;
							default : 
								if(dojo.isFunction(pattern))this._collectCallback(newRowSet,store["rowset"], pattern);  break;
						}
					}
				}
				newRowSet.setDataStore(store);
				dataStore["rowSet"] = newRowSet;
				dataStore["rowSet"].setDataStore(dataStore);
				return dataStore;
			},
			
			// 收集所有的数据
			_collectAll : function(newRowSet, rowSet){
				newRowSet["primary"] = rowSet["primary"] ;
				newRowSet["filter"] = rowSet["filter"];
				newRowSet["delete"] = rowSet["delete"] ;
			},
			// 不收集任何数据
			_collectNone : function(newRowSet){
				newRowSet["primary"] = [] ;
				newRowSet["filter"] = [] ;
				newRowSet["delete"] = [] ;
			},
			// 自动收集改变数据
			_collectAuto : function(newRowSet, rowSet){
				var callback = function(row){
					if(row.getRowStatus()==__status.DATAMODIFIED||row.getRowStatus()==__status.NEWMODIFIED)
						return true;
					return false;
				};
				this._collectBuffer(newRowSet,rowSet, callback,__buffer.PRIMARY);
				this._collectBuffer(newRowSet,rowSet, callback,__buffer.FILTER);
				this._collectDelete(newRowSet, rowSet);
			},
			// 收集删除数据，排除新增的
			_collectDelete : function(newRowSet, rowSet){
				this._collectDelBuffer(newRowSet, rowSet, function(row){
					if(row.getRowStatus()!=__status.NEWMODIFIED)
						return true;				
					return false;
				},__buffer.PRIMARY, __buffer.DELETE);
			},
			// 收集修改的
			_collectUpdate : function(newRowSet, rowSet){
				var callback = function(row){
					if(row.getRowStatus()==__status.DATAMODIFIED)
						return true;
					return false;
				};
				this._collectBuffer(newRowSet,rowSet,callback,__buffer.PRIMARY);
				this._collectBuffer(newRowSet,rowSet,callback,__buffer.FILTER);
			},
			// 收集新增的
			_collectInsert : function(newRowSet, rowSet, ignoreData){
				var callback = function(row){
					if(row.getRowStatus()==__status.NEWMODIFIED)
						return true;
					return false;
				};
				this._collectBuffer(newRowSet,rowSet, callback,__buffer.PRIMARY, ignoreData);
				this._collectBuffer(newRowSet,rowSet, callback,__buffer.FILTER);
			},
			// 收集选中的记录
			_collectSelect : function(newRowSet, rowSet){
				var callback = function(row){
					if(row.isRowSelected())
						return true;
					return false;
				};
				this._collectBuffer(newRowSet, rowSet, callback,__buffer.PRIMARY);
				this._collectBuffer(newRowSet,rowSet, callback,__buffer.FILTER);
				this._collectBuffer(newRowSet,rowSet, callback,__buffer.DELETE);
			},
			// 自定义收集
			_collectCallback : function(newRowSet,rowSet,callback){
				
				this._collectBuffer(newRowSet,rowSet, callback,__buffer.PRIMARY);
				this._collectBuffer(newRowSet,rowSet, callback,__buffer.FILTER);
				this._collectBuffer(newRowSet,rowSet, callback,__buffer.DELETE);
			},		
			// 收集指定缓冲区数据
			_collectBuffer : function(newRowSet, rowSet, callback,bufferName, ignoreData){
				var buffer = newRowSet._getBuff(bufferName);
				try{
					rowSet.forEach(function(row){
						if(callback(row,bufferName)){
							var data = row.getData();
							var isNeedCollect = true;
							var len = 0;
							// 对于新增数据的特殊处理，对于空row不记录新增
							if(data["_t"] == 1){  
								for(var item in data){
									if(ignoreData && data[item] == ignoreData[item])continue;
									len++;
									if(len > 1)break;
								}
								if(len == 1)
									isNeedCollect = false;
							}
							if(isNeedCollect)buffer.push(data);
						}
					},null,null,bufferName);		
				}catch(e){
					// 对于一些不需要收集的buffer，直接抛出一个Error即可跳出
				}	
			},
			// 收集删除数据
			_collectDelBuffer : function(newRowSet, rowSet, callback,bufferName, delBufferName){
				var buffer = newRowSet._getBuff(bufferName);
				try{
					rowSet.forEach(function(row){
						if(callback(row,delBufferName)){
							buffer.push(row.getData());
						}
					},null,null,delBufferName);		
				}catch(e){
					// 对于一些不需要收集的buffer，直接抛出一个Error即可跳出
				}	
			},
			
//			/**
//			 * @summary:
//			 * 		将两个dataStore合并成一个新的dataStore,前提是两者的rowSetName属性一致
//			 * @param:
//			 * 		{object}store1
//			 * 		用于合并的dataStore
//			 * @param:
//			 * 		{object}store2
//			 * 		用于合并的dataStore
//			 * @example:
//			 *    view.dataStore.union(store1,store2);
//			 */
			union : function(store1,store2){
				if(store1.getRowSetName() != store2.getRowSetName()){
					return null;
				}
				var unionStore = store1.clone("unionStore");
				unionStore.getRowSet().addRows(store2.getRowSet().getData());
				return unionStore;
			}
		},
		navigator : {
			_getNavigatorContainer: function(){
				var navigatorContainerHelpInfo = unieap.byId("navigatorContainerHelpInfo");
				if(navigatorContainerHelpInfo) return navigatorContainerHelpInfo;
				var framePageContainer = unieap.byId("framePageContainer") || unieap.getTopWin().unieap.byId("framePageContainer");
				return framePageContainer.getSelectedTab().NavigatorContainer;
			},
			/**
			 * @summary:
			 * 		页面导航的穿透发起
			 * @param: 
			 * 		{string} scid
			 * 		目标页面所在SC的id
			 * @param: 
			 * 		{string} dcid
			 * 		目标页面所在DC的id
			 * @param: 
			 * 		{string} viewPath
			 * 		目标页面所属的路径
			 * @param: 
			 * 		{string} title
			 * 		导航主题，用于区分不同的穿透请求
			 * @param: 
			 * 		{object || string} dc
			 * 		穿透携带的数据，支持多种数据格式
			 * @param: 
			 * 		{json} parameters
			 * 		穿透请求携带的参数，可以不填
			 * @example:
			 * |	view.navigator.forward("demoSC", "demoDC", "viewEdit", "修改数据", ds);
			 *  		
			 */
			forward : function(scid, dcid, viewPath, title, dc, parameters){
				// add by lugj 增加对页面导航的处理
				 var reg = new RegExp("/","g"); 
				 //var base = (!scid && !dcid)?viewPath:unieap.WEB_APP_NAME+"/"+scid+"/"+dcid+"/"+viewPath.replace(reg,'_')+"_entry.action";
				 var base = unieap.cmpPath +'?page='+viewPath;
				 var navigatorContainer = this._getNavigatorContainer();//unieap.byId("framePageContainer").getSelectedTab().NavigaterContainer;
				 navigatorContainer.currentTitle = title;
				 //拼接get请求的参数
				 if(typeof(parameters) != "undefined" && parameters){
					var parametersStr = "";
					for(var _key in parameters){
						if(parametersStr != ""){
							parametersStr += "&";
						}
						parametersStr += _key + "=" + parameters[_key];
					}
					if(parametersStr != ""){
						base += "?" + parametersStr;
					}
				 }
				  // 增加菜单id，可将导航的全部页面与当前菜单做关联
				 if(base.indexOf("?") == -1){
					 base +="?menuId=" + navigatorContainer.id.substring("page_".length);
				 }else{
					 base +="&menuId=" + navigatorContainer.id.substring("page_".length);
				 }
				 
				 if(navigatorContainer.openPane(base, dc, title)){
				     var time = new Date();
				     beginTime = time.getTime();
				     var pane = navigatorContainer.getChildren()[0];
				     //修复从A到B在到C，然后从C返回B，刷新B页面后， view.navigator.receiveData("title", receiveDataStore);  里面的receiveDataStore回调函数没有被执行，导致页面数据为空。
				     pane.currentTitle = title;
				     console.log("开始请求“"+ title +"”["+unieap.userAccount+" "+ pane.checkTime(time.getHours())+":"+pane.checkTime(time.getMinutes())+":"+pane.checkTime(time.getSeconds())+":"+pane.checkTime(time.getMilliseconds(), 1)+"]"+"...");
				     // unieap.publish(title, dc);
				     if(navigatorContainer._afterPageLoad){
				     	navigatorContainer._afterPageLoad.apply();
				     }
				     if(unieap.helpTipMode) return;
				     unieap.getTopWin().dojo.publish(navigatorContainer.id + title, [dc]);
				     return;
				 }
				 
				 var navigatorPane = new unieap.getTopWin().unieapx.layout.NavigatorPane( {
					 data : dc,
					 title : title,
					 currentTitle: title,
					 parentContainer: navigatorContainer,
					 onShow : unieap.getTopWin().onSelectNavigatorPane,
					 height:'100%',
					 href : base
				 });
				 navigatorContainer.addChild(navigatorPane);
				 unieap.loader.load( {
					 node : navigatorPane.containerNode,
					 _afterPageLoad:navigatorContainer._afterPageLoad,
					 url : base
				 });
			},
			
			/**
			 * @summary: 
			 * 		页面导航的返回发起
			 * @param:
			 * 		{string} title
			 * 		导航主题，用于区分不同的返回请求
			 * @param: 
			 * 		{object || string} dc
			 * 		返回携带的数据，可以支持多种数据格式
			 * @example:
			 * |	view.navigator.prePage("修改完成", ds);
			 */
			prePage : function(title, dc){
				 var navigatorContainer = this._getNavigatorContainer();//unieap.byId("framePageContainer").getSelectedTab().NavigaterContainer;
				 title && this._changeOnComplete(title);
				 navigatorContainer.prePage(dc);
			},
			
			/**
			 * @summary: 
			 * 		页面导航的穿透成功
			 * @param:
			 * 		{string} title
			 * 		导航主题，用于区分不同的穿透请求，需要和穿透发起的主题相同
			 * @param 
			 * 		{function} method
			 * 		穿透成功后调用的方法，可以接收穿透发起时传输的数据
			 * @example:
			 * |	view.navigator.receiveData("修改数据", func);
			 * 
			 */
			receiveData : function (title, method){
				if(unieap.helpTipMode) return;
				var navigatorContainer = this._getNavigatorContainer();//unieap.byId("framePageContainer").getSelectedTab().NavigaterContainer,
					dc = navigatorContainer.getSelectedTab().data;
				try{
					(navigatorContainer.getSelectedTab().currentTitle == title) && method.apply(this,[dc]);
				}catch(e){
					MessageBox.alert({type:'warn','title':RIA_I18N.navigator.info, message:"	"+title+" -- "+RIA_I18N.navigator.receiveDataError});
				}
				// unieap.subscribe(title, method);
				var subscribehandle = unieap.getTopWin().dojo.subscribe(navigatorContainer.id + title, this, method);
				navigatorContainer.navigatorSubscribe.push(subscribehandle);
				navigatorContainer.getSelectedTab().navigatorSubscribe.push(subscribehandle);
			},
			
			/**
			 * @summary: 
			 * 		页面导航的返回成功
			 * @param:
			 * 		{string} title
			 * 		导航主题，用于区分不同的返回请求，需要和返回发起的主题相同
			 * @param:
			 * 		{function} method
			 * 		返回成功后调用的方法，可以接收返回发起时传输的数据
			 * @param 
			 * 		{boolean} clickTitle
			 * 		点击导航条是否调用回调方法，不传参数默认为false
			 * @example:
			 * |	view.navigator.onComplete("修改完成", func, true);
			 */
			onComplete : function (title, method, onCompleteByClick){
				//return;//saas 暂时关闭该方法.  20180929  XG
				if(unieap.helpTipMode) return;
				var navigatorPane = this._getNavigatorContainer().getSelectedTab();//unieap.byId("framePageContainer").getSelectedTab().NavigaterContainer.getSelectedTab();
				if(typeof onCompleteByClick != 'undefined') {
					navigatorPane.setOnCompleteByClick(onCompleteByClick);
				}else{//(typeof(unieap.widget.navigator) != 'undefined') && (typeof(unieap.widget.navigator.alwaysShowNavigator) != 'undefined'))?
					navigatorPane.setOnCompleteByClick(((typeof(unieap.widget.navigator) != 'undefined') && (typeof(unieap.widget.navigator.alwaysShowNavigator) != 'undefined'))?unieap.widget.navigator.onCompleteByClick:false);
				}
				if(navigatorPane._navigatorPaneSubscribe==null){
					navigatorPane._navigatorPaneSubscribe = {};
				}
				
				navigatorPane._navigatorPaneSubscribe[title] = {method:method,onCompleteByClick:navigatorPane.getOnCompleteByClick()};
			},
			_changeOnComplete : function(title){
				var navigatorContainer = this._getNavigatorContainer();//unieap.byId("framePageContainer").getSelectedTab().NavigaterContainer;
				var navigatorPane = navigatorContainer.navigatorList.pop(),
					selectedNavigatPane = navigatorContainer.navigatorList.pop();
				navigatorContainer.navigatorList.push(selectedNavigatPane);
				navigatorContainer.navigatorList.push(navigatorPane);
				if(selectedNavigatPane._navigatorPaneSubscribe && selectedNavigatPane._navigatorPaneSubscribe[title]){
					selectedNavigatPane._onComplete = selectedNavigatPane._navigatorPaneSubscribe[title].method;
				}
			},
			setTitle : function(title){
				var currentNavigatorPane = this._getNavigatorContainer().getSelectedTab();
				currentNavigatorPane.controlButton.setTitle(title);
			}
		},
		
		/**
		 * @summary: 
		 * 		通过国际化的key值，获取国际化翻译后的信息
		 * @param：
		 * 		 {string} key 
		 * 		 国际化信息对应的key值
		 * @return：
		 * 		 {string} 
		 * 		 国际化后的信息
		 */
		i18n : function(key) {
			var dataCenter = this.dataCenter;
			var i18n = dataCenter.getParameter('i18n');
			if(typeof(i18n) != "undefined"){
				return (i18n[key] ? i18n[key] : key);
			}
			return key;
		}
	});	
}
if (!dojo._hasResource["unieap.view.Control"]) {
	dojo.provide("unieap.view.Control");
	dojo.declare("unieap.view.Control", null, {
		view : null,
		
		postscript: function(view){
			this.view = view ;
		},
		getRealId : function(id){
			return this.view._rootNodeId+id;
		},
		getDataCenter : function(id){
			return this.view.dataCenter;
		}
	});	
}

if (!dojo._hasResource["unieap.view.Controls"]) {
	dojo.provide("unieap.view.Controls");
	dojo.declare("unieap.view.Controls", unieap.view.Control, {
		setDataStore : function(id, store) {
			var id = this.getRealId(id);
			var object = unieap.byId(id);
// if(!object){
// MessageBox.alert( {
// title : '确认框',
// message : '不存在id为'+id+'的控件'
// });
// return;
// }
			if (object instanceof unieap.form.Form) {

				var form = object;
				if(form == null){
					return;
				}
				if(form.getBinding() ==null){
					return;
				}
				var formStore = form.getBinding().getDataStore();
				if (store == null) {
					var formRowSet = formStore.getRowSet();
// var formRowData = formRowSet.getRowData(0);
					formRowSet.deleteAllRows();
					formRowSet.resetUpdate();
					form.getBinding().setDataStore(formStore);
					return;
				}
				
				var bindRow = form.getBinding().getRow();
				
				if(store.getRowSet().getRowCount() <= 0){
					return;
				}
				var data = store.getRowSet().getRow(0).getData();
				if(formStore != null){
					if(bindRow == null){
						formStore.getRowSet().addRow(data,true,false);
						var inRowIndex = formStore.getRowSet().getRowCount('primary') - 1;
						form.getBinding().bind(formStore.getRowSet().getRow(inRowIndex));
					}else{
						for (var key in data){
							bindRow.setItemValue(key, data[key]);
						}
					}
					formStore.getRowSet().resetUpdate();
				}
			} else if (object instanceof unieap.grid.Grid) {
				var grid = object;
				if (!grid) {
					return;
				}
				grid.getBinding().setDataStore(store);
			} else if (object instanceof unieap.tree.Tree) {
				if (!object || !store) {
					return;
				}
				var tree = object,
					binding = tree.getBinding(),
					dataCenter = this.getDataCenter(),
					storeName = binding.getStore().getName(),
					treeDs = dataCenter.getDataStore(storeName);
				treeDs.append(store, "replace");
				binding.setDataStore(
						tree.getRootNode(),
						treeDs);
			}
		},
//		/**
//		 * 
//		 * 从源DataStore中拷贝相同字段的值到目标DataStore中
//		 * @param toDs {DataStore} 目标DataStore
//		 * @param fromDs {DataStore} 源DataStore
//		 * @param include {object} 拷贝的相同字段数组，默认值为all（即所有相同字段）
//		 * @param remove {array} 移除的相同字段数组
//		 * @return
//		 */
		copySameItemValues:function(toDs,fromDs,include,remove){
			if(include != "all" && dojo.isArray(include)){
				this.copyItemValues(toDs,fromDs,include)
				return;
			}
			var sameItems = [];
			var toDsData = toDs.getRowSet().getRow(0).getData();
			var fromDsData = fromDs.getRowSet().getRow(0).getData();
			if(dojo.isArray(remove)){
				for(key in fromDsData){
					if(key in toDsData && !this.isRemoveItem(key,remove)){
						sameItems.push(key);
					}
				}
			}
			else{
				for(key in fromDsData){
					if(key in toDsData){
						sameItems.push(key);
					}
				}
			}
			this.copyItemValues(toDs,fromDs,sameItems);
		},
//		/**
//		 * 
//		 * 从源DataStore中拷贝字段的值到目标DataStore中
//		 * @param toDs {DataStore} 目标DataStore
//		 * @param fromDs {DataStore} 源DataStore
//		 * @param toKeys {array} 拷贝的字段数组
//		 * @param fromKeys {array} 移除的字段数组
//		 * @return
//		 */
		copyItemValues:function(toDs,fromDs,toKeys,fromKeys){
			var toDsRow = toDs.getRowSet().getRow(0);
			var fromDsRow = fromDs.getRowSet().getRow(0);
			if(!fromKeys)
				fromKeys = toKeys;
			var fromKeysSize = fromKeys.length;
			for(var i=0;i<toKeys.length;i++){
				if(i<fromKeysSize){
				toDsRow.setItemValue(toKeys[i],fromDsRow.getItemValue(fromKeys[i]));
				}
			}
		},

//		/**
//		 * 
//		 * 从源DataStore中拷贝字段的值到目标DataStore中
//		 * @param toDs {DataStore} 目标DataStore
//		 * @param fromDs {DataStore} 源DataStore
//		 * @param toKeys {array} 拷贝的字段数组
//		 * @param fromKeys {array} 移除的字段数组
//		 * @return
//		 */
		copyItemValues:function(toDs,fromDs,toKeys,fromKeys,toDsIndex,fromDsIndex){
			var toDsRow = toDs.getRowSet().getRow(toDsIndex||0);
			var fromDsRow = fromDs.getRowSet().getRow(fromDsIndex||0);
			if(!fromKeys)
				fromKeys = toKeys;
			var fromKeysSize = fromKeys.length;
			for(var i=0;i<toKeys.length;i++){
				if(i<fromKeysSize){
				toDsRow.setItemValue(toKeys[i],fromDsRow.getItemValue(fromKeys[i]));
				}
			}
		},
		
		isRemoveItem:function(item,remove){
			for(var j=0;j<remove.length;j++){
				if(item == remove[j])
					return true;
			}
			return false;
		}
	});	
}

if (!dojo._hasResource["unieap.view.Form"]) {
	dojo.provide("unieap.view.Form");
	dojo.declare("unieap.view.Form", unieap.view.Control, {
		
		/**
		 * @summary:
		 * 		设置form对应的DataStore，如果传入的是null则绑定空行
		 * @param:
		 * 		{string}id
		 * 		对应form的id
		 * @param:
		 * 		{object}store
		 * 		用于初始化form的dataStore
		 * @param:
		 * 		{number}rowIndex
		 * 		将store中rowIndex对应的行绑定到form上，如果不传入，则默认绑定store的第一行
		 * @example:
		 *  | view.form.setDataStore('form1',dataStore1);
		 */
		setDataStore : function(id, store,rowIndex) {	
			var form = unieap.byId(this.getRealId(id));
			if(form.getBinding() ==null){
				return;
			}
			//var bindRow = form.getBinding().getRow();
			var formStore = form.getBinding().getDataStore();
			if (store == null||store.getRowSet().getRowCount()==0) {
				if(typeof unieap.widget.form.keepValidationMessage != 'undefined' && unieap.widget.form.keepValidationMessage){
					if(!formStore){//防止特殊情况下 getDataStore出来undefined  导致后续逻辑出错
						formStore = store ? store : new unieap.ds.DataStore();
					}
					var formRowSet = formStore.getRowSet();
					formRowSet.deleteAllRows();
					formRowSet.insertRow({});
					var row = formRowSet.getRow(0);
					form.getBinding().bind(row);
					return;
				}else{
					var formRowSet = formStore.getRowSet();
					formRowSet.deleteAllRows();
					formRowSet.resetUpdate();
					form.getBinding().setDataStore(formStore);
					return;
				}
			}
//			var data;
//			if(!isNaN(rowIndex)){
//				var row = store.getRowSet().getRow(rowIndex);
//				if(row){
//					data = row.getData();
//				}else {
//					return;
//				}
//			} else {
//				data = store.getRowSet().getRow(0).getData();
//			}
			// 替换store的名称
			if(formStore){
//				if(bindRow == null){
//					formStore.getRowSet().addRow(data,true,false);
//					var inRowIndex = formStore.getRowSet().getRowCount('primary') - 1;
//					form.getBinding().bind(formStore.getRowSet().getRow(inRowIndex));
//				}else{
//					bindRow.clear();
//					for (var key in data){
//						bindRow.setItemValue(key, data[key]);
//					}
//				}
				if(typeof unieap.widget.form.keepValidationMessage != 'undefined' && unieap.widget.form.keepValidationMessage){
					if(!isNaN(rowIndex)){
						var rowSetName = store.getRowSetName();
						if(rowSetName == undefined || rowSetName == ''){
							store.setRowSetName(formStore.getRowSetName());
						}
						var storeData = store.getRowSet().getRow(rowIndex).getData();
						var formStoreRowSet = form.getBinding().getDataStore().getRowSet();
						formStoreRowSet.deleteAllRows();
						formStoreRowSet.insertRow(storeData);
						var formStoreRow = formStoreRowSet.getRow(0);
						form.getBinding().bind(formStoreRow);
					}else{
						var rowSetName = store.getRowSetName();
						if(rowSetName == undefined || rowSetName == ''){
							store.setRowSetName(formStore.getRowSetName());
						}
						var storeData = store.getRowSet().getRow(0).getData();
						var formStoreRowSet = form.getBinding().getDataStore().getRowSet();
						formStoreRowSet.deleteAllRows();
						formStoreRowSet.insertRow(storeData);
						var formStoreRow = formStoreRowSet.getRow(0);
						form.getBinding().bind(formStoreRow);
					}						
				}else{
					store.setName(formStore.getName());
					var rowSetName = store.getRowSetName();
					if(rowSetName == undefined || rowSetName == ''){
						store.setRowSetName(formStore.getRowSetName());
					}
					if(!isNaN(rowIndex)){
							form.getBinding().setDataStore(store,rowIndex);
						}
					else{
							form.getBinding().setDataStore(store);
						}
				}
				!unieap.global.notResetUpdate && formStore.getRowSet().resetUpdate();
				
			}
		},
		/**
		 * @summary:
		 * 		设置form绑定的dataStore的数据值。
		 * 		如果dataStore没有行数据，则将数据对象作为一个行数据插入到dataStore中。
		 * 		如果dataStore有行数据，则将数据对象中的属性值赋值给dataStore。
		 * @param:
		 * 		{string}id
		 * 		对应form的id
		 * @param:
		 * 		{object}data
		 * 		用于赋值的数据对象，格式为："{column:value}"
		 * @example:
		 *  | view.form.unionDataStore('form1',{id:'123',name:'unieap'});
		 */		
		unionDataStore : function(id,data) {
			var form = unieap.byId(this.getRealId(id));
			if(form.getBinding() ==null){
				return;
			}
      		var store = form.getBinding().getDataStore();
			if(store.getRowSet().getRowCount() <= 0){
				store.getRowSet().addRow({});
			}			
			for(var p in data){
				store.getRowSet().setItemValue(0, p, data[p]);
			}
		},
		
		/**
		 * @summary:
		 * 		获取form对应的DataStore
		 * @param:
		 * 		{string}id
		 * 		对应form的id
		 * @example:
		 *  | view.form.getDataStore('form1');
		 */
		getDataStore : function(id) {
			var form = unieap.byId(this.getRealId(id));
// if(!form){
// MessageBox.alert( {
// title : '确认框',
// message : '不存在id为'+id+'的控件'
// });
// return;
// }
			if(!form.getBinding()){
				return null;
			}
			var formStore = form.getBinding().getDataStore();
			return formStore;
		},
		/**
		 * @summary:
		 * 		获得form对应的DataStore的某个属性值
		 * @param:
		 * 		{string}id
		 * 		对应form的id
		 * @param:
		 * 		{string}propertyName
		 * 		属性的名称
		 * @example:
		 *   | view.form.getPropertyValue('form1','id');
		 */
		getPropertyValue : function(id, propertyName) {
			var form = unieap.byId(this.getRealId(id));
// if(!form){
// MessageBox.alert( {
// title : '确认框',
// message : '不存在id为'+id+'的控件'
// });
// return;
// }
			if(form.getBinding() ==null){
				return null;
			}
			var store = form.getBinding().getDataStore();
			if(store.getRowSet().getRowCount() <= 0){
				return null;
			}
			var propertyValue = store.getRowSet().getItemValue(0, propertyName);
			return propertyValue;
		},
			//unieap.isUserStyle Start
		//设置表单元素集合{key:val}
		setPropertiesValues : function(id,data) {
			if(data){
				var form = unieap.byId(this.getRealId(id));
				if(form.getBinding() ==null){
					return;
				}
				var store = form.getBinding().getDataStore();
				if(store.getRowSet().getRowCount() <= 0){
					return;
				}
				var rs=store.getRowSet();
				for(var key in data){
					rs.setItemValue(0,key,data[key]);
					 
				}
			}
		},
		//unieap.isUserStyle End
		/**
		 * @summary:
		 * 		设置form对应的DataStore的某个属性值
		 * @param:
		 * 		{string}id
		 * 		对应form的id
		 * @param:
		 * 		{string}propertyName
		 * 		属性的名称
		 * @param:
		 * 		{object}propertyValue
		 * 		属性值
		 * @example:
		 *  | view.form.setPropertyValue('form1','id','123456');
		 */
		setPropertyValue : function(id, propertyName, propertyValue) {
			var form = unieap.byId(this.getRealId(id));
// if(!form){
// MessageBox.alert( {
// title : '确认框',
// message : '不存在id为'+id+'的控件'
// });
// return;
// }
			if(form.getBinding() ==null){
				return;
			}
			var store = form.getBinding().getDataStore();
			if(store.getRowSet().getRowCount() <= 0){
				return;
			}
			store.getRowSet().setItemValue(0, propertyName, propertyValue);
		}
	});	
}

if (!dojo._hasResource["unieap.view.Grid"]) {
	dojo.provide("unieap.view.Grid");
	dojo.declare("unieap.view.Grid", unieap.view.Control, {
		
		/**
		 * @summary:
		 * 		设置grid绑定的DataStore
		 * @param:
		 * 		{string}id
		 * 		对应grid的id
		 * @param:
		 * 		{object}store
		 * 		用于初始化grid的dataStore
		 * @example:
		 *  | view.grid.setDataStore(dataStore1);
		 */
		setDataStore : function(id, store) {
			// @yll 筛选bug
			if(store){
				store.flag = true;
			}
			var grid = unieap.byId(this.getRealId(id));
// if (!grid) {
// MessageBox.alert( {
// title : '确认框',
// message : '不存在id为'+id+'的控件'
// });
// return;
// }		
		//storeArr 缓存请求过来的所以数据，客户端分页情况
			var storeArr;
			grid.storeArr = $.extend(true,storeArr,store)
			if(grid&&grid._rootID&&dojo.query('.select_buttons_mask',grid._rootID)[0]){//表格重新set值的时候 取消按钮
				dojo.query('.select_buttons_mask',grid._rootID).style('display','block')
			}
			var gridStore = grid.getBinding().getDataStore();
			//U_EAP00028615
			if (store == null) {
				gridStore.setPageNumber(1);
				gridStore.setRecordCount(0);
				var gridRowSet = gridStore.getRowSet();
				gridRowSet.deleteAllRows();
				gridRowSet.resetUpdate();
				grid.getBinding().setDataStore(gridStore);
				
				//U_EAP00029207
				var xtreeMgr = grid.getManager("XTreeManager");
				if(xtreeMgr){
					xtreeMgr.setDataStore(null);
				}
			
				
				//设置分页信息
				if(store && store.getParameter("_pageKey")){
					gridStore.setParameter("_pageKey", store.getParameter("_pageKey"));
				}
				if(store && store.getParameter('processor')){
					var manager=grid.getManager('PagingManager');
					var processor={
						processor: store.getParameter('processor')
					}
					manager.setInfo(processor);
				}
				return;
			}
							
			// 替换store的名称
			if(gridStore){
				//U_EAP00028338
				if(!(grid.getBinding()._supportClientPaging() && store.getName().indexOf('_client_paging_ds')==-1)){
					store.setName(gridStore.getName());
				}
				var rowSetName = store.getRowSetName();
				if(rowSetName == undefined || rowSetName == ''){
					store.setRowSetName(gridStore.getRowSetName());
				}
			}
			var PAGE_NAME_localstore = (top&&top.app&&top.app.getCurrentMenu&&top.app.getCurrentMenu())||(top&&top.app&&top.app._store.getState().global.currentMenu)||{};
			if(PAGE_NAME_localstore.id){
				if(window.localStorage.getItem(PAGE_NAME_localstore.id+'pageSize') && window.localStorage.getItem(PAGE_NAME_localstore.id+'pageSize').length){
					var pageSize = +window.localStorage.getItem(PAGE_NAME_localstore.id+'pageSize')
					if(store.pageSize != pageSize&&grid&&grid.toolBar){
						setTimeout(function(){
							grid.toolBar._setPageSize(pageSize)
						},100)
						
					}
				}else{
					window.localStorage.setItem(PAGE_NAME_localstore.id+'pageSizeInit',store.pageSize);
				}
			}
			
			var xtree = grid.getManager("XTreeManager");
			if(xtree){
				xtree.setDataStore(store);
			}else{
				grid.getBinding().setDataStore(store);
			}
			
			
			
			//设置分页信息
			if(store.getParameter('processor')){
				var manager=grid.getManager('PagingManager');
				if(manager){
					var processor={
						processor: store.getParameter('processor')
					}
					manager.setInfo(processor);		
				}
			}
		},
		
		
		/**
		 * @summary:
		 * 		获取grid绑定的DataStore
		 * @param:
		 * 		{string}id
		 * 		对应grid的id
		 * @example:
		 *  | view.grid.getDataStore('grid1');
		 */
		getDataStore : function(id) {
			var grid = unieap.byId(this.getRealId(id));
			if(!grid.getBinding()){
				return null;
			}
			var xtree = grid.getManager("XTreeManager");
			if(xtree){
				var ds = xtree.getDataStore();
				return ds;
			}
			var gridStore = grid.getBinding().getDataStore();
			return gridStore;
		},
		
		/**
		 * @summary:
		 * 		xTreeGrid状态下，创建一个节点并插入到父节点下
		 * @param:
		 * 		{string}id
		 * 		对应grid的id
		 * @param:
		 * 		{object}rowData
		 * 		待插入的行数据对象，格式为："{column:value}"，必须有主键字段，其他字段非必有
		 * @param:
		 * 		{object}parentRowData
		 * 		待插入行的父节点，若插入根节点则为null对象（必须有该入参）
		 * @param:
		 * 		{number}index
		 * 		插入同级节点的位置；不传入此值时，默认插入至同级节点的最后一位
		 * @example:
		 *  | view.grid.createRow('grid1',{id:'001',name:'unieap',parentId:'-1'},null,0)
		 */
		createRow:function(id,rowData,parentRowData,index){
			var grid = unieap.byId(this.getRealId(id));
			var dataStore = grid.getBinding().getDataStore();
			if (!dataStore) {
				return;
			}
			var xtree = grid.getManager("XTreeManager");
			( !rowData ) && ( rowData = {} );
			if(parentRowData){//增加的是非根节点
				//防止用户插入null和空json
				( !rowData[xtree.parent] ) && ( rowData[xtree.parent]=parentRowData[xtree.id] );
				xtree.createRow(false, rowData, index);
			}else{
				( !rowData[xtree.query.name] ) && ( rowData[xtree.query.name]=xtree.query.value );
				xtree.createRow(true, rowData, index);
			}
		},
		
		/**
		 * @summary:
		 * 		在Grid的指定位置插入一行数据
		 * @param:
		 * 		{string}id
		 * 		对应grid的id
		 * @param:
		 * 		{object}data
		 * 		待插入的行数据对象，格式为："{column:value}"，为空则新增空行
		 * @param:
		 * 		{number}index
		 * 		插入位置；不传入此值时，默认插入至最后一行
		 * @example:
		 * | view.grid.insertRow('grid1',{id:'001',name:'unieap'},0)
		 */
		insertRow:function(id,data,index){
			var grid = unieap.byId(this.getRealId(id));
			var dataStore = grid.getBinding().getDataStore();
			if (!dataStore) {
				return;
			}
			var rowSet = dataStore.getRowSet();
			
			if(data == null){
				data = {};
			}
			var row=null;
			if(index != null){
				row = rowSet.insertRow(data, index,true,null,null,grid.id);
			} else {
				row = rowSet.insertRow(data,null,true,null,null,grid.id);
			}
			!unieap.global.notResetUpdate&&rowSet.resetUpdate();
			return row;//zhaohf 增加一个返回值
		},
		
		/**
		 * @summary:
		 * 		在Grid的指定位置插入若干行
		 * @param:
		 * 		{string}id
		 * 		对应grid的id
		 * @param:
		 * 		{object}store
		 * 		待插入的行数据组成的dataStore
		 * @param:
		 * 		{number}index
		 * 		插入位置；不传入此值时，默认插入至最后一行
		 * @example:
		 *  | view.grid.insertRows('grid1',dataStore1,0)
		 */
		insertRows:function(id, store, index)
		{
			var grid = unieap.byId(this.getRealId(id));
			var dataStore = grid.getBinding().getDataStore();
			if (!dataStore) {
				return;
			}
			var rowSet = dataStore.getRowSet();
//			dataStore.setRowSetName(store.getRowSetName());
			if (store.getRowSet() && store.getRowSet().getRowCount() > 0) {
				for (var i = 0; i < store.getRowSet().getRowCount(); i++) {
					var row = store.getRowSet().getRow(i).getData();
					if(index != null) {
						rowSet.insertRow(row, index + i,true);
					} else {
						rowSet.insertRow(row,null,true);
					}
				}
				
				!unieap.global.notResetUpdate&&rowSet.resetUpdate();
			} else {
				return;
			}
		},
		
		deleteSelectedRow:function(id)
		{
// if(!unieap.byId(unieap.getRealId(id))){
// MessageBox.alert( {
// title : '确认框',
// message : '不存在id为'+id+'的控件'
// });
// return;
// }
			var rowSet = unieap.byId(this.getRealId(id)).getBinding().getDataStore().getRowSet();
			rowSet.deleteSelectedRows();
//			rowSet.resetUpdate();	
		},
		
		/**
		 * @summary:
		 * 		删除Grid中指定的某一行，如果不传入index值时，删除Grid选中的第一行。
		 * 		xTreeGrid模式中，该方法会级联删除这一行所构成的子树
		 *		删除后会自动更新显示
		 * @param:
		 * 		{string}id
		 * 		对应grid的id
		 * @param:
		 * 		{number}index
		 * 		待删除的行索引；不传入此值时，默认删除Grid选中的第一行
		 * @example:
		 * | view.grid.deleteRow('grid1',3)
		 */
		deleteRow:function(id,index)
		{
			var grid = unieap.byId(this.getRealId(id));
// if (!grid) {
// MessageBox.alert( {
// title : '确认框',
// message : '不存在id为'+id+'的控件'
// });
// return;
// }
			var dataStore = grid.getBinding().getDataStore();
			if (!dataStore) {
				return;
			}
			//U_EAP00028677
			var editMan = null;
			if(grid.declareClass == "unieap.grid.Grid"){
				editMan = grid.getManager("EditManager");
			}else{
				editMan = grid.getManager("RowEditManager");
			}
			editMan && editMan.apply();
			
			var rowSet = dataStore.getRowSet();
			var xtree = grid.getManager("XTreeManager");
			if(xtree){
				if(typeof(index)=='undefined'){
					var selectedIndexs = grid.getManager('SelectionManager').getSelectedRowIndexs();
					if(selectedIndexs && selectedIndexs.length>0){
						xtree.cascadeDelete(selectedIndexs[0]);
					}
				}else{
					xtree.cascadeDelete(index);
				}
			}else{
				if (index != null) {
					rowSet.deleteRow(index);
				} else {
					var indexs = grid.getManager('SelectionManager').getSelectedRowIndexs();
					if (indexs && indexs.length > 0) {
						var delIndex = indexs[0];
						rowSet.deleteRow(delIndex);
					}
				}
			}
			if(rowSet.getRowCount() == 0){
                grid.getManager("SelectionManager").setAllSelect(false);
            }
//			rowSet.resetUpdate();
		},
		
		/**
		 * @summary:
		 * 		删除Grid中指定的若干行，如果不传入indexs值时，删除Grid选中所有行。删除后会自动更新显示
		 * @param:
		 * 		{string}id
		 * 		对应grid的id
		 * @param:
		 * 		{object}indexs
		 * 		待删除的行索引构成的数组；不传入此值时，默认删除Grid选中的所有行
		 * @example:
		 *  | view.grid.deleteRows('grid1',[1,3])
		 */
		deleteRows:function(id, indexs) {
			var grid = unieap.byId(this.getRealId(id));
// if (!grid) {
// MessageBox.alert( {
// title : '确认框',
// message : '不存在id为'+id+'的控件'
// });
// return;
// }
			var dataStore = grid.getBinding().getDataStore();
			if (!dataStore) {
				return;
			}
			//U_EAP00028677
			var editMan = null;
			if(grid.declareClass == "unieap.grid.Grid"){
				editMan = grid.getManager("EditManager");
			}else{
				editMan = grid.getManager("RowEditManager");
			}
			editMan && editMan.apply();
			
			var rowSet = dataStore.getRowSet();
			if (indexs && indexs.length > 0) {
				var len = indexs.length;
				var temp = null;
				for(var m = 0; m < len; m++){
					for(var n = m+1; n < len; n++){
						if(indexs[m] == indexs[n]){//去除重复项的干扰
							indexs[m] = -1;
							break;
						} else if(indexs[m] < indexs[n]){//降序排列，防止删除后干扰顺序
							temp = indexs[n];
							indexs[n] = indexs[m];
							indexs[m] = temp;
						}
					}
				}
				for (var i = 0; i < indexs.length; i++) {
					rowSet.deleteRow(indexs[i]);
				}
			} else {
				rowSet.deleteSelectedRows();
			}
			if(rowSet.getRowCount() == 0){
                grid.getManager("SelectionManager").setAllSelect(false);
            }
//			rowSet.resetUpdate();
		},
		
		/**
		 * @summary:
		 * 		更新Grid中指定的某一行，如果不传入index值时，更新Grid选中的第一行。更新后会自动更新显示
		 * @param:
		 * 		{string}id
		 * 		对应grid的id
		 * @param:
		 * 		{object}store
		 * 		用于更新的数据构成的dataStore，其RowSet中只包含一行数据
		 * @param:
		 * 		{number}index
		 * 		待更新的行索引；不传入此值时，默认更新Grid选中的第一行的内容
		 * @example:
		 * | view.grid.updateRow('grid1',dataStore1,2)
		 */
		updateRow:function(id, store, index)
		{
			var grid = unieap.byId(this.getRealId(id));
// if(!grid){
// MessageBox.alert( {
// title : '确认框',
// message : '不存在id为'+id+'的控件'
// });
// return;
// }
			if (!store) {
				return;
			}
			var gridStore = grid.getBinding().getDataStore();
			if (!gridStore) {
				return;
			}
			var rowData = store.getRowSet().getRow(0).getData();
			var selectedRow = null;
			var indexTemp = null;
			if (typeof index == 'undefined'||index==null){
				var selIndexs = grid.getManager('SelectionManager').getSelectedRowIndexs();
				if (selIndexs && selIndexs.length > 0) {
					var rowIndex = selIndexs[0];
					selectedRow = gridStore.getRowSet().getRow(rowIndex);
					indexTemp = rowIndex;
				} else {
					return;
				}
			}else {
				selectedRow = gridStore.getRowSet().getRow(index);
				indexTemp = index;
			} 
			
			for (var key in rowData) {
// if (rowData[key] != null)
					selectedRow.setItemValue(key, rowData[key]);
			}
			var xtree = grid.getManager("XTreeManager");
			if(xtree){
				grid.getManager('ViewManager').refreshRow(indexTemp);
			}
// var row = new unieap.ds.Row();
// for (var key in rowData) {
// row.setItemValue(key, rowData[key]);
// }
// gridStore.getRowSet().updateRow(indexTemp, row);
			!unieap.global.notResetUpdate&&gridStore.getRowSet().resetUpdate();
		},
		
		updateSelectedRow:function(id,store)
		{
// if(!unieap.byId(unieap.getRealId(id))){
// MessageBox.alert( {
// title : '确认框',
// message : '不存在id为'+id+'的控件'
// });
// return;
// }
			var grid = unieap.byId(this.getRealId(id));
			var rowData = store.getRowSet().getRow(0).getData();
			var gridStore = grid.getBinding().getDataStore();
			var indexs = grid.getManager('SelectionManager').getSelectedRowIndexs();
			var rowIndex = indexs[0];
			var selectedRow = gridStore.getRowSet().getRow(rowIndex);
			for(var key in rowData){
				selectedRow.setItemValue(key,rowData[key]);
			}
			!unieap.global.notResetUpdate&&gridStore.getRowSet().resetUpdate();
		},

		/**
		 * @summary:
		 * 		获得grid对应的一行数据，封装为dataStore的格式，当不传入index值时，默认取Grid选中的第一行数据，并组装成一个dataStore返回
		 * @param:
		 * 		{string}id
		 * 		需要添加数据的grid id
		 * @param:
		 * 		{number}index
		 * 		要获取的数据的行索引；不传入此值时，取Grid选中的第一行
		 * @example:
		 * |  view.grid.getRow('grid1',2)
		 */
		getRow:function(id,index)
		{
			var grid = unieap.byId(this.getRealId(id));
// if (!grid) {
// MessageBox.alert( {
// title : '确认框',
// message : '不存在id为'+id+'的控件'
// });
// return;
// }
			var store = grid.getBinding().getDataStore();
			if (!store) {
				return null;
			}
			var rowData = null;
			if(index != null){
				var row = store.getRowSet().getRow(index);
				if (!row) {
					return null;
				}
				rowData = row.getData();
			} else {
				var rowIndexs = grid.getManager("SelectionManager").getSelectedRowIndexs();
				if(rowIndexs != null && rowIndexs.length > 0){
					var index = rowIndexs[0];
					var row = store.getRowSet().getRow(index);
					if (!row) {
						return null;
					}
					rowData = row.getData();
				}else{
					return null;
				}
			}
			var ds = new unieap.ds.DataStore();
			ds.setName(store.getName());
			ds.setRowSetName(store.getRowSetName());
			ds.getRowSet().addRow(rowData,true,true);
			return ds;
			
		},
		
		/**
		 * @summary:
		 * 		根据传入的属性名称和属性值获取与之相匹配的行索引数组
		 * @param:
		 * 		{string}id
		 * 		对应grid的id
		 * @param:
		 * 		{string}propertyName
		 * 		属性的名称
		 * @param:
		 * 		{object}propertyValue
		 * 		属性值
		 * @example:
		 *  | view.grid.getRowIndexsByPropertyValue('grid1','id','123456')
		 */
	    getRowIndexsByPropertyValue:function(id,propertyName,propertyValue){
			var grid = unieap.byId(this.getRealId(id));
			var store = grid.getBinding().getDataStore();
			if(propertyValue == 'true' || propertyValue == 'false'){propertyValue = Boolean(propertyValue)}; //propertyValue 和dsProperty 值作对比  如果是true或者false 强转布尔值 防止字符串和布尔对比不匹配的情况 2019-07-26 LD
			if (!store) {
				return null;
			}
			var indexList = [];
			for(var i = 0, j= store.getRowSet().getRowCount();i<j;i++){
			var dsProperty = store.getRowSet().getRow(i).getItemValue(propertyName);
			if(dsProperty == 'true' || dsProperty == 'false'){dsProperty =Boolean(dsProperty)};
			if(dsProperty == propertyValue ){
					indexList.push(i);
				}
			}
			return indexList;
		},
				
		/**
		 * @summary:
		 * 		获得grid对应的多行数据，封装为dataStore的格式，当不传入indexs值时，默认取Grid所有选中的行，并组装成一个dataStore返回
		 * @param:
		 * 		{string}id
		 * 		对应grid的id
		 * @param:
		 * 		{object}indexs
		 * 		要获取的数据的行索引构成的数组；不传入此值时，取Grid所有选中的行
		 * @example:
		 *  | view.grid.getRows('grid1');
		 */
		getRows:function(id, indexs)
		{
			var grid = unieap.byId(this.getRealId(id));
			var xtree = grid.getManager("XTreeManager");
			if(xtree){
				var store = xtree.getDataStore();
			}else{
				var store = grid.getBinding().getDataStore();
			}
			if (!store) {
				return null;
			}
			var rowData = null;
			var ds = new unieap.ds.DataStore();
			ds.setName(store.getName());
			ds.setRowSetName(store.getRowSetName());
			if(indexs && indexs.length > 0){
				for (var i = 0; i < indexs.length; i ++) {
					var row = store.getRowSet().getRow(indexs[i]);
					if (!row) {
						continue;
					}
					rowData = row.getData();
					ds.getRowSet().addRow(rowData,true);
				}
				
			} else {
				if(xtree){
					var rowIndexs = store.getRowSet().getSelectedRowIndexs();
				}else{
					var rowIndexs = grid.getManager("SelectionManager").getSelectedRowIndexs();
				}
				if(rowIndexs != null && rowIndexs.length > 0){
					for (var i = 0; i < rowIndexs.length; i ++) {
						var row = store.getRowSet().getRow(rowIndexs[i]);
						if (!row) {
							continue;
						}
						rowData = row.getData();
						ds.getRowSet().addRow(rowData,true);
					}
				}else{
					return null;
				}
			}
			
			return ds;
		},
		/**
		 * @summary:
		 * 		获得grid对应已经修改过的数据，封装为dataStore的格式，并组装成一个dataStore返回
		 * @param:
		 * 		{string}id
		 * 		对应grid的id
		 * @example:
		 *  | view.grid.getModifiedRows('grid1');
		 */
		getModifiedRows:function(id)
		{
		
			var grid = unieap.byId(this.getRealId(id));	
			var xtree = grid.getManager("XTreeManager");
			if(xtree){
				var store = xtree.getDataStore();
			}else{
				var store = grid.getBinding().getDataStore();
			}
			if (!store) {
				return null;
			}
			var rowData = null;
			var ds = new unieap.ds.DataStore();
			ds.setName(store.getName());
			ds.setRowSetName(store.getRowSetName());
			var rowSet = store.getRowSet();
			var dsRowSet = ds.getRowSet();
			var row = null;
			var isModified = false;
			var check_s = function(rows){ //判断_s是否是第一位的 补充修改缺少_o标记的bug  2018-11-21 林栋
				return Object.keys(rows.data)[0] == "_s" ? true : false ;
			}
			for (var i = 0,len = rowSet.getRowCount(); i < len; i++) {
				row = rowSet.getRow(i);
				// if (!row || row && !row.isModified()&& !check_s(row)) {
				if (!row || row && !row.isModified()) {
					continue;
				}
				if(!row.data.hasOwnProperty('_o')){
					row.data['_o'] = {};
				}
				dsRowSet.addRow(row.getData(),true);
				isModified = true;
			}
			if(isModified){
				
				return ds;
			}else{
				return null;
			}
		},
		
		exchangeRow:function(id,index1,index2){
// if(!unieap.byId(unieap.getRealId(id))){
// MessageBox.alert( {
// title : '确认框',
// message : '不存在id为'+id+'的控件'
// });
// return;
// }
			var rowSet = unieap.byId(this.getRealId(id)).getBinding().getDataStore().getRowSet();
			var row1 = rowSet.getRow(index1);
			var row2 = rowSet.getRow(index2);
			if(row1 && row2){
				rowSet.updateRow(index1,row2);
				rowSet.updateRow(index2,row1);
				!unieap.global.notResetUpdate&&rowSet.resetUpdate();
			}
		},
		
		getSelectedStore:function(id){
// if(!unieap.byId(unieap.getRealId(id))){
// MessageBox.alert( {
// title : '确认框',
// message : '不存在id为'+id+'的控件'
// });
// return;
// }
			var rowData = this.getRow(id).getRowSet.getRowData(0);
			if(rowData == null){
				return null;
			}
			var store = this.getDataStore(id);
			var ds = new unieap.ds.DataStore();
			ds.setName(store.getName());
			ds.setRowSetName(store.getRowSetName());
			ds.getRowSet().addRow(rowData,true);
			return ds;
		},
		
		/**
		 * @summary:
		 * 		获得Grid中某行数据的某个属性的值，当不传入index值时，默认取Grid所有选中的第一行对应的属性值
		 * @param:
		 * 		{string}id
		 * 		对应grid的id
		 * @param:
		 * 		{string}propertyName
		 * 		属性的名称
		 * @param:
		 * 		{number}index
		 * 		要获取的数据的行索引；不传入此值时，取Grid选中的第一行
		 * @example:
		 *  | view.grid.getPropertyValue('grid1','id',2);
		 */
		getPropertyValue : function(id, propertyName, index) {
			var grid = unieap.byId(this.getRealId(id));
// if (!grid) {
// MessageBox.alert( {
// title : '确认框',
// message : '不存在id为'+id+'的控件'
// });
// return;
// }
			var store = grid.getBinding().getDataStore();
			if (!store) {
				return null;
			}
			var rowData = null;
			if(index != null){
				var row = store.getRowSet().getRow(index);
				if (!row) {
					return null;
				}
				rowData = row.getData();
			} else {
				var rowIndexs = grid.getManager("SelectionManager").getSelectedRowIndexs();
				if(rowIndexs != null && rowIndexs.length > 0){
					var index = rowIndexs[0];
					var row = store.getRowSet().getRow(index);
					if (!row) {
						return null;
					}
					rowData = row.getData();
				}else{
					return null;
				}
			}
			
			return rowData[propertyName];
			
		},

		/**
		 * @summary:
		 * 		设置Grid中某行数据的某个属性的值，当不传入index值时，默认设置Grid所有选中的第一行对应的属性值
		 * @param:
		 * 		{string}id
		 * 		对应grid的id
		 * @param:
		 * 		{string}propertyName
		 * 		属性的名称
		 * @param:
		 * 		{object}propertyValue
		 * 		属性值
		 * @param:
		 * 		{number}index
		 * 		要设置数据的行索引；不传入此值时，取Grid选中的第一行
		 * @example:
		 * |  view.grid.setPropertyValue('grid1','id','123456',2);
		 */
		setPropertyValue : function(id, propertyName, propertyValue, index) {
			var grid = unieap.byId(this.getRealId(id));
// if (!grid) {
// MessageBox.alert( {
// title : '确认框',
// message : '不存在id为'+id+'的控件'
// });
// return;
// }
			var store = grid.getBinding().getDataStore();
			if (!store) {
				return;
			}
			var resultRow = null;
			var xtreeIndex = null;
			if(index != null){
				xtreeIndex = index;
				var row = store.getRowSet().getRow(index);
				if (!row) {
					return;
				}
				resultRow = row;
			} else {
				var rowIndexs = grid.getManager("SelectionManager").getSelectedRowIndexs();
				if(rowIndexs != null && rowIndexs.length > 0){
					var index = rowIndexs[0];
					xtreeIndex = index;
					var row = store.getRowSet().getRow(index);
					if (!row) {
						return;
					}
					resultRow = row;
				}else{
					return;
				}
			}
			
			resultRow.setItemValue(propertyName, propertyValue);
			var xtree = grid.getManager("XTreeManager");
			if(xtree){
				grid.getManager('ViewManager').refreshRow(xtreeIndex);
			}
		}
	});	
}

if (!dojo._hasResource["unieap.view.Tree"]) {
	dojo.provide("unieap.view.Tree");
	dojo.declare("unieap.view.Tree", unieap.view.Control, {
		getNodeDataStore:function(id,object){
			var ds = new unieap.ds.DataStore();
			var rowSetName = unieap.byId(this.getRealId(id)).getBinding().getStore().getRowSetName();
			ds.setRowSetName(rowSetName);
			if(object instanceof unieap.tree.TreeNode){
				var data = object.getData();
				ds.getRowSet().addRow(data,true,false);
			}else if(object instanceof Array){
				ds.getRowSet().addRows(dojo.clone(object));
			}else{
				ds.getRowSet().addRow(object,true,false);
			}
			return ds;
		
		},
		 /**
		 * @summary:
		 * 		用于树初始化和加载数据,在树控件的某一节点下添加store返回的节点 
		 * @param:
		 * 		{string}id
		 * 		对应tree的id
		 * @param:
		 * 		{object}selectedNode
		 * 		指定的节点；当不传入此值时，默认为当前节点
		 * @param:
		 * 		{object}store
		 * 		子节点对应的dataStore
		 * @param:
		 * 		{object}configMap
		 * 		节点加载数据和显示的配置，结构为键值对形式,当不传入此参数时，使用tree的默认配置。
		 * @example:
		 *   |   view.tree.addChildren('tree1',store1);
		 */
		addChildren:function(id,selectedNode,store,configMap,coverage)
		{
			var treeDs = new unieap.ds.DataStore();
			
			var tree = unieap.byId(this.getRealId(id));
// if(!tree){
// MessageBox.alert( {
// title : '确认框',
// message : '不存在id为'+id+'的控件'
// });
// return;
// }
			if (!store) {
				return;
			}
			var count = store.getRowSet().getRowCount();
			var id = tree.getBinding().id;
			var label = tree.getBinding().label;
			var parent = tree.getBinding().parent;
			var leaf = tree.getBinding().leaf;
			
// var children = selectedNode.getChildren();
// if (children && children.length > 0) {
// for (var i = 0; i < children.length; i++) {
// var data = children[i];
// treeDs.getRowSet().addRow(data);
// }
// }
			
			if(count > 0 ){
				// 遍历返回的dataStore
				for(var i = 0;i < count; i++){
					var rowData = {};
					
// for(var key in configMap){
// var valueInMap = configMap[key];
// if(key == 'leaf' && typeof valueInMap == 'boolean'){
// rowData[leaf] = valueInMap;
// }else{
// var rowSet = store.getRowSet();
// var value = rowSet.getItemValue(i, valueInMap);
// if (value) {
// rowData[key] = value;
// }
// }
// }
					var rowSet = store.getRowSet();
					if (configMap) {
						if (typeof configMap['leaf'] == 'boolean') {
							rowData[leaf] = configMap['leaf'];
						} else {
							rowData[leaf] = rowSet.getItemValue(i, configMap['leaf']);
						}
						rowData[id] =  rowSet.getItemValue(i, configMap['id']);
						rowData[parent] =  rowSet.getItemValue(i, configMap['parent']);
						rowData[label] =  rowSet.getItemValue(i, configMap['label']);
						
						var rowDataInStore = rowSet.getRowData(i);
						for (var key in rowDataInStore) {
							if (key == configMap['id'] || key == configMap['leaf'] || key == configMap['parent']
								   || key == configMap['label']) {
								continue;
							} else {
								rowData[key] = rowDataInStore[key];
							}
							
						}
						
					} else {
						rowData[id] =  rowSet.getItemValue(i, id);
						rowData[parent] =  rowSet.getItemValue(i, parent);
						rowData[label] =  rowSet.getItemValue(i,label);
						rowData[leaf] = rowSet.getItemValue(i, leaf);
						
						var rowDataInStore = rowSet.getRowData(i);
						for (var key in rowDataInStore) {
							if (key == id || key == parent || key == label
								   || key == leaf) {
								continue;
							} else {
								rowData[key] = rowDataInStore[key];
							}
							
						}
						
					}
					if(coverage == "append"){
						tree.createNode(rowData,selectedNode);
					}else{
						treeDs.getRowSet().addRow(rowData,true);
					}
				}
				if(coverage != "append"){
					tree.getBinding().setDataStore(selectedNode, treeDs);
				}
			}
		},
		
		init:function(id,store,configMap){
// if (!unieap.byId(unieap.getRealId(id))) {
// MessageBox.alert( {
// title : '确认框',
// message : '不存在id为'+id+'的控件'
// });
// return;
// }
			if(!store){
				return;
			}
			var tree = unieap.byId(this.getRealId(id));
			if(configMap){              // 懒加载
				var rootNode = tree.getRootNode();
				if(rootNode){
					this.addChildren(id,rootNode,store,configMap);
				}
			}else{                      // 全加载
				var binding = tree.getBinding(),
					dataCenter = this.getDataCenter(),
					storeName = binding.getStore().getName(),
					treeDs = dataCenter.getDataStore(storeName);
				treeDs.append(store, "replace");
				treeDs.setName(storeName);
				binding.setDataStore(
						tree.getRootNode(),
						treeDs);
			}
		},
		/**
		 * @summary:
		 * 		使用dataStore中的数据初始化tree 
		 * @param:
		 * 		{string}id
		 * 		对应tree的id
		 * @param:
		 * 		{object}store
		 * 		用于初始化tree的dataStore
		 * @example:
		 *   |   view.tree.setDataStore('tree1',store1);
		 */
		setDataStore : function(id, store){
// if (!unieap.byId(unieap.getRealId(id))) {
// MessageBox.alert( {
// title : '确认框',
// message : '不存在id为'+id+'的控件'
// });
// return;
// }

			if(store!=null )
				if(unieap.byId(this.getRealId(id)).getBinding()!=null){
                    var rowSetName = unieap.byId(this.getRealId(id)).getBinding().getStore().getRowSetName();
                    store.setRowSetName(rowSetName);
				}
			this.init(id, store);
		}, 
		/**
		 * @summary:
		 * 		删除tree指定的某个节点
		 * @param:
		 * 		{string}id
		 * 		对应tree的id
		 * @param:
		 * 		{object}nodes
		 * 		指定的节点；当不传入此值时，默认为当前节点
		 * @example:
		 *   |   view.tree.deleteNode('tree1',node);
		 */
		deleteNode : function(id, node) {
			var tree = unieap.byId(this.getRealId(id));
// if (!tree) {
// MessageBox.alert( {
// title : '确认框',
// message : '不存在id为'+id+'的控件'
// });
// return;
// }
			if(!node){
				node = tree.getCurrentNode();
			}
			if (tree && node) {
				tree.deleteNode(node,true);
			}
		},
		/**
		 * @summary:
		 * 		删除tree指定的某些节点
		 * @param:
		 * 		{string}id
		 * 		对应tree的id
		 * @param:
		 * 		{object}nodes
		 * 		指定的节点的数组；当不传入此值时，默认为当前节点
		 * @example:
		 *    |  view.tree.deleteNodes('tree1',nodes);
		 */
		deleteNodes : function(id, nodes) {
// if (!unieap.byId(unieap.getRealId(id))) {
// MessageBox.alert( {
// title : '确认框',
// message : '不存在id为'+id+'的控件'
// });
// return;
// }
			for (var i = 0; i < nodes.length; i++) {
				this.deleteNode(id, nodes[i]);
			}
		},
		/**
		 * @summary:
		 * 		更新tree指定的节点
		 * @param:
		 * 		{string}id
		 * 		对应tree的id
		 * @param:
		 * 		{object}node
		 * 		指定的节点
		 * @param:
		 * 		{object}node
		 * 		存放更新数据的dataStore
		 * @example:
		 *   |   view.tree.updateNode('tree1',node,store1);
		 */
		updateNode : function(id,node,store) {
			var tree = unieap.byId(this.getRealId(id));
// if (!tree) {
// MessageBox.alert( {
// title : '确认框',
// message : '不存在id为'+id+'的控件'
// });
// return;
// }
			var id = tree.getBinding().id;
			var label = tree.getBinding().label;
			var parent = tree.getBinding().parent;
			var leaf = tree.getBinding().leaf;
			var row = tree.getBinding().getRow(node);
			var treeRowData = row.getData();
			var rowData = store.getRowSet().getRowData(0);
// for (var key in treeRowData) {
// row.setItemValue(key, rowData[key]);
// }
			if (rowData[id]) {
				row.setItemValue(id, rowData[id]);
			}
			if (rowData[label]) {
				row.setItemValue(label, rowData[label]);
			}
			if (rowData[parent]) {
				row.setItemValue(parent, rowData[parent]);
			}
			if (rowData[leaf]) {
				row.setItemValue(leaf, rowData[leaf]);
			}
			
			for (var key in rowData) {
				if (key != id && key != label && key != parent && key != leaf) {
					row.setItemValue(key, rowData[key]);
				}
			}
			
			tree.freshNodeLabel(node);
		}, 
		/**
		 * @summary:
		 * 		获得tree指定节点的属性值
		 * @param:
		 * 		{string}id
		 * 		对应tree的id
		 * @param:
		 * 		{object}node
		 * 		指定的节点
		 *  @param:
		 * 		{string}propertyName
		 * 		属性名称
		 * @example:
		 *    |  view.tree.getPropertyValue('tree1',node,'id');
		 */
		getPropertyValue : function(id, node, propertyName) {
			var tree = unieap.byId(this.getRealId(id));
// if(!tree){
// MessageBox.alert( {
// title : '确认框',
// message : '不存在id为'+id+'的控件'
// });
// return;
// }
			if (!node) {
				return;
			}
			return node.getData()[propertyName];
		}, 
		
		getChildrenNodes:function(node,childrenNodes) {
			if(node == null){
				return;
			}
			var children = node.getChildren();
			if(children == null){
				return;
			}
			for(var i = 0; i < children.length;i++){
				childrenNodes.push(children[i]);
				this.getChildrenNodes(children[i],childrenNodes);
			}
		},
		
		/*
		 * 获得一棵树的所有节点 id:树控件的id isContainRoot：true代表包含根节点，false代表不包含根节点
		 */
		 getAllNodes:function(id,isContainRoot,node){
			var tree = unieap.byId(this.getRealId(id));
// if(!tree){
// MessageBox.alert( {
// title : '确认框',
// message : '不存在id为'+id+'的控件'
// });
// return;
// }
			if(!node){
				var root = tree.getRootNode();
				var nodes = [];
				if(isContainRoot){
					nodes.push(root);
				}
				this.getChildrenNodes(root,nodes);
				return nodes;
			}else{
				var nodes = [];
				if(isContainRoot){
					nodes.push(node);
				}
				this.getChildrenNodes(node,nodes);
				return nodes;
			}
			
		 },
		/**
		 * @summary:
		 * 		设置tree指定节点的属性值
		 * @param:
		 * 		{string}id
		 * 		对应tree的id
		 * @param:
		 * 		{object}node
		 * 		指定的节点
		 * @param:
		 * 		{string}propertyName
		 * 		属性名称
		 * @param:
		 * 		{string}propertyValue
		 * 		属性值
		 * @example:
		 *   |   view.tree.setPropertyValue('tree1',node,'id','123456');
		 */
		setPropertyValue : function(id, node, propertyName, propertyValue) {
			var tree = unieap.byId(this.getRealId(id));
// if (!tree) {
// MessageBox.alert( {
// title : '确认框',
// message : '不存在id为'+id+'的控件'
// });
// return;
// }
			if(!node){
				return;
			}
			var row = tree.getBinding().getRow(node);
			row.setItemValue(propertyName, propertyValue);
		}
	});	
}
if (!dojo._hasResource["unieap.view.Map"]) {
	dojo.provide("unieap.view.Map");
	dojo.declare("unieap.view.Map", null, {
		
		mapToJson:function(mapData){
			var jsonData = {};
			if(!mapData){
				return null;
			}
			for(var key in mapData){
				if(mapData[key] instanceof unieap.ds.DataStore){
					jsonData[key] = mapData[key].toJson();
				}else{
					jsonData[key] = mapData[key];
				}
			}
			return jsonData;
		}
	});	
}

if (!dojo._hasResource["unieap.view.Entry"]) {
	dojo.provide("unieap.view.Entry");
	dojo.declare("unieap.view.Entry", null, {
		view : null,
		
		postscript: function(view){
			this.view = view ;
			this.create();
		},
		create : function(){
			// 子类在此方法中实现初始化代码
		},
		getView : function(){
			return view;
		},
		show : function(){
			// 子类应重载此函数实现
			alert("unieap.view.Entry.show");
		}
		
	});	
}

if (!dojo._hasResource["unieap.view.Processor"]) {
	dojo.provide("unieap.view.Processor");
	dojo.declare("unieap.view.Processor", null, {
		view : null,
		
		pattern : unieap.global.dataOption,
		
		postscript: function(view){
			this.view = view ;
			this.create();
		},
		create : function(){
			// 子类在此方法中实现初始化代码
		},
		getView : function(){
			return view;
		},
		getCodeList:function(name){
			unieap.Action.getCodeList(name);
		},
		setDataOption : function(processorName,dataOption){
			var processor = this[processorName],
				pattern = this.pattern;
			if(typeof(processor._pattern) == "undefined"){
				processor._pattern = {
					parameters:pattern.parameters,
					dataStores:pattern.dataStores
				};
			}
			processor._pattern.dataStores = dataOption;
		},
		setDataStoreOption : function(processorName,dataStoreName,dataOption){
			var processor = this[processorName],
				pattern = this.pattern;
			if(typeof(processor._pattern) == "undefined"){
				processor._pattern = {
					parameters:pattern.parameters,
					dataStores:{}
				};
			}
			processor._pattern.dataStores[dataStoreName] = dataOption;
		},
		collect : function(dc,pattern){
			if(typeof(pattern["dataStores"])=="string"){
				return dc.collect(pattern);
			}else{
				//默认dataStore的收集策略
				var policy = this.pattern["dataStores"],
					dataStores = dc.getDataStores(),
					tdc = dc.collect(pattern),
					pDataStores = pattern["dataStores"];
				//将未设定的dataStore按默认收集策略收集
				for(var key in dataStores){
					if(!pDataStores[key]){
						tdc.addDataStore(key,dataStores[key].collect(policy));
					}
				}	
				return tdc;
			}
		},
		
//		/**
//		 * @summary:
//		 * 		view模型所生成的processor脚本中定义的各个processor方法的流程逻辑。
//		 * @param:
//		 * 		{object}args
//		 * 		processor方法的参数集合，结构参见example
//		 * @param:
//		 * 		{function}_load
//		 * 		ria内部使用的成功回调方法
//		 * @param:
//		 * 		{function}_error
//		 * 		ria内部使用的失败回调方法
//		 * @return 
//		 * 		{unieap.ds.DataCenter|void} 
//		 * 		同步的时候返回DataCenter对象，异步的时候无返回值
//		 * @example:
//		 |    run({
//		 |      //Processor名
//		 |	    processorName: "queryOrder",
//		 |	    
//		 |	    //用户参数信息
//		 |	    uParameters: [{
//		 |	            name: "order",
//		 |	            type: "string",
//		 |	            javaType: "string",
//		 |	            value: order
//		 |	        }
//		 |	    ],
//		 |	    
//		 |	    //View名
//		 |	    viewName: "saleMgr",
//		 |	    
//		 |	    //同步标识,若为同步请求，将生成该域为true
//		 |	    syncRequest: true|undefined,
//		 |	    
//		 |	    //请求成功回调，若未指定，将为undefined
//		 |	    loadSuccessed: view.queryOrderSuccess,
//		 |	    
//		 |	    //请求失败回调,若未指定，将为undefined
//		 |	    loadFailed: view.queryOrderFailed,
//		 |	    
//		 |	    //分页信息,若未设定，将为undefined
//		 |	    pagingInfo: {
//		 |	        pageNum: 1,
//		 |	        pageSize: 10,
//		 | 	        calcRecordCount: true
//		 |	    },
//		 |	    
//		 |	    //文件上传标识,若上传文件，BO方法中有参数为Form类型，将生成该域为true
//		 |	    fileUpload: true|undefined,
//		 |	    
//		 |	    //文件下载标识，若下载文件，BO方法返回File、Workbook、FileAttachment类型值，将生成该域为true
//		 |	    fileExport: true|undefined,
//		 |	    
//		 |	    //请求CodeList数据标识,若请求返回值是codelist类型，将生成该域为true
//		 |	    returnCodelist: true|undefined,
//		 |	    
//		 |	    //请求BO信息,若请求对象是后台BO方法，将生成该域
//		 |	    boInvoked: {
//		 |	        dcID: "sale",
//		 |	        boID: "sale_orderBO_bo",
//		 |	        methodName: "queryOrder",
//		 |	    },
//		 |	    
//		 |	    //命名查询信息,若请求类型为命名查询，将生成该域
//		 |	    namedQuery: {
//		 |	        id: "qName",
//		 |	    },
//		 |	    
//		 |	    //声明查询信息，若请求类型为声明查询，将生成该域
//		 |	    statementQuery: {
//	     |           statementName: "test,test2",
//	     |           statementRef: "test,test2",
//	     |           dcId: "testDC,testDC",
//	     |           pageNumber: "'',''",
//	     |           pageSize: "'',''"
//	     |      },
//	     |       
//	     |      //是否显示进度条
//	     |      showLoading:true|false,
//		 |		
//		 |		//旧版本grid导出方法的兼容标记，若采用旧的方式，将会生成该域为true
//		 |		serverExportCompatible: true|undefined
//         |
//		 |   }, _load, _error);
//		 */
		run : function(args, _load, _error) {
			if(unieap.helpTipMode) return;
			var path = unieap.WEB_APP_NAME + "/techcomp/ria/commonProcessor?page=",
				self = this,selfView = this.view;
			var page = unieap.WEB_PAGE_NAME ? unieap.WEB_PAGE_NAME:'test';
			var menuId = null;
			//多页签模式下 unieap.WEB_PAGE_NAME 被污染
			if (this.view){
				//args.viewName = this.view.viewName;
				args._rootNodeId = this.view._rootNodeId;
	
			}
			if (this.view && this.view.dataCenter){
				menuId = this.view.dataCenter.getParameter('menuId') || this.view.dataCenter.getParameter('unieapMenuId')
			}
			// if (args._rootNodeId){
			// 	var viewContext = unieapViewContextHolder[args._rootNodeId];
			// 	if (viewContext){
			// 		var declaredClass = viewContext[0].declaredClass;
			// 		if (declaredClass){
			// 			page = declaredClass.replace(/\./g,'-').substring(0,declaredClass.length-5).replace('_','');
			// 		}
			//
			// 	}
			// }
			
			window['lastArgs'] = window['lastArgs'] || [];
			var checkGlobal = function(args) {//如果查询到 global.lastArgs有该数据就不增加
				var $args = window['lastArgs'],isInArgs = false;
				for(var i=0;i<$args.length;i++){
					if($args[i].processorName === args.processorName){
						window['lastArgs'][i] = args;
						isInArgs = true;
						break
					}
				}
				!isInArgs&&window['lastArgs'].push(args);
			}
            path =  path + page + '&menuId=' + menuId;
		    //初始准备一些必要的变量
		    var view = this.view,
		        pattern = this.pattern,
		        dataCenter = view.dataCenter,
		        pFuncName = args.processorName,
		        pFunc = this[pFuncName],
		        uParameters = args.uParameters,
		        dc = new unieap.ds.DataCenter(),
		        paraNameArr = [],
		        paraTypeArr = [],
		        paraJavatypeArr = [],
		        para;
		    //处理请求参数值与类型的整理
		    for (var i = 0,l = uParameters.length; i<l;i++) {
		        para = uParameters[i];
		        if (para.type === "pojo" || para.type === "pojoList")
		            dc.addDataStore(para.name, para.value);
		        else if(para.type.indexOf("map") === 0)
		        	dc.setParameter(para.name.substr(0,para.name.indexOf("(")),view.mapToJson(para.value));
		        else
		            dc.setParameter(para.name, para.value);
		        paraNameArr.push(para.name);
		        paraTypeArr.push(para.type);
		        paraJavatypeArr.push(para.javaType);
		    }
		    dc.setParameter("_parameters", paraNameArr.join(","));
			dc.setParameter("_parameterTypes", paraTypeArr.join(","));

			if(this.view){ //记录lastArgs 里面包含的信息 用以导出
				this.view.lastArgs = this.view.lastArgs || [];
				this.view.lastArgs[args.processorName] = args;
				checkGlobal(args);
			}
			
		    //处理“BO调用”或“命名查询”或“Statement查询”参数设定
		    if (args.boInvoked) {
		        var boInvoked = args.boInvoked;
		        dc.setParameter('dcID', boInvoked.dcID);
		        dc.setParameter("_boId", boInvoked.boID);
		        dc.setParameter("_methodName", boInvoked.methodName);
		        dc.setParameter("_methodParameterTypes", paraJavatypeArr.join(","));
		    } else if (args.namedQuery) {
		        var namedQuery = args.namedQuery;
		        dc.setParameter("_namedQuery", namedQuery.id);
		        dc.setParameter("_queryParameterTypes", paraTypeArr.join(","));
		    } else if (args.statementQuery) {
		    	var statementQuery = args.statementQuery;
		    	dc.setParameter("_statement", statementQuery.statementName);
		        dc.setParameter("_statementRef", statementQuery.statementRef);
		        dc.setParameter("_dcId", statementQuery.dcId);
		        dc.setParameter("_statementPageNumber", statementQuery.pageNumber);
		        dc.setParameter("_statementPageSize", statementQuery.pageSize);
		        var pi = {};
		    }
		    //处理自动分页参数设定
		    if (args.pagingInfo) {
		        var pi = args.pagingInfo;
		        dc.setParameter("_pageNumber", pi.pageNumber);
		        dc.setParameter("_pageSize", pi.pageSize);
		        dc.setParameter("_calcRecordCount", pi.calcRecordCount);
			}
			 //使用原调用方法进行分页 zhaohf
			 if($.isArray(_load) && _load.length==2 && _load[0].pageSize){
				dc.setParameter("_pageNumber", _load[0].pageNumber);
				dc.setParameter("_pageSize", _load[0].pageSize);
				dc.setParameter("_calcRecordCount", true);
		   }
		   var checkPageNub = function(uParameters){
			   var nub = 0;
			   for(var j=0;j<uParameters.length;j++){
				if(uParameters[j].name == 'pageNumber'){
					nub = uParameters[j].value;
					continue
				}
			   }
			   return nub == 0?false:nub
		   }
		   //防止uParameters传进来分页参数导致分页失效
		   if (args.uParameters&&checkPageNub(args.uParameters)) {
				dc.setParameter("_pageNumber",checkPageNub(args.uParameters));
		   }
		    //处理文件上传参数设定
		    if (args.fileUpload)
		    {
		    	var formIdIndex = dojo.indexOf(paraJavatypeArr,"com.viewhigh.vadp.framework.core.mvc.forunieap.ds.Form");
		    	var d = view.form.getDataStore(uParameters[formIdIndex].value);
		    	if(d)
		    		dc.addDataStore('_uploadFormStore', d);
		    }
		    //处理高级查询参数设定
		    dc.addDataStore(dataCenter.getDataStore("_advancedQueryConditionStore"));
		    //
		    for (var _para in pFunc) {
		        var _paraValue = pFunc[_para];
		        if (_para == "_pattern") {
		            pattern = _paraValue;
		        } else {
		            dc.setParameter(_para, _paraValue);
		        }
		        delete pFunc[_para];
		    }
			if(dc['parameters'] && dc.parameters.hasOwnProperty('pageSize') && dc.parameters._pageSize){ //判断页面是否包含pageSize字段 如果包含了 让他跟_pageSize同步
				dc.parameters.pageSize = dc.parameters._pageSize
			}
		    // 处理文件导出或为BO调用、命名查询以及文件上传等操作发送请求
		    if (args.fileExport === true) {
		    	handleFileExport();
		    } else {
		        if (doBeforeRequest(dc, view, pFuncName)) {
		            var baseArgs = {
		                url: path,
		                dc: dataCenter,
						timeout : args.timeout,
		                load: load,
		                error: error
		            };
		            if (args.fileUpload) {
		                return unieap.Action.upload(
		                    dojo.mixin(baseArgs, {
		                    form: view._rootNodeId + uParameters[formIdIndex].value,
		                    parameters: {
		                        'dc': self.collect(dc, pattern).toJson()
		                    }
		                }),args.showLoading);
		            } else {
						if (args) {
							window['requestInfo'] = {data:dojo.mixin(baseArgs, {
								sync: true
							}),dc:this.collect(dc, pattern)}
						}
		                return unieap.Action.requestData(
		                    dojo.mixin(baseArgs, {
		                    sync: args.syncRequest
		                }), this.collect(dc, pattern),args.showLoading);
		            }
		        }
		    }

		    function load(dc) {
		        if (doBeforeSuccessResponse(dc, view, pFuncName)) {
					//记录分页信息   
					
		            // if (typeof pi !== "undefined") { //先记录processorInfo 方便导出
		                var dataStores = dc.getDataStores(),
		                    pValues = [],
		                    processorInfo = {
		                        view: args.viewName,
		                        name: pFuncName,
		                        parameters: pValues
							};
							

		                dojo.forEach(uParameters, function(para) {
							//防止页面传递进来的参数带gridStore 或者 _dataStore 无限循环导致 toJosn方法的时候堆栈溢出
						if (para.value && para.value['gridStore']) {
							para.value['gridStore'] = {}
						};
						try{
		                    pValues.push(para.value === "" ? "" : unieap.toJson(para.value));
						}catch (e) {
							console.log(e);
							if (typeof para.value  == 'object') {
							var paraVal = para.value;
							var delDateStore = function (data) {
								for (key in data) {
									if (typeof data[key] == 'object') {
										if (key == '_dataStore') {
											delete data[key]
										};
										delDateStore(data[key])
						
									}
								}
								return data
							};
							para.value = delDateStore(paraVal);
						}
							pValues.push(para.value === "" ? "" : unieap.toJson(para.value));
						}
		                });
		                for (var key in dataStores) {
							dataStores[key].setParameter('processor', processorInfo);
						}
							// })
		            if(args.serverExportCompatible)//兼容旧的Grid导出实现方式
		            {
		            	if (dataCenter.getHeaderAttribute(pFuncName) == "serverExport") {
                            var dataStores = dc.getDataStores();
                            for (var key in dataStores) {
                                var _ds = dataStores[key];

                                if (dataCenter.getDataStore("_advancedQueryConditionStore")) {
                                    _ds.setParameter("_advancedQueryConditionStore", dataCenter.getDataStore("_advancedQueryConditionStore").toJson());
                                }
                                
                                for(var i=0,l=uParameters.length;i<l;i++)
                                {
                                	var p = uParameters[i];
                                	if(p.name === "pageNum")
                                		_ds.setParameter("pageNum", 1);
                                	else if(p.name === "pageSize")
                                		_ds.setParameter("pageSize", _ds.getRecordCount());
                                	else {
                                		if (p.type === "pojo" || p.type === "pojoList")
                                			_ds.setParameter(p.name, p.value.toJson());
                        		        else if(p.type.indexOf("map") === 0)
                        		        	_ds.setParameter(p.name.substr(0,p.name.indexOf("(")),view.mapToJson(p.value));
                        		        else
                        		        	_ds.setParameter(p.name, p.value)
                                		}
                                }
                                
                                _ds.setParameter("_parameters", paraNameArr.join(","));
                                _ds.setParameter("_parameterTypes", paraTypeArr.join(","));
                                
                                if (args.boInvoked) {
                    		        var boInvoked = args.boInvoked;
                    		        _ds.setParameter("_boId", boInvoked.boID);
                    		        _ds.setParameter("_methodName", boInvoked.methodName);
                    		        _ds.setParameter("_methodParameterTypes", paraJavatypeArr.join(","));
                    		    }
                            }
                        }
		            }
		            //缓存Codelist
		            if (args.returnCodelist === true) {
		                var ds = dc.getSingleDataStore();
		                if (ds) {
		                    var name = ds.getName(),
		                        timeStamp = dc.getParameter(name);
		                    unieap.setDataStore(ds, window.dataCenter, true, timeStamp);
		                }
		            }
					_load &&typeof(_load)=='function'&& _load(dc);
		            args.loadSuccessed && args.loadSuccessed(dc);
		        }
		        doAfterSuccessResponse(dc, view, pFuncName);
		    }

		    function error(xhr) {
		        if (doBeforeFailedResponse(dc, view, pFuncName)) {
		        	_error && _error(xhr);
		        	if(args.loadFailed){
		        		args.loadFailed(xhr)
		        	}else{
		   			    _exceptionProcess(xhr);
		        	}
		        }
		        doAfterFailedResponse(dc, view, pFuncName);
		    }

		    function handleFileExport() {
		        var form = dojo.byId("unieap_export_form"),
		            iframe;
		        if (!form) {
		            if (dojo.isIE < 9) {
		                iframe = dojo.create("<iframe name='exportIframe' style='border:0px' width='0px' height='0px'></iframe>");
		            } else {
		                iframe = dojo.create("iframe");
		                dojo.style(iframe, "border", "0px");
		                iframe.setAttribute("name", "exportIframe");
		                iframe.setAttribute("width", "0px");
		                iframe.setAttribute("height", "0px");
		            }
		            dojo.place(iframe, dojo.body())
		            form = dojo.create("form", {
		                id: "unieap_export_form",
		                name: "unieap_export_form",
		                method: "post",
		                target: 'exportIframe'
		            });
		            var input = dojo.create("input", {
		                name: "data",
		                type: "hidden"
		            });
		            dojo.place(input, form);
		            dojo.place(form, document.body);
		        } else {
		            input = form.firstChild;
		        }
		        input.value = self.collect(dc, pattern).toJson();
		        form.action = path;
		        if (dc.getParameter("isPreView") == true) {
		            form.target = "_blank";
		        }
		        form.submit();
			}
			
		}
	});	
}


if (!dojo._hasResource["unieap.view.MessageTrigger"]) {
	dojo.provide("unieap.view.MessageTrigger");
	dojo.declare("unieap.view.MessageTrigger", null, {
		view : null,
		messageHandlers : null,

		postscript : function(view) {
			this.view = view;
			this.messageHandlers = {};
		},

		getView : function() {
			return view;
		},

		messageMetaInfo : {},

		setMessageMetaInfo : function(messageMetaInfo) {
			this.messageMetaInfo = messageMetaInfo;
		},

		getMessageMetaInfo : function() {
			return this.messageMetaInfo;
		},
		
//		/*filterChain
//		 {
//		 	filters:
//		 	[
//		 		{
//		 			type:"built-in",
//		 			parameter:
//		 			{
//		 				filterName:"mappingConverter",
//		 				arguments:...
//		 			}
//		 		},
//		 		{
//		 			type:"custom-method",
//		 			method: function(in){return out;}
//		 		}
//		 	]
//		 }
//		 * */
		builtInFilters : {
			mappingConverter : function(data, parameters/*[2，3，1，null]*/) {
				var result = [];//保存映射转换后的参数列表值
				for(var i = 0,l = parameters.length; i<l; i++)
				{
					if(parameters[i]==-1)
					{
						//映射值为-1的，表示无映射值，设为null
						result[i] = null;
					}
					else if(typeof parameters[i] ==="object" && typeof parameters[i].staticValue != "undefined")
					{
						////映射值为静态值的情况
						result[i] = parameters[i].staticValue;
					}
					else if(/^(0|[1-9]\d*)\..*$/.test(parameters[i]))
					{
						//如果映射值为：2.name 形式的的情况，表示为DataStore变量的某一个域（数字表示参数序号，字符串表示DataStore的域名）
						var splits = parameters[i].split(".");
						if(splits.length >= 2)
						{
							var seq = splits.shift();
							var itemName = splits.join(".");
							if(data[seq]==null || data[seq].getRowSet()==null ||data[seq].getRowSet().getRow(0)==null)
								result[i] = null;
							else
								result[i] = data[seq].getRowSet().getRow(0).getItemValue(itemName);
						}
						else 
							//格式错误，设为null
							result[i] = null;
					}
					else if(/^(0|[1-9]\d*)$/.test(parameters[i]))
					{
						//如果映射值为单纯一个序号的情况
						result[i] = data[parameters[i]];
					}
					else
						//格式错误，设为null
						result[i] = null;
				}
				return result;
			}
		},

		bind : function(messageType, handler, context, filterChain) {
			if (typeof this.messageHandlers[messageType] == "undefined") {
				this.messageHandlers[messageType] = [];
			}
			context = context ? context : null;
			this.messageHandlers[messageType].push( {
				handler : handler,
				context : context,
				filterChain: filterChain
			});
		},

		trigger : function(messageType, args) {
			if (this.messageHandlers[messageType] instanceof Array) {
				/*将传入的arguments对象转换为数组格式便于操作*/
				var newArgs = [];
				for ( var i = 0, len = args.length; i < len; i++) {
					newArgs.push(args[i]);
				}
				var newArgsBak = [];
				for ( var i = 0, len = newArgs.length; i < len; i++) {
					newArgsBak.push(newArgs[i]);
				}				
				/*遍历该消息的所有的监听者*/
				var messageHandlers = this.messageHandlers[messageType];
				for ( var i = 0, len = messageHandlers.length; i < len; i++) {
					if(messageHandlers[i].filterChain)
					{
						/*若某个监听者连接中，设定了过滤器链，则将消息内容按过滤链的设定依次进行处理*/
						var filters = messageHandlers[i].filterChain.filters;
						for(var j = 0, len2 = filters.length; j < len2; j++)
						{
							//内置过滤器
							if(filters[j].type === "built-in")
							{
								newArgs = this.builtInFilters[filters[j].parameters.filterName](newArgs,filters[j].parameters.arguments);
							}
							//用户自定义过滤器
							else if(filters[j].type === "custom-method")
							{
								newArgs = filters[j].method(newArgs);
							}
						}
					}
					else
					{
						//无映射转换的情形下，直接按顺序对应，并且以监听参数为准（参数列表长度）
						newArgs = newArgs.slice(messageHandlers[i].handler.length);
					}
					//最终的消息结构尾部加上消息元信息
					newArgs.push(this.getMessageMetaInfo());
					messageHandlers[i].handler.apply(
							messageHandlers[i].context, newArgs);
					//ReStore 变量 newArgs，以便传递给下一个注册的监听器使用
					newArgs=newArgsBak;
				}
			}
		}
	});
}

if (!dojo._hasResource["unieap.view.MessageListener"]) {
	dojo.provide("unieap.view.MessageListener");
	dojo.declare("unieap.view.MessageListener", null, {
		view : null,
		postscript: function(view){
			this.view = view ;
		},
		getView : function(){
			return view;
		}
	});
}

dojo.provide("unieap.view.State");

dojo.declare("unieap.view.State",null,{
//	/**
//	 * @declaredClass: unieap.view.State
//	 * @summary: 视图的状态
//	 * @example | <state> | <addControl> | <textBox></textBox> | </addControl> |
//	 *          </state>
//	 */
	
	view:null,
	
//	/**
//	 * @summary: 状态名
//	 */
	name:'',
	
	actions:null,
	
	constructor:function(stateActions,view) {
		this.view=view;
		actions=[];
		dojo.forEach(stateActions,function(action){
			actions.push(new unieap.view.StateAction(action,view));
		});
		this.actions=actions;
		this.set();
	},
	
//	/**
//	 * @summary: 设置状态
//	 */
	set:function(){
		dojo.forEach(this.actions,function(action){
			action.install();
		});
	},
	
//	/**
//	 * @summary: 取消该状态
//	 */
	cancel:function(){
		dojo.forEach(this.actions,function(action){
			action.unInstall();
		});
	}
	
});


dojo.declare("unieap.view.StateAction",null,{
//	/**
//	 * @declaredClass: unieap.view.State
//	 * @summary: 视图的状态描述的最小单位
//	 */
	
//	/**
//	 * @summary: 状态的类型,增加组件,移除组件,设置属性,设置事件
//	 * @ENUM: {'addControl'|'removeControl'|'setProperty'|'setEventHandler'}
//	 */
	type:"",
	
	relativeTo:"",	// targetId
	control:"",		// innerHTML
	position:"",	// before after firstChild lastChild
	target:"",		// targetId
	name:"",		
	value:"",
	handlerFunction:"",
	
	
//	/**
//	 * @summary： 增加某个组件
//	 */
	addControl:function(){
		var t;
		if(!this.position){
			this.position="lastChild";
		}
		if(this.position=="lastChild"||this.position=="firstChild"){
			if(dijit.byId(this.relativeTo)){
				if(dijit.byId(this.relativeTo).containerNode){
					t=dijit.byId(this.relativeTo).containerNode;
				}else{
					t=dijit.byId(this.relativeTo).domNode;
				}
			}
		}
		if(!t){
			t=dojo.byId(this.relativeTo);
		}
		if(!t){
			return;
		}
		var temp=dojo.create('div',{innerHTML:this.control});
		var control=temp.firstChild;
		this.controlId=control.id
		dojo.place(control, t, this.position.replace("Child",""));
		dojo.parser.parse(control.parentNode);
		if(this.onAdd){
			dojo.hitch(this,this.onAdd).apply()
		}
	},
	
//	/**
//	 * @summary: 移除增加的组件
//	 */
	unAddControl:function(){
		if(dijit.byId(this.controlId)){
			dijit.byId(this.controlId).destroyRecursive();
		}else{
			if(dojo.byId(this.controlId)){
				dojo.forEach(dijit.findWidgets(dojo.byId(this.controlId))||[], function(widget){ 
					if(widget.destroyRecursive){
						widget.destroyRecursive(preserveDom);
					}
				});
				dojo.destroy(this.controlId);
			}
		}
	},
	
//	/**
//	 * @summary: 移除某个组件
//	 */
	removeControl:function(){
		var removePosition=dojo.create("div",{style:{width:'10px',height:'10px',display:'inline-block',border:'1px red solid'}});
		if(dijit.byId(this.target)){
			dojo.place(removePosition,dijit.byId(this.target).domNode,'after');
			dijit.byId(this.target).destroyRecursive();
		}else{
			dojo.place(removePosition,dojo.byId(this.target),'after');
			dojo.forEach(dijit.findWidgets(dojo.byId(this.target))||[], function(widget){ 
				if(widget.destroyRecursive){
					widget.destroyRecursive(preserveDom);
				}
			});
			dojo.destroy(this.target);
		}
		this.removePosition=removePosition;
	},
	
//	/**
//	 * @summary: 恢复移除的组件
//	 */
	unRemoveControl:function(){
		var temp=dojo.create('div',{innerHTML:this.control});
		var control=temp.firstChild;
		dojo.place(control, this.removePosition, 'replace');
		dojo.parser.parse(control.parentNode);
		if(this.onUnRemove){
			dojo.hitch(this,this.onUnRemove).apply()
		}
	},
	
//	/**
//	 * @summary： 修改某个组件的属性
//	 */
	setProperty:function(){
		var name=this.name,value=this.value,oldValue=null,target=this.target;
		if(dijit.byId(target)){
			var w=dijit.byId(target);
			var setF=w['set'+name.charAt(0).toUpperCase() + name.substr(1)];
			oldValue=w[name];
			if(setF){
				dojo.hitch(w,setF)(value);
				this._unSetProperty=function(){
					dojo.hitch(w,setF)(oldValue);
				}
			}
		}else{
			if(dojo.indexOf(['width','height','color'],name)!=-1){
				oldValue=dojo.style(dojo.byId(target),name);
				dojo.style(dojo.byId(target),name,value);
				this._unSetProperty=function(){
					dojo.style(dojo.byId(target),name,oldValue);
				}
			}else{
				oldValue=dojo.attr(dojo.byId(target),name);
				dojo.attr(dojo.byId(target),name,value);
				this._unSetProperty=function(){
					dojo.attr(dojo.byId(target),name,oldValue);
				}
			}
		}
		
	},
	
//	/**
//	 * @summary: 恢复修改的属性
//	 */
	unSetProperty:function(){
		if(this._unSetProperty){
			dojo.hitch(this,this._unSetProperty).apply();
			this._unSetProperty=null;
		}
	},
	
	
//	/**
//	 * @summary: 设置事件
//	 */
	setEventHandler:function(){
		this.eh=this.view.connect(this.target,this.name,this.handlerFunction);
	},
	
//	/**
//	 * @summary: 取消设置的事件
//	 */
	unSetEventHandler:function(){
		if(this.eh){
			dojo.disconnect(this.eh);
		}
	},
	
	
	
	constructor:function(action,view){
		this.view=view;
		dojo.mixin(this,action);
	},
	
//	/**
//	 * @summary： 装载一个状态描述
//	 */
	install:function(){
		if(this.type){
			var	action=this[this.type];
			if(action&&typeof action =="function"){
				dojo.hitch(this,action).apply();
			}
		}
	},
	
//	/**
//	 * @summary: 卸载一个状态描述
//	 */
	unInstall:function(){
		if(this.type){
			var	unAction=this["un"+this.type.substring(0,1).toUpperCase() +this.type.substring(1)];
			if(unAction && typeof unAction =="function"){
				dojo.hitch(this,unAction).apply();
			}
		}
	}
	
});
var view = null;
var __viewStack = new Array();
function __connectPageControlEvents()
{
	for(var i = __viewStack.length-1;i>=0;i--)
	{
		var x = __viewStack[i];
		if(dojo.isFunction(x.page_initEvents)) eval("x.page_initEvents();");
	}
}
function __executePageLoadEvents()
{
	for(var i = __viewStack.length-1;i>=0;i--)
	{
		var x = __viewStack[i];
		if(dojo.isFunction(x.page_load)) eval("x.page_load();");
	}
}
function __executePageUnloadEvents()
{
	for(var i = __viewStack.length-1;i>=0;i--)
	{
		var x = __viewStack[i];
		if(dojo.isFunction(x.page_unload)) eval("x.page_unload();");
	}
}
function __executeViewInit()
{
	for(var i = __viewStack.length-1;i>=0;i--)
	{
		var x = __viewStack[i];
		eval("x.init();");
	}
}
function initView(viewClass)
{
	if(view == undefined ||view == null)
 	{
	 	view = new viewClass();
		view.init();
	 	__viewStack.push(view);
		dojo.addOnLoad(function(){
			__connectPageControlEvents();
			// __executeViewInit();
			__executePageLoadEvents();
		});
		dojo.addOnUnload(function(){
			__executePageUnloadEvents();
		});
 	}
	else
	{
 		// 拷贝Processor
 		var _view = new viewClass();
 		// 遍历原有view对象的Processor，记录其方法。
 		var copy = dojo.mixin({}, view.processor);
 		var pageFunctions = new Array();
 		for(var i in copy)
 		{
	 		if(typeof(copy[i])=="function") pageFunctions.push(i + "");
	 	}
	 	// 定义一个内部函数
 		function isPageFunctions(pageFunctions, functionName)
	 	{
		 	for(var i=0;i<pageFunctions.length;i++)
		 	{
			 	if(pageFunctions[i]==functionName)
			 	{
				 	return true;
				}
			}
			return false;
		}
		// 对比_view的Processor，记录需要增加到view的processor上的方法
	 	var copy1 = dojo.mixin({}, _view.processor);
	 	var functionsToAdd = new Array();
	 	for(var i in copy1)
 		{
	 		if(typeof(copy1[i])=="function" && !isPageFunctions(pageFunctions, i+""))
	 		{
	 			functionsToAdd.push(i+"");
		 	}
	 	}
	 	for(var i = 0;i<functionsToAdd.length;i++)
	 	{
		 	eval("view.processor." + functionsToAdd[i] + "=_view.processor." + functionsToAdd[i]);
		}
	 	__viewStack.push(_view);
		_view.init();
 	}
}

if(unieap.view.Form.prototype._getDataStoreBack == null){

    unieap.view.Form.prototype._getDataStoreBack = unieap.view.Form.prototype.getDataStore;

    unieap.view.Form.prototype.getDataStore = function(formId){
        var dataStore = this._getDataStoreBack(formId);
        if(dataStore!=null){
            dataStore.formId = this.getRealId(formId);
        }
        return dataStore;
    }

}

if(unieap.view.Processor.prototype._runBack == null){

    unieap.view.Processor.prototype._runBack = unieap.view.Processor.prototype.run;

	unieap.view.Processor.prototype._setGridPageSize = function(args){
		//设置查询分页
		if(args && args.pagingInfo && args.pagingInfo.pageSize && args.viewName && args.processorName && unieap.gridPageSizeCache){
			var view = args.viewName;
			var pName = args.processorName;
			if(unieap.gridPageSizeCache[view + '.' + pName] != null){
				args.pagingInfo.pageSize = unieap.gridPageSizeCache[view + '.' + pName];
			}
		}
	}
	unieap.view.Processor.prototype.run = function(args, _load, _error){
		var isRunBack = false;
		//var page = unieap.WEB_PAGE_NAME ? unieap.WEB_PAGE_NAME:'test';

			window['lastArgs'] = window['lastArgs'] || [];
		
			var checkGlobal = function(args) {//如果查询到 global.lastArgs有该数据就不增加
				var $args = window['lastArgs'],isInArgs = false;
				for(var i=0;i<$args.length;i++){
					if($args[i].processorName === args.processorName){
						window['lastArgs'][i] = args;
						isInArgs = true;
						break
					}
				}
				!isInArgs&&window['lastArgs'].push(args);
			}
		if(args && args.uParameters.length > 0){
			var uParameter = args.uParameters[0];
			var value = uParameter.value;
			var javaType = uParameter.javaType;
			var name = uParameter.name;
			var type = uParameter.type;
			if(args.boInvoked){
				var boInvoked = args.boInvoked;
				// console.log('请求BO,boID:['+boInvoked.boID+'],methodName:['+boInvoked.methodName+']');
			}
			
			function _runFormData(formData,formId){
				var newValue = {};
				var newName = name.substring(0,name.indexOf('('));
				var newType = type.substring(0,type.indexOf('('));
				var newNameKeys = [];
				var newTypeKeys = [];

				for(var key in formData){ 
					newValue[key] = formData[key];
					newNameKeys.push(key);
					newTypeKeys.push('string');
				}
				
				uParameter.value = newValue;
				uParameter.name = newName + '(' + newNameKeys.join(',') + ')';
				uParameter.type = newType + '(' + newTypeKeys.join(',') + ')';

				isRunBack = true;

				this._setGridPageSize(args);
				return this._runBack(args, _load, _error);
			}
			
			//判断是动态加载Form提交
			if(javaType == 'java.util.Map' && type == 'map()'){
				if(value != null || value != undefined){
					if(value.declaredClass == "unieap.ds.DataStore"){
						var formId = value.formId;
						
						var formData = {};
						var form = unieap.getElementById(formId);
						dojo.query('.u-form-widget',form).attr('id').forEach(function(itemId){
							var item = unieap.byId(itemId);
							if(!item.binding){return}//防止双日历空间取不到binding报错打断逻辑执行
							var name = item.binding.name;
							var itemClass = item.declaredClass;
							var value = item.getValue();
							formData[name] = value;
							formData[name + '@' + 'type'] = itemClass;
						});
	
						return _runFormData.call(this,formData);
					}else{
						return _runFormData.call(this,value);
					}
				}
			}
		} 
		
		if(this.view){ //记录lastArgs 里面包含的信息 用以导出
        	this.view.lastArgs = this.view.lastArgs || [];
			this.view.lastArgs[args.processorName] = args;
			checkGlobal(args);
        }
		 
		if(!isRunBack){
			this._setGridPageSize(args);
			return this._runBack(args, _load, _error);
		}
	}

}






dojo.provide("unieap.tree.Tree");
dojo.require("dijit._Widget");
dojo.require("dijit._Templated");
dojo.require("dojo.fx");
dojo.declare("unieap.tree.TreeNodeUI",[dijit._Widget, dijit._Templated],{
	/**
	 * @declaredClass:
	 * 		unieap.tree.TreeNodeUI
	 * @summary:
	 * 		树节点UI部分对应的类
	 * @classDescription:
	 *     只包含模板并不包含其他的属性和方法，在树的生成过程中只实例化一次，剩下的节点通过clone得到各个节点的domNode部分
	 */
	
	templateString: "<div class=\"dijitTreeNode\"  isTreeNode = \"true\">" +
							"<div dojoAttachPoint=\"backgroundNode\" class = 'treeNodeUnselectLine' >"+"</div>" +
                                       "<div class=\"treeRenderNode\" dojoAttachPoint=\"contentNode,renderNode\">" +
                                            "<table cellspacing=\"0\" cellpadding=\"0\" dojoAttachPoint=\"showingNode\">" +
                                                "<tr><td  style=\"text-align:center;vertical-align:middle;\">" +
                                                         "<div style=\"position:relative;text-align:center;vertical-align:middle;\" dojoAttachPoint=\"expandoNode\" class=\"dijitTreeExpando\"></div>" +
                                                  "</td><td>" +
                                                         "<div  style='position:relative;' dojoattachpoint=\"checkboxNode\" class=\"dijitReset dijitInline dijitCheckBox  \"><input valuenow=\"on\" value=\"on\" pressed=\"true\" style=\"-moz-user-select: none;\" tabindex=\"0\" class=\"dijitReset dijitCheckBoxInput\" dojoattachpoint=\"inputNode\" type=\"checkbox\"></div>" +
                                                  "</td><td width=20>" +
                                                           "<div style='position:relative;' dojoAttachPoint=\"iconNode\" class=\"dijitInline dijitTreeIcon\" ></div>" +
                                                 "</td><td>" +
                                                         "<div style='position:relative;' hideFocus=\"true\" dojoAttachPoint=\"labelNode\" class=\"dijitTreeLabel \"  tabindex=\"-1\" ></div>" +
                                                 "</td></tr>" +
                                             "</table>" +
                                       "</div>" +
                                       "<div dojoAttachPoint=\"containerNode\" class=\"dijitTreeContainer\"  style=\"display:none;\"></div>" +
                                   "</div>"
});

dojo.declare("unieap.tree.TreeNode", null, {
     /**
	 * @declaredClass:
	 * 		unieap.tree.TreeNode
	 * @summary:
	 * 		树节点对应的类，调用树的getNodeById等检索方法会生成一个该类的实例
	 * @classDescription:
	 *      支持根据本节点得到相关联节点的方法
	 *      支持设置节点对应数据的选中状态
	 *      支持得到节点相关的数据和状态
	 *      每个树节点都会对应于一个数据结构对象item，记录了该节点的数据和相关信息，不同结构的数据格式会有不同的内容。
	 *      对应于RowSet数据格式的树，item包含的主要内容为data、rs、children、loaded、domNode等分别表示该节点对应的原始数据、数据所在的RowSet、子节点的结构、该节点的子节点数据是否已经加载以及该节点对应的domNode。
	 *      对应于Json数据格式的树，item包含的主要内容为data、children、loaded、domNode等分别表示该节点对应的原始数据、子节点的结构、该节点的子节点数据是否已经加载以及该节点对应的domNode。
	 *      除此以外，还会将数据是否被选中的情况存于item中，树节点可以调用getItem方法得到其对应的item对象。
	 */
	 
	//本节点所在的树
    tree: null,
   
   //节点的数据对象
    item: null,
	
	//节点是否是只读，若是复选树则此节点不能进行复选，不能进行节点的编辑
	readOnly : false,
	
	//节点是否是不可用，此时节点屏蔽对事件的监听
	disabled : false,
	
	//节点对应的domNode
	domNode : null, 
   
   //构造函数，初始化相关参数
	constructor: function(params){
		dojo.mixin(this, params);
		if(this.domNode&&this.domNode.associatedData.readOnly==true){
			this.readOnly = true;
		}
		if(this.domNode&&this.domNode.associatedData.disabled==true){
			this.disabled = true;
		}
	},
	
	
	/**
	 * @summary:
	 * 		获得当前节点的第一个子节点，如果节点尚未展开过或者没有子节点将会返回null
	 * @return :
	 * 		{TreeNode|null}
	 * @example:
	 * |var node = unieap.byId("basicTree").getCurrentNode(); 
	 * |var firstChild = node.getFirstChild(); 
	 * |alert("第一个子节点的label为:"+firstChild.getLabel());
	 * @img:
	 *      images/tree/getFirstChild.png
	 */	
    getFirstChild : function(){
		if(this.tree.getChildrenByDom(this.domNode).length > 0){
			return this.tree._createTreeNode({
				   item:this.tree.getChildrenByDom(this.domNode)[0].associatedData.item,
				  domNode : this.tree.getChildrenByDom(this.domNode)[0],
				  tree:this.tree
			})
		}else{
			return null;
		}
    },
	
	/**
	 * @summary:
	 * 		获得当前节点的同级下一节点，若不存在同级下一节点，将会返回null
	 * @return :
	 * 		{TreeNode|null}
	 * @example:
	 * |var node = unieap.byId("basicTree").getCurrentNode(); 
	 * |var nextNode = node.getNextChild(); 
	 * |alert("下一个兄弟节点的label为："+nextNode.getLabel()); 
	 * @img:
	 *      images/tree/getNextChild.png
	 */
    getNextChild: function(){
        var node =   this.tree.getNextChildByDom(this.domNode);
		if(node){
			return this.tree._createTreeNode({
				   item:node.associatedData.item,
				  domNode : node,
				  tree:this.tree
			});
		}else{
			return null;
		}
    },
    
	/**
	 * @summary:
	 * 		获得当前节点的同级前一节点，若不存在同级前一节点，将会返回null
	 * @return :
	 * 		{TreeNode|null}
	 * @example:
	 * |var node = unieap.byId("basicTree").getCurrentNode(); 
	 * |var previousNode = node.getPreviousChild(); 
	 * |alert("前一个兄弟节点的label为："+previousNode.getLabel()); 
	 * @img:
	 *      images/tree/getPreviousChild.png
	 */
    getPreviousChild: function(){
       var node = this.tree.getPreviousChildByDom(this.domNode);
		if(node){
			return this.tree._createTreeNode({
				   item:node.associatedData.item,
				  domNode : node,
				  tree:this.tree
			});
		}else{
			return null;
		}
    },
	
	/**
	 * @summary:
	 * 		获得当前节点的父节点，若已经是根节点将会返回null
	 * @return :
	 * 		{TreeNode|null}
	 * @example:
	 * |var childNode = unieap.byId("basicTree").getCurrentNode(); 
	 * |var parentNode =childNode.getParent(); 
	 * |alert("父节点的label为："+parentNode.getLabel()); 
	 * @img:
	 *      images/tree/getParent.png
	 */
	getParent : function(){
		 var node =  this.tree.getParentByDom(this.domNode);
		 if(node){
			return this.tree._createTreeNode({
				   item:node.associatedData.item,
				  domNode : node,
				  tree:this.tree
			});
		}else{
			return null;
		}
	},
	
	/**
	 * @summary:
	 * 		获得当前节点的所有直接子节点，返回值为一个TreeNode组成的数组或null，若某节点的子节点数量比较多，并不建议使用该方法，因为此时会创建大量的unieap.tree.TreeNode，建议使用getFirstChild、getNextChild等方法遍历某节点的所有子节点。
	 * @return :
	 * 		{array|null}
	 * @example:
	 * |//getNodeById()是tree对象的方法:根据数据结构中id字段的值，得到对应的TreeNode对象.
	 * |var parentNode = unieap.byId("basicTree").getNodeById("1"); 
	 * |var childNodes = parentNode.getChildren(); 
	 * |unieap.debug(childNodes); 
	 * @img:
	 *      images/tree/getChildren.png
	 */
	getChildren : function(){
		var childrenDoms = this.tree.getChildrenByDom(this.domNode);
		 if(childrenDoms.length > 0){
		 	var nodes=[];
			for(var i=0;i<childrenDoms.length;i++){
				var node = this.tree._createTreeNode({
				   item:this.tree.getChildrenByDom(this.domNode)[i].associatedData.item,
				  domNode : this.tree.getChildrenByDom(this.domNode)[i],
				  tree:this.tree
			    });
				nodes.push(node);
			}
			return nodes;
		}else{
			return null;
		}
	},
	
	/**
	 * @summary:
	 * 		获得当前节点在父节点的位置，从0开始计数
	 * @return :
	 * 		{number}
	 * @example:
	 * |var treeNode = unieap.byId("basicTree").getCurrentNode(); 
	 * |alert(treeNode.getPosition());
	 */
    getPosition: function(){
        var parent = this.tree.getParentByDom(this.domNode);
        var position = 0;
        if (parent) {
            var childs = this.tree.getChildrenByDom(parent);
            for (var i = 0; i < childs.length; i++) {
                if (childs[i] == this.domNode) {
                    position = i;
                    break;
                }
            }
        }
        return position;
    },
    
	/**
	 * @summary:
	 * 		获得当前节点数据，即为原始的数据，为一个简单的对象
	 * @return :
	 * 		{object}
	 * @example:
	 * |var node = unieap.byId("basicTree").getCurrentNode(); 
	 * |var data = node.getData(); 
	 * |unieap.debug(data);
	 * @img:
	 *      images/tree/getData.png
	 */
    getData: function(){
        return this.item.data;
    },
    
	/**
	 * @summary:
	 * 		在树支持复选的情况下，设置当前节点的选中状态，并根据配置的复选逻辑，设置关联节点的状态
	 * @param:  
	 * 		{boolean}checked
	 * @param:
	 * 		{boolean}withLogic
	 * @example:
	 * |var treeNode = unieap.byId("basicTree").getCurrentNode(); 
	 * |if(treeNode.isChecked()){ 
	 * |	treeNode.setChecked(false); //取消选中 
	 * |}else{ 
	 * |	treeNode.setChecked(true); //选中 
	 * |} 
	 */
    setChecked: function(checked,withLogic){
	   if(this.readOnly||this.disabled)
            return;
       this.tree.setChecked(this,checked,withLogic);
    },
    
   /**
	 * @summary:
	 * 		设置节点是否为只读，只读状态下，不支持编辑和复选，但支持事件触发。
	 * @param :  
	 * 		{boolean}readOnly
	 * @example:
	 * |var treeNode = unieap.byId("basicTree").getCurrentNode(); 
	 * |if(treeNode.getLabel()=="数据结构"){ 
	 * |	treeNode.setReadOnly(true);//将显示值为“数据结构”的节点设为只读
	 * |} 
	 */
    setReadOnly: function(readOnly){
        this.readOnly = readOnly;
		this.domNode.associatedData.readOnly = readOnly;
		this.tree.getCheckboxInputNode(this.domNode).disabled = readOnly;
	    if(readOnly){
			dojo.addClass(this.tree.getLabelNode(this.domNode),'treeLabelReadOnly');
			if(this.isChecked()){
				dojo.addClass(this.tree.getCheckboxNode(this.domNode),'dijitCheckBoxCheckedDisabled');
			}else{
				dojo.addClass(this.tree.getCheckboxNode(this.domNode),'treeCheckBoxReadOnly');
			}
		}else{
			dojo.removeClass(this.tree.getLabelNode(this.domNode),'treeLabelReadOnly');
			if(this.isChecked()){
				dojo.removeClass(this.tree.getCheckboxNode(this.domNode),'dijitCheckBoxCheckedDisabled');
			}else{
				dojo.removeClass(this.tree.getCheckboxNode(this.domNode),'treeCheckBoxReadOnly');
			}
		}
    },
    
	  /**
	 * @summary:
	 * 		设置节点是否为不可用，在不可用状态下，取消对事件的监听
	 * @param :  
	 * 		{boolean}disabled
	 * @example:
	 * |var treeNode = unieap.byId("basicTree").getCurrentNode(); 
	 * |if(treeNode.getLabel()=="数据结构"){ 
	 * |	treeNode.setDisabled(true);//将显示值为“数据结构”的节点设为不可用
	 * |} 
	 */
    setDisabled: function(disabled){
       this.disabled = disabled;
	   this.domNode.associatedData.disabled = disabled;
	   this.tree.getCheckboxInputNode(this.domNode).disabled = disabled;
	   if(disabled){
			dojo.addClass(this.tree.getLabelNode(this.domNode),'treeLabelDisabled');
			if(this.isChecked()){
				dojo.addClass(this.tree.getCheckboxNode(this.domNode),'dijitCheckBoxCheckedDisabled');
			}else{
				dojo.addClass(this.tree.getCheckboxNode(this.domNode),'treeCheckBoxReadOnly');
			}
		}else{
			dojo.removeClass(this.tree.getLabelNode(this.domNode),'treeLabelDisabled');
			if(this.isChecked()){
				dojo.removeClass(this.tree.getCheckboxNode(this.domNode),'dijitCheckBoxCheckedDisabled');
			}else{
				dojo.removeClass(this.tree.getCheckboxNode(this.domNode),'treeCheckBoxReadOnly');
			}
		}
		this.tree.getBinding().setDisabled(this,disabled);
    },
	
	/**
	 * @summary:
	 * 		判断节点是否为只读状态
	 * @return :  
	 * 		{boolean}
	 * @example:
	 * |var treeNode = unieap.byId("basicTree").getCurrentNode(); 
	 * |if(treeNode.isReadOnly()){ 
	 * |	alert("该节点只读！"); 
	 * |}else{ 
	 * |	alert("该节点非只读！"); 
	 * |}
	 */
    isReadOnly : function(){
		return this.readOnly;
	},
	
	/**
	 * @summary:
	 * 		判断节点是否为不可用状态
	 * @return :  
	 * 		{boolean}
	 * @example:
	 * |var treeNode = unieap.byId("basicTree").getCurrentNode(); 
	 * |if(treeNode.isDisabled()){ 
	 * |	alert("该节点不可用！"); 
	 * |}else{ 
	 * |	alert("该节点可用！"); 
	 * |}
	 */
	isDisabled : function(){
		return this.disabled;
	},
	
     /**
	 * @summary:
	 * 		判断节点是否选中
	 * @return :  
	 * 		{boolean}
	 * @example:
	 * |var treeNode = unieap.byId("basicTree").getCurrentNode(); 
	 * |if(treeNode.isChecked()){ 
	 * |	alert("已经被选中了！"); 
	 * |}else{ 
	 * |	alert("还没有被选中！"); 
	 * |} 
	 */
	isChecked : function(){
		return this.tree.getBinding().isSelected(this.item);
	},
    
	/**
	 * @summary:
	 * 		判断节点是否是叶子节点
	 * @return :
	 * 		{boolean}
	 * @example:
	 * |var treeNode = unieap.byId("basicTree").getCurrentNode(); 
	 * |if(treeNode.isLeaf()){ 
	 * |	alert("该节点是叶子节点！"); 
	 * |}else{ 
	 * |	alert("该节点是非叶子节点！"); 
	 * |}
	 */
    isLeaf: function(){
        return this.tree.getBinding().isLeaf(this.item);
    },
    
	/**
	 * @summary:
	 * 		判断节点是否是根节点
	 * @return :
	 * 		{boolean}
	 * @example:
	 * |var treeNode = unieap.byId("basicTree").getCurrentNode(); 
	 * |if(treeNode.isRoot()){ 
	 * |	alert("该节点是根节点！"); 
	 * |}else{ 
	 * |	alert("该节点不是根节点！"); 
	 * |} 
	 */
	isRoot : function(){
		return this.domNode.associatedData.isRoot;
	},
	
	/**
	 * @summary:
	 * 		判断节点是否处于已展开状态
	 * @return :
	 * 		{boolean}
	 * @example:
	 * |var treeNode = unieap.byId("basicTree").getCurrentNode(); 
	 * |if(treeNode.isOpend()){ 
	 * |	alert("该节点已被展开！"); 
	 * |}else{ 
	 * |	alert("该节点未被展开！"); 
	 * |}
	 */
	isOpend : function(){
		return this.domNode.associatedData.isExpanded;
	},
    
     /**
	 * @summary:
	 * 		得到节点对应的数据对象，为包含原始数据、子节点数据、关联domNode等信息的对象
	 * @return :
	 * 		{object}
	 * @example:
	 * |var node = unieap.byId("basicTree").getCurrentNode(); 
	 * |unieap.debug(node.getItem()); 
	 * @img:
	 *      images/tree/getItem.png
	 */
	getItem : function(){
		return this.item;
	},

   /**
	 * @summary:
	 * 		得到节点的层级，根节点为零，随着结构深入依次增加
	 * @return :
	 * 		{number}
	 * @example:
	 * |var treeNode = unieap.byId("basicTree").getCurrentNode();
	 * |alert(treeNode.getLevel());
	 */
	getLevel : function(){
		return this.domNode.associatedData.level;
	},
	
	/**
	 * @summary:
	 * 		得到节点所在的树
	 * @return :
	 * 		{unieap.tree.Tree}
	 * @example:
	 * |var node = unieap.byId("basicTree").getCurrentNode();
	 * |alert(node.getTree().id);
	 */
	getTree : function(){
		return this.domNode.associatedData.tree;
	},
	
    /**
	 * @summary:
	 * 		得到节点的显示值
	 * @return :
	 * 		{string}
	 * @example:
	 * |var node = unieap.byId("basicTree").getCurrentNode(); 
	 * |var label = node.getLabel(); 
	 */
	getLabel : function(){
		return this.domNode.associatedData.label;
	},
	
	/**
	 * @summary:
	 * 		得到节点的对应的Dom对象
	 * @return:
	 * 		{domNode}
	 * @example:
	 * |var node = unieap.byId("basicTree").getCurrentNode(); 
	 * |var domNode = node.getDomNode(); 
	 * |alert(domNode.outerHTML); 
	 * @img:
	 *      images/tree/getDomNode.png
	 */
	getDomNode : function(){
		return this.domNode;
	},
	
	//删除当前节点及其关联节点，用于树删除节点的方法，不供用户使用
	destroyRelatedNode : function(){
		this.destroyChildren(this.domNode);
	},
	
	//递归调用函数，删除所有子节点
	destroyChildren : function(domNode){
		//若要删除的节点是当前节点，为避免错误，先将其引用置空
		if(this.tree.lastFocused == domNode)
		     this.tree.lastFocused  = null;
		var item = domNode.associatedData.item;
		var childDoms = this.tree.getChildrenByDom(domNode);
		//递归所有子节点
		if(childDoms){
			for(var i=0;i<childDoms.length;i++){
				this.destroyChildren(childDoms[i]);
			}
		}
		//为了彻底删除节点，防止内存泄露，将domNode上绑定的相关信息删除
		dojo.removeAttr(domNode, "associatedData");
		delete item.domNode;
		//在nodeMap中节点移除
		delete this.tree._nodeMap[this.tree.getBinding().getId(item)];
		//销毁domNode
		dojo.destroy(domNode);
	},
	
	/**
	 * @summary：
	 *       刷新该节点，子节点重新生成并绑定数据，若数据发生了变化，可以调用此方法刷新节点
	 * @example:
	 * |function refresh(){
	 * |	//在树绑定的RowSet中新增两条记录 
	 * |	treeStorePart.getRowSet().addRow({id:(new Date()),label:"新增节点1","parentID": "1",leaf:true}); 
	 * |	treeStorePart.getRowSet().addRow({id:(new Date()),label:"新增节点2","parentID": "1",leaf:true}); 
	 * |	//刷新节点 
	 * |	unieap.byId("basicTree").getNodeById("1").refresh(); 
	 * |}
	 *   树对应的Rowset添加两条数据，并刷新节点，将会重新构建该节点的子节点。
	 * @img:
	 *      images/tree/refreshTreeNode1.png 
	 * @img:
	 *      images/tree/refreshTreeNode2.png   
	 */
	refresh : function(){
		var childrenDomNode = this.getTree().getChildrenByDom(this.domNode);
		if(childrenDomNode&&childrenDomNode.length>0){
			for(var i=0;i<childrenDomNode.length;i++){
				this.destroyChildren(childrenDomNode[i]);
			}
		}
		
		this.domNode.associatedData.state = "UNCHECKED";
		this.domNode.associatedData.isExpanded = false;
		
//		this.getItem().loaded = false;
//		this.getItem()[this.tree.getBinding().children] = [];
		this.tree.getBinding().refresh(this.getItem());
		this.tree.expandNode(this);
	}
});

dojo.declare("unieap.tree.Tree", [dijit._Widget, dijit._Templated], {
	/**
	 * @declaredClass:
	 * 		unieap.tree.Tree
	 * @summary:
	 *      树组件
	 * @classDescription:
	 *    主要功能包括：
	 * 	   1.支持根据RowSet行集结构构造树结构，同时支持原生的jsontree结构（目前只支持只读功能）。
	 *     2.可以实现复选、拖拽、编辑等功能。
	 *     3.支持懒加载数据。
	 *     4.支持对节点进行增删操作。
	 *     5.支持对节点重新设置数据源。
	 *     6.支持键盘导航功能，具体为:点击上下键将选中当前节点的上一个或下一个可见节点；点击Home键选中第一个可见节点，点击End键选中最后一个可见节点；点击右键将会展开当前节点，或者选中当前节点的第一个子节点；点击左键将会收起当前节点，或者选中当前节点的父节点。
	 *     7.支持根据路径、层级等展开节点。
	 * @example:
     * |<div dojoType="unieap.tree.Tree" id="basicTree" label="UniEAP" 
	 * |	binding = "{'store':treeStorePart,'id':'pk','label':'name','parent':'parentID',query:{name:'parentID',relation:'=',value:''}}">
	 * |</div>
	 * @example:
	 * |var tree = new unieap.tree.Tree({
	 * |	id="basicTree"
	 * |	label:"UniEAP",
	 * |	binding:{'store':treeStore,'id':'pk','label':'name','parent':'parentID',query:{name:'parentID',relation:'=',value:''}}
	 * |});
	 * |dojo.place(tree.domNode, dojo.byId('treeWidget'), 'first')
     * @img:
	 *      images/tree/tree.png
	 */
	
	//配置属性接口
	UserInterfaces : {
		checkLogic : "object",
		binding : "object",
		treeEditor : "object",
		treeDnd : "object",
		label : "string",
		expandRoot : "boolean",
		loader : "object",
		pathSeparator : "string",
		animate : "boolean",
		securityId : "string",
		id : "string",
		jsId : "string",
		"class" : "string",
		style : "string",
		getIconClass : "function",
		getLabelClass : "function",
		getIconStyle : "function",
		getLabelStyle : "function",
		onBeforeClick : "function",
		onClick : "function",
		onAfterClick : "function",
		onSetNodeClass : "function",
		onMouseOver : "function",
		onMouseOut : "function",
		onMouseDown : "function",
		onDblClick : "function",
		onContextMenu : "function",
		onBeforeCollapse : "function",
		onAfterCollapse : "function",
		onBeforeExpand : "function",
		onAfterExpand : "function",
		onBeforeSelectAll : "function",
		onAfterSelectAll : "function",
		onBeforeSetCurrentNode : "function",
		onAfterSetCurrentNode : "function",
		onEnterKeyPress : "function",
		onAfterNodeRender : "function",
		validate : "function",
		distinguishDblclick : "boolean",
		expandByOnClickLabel : "boolean"
	},
	
    /**
	 * @summary:
	 * 		设置树加载子节点所使用的类名，用户一般只需使用默认值就可以
	 * @type:
	 * 		{string}
	 * @default:
	 *      unieap.tree.TreeLoader
	 */
    treeLoaderClass: "unieap.tree.TreeLoader",
	
	  /**
	 * @summary:
	 * 		设置树的复选逻辑所使用的类名，用户一般只需使用默认值就可以
	 * @type:
	 * 		{string}
	 * @default:
	 *     unieap.tree.CheckLogic
	 */
	checkLogicClass : "unieap.tree.CheckLogic",
	
    /**
	 * @summary:
	 * 		设置树的拖拽所使用的类名，用户一般只需使用默认值就可以
	 * @type:
	 * 		{string}
	 * @default:
	 *     unieap.tree.DndSource
	 */
	dndSourceClass : "unieap.tree.DndSource",
	
	
    /**
	 * @summary:
	 * 		设置树的编辑所使用的类名，用户一般只需使用默认值就可以
	 * @type:
	 * 		{string}
	 * @default:
	 *      unieap.tree.TreeEditor
	 */
	treeEditorClass : "unieap.tree.TreeEditor",
	
    /**
	 * @summary:
	 * 		设置树的复选信息,有六种复选逻辑
	 * @type:
	 * 		{object}
	 * @see:
	 *      unieap.tree.CheckLogic
	 * @example:
	 *  |<div dojoType="unieap.tree.Tree"  
	 *  |	checkLogic="{model:'childCascade'}" id="childCascadeTree" 
	 *  |	label="UniEAP" 
	 *  |	binding = "{'leaf':'leaf','store':treeStorePart,'label':'label','parent':'parentID',
	 *  |		query:{name:'parentID',relation:'=',value:'1212403325756'}}">
	 *  |</div>
	 */
	checkLogic : null,
	
    /**
	 * @summary:
	 * 		设置树的数据绑定信息，支持RowSet和原生的jsontree，建议使用datastore中RowSet的绑定形式
	 * @type:
	 * 		{object}
	 * @see:
	 *      unieap.tree.RowSetTreeBinding
	 * @see:
	 *      unieap.tree.JsonTreeBinding
	 */
    binding: null,
	
	 /**
	 * @summary:
	 * 		设置树的编辑信息，若不进行设置，默认是不支持编辑
	 * @type:
	 * 		{object}
	 * @see:
	 *       unieap.tree.TreeEditor
	 * @example
	 *  |<div dojoType="unieap.tree.Tree" id="persistTree"  
	 *  |	treeEditor="{allowBlank:false}"  label="UniEAP" 
	 *  |	binding = "{id:'UP_TREE_TEST_ID','store':'treeStore','label':'UP_TREE_TEST_LABEL',
	 *  |		'parent':'UP_TREE_TEST_PARENTID',
	 *  |		query:{name:'UP_TREE_TEST_PARENTID',relation:'=',value:''}}" >
	 *	|</div>
	 */
	treeEditor : null,
	
	//自动注入dataCenter
	Autowired : "dataCenter",
	
	/**
	 * @summary:
	 * 		设置树的拖拽信息，目前树支持对非懒加载且数据格式为RowSet的树进行拖拽
	 * @type:
	 * 		{object}
	 * @see:
	 *     unieap.tree.DndSource
	 * @example:
	 * |<div dojoType="unieap.tree.Tree" 
	 * |	${1}treeDnd="{}"  label="UniEAP" 
	 * |	binding = "{'leaf':'leaf','store':treeStorePart,'label':'label',
	 * |		'parent':'parentID', query:{name:'parentID',relation:'=',value:''} }">
	 * |</div>
	 * ${1}设置树的拖拽属性
	 */
	treeDnd : null,
    
   /**
	 * @summary：
	 * 		根结点的显示值，若不配置该属性将不会显示根节点
	 * @type：
	 * 		 {string} 
	 * @default：
	 * 		""
	 * @example:
	 * |<div dojoType="unieap.tree.Tree" 
	 * |	id="basicTree" 
	 * |	animate="false"  ${1}label="UniEAP" 
	 * |	binding = "{'leaf':'leaf','store':treeStorePart,'parent':'parentID',
	 * |		query:{name:'parentID',relation:'=',value:''} }">
	 * |</div>
	 *    ${1}设置根节点的显示值为"UniEAP"
	 * @img:
	 *      images/tree/rootNode.png
	 */
    label: "",
    
	  /**
	 * @summary：
	 * 		是否展开根结点，expandRoot属性设置为false时必须设置label属性
	 * @type：
	 * 		 {boolean} 
	 * @default：
	 * 		true
	 * @example:
	 * |<div dojoType="unieap.tree.Tree" 
	 * |	id="basicTree"  label="UniEAP" 
	 * |	animate="false" ${1}expandRoot="false" 
	 * |	binding = "{'leaf':'leaf','store':treeStorePart,
	 * |		'parent':'parentID',query:{name:'parentID',relation:'=',value:''}}"> 
	 * |</div>
	 * ${1}设置树的根节点初始不展开
	 *  @img:
	 *      images/tree/expandRoot.png
	 */
    expandRoot: true,
    
	 /**
	 * @summary：
	 * 		在树的数据是懒加载的情况下，设置懒加载树的请求配置
	 * @type：
	 * 		{object}
	 * @default：
	 * 		null 
	 * @see:
	 *       unieap.tree.TreeLoader
	 * @example：
	 * |<div dojoType="unieap.tree.Tree" id="lazyTree" label="UniEAP" 
	 * |	${1}loader="{'url':'getLazyData.do?method=getData',onBeforeLoad : beforeLoad}" 
	 * |	binding = "{'leaf':'leaf','store':treeStoreForLazyLoad,
	 * |		'parent':'parentID',query:{name:'parentID',relation:'=',value:''}}">
	 * |</div>	
	 * ${1}设置树加载数据的信息
	 */
    loader: null,
	
	/**
	 * @summary：
	 * 		得到节点路径时的分隔符
	 * @type：
	 * 		 {string} 
	 * @default：
	 * 		"/"
	 */
	pathSeparator : "/",
	
	/**
	 * @summary:
	 * 		是否启用动画效果,默认配置是global中unieap.animate的值
	 * @type:
	 * 		{boolean}
	 * @default:
	 * 		读取unieap.animate的值
	 */
	animate : (typeof(unieap.animate) == 'undefined')?true:unieap.animate,
	
	/**
	 * @summary:
	 * 		树节点是否严格区分单击和双击事件
	 * @type:
	 * 		{boolean}
	 * @default:
	 * 		global.js中的unieap.widget.tree.distinguishDblclick属性
	 */
	distinguishDblclick : unieap.widget.tree.distinguishDblclick,
	
	/**
	 * @summary:
	 * 		是否启用单击节点展开树,默认配置是global中unieap.showByOnClick的值
	 * @type:
	 * 		{boolean}
	 * @default:
	 * 		读取unieap.showByOnClick的值
	 */
	expandByOnClickLabel : (typeof(unieap.widget.tree) != 'undefined' && typeof(unieap.widget.tree.expandByOnClickLabel) != 'undefined')?unieap.widget.tree.expandByOnClickLabel:true,
	
     /**
	  *@summary:
	  *   权限id
	  * @type:
	  *   {string}
     */
	securityId:'',
	
	//保存树的每个domNode节点的对象，键是节点的id，值是对应的domNode，所以需要保证树所有节点的id唯一
	_nodeMap : null,
	
	//标示节点是否处于编辑状态
	_editing : false,
	
	//树全局保持的一个节点对象，用户在监听事件时会得到该对象，当调用方法其他方法得到TreeNode时，会新生成对象
	globalTreeNode : null,
	
	//是否已经通过了校验
	_validatePassed : true,
    
    templateString: "<div class=\"dijitTreeContainer\" dojoAttachPoint=\"treeNode\" style=\"position:relative;overflow:auto;\"></div>",
    

    postCreate: function(){
		this.connect(this.treeNode, "onclick", "_onClick");
		this.connect(this.treeNode, "onkeypress", "_onKeyPress");
		this.connect(this.treeNode, "ondblclick", "_onDblClick");
		this.connect(this.treeNode, "oncontextmenu", "_onContextMenu");
		this.connect(this.treeNode, "onmouseover", "_onMouseOver");
		this.connect(this.treeNode, "onmouseout", "_onMouseOut");
		this.connect(this.treeNode, "onmousedown", "_onMouseDown");
        this.showRoot = Boolean(this.label);
		this._nodeMap = {};
		this.globalTreeNode =this. _createTreeNode({tree:this});
        this._load();
        this.inherited("postCreate", arguments);
       //若允许拖拽，则初始化拖拽模块
	    this.getDndSource();
    },
	
	//生成根节点的操作
    _load: function(){
		    this.rootNodeUI = new unieap.tree.TreeNodeUI();
			dojo.removeAttr(this.rootNodeUI.domNode, "id");
			//domNode增加associatedData属性，关联该节点相关的数据
			this.rootNodeUI.domNode.associatedData = {isExpanded:false,item:this.getBinding().getRootNodeItem(),isRoot:true,tree:this,label:this.label,level:0,state:"UNCHECKED",readOnly:false,disabled:false};
			//在节点对应的数据结构中保持对domNode的引用
			this.rootNodeUI.domNode.associatedData.item.domNode = this.rootNodeUI.domNode;
			//将该节点放到map中
			this._nodeMap[this.getBinding().rootNodeId] = this.rootNodeUI.domNode;
			//判断是否显示复选框
			if(!this.getCheckLogic()||!this.getCheckLogic().isShowRootCheckbox()){
			     this.getCheckboxNode(this.rootNodeUI.domNode).style.display = "none";
			}
		    //设置显示内容和样式
			this.setLabelNode(this.rootNodeUI.domNode,this.label);
				
            this._setExpando(this.rootNodeUI.domNode);
            this._updateItemClasses(this.rootNodeUI.domNode);
			this.domNode.appendChild(this.rootNodeUI.domNode);
            if (!this.showRoot) {
                this.rootNodeUI.renderNode.style.display="none";
                this.getLineNode(this.rootNodeUI.domNode).style.display = "none"; // make root line invisible
            }
            this._updateLayout(this.rootNodeUI.domNode);
			//如果要展开根结点，则将根结点展开
			if (this.expandRoot) {
				this._expandNode(this.rootNodeUI.domNode);
			}
    },
    
    /**
	 * @summary:
	 * 		树的校验函数
	 * @return :
	 * 		{boolean}
	 * @description:
	 * 		如果通过了用户自定义的校验函数或没有定义校验函数则返回true，其余情况返回false
	 */
	validate : function(){
		if(this._editing){
			return this._validatePassed;
		}else{
			return true;
		}
	},
    
	//重写销毁函数
    destroy: function(){
		//将所有domNode绑定的数据解除，以确保没有内存泄露问题
		for(var item in this._nodeMap){
			dojo.removeAttr(this._nodeMap[item], "associatedData");
		}
		this._nodeMap = null;
		//销毁根结点，此时会将所有节点删除
		this.rootNodeUI.destroy();  
		//如果允许编辑将会将编辑用的文本框销毁
		if(unieap.isClassEntity(this.treeEditor))
		      this.getEditor().destroy();
	     //如果允许拖拽，则将该模块销毁，用于对事件绑定的解除
	    if(unieap.isClassEntity(this.treeDnd))
		      this.getDndSource().destroy(); 
		this.inherited(arguments);
	},
	
    //根据当前节点的domNode，得到父节点的domNode
	getParentByDom : function(domNode){
				for(var p=domNode.parentNode; p; p=p.parentNode){
					var flag = p.getAttribute && p.getAttribute("isTreeNode");
					if(flag){
						return p;
					}
				}
				return null;
	},
	
     //根据当前节点的domNode，得到下一节点的domNode
	 getNextChildByDom : function(domNode){
		var node = domNode;
				do{
					node = node["nextSibling"];
				}while(node && node.nodeType != 1);
				if(!node){ return null; } 
				return node;
	},

	//根据当前节点的domNode，得到前一兄弟节点的domNode
    getPreviousChildByDom : function(domNode){
				var node = domNode;
				do{
					node = node["previousSibling"];
				}while(node && node.nodeType != 1);
				if(!node){ return null; } 
				return node;
	},
	
	 //根据当前节点的domNode，得到直接子节点domNode的数组，若子节点的dom尚未生成，返回空数组
	getChildrenByDom : function(domNode){
		var children = [];
		for(var i=0,nodes = this.getContainerNode(domNode).childNodes;nodes[i];i++){
			children.push(nodes[i]);
		}
		return children;
	},
	
	/**
	 * @summary:
	 * 		根据当前节点的domNode，得到内容部分的domNode
	 * @return :
	 * 		{domNode}
	 * @description:
	 * 		若用户需要重定义样式，可以调用此方法，否则较少会用到
	 * @example:
	 * |var node = unieap.byId("basicTree").getCurrentNode(); 
	 * |var domNode = unieap.byId("basicTree").getContentNode(node.getDomNode()); 
	 * |alert(domNode.outerHTML); 
	 */
	getContentNode : function(domNode){
		return domNode.children[1];
	},
	
	getShowingNode :function(domNode){
		return domNode.children[1].firstChild;
	},
	
	/**
	 * @summary:
	 * 		根据当前节点的domNode，得到展开图标部分的domNode
	 * @return :
	 * 		{domNode}
	 * @description:
	 * 		若用户需要重定义样式，可以调用此方法，否则较少会用到
	 * @example:
	 * |var node = unieap.byId("basicTree").getCurrentNode(); 
	 * |var domNode = unieap.byId("basicTree").getExpandoNode(node.getDomNode()); 
	 * |alert(domNode.outerHTML); 
	 */
    getExpandoNode : function(domNode){
		return domNode.children[1].firstChild.rows[0].cells[0].firstChild;
	},
	
//	  @summary:
//	  		根据当前节点的domNode，得到展开节点展现部分的domNode
//	  @return :
//	  		{domNode}
//	  @description:
//	  		若用户需要重定义样式，可以调用此方法，否则较少会用到
//	  @example:
//	  |var node = unieap.byId("basicTree").getCurrentNode(); 
//	  |var domNode = unieap.byId("basicTree").getExpandoNode(node.getDomNode()); 
//	  |alert(domNode.outerHTML); 
//	 
    _expandByOnClickLabel : function(domNode){
		return domNode.children[1].firstChild.rows[0].cells[3].firstChild;
	},
     //	  @summary:
     //	  		根据当前节点的domNode，得到展开节点展现文件夹的domNode
     //	  @return :
     //	  		{domNode}
     //	  @description:
//	  		若用户需要重定义样式，可以调用此方法，否则较少会用到
//	  @example:
//	  |var node = unieap.byId("basicTree").getCurrentNode(); 
//	  |var domNode = unieap.byId("basicTree").getExpandoNode(node.getDomNode()); 
//	  |alert(domNode.outerHTML); 
//	 
    _getExpandLabelFileNode : function(domNode){
		return domNode.children[1].firstChild.rows[0].cells[2].firstChild;
	},
	/*
	 * @summary:
	 * 		根据当前节点的domNode，得到复选框部分节点的domNode
	 * @return :
	 * 		{domNode}
	 * @description:
	 * 		若用户需要重定义样式，可以调用此方法，否则较少会用到
	 * @example:
	 * |var node = unieap.byId("basicTree").getCurrentNode(); 
	 * |var domNode = unieap.byId("basicTree").getCheckboxNode(node.getDomNode()); 
	 * |alert(domNode.outerHTML); 
	 */
	getCheckboxNode : function(domNode){
		return domNode.children[1].firstChild.rows[0].cells[1].firstChild;
	},
	
	/**
	 * @summary:
	 * 		根据当前节点的domNode，得到复选框
	 * @return :
	 * 		{domNode}
	 * @description:
	 * 		若用户需要重定义样式，可以调用此方法，否则较少会用到
	 * @example:
	 * |var node = unieap.byId("basicTree").getCurrentNode(); 
	 * |var domNode = unieap.byId("basicTree").getCheckboxInputNode(node.getDomNode()); 
	 * |alert(domNode.outerHTML); 
	 */
	getCheckboxInputNode : function(domNode){
		return domNode.children[1].firstChild.rows[0].cells[1].firstChild.firstChild;
	},
	
     /**
	 * @summary:
	 * 		根据当前节点的domNode，得到图标节点的domNode
	 * @return :
	 * 		{domNode}
	 * @description:
	 * 		若用户需要重定义样式，可以调用此方法，否则较少会用到
	 * @example:
	 * |var node = unieap.byId("basicTree").getCurrentNode(); 
	 * |var domNode = unieap.byId("basicTree").getIconNode(node.getDomNode()); 
	 * |alert(domNode.outerHTML);
	 * @img:
	 *      images/tree/getIconNode.png
	 */
	getIconNode :function(domNode){
		return domNode.children[1].firstChild.rows[0].cells[2].firstChild;
	},
	
	/**
	 * @summary:
	 * 		根据当前节点的domNode，得到文字部分节点的domNode
	 * @return :
	 * 		{domNode}
	 * @example:
	 * |var node = unieap.byId("basicTree").getCurrentNode(); 
	 * |var domNode = unieap.byId("basicTree").getLabelNode(node.getDomNode()); 
	 * |alert(domNode.outerHTML); 
	 * @img:
	 *      images/tree/getLabelNode.png
	 */
	getLabelNode : function(domNode){
		if(domNode)
		 //return domNode.childNodes[0].childNodes[0].rows[0].cells[3].childNodes[0];
			 return domNode.children[1].firstChild.firstChild.firstChild.childNodes[3].firstChild;
	},
	
	/**
	 * @summary:
	 * 		根据当前节点的domNode，得到所有子节点所在div的domNode
	 * @return :
	 * 		{domNode}
	 * @description:
	 * 		若用户需要重定义样式，可以调用此方法，否则较少会用到
	 * @example:
	 * |var node = unieap.byId("basicTree").getCurrentNode(); 
	 * |var domNode = unieap.byId("basicTree").getContainerNode(node.getDomNode()); 
	 * |alert(domNode.outerHTML); 
	 */
	getContainerNode : function(domNode){
		return domNode.childNodes[2];
	},
	
	/*********************************node style method*********************************/
	
	//将当前节点设置为收起状态，修改相应变量并设置样式
	setNodeCollapseStyle : function(domNode,animation){
		if (!domNode.associatedData.isExpanded) {
            return;
        }
        domNode.associatedData.isExpanded = false;
        this._setExpando(domNode);
        this._updateItemClasses(domNode);
        if (this.getContainerNode(domNode)) {
            if(animation==false||this.animate==false){
        	  this.getContainerNode(domNode).style.display = "none";
            }else{
            	 var _this = this; 
                 this._wipeOut = dojo.fx.wipeOut({
				  node: this.getContainerNode(domNode), duration: 200
			     });
			     dojo.connect(this._wipeOut, "onEnd", function(){
			      _this.getContainerNode(domNode).style.width = "";
				   _this.getContainerNode(domNode).style.height = "";
		        });
		      this._wipeOut.play(); 
        	}
        }
	},
	
	//将当前节点设置为展开状态，修改相应变量并设置样式
	setNodeExpandStyle : function(domNode,animation){
		//如果不是处于已经展开状态，则不进行任何操作
		if (domNode.associatedData.isExpanded) {
            return;
        }
		domNode.associatedData.isExpanded = true;
		this._wipeOut&&this._wipeOut.stop();
		//设置相关的样式
        this._setExpando(domNode);
        this._updateItemClasses(domNode);
        if (this.getContainerNode(domNode)){
        	if(animation==false||this.animate==false){
        		var node = this.getContainerNode(domNode);
        	 	node.style.display = "block";
			    node.style.width = "auto";
			    node.style.height = "auto"
			}else{
        	  var _this = this; 
			  this._wipeIn = dojo.fx.wipeIn({
				 node: this.getContainerNode(domNode), duration: 200
			  });
			  dojo.connect(this._wipeIn, "onEnd", function(){
			    _this.getContainerNode(domNode).style.width = "auto";
				_this.getContainerNode(domNode).style.height = "auto";
				if (dojo.isIE) {
					_this.getContainerNode(domNode).style.display = "";
					_this.getContainerNode(domNode).style.display = "block";
				}
		     });
		      this._wipeIn.play();   
        	}
        }
	},
	
	//设置树节点文本区域的显示值
    setLabelNode: function(treeDomNode,label){
		//如果为null或者undefined，则将其设置为null字符串	
		if(!label){
			label = "";
		}
		else{
			label = String(label).replace(/&/g,"&amp;").
							 	  replace(/</g,"&lt;").
							      replace(/>/g,"&gt;").
							 	  replace(/\s/g,"&nbsp;");
		}  
        this.getLabelNode(treeDomNode).innerHTML = label;
    },
	
	//设置节点上标示节点状态的图标样式，如是否在加载，是否是叶子节点，是否展开
    _setExpando: function(treeDomNode,processing){
        var styles = ["dijitTreeExpandoLoading", "dijitTreeExpandoOpened", "dijitTreeExpandoClosed", "dijitTreeExpandoLeaf"];
        var idx = processing ? 0 : (!this.isLeafByData(treeDomNode.associatedData.item) ? (treeDomNode.associatedData.isExpanded ? 1 : 2) : 3);
		var domNode = this.getExpandoNode(treeDomNode);
		domNode.className = styles[idx];
    },
	
	//根据domNode，更新节点图标和字体的样式
    _updateItemClasses: function(treeDomNode,tmpElementParentNode){
    	var parentNode = tmpElementParentNode || treeDomNode.children[1].firstChild.rows[0];
		var iconNode = parentNode.cells[2].firstChild;
		//得到图标和文字区域的domNode，以改变样式
		//var iconNode = this.getIconNode(treeDomNode);
		//得到图标区域的样式，Tree本身提供默认实现，用户也可自定义getIconClass方法
        var iconClass = this.getIconClass(treeDomNode.associatedData.item, treeDomNode.associatedData.isExpanded, !this.isLeafByData(treeDomNode.associatedData.item));
        //清除已有的样式
		//this.clearIconClass(iconNode);
		if(treeDomNode.associatedData.label !=''){
			//重新设置样式
			iconNode.className = "dijitInline dijitTreeIcon " +iconClass;
		}
		//得到用户自定义的样式，此时得到的是一个对象
		if(this.getIconStyle(treeDomNode.associatedData.item, treeDomNode.associatedData.isExpanded, !this.isLeafByData(treeDomNode.associatedData.item))){
		     dojo.style(iconNode, this.getIconStyle(treeDomNode.associatedData.item, treeDomNode.associatedData.isExpanded, !this.isLeafByData(treeDomNode.associatedData.item)));
		}
       //设置label的样式
	    var labelClass  = this.getLabelClass(treeDomNode.associatedData.item, treeDomNode.associatedData.isExpanded, !this.isLeafByData(treeDomNode.associatedData.item));
        if(labelClass){
			//var labelNode =  this.getLabelNode(treeDomNode);
			var labelNode = parentNode.cells[3].firstChild;
        	 labelNode.className = labelClass;
        }
		if(this.getLabelStyle(treeDomNode.associatedData.item, treeDomNode.associatedData.isExpanded, !this.isLeafByData(treeDomNode.associatedData.item)))
		    dojo.style(this.getLabelNode(treeDomNode), this.getLabelStyle(treeDomNode.associatedData.item, treeDomNode.associatedData.isExpanded, !this.isLeafByData(treeDomNode.associatedData.item)) );
		//将当前节点设为全局节点，并触发事件
		this._setGlobalTreeNode(treeDomNode,treeDomNode.associatedData.item);
		unieap.fireEvent(this,this.onSetNodeClass,[this.globalTreeNode]);
    },
	
	//清除图标的已有样式
    clearIconClass: function(treeDomNode){
        this.getIconNode(treeDomNode).className = "";
    },
    
	//更新节点的布局样式，根据判断是否根结点，是否为最后一个节点，赋予不同的样式
    _updateLayout: function(treeDomNode){
        var parent = this.getParentByDom(treeDomNode);
        if (!parent || this.getContentNode(parent).style.display == "none") {
            dojo.addClass(treeDomNode, "dijitTreeIsRoot");
        }
        else {
            dojo.toggleClass(treeDomNode, "dijitTreeIsLast", !this.getNextChildByDom(treeDomNode));
        }
    },
	
	//标记节点处于加载子节点状态，并更新相关样式
    markProcessing: function(treeDomNode){
        this.state = "LOADING";
        this._setExpando(treeDomNode,true);
    },
    
    //标记节点结束加载子节点状态，并更新相关样式
    unmarkProcessing: function(treeDomNode){
        this._setExpando(treeDomNode,false);
    },
	 /*********************************style method **************************************/
	
	/**
	 * @summary:
	 *     得到节点图标的样式
	 * @description:
	 * 		此时的返回值应该为一个级联样式表的类名
	 * @param
	 *		{object} item 节点的数据对象
	 * @param:
	 *		{boolean}  opened 节点是否已经展开
	 * @param  
	 *		{boolean} isExpandable 节点是否可以展开
	 * @return
	 *		{string}
	 * @example: 
	 * |<style> 
	 * |	.unieap .iconFemale{ 
	 * |		background-image: url('user_female.png'); 
	 * |		width : 16px; 
	 * |	} 
	 * |</style> 
	 * |function customIconClass(item,opened,isExpandable){ 
	 * |	return "iconFemale"; 
	 * |} 
	 * |<div dojoType="unieap.tree.Tree" 
	 * |	id="basicTree"  label="UniEAP" 
	 * |	animate="false" getIconClass="customIconClass" 
	 * |	binding = "{'leaf':'leaf','store':treeStorePart,
	 * |		'parent':'parentID',query:{name:'parentID',relation:'=',value:''}}"> 
	 * |</div>
	 *      自定义图标的样式，以获得特定的样式。
	 *  @img:
	 *      images/tree/getIconClass.png      
	 */
	  getIconClass: function(item,opened, isExpandable){
        if (item) {
            var iconClass = this.getBinding().getIconClass(item);
            if (iconClass) {
                return iconClass;
            }
        }
        var clsName = (!item || isExpandable) ? (opened ? "dijitFolderOpened" : "dijitFolderClosed") : "dijitLeaf";
        return clsName
    },
	
    /**
	 * @summary:
	 *		得到节点文字区域即label的样式
	 * @description:
	 *		此时的返回值应该为一个级联样式表的类名
	 * @param  
	 *    {object} item  节点的数据对象
	 * @param  
	 *    {boolean}  opened 节点是否已经展开
	 * @param  
	 *    {boolean} isExpandable  节点是否可以展开
	 * @return 
	 *          {string} 
	 * @example:
	 * |<style> 
	 * |	.unieap .fontLabel{ 
	 * |		font-style:italic; 
	 * |		font-weight:bolder; 
	 * |		font-size:14px; 
	 * |		font-family: Arial; 
	 * |		background-color:yellow; 
	 * |	} 
	 * |</style> 
	 * |function customLabelClass(item,opened,isExpandable){ 
	 * |	return "fontLabel"; 
	 * |} 
	 * |<div dojoType="unieap.tree.Tree" 
	 * |	id="basicTree"  label="UniEAP" 
	 * |	animate="false" getLabelClass="customLabelClass" 
	 * |	binding = "{'leaf':'leaf', 'store':treeStorePart,
	 * |		'parent':'parentID', query:{name:'parentID',relation:'=',value:''} }"> 
	 * |</div>      
	 *   自定义文字显示区域的样式，实现特定的效果。
	 * @img:
	 *      images/tree/getLabelClass.png  
	 */
	getLabelClass : function(item,opened, isExpandable){
		   if (item) {
            var labelClass = this.getBinding().getLabelClass(item);
            if (labelClass) {
                return labelClass;
            }
        }
	},
	
	/**
	 * @summary:
	 *     得到节点图标的样式
	 * @description:
	 * 		此时的返回值应该为一个标示样式的对象，如{backgroundImage: "url('images/user.png')"}
	 * @param:
	 *      {object} item 节点的数据对象
	 * @param:
	 *      {boolean} opened 节点是否已经展开
	 * @param: 
	 * 		{boolean} isExpandable 节点是否可以展开
	 * @return
	 *		{string}
	 * @example
	 * |function customIconStyle(item,opened,isExpandable){ 
	 * |	return {backgroundImage: "url('user.png')"}; 
	 * |} 
	 * |<div dojoType="unieap.tree.Tree" 
	 * |	id="basicTree"  label="UniEAP" 
	 * |	animate="false" getIconStyle="customIconStyle" 
	 * |	binding = "{'leaf':'leaf', 'store':treeStorePart,
	 * |		'parent':'parentID', query:{name:'parentID',relation:'=',value:''}}"> 
	 * |</div>
	 *     自定义图标的样式，以获得特定的样式。
	 * @img:
	 *      images/tree/getIconStyle.png
	 */
	getIconStyle : function(item,opened, isExpandable){
		
	},
	
	/**
	 * @summary:
	 *     得到节点文字区域即label的样式
	 * @description:
	 * 		此时的返回值应该为一个标示样式的对象
	 * @param  
	 *      {object} item 节点的数据对象
	 * @param  
	 *       {boolean} opened 节点是否已经展开
	 * @param  
	 *      {boolean} isExpandable 节点是否可以展开
	 * @return 
	 *          {string}
	 * @example
	 * |function customLabelStyle(item,opened,isExpandable){ 
	 * |	return {fontStyle:"italic",color:"blue"}; 
	 * |} 
	 * |<div dojoType="unieap.tree.Tree" 
	 * |	id="basicTree"  label="UniEAP" 
	 * |	animate="false" getLabelStyle="customLabelStyle" 
	 * |	binding = "{'leaf':'leaf', 'store':treeStorePart,
	 * |		'parent':'parentID', query:{name:'parentID',relation:'=',value:''}}"> 
	 * |</div>
	 * @img:
	 *      images/tree/getIconStyle.png
	 */
	getLabelStyle : function(item,opened, isExpandable){
		
	},
	
	 /**
	 * @summary:
	 *    	新建一个节点
	 * @param 
	 *      {object}  data 
	 *      要生成的节点对应的数据
	 * @param  
	 * 		{unieap.tree.TreeNode}  parentNode 
	 *      父节点对应的TreeNode对象   
	 * @param
	 *     {number}  index
	 *     要将节点添加的位置，从0开始计数
	 * @example:
	 * |var parentNode = unieap.byId("basicTree").getCurrentNode(); //获取当前节点 
	 * |if(!parentNode){ 
	 * |	alert("请选择一个树节点！"); 
	 * |	return; 
	 * |}else{ 
	 * |	var parentNodeID = parentNode.getData()["id"]; //获取当前节点的ID 
	 * |	var data={id:'8',label:"newTreeNode",parentID:parentNodeID,leaf:true}; //构造新节点的数据 
	 * |	unieap.byId("basicTree").createNode(data,parentNode); //给当前节点添加一个孩子节点 
	 * |} 
	 *    给当前节点添加一个子节点
	 */
	createNode : function(data,parentNode,index){
		if(!parentNode){
			return;
		}
		var domNode = parentNode.domNode;
	    var complete =  dojo.hitch(this,function(){
			//先添加数据
			var item = this.getBinding().addItem(data, parentNode.getItem());
			//后改变domNode
			this._addChildren(item,domNode,index);
		});
		//如果父节点的数据尚未加载进来，需要先加载数据，然后添加节点
		if(!parentNode.getItem().loaded){
			this.loadNodeData(parentNode.getItem(),dojo.hitch(this,complete));
		}else{
			complete();
		}
	},
	
     /**
	 * @summary:
	 *     	删除一个节点及其关联子节点，根节点除外
	 * @param  
	 *      {unieap.tree.TreeNode}  node 
	 *      要删除节点对应的TreeNode对象
	 * @param
	 *      {boolean}  isDeleteItem
	 *      是否要删除节点对应的数据，默认会删除，但是在同棵树的拖拽中，需要删除dom，但是不需要删除数据
	 * @example:
	 * |var delete_node = unieap.byId("basicTree").getNodeById("1"); //获取ID为“1”的树节点 
	 * |if(!delete_node){ 
	 * |	alert("没有该节点！"); 
	 * |}else{ 
	 * |	unieap.byId("basicTree").deleteNode(delete_node,true); //删除树节点 
	 * |}
	 * 根据id得到一个节点，并将其删除
	 */
	deleteNode : function(node,isDeleteItem){
		if(!node || node.isRoot()) return;
		var item  =  node.getItem();
		var parentNode = node.getParent();//父节点的TreeNode对象
		var parentItem = null;
		if(parentNode)
		   parentItem = parentNode.getItem();
		 delete item.domNode;
		 if(isDeleteItem!=false){
		 	this.getBinding().deleteItem(item,parentItem);
		 }
		node.destroyRelatedNode();
		if(parentNode){
		     this._updateItemClasses(parentNode.domNode);
			 this._setExpando(parentNode.domNode,false);
			 var _this = this;
			 if(parentNode.getChildren()){
		      dojo.forEach(parentNode.getChildren(), function(child){
				   _this._updateLayout(child.domNode);
			  });
			}else{
			  parentNode.domNode.associatedData.isExpanded = false;
			  this.getContainerNode(parentNode.domNode).style.display ="none";
			}
			
		}
	},
	
	 /**
	 * @summary:
	 *     	按照指定的层级展开节点
	 * @description:
	 * 		根结点的level为0，其余节点依次递增
	 * @param  
	 *      {number}  level 
	 *      要展开节点的层级
	 * @example:
	 *  |unieapTree.expandNodeByLevel(2); //展开第二层树节点
	 */
	expandNodeByLevel : function(level){
		//先将所有节点收起
	    this.collapseAllNodes();
		//因为树可能是懒加载的，为了避免混乱，因此将需要展开的节点放到一个数组中，依次发送ajax请求
		//等加载数据成功后，将数组中该节点删除
		this.toExpandNodeByLevel = [];
		//先将根结点放到数组中
		this.toExpandNodeByLevel.push(this.rootNodeUI.domNode);
		this._expandNodeByLevelHelper(this.rootNodeUI.domNode,level);
	},
	
	//按照层级展开节点的辅助方法，会被递归调用
	_expandNodeByLevelHelper : function(domNode,level){
	   //定义一个回调函数，用于在请求结束后，将toExpandNodeByLevel对应的节点删除，并将其展开
		var onComplete = dojo.hitch(this,function(items){
			//将当前的这个节点从数组中删除，并将这个节点展开
			this.toExpandNodeByLevel.shift();
			this._expandNode(domNode,false);
			domNode.associatedData.isExpanded = true;
			//如果当前节点的level仍小于要展开的level，要将其子节点放进数组
			if(domNode.associatedData.level<level){
				var children = this.getChildrenByDom(domNode);
				if(children&&children.length>0){
					for(var i=0,l=children.length;i<l;i++){
						this.toExpandNodeByLevel.push(children[i]);
					}
				}
			}
			//如果toExpandNodeByLevel的长度大于零，说明还有节点需要展开，否则说明已到达指定层级，返回
		   if(this.toExpandNodeByLevel.length>0){
				 this._expandNodeByLevelHelper(this.toExpandNodeByLevel[0],level);
	       }else{
		   	  return;
		   }
		})
		//如果该节点的子节点相关数据已经加载完成，则直接调用onComplete，如果子节点相关数据还没有展开，则需要先加载数据 ，将onComplete作为回调函数
		if(domNode && domNode.associatedData && domNode.associatedData.item.loaded){
                onComplete();
		}else{
			this.getBinding().getChildren(domNode.associatedData.item,dojo.hitch(this,onComplete));
		}
	},
	
	/**
	 * @summary:
	 *    	展开树的所有节点
	 * @description:
	 * 		若节点比较多且数据是懒加载的情况下，出于性能考虑，不建议使用该方法
	 * @example:
	 * |unieap.byId("basicTree").expandAllNodes();  //其中“basicTree”为树的id值
	 */
	expandAllNodes : function(){
		//因为树可能是懒加载的，为了避免混乱，因此将需要展开的节点放到一个数组中，依次发送ajax请求
		//等加载数据成功后，将数组中该节点删除
		this.toExpandNodeAll = [];
		//将根结点放进数组
		this.toExpandNodeAll.push(this.rootNodeUI.domNode);
		this._expandNodeAllHelper(this.rootNodeUI.domNode);
	},
	
	//展开所有节点的辅助方法，会被递归调用
	_expandNodeAllHelper : function(domNode){
		var onComplete = dojo.hitch(this,function(items){
			var domNode = this.toExpandNodeAll.shift();
			this._expandNode(domNode,false);
			domNode.associatedData.isExpanded = true;
			var children = this.getChildrenByDom(domNode);
			if(children && children.length>0){
					for(var i=0,child; (child = children[i]);i++){
						if(!this.isLeafByData(child.associatedData.item)){
							this.toExpandNodeAll.push(children[i]);
						}
					}
			}
		   if(this.toExpandNodeAll.length){
				this._expandNodeAllHelper(this.toExpandNodeAll[0]);
	       }
		})
		if(domNode.associatedData.item.loaded){
                onComplete();
		}else{
			this.getBinding().getChildren(domNode.associatedData.item,onComplete);
		}
	},
	
	/**
	 * @summary:
	 *    收起树的所有节点，此时所有的节点都被收起，只显示根结点，若根结点不显示则会显示第一层节点
	 * @example:
	 * |unieap.byId("basicTree").collapseAllNodes(); 
	 *    将会把树上的节点收起。
	 */
	collapseAllNodes : function(){
		//根据topLevel进行节点收起操作
		var topLevel = 0;
		if(!this.showRoot){
			topLevel = 1;
		}
		for(var node in this._nodeMap){
			if(this._nodeMap[node].associatedData.level>=topLevel&&this._nodeMap[node].associatedData.isExpanded){
				this._collapseNode(this._nodeMap[node],false)
			}
		}
	},
	
	/**
	 * @summary:
	 *   	将指定节点设置为当前节点，并更改样式
	 * @param: 
	 *      {unieap.tree.TreeNode}
	 * @example:
	 * |var treeNode = unieapTree.getNodeById("1"); 
	 * |unieap.byId("basicTree").setCurrentNode(treeNode);
	 */
	setCurrentNode : function(node){
		if(node.isDisabled())
		   return;
	    var flag = unieap.fireEvent(this,this.onBeforeSetCurrentNode,[node]);
        if (flag === false) {
            return;
        }
		this._onTreeFocus(node.domNode);
		this.focusNode(node.getDomNode());
		unieap.fireEvent(this,this.onAfterSetCurrentNode,[node]);
	},
	
    /**
	 * @summary:
	 *    获得当前的节点，若不存在将会返回null
	 *  @return: 
	 *      {unieap.tree.TreeNode|null}
	 *  @example:
	 *  |var parentNode = unieap.byId("basicTree").getCurrentNode(); 
	 */
	getCurrentNode : function(){
		if(this.lastFocused){
			return this._createTreeNode({
				  item:this.lastFocused.associatedData.item,
				  domNode : this.lastFocused,
				  tree:this
			});
		}else{
			return null;
		}
	},
	
    /**
	 * @summary:
	 *   选中或非选中所有节点
	 * @param:
	 *    {boolean}  checked 
	 * @description:
	 *	 调用此方法，将会把树上所有的节点选中或者非选中，在支持复选的树上生效，并且应该保证树上没有节点处于readonly和disabled状态
	 * @example:
	 * |unieap.byId("basicTree").selectAll(true);
	 */
	selectAll : function(checked){
		if (this.getCheckLogic()) {
		    var flag = unieap.fireEvent(this,this.onBeforeSelectAll,[]);
		    if(flag==false)
		       return;
			this.getCheckLogic().selectAll(checked);
			unieap.fireEvent(this,this.onAfterSelectAll,[]);
		}else{
			return;
		}
	},
	
	 /**
	 * @summary:
	 *    	获得选中的节点数组，
	 * @description:
	 *		包括选中的和半选的，若不存在将会返回空数组
	 *		此时若节点没有生成，在返回的数组中不会包含
	 * @return: 
	 *      {array}
	 * @example:
	 * |var selectedNodes = unieap.byId('basicTree').getSelectedNodes(); 
	 * |unieap.debug(selectedNodes);  
	 *  @img:
	 *      images/tree/getSelectedNodes.png
	 */
	getSelectedNodes : function(){
		var selectedNode = [];
		for (var node in this._nodeMap) {
			if (this._nodeMap[node].associatedData.isChecked&&!this._nodeMap[node].associatedData.isRoot) {
				selectedNode.push(this._createTreeNode({item:this._nodeMap[node].associatedData.item,domNode : this._nodeMap[node],tree:this}))
			}
		}
		return selectedNode;
	},
	
	 /**
	 * @summary:
	 *     	按照路径展开指定节点
	 * @param  
	 *      {string}  path 
	 *      要展开节点的路径
	 * @param  
	 *      {function}  callback 
	 *      回调方法
	 * @example:
	 * |unieapTree.expandNodeByPath("/5/6");    //其中5、6为节点的id值
	 *    
	 */
	expandNodeByPath : function(path,callback){
		//数组记录将要展开的节点
		var callbackPath = callback || function(){};
		this.pathToExpand = path.split(this.pathSeparator);
        if(this.pathToExpand&&this.pathToExpand.length>0&&this.pathToExpand[0]==""){
			this.pathToExpand.splice(0,1)
		}
		this._expandNodeByPathHelper(this.rootNodeUI.domNode,callbackPath);
	},
	
	//按照路径展开节点的辅助方法，会被递归调用
	_expandNodeByPathHelper : function(domNode,callbackPath){
		var preId;
		if (this.getBinding().getId(domNode.associatedData.item) == this.pathToExpand[0]) {
			preId = this.pathToExpand.shift();
		}
		var onComplete = dojo.hitch(this,function(items){
			this._expandNode(domNode,false);
			domNode.associatedData.isExpanded = true;
		   if(this.pathToExpand.length>0&&this._nodeMap[this.pathToExpand[0]]){
				 this._expandNodeByPathHelper(this._nodeMap[this.pathToExpand[0]],callbackPath);
	       }else if(this.pathToExpand.length==0&&this._nodeMap[preId]){
	    	   var lastNode = this.getNodeByDom(this._nodeMap[preId]);
	    	   callbackPath(lastNode);
	       }else{
		   	  return;
		   }
		})
		//如果该节点的子节点数据已经加载进来，直接将当前节点展开即可，如果数据尚未加载，则需要先加载数据，在回调函数中执行展开及相关的操作
		if(domNode.associatedData.item.loaded){
                onComplete();
		}else{
			this.getBinding().getChildren(domNode.associatedData.item,dojo.hitch(this,onComplete));
		}
	},
	
	//新增节点的UI操作函数，在增加数据完成后执行，需要增加对应的domNode。
	//若节点尚未展开过，则直接展开即可，因为数据已经增加，再展开的过程中新增的节点和其他节点将会同时生成
	//若已经展开过，则需要增加一个节点
	_addChildren : function(item,domNode,index){
		//如果节点从未展开过，则将该节点展开即可
		if (domNode.associatedData.state=="UNCHECKED" && domNode.associatedData.isExpanded!=true) 
			this._expandNode(domNode,false);
		else{
			//比照当前节点生成新节点的domNode，重新设置内容和样式
			var tempNode = domNode.cloneNode(true);
			tempNode.className = "dijitTreeNode";
			this.getContentNode(tempNode).className = "treeRenderNode";
			//this.getShowingNode(tempNode).className = "";
			this.getLabelNode(tempNode).className = "dijitTreeLabel";
			this.getContainerNode(tempNode).innerHTML = "";
			dojo.removeClass(this.getContentNode(tempNode));
			this.getContainerNode(tempNode).style.display ="none";
			this._createChildrenDom(domNode, tempNode, item)
			//将节点放置于合适的位置
			var childrenDom = this.getChildrenByDom(domNode);
			if(childrenDom&&childrenDom.length>0&&index!='undefined'&&index<=childrenDom.length&&index>=0){
				if(index<childrenDom.length)
				     dojo.place(tempNode,childrenDom[index],"before");
			    else{
					 dojo.place(tempNode,childrenDom[index-1],"after");
				}
			}else{
				this.getContainerNode(domNode).appendChild(tempNode);
			}
			var node = this._createTreeNode({
				  item:item,
				  domNode : tempNode,
				  tree:this
			    });
			unieap.fireEvent(this,this.onAfterNodeRender,[node]);
			//设置样式
			this._setExpando(domNode);
			this._updateItemClasses(domNode);
			 var _this = this;
			 var childrenDoms = this.getChildrenByDom(domNode);
		      dojo.forEach(childrenDoms, function(child){
				    _this._updateLayout(child);
			});
			this._expandNode(domNode);
		}
	},
	
	//增加节点时，对新生成的domNode进行数据和样式的设置
	_createChildrenDom:function(parentDom,child,item){
		    
	        child.style.display="block";
			//关联数据的绑定
			item["domNode"] = child;
			
			var checked = this.getBinding().isSelected(item);
			var disabled = this.getBinding().isDisabledByData(item);
			
			child.associatedData = {readOnly:false,disabled:disabled,isChecked:checked,domNode:child,isExpanded:false,item:item,isRoot:false,tree:this,label: this.getBinding().getLabel(item),level:parentDom.associatedData.level + 1,state:"UNCHECKED"};
			if (!this.getCheckLogic() || item.data && item.data.label=="")
				this.getCheckboxNode(child).style.display = "none";
			else {
				this.getCheckboxNode(child).style.display = "block";
				this.getCheckboxNode(child).className = "dijitCheckBox";
				this.getCheckboxInputNode(child).disabled = disabled;
			}
			//如果父节点被选中的话，要根据复选逻辑确定新增节点的复选状态
			var node = this._createTreeNode({
				  item:item,
				  domNode : child,
				  tree:this
			});
			this.tmpElementParentNode = child.children[1].firstChild.rows[0];
			if(this.getCheckLogic()&&(this.getNodeByDom(parentDom).isChecked()||checked)){
				this.getCheckLogic().setCheckedForNewNode(node);
			}
			//样式调整
			if(!this._nodeMap) return;//懒加载的下拉树在grid编辑时，有可能nodeMap为空
			this.getContentNode(child).style.display = "inline-block";
			this._nodeMap[this.getBinding().getId(item)] = child;
			var label = this.getBinding().getLabel(item);
			this.tmpElementParentNode.cells[3].firstChild.innerHTML = label || "";
			if(label != ''){
				this.tmpElementParentNode.cells[3].firstChild.title = label;
			}
			var styles = ["dijitTreeExpandoLoading", "dijitTreeExpandoOpened", "dijitTreeExpandoClosed", "dijitTreeExpandoLeaf"];
		    var idx =  (!this.isLeafByData(child.associatedData.item) ? (child.associatedData.isExpanded ? 1 : 2) : 3);
	   		var domNode = this.tmpElementParentNode.cells[0].firstChild;
			domNode.className = styles[idx];
            this._updateItemClasses(child,this.tmpElementParentNode);
			if(disabled){
				node.setDisabled(true);
			}
	},
	
	//根据得到的子节点的items，增加子节点
    setChildItems: function(domNode,items){
        domNode.associatedData.state = "LOADED";
		var tempNode = domNode.cloneNode(true);
		tempNode.className = "dijitTreeNode";
		 this.getContentNode(tempNode).className = "treeRenderNode";
		 this.getLabelNode(tempNode).className = "dijitTreeLabel";
		 dojo.removeClass(this.getContentNode(tempNode));
		 this.getContentNode(tempNode).style.display="inline-block";
		 this.getLineNode(tempNode).style.display = "block";
		 this.getLineNode(tempNode).className = "treeNodeUnselectedLine";
		 //增加子节点，并设置样式
        if (items && items.length > 0) {
            var oFrag = document.createDocumentFragment();
            for (var i = 0; i < items.length; i++) {
                if (!items[i]) {
                    continue;
                }
                var child = tempNode.cloneNode(true);
				this._createChildrenDom(domNode,child,items[i])
                oFrag.appendChild(child);
			    var node = this._createTreeNode({
				  item:items[i],
				  domNode : child,
				  tree:this
			    });
			   this.onAfterNodeRender(node);
            }
            this.getContainerNode(domNode).appendChild(oFrag);
            var clds = this.getChildrenByDom(domNode);
            for (var k = 0; k < clds.length; k++) {
                this._updateLayout(clds[k]);
            }
        }else {
			this._updateItemClasses(domNode);
        }
        if (this._setExpando) {
            this._setExpando(domNode,false);
        }
    },
	
    /**
	 * @summary:
	 * 	     根据数据对象，判断节点是否是叶子节点
	 * @return :
	 * 		{boolean}
	 * @example:
	 * |var node = unieap.byId("basicTree").getCurrentNode(); 
	 * |alert(unieap.byId("basicTree").isLeafByData(node.getItem()));  
	 */
    isLeafByData: function(item){
        return this.getBinding().isLeaf(item);
    },
  /*********************************inner method **************************************/
   //创建树节点
    _createTreeNode: function(args){
        return new unieap.tree.TreeNode(args);
    },
	
	//节点获得焦点
    focusNode : function(node){
		//dijit.focus(this.getLabelNode(node));
    },
	
	//展开指定节点
	 _expandNode: function(domNode,animation){
	 	//如果节点已经展开了，则不作其他操作
	 	if(domNode.associatedData.isExpanded){
			return;
		}
	 	this._setGlobalTreeNode(domNode,domNode.associatedData.item);
		//触发onBeforeExpand事件
	 	var flag = unieap.fireEvent(this,this.onBeforeExpand,[this.globalTreeNode]);
		if(flag==false)
		     return;
	   //根据数据判断是否为叶子节点，如果是叶子节点的话，直接返回
        if (this.isLeafByData(domNode.associatedData.item)) { 
        	if(this.loader!=null){
        		this.setChildItems(domNode,[]);
                this.setNodeExpandStyle(domNode,animation);
        	}
            return;
        }
		//根据节点的状态，判断要执行的操作
        switch (domNode.associatedData.state) {
            case "LOADING":
                return;
			case "UNCHECKED":
                this.markProcessing(domNode);
                var _this = this;
                this.getBinding().getChildren(domNode.associatedData.item, function(items){
                    _this.unmarkProcessing(domNode);
                    _this.setChildItems(domNode,items);
                    _this.setNodeExpandStyle(domNode,animation);
				    //触发onAfterExpand事件
                    unieap.fireEvent(_this,_this.onAfterExpand,[_this.globalTreeNode]);
                }, function(err){
                    console.error(_this, ": error loading children: ", err);
                });
                break;
            default:
                this.setNodeExpandStyle(domNode,animation);
				//触发onAfterExpand事件
            	unieap.fireEvent(this,this.onAfterExpand,[this.globalTreeNode]);
        }
    },
	
	//收起指定节点
    _collapseNode: function(domNode,animation){
		this._setGlobalTreeNode(domNode,domNode.associatedData.item);
		//触发onBeforeCollapse事件
		var flag = unieap.fireEvent(this,this.onBeforeCollapse,[this.globalTreeNode]);
		if(flag==false) 
		        return;
        if (!this.isLeafByData(domNode.associatedData.item)) {
            if (domNode.associatedData.state == "LOADING") {
                return;
            }
		   //设置收起的样式
		   this.setNodeCollapseStyle(domNode,animation);
		   //触发onAfterCollapse事件
		   unieap.fireEvent(this,this.onAfterCollapse,[this.globalTreeNode]);
        }
    },
	
	//使上一次获得焦点的节点失去焦点，并设置样式
	blurNode: function(){
        var node = this.lastFocused;
        if (!node) {
            return;
        }
        var labelNode = this.getLabelNode(node);
        var contentNode = this.getContentNode(node);
        dojo.removeClass(contentNode, "dijitTreeLabelFocused");

        labelNode.setAttribute("tabIndex", "-1");
        var lineNode = this.getLineNode(node);
        dojo.replaceClass(lineNode, "treeNodeUnselectLine", "treeNodeSelectLine");
        this.lastFocused = null;
    },
	
	//根据模块名和声明类，生成对象的实例
    getModuleInstance: function(moduleName, declaredClass){
        dojo.require("unieap.util.util");
        var module = this[moduleName];
        if (!unieap.isClassEntity(module)) {
            module = dojo.mixin({
                widget: this
            }, module);
            declaredClass = module.declaredClass || declaredClass;
            dojo.require(declaredClass);
            var clazz = dojo.getObject(declaredClass);
            module = new clazz(module);
            var name = (function(func){
                for (var name in this) {
                    if (this[name] == func) {
                        return name;
                    }
                }
                return "";
            }).call(this, arguments.callee.caller);
            this[name] = function(){
                return module;
            }
            this[moduleName] = module;
        }
        return module;
    },
	/****************************api*************************************/
	
	/**
	 * @summary：
	 * 		得到根结点
	 * @return
	 * 	{unieap.tree.TreeNode} 
	 * @example:
	 *  |var rootNode = unieap.byId("basicTree").getRootNode(); 
	 */
	getRootNode : function(){
		return this._createTreeNode({
			item:this.getBinding().getRootNodeItem(),
			domNode : this.rootNodeUI.domNode,
			tree:this
		});
	},
	
	/**
	 * @summary：
	 * 		返回树绑定相关的类实例
	 * @return
	 * 		{object} 
	 * @example:
	 * |unieap.byId("basicTree").getBinding().setLabel(node,"newLabel");//调用树的binding来设置节点的显示值
	 */
	getBinding: function(){
		if(this.binding){
			if(!this.binding.bindingClass)
			    this.binding.bindingClass = "unieap.tree.RowSetTreeBinding";
		}else{
			this.binding = {};
			this.binding.bindingClass = "unieap.tree.RowSetTreeBinding";
		}

        return this.getModuleInstance("binding", this.binding.bindingClass);
    },
	
     /**
	 * @summary：
	 * 		返回树复选控制相关的类
	 * @return
	 * 		{object} 
	 * @example:
	 * |unieap.byId("basicTree").getCheckLogic().getSelectedItems(function(items){unieap.debug(item);})
	 */
	getCheckLogic : function(){
		if(this.checkLogic){
			return this.getModuleInstance("checkLogic", this.checkLogicClass);
		}
		else
		    return null;
	},
	
	 /**
	 * @summary：
	 * 		返回树编辑的类，较少用到
	 * @return
	 * 		{object} 
	 * @example:
	 * |var editor = unieap.byId("basicTree").getEditor();
	 */
	getEditor : function(){
		if(this.treeEditor){
			return this.getModuleInstance("treeEditor", this.treeEditorClass);
		}
		else
		     return null;
	},
    
	/**
	 * @summary：
	 * 		返回树加载相关的类
	 * @return
	 * 		{object} 
	 * @example:
	 * |unieap.byId("basicTree").getLoader().setUrl("/getTreeNode.do?method=getData")
	 *  重新设置树加载数据所请求的地址
	 */
    getLoader: function(){
        return this.getModuleInstance("loader", this.treeLoaderClass);
    },
	
	/**
	 * @summary：
	 * 		返回树拖拽相关的类，一般较少用到
	 * @return
	 * 		{object} 
	 * @example:
	 * |var source =  unieap.byId("basicTree").getDndSource();
	 */
	getDndSource : function(){
		if(this.treeDnd){
			return this.getModuleInstance("treeDnd", this.dndSourceClass);
		}else
		     return null;
	},
	
   /**
	 * @summary：
	 * 		返回根结点的显示值
	 * @return
	 * 		{string} 
	 * @example:
	 * |unieap.byId("basicTree").getText();
	 */
	getText : function(){
		 return this.label;
	},
	
	/**
	 * @summary：
	 * 		展开指定节点，如果指定节点为叶子节点或者该节点已经展开则不做其他操作
	 * @param node
	 * 		{unieap.tree.TreeNode} 
	 * @example:
	 * |var treeNode = unieapTree.getNodeById("1"); //获得id为“1”的树节点 
	 * |unieapTree.expandNode(treeNode); //展开该节点     
	 */
	expandNode:function(node){
		if(!node)
		    return ;
		this._expandNode(node.domNode);
	},
	
	/**
	 * @summary：
	 * 		收起指定节点的子节点
	 * @param 
	 * 		{unieap.tree.TreeNode} node
	 * @example:
	 * |var treeNode = unieapTree.getNodeById("1"); //获得id为“1”的树节点 
	 * |unieapTree.collapseNode(treeNode); //收拢该节点
	 */
	collapseNode: function(node,animation){
		if(!node)
		     return;
        this._collapseNode(node.domNode,animation);
    },
	
	/**
	 * @summary：
	 * 		加载当前节点的子节点数据，并执行指定回调函数
	 * @param:
	 * 		{object} item  树节点对应的数据对象
	 * @param:
	 *     {function}callback
	 * @example:
	 * |var node = unieap.byId("basicTree").getCurrentNode();
	 * |unieap.byId("basicTree").loadNodeData(node.getItem(),function(items){unieap.debug(items)});
	 */
	loadNodeData : function(item,callback){
		this.getBinding().getChildren(item,callback);
	},
	
	/**
	 * @summary：
	 * 		得到当前节点的路径，不包含根节点
	 * @param:
	 * 		{unieap.tree.TreeNode} node
	 *  @return 
	 *     {string}
	 * @example:
	 * |var node = unieap.byId("basicTree").getCurrentNode(); 
	 * |alert(unieap.byId("basicTree").getPath(node)); 
	 * @img:
	 *      images/tree/getPath.png
	 */
	getPath : function(node){
		if(!node)
		    return null;
	    if(node.isRoot()){
			return this.pathSeparator;
		}
		var b = [this.getBinding().getId(node.getItem())];
        var p = this.getParentByDom(node.domNode);
        while(p){
			if(p==this.rootNodeUI.domNode)
			       break;
            b.unshift(this.getBinding().getId(p.associatedData.item));
            p = this.getParentByDom(p);
        }
        var sep = this.pathSeparator;
        return sep + b.join(sep);
	},
	
    //根据节点的domNode，返回对应的unieap.tree.TreeNode对象
	getNodeByDom : function(domNode){
		return this._createTreeNode({
			item:domNode.associatedData.item,
			domNode : domNode,
			tree:this
		});
	},
	
	 /**
	 * @summary：
	 * 		得到当前节点的数据对象
	 * @description:
	 * 		返回对应的unieap.tree.TreeNode对象
	 * @param 
	 * 		{object} item
	 * @return 
	 *     	{unieap.tree.TreeNode}
	 * @example:
	 * |var node = unieap.byId("basicTree").getNodeByItem(item);
	 */
	getNodeByItem : function(item){
		if (item.domNode) {
			return this._createTreeNode({
				item: item,
				domNode: item.domNode,
				tree: this
			});
		}
		else 
			return null;
	},

	/**
	 * @summary:
	 *		根据数据结构中id字段的值，得到对应的TreeNode对象
	 * @description:
	 * 		若对应domNode尚未生成或者该id对应节点不存在，返回null
	 * @param:   
	 *      {string}id
	 * @return 
	 *     	{unieap.tree.TreeNode}
	 * @example:
	 * |unieap.byId("basicTree").getNodeById("1"); //获取id值为“1”的TreeNode对象
	 *  
	 */
    getNodeById : function(id){
		if(this._nodeMap[id])
		  return this._createTreeNode({
					item: this._nodeMap[id].associatedData.item,
					domNode: this._nodeMap[id],
					tree: this
				});
		else  
		    return null;
	},
	
	/**
	 * @summary:
	 *		在支持复选的情况下，将指定节点设置为选中或非选中状态。
	 * @description:
	 *		会按照树指定的复选逻辑关联相关节点
	 * @param   
	 *      {unieap.tree.TreeNode}node
	 * @param    
	 *      {boolean}checked
	 * @param:
	 * 		{boolean}withLogic
	 * @example:
	 * |var node = unieap.byId("basicTree").getNodeById("7"); 
	 * |unieap.byId('basicTree').setChecked(node,true); 
	 */
	setChecked : function(node,checked,withLogic,evt){
		if(!node||node.isReadOnly()||node.isDisabled()||!this.getCheckLogic())
		     return;
		if (withLogic!=null&&withLogic!="undefined"&&withLogic==false)
			this.getCheckLogic().setChecked(node,checked,"Multiple",evt);
		else
			this.getCheckLogic().setChecked(node,checked,null,evt);
	},
	
	/**
	 * @summary:
	 *		按照节点的id展开并显示节点
	 * @description:
	 *		若此时节点尚未生成，将会构造树的数据，若最终能够找到该id，则按照层级展开节点.
	 *		若找不到则只是将树的数据构造完整，如果数据量比较大或者懒加载数据，建议慎用此方法
	 * @param   
	 *      {string||array} inData 想要展开节点
	 * @param   
	 *      {function} callback 得到节点后要执行的回调函数
	 * @example 
	 * |inData="workflow,form,report"
	 * |inData=["workflow","form","report"]
	 * @example:
	 * |unieap.byId('basicTree').showNodesById('3,7'); //参数为一个字符串，即由树节点的id组成，用逗号分割。 
	 * @example:
	 * |var array = ['3','7']; 
	 * |unieap.byId('basicTree').showNodesById(array); 
	 */
	showNodesById : function(inData,callback){
		this.callback = callback || function(){};
		var pathArr = (dojo.isString(inData) ? inData.split(",") : inData) , 
			    pathMap = {};		
		for(var i = pathArr.length-1;i>=0;i--){
			var id = pathArr[i];
			if(id in this._nodeMap){
				var node = this.getNodeByDom(this._nodeMap[id]);
				var parentNode  = node.getParent();
				if(parentNode){
					var path = this.getPath(parentNode);
					this.expandNodeByPath(path);					
				}
				this.setCurrentNode(node);
				this.callback(node);				
				continue;
			}
			pathMap[id] = 1;
		}
		if (unieap.isEmpty(pathMap)) {
			this.callback = null;
			return;
		}
		this.stack = [];
	    this.dataStack = [];
	    this.nodeObj = {};
	    this.pathMap = pathMap;
	    var root = this.getBinding().getRootNodeItem();
	    this.searchNode(root);		
	} ,
	
	//通过dataStack获得的path包含非直系祖先 造成过度展开
	//nodeObj中存放的是id：node对象的结构 也是直系和非直系祖先节点
	_buildPath : function(item){
		var binding = this.getBinding();
		var rootName = binding.query.name;
		var rootValue = binding.query.value;
		var isEqual = (binding.query.relation == '=');
		var path = "";
		var parentId = String(binding.getParentId(item))||"";
		var parentNode = this.nodeObj[parentId];
		if(isEqual){
			while(parentNode && parentNode.data[rootName]!=rootValue){
				path = parentId+this.pathSeparator+path;
				parentId = String(binding.getParentId(parentNode))||"";
				parentNode = this.nodeObj[parentId];
			}
			path = parentId+this.pathSeparator+path;
		}else{
			while(parentNode && parentNode.data[rootName].indexof(rootValue)!=-1){
				path = parentId+this.pathSeparator+path;
				parentId = String(binding.getParentId(parentNode))||"";
				parentNode = this.nodeObj[parentId];
			}
			path = parentId+this.pathSeparator+path;
		}
		return path;
	},
	
	//	showNodeById的辅助方法
	searchNode : function(iniItitem){
		if(iniItitem==null) return;
	    this.stack.push(iniItitem);
	    this.nodeObj[String(this.getBinding().getId(iniItitem))]=iniItitem;
	    var onComplete=dojo.hitch(this,function(items){
	        items = items || [];
	        var tmpItems = [];
			var childrenItems = []
			for(var i=0,item;(item = items[i]);i++){
				if (item.loaded)
					childrenItems.unshift(item);
				else
					childrenItems.push(item);
			}
			
			iniItitem.last = childrenItems[childrenItems.length - 1];
			
	        for(var i=0,item;(item = childrenItems[i]);i++){
	        	var id = String(this.getBinding().getId(item));
	        	if(id in this.pathMap){
//					 var path = [];
//					 for(var k=1,ll = this.stack.length; k<ll;k++){
//					 	path[k] = this.getBinding().getId(this.stack[k]);
//					 }

					 //U_EAP00027855 
					 path = this._buildPath(item);
		             this.expandNodeByPath(path);
					 var targetNode = this.getNodeById(id);
					 this.setCurrentNode(targetNode);
					 this.callback(targetNode)
					 delete this.pathMap[id];
					 continue;
		       } 
		       if(!this.getBinding().isLeaf(item)){
		       		tmpItems.push(item);
		       }
	        }
	        if(unieap.isEmpty(this.pathMap)) {
			    this.callback = null;
			    return;
		     }
	        Array.prototype.unshift.apply(this.dataStack,tmpItems);
	        if(tmpItems.length==0){
	            var child,parent;
	            do{
	                 child = this.stack.pop();
	                 delete child.last;
	                 parent = this.stack[this.stack.length-1];
	              }while(parent&&iniItitem.last==child); //最后一个节点都pop出去
	        }
			if(arguments[1]!=false){ //同步请求
				throw new Error("break onComplete");
//				this.searchNode(this.dataStack.shift());
			}else{ //异步请求
				this.searchNode(this.dataStack.shift());
			}
	    });
	    try{
	   	 	this.loadNodeData(iniItitem,onComplete);
	    }catch(e){
	    	this.searchNode(this.dataStack.shift());
	    }
	},

	
	/****************************innernal event*************************************/
	//设置全局树节点的dom和item引用
	_setGlobalTreeNode : function(domNode,item){
		this.globalTreeNode.domNode = domNode;
	    this.globalTreeNode.item = item;
		this.globalTreeNode.tree = this;
		this.globalTreeNode.readOnly = domNode.associatedData.readOnly;
		this.globalTreeNode.disabled = domNode.associatedData.disabled;
	},
	
	//对点击事件的监听
    _onClick: function(evt){
		if(this._editing){
			return;
		}
        var domElement = evt.target;
		var treeDomNode = this._getTreeDomNodeByEvent(evt);  
		if(!treeDomNode){
			return;
		}
		dojo.stopEvent(evt);
		this.focusNode(treeDomNode);
	   //this._setGlobalTreeNode(treeDomNode,treeDomNode.associatedData.item);
	    var node = this.getNodeByDom(treeDomNode);
		if(domElement == this.getCheckboxNode(treeDomNode)||domElement == this.getCheckboxInputNode(treeDomNode)){
			this._handleCheckboxClick(node,evt);
		}
        else if (domElement == this.getExpandoNode(treeDomNode)) {
            if (!this.isLeafByData(node.getItem())) { 
                this._onExpandoClick(node);
            }
        }
        else {
        	if(this.expandByOnClickLabel && (domElement == this._expandByOnClickLabel(treeDomNode) || domElement == this._getExpandLabelFileNode(treeDomNode))){
        			this._onExpandoClick(node);
        	}
            this._selectedNode = treeDomNode;
            this._handleClick(node);
        }
    },
	//点击到复选文本框的时候，会触发的事件
    _handleCheckboxClick : function(node,evt){
		//如果节点是只读或者不可用状态，则不允许进行复选
		if(node.isReadOnly()||node.isDisabled()){
			return;
		}
		var checked;
		if(node.domNode.associatedData.isRoot)
			checked = !node.domNode.associatedData.isChecked;
		else
			checked = !node.isChecked();
		if(this.getCheckLogic()){
			this.setChecked(node,checked,null,evt);
		}else{
			return;
		}
	},
	//标示展开节点的dom被点击后触发的事件
    _onExpandoClick: function(node){
        if (node.isOpend()) {
            this._collapseNode(node.domNode);
        }
        else {
            this._expandNode(node.domNode);
        }
    },
    
    //
    _onKeyPress: function(e){
      //如果节点正在编辑，则不处理导航和监听事件
      if(this.getEditor()&&this._editing == true)
	      return;
	  if(e.altKey){ return; }
	  //节点的导航是以当前节点为起始位置的
	  var node = this.getCurrentNode();
	  if(node&&node.isDisabled())
		   return;
	  if(!node){ return; } 
	  var dk = dojo.keys;
	  var key = e.charOrCode;
	  if(typeof key == "string"){  //如果输入了字符键，无视
		 dojo.stopEvent(e);
		 return ;
	  }else{  // 如果不是字符键，需要进行导航的处理
		var map = this._keyHandlerMap;
			if(!map){
				//定义对不同键盘事件的监听函数
				map = {};
				map[dk.ENTER]="_onEnterKey";
				map[dk.UP_ARROW]="_onUpArrow";
				map[dk.DOWN_ARROW]="_onDownArrow";
				map[dk.LEFT_ARROW]="_onLeftArrow";
				map[dk.RIGHT_ARROW]="_onRightArrow";
				map[dk.HOME]="_onHomeKey";
				map[dk.END]="_onEndKey";
				this._keyHandlerMap = map;
			}
			if(this._keyHandlerMap[key]){
				this[this._keyHandlerMap[key]](node);
				dojo.stopEvent(e);
			}
		}	  
    },
    
	//左键点击事件
	//对于已经展开的非叶子节点将其收起
	//对于叶子节点或者已经收起的非叶子节点，将当前节点的父节点设为当前节点
	_onLeftArrow : function(node){
		if(!node.isLeaf()&&node.isOpend()){
			this.collapseNode(node);
		}else{
			var parentNode = node.getParent();
			if(parentNode&&!parentNode.isRoot()){
				this.setCurrentNode(parentNode);
			}else if(parentNode&&parentNode.isRoot()&&this.showRoot){
				this.setCurrentNode(parentNode);
			}else{
				return;
			}
		}
	},
	
	//右键点击事件
	//对于叶子节点，不进行任何操作
	//对于非叶子节点，若节点没有处于展开状态，则将其展开，若已经展开，则将当前节点移向其第一个子节点
	_onRightArrow : function(node){
		if(!node.isLeaf()&&!node.isOpend()){
			this.expandNode(node);
		}else if(!node.isLeaf()){
			var firstChildNode = node.getFirstChild();
			if(firstChildNode){
			    this.setCurrentNode(firstChildNode);
			}
		}
	},
	//点击up键，将会导航至上一可见节点
	_onUpArrow : function(node){
		//试图将焦点置于当前节点上，如果失败的话，意味着当前节点不可见，则不进行后续的操作了
		try{
			this.focusNode(node.getDomNode());
		}catch(e){
			return;
		}
	    var previousSibling = node.getPreviousChild();
		if(previousSibling){
			node = previousSibling;
			while(!node.isLeaf()&& node.isOpend()&&node.getChildren()){
				var children = node.getChildren();
				node = children[children.length-1];
			}
		}else{
			var parent = node.getParent();
			if(!(!this.showRoot && parent.isRoot())){
				node = parent;
			}
		}
		if(node){
			this.setCurrentNode(node);
		}
	},
	
	//点击down键，将会导航至下一可见节点
	_onDownArrow : function(node){
		//试图将焦点置于当前节点上，如果失败的话，意味着当前节点不可见，则不进行后续的操作了
		try{
			this.focusNode(node.getDomNode());
		}catch(e){
			return;
		}
		var nextNode = this._getNextNode(node);
		if(nextNode){
				this.setCurrentNode(nextNode);
		}
	},
	
	//得到下一节点的内部方法
	_getNextNode : function(node){
		var children=node.getChildren();
		//如果node下面有子节点
		if(!node.isLeaf()&& node.isOpend()&&children){
			// if this is an expanded node, get the first child
			return children[0];		// _TreeNode	
		}else{
			// find a parent node with a sibling
			while(node){
				var returnNode = node.getNextChild();
				if(returnNode){
					return returnNode;		// _TreeNode
				}
				node = node.getParent();
			}
			return null;
		}
	},
	//点击回车键，将会触发用户自定义的逻辑
	_onEnterKey : function(node){
		unieap.fireEvent(this,this.onEnterKeyPress,[node]);
	},
	
	//点击home键，将会移至根节点或者第一个节点
	_onHomeKey : function(node){
		var node = this._getRootOrFirstNode();
		if(node){
		    this.setCurrentNode(node);
		}
	},
	
	//得到根节点或第一个节点的内部方法
	_getRootOrFirstNode: function(){
		return this.showRoot ? this.getRootNode() : this.getRootNode().getChildren()[0];
	},
	
	//点击end键，将会移至最后一个可见节点
	_onEndKey : function(node){
		var node = this.getRootNode();
		while(node.isOpend()){
			var c = node.getChildren();
			node = c[c.length - 1];
		}
		if(node){
			this.setCurrentNode(node);
		}
	},
	
	//右键事件的监听
    _onContextMenu: function(evt){
		var treeDomNode = this._getTreeDomNodeByEvent(evt); 
		dojo.stopEvent(evt);
		if (!treeDomNode||treeDomNode.associatedData.disabled) {
            return;
        }
        this._setGlobalTreeNode(treeDomNode,treeDomNode.associatedData.item);
        var currentTreeNode = this.getNodeByDom(treeDomNode);
        unieap.fireEvent(this,this.onContextMenu,[currentTreeNode]);
    },
    
    //暂存单击事件，防止在双击时误入单击事件
	_intervalTimer : null,
	
	//单双击辨别时延，官方推荐值为300（毫秒）
	_doubleClickDelay : 300,
	
   //双击事件的监听
    _onDblClick: function(evt){
    	if(this.distinguishDblclick){
    		clearTimeout(this._intervalTimer); //取消上次延时未执行的方法
    	} 
		var domElement = evt.target;
		 var treeDomNode = this._getTreeDomNodeByEvent(evt);  
        if (!treeDomNode||treeDomNode.associatedData.disabled) {
            return;
        }
        this.focusNode(treeDomNode);
		if(domElement == this.getExpandoNode(treeDomNode)||domElement == this.getCheckboxNode(treeDomNode)){
			 return ;
		}
        else {
			this._setGlobalTreeNode(treeDomNode,treeDomNode.associatedData.item);
			unieap.fireEvent(this,this.onDblClick,[this.globalTreeNode]);
        }
    },
    
	//点击在节点的文字部分会触发的事件
    _handleClick: function(node){
    	if(this.distinguishDblclick){
    		clearTimeout(this._intervalTimer); //取消上次延时未执行的方法
    	} 
		if(node.isDisabled())
		   return;
        var flag = unieap.fireEvent(this,this.onBeforeClick,[node]);
        if (flag === false) {
            return;
        }
		if(this.getEditor()&&this.lastFocused == node.domNode&&!node.isReadOnly()&&!node.isDisabled()){
			this._editing = true;
			var nodeForEdit = this.getNodeByDom(node.domNode);
			this.getEditor().editNode(nodeForEdit);
		}else {
			this.setCurrentNode(node);
		}
		if(this.distinguishDblclick){
			this._intervalTimer = setTimeout(dojo.hitch(this,function(){
		        flag = unieap.fireEvent(this,this.onClick,[node]);
		        if (flag === false) {
		            return;
		        }
		        unieap.fireEvent(this,this.onAfterClick,[node]);
		    }),this._doubleClickDelay);
		}else{
			flag = unieap.fireEvent(this,this.onClick,[node]);
	        if (flag === false) {
	            return;
	        }
	        unieap.fireEvent(this,this.onAfterClick,[node]);
		}
    },
	
	//设置节点为当前节点，并增加聚焦的样式
    _onTreeFocus: function(domNode){
        if (domNode != this.lastFocused) {
            this.blurNode();
        }
        var labelNode = this.getLabelNode(domNode);
        var contentNode = this.getContentNode(domNode);
        labelNode.setAttribute("tabIndex", "0");
        dojo.removeClass(contentNode, "unieapTreeMouseOver");
        dojo.addClass(contentNode, "dijitTreeLabelFocused");
        var lineNode = this.getLineNode(domNode);
        labelNode.setAttribute("tabIndex", "0");
        dojo.replaceClass(lineNode, "treeNodeSelectLine", "treeNodeUnselectLine");
        this.lastFocused = domNode;
    },
	
	//鼠标移出的事件
	_onMouseOut : function(evt){
	    var treeDomNode = this._getTreeDomNodeByEvent(evt);  
        if (!treeDomNode||treeDomNode.associatedData.disabled) {
            return;
        }
       if (treeDomNode != this.lastFocused) {
			var lineNode = this.getLineNode(treeDomNode);
			dojo.replaceClass(lineNode, "treeNodeUnselectLine", "treeNodeSelectLine");
        }
		dojo.removeClass(this.getContentNode(treeDomNode), "unieapTreeMouseOver");
		this._setGlobalTreeNode(treeDomNode,treeDomNode.associatedData.item);
		unieap.fireEvent(this,this.onMouseOut,[this.globalTreeNode,evt]);
	},
	
	//鼠标移入的事件
	_onMouseOver : function(evt){
		var treeDomNode = this._getTreeDomNodeByEvent(evt);
        if (!treeDomNode||treeDomNode.associatedData.disabled) {
            return;
        }
        if (treeDomNode != this.lastFocused) {
            dojo.addClass(this.getContentNode(treeDomNode), "unieapTreeMouseOver");
        }
		var lineNode = this.getLineNode(treeDomNode);
		
        dojo.replaceClass(lineNode, "treeNodeSelectLine", "treeNodeUnselectLine");
		this._setGlobalTreeNode(treeDomNode,treeDomNode.associatedData.item);
		unieap.fireEvent(this,this.onMouseOver,[this.globalTreeNode,evt]);
	},
	
	//鼠标点击的事件
	_onMouseDown : function(evt){
		var treeDomNode = this._getTreeDomNodeByEvent(evt);  
        if (!treeDomNode||treeDomNode.associatedData.disabled) {
            return;
        }
		this._setGlobalTreeNode(treeDomNode,treeDomNode.associatedData.item);

		unieap.fireEvent(this,this.onMouseDown,[this.globalTreeNode,evt]);
	},
	
	//由event得到相关的节点
	_getTreeDomNodeByEvent : function(evt){
		var domElement = evt.target;
		if(dojo.hasClass(domElement,"dijitTreeContainer"))
		    return null;
		var treeDomNode = null;
		for(var p=domElement; p; p=p.parentNode){
			var flag = p.getAttribute && p.getAttribute("isTreeNode");
			if(flag){
				 treeDomNode =  p;
				 break;
			}
		}
		return treeDomNode;
	},
	//---------------------------
	getLineNode : function(domNode) {
		return domNode.firstChild;
	},
	//===========================
	
	/***************************event for user********************************************/
	
	/**
	 * @summary:
	 *       对节点的点击事件进行监听，当点击到某个节点的label或icon区域时触发该事件，若返回false将会阻止默认的操作
	 * @param  
	 *        {unieap.tree.TreeNode}node
	 * @example:
	 * |<div dojoType="unieap.tree.Tree" id="basicTree"  animate="false" 
	 * |	label="UniEAP" onBeforeClick="beforeClick" 
	 * |	binding = "{'leaf':'leaf', 'store':treeStorePart,
	 * |		'parent':'parentID', query:{name:'parentID',relation:'=',value:''} }"> 
	 * |</div>
	 * |function beforeClick(node){ 
	 * |	if(node.getLabel()=="UniEAP"){ 
	 * |		alert("不允许点击该节点！") 
	 * |		return false; 
	 * |	}else{ 
	 * |		return true; 
	 * |	}
	 * |} 
	 */
	onBeforeClick: function(node){
    },
	
	/**
	 * @summary:
	 *       对节点的点击事件进行监听，当点击到某个节点的label或icon区域时触发该事件
	 * @param  
	 *       {unieap.tree.TreeNode}node
	 * @example:
	 * |<div dojoType="unieap.tree.Tree" id="basicTree"  
	 * |	animate="false" label="UniEAP" onClick="nodeClick" 
	 * |	binding = "{'leaf':'leaf', 'store':treeStorePart,
	 * |		'parent':'parentID', query:{name:'parentID',relation:'=',value:''} }"> 
	 * |</div>
	 * |function nodeClick(node){ 
	 * |	alert("您点击了"+node.getLabel()); 
	 * |} 
	 */
    onClick: function(node){
    },
	
	/**
	 * @summary:
	 *       对节点的点击事件进行监听，会在onClick事件后执行
	 * @param  
	 *        {unieap.tree.TreeNode}node
	 * @example:
	 * |<style> 
	 * |	.unieap .fontLabel{ 
	 * |		font-style:italic; 
	 * |		font-weight:bolder; 
	 * |		font-size:14px; 
	 * |		font-family: Arial; 
	 * |		background-color:yellow; 
	 * |	} 
	 * |</style> 
	 * |function afterNodeClick(node){ 
	 * |	//获取label部分的domNode 
	 * |	var labelDom = unieap.byId("basicTree").getLabelNode(node.getDomNode()); 
	 * |	//点击树节点以后，设置该节点label的样式。 
	 * |	labelDom.className="fontLabel"; 
	 * |}
	 * |<div dojoType="unieap.tree.Tree" id="basicTree"  animate="false" label="UniEAP" 
	 * |	onAfterClick="afterNodeClick" 
	 * |	binding = "{'leaf':'leaf', 'store':treeStorePart,
	 * |		'parent':'parentID', query:{name:'parentID',relation:'=',value:''} }">
	 * |</div>
	 * 点击树节点以后，设置该节点label的样式。 
	 */
    onAfterClick: function(node){
    },
	
	/**
	 * @summary:
	 *       对节点的样式进行更新后触发该事件，若自定义节点样式的话，可以监听本事件
	 * @param  
	 *       {unieap.tree.TreeNode}node
	 * @example:
	 * |<style> 
	 * |	.unieap .fontLabel{ 
	 * |		font-style:italic; 
	 * |		font-weight:bolder; 
	 * |		font-size:14px; 
	 * |		font-family: Arial; 
	 * |		background-color:yellow; 
	 * |	} 
	 * |</style> 
	 * |function afterNodeSetClass(node){ 
	 * |    if(node.isLeaf()){
	 * |		//获取label部分的domNode 
	 * |		var labelDom = unieap.byId("basicTree").getLabelNode(node.getDomNode()); 
	 * |		//对叶子节点使用自定义的样式。
	 * |		labelDom.className="fontLabel";  
	 * |	}
	 * |}
	 * |<div dojoType="unieap.tree.Tree" id="basicTree"  label="UniEAP" 
	 * |	onSetNodeClass="afterNodeSetClass" 
	 * |	binding = "{'leaf':'leaf', 'store':treeStorePart,
	 * |		'parent':'parentID', query:{name:'parentID',relation:'=',value:''}}">
	 * |</div>
	 */
	onSetNodeClass : function(node){
	},
	
	/**
	 * @summary:
	 *       鼠标移到节点上触发该事件
	 * @param  
	 *       {unieap.tree.TreeNode}node
	 * @example:
	 * |<style> 
	 * |	.unieap .fontLabel{ 
	 * |		font-style:italic; 
	 * |	} 
	 * |</style> 
	 * |function nodeMouseOver(node){ 
	 * |	//获取label部分的domNode 
	 * |	var labelDom = unieap.byId("basicTree").getLabelNode(node.getDomNode()); 
	 * |	//当鼠标移到树节点上，设置该节点label的样式。 
	 * |	labelDom.className="fontLabel"; 
	 * |}  
	 * |<div dojoType="unieap.tree.Tree" id="basicTree"  animate="false" label="UniEAP" 
	 * |	onMouseOver="nodeMouseOver" 
	 * |	binding = "{'leaf':'leaf', 'store':treeStorePart,
	 * |		'parent':'parentID', query:{name:'parentID',relation:'=',value:''}}">
	 * |</div>   
	 *  当鼠标移到树节点上，设置该节点label的样式。  
	 */
	onMouseOver : function(node){
	},
	
	/**
	 * @summary:
	 *       鼠标移出节点时触发该事件
	 * @param  
	 *       {unieap.tree.TreeNode}node
	 * @example:
	 * |function nodeMouseOut(node){ 
	 * |	//获取label部分的domNode 
	 * |	var labelDom = unieap.byId("basicTree").getLabelNode(node.getDomNode()); 
	 * |	//当鼠标移出树节点上，设置该节点label的样式。“dijitTreeLabel”为UniEAP树默认的label样式 
	 * |	labelDom.className="dijitTreeLabel"; 
	 * |} 
	 * |<div dojoType="unieap.tree.Tree" id="basicTree"  animate="false" label="UniEAP" 
	 * |	onMouseOut="nodeMouseOut" 
	 * |	binding = "{'leaf':'leaf', 'store':treeStorePart,
	 * |		'parent':'parentID', query:{name:'parentID',relation:'=',value:''} }">
	 * |</div>
	 */
	onMouseOut : function(node){
	},
	
	/**
	 * @summary:
	 *       鼠标在节点上点击触发该事件
	 * @param  
	 *       {unieap.tree.TreeNode}node
	 * @example:
	 * |function nodeMouseDown(node){ 
	 * |	alert(node.getLabel()); 
	 * |} 
	 * |<div dojoType="unieap.tree.Tree" id="basicTree"  animate="false" 
	 * |	label="UniEAP" onMouseDown="nodeMouseDown" 
	 * |	binding = "{'leaf':'leaf','store':treeStorePart,
	 * |		'parent':'parentID', query:{name:'parentID',relation:'=',value:''} }">
	 * |</div>
	 */
	onMouseDown: function(node){
	 	
    },
	
	/**
	 * @summary:
	 *       鼠标在节点上双击触发该事件
	 * @param  
	 *       {unieap.tree.TreeNode}node
	 * @example:
	 * |function nodeDbClick(node){ 
	 * |	alert("您双击了节点："+node.getLabel()); 
	 * |} 
	 * |<div dojoType="unieap.tree.Tree" id="basicTree" 
	 * |	animate="false" label="UniEAP" onDblClick="nodeDbClick" 
	 * |	binding = "{'leaf':'leaf', 'store':treeStorePart,
	 * |		'parent':'parentID', query:{name:'parentID',relation:'=',value:''}}">
	 * |</div>
	 */
	onDblClick : function(node){
	},
	
	/**
	 * @summary:
	 *       鼠标在节点点击右键触发
	 * @param  
	 *        {unieap.tree.TreeNode}node
	 * @example:
	 * |function nodeContextMenu(node){ 
	 * |	alert("您右键点击了节点："+node.getLabel()); 
	 * |} 
	 * |<div dojoType="unieap.tree.Tree" id="basicTree"  animate="false" 
	 * |	label="UniEAP" onContextMenu="nodeContextMenu" 
	 * |	binding = "{'leaf':'leaf', 'store':treeStorePart,
	 * |		'parent':'parentID', query:{name:'parentID',relation:'=',value:''} }">
	 * |</div>
	 */
	onContextMenu : function(node){
		
	},
	
	/**
	 * @summary:
	 *       节点在收起前触发的事件
	 * @param  
	 *       {unieap.tree.TreeNode}node
	 * @example:
	 * |function beforeCollapse(node){ 
	 * |	return confirm("确定要收拢树节点么？"); 
	 * |} 
	 * |<div dojoType="unieap.tree.Tree" id="basicTree" 
	 * |	animate="false" label="UniEAP" 
	 * |	onBeforeCollapse="beforeCollapse" 
	 * |	binding = "{'leaf':'leaf', 'store':treeStorePart,
	 * |		'parent':'parentID', query:{name:'parentID',relation:'=',value:''} }">
	 * |</div>
	 */
	onBeforeCollapse: function(node){
	},
	
	/**
	 * @summary:
	 *       节点在收起后触发的事件
	 * @param  
	 *       {unieap.tree.TreeNode}node
	 * @example:
	 * |function afterCollapse(node){ 
	 * |	alert("节点"+node.getLabel()+"已经收拢！"); 
	 * |} 
	 * |<div dojoType="unieap.tree.Tree" id="basicTree"  animate="false" label="UniEAP" 
	 * |	onAfterCollapse="afterCollapse" 
	 * |	binding = "{'leaf':'leaf', 'store':treeStorePart,
	 * |		'parent':'parentID', query:{name:'parentID',relation:'=',value:''} }">
	 * |</div>
	 */
	onAfterCollapse: function(node){
		
	},
	
	/**
	 * @summary:
	 *       节点在展开前触发的事件
	 * @param  
	 *       {unieap.tree.TreeNode}node
	 * @example:
	 *  |function beforeExpand(node){ 
	 *  |	return confirm("确定要展开树节点么？"); 
	 *  |} 
	 *  |<div dojoType="unieap.tree.Tree" id="basicTree"  animate="false" label="UniEAP" 
	 *  |	onBeforeExpand="beforeExpand" 
	 *  |	binding = "{'leaf':'leaf', 'store':treeStorePart,
	 *  |		'parent':'parentID', query:{name:'parentID',relation:'=',value:''} }">
	 *  |</div>
	 */
	onBeforeExpand: function(node){

	},
	
	/**
	 * @summary:
	 *       节点在展开后触发的事件
	 * @param  node
	 *       {unieap.tree.TreeNode}
	 * @example:
	 * |function afterExpand(node){ 
	 * |	alert("节点"+node.getLabel()+"已经展开！"); 
	 * |} 
	 * |<div dojoType="unieap.tree.Tree" id="basicTree"  animate="false" 
	 * |	label="UniEAP" onAfterExpand="afterExpand" 
	 * |	binding = "{'leaf':'leaf', 'store':treeStorePart,
	 * |		'parent':'parentID', query:{name:'parentID',relation:'=',value:''} }">
	 * |</div> 
	 */
	onAfterExpand: function(node){
		
	},
	
   	/**
	 * @summary:
	 *     在选中所有节点前触发的事件，若返回值为false，将会阻止真正的全选
	 * @example:
	 * |function beforeSelectAll(){ 
	 * |	//自定义逻辑 
	 * |} 
	 * |<div dojoType="unieap.tree.Tree" id="basicTree"  
	 * |	label="UniEAP" onBeforeSelectAll="beforeSelectAll"  checkLogic="{}"
	 * |	binding = "{'leaf':'leaf', 'store':treeStorePart,
	 * |		'parent':'parentID', query:{name:'parentID',relation:'=',value:''} }">
	 * |</div>          
	 */
	onBeforeSelectAll: function(){
		
	},
	
	/**
	 * @summary:
	 *      在选中所有节点后触发的事件
	 * @example:
	 * |function afterSelectAll(){ 
	 * |	alert("节点已经全选"); 
	 * |} 
	 * |<div dojoType="unieap.tree.Tree" id="basicTree"  
	 * |	label="UniEAP" onAfterSelectAll="afterSelectAll"  checkLogic="{}"
	 * |	binding = "{'leaf':'leaf', 'store':treeStorePart,
	 * |		'parent':'parentID', query:{name:'parentID',relation:'=',value:''} }">
	 * |</div> 
	 */
	onAfterSelectAll: function(){
		
	},
	
    /**
	 * @summary:
	 *        在将一个节点设置为当前节点前触发的事件
	 * @param  
	 *        {unieap.tree.TreeNode}node
	 * @return 
	 *    boolean
	 * @example:
	 * |function beforeSetCurrentNode(node){ 
	 * |	return confirm("确定要设置该节点为当前节点么？"); 
	 * |} 
	 * |<div dojoType="unieap.tree.Tree" id="basicTree"  animate="false" 
	 * |	label="UniEAP" onBeforeSetCurrentNode="beforeSetCurrentNode" 
	 * |	binding = "{'leaf':'leaf', 'store':treeStorePart,
	 * |		'parent':'parentID', query:{name:'parentID',relation:'=',value:''} }">
	 * |</div> 
	 */
	onBeforeSetCurrentNode : function(node){
		return true;
    },
	
    /**
	 * @summary:
	 *       在将一个节点设置为当前节点后触发的事件
	 * @param  
	 *       {unieap.tree.TreeNode}node
	 * @example:
	 * |function afterSetCurrentNode(node){ 
	 * |	alert("当前节点为："+node.getLabel()); 
	 * |}
	 * |<div dojoType="unieap.tree.Tree" id="basicTree"  animate="false" label="UniEAP" 
	 * |	onAfterSetCurrentNode="afterSetCurrentNode" 
	 * |	binding = "{'leaf':'leaf', 'store':treeStorePart,
	 * |		'parent':'parentID', query:{name:'parentID',relation:'=',value:''} }">
	 * |</div> 
	 */
	onAfterSetCurrentNode : function(node){
		
	},
	
	 /**
	 * @summary:
	 *       在树上点击回车键会触发的事件，参数为当前节点
	 * @param  
	 *       {unieap.tree.TreeNode}node  当前节点
	 * @example:
     * |function onEnterKeyPress(node){ 
     * |	//节点若不是叶子节点，点击回车键的时候，将其展开
     * |	if(!node.isLeaf())
	 * |		unieap.byId("basicTree").expandNode(node); 
	 * |}
	 * |<div dojoType="unieap.tree.Tree" id="basicTree"  animate="false" label="UniEAP" 
	 * |	onEnterKeyPress="onEnterKeyPress" 
	 * |	binding = "{'leaf':'leaf', 'store':treeStorePart,
	 * |		'parent':'parentID', query:{name:'parentID',relation:'=',value:''} }">
	 * |</div> 
	 */
	onEnterKeyPress : function(node){},
	
	/**
	 * @summary:
	 *		刷新指定树节点的显示文本
	 * @param 
	 *    	{unieap.tree.TreeNode} node
	 * @example:
	 * |var node = unieap.byId("basicTree").getCurrentNode();
	 * |var row = unieap.byId("basicTree").getBinding().getRow(node);
	 * |row.setItemValue("label","新数据");
	 * |unieap.byId("basicTree").freshNodeLabel(node);
	 */
	freshNodeLabel : function(node){
		if(node&&this.getLabelNode(node.domNode)){
			var label = this.getBinding().getLabel(node.getItem());
			var oldLabel = this.getLabelNode(node.domNode).innerHTML;
			if(label!=oldLabel){
				if (!label){
					label = '';
				}
				else{
					label = String(label).replace(/&/g,"&amp;").
							 replace(/</g,"&lt;").
							 replace(/>/g,"&gt;").
							 replace(/\s/g,"&nbsp;");
				}		
				this.getLabelNode(node.domNode).innerHTML = label;
			}
		}
	},
	fireDataChange : function(node){
		this.freshNodeLabel(node);
	},
	
	/**
	 * @summary:
	 *       树节点生成时的事件
	 * @param  
	 *       {unieap.tree.TreeNode} node 当前节点
	 * @example:
	 * |function beforeNodeRender(node){ 
	 * |	alert(node.getLabel()); 
	 * |} 
	 * |<div dojoType="unieap.tree.Tree" id="basicTree"
	 * |	label="UniEAP" onAfterNodeRender="beforeNodeRender" 
	 * |	binding = "{'leaf':'leaf', 'store':treeStorePart,
	 * |		'parent':'parentID', query:{name:'parentID',relation:'=',value:''} }">
	 * |</div>        
	 */
	onAfterNodeRender : function(node){}
	
});
dojo.provide("unieap.tree.TreeLoader");
dojo.require("unieap.tree.Tree");
dojo.require("unieap.rpc");
dojo.require("unieap.ds");
dojo.declare("unieap.tree.TreeLoader",null,{
	/**
	 * @declaredClass:
	 * 		unieap.tree.TreeLoader
	 * @summary:
	 * 		加载树数据的类
	 * @classDescription:
	 *     支持通过发送ajax请求，实现懒加载数据
	 *     允许用户在发送请求的时候，传递自定义参数
	 *     支持取本地数据
	 * @example:
	 * |  <div dojoType="unieap.tree.Tree" 
	 * |      id="lazyTree" label="UniEAP" 
	 * |      loader="{'url':unieap.WEB_APP_NAME+'/getLazyDataTest.do?method=getData',
	 * |			parameters:{aa:'ddd',bb:'vvv'}}" 
	 * |      binding = "{'leaf':'leaf', 'store':'treeStoreForLazyLoad',
	 * |			'parent':'parentID', query:{name:'parentID',relation:'=',value:''}}" > 
	 * |  </div> 
	 *   RowSet格式数据的懒加载
	 * @example:
	 * | <div dojoType="unieap.tree.Tree" label="根结点" 
	 * |   loader ="{'url':unieap.WEB_APP_NAME+'/getLazyDataTest.do?method=getData2'}" 
	 * |   binding = "{bindingClass :'unieap.tree.JsonTreeBinding','leaf':'leaf',
	 * |			'jsonData':jsondata, 'label':'text', id:'text'}">
	 * | </div>   
	 *  Json格式数据的懒加载
	 */
	
	/**
	 * @summary：
	 * 	     指定请求后台数据的连接地址
	 * @type
	 * 		{string} 
	 */
	url :  "",
	
	
	/**
	 * @summary：
	 * 		设置要同时传递到后台的其他参数
	 * @type：
	 * 		{object} 
	 * @example：
	 * 	| {event:"security",name:"getRole"}	
	 */
	parameters : null,	
	
	constructor: function(params){
			dojo.mixin(this, params);
	},
	
	/**
	 * @summary：
	 * 		在进行后台请求时，要同时提交到后台的数据，此方法应返回一个dc做为unieap.Action.requestData的第二个参数传到后台
	 * @param：
	 * 	   {object}item
	 * @return :
	 *     {object}
	 * @description:
	 *     该数据将作为unieap.Action.requestData的第二个参数传到后台，格式应该为一个DataCenter
	 *     默认为null，如果用户要提交自定义的数据，可重写本函数。
	 * @example:
	 * |function doGetPostData(item){ 
	 * |	var dc = new unieap.ds.DataCenter(); 
	 * |	var label = item.data["label"]; 
	 * |	if(label){ 
	 * |		dc.setParameter("label",label); 
	 * |	} 
	 * |	return dc; 
	 * |}
	 * |<div dojoType="unieap.tree.Tree" 
	 * |	id="lazyTree" label="UniEAP" 
	 * |	loader="{'url':unieap.WEB_APP_NAME+'/getLazyDataTest.do?method=getData',
	 * |		getPostData:doGetPostData}" 
	 * |	binding = "{'leaf':'leaf', 'store':'treeStoreForLazyLoad',
	 * |		'parent':'parentID', query:{name:'parentID',relation:'=',value:''}}" >
	 * |</div>
	 */
	getPostData : function(item){
		return null;
	},
	
	/**
	 * @summary：
	 * 		在进行后台请求前的回调函数
	 * @param：
	 * 		{object}item
	 * @return :
	 *     {boolean}
	 * @description:
	 *     返回值为布尔类型，若为false，则不会请求后台数据
	 * @example:
	 *  |function beforeload(item){ 
	 *  |	return confirm("您确定要加载"+item.data["label"]+"的孩子节点么？"); 
	 *  |} 
	 *  |<div dojoType="unieap.tree.Tree" id="lazyTree" label="UniEAP" 
	 *  |	loader="{'url':unieap.WEB_APP_NAME+'/getLazyDataTest.do?method=getData',
	 *  |			onBeforeLoad:beforeload}" 
	 *  |	binding = "{'leaf':'leaf', 'store':'treeStoreForLazyLoad',
	 *  |			'parent':'parentID', query:{name:'parentID',relation:'=',value:''}}" >
	 *  |</div> 
	 */
	onBeforeLoad : function(item){
		return true;
	},
	
	/**
	 * @summary：
	 * 		在进行后台请求后的回调函数
	 * @param：
	 * 		{unieap.ds.DataCenter|string}dc
	 * @param:
	 *     {object}item
	 * @description:
	 *     对得到的unieap.ds.DataCenter或json串进行必要的操作
	 *     提供了默认实现，对RowSet结构的树数据，设置查询条件以确定当前节点的第一层子节点数据
	 * @example:
	 * |function afterload(dc,item){ 
	 * |	//用户自定义逻辑
	 * |} 
	 * |<div dojoType="unieap.tree.Tree" id="lazyTree" label="UniEAP" 
	 * |	loader="{'url':unieap.WEB_APP_NAME+'/getLazyDataTest.do?method=getData',
	 * |		'onAfterLoad':afterload}" 
	 * |	binding = "{'leaf':'leaf', 'store':'treeStoreForLazyLoad',
	 * |		'parent':'parentID', 'query':{name:'parentID',relation:'=',value:''}}" >
	 * |</div> 
	 */
	onAfterLoad : function(dc,item){
		return true;
	},
	
	/**
	 * @summary：
	 * 		取本地数据，构建子节点数据
	 * @param：
	 * 		{object}item
	 * @return :
	 *     {unieap.ds.DataStore|string}
	 * @description:
	 *      若不需要请求后台，只是取本地数据可以重写该方法
	 *      在配置loader且不配置url属性的情况下，将会调用此函数
	 * @example:
	 * |var treeStorePart = new unieap.ds.DataStore("treeStore",[
	 * |	{treeId:"1",title:"node1",parentID:"",isLeaf:false}, 
	 * |	{treeId:"2",title:"node2",parentID:"",isLeaf:true}, 
	 * |	{treeId:"3",title:"node3",parentID:"",isLeaf:true}
	 * |]); 
	 * |var treeStorePart2 = new unieap.ds.DataStore("treeStore2",[
	 * |	{treeId:"4",title:"new_node11",parentID:"1",isLeaf:true},
	 * |	{treeId:"5",title:"new_node12",parentID:"1",isLeaf:true}, 
	 * |	{treeId:"6",title:"new_node13",parentID:"1",isLeaf:true} 
	 * |]); 
	 * |function doGetLocalData(item){ 
	 * |	if(item.data["treeId"]==""){ 
	 * |		return treeStorePart; 
	 * |	}else if(item.data["treeId"]=="1"){ 
	 * |		return treeStorePart2; 
	 * |	}else{ return null; } 
	 * |} 
	 * |<div dojoType="unieap.tree.Tree" id="lazyTree2" label="UniEAP" 
	 * |	loader="{'getLocalData':doGetLocalData}" 
	 * |	binding = "{'leaf':'isLeaf', 'label':'title',
	 * |			'rootNodeId':'','parent':'parentID', 'id':'treeId',
	 * |			'query':{name:'parentID',relation:'=',value:''}}" >
	 * |</div>
	 *   从本地取数据构建树结构
	 * @img:
	 *      images/tree/getLocalData.png
	 */
	getLocalData : function(item){
		return null;
	},
	
	
	/**
	 * @summary:
	 * 		当树为懒加载时,设置是以是同步还是异步方式来获取数据
	 * @description:
	 * 		默认为异步方式
	 * @default:
	 * 		false
	 */
	sync:false,
	
	
	/*
	 * @summary:
	 * 		用于懒加载树，让用户主动往后台发送请求，给V4提供接口实现
	 * @param {object} item
	 * @param {function} load
	 * @param {function} error
	 */
	rpc:null,
	
	
	//发送Ajax请求，得到懒加载树子节点的数据
	load : function(item,callback){	
		if (this.url||this.rpc) {
			var flag  = unieap.fireEvent4Widget(this,this.widget,this.onBeforeLoad,[item]),self=this;
			if(flag ==false){
				callback(null);
				return ;
			}
			var loadCB=function(dc){
				if(dc instanceof unieap.ds.DataCenter){
					if(unieap.fireEvent4Widget(self,self.widget,self.onAfterLoad,[dc,item])){
						self.widget.getBinding().afterLoad(dc,item);
					}
					callback(dc);
				}
			};
			var errorCB=function(){
				callback(null);
			};
			if(dojo.isFunction(this.rpc)){
				var _self = this;
				dojo.addOnLoad(function(){
					_self.rpc(item,loadCB,errorCB);
				});
			}else{
				unieap.Action.requestData({
					url : this.url,
					dc : this.widget.dataCenter || (unieap.Action.getViewContext(this.widget) || window).dataCenter,
					sync:this.sync,
					parameters: this.buliderParams(this.parameters,item),
					load: function(dc){
						loadCB(dc);
					},
					error: function(){
						errorCB();
					}
				},unieap.fireEvent4Widget(this,this.widget,this.getPostData,[item]),false);
			}
		}else {
			var result = unieap.fireEvent4Widget(this,this.widget,this.getLocalData,[item]);
			callback(result);
		}
	},
	
	/**
	 * @summary：
	 * 		构建往后台发请求取数据的参数
	 * @param 
	 * 		{object} params   即为初始定义的parameters
	 * 	@param 
	 * 		{object} item
	 * @return：
	 * 		{object}
	 * @description:
	 *     构建在请求后台数据时的参数，默认会增加一个node属性，其值为当前item对应的id
	 *     用户如果需要传递更多的参数，可以重写该方法
	 * @example:
	 * |//用户自定义参数函数
	 * |function doBuilderParams(params,item){ 
	 * |	params = params?params:{}; 
	 * |	params.nodeID = this.widget.getBinding().getId(item); 
	 * |	params.label=item.data["label"]; 
	 * |	return params;
	 * |}
	 * |//后台取参数
	 * |String aa=request.getParameter("aa"); 
	 * |String bb=request.getParameter("bb"); 
	 * |String nodeID = request.getParameter("nodeID"); 
	 * |String label = request.getParameter("label");
	 * |//标签生成树
	 * |<div dojoType="unieap.tree.Tree" id="lazyTree" label="UniEAP" 
	 * |	loader="{'url':unieap.WEB_APP_NAME+'/getLazyDataTest.do?method=getData',
	 * |			parameters:{aa:'ddd',bb:'vvv'},'buliderParams':doBuilderParams}" 
	 * |	binding = "{'leaf':'leaf', 'store':'treeStoreForLazyLoad',
	 * |			'parent':'parentID', query:{name:'parentID',relation:'=',value:''}}" >
	 * |</div> 
	 * |
	 */
	buliderParams : function(params,item){
		params  = params?params:{};
	    params.node = this.widget.getBinding().getId(item);
        return params;
	} ,
	
	/**
	 * @summary：
	 * 		重新设置发送请求的url地址
	 * @param 
	 * 		{string} url   为树对应的loader对象重新设置url
	 * @description:
	 *      如果对于不同的节点会发向不同的请求地址，可以使用该方法动态设置请求数据的url地址
	 * @example:
	 * |unieap.byId("basicTree").getLoader().setUrl("/getTreeNode.do?method=getData");
	 */
	setUrl : function(url){
		this.url = url;
	}
	
});


dojo.provide("unieap.tree.TreeBinding");
dojo.require("unieap.tree.Tree");
dojo.declare("unieap.tree.TreeBinding",null,{
	 /**
	 * @declaredClass:
	 * 		unieap.tree.TreeBinding
	 * @summary:
	 * 		树绑定数据的具体实现的父类
	 * @classDescription:
	 *      提供了对树绑定数据基本操作和属性的实现
	 *      RowSetTreeBinding和JsonTreeBinding均继承此类
	 */
	
    /**
	 * @summary：
	 * 		设置树的节点对应数据的标识字段
	 * @type：
	 * 		{string}
	 * @default：
	 * 		id 
	 * @description:
	 *      为了对树上的每个节点进行唯一的标示，需要对树节点对应的数据指定一个字段，进行唯一的标示
	 * <div dojoType="unieap.tree.Tree" id="persistTree"  treeEditor="{allowBlank:false}"  label="UniEAP" 
	 * binding = "{id:'UP_TREE_TEST_ID','store':'treeStore','label':'UP_TREE_TEST_LABEL','leaf':'UP_TREE_TEST_LEAF'
	 * 'parent':'UP_TREE_TEST_PARENTID',query:{name:'UP_TREE_TEST_PARENTID',relation:'=',
	 * value:'unieap_ria_tree_id_for_root'}}" >
	 * </div>
	 */
	 id :"id",
	 
	 /**
	 * @summary：
	 * 		设置树的节点对应数据的显示字段
	 * @type：
	 * 		{string}
	 * @default：
	 * 		label 
	 * @description:
	 *      指定数据中显示字段，对于每个节点会将其对应数据的该字段值作为显示值
	 */
	 label:"label",
	 
	/**
	 * @summary：
	 * 		设置树的节点对应图标的样式字段
	 * @type：
	 * 		{string}
	 * @default：
	 * 		"" 
	 * @description:
	 *      在应用中，如果对于不同的节点的图标显示为不同样式，可将节点图标显示的样式为css类名存储为一个字段，通过该属性指定对应的字段名称
	 */
	 iconClass : "",
	 
	 /**
	 * @summary：
	 * 		设置树的节点对应文字的样式字段
	 * @type：
	 * 		{string}
	 * @default：
	 * 		"" 
	 *  @description:
	 *      在应用中，如果对于不同的节点的文字区域要显示为不同样式，可将节点文字显示的样式为css类名存储为一个字段，通过该属性指定对应的字段名称
	 */
	 labelClass : "",
	 
	 /**
	 * @summary：
	 * 		 设置标示子节点数据的字段
	 * @type：
	 * 		{string}
	 * @default：
	 * 		"children" 
	 * @description:
	 *     在json格式的数据中，通过设置该属性的值确定子节点对应的数据
	 *     在RowSet格式的数据中，在构建树形数据时，也会使用该字段的值标示子节点的数据对象
	 */
	 children:"children",
	 
	 /**
	 * @summary：
	 * 		标示节点是否是叶子节点的字段
	 * @type：
	 * 		{string}
	 * @default：
	 * 		"" 
	 * @example:
	 * |<div dojoType="unieap.tree.Tree" id="Tree" label="UniEAP" 
	 * |binding = "{'leaf':'leaf','store':lazyLoadTree.treeStoreForLazyLoad,
	 * |'label':'label','parent':'parentID',query:{name:'parentID',relation:'=',value:''}}">
	 * |</div>
	 * @description:
	 * 	  根据datastore中对应数据的'leaf'字段是true还是false来判断该节点是否是叶子节点
	 *    在数据中指定一个字段标示对应节点是否为叶子节点，树会根据该字段的值判断节点的显示样式
	 *    对树进行节点增删操作的时候，若往叶子节点上添加子节点或者把某个非叶子节点的所有子节点全部删除，会改变此字段的值
	 */
	 leaf : "",
	 
	 sort:null,
	 
	 /**
	 * @summary：
	 * 		设置生成binding类的类名
	 * @type：
	 * 		{string}
	 * @default：
	 * 		"" 
	 * @description:
	 *     目前支持的为RowSetTreeBinding和JsonTreeBinding两种类型
	 */
	 bindingClass : "",
	 
	 /**
	 * @summary：
	 * 		树的虚拟根节点的id
	 * @type：
	 * 		{string}
	 * @default：
	 * 		"unieap_ria_tree_id_for_root" 
	 * @description:
	 *     为了检索和数据加载，为树的虚拟根节点设置的id。一般情况下用户不需要配置，在树的懒加载中，可能需要进行设置。
	 */
	 rootNodeId : "unieap_ria_tree_id_for_root",
	 
	 /**
	 * @summary：
	 * 		标示节点是否为disabled状态的字段
	 * @type：
	 * 		{string}
	 * @default：
	 * 		"" 
	 * @description:
	 *    在数据中指定一个字段标示对应节点是否为disabled状态，树会根据该字段的值判断节点的样式和状态
	 *    对树进行节点的setDisabled操作时，若指定了该字段，将会同步修改该字段的值。
	 */
	 disabled:"",
	 
	//创建树唯一根节点
	createRootNodeItem : function(){
		this.treeRoot={};
		this.treeRoot["data"] = {label: this.widget.label || ""};
		this.treeRoot["data"][this.id] = this.rootNodeId;
	},
	//返回树根结点对应的数据对象
	getRootNodeItem : function(){
		return this.treeRoot;
	},
	
	/**
	 * @summary：
	 * 		根据某节点数据对象，得到对应的图标样式字段的值
	 * @param
	 *     {object}item
	 * @return
	 * 		{sring} 
	 * @description:
	 *       树在渲染节点的时候会调用该方法，以进行节点样式的确定
	 * @example:
	 * |var iconClass =  unieap.byId("basicTree").getBinding().getIconClass(node.getItem());
	 */ 
	 getIconClass:function(item){
	 	if(this.iconClass){
			return item.data[this.iconClass];
		}
	 },
	 
	 /**
	 * @summary：
	 * 		得到某节点数据对象对应的文字样式字段的值
	 * @param
	 *     {object}item
	 * @return
	 * 		{sring} 
	 * @description:
	 *      树在渲染节点的时候会调用该方法
	 * @example:
	 * |var labelClass =  unieap.byId("basicTree").getBinding().getLabelClass(node.getItem());
	 */ 
	 getLabelClass : function(item){
	 	if(this.labelClass){
			return item.data[this.labelClass];
		}
	 },
	 
	 /**
	 * @summary：
	 * 		得到某节点数据对象对应的样式字段的值
	 * @param
	 *     	{object}item
	 * @return
	 * 		{sring} 
	 * 	@example:
	 * |unieap.byId("basicTree").getBinding().getLabel(node.getItem());
	 */ 
	 getLabel : function(item){
		return item.data[this.label];
	},
	

	
	/**
	 * @summary：
	 * 		根据数据对象，判断一个节点是否为叶子节点
	 * @param  
	 * 		{object} item
	 * @description:
	 *      首先根据指定的字段进行判断，若没有指定对应的字段，则根据是否有子节点的数据进行判断
	 * @example:
	 * |var leafOrNot = unieap.byId("basicTree").getBinding().isLeaf(node.getItem());
	 */ 
	 isLeaf : function(item){
	 	if(this.leaf && item.data[this.leaf]!=null){
			  return item.data[this.leaf]==true;
		}
	   if(item.children){
			return !item.children.length>0;
		}
		return this.widget.loader!=null || item==this.treeRoot ? false : true;
	 },
	 
	/**
	 * @summary：
	 * 		得到某节点数据对象对应的标识字段的值
	 * @param
	 *     	{object}item
	 * @return
	 * 		{sring} 
	 * @example:
	 * |var id = unieap.byId("basicTree").getBinding().getId(node.getItem());
	 */ 
	 getId : function(item){
	 	return item.data[this.id];
	 },
	 
	 //根据指定的字段判断一个节点是不是disabled
	 isDisabledByData : function(item){
		if(this.disabled){
			return item.data[this.disabled]==true;
		}
		return false;
	}, 
	
	//若指定了标示disabled的字段，将一个节点对应的数据设置成对应的状态
	setDisabled : function(node,disabled){
		if(this.disabled){
			node.getItem().data[this.disabled] = disabled;
		}
	}
})
dojo.provide("unieap.tree.JsonTreeBinding");
dojo.require("unieap.tree.Tree");
dojo.require("unieap.tree.TreeBinding");
dojo.declare("unieap.tree.JsonTreeBinding", unieap.tree.TreeBinding, {
	 /**
	 * @declaredClass:
	 * 		unieap.tree.JsonTreeBinding
	 * @summary:
	 * 		树绑定JSON数据的实现类
	 * @classDescription:
	 *     	对JSON结构的数据，提供了对树的支持
	 *     	支持数据懒加载
	 * @superClass
	 *      unieap.tree.TreeBinding
	 * @example:
	 * |	<div dojoType="unieap.tree.Tree" 
	 * |		id="checkTree" 
	 * |		label="UniEAP" 
	 * |		binding="{bindingClass :'unieap.tree.JsonTreeBinding',
	 * |		'leaf':'leaf',' 
	 * |		jsonData':jsondata, 
	 * |		'label':'text', 
	 * |		'id':'text'}">
	 * |	</div>
	 */

    /**
     * @summary：
     * 		指定树数据的字符串
     * @type
     * 		{string}
     * @description:
     *      数据格式为字符串，转换成JavaScript对象后，是一个数组形式的数据，包含了数据间的层次关系
     * @example:
     * |	"[{data:{id:'01',text:'01'},children:[
     * |		{data:{text:'01-01',leaf:true}},
     * |		{data:{text:'01-02'},children:[
     * |			{data:{text:'01-02-01',leaf:true}},
     * |			{data:{text:'01-02-02',leaf:true}}
     * |		]},
     * |		{data:{text:'01-03',leaf:true}}
     * |		]},
     * |	{data:{text:'02',leaf:true}},
     * |	{data:{text:'03',leaf:true}}
     * |	]"	
     * 以上为一个典型的JSON格式的树要求的数据结构
     */
    jsonData: "",
    
    constructor: function(params){
        dojo.mixin(this, params);
        this.createRootNodeItem();
        if(this.jsonData){
        	this._treeData = dojo.isString(this.jsonData) && dojo.fromJson(this.jsonData) || this.jsonData;
        	this.getRootNodeItem()[this.children] = this._treeData;
        	this.getRootNodeItem().loaded = true;
        }
		this.widget.afterLoad = dojo.hitch(this,"afterLoad");
		
    },
    
    afterLoad : function(){
		
	},
    
    /**
    * @summary:
    *       得到节点的子节点对应的数据
    * @param {object} item
    * @param {function} callback
    * @description:
    *       根据一个item，得到其子节点对应的数据对象组成的数组，并执行回调函数，回调函数的参数即为得到的items
    * @example:
    * |	var node = unieap.byId("basicTree").getCurrentNode();
    * |	unieap.byId("basicTree").getBinding().getChildren(node.getItem(),function(items){unieap.debug(items)});
    */
    getChildren: function(item, callback){
        callback = callback ||function(){};
        if (item.loaded) {
            callback(item[this.children]);
            return;
        }
        item.loaded = true;
        if (this.isLeaf(item)) {
            callback(null);
            return
        }
        if (this.doPreLoad(item)) 
            callback(this.doPreLoad(item));
        else  if (this.widget.loader) {
                var loader = this.widget.getLoader();
                var _this = this;
                var onComplete = function(res){
                    item[_this.children] = res || [];
                    callback(res,false);
                }
                loader.load(item, onComplete);
            }
            else 
                callback(null);
    },
    
    //在执行TreeLoader的load方法前，先在已有的数据中进行查询，得到子节点的数据对象数组
    doPreLoad: function(item){
        var childItems;
        if(item==this.treeRoot&&this.jsonData){
			childItems =this._treeData;
		}else{
			childItems = item[this.children];
		}
		return childItems;
    },
    
	
	//将传递过来的item设置选中或非选中状态
	setSelected : function(item,checked){
		item.isChecked = checked;
	},
	
	//返回item是否选中
	isSelected : function(item){
		return item.isChecked==true;
	},
	
	/**
	 * @summary：
	 * 		设置某节点数据对象对应的显示字段的值
	 * @param  
	 *     	{unieap.tree.TreeNode}node
	 * @param  
	 * 		{sring} label
	 * @example:
	 * |	var treeNode = checkTree.getCurrentNode(); 
	 * |	checkTree.getBinding().setLabel(treeNode,"newLabel"); 
	 */ 
	 setLabel : function(node,label){
	    if(!node||node.isRoot()){
			return ;
		}
		var item = node.getItem();
		 item.data[this.label] = label;
		 this.widget.fireDataChange(node);
	 },
	
	 /**
     * @summary：
     * 		得到树对应的数据对象
     * @return
     * 		{array}
     * @description:
     *      树的数据经过编辑或者增删节点，可能已于初始设置的jsonData不同
     * @example:
     * |	var treeData = checkTree.getBinding().getData(); 
     * |	unieap.debug(treeData); 
     * @img:
	 *    images/tree/getData.png
     */
	getData : function(){
		var result = [],
		    children = this.getRootNodeItem()[this.children] || [];
		for(var i=0,l=children.length;i<l;i++){
			result.push(this._addContent(children[i]));
		}
		return result;		
	},
	
	
	_addContent : function(item){
		var newItem = {};
		newItem["data"] = item.data;
		if(item.children){
			newItem["children"] = [];
			for(var i=0,l=item.children.length;i<l;i++){
				newItem["children"].push(this._addContent(item.children[i])); 
			}
		}
		return newItem;
	},
	// 增加一条数据
	addItem : function(data,parentItem){
		var newItem ={};
		var brothersItems = parentItem.children;
		if(brothersItems){
			newItem = {data:data} 
			brothersItems.push(newItem);
		}else{
			newItem = {data:data} 
			parentItem.children = [];
			parentItem.children.push(newItem);
		    if(this.leaf){
			    parentItem.data[this.leaf]=false;
		     }
		}
		return newItem;
	},
	//删除一条数据
	deleteItem : function(item,parentItem){
		var brotherItems = parentItem[this.children];
		for(var i=0;i<brotherItems.length;i++){
			if(brotherItems[i]==item){
				brotherItems.splice(i,1)
				break;
			}
		}
	},
	refresh : function(item){
		
	}
});
dojo.provide("unieap.tree.RowSetTreeBinding");
dojo.require("unieap.tree.Tree");
dojo.require("unieap.tree.TreeBinding");
dojo.require("unieap.util.util");
dojo.require("unieap.ds");
dojo.declare("unieap.tree.RowSetTreeBinding", unieap.tree.TreeBinding, {
      /**
	 * @declaredClass:
	 * 		unieap.tree.RowSetTreeBinding
	 * @summary:
	 * 		树绑定Rowset数据的实现类
	 * @classDescription:
	 *     	对RowSet结构的数据，提供了对树的支持
	 *     	支持懒加载的情况，也即一棵树上会有多个RowSet
	 *     	支持给指定节点重新设置store
	 * @superClass
	 *      unieap.tree.TreeBinding
	 * @example:
	 * |<div dojoType="unieap.tree.Tree" id="basicTree" 
	 * |	animate="false" label="UniEAP" 
	 * |	binding = "{'leaf':'isLeaf', 'id':'treeId', 'store':treeStorePart,'label':'title',
	 * |		'parent':'parentID', query:{name:'parentID',relation:'=',value:''} }"> 
	 * |</div> 
	 */

	/**
	 * @summary：
	 * 		指定数据集DataStore对象，可以是名称或对象
	 * @type
	 * 		{unieap.ds.DataStore|string} 
	 */
    store: null,
    
	/**
	 * @summary:
	 * 		设置Tree控件所绑定的DataStore对象来源于哪个DataCenter，仅在store属性为DataStore名称时生效
	 * 		若没有指明,将会在全局的DataCenter对象(即dataCenter)中获取DataStore
	 * @type:
	 * 		{unieap.ds.DataCenter}
	 * @example:
	 * |<div dojoType="unieap.tree.Tree" id="basicTree" 
	 * |	binding = "{'leaf':'isLeaf', 'id':'treeId', 'store':treeStorePart,'label':'title',datacenter:dc,
	 * |		'parent':'parentID', query:{name:'parentID',relation:'=',value:''} }"> 
	 * |</div> 
	 */
	dataCenter: null,
    
    
	/**
	 * @summary：
	 * 		指定数据中标识父节点的字段名
	 * @type：
	 * 		{string} 
	 * @default：
	 * 		"parent"
	 */
    parent: "parent",
   
	
	/*
	 * @summary：
	 * 		树包含的所有store的数组
	 * @type：
	 * 		{array}
	 * @default：
	 * 		null 
	 * 		
	 */
	stores : null,
	
    /**
	 * @summary：
	 * 		构建树的第一层节点的查询条件
	 * @type：
	 * 		{object}
	 * @default：
	 * 		null 
	 * @description:
	 *   确定树的第一层节点查询条件，将会对给定RowSet执行该属性的查询条件，将查询结果构建树的第一层节点
	 *   如果不设置该属性，默认实现会是将parent对应字段为“”的数据构建第一层节点	
	 */
	query : null,
	
    /**
	 * @summary：
	 * 		删除节点时是否修改对应父节点的leaf字段的值
	 * @type：
	 * 		{boolean}
	 * @default：
	 * 		true 
	 */
	changeLeaf:true,
    
    constructor: function(params){
		dojo.mixin(this, params);
		this.stores = {};
		if(!this.query){
			this.query = {
					name: this.parent,
					relation: "=",
					value: ""
			}			
		}
		this.createRootNodeItem();
		if(!this.dataCenter){
			this.dataCenter = this.widget.dataCenter || (unieap.Action.getViewContext(this.widget) || window).dataCenter;
		}
		if(dojo.isString(this.store)){
			this.store=unieap.getDataStore(this.store, this.dataCenter, false);
		}
		
		this.rowsetCache = {};
		if (this.store) {
			this.setQuery(this.store,this.query,this.getRootNodeItem());	
			var item = this.getRootNodeItem();
			item["rs"] = this.store.getRowSet();
		}	
		//通过桥接模式，为Tree增加	afterLoad方法，配置在加载数据完成后要设置查询条件的函数
		this.widget.afterLoad = dojo.hitch(this,"afterLoad");
    },
	
	/**
	 * @summary:
	 *       在懒加载树的情况下，设置得到datastore的query条件
	 * @param {unieap.ds.DataCenter} dc
	 * @param {object} item
	 * @description:
	 *       如果是懒加载树，会得到一个DataCenter，里面包含当前节点子节点的数据，
	 *       但可能并不是得到的所有数据都是当前节点的直接子节点，因此通过重写该方法，进行数据的过滤，得到直接子节点的信息
	 *       默认情况下，会根据当前节点的id确定查询条件
	 *       该方法用户不会直接调用，而是在TreeLoader中，数据加载完成后自动调用的，用户可以自定义该方法
	 * @example:
	 * |function doAfterLoad(dc,item){ 
	 * |	//用户可在这里自定义逻辑 
	 * |} 
	 * |<div dojoType="unieap.tree.Tree" 
	 * |	id="basicTree"  animate="false" label="UniEAP" 
	 * |	binding = "{'leaf':'isLeaf', 'id':'treeId', 'store':treeStorePart, 
	 * |		'label':'title', 'parent':'parentID', 
	 * |		'query':{name:'parentID',relation:'=',value:''}, afterLoad:doAfterLoad }"> 
	 * |</div>
	 */
	afterLoad : function(dc,item){
		var query = null;
		//定义查询条件
		if(this.getRootNodeItem()==item){
			query = this.query;
		}else{
			query = {
				name: this.parent,
				relation: "=",
				//value: item.data[this.id]
				value: this.getItemValue(item,this.id)
			};
		}
		var stores = dc.getDataStores();
		for (var name in stores) {
		  //在stores map中添加该store并设置对应的初始query
		  this.setQuery(stores[name],query,item);									
		}
	},
	

	/*
	 * @private:
	 * @summary：
	 * 		根据查询条件得到行记录的子集
	 * @param query
	 * 		{object} 
	 * @return：
	 * 		{array}
	 */
	getSubRowSet : function(rowset,query){
		var props = {rs:rowset};
		if(this.widget.loader==null){
			props["loaded"] = true;
		}
		var result = rowset.generateTreeSet({
			
			id : this.id,
			parent : this.parent,
			root : query.value,
			props : props
		});
		return result && result.children || [];
	},
   
   /**
    * @summary:
    *       得到一个节点的子节点对应的数据组成的数组，并执行给定的回调方法
    * @param {object} item
    * @param {function} callback
    * @description:
    *       根据一个item，得到其子节点对应的数据对象组成的数组，并执行回调函数，回调函数的参数即为得到的items
    * @example:
    * |var node = unieap.byId("basicTree").getCurrentNode();
    * |unieap.byId("basicTree").getBinding().getChildren(node.getItem(),function(items){unieap.debug(items)});
    */
    getChildren: function(item, callback){
				callback = callback || function(){};
				//如果子节点的数据已经加载过了，只需要取该item的children就可以了
				if(item.loaded){
					callback(item[this.children]);
					return;
				}
				//将节点的状态标示为已加载过
				item.loaded = true;
				//如果是叶子节点，回调函数执行其参数设置为null，并返回
                if (this.isLeaf(item)) {
                	if(this.widget.loader!=null){
						callback(null);
                	}
					return;
				}
				//在父节点对应的store中进行查找，看是否有当前节点子节点的数据
				//对于非懒加载的数据，会执行到此处得到预期的数据
		       var  loadedItem = this.doPreLoad(item);
        	 	if (loadedItem.length>0) 
					callback(loadedItem);
				else  if (this.widget.loader){
					    //对于懒加载的数据，此处将会通过TreeLoader发送ajax请求
						var loader = this.widget.getLoader();
						var onComplete = dojo.hitch(this,function(res){
							var childItems = [];
							//得到的是DataCenter，发送请求得到的数据
							if (res && res.declaredClass == "unieap.ds.DataCenter") { 
								var store = res.getSingleDataStore();
								if(store.getRowSet().getRowCount()>0){
									//childItems = this.getSubRowSet(store.getRowSet(), this.stores[item.data[this.id]].query);
									childItems = this.getSubRowSet(store.getRowSet(), this.stores[this.getItemValue(item,this.id)].query);
								}
								item[this.children] = childItems;
								callback(childItems,false);
							}else if(res && res.declaredClass == "unieap.ds.DataStore"){  
								//得到的是DataStore，是通过TreeLoader的getLocalData方法得到，取本地的数据
								  if(res.getRowSet().getRowCount()>0){
									  if(!this.stores[this.getItemValue(item,this.id)]){ 
									  		var newQuery = {name: this.parent,relation: "=",value: this.getItemValue(item,this.id)};
									  	    this.setQuery(res,newQuery,item);
									  }
									  childItems = this.getSubRowSet(res.getRowSet(), this.stores[this.getItemValue(item,this.id)].query);
								  }
								  item[this.children] = childItems;
								  callback(childItems);
							}
							else{
								callback(null);    
							}
						})
						loader.load(item,onComplete);
				}
				else 
						callback(null);        
    },
	
	 //在执行TreeLoader的load方法前，先在已有的数据中进行查询，得到子节点的数据对象数组
	doPreLoad: function(item){
		var childItems = [];
		if(item==this.treeRoot){ 
			if(this.store){
				item.rs = this.store.getRowSet();
			    childItems = this.getSubRowSet(this.store.getRowSet(),this.query);
			}
		}
		else {
//			var newQuery = {
//						name: this.parent,
//						relation: "=",
//						value: item.data[this.id]
//			};
//			childItems = this.getSubRowSet(item.rs,newQuery);
			childItems = item[this.children] || [];
		}
		item[this.children] = childItems;
		return childItems ;
	},
	
    //指定store的查询条件，并将该store放到map中
	setQuery : function(store,query,item){
		if(item){
			if(item == this.getRootNodeItem()){
				item.rs = store.getRowSet();
			}
	    	this.stores[this.getItemValue(item,this.id)]={store:store,query:query};
		}
		else{
			 this.stores[this.rootNodeId]={store:store,query:query};
		}
	},
	
     //将传递过来的item设置选中或非选中状态
	setSelected : function(item,checked){
		var row = new unieap.ds.Row(item.rs,item.data);
		row.setRowSelected(checked);
		//item.data["_s"] = checked;
	},
	
	//返回item是否选中
	isSelected : function(item){
		if(item&&item.data){
			var row = new unieap.ds.Row(item.rs,item.data);
			return row.isRowSelected();
		}
		if(item==this.treeRoot){ //判断根节点的选中状态
			return item.domNode.associatedData.isChecked;
		}
		return false;
	},
	
	/**
	 * @summary：
	 * 		设置某节点数据对象对应的显示字段的值
	 * @param  
	 *     	{unieap.tree.TreeNode}node
	 * @param  
	 * 		{sring} label
	 * @example:
	 * |var node = unieap.byId("basicTree").getCurrentNode(); 
	 * |unieap.byId("basicTree").getBinding().setLabel(node,"newLabel");
	 */ 
	 setLabel : function(node,label){
	 	if(!node||node.isRoot()){
			return ;
		}
		var item = node.getItem();
		 var row = new unieap.ds.Row(item.rs,item.data);
		 row.setItemValue(this.label,label);
		 this.widget.fireDataChange(node);
	},
	
	//将一个item从其从父节点的item剪切并粘贴到另一个节点的item下，用于单棵树之间的拖拽
	//不支持懒加载的情况
	pasteItem :  function(childItem,oldParentItem, newParentItem, insertIndex){
		//在原父节点children中删除当前的item
		if(oldParentItem){
			var brotherItem = oldParentItem.children; 
			for(var i=0;i<brotherItem.length;i++){
				if(brotherItem[i]==childItem){
					brotherItem.splice(i,1)
					break;
				}
			}
		   if(brotherItem.length==0&&this.leaf)
			        //oldParentItem.data[this.leaf]=true;
			        this.setItemValue(oldParentItem,this.leaf,true);
		  } 
			var oncomplete = function(){
				var parentId = '';
				if (newParentItem.domNode.associatedData.isRoot) {
					//移往根结点时，得到新增节点parent字段的值
					if(newParentItem.children&&newParentItem.children.length>0){
					  parentId = this.getParentId(newParentItem.children[0]);
					}else if(this.query&&this.query.name == this.parent){
					  parentId = this.query.value;
					}else{
					  return this.getFirstLevelNodeParent();
					}
				}
				else {
					parentId = this.getId(newParentItem);
				}
				var row = new unieap.ds.Row(childItem.rs,childItem.data);
				row.setItemValue(this.parent,parentId);
				var brotherItems = newParentItem.children;
				if(!brotherItems||brotherItems.length==0){
					  newParentItem.children = [];
			         brotherItems = newParentItem.children
		              if(this.leaf){
			           // newParentItem.data[this.leaf]=false;
			            this.setItemValue(newParentItem,this.leaf,false);
		              }
				}
				if (typeof insertIndex == "number") 
					brotherItems.splice(insertIndex, 0, childItem);
				else {
					brotherItems.push(childItem)
				}
			}
		  if(!newParentItem.loaded){
			this.widget.loadNodeData(newParentItem,dojo.hitch(this,oncomplete));
		}
		else{
			dojo.hitch(this,oncomplete)();
		}  
	},
	
	//本方法用于两棵树之间的拖拽
	//在拖拽的时候，往指定的父节点上添加item，此时不一定会生成对应的节点
	//需要在已删除的数据中寻找是否已经有该条数据，如果已经有的话，将其取出
	//仅用于非懒加载的情况
	addItemForDnd : function(data,parentItem,changeParent){
	     if(!parentItem.loaded){
			    var complete =  dojo.hitch(this,function(){
			     })
			      this.widget.loadNodeData(parentItem,complete);
		     }
			  var item = this.addItemForDndHelper(data,parentItem,changeParent);
			  //树节点的拖拽，被拖拽节点的子节点并不需要更改父节点的字段值
			  if (changeParent) {
			  	var parentId = '';
				if (parentItem.domNode.associatedData.isRoot) {
					//移往根结点时，得到新增节点parent字段的值
					if(parentItem.children&&parentItem.children.length>1){
					  parentId = this.getParentId(parentItem.children[0]);
					}else if(this.query&&this.query.name == this.parent){
					  parentId = this.query.value;
					}else{
					  return this.getFirstLevelNodeParent();
					}
				}else {
			  		parentId = this.getId(parentItem);
			  	}
			  	var row = new unieap.ds.Row(item.rs, item.data);
			  	row.setItemValue(this.parent, parentId);
			  }
			 return item;
	},
	
	//为了两个树之间的拖拽提供的帮助方法
	addItemForDndHelper : function(data,parentItem,changeParent){
		var brothersItems = parentItem.children;
		var newItem = null;
		//如果存在兄弟节点，添加在兄弟节点所在的rowset中
		if(brothersItems&&brothersItems.length>0){
			var rs  = brothersItems[0].rs;
			var row = new unieap.ds.Row(brothersItems[0].rs,data);
			var index = -1;
			rs.forEach(function(initRow){
				if(row.getItemValue(this.id) == initRow.getItemValue(this.id)){
					index = initRow.getIndex();
				}
			},null,null,unieap.ds.Buffer.DELETE,this)
			
			
			if(index>-1){
				//这条数据移走后又被移回来了
				rs.unDeleteRow(index);
				var addedRow = rs.getRow(rs.getRowCount()-1);
				newItem = {data:addedRow.getData(),rs:rs};
				addedRow.setItemValue(this.parent, row.getItemValue(this.parent));
			}else{
			  var cloneData = dojo.clone(data);
			  newItem = {data:cloneData,rs:rs} 
			  rs.addRow(cloneData);	
			}
			//放到父节点的item的children属性中
			if (changeParent == true||row.getItemValue(this.parent)==this.getId(parentItem)) {
				brothersItems.push(newItem);
			}
//			var rs  = brothersItems[0].rs;
//			var deleteBuffer = rs["delete"];
//			var deleteData = null;
//			for(var i = 0;i<deleteBuffer.length;i++){
//				//用于将数据移回来的操作
//				if(data[this.id]==deleteBuffer[i][this.id]){
//					deleteData = deleteBuffer.splice(i,1);
//				}
//			}
//			if(deleteData){
//			  newItem = {data:deleteData[0],rs:rs};
//			  //不能直接调用addRow方法，因为这样会给该行数据增加一个新增标识符，而且性能也不如直接操作缓存区
//			  //rs.addRow(deleteData[0]);
//			 // rs["primary"].push(deleteData[0]);
//			  rs.getData(unieap.ds.Buffer.PRIMARY).push(deleteData[0]);
//			  var row = rs.getRow(rs.getRowCount()-1);
//			  row.setItemValue(this.parent, data[this.parent]);
//			}else{
//			  var cloneData = dojo.clone(data);
//			  newItem = {data:cloneData,rs:rs} 
//			  rs.addRow(cloneData);	
//			}
//			//放到父节点的item的children属性中
//			if (changeParent == true||data[this.parent]==this.getId(parentItem)) {
//				brothersItems.push(newItem);
//			}
		}else{
			var rs  = parentItem.rs;
		    if(this.leaf){
			   // parentItem.data[this.leaf]=false;
		    	this.setItemValue(parentItem,this.leaf,false);
		     }
			
		    var row = new unieap.ds.Row(rs,data);
			var index = -1;
			rs.forEach(function(initRow){
				if(row.getItemValue(this.id) == initRow.getItemValue(this.id)){
					index = initRow.getIndex();
				}
			},null,null,unieap.ds.Buffer.DELETE,this)
			
			
			if(index>-1){
				//这条数据移走后又被移回来了
				rs.unDeleteRow(index);
				var addedRow = rs.getRow(rs.getRowCount()-1);
				newItem = {data:addedRow.getData(),rs:rs};
				addedRow.setItemValue(this.parent, row.getItemValue(this.parent));
			}else{
			  var cloneData = dojo.clone(data);
			  newItem = {data:cloneData,rs:rs} 
			  rs.addRow(cloneData);	
			}
			parentItem.children = [];
			parentItem.children.push(newItem);
			
//			var rs  = parentItem.rs;
//		    if(this.leaf){
//			   // parentItem.data[this.leaf]=false;
//		    	this.setItemValue(parentItem,this.leaf,false);
//		     }
//			 var deleteBuffer = rs["delete"];
//			 var deleteData = null;
//			for(var i = 0;i<deleteBuffer.length;i++){
//				if(data[this.id]==deleteBuffer[i][this.id]){
//					deleteData = deleteBuffer.splice(i,1);
//				}
//			}
//			if(deleteData){
//			  newItem = {data:deleteData[0],rs:rs} 
//			  //rs.addRow(deleteData[0]);
//			  //rs["primary"].push(deleteData[0]);
//			  rs.getData(unieap.ds.Buffer.PRIMARY).push(deleteData[0]);
//			  var row = rs.getRow(rs.getRowCount()-1);
//			  row.setItemValue(this.parent, data[this.parent]);
//			}else{
//				var cloneData = dojo.clone(data);
//				newItem = {data:cloneData,rs:rs} 
//				rs.addRow(cloneData);
//			}
//			parentItem.children = [];
//			parentItem.children.push(newItem);
		}
		return newItem;
	},
	
	//增加一条数据，默认情况下，会将该条数据增加到兄弟所在的rowset里面
	//若无兄弟节点，则增加到父节点对应的rowset里面，可以通过重写addItemToLeaf方法修改叶子节点增加子节点的逻辑
	addItem : function(data,parentItem,changeParent){
		var brothersItems = parentItem.children;
		if(brothersItems&&brothersItems.length>0){
			var rs  = brothersItems[0].rs;
			var newItem = {data:data,rs:rs,children:[],loaded:true} ;
			brothersItems.push(newItem);
			rs.addRow(data);
		   return newItem;
		}else{
			var newItem = this.addItemToLeaf(data,parentItem);
			return newItem;
		}
	},
    
	/**
	 * @summary:
	 *       添加一条数据到一个叶子节点，提供了默认实现，用户可重写
	 * @param {object} data
	 * @param {object} parentItem
	 * @description:
	 *       往叶子节点添加数据，默认的情况是往父节点的RowSet里添加数据，如果是懒加载的树，用户可自定义该方法，往指定的RowSet中添加数据
	 * @example:
	 * |function doAddItemToLeaf(data,parentItem){ 
	 * |//用户可在这里自定义逻辑 
	 * |} 
	 * |<div dojoType="unieap.tree.Tree" id="basicTree"  
	 * |	animate="false" label="UniEAP" 
	 * |	binding = "{'leaf':'isLeaf', 'id':'treeId', 'store':treeStorePart, 
	 * |		'label':'title', 'parent':'parentID', 
	 * |		'query':{name:'parentID',relation:'=',value:''}, addItemToLeaf:doAddItemToLeaf }"> 
	 * |</div> 
	 */
	addItemToLeaf : function(data,parentItem){
		    var rs  = parentItem.rs;
			var newItem = {data:data,rs:rs,children:[],loaded:true} 
			parentItem.children = [];
			parentItem.children.push(newItem);
		    if(this.leaf){
//			    parentItem.data[this.leaf]=false;
			    this.setItemValue(parentItem,this.leaf,false);
		     }
			 rs.addRow(data);
		    return newItem;
	},
	

	
	/**
	 * @summary:
	 *       删除一条数据
	 * @description:
	 *       对一条数据执行删除操作，并不会进行UI的操作
	 *       删除数据，默认情况下会删除该节点的所有的关联子节点，若树是懒加载，会将相关数据加载进来后删除
     *       用户如要自定义逻辑，可以重写本方法
	 * @param:
	 * 		{object} item 删除节点源数据对象,形如：
	 * 		{data:{label:'子节点',id:"2",parent:"1"}}
	 * @param: 
	 * 		{object} parentItem 父节点源数据对象,形如：
	 * 		{data:{label:'父节点',id:"1",parent:"0"},children : [{data:{label:'子节点',id:"2",parent:"1"}}]}
	 * @param:
	 * 		{function} callback 回调方法，存在异步请求情况
     * @example:
     * |function doDeleteItem(item,parentItem,callback){ 
     * |	//用户可在这里自定义逻辑 
     * |} 
     * |<div dojoType="unieap.tree.Tree" 
     * |	id="basicTree"  label="UniEAP" 
     * |	binding = "{deleteItem:doDeleteItem,'leaf':'isLeaf', 'id':'treeId', 
     * |		'store':treeStorePart, 'label':'title', 'parent':'parentID', 
     * |		'query':{name:'parentID',relation:'=',value:''}}"> 
     * |</div> 
	 */
	deleteItem  : function(item,parentItem,callback){
		this.rowsetContainToDelete = {};
		if(parentItem){
			var brotherItem = parentItem.children; 
			for(var i=0;i<brotherItem.length;i++){
				if(brotherItem[i]==item){
					brotherItem.splice(i,1)
					break;
				}
			}
			if(brotherItem.length==0&&this.leaf && 
					this.getItemValue(parentItem,this.leaf)!=null&&this.changeLeaf){
			    // parentItem.data[this.leaf]=true;
				this.setItemValue(parentItem,this.leaf,true);
			}
		  }
		 this.arr = [];
		 this.arr.push(item);
		 var load = dojo.hitch(this,function(){
		 	for(var serial in this.rowsetContainToDelete){
				    var toDeleteRowIndex = [];
					var rs = this.rowsetContainToDelete[serial];
//					for (var i = 0 ,len = rs.getData(unieap.ds.Buffer.PRIMARY).length; i < len; i++) {
//							if(rs.getData(unieap.ds.Buffer.PRIMARY)[i]["unieap_item_to_be_deleted"]){
//								delete rs.getData(unieap.ds.Buffer.PRIMARY)[i]["unieap_item_to_be_deleted"];
//								toDeleteRowIndex.push(i);
//						}
//					}
					rs.forEach(function(row){
						if(row.getIdentifier("unieap_item_to_be_deleted")){
							row.removeIdentifier("unieap_item_to_be_deleted")
							toDeleteRowIndex.push(row.getIndex());
						}
					},null,null,null,this)
					rs.deleteRows(toDeleteRowIndex);
			}
			callback && callback();
		 })
        	this._deleteRelatedItems(item,load);
		},
		
	//删除数据的辅助方法
	_deleteRelatedItems : function(item,callback){
		    this._bulidToDeleteCache(item);
		    var row = new unieap.ds.Row(item.rs,item.data);
		    row.setIdentifier("unieap_item_to_be_deleted",1);
			//item.data["unieap_item_to_be_deleted"] = 1;
			var onComplete = dojo.hitch(this,function(items){
			  delete item.children ;
			  this.arr.shift();
			  if (items&&items.length > 0) {
				for (var i = 0; i < items.length; i++) {
					this.arr.push(items[i]);
				}
			}
			if(this.arr.length>0){
				 this._deleteRelatedItems(this.arr[0],callback);
			}
			else{
			    callback();
				return;
			}
		})
		if(item.loaded){
			this.arr.shift();
			if (item.children) 
				for (var i = 0, l = item.children.length; i < l; i++) {
					this.arr.push( item.children[i]);
				}
			delete item.children ;
			if(this.arr.length>0){
				 this._deleteRelatedItems(this.arr[0],callback);
			}
			else{
			    callback();
				return;
			}
		}
	 	else
		    this.widget.loadNodeData(item,onComplete);
		},
		
		_bulidToDeleteCache : function(item){
			var rowset = item.rs;
		    rowset.serial = rowset.serial || "rowset_".concat(unieap.getUnique());
		    this.rowsetContainToDelete[rowset.serial] = rowset;
		},
		
		/**
		 * @summary:
		 *      根据TreeNode对象得到对应的Row对象
		 * @param {unieap.tree.TreeNode} node
		 * @description:
		 *      因为树节点支持两种不同的数据结构，因此将该方法置于此处
		 * @example:
		 * |var node = unieap.byId("basicTree").getCurrentNode(); 
		 * |var row = unieap.byId("basicTree").getBinding().getRow(node); 
		 * |unieap.debug(row); 
		 * @img:
	     *      images/tree/binding_getRow.png
		 */
		getRow : function(node){
			if(!node||node.isRoot())
			     return null;
			dojo.require("unieap.ds");
			var item  = node.getItem();
		    var row = new unieap.ds.Row(item.rs,item.data);
			return row;
		},
		
		/**
		 * @summary：
		 *      给指定节点设置store，将原来的所有子节点删除
		 * @description:
		 * 		给定store中的列字段与tree标签配置的列字段要一致
		 * @param: 
		 * 		{unieap.tree.TreeNode} node
		 * @param: 
		 * 		{unieap.ds.DataStore} store
		 * @param:  
		 * 		{object} args   
		 * 		该store相关的参数，如查询条件等
		 * @example:
		 * |<script>
		 * | var newDS = new unieap.ds.DataStore("newDS",[
		 * |	{id:"2",label:"节点1",parent:"1",leaf:false},
		 * |	{id:"3",label:"节点2",parent:"2",leaf:true}
		 * | ]);
		 * | var root = unieap.byId("basicTree").getRootNode(); 
		 * | var arg={query:{name:'parentID',relation:'=',value:'999'}}; 
		 * | unieap.byId("basicTree").getBinding().setDataStore(root,newDS,arg); 
		 * |</script>
		 * |<div dojoType="unieap.tree.Tree" 
		 * |	id="lazytree" 
		 * |	label="rowset" 
		 * |	loader="{'url':unieap.WEB_APP_NAME+'/getLazyData.do?method=getTrueData'}" 
		 * |	binding = "{'leaf':'leaf','id':'id','label':'label','parent':'parent',query:{name:'id',relation:'=',value:''}}">
		 * |</div>
		 */
		setDataStore : function(node,store,args){
			 if(!node||!store)  return; 
			 var childrenDomNode = this.widget.getChildrenByDom(node.domNode);
		     if(childrenDomNode&&childrenDomNode.length>0){
			     for(var i=0;i<childrenDomNode.length;i++){
				     node.destroyChildren(childrenDomNode[i]);
			     }
		     }
		   node.domNode.associatedData.state = "UNCHECKED";
		   node.getItem().loaded = true;
		   node.getItem()[this.widget.getBinding().children] = [];
		   var query;
		   if(args&&args.id&&node.isRoot()){
			   this.id = args.id;
		   }
		   if(args&&args.query){
		   	   query = args.query
		   }else if(node.isRoot()){
		   	  query = this.query;
		   }else{
		   	 query = {
						name: this.parent,
						relation: "=",
						//value: node.item.data[this.id]
						value: this.getItemValue(node.item,this.id)
			 };
		   }
		  this.setQuery(store,query,node.item);									
		  var childItems = this.getSubRowSet(store.getRowSet(), this.stores[this.getItemValue(node.item,this.id)].query);
		  node.item[this.children] = childItems;
		  if(childItems.length>0){
		  	 node.domNode.associatedData.isExpanded = true;
//		  	 if(node.isLeaf()){
//		  	 }
		  	 var item = node.item;
		  	// if(this.leaf && item.data[this.leaf]!=null){
		  	if(this.leaf && this.getItemValue(item,this.leaf)!=null){
		  	 	//item.data[this.leaf] = false;
		  	 	this.setItemValue(item,this.leaf,false)
		  	 }
		  }
		  if (node.isOpend()) {
		  	this.widget.collapseNode(node,false);
		  	this.widget.expandNode(node);
		  }
		},
		//刷新该item对应的RowSet
		refresh : function(item){
			if(item && item.data ){
				//var id = item.data[this.id],
				var id = this.getItemValue(item,this.id)
					rowset  = this.stores[id] && this.stores[id].store.getRowSet() || item.rs,
    				props = {rs:rowset};
				if(this.widget.loader==null){
					props["loaded"] = true;
				}
				if(item==this.getRootNodeItem()){
					id = this.query.value;
				}
    			var result = rowset.generateTreeSet({
					id : this.id,
					parent : this.parent,
					"root" : id,
					props : props
				});
				item[this.children] = result[this.children] || []; 
    		}
		},
		
		//得到一个item的所有子节点对应的data所组成的数组，适合于非懒加载的树
		//目前仅用于两棵树之间的拖拽，若从一棵树拖拽节点到另外一棵树，需要将原树上所有的item删掉，并将其移至目标树上
		getChildrenItems : function(item){
			var array = [];
			array.push(item.data);
			var arr = [];
			arr.push(item);
            var complete =  dojo.hitch(this,function(items){
				  arr.shift();
			      if (items&&items.length>0) 
				       for (var i = 0, l = items.length; i < l; i++) {
					      arr.push(items[i]);
						  array.push(items[i].data)
				       }
			       if (arr.length == 0) {
					   	return array;
				    }
			})
			for (var i = 0; i < arr.length; i++) {
				if (arr[0].loaded) {
				   var newItem =  arr.shift();
			        if (newItem.children) 
				       for (var j = 0, l = newItem.children.length; j < l; j++) {
					      arr.push(newItem.children[j]);
						  array.push(newItem.children[j].data)
				       }
			           if (arr.length > 0) {
					   	 i--;
					   	 continue;
					   }else {
					   	return array;
					   }
				}
				else {
					this.widget.loadNodeData(arr[0], complete);
				}
				i--;
			}
			return array;
		},
		getParentId : function(item){
		 // return item.data[this.parent]
			return  this.getItemValue(item,this.parent);
		},
		
		/**
		 * @summary:
		 *    得到第一层节点parent对应字段的值
		 * @return
		 *    {string}
		 * @description:
		 *     应用场景是在两个树之间的拖拽，若一棵树没有任何节点，且在query中也没有指定第一层节点的获取方法，将会根据此方法的返回值确定新移入节点的parent字段的值
		 * @example:
		 * |function() firstLevelNodeParent{
		 * |	return "root";
		 * |}
		 * |<div dojoType="unieap.tree.Tree" id="basicTree"
	     * |	label="UniEAP" treeDnd="{}" 
	     * |	binding = "{'getFirstLevelNodeParent':firstLevelNodeParent,
	     * |		'leaf':'leaf', 'store':treeStorePart, 'label':'label', 'parent':'parentID'}">
	     * |</div>    
		 */
		getFirstLevelNodeParent : function(){
		  return "";
		},
		
		 /**
		 * @summary:
		 *    得到树对应的store
		 * @return
		 *    {unieap.ds.DataStore}
		 * @description:
		 *    得到树对应的DataStore对象。若树非懒加载且通过标签配置store，则返回此指定的DataStore对象；若树是懒加载的，将会返回通过标签指定的DataStore对象。
		 * @example:
		 * |var store = unieap.byId("basicTree").getBinding().getStore();
		 */
		getStore : function(){
			return this.getRootNodeItem().rs.getDataStore();
		},
		
		 /**
		 * @summary:
		 *    得到树对应的所有store
		 * @return
		 *    {array}
		 * @description:
		 *    得到树的所有DataStore组成的数组，若树不是懒加载且没有通过setDataStore方法动态添加store，则会返回最初设置的DataStore，否则将会返回所有和树关联的DataStore。
		 * @example:
		 * |var stores = unieap.byId("basicTree").getBinding().getStores();
		 */
		getStores : function(){
			var  stores = this.stores;
			var allStores = [];
			for(var name in stores){
				allStores.push(stores[name].store);
			}
			return allStores;
		},
		
		getIconClass:function(item){
		 	if(this.iconClass){
//				return item.data[this.iconClass];
				return this.getItemValue(item,this.iconClass);
			}
	 	},
	 	
	 	getLabelClass : function(item){
		 	if(this.labelClass){
//				return item.data[this.labelClass];
				return this.getItemValue(item,this.labelClass)
			}
	 	},
	 
	  	getLabel : function(item){
			//return item.data[this.label];
			return this.getItemValue(item,this.label);
		},
	
		isLeaf : function(item){
		 	if(this.leaf && this.getItemValue(item,this.leaf)!=null){
				  return this.getItemValue(item,this.leaf)==true;
			}
		   if(item.children){
				return !item.children.length>0;
			}
			return this.widget.loader!=null || item==this.treeRoot ? false : true;
		 },
		 
	  	getId : function(item){
	 		return this.getItemValue(item,this.id);
	 	},
	 
		 //根据指定的字段判断一个节点是不是disabled
		 isDisabledByData : function(item){
			if(this.disabled){
				return this.getItemValue(item,this.disabled)==true;
			}
			return false;
		}, 
		
		//若指定了标示disabled的字段，将一个节点对应的数据设置成对应的状态
		setDisabled : function(node,disabled){
			if(this.disabled){
				var row = this.getRow(node);
				if(row){
					row.setItemValue(this.disabled,disabled);
				}
				//node.getItem().data[this.disabled] = disabled;
			}
		},
		
		getItemValue:function(item,name){
			if(item==this.getRootNodeItem()&&item.data[name]){
				//根节点对应的item
				return item.data[name];
			}else{
				 var row = new unieap.ds.Row(item.rs,item.data);
				 return row.getItemValue(name);
			}
			return null;
			
		},
		setItemValue:function(item,name,value){
			if(item==this.getRootNodeItem()){
				//根节点对应的item
				 item.data[name] = value;
			}else{
				 var row = new unieap.ds.Row(item.rs,item.data);
				 row.setItemValue(name,value);
			}
			
		}
})
dojo.provide("unieap.tree.CheckLogic");
dojo.require("unieap.tree.Tree");
dojo.declare("unieap.tree.CheckLogic",null,{
	 /**
	 * @declaredClass:
	 * 		unieap.tree.CheckLogic
	 * @summary:
	 * 		树对复选功能的支持实现类
	 * @classDescription:
	 *      支持多种复选逻辑
	 *      能够按照指定的复选逻辑得到所有选中的Item对象（若数据未加载的话，将会加载需要的数据）
	 * @example:
	 * |<div dojoType="unieap.tree.Tree" 
	 * |	${1}checkLogic="{model:'cascade',showRootCheckbox:true}" 
	 * |	id="lazyTree2" label="UniEAP" 
	 * |	loader="{'getLocalData':doGetLocalData}" 
	 * |	binding = "{'leaf':'isLeaf','label':'title','id':'treeId',
	 * |		'rootNodeId':'','parent':'parentID',query:{name:'parentID',relation:'=',value:''}}" > 
	 * |</div>
	 * ${1}设置树支持复选
	 */
     
	/**
	 * @summary:
	 *      指定树的复选逻辑
	 * @enum: 
	 *     {'multiple'|'cascade'|'parentCascade'|'childCascade'|'single'|'halfChecked'}
	 * @default:
	 * 		multiple
	 * @type:
	 * 		{string} 
	 * @description:
     *     定义树节点的复选逻辑，具体如下：
     *         multiple为可多选且没有复选逻辑
     *         cascade关联所有的父子节点
     *         parentCascade关联所有父节点
     *         childCascade关联所有子节点
     *         single只能选择一个节点
     *         halfChecked当某节点的子节点未完全选中时，该节点处于半选状态
     *     值得注意的是，程序若需要将一些节点设为readonly或disabled，此时树只支持multiple模式的复选逻辑。
	 */
	 model : "multiple",
	 
	 /**
	 * @summary:
	 *       是否显示根结点的复选框
	 * @type:
	 * 		{boolean}  
	 * @default:
	 * 		false
	 * @description:
     *     是否显示根结点的复选框，默认不显示。若显示该复选框，点击会选中或非选中所有节点。
     *     此时应保证树上不会有节点处于readonly或disabled状态。
	 */
	 showRootCheckbox : false,
	 
	 //选中的item
	 _selectedItems : null,
	 
	 //
	 _isSelectAll : false,
	 
	 //递归太深会导致堆栈溢出
	 _loadItemChildrenCount : 0,
	 
	 constructor: function(params){
        dojo.mixin(this, params);
		if(this.model=="multiple"){
			this.checkLogic = dojo.hitch(this,this._checkOfMultiple);
		}
		else if(this.model=="cascade"){
			this.checkLogic = dojo.hitch(this,this._checkOfCascade);
		}
		else if(this.model=="parentCascade"){
			this.checkLogic = dojo.hitch(this,this._checkOfParentCascade);
		}
		else if(this.model=="childCascade"){
			this.checkLogic = dojo.hitch(this,this._checkOfChildCascade);
		}
		else if(this.model=="single"){
			this.checkLogic = dojo.hitch(this,this._checkOfSingle);
		}
		else if(this.model=="halfChecked"){
			this.checkLogic = dojo.hitch(this,this._checkOfHalfChecked);
		}
		else{
			this.checkLogic = dojo.hitch(this,this._checkOfMultiple);
		}
		this._selectedItems = {};
		this._loadItemChildrenCount = 0;
    },
	
	//没有复选逻辑的操作
	_checkOfMultiple : function(){
		return;
	},
	
	//关联父子节点的操作
	_checkOfCascade : function(node,checked){
		this._checkOfChildCascade(node,checked);
		this._checkOfParentCascade(node,checked);
	},
	
	//关联父节点的操作
	_checkOfParentCascade : function(node,checked){
		var logic = "ParentCascade";
		var p = node.getParent();
		//选中节点对应的逻辑
		if (checked) {
			if (p && !p.isRoot()&&p.isChecked()!=true) 
				this.setChecked(p, checked,logic);
		}
		//取消选中节点对应的逻辑
	    else{
		        while(p!=null&&!p.isRoot()) {
		          var checkedChildsLength = 0;
		          var children = this.widget.getChildrenByDom(p.domNode);
		          if(children&&children.length>0){
			          dojo.forEach(children,function(child){
			              if(child.associatedData.isChecked){
			                 checkedChildsLength++;
			              }
			          });
			         if(checkedChildsLength>0&&!p.isChecked()){
			            this.setChecked(p,true,logic);
			         }else if(checkedChildsLength==0){
			            this.setChecked(p,false,logic);
			         }
		          }
		       p = p.getParent();
		      }		
		}
	},
	
	//关联子节点的操作
	_checkOfChildCascade :function(node,checked){
		var logic = "ChildCascade";
		if (node.domNode.associatedData.state == "LOADED") {
			var children = this.widget.getChildrenByDom(node.domNode);
			var _this = this;
			if (children && children.length > 0) {
				dojo.forEach(children, function(child){
					var tempTreeNode  = _this.widget.getNodeByDom(child);
					_this.setChecked(tempTreeNode, checked,logic);
				});
			}
		}
		else if(node.getItem().loaded){
			this.setItemChildrenChecked(node.getItem(),checked);
		}
		else 
			return;
	},

    //只能选择一个节点的操作
   _checkOfSingle : function(node,checked){
   	var _this = this;
   	  if (checked) {
	  	for (var item in this._selectedItems) {
	  		if (_this._selectedItems[item].domNode != node.domNode) {
				var tempTreeNode  = _this.widget.getNodeByDom(_this._selectedItems[item].domNode);
	  			_this.setChecked(tempTreeNode, false, "Multiple");
	  		}
	  	}
	  }
   },
   
   //半选逻辑的操作
   _checkOfHalfChecked : function(node,checked){
   	    this._checkOfChildCascade(node,checked);
		var p = node.getParent();
   	    while(p!=null&&!p.isRoot()) {
		          var fullCheckedChildsLength = 0;
		          var halfCheckedChildsLength = 0;
		          var children = this.widget.getChildrenByDom(p.domNode);
				  var _this = this;
		          if(children&&children.length>0){
			          dojo.forEach(children,function(child){
			              if(_this.widget.getBinding().isSelected(child.associatedData.item)){
			                 fullCheckedChildsLength++;
			              }else if(child.associatedData.isChecked){
			                halfCheckedChildsLength++
			              }
			          });
                     if((fullCheckedChildsLength>0&&fullCheckedChildsLength<children.length)||halfCheckedChildsLength>0){
					 	if(this.widget.getBinding().isSelected(p.getItem())){
							this.setItemSelected(p.getItem(),false);
						}
			            p.domNode.associatedData.isChecked  = true;
				        this._setHalfCheckedClass(p.domNode);
			         }else	 if(fullCheckedChildsLength==children.length){
			            this.setChecked(p,true,"Multiple");
			         }else{
			            this.setChecked(p,false,"Multiple");
			         }
		          }
		       p = p.getParent();
		      }		
   },
   
   //选中所有节点，要求树上不存在readonly或disabled的节点
   selectAll : function(checked){
   	  if(this.model=="single")
	     return;
   	  var rootNode = this.widget.getRootNode();
	  this._isSelectAll = checked;
   	  this._checkOfChildCascade(rootNode,checked);
   },
   
	//将节点设置为选中或非选中状态，并根据复选逻辑，确定相关父子节点的复选状态。
	//通过树的setChecked方法调用，用户直接调用树的方法即可
	setChecked : function(node,checked,logic,evt){
		if(checked){
			var flag = unieap.fireEvent4Widget(this,this.widget,this.onBeforeChecked,[node]);
			if (flag === false) {
                return;
             }
		}else{
			var flag = unieap.fireEvent4Widget(this,this.widget,this.onBeforeUnChecked,[node]);
			 if (flag === false) {
                  return;
             }
		}
		if(checked){
			this._setCheckedClass(node.domNode);
		}else{
			this._setUnCheckedClass(node.domNode);
		}
		node.domNode.associatedData.isChecked = checked;
		if(node.isRoot()){
			this.selectAll(checked);
		}else{
			this.setItemSelected(node.getItem(),checked);
		    if(logic){
			  this["_checkOf" + logic](node,checked);
		    }else{
				this.checkLogic(node,checked);
			}
		}	
		if(checked){
			 if(evt){
				 unieap.fireEvent4Widget(this,this.widget,this.onHandleChecked,[node]);
			 }
			var flag = unieap.fireEvent4Widget(this,this.widget,this.onChecked,[node]);
			 if (flag === false) {
				 return;
             }
			 unieap.fireEvent4Widget(this,this.widget,this.onAfterChecked,[node]);
		}else{
			 if(evt){
				 unieap.fireEvent4Widget(this,this.widget,this.onHandleUnChecked,[node]);
			 }
			var flag = unieap.fireEvent4Widget(this,this.widget,this.onUnChecked,[node]);
			 if (flag === false) {
				 return;
             }
			 unieap.fireEvent4Widget(this,this.widget,this.onAfterUnChecked,[node]);
		}
	},
	
	//设置为选中的样式
	 _setCheckedClass : function(domNode){
	 	this.widget.getCheckboxNode(domNode).className = "dijitCheckBox dijitCheckBoxChecked";
	 },
	 
	 	//设置为非选中的样式
	  _setUnCheckedClass : function(domNode){
	 	this.widget.getCheckboxNode(domNode).className = "dijitCheckBox";
	 },
	 
	 	//设置为半选的样式
	  _setHalfCheckedClass : function(domNode){
	 	this.widget.getCheckboxNode(domNode).className = "dijitCheckBox dijitCheckBoxCheckedDisabled";
	 },
	 
	 //判断是否显示根结点的复选框
	 isShowRootCheckbox : function(){
	 	return this.showRootCheckbox;
	 },
	
	//对新生成的节点设置是否选中
	 setCheckedForNewNode : function(node){
	 	if(this._isSelectAll||this.model =="cascade"||this.model =="childCascade"||this.model =="halfChecked"||this.widget.getBinding().isSelected(node.getItem())){
			this.setChecked(node,true,"Multiple");
		}
	 },
	 
	  /**
	  * @summary:
	  *         判断半选树节点是否是全选中状态
	  * @param domNode
	  * @description:
	  *      如果半选树的孩子节点都是选中状态，返回true，否则返回false
	  *  @example:
	  *  var tree = getWidgetById("singleCascadeTree")；
	  *  alert(tree.getCheckLogic().isAllSelected(tree.getCurrentNode().domNode));
	  */
	 isAllSelected: function(domNode){
	 	return dojo.hasClass(this.widget.getCheckboxNode(domNode),"dijitCheckBoxChecked");
	 },
	 
	 /**
	  * @summary:
	  *         得到所有选中的item对象，并执行回调函数
	  * @param {function} callback
	  * @description:
	  *      若数据尚未加载，而复选逻辑是关联子节点的话，将会将关联的所有数据取出，构成一个数组，作为参数执行回调函数，半选节点不会被得到
	  *      若没有选中的数据，则会将null作为回调函数的参数
	  *      与树的getSelectedNodes方法的不同之处：树的getSelectedNodes只会将已经生成的且被选中的树节点返回
	  *  @example:
	  *  |tree.getCheckLogic().getSelectedItems(function(items){unieap.debug(items)})
	  * @img:
	  *      images/tree/getSelectedItems.png   
	  */
	 getSelectedItems : function(callback){
	 	if (this._isSelectAll||this.model == "cascade" || this.model == "childCascade" || this.model == "halfChecked") {
			this.arr = [];
			for (var item in this._selectedItems) {
				Array.prototype.push.call(this.arr, this._selectedItems[item]);
			}
			if (this.arr.length > 0) 
				this.loadItemChildren(this.arr[0], callback);
			else{
				callback(null);
			}
		}
		else{
			var selctedItemArray=[];
			for (var item in this._selectedItems) {
				Array.prototype.push.call(selctedItemArray, this._selectedItems[item]);
			}
			callback(selctedItemArray);
		}
	 } ,
	 
	 //getSelectedItems的辅助方法
	 loadItemChildren : function(item,callback){
	 	var onComplete = dojo.hitch(this,function(items){
			this.arr.shift();
			this._loadItemChildrenCount++;
			if (items&&items.length > 0) {
				for (var i = 0; i < items.length; i++) {
						var node = this.widget.getNodeByItem(items[i]);
						if(node){
							if(node.isChecked()){
								Array.prototype.push.call(this.arr, items[i]);
								this.setItemSelected(items[i],true)	
							}
						}else{
							Array.prototype.push.call(this.arr, items[i]);
							this.setItemSelected(items[i],true)	
						}
				}
			}
			if(this.arr.length>0){
				 if(this._loadItemChildrenCount == 50){
				 	var self = this;
				 	setTimeout(function(){
				 		self.loadItemChildren(self.arr[0],callback);
				 	},0);
				 	this._loadItemChildrenCount = 0;
				 }else{
					 this.loadItemChildren(this.arr[0],callback);
				 }
			}
			else{
				var selctedItemArray=[];
			    for (var item in this._selectedItems) {
				    Array.prototype.push.call(selctedItemArray, this._selectedItems[item]);
			     }
			    this._loadItemChildrenCount = 0;
			    callback(selctedItemArray);
				return;
			}
		})
		this.widget.loadNodeData(item,onComplete);
	 },
	 
	//将item设置为选中或非选中状态
	 setItemSelected : function(item,checked){
	 	if (checked) {
			this._selectedItems[this.widget.getBinding().getId(item)] = item;
		}
		else{
			delete this._selectedItems[this.widget.getBinding().getId(item)];
		}
		 this.widget.getBinding().setSelected(item, checked);
	 },
	 
	 //通过递归调用将所有子数据对象设为选中状态，在关联所有子节点的逻辑下会用到的内部方法
	 setItemChildrenChecked : function(item, checked){
	 	this.setItemSelected(item, checked);
	 	if(item.loaded&&item.children){
			for(var i=0;i<item.children.length;i++){
				this.setItemChildrenChecked(item.children[i],checked);
			}
		}
	 },
	 
	 /**
	  * @summary:
	  *       若树的复选逻辑为“halfChecked”，将指定节点设为半选状态
	  * @param {unieap.tree.TreeNode}   node
	  * @description:
	  *     主要用于以下场景，在初始化的时候，若需要根据指定数据将某些节点设为半选可以调用此方法。
	  *     节点在半选的时候，数据不会选中，只是节点处于一种特殊的样式
	  * @example:
	  * |function setHalf(node){ 
	  * |	unieap.byId("unieapTree").getCheckLogic().setHalfChecked(node);
	  * |} 
	  */
	 setHalfChecked : function(node){
	 	if(this.model!="halfChecked"){
			return;
		}
	 	if(this.widget.getBinding().isSelected(node.getItem())){
			this.setItemSelected(node.getItem(),false);
	    }
	    node.domNode.associatedData.isChecked  = true;
	    this._setHalfCheckedClass(node.domNode);
	 },
	 
	 /**
	  * @summary:
	  *       在节点被选中之前进行调用的监听
	  * @param {unieap.tree.TreeNode}   node
	  * @return 
	  *      {boolean}
	  * @description:
	  *     若返回为false，将不会执行后续的UI和数据操作
	  * @example:
	  * |function beforeChecked(node){ 
	  * |	return confirm("确定要选中树节点"+node.getLabel()+"么？"); 
	  * |} 
	  * |<div dojoType="unieap.tree.Tree" id="basicTree"  animate="false" label="UniEAP" 
	  * |	checkLogic="{onBeforeChecked:beforeChecked}" 
	  * |	binding = "{'leaf':'leaf', 'store':treeStorePart,
	  * |			'parent':'parentID', query:{name:'parentID',relation:'=',value:''}}">
	  * |</div> 
	  */
	 onBeforeChecked : function(node){
	 	return true;
	 },
	 
	  /**
	  * @summary:
	  *       在节点被置为非选中之前进行调用的监听
	  * @param {unieap.tree.TreeNode}   node
	  * @return 
	  *      {boolean}
	  * @description:
	  *     若返回为false，将不会执行后续的UI和数据操作
	  * @example:
	  * |function beforeUnChecked(node){ 
	  * |	return confirm("确定要取消选中树节点"+node.getLabel()+"么？"); 
	  * |} 
	  * |<div dojoType="unieap.tree.Tree" id="basicTree"  animate="false" label="UniEAP" 
	  * |	checkLogic="{onBeforeUnChecked:beforeUnChecked}" 
	  * |	binding = "{'leaf':'leaf', 'store':treeStorePart,
	  * |			'parent':'parentID', query:{name:'parentID',relation:'=',value:''}}">
	  * |</div>
	  */
	 onBeforeUnChecked : function(node){
	 	return true;
	 },
	 
	 /**
	  * @summary:
	  *       在节点被置为选中时调用的监听
	  * @param {unieap.tree.TreeNode}   node
	  * @return 
	  *      {boolean}
	  * @description:
	  *     此时选中的UI和数据操作已经完成，若返回为false，将不会执行onAfterChecked监听
	  * @example:
	  * |function nodeChecked(node){ 
	  * |	unieapTree.setCurrentNode(node); //设置被选中节点为当前节点 
	  * |}
	  * |<div dojoType="unieap.tree.Tree" id="basicTree"  animate="false" label="UniEAP" 
	  * |	checkLogic="{onChecked:nodeChecked}" 
	  * |	binding = "{'leaf':'leaf', 'store':treeStorePart,
	  * |			'parent':'parentID', query:{name:'parentID',relation:'=',value:''} }">
	  * |</div>
	  */
	 onChecked : function(node){
	 	return true;
	 },
	 
	 /**
	  * @summary:
	  *       在节点被置为非选中时调用的监听
	  * @param {unieap.tree.TreeNode}   node
	  * @return 
	  *      {boolean}
	  * @description:
	  *     此时选中的UI和数据操作已经完成，若返回为false，将不会执行onAfterUnChecked监听
	  * @example:
	  * |function nodeUnChecked(node){ 
	  * |alert("您取消选中了节点"+node.getLabel()); 
	  * |} 
	  * |<div dojoType="unieap.tree.Tree" id="basicTree" id="unieapTree" 
	  * |	animate="false" label="UniEAP" checkLogic="{onUnChecked:nodeUnChecked}" 
	  * |	binding = "{'leaf':'leaf', 'store':treeStorePart,
	  * |			'parent':'parentID', query:{name:'parentID',relation:'=',value:''} }">
	  * |</div>
	  */
	 onUnChecked : function(node){
	 	return true;
	 },
	 
	  /**
	  * @summary:
	  *       在节点被置为选中时后调用的监听
	  * @param {unieap.tree.TreeNode}   node
	  * @description:
	  *     此时选中的UI和数据操作已经完成
	  * @example:
	  * |function nodeAfterCheck(node){ 
	  * |	unieapTree.setCurrentNode(node); 
	  * |}
	  * |<div dojoType="unieap.tree.Tree" id="basicTree" id="unieapTree" 
	  * |	animate="false" label="UniEAP" 
	  * |	checkLogic="{onUnChecked:nodeUnChecked,onAfterChecked:nodeAfterCheck}" 
	  * |	binding = "{'leaf':'leaf', 'store':treeStorePart,
	  * |			'parent':'parentID', query:{name:'parentID',relation:'=',value:''} }">
	  * |</div> 
	  */
	 onAfterChecked : function(node){
	 },
	 
	 /**
	  * @summary:
	  *       在节点被置为非选中时后调用的监听
	  * @param {unieap.tree.TreeNode}   node
	  * @description:
	  *     此时选中的UI和数据操作已经完成
	  * @example:
	  * |function nodeAfterUnCheck(node){ 
	  * |	alert("您已经取消选中了节点"+node.getLabel()); 
	  * |} 
	  * |<div dojoType="unieap.tree.Tree" id="basicTree"  animate="false" label="UniEAP" 
	  * |	checkLogic="{onUnChecked:nodeUnChecked,onAfterUnChecked:nodeAfterUnCheck}" 
	  * |	binding = "{'leaf':'leaf', 'store':treeStorePart,
	  * |			'parent':'parentID', query:{name:'parentID',relation:'=',value:''} }">
	  * |</div>
	  */
	 onAfterUnChecked : function(node){
	 },
	 
	 
	 /**
	  * @summary:
	  *       手动点击使一个节点选中的事件
	  * @param {unieap.tree.TreeNode}   node
	  * @description:
	  *     此时选中的UI和数据操作已经完成
	  */
	 onHandleChecked:function(node){
		 
	 },
	 
	 /**
	  * @summary:
	  *       手动点击使一个节点取消选中的事件
	  * @param {unieap.tree.TreeNode}   node
	  * @description:
	  *     此时选中的UI和数据操作已经完成
	  */
	 onHandleUnChecked:function(node){
		 
	 },
	 
	 setCheckLogicModel : function(model) {
		if (model == "multiple") {
			this.model = "multiple";
			this.checkLogic = dojo.hitch(this,
					this._checkOfMultiple);
		} else if (model == "cascade") {
			this.model = "cascade";
			this.checkLogic = dojo.hitch(this,
					this._checkOfCascade);
		} else if (model == "parentCascade") {
			this.model = "parentCascade";
			this.checkLogic = dojo.hitch(this,
					this._checkOfParentCascade);
		} else if (model == "childCascade") {
			this.model = "childCascade";
			this.checkLogic = dojo.hitch(this,
					this._checkOfChildCascade);
		} else if (model == "single") {
			this.model = "single";
			this.checkLogic = dojo.hitch(this,
					this._checkOfSingle);
		} else if (model == "halfChecked") {
			this.model = "halfChecked";
			this.checkLogic = dojo.hitch(this,
					this._checkOfHalfChecked);
		} else if (model == "none") {
			this.model = "";
			this.widget
					.getCheckboxNode(this.widget.rootNodeUI.domNode).style.display = "none";
			this
					.setAllNodeUnDisplay(this.widget.globalTreeNode);
			for ( var j = 0; j < this.widget.rootNodeUI.containerNode.children.length; j++) {
				this.widget
						.getCheckboxNode(this.widget.rootNodeUI.containerNode.children
								.item(j)).style.display = "none";
				this.widget.rootNodeUI.containerNode.childNodes
						.item(j).associatedData.tree.getCheckLogic = function() {
					return null;
				};
			}
		} else {
			this.model = "multiple";
			this.checkLogic = dojo.hitch(this,
					this._checkOfMultiple);
		}

	},
	 
	setAllNodeUnDisplay:function(node){
		this.widget.getCheckboxNode(node.domNode).style.display = "none";
		if(node.item && node.item.children.length > 0){
			for(var i=0;i<node.item.children.length;i++){
				this.setAllNodeUnDisplay(node.item.children[i]);
			}
		}
	}
	 

})
dojo.provide("unieap.form.FormBinding");
dojo.require("unieap.util.util");
dojo.declare("unieap.form.FormBinding",null,{
	/**
	 * @declaredClass:
	 * 		unieap.form.FormBinding
	 * @summary:
	 * 		FormBinding为Form控件的数据绑定模块，负责Form的数据绑定相关操作
	 * @example:
	 * |<div dojoType="unieap.form.Form" binding="{store:'storeName',bindIndex:1}">
	 * |	<div dojoType="unieap.form.TextBox" binding="{name:'name'}"></div>
	 * |</div>
	 * 		配置Form的binding属性，
	 * 		创建了一个Form及相应的数据绑定模块FormBinding。
	 */
	 
	 constructor:function(params){
	 	dojo.mixin(this,params);
	 	this.connects = [];
		this.store&&this._initRow(this.store,this.bindIndex);

	 },
	 
	/**
	 * @summary:
	 * 		标识Form控件的数据来源
	 * @description：
	 * 		即Form控件和哪个DataStore进行数据绑定
	 * @type:
	 * 		{unieap.ds.DataStore}
	 * @example:
	 * |<div dojoType="unieap.form.Form" binding="{store:'productStore'}">
	 * |</div>
	 * 		绑定了名为'productStore'的DataStore
	 */
	store: null,
	
	/**
	 * @summary:
	 * 		设置Form控件所绑定的DataStore对象来源于哪个DataCenter，仅在store属性为DataStore名称时生效
	 * 		若没有指明,将会在全局的DataCenter对象(即dataCenter)中获取DataStore
	 * @type:
	 * 		{unieap.ds.DataCenter}
	 * @example:
	 * |<div dojoType="unieap.form.Form" binding="{store:'productStore',dataCenter:dc}">
	 * |</div>
	 * 		将DataCenter dc中名为'productStore'的DataStore绑定在form上
	 */
	dataCenter: null,
	
	/**
	 * @summary:
	 * 		指定DataStore中哪条Row与Form控件进行数据绑定
	 * @description:
	 * 		bindIndex是Row的索引,默认值为0，即绑定DataStore中的第一条Row记录
	 * @type:
	 * 		{number}
	 * @example:
	 * |<div dojoType="unieap.form.Form" binding="{store:'demo',bindIndex:1}">
	 * |</div>
	 */
	bindIndex: 0,
	
	//事件绑定
	connects : null,
	/**
	 * @summary:
	 * 		获得与Form控件绑定的DataStore
	 * @return:
	 * 		{unieap.ds.DataStore}
	 * @example:
	 * |var form=unieap.byId('form');
	 * |var store=form.getBinding().getDataStore();
	 * |unieap.debug(store);
	 * 
	 */
	getDataStore: function() {
		return this.store;
	},
	
	/**
	 * @summary:
	 * 		重新设置与Form控件绑定的DataStore
	 * @description:
	 * 		重新绑定后,Form控件的值将发生变化
	 * @param:
	 * 		{unieap.ds.DataStore} store
	 * @param:
	 * 		{number} bindIndex datastore中Row的索引，默认为0
	 * @example:
	 * |var form=unieap.byId('form');
	 * |var binding=form.getBinding();
	 * |var ds=new unieap.ds.DataStore('demo',[{name:'jack',age:21},{name:'Jim',age:19}]);
	 * |binding.setDataStore(ds,1);
	 * 绑定名为demo的DataStore的第2条Row
	 */
	setDataStore: function(store, bindIndex) {
		this._initRow(store, bindIndex);
		this.bind(this.row);
	},
	
	//初始化Form绑定的行对象
	_initRow: function(store, bindIndex) {
		typeof(bindIndex)=='undefined'&&(bindIndex=0); //bindIndex不存在时默认为0
		
		if(dojo.isString(store)){
			if(!this.dataCenter){
				this.dataCenter = this.widget.dataCenter || (unieap.Action.getViewContext(this.widget) || window).dataCenter;
			}
			this.store=unieap.getDataStore(store, this.dataCenter, false);
		}else{
			this.store = store;
		}
		if(!this.store) return;
		var count = this.store.getRowSet().getRowCount();
		if (count == 0) {
			this.store.getRowSet().addRow({});
			count = 1;
		}
		this.bindIndex = (count<=bindIndex || bindIndex<0 ) ? (count-1) : bindIndex;
		this.row = this.store.getRowSet().getRow(bindIndex);
	},
	
	/**
	 * @summary:
	 * 		获取与Form控件绑定的Row
	 * @return:
	 * 		{unieap.ds.Row}
	 * @example:
	 * |var form = unieap.byId('formId');
	 * |var row = form.getBinding().getRow();
	 */
	getRow: function() {
		return this.row;
	},
	
	/**
	 * @summary:
	 * 		对表单进行数据绑定
	 * @param:
	 * 		{unieap.ds.Row} row 表单控件要绑定的Row
	 * @example:
	 * |<div dojoType="unieap.form.Form" id="form">
	 * |	<div dojoType="unieap.form.TextBox" binding="{name:'name'}"></div>
	 * |	<div dojoType="unieap.form.TextBox" binding="{name:'age'}"></div>
	 * |</div>
	 * |var form=unieap.byId('form');
	 * |var ds=new unieap.ds.DataStore('demo',[{name:'jack',age:22},{name:'Jim',age:19}]);
	 * |var row=ds.getRowSet().getRow(0);
	 * |form.getBinding().bind(row);
	 * 		给Form绑定一条数据
	 */
	bind: function(row) {
		if(!row) return;
		this.unbind();
		!row && this.widget.clear();
		if(!row||row.declaredClass!="unieap.ds.Row"){
			return;
		}
		if(this.row!=row||!this.row){
			this.row=row;
			var rs = this.row.getRowSet();
			if(rs){
				this.store= rs.getDataStore();
			}
		}
		this._bind(row);
		this.addEventListener();
	},
	
	_bind: function(row) {
		var storeList = [],widgetList=[],temp;
		dojo.forEach(this.widget.getDescendants(), 
			function(widget,index,widgets) {
				if(!(widget instanceof unieap.form.FormWidget)) return;
				//收集值转义的DataStore,包括ComboBox和InlineEditBox等组件
				//ComboBox和ComboBoxTree组件 转义 配置dataProvider属性，其他组件配置decoder属性
				if(((temp = widget.dataProvider) && temp.store) ||((temp = widget.decoder) && temp.store)){
						var dc = widget.dataCenter || (unieap.Action.getViewContext(widget) || window).dataCenter;
						var store = unieap.getDataStore(temp.store,dc,true);
						if(!store){
							storeList.push(temp.store);
							widgetList.push(widget);
						}else{
							widget.getBinding()&&widget.getBinding().bind(row);
						}
				}else{
					//绑定不需要转码的控件
					widget.getBinding()&&widget.getBinding().bind(row);
				}
		});
			
		//绑定需要转码的控件
		if(storeList.length>0){
			unieap.Action.getMultiCodeList(storeList,dojo.hitch(this,function(){
				dojo.forEach(widgetList,function(widget){
					widget.getBinding()&&widget.getBinding().bind(row);
				});
			}));
		}
		//第一次调用之后，重写_bind方法的方法体：之后调用不做如上逻辑判断，直接绑定	
		this._bind	= function(row){
			dojo.forEach(this.widget.getDescendants(), 
				function(widget,index,widgets) {			
					widget.getBinding()&&widget.getBinding().bind(row);
				});
		}
	},
	
	/**
	 * @summary:
	 * 		解除表单控件和DataStore的绑定
	 * @description:
	 * 		假设有一个表单控件已经和DataStore进行了绑定,调用该方法,表单控件将解除和DataStore的绑定关系
	 * @example:
	 * |var form=unieap.byId('form');
	 * |form.getBinding().unbind();
	 */
	unbind: function() {
		if(!this.row){
			return;
		}
		//清除绑定状态
		dojo.forEach(this.widget.getDescendants(), function(widget) {
			widget.setModified(false);
			widget.getValidator()&&widget.getValidator().handleError(true);
			var binding = widget.getBinding();
			binding && binding.unbind();
		});
		this.row=null;
		this.store=null;
		this.removelEventListener();
	},
	addEventListener : function(){
		if(this.row.getRowSet()!=null){
			this.connects.push(dojo.connect(this.row.getRowSet(),"onResetUpdate",this,function(index){
				if(index){
					if(this.row.getIndex() == index){
						this.bind(this.row);
					}
				}else{
				    this.bind(this.row);
				}

			}));
			this.connects.push(dojo.connect(this.getDataStore(),"onRowSetChanged",this,function(){
				this.setDataStore(this.getDataStore());
			}));
		}
	},
	removelEventListener : function(){
		while(this.connects.length){
			dojo.disconnect(this.connects.pop());
		}
	}
});

if(!dojo._hasResource["unieap.form.FormHelper"]){
dojo._hasResource["unieap.form.FormHelper"] = true;
dojo.provide("unieap.form.FormHelper");
dojo.declare("unieap.form.FormHelper",null,{	
	/**
	 * @declaredClass:
	 * 		unieap.form.FormHelper
	 * @summary:
	 * 		Form控件的辅助模块，提供了一些方法对Form控件进行操作
	 * 		
	 */
	 
	 constructor : function(widget){
	 	this.widget = widget;
	 },
	 /**
	  * @summary:
	  * 	获取Form控件中的数据
	  * @param:
	  * 	{boolean} bool 是否只收集带binding属性的控件
	  * 	
	  * @description:
	  * 	数据格式形如{'name':'jack','age':'20'}
	  * 	如果控件具有相同的binding属性、name属性或者id属性,该方法只收集第一次遇到该属性时控件的值
	  * @example:
	  *|<div dojoType="unieap.form.Form" id='demoFrm'>
	  *|	<div dojoType="unieap.form.TextBox" binding="{name:'name'} ></div>
	  *|	<div dojoType="unieap.form.TextBox" name='age'></div>
	  *|</div>
	  *|var helper=unieap.byId('demoFrm').getHelper();
	  *|//data为{'name':'jack','age':'20'},
	  *|var data=helper.collectData();
	  *|//new_data为{'name':'jack'},因为只收集带binding属性的控件
	  *|var new_data=helper.collectData(true); 
	  * @img:
	  *     images/form/form_collect.png
	  */
	 collectData:function(bool){
	 	var widgets=this.widget.getDescendants(),result={};
		dojo.forEach(widgets,function(widget){
			var binding=widget.getBinding(),choice;
			if(binding){
				choice=binding['name'];
				!result[choice]&&(result[choice] = widget.getValue());
			}else{
				if(!bool){
					choice=widget.name || widget.id;
					!result[choice]&&(result[choice] = widget.getValue());
				}
			}
		});
	 	return result;
	 },
	 
	 
	 collectTextData:function(){
	 	var widgets=this.widget.getDescendants(),result={},_rootID = this.widget._rootID;
		dojo.forEach(widgets,function(widget){
			var choice= widget.id;
			if(choice && choice.indexOf(_rootID)==0){
				choice = choice.substring(_rootID.length);
				!result[choice]&& widget.getText && (result[choice] = widget.getText());
			}
		});
	 	return result;
	 },
	 
	 applyTextData:function(result){
	 	var widgets=this.widget.getDescendants(),_rootID = this.widget._rootID;
		dojo.forEach(widgets,function(widget){
			var choice= widget.id;
			if(choice && choice.indexOf(_rootID)==0){
				choice = choice.substring(_rootID.length);
				result[choice]&&(widget.setText(result[choice]));
			}
		});
	 },
	 
	 
	 /**
	  * @summary:
	  * 		强制保存数据
	  * @example:
	  * |if(evt.keyCode==dojo.keys.PAGE_UP){
		|			unieap.byId('form').getHelper().apply();
		|			var data=unieap.byId('form').getBinding().getRow().data;
		|			alert('要提交的数据为:'+dojo.toJson(data));
		|}
		当按下PAGE_UP后将数据强制保存，并且显示提交的数据
	  * @description:
	  * 		适用于如下场景:置光标于控件编辑框中并修改控件的值(不失去焦点),按住快捷键来提交控件绑定的数据。
	  * 		由于控件失去焦点后才会修改数据中心对应的字段,如果直接提交将丢失数据。需要强制保存数据。
	  */
	 apply : function(){
	 	dojo.forEach(this.widget.getDescendants(), function(widget) {
	 		var value = widget.getValue();
	 		widget.setValue(value);
	 	});
	 }
});
}

if (!dojo._hasResource["unieap.form.Form"]) {
	dojo._hasResource["unieap.form.Form"] = true;
	dojo.provide("unieap.form.Form");
	dojo.require("dijit._Widget");
	dojo.require("dijit._Templated");
	dojo.require("unieap.rpc");

	dojo.declare("unieap.form.Form", [dijit._Widget, dijit._Templated], {

		/**
		 * @declaredClass:
		 * 		unieap.form.Form
		 * @summary:
		 * 		Form控件和HTML中的form标签类似，可以内嵌其他表单控件
		 * @example:
		 * |<form dojoType="unieap.form.Form" binding="{store:'prince_store',bindIndex:1}">
		 * |	<div dojoType="unieap.form.TextBox" binding="{name:'city'}"></div>
		 * |</form>
		 * 		上述代码表示普通表单的使用，并在表单控件上直接进行了数据绑定。
		 * @example:
		 * |var form=unieap.byId('form');
		 * |var ds=new unieap.ds.DataStore('demo',[{name:'jack',age:22}]);
		 * |var row=ds.getRowSet().getRow(0);
		 * |form.getBinding().bind(row);
		 * 		上述代码表示对表单控件进行动态的数据绑定。
		 * @example：
		 * |dojo.addOnLoad(function(){
		 * |	var row = ...;
		 * |	form.getBinding().bind(row);	
		 * |});
		 * 		推荐应用上述方式在页面加载完成后对表单控件进行动态数据绑定，
		 * 		此方式的页面载入性能优于表单控件上直接进行数据绑定的方式。
		 * @example:
		 * |<form dojoType="unieap.form.Form" enctype="multipart/form-data" method="post">
		 * |	<div dojoType="unieap.form.TextBox" name="name"></div>
		 * |    <div dojoType="unieap.form.DateTextBox" name="hiredate"></div>
		 * |	<div dojoType="unieap.form.FileInput" name="picture"></div>
		 * |</form>
		 * |function success(res,args){console.info(arguments);}
		 * |function error(res,args){console.info(arguments);}
		 * |var args={
		 * |	url:'/application/demo.jsp',
		 * |	load:success,${1} 
		 * |	error:error,${2} 
		 * |	timeout:2000,
		 * |	parameters:{dc:new unieap.ds.DataCenter().toJson()}
		 * |};
		 * |unieap.Action.upload(args);
		 * 		上述代码表示利用表单控件进行文件上传。
		 * 		注意：使用文件上传时,后台返回的数据必须是如下格式:
		 * 		<textarea>+json+</textarea>		例如 "<textarea>{name:'jack'}</textarea>"
		 * ${1}请求成功的回调方法
		 * ${2}请求失败的回调方法
		 * @img:
		 *      images/form/form.png
		 */

		templateString: "<form dojoAttachPoint='containerNode' autocomplete='off'></form>",


		/**
		 * @summary:
		 * 		数据绑定信息
		 * @type:
		 * 		{unieap.form.FormBinding}
		 * @example:
		 * |<div dojoType="unieap.form.Form" binding="{store:'storeName'}">
		 * |	<div dojoType="unieap.form.TextBox" binding="{name:'name'}" ></div>
		 * |</div>
		 * 默认绑定绑定DataStore中第一条row记录
		 * @example:
		 * |<div dojoType="unieap.form.Form" binding="{store:'demo',bindIndex:1}">
		 * |</div>
		 * 通过bindIndex绑定DataStore指定row记录
		 */
		binding: null,

		/**
		 * @summary:
		 * 		设置表单的MIME编码
		 * @description:
		 * 		当进行文件上传时,需要设置该属性为multipart/form-data
		 * @default:
		 * 		application/x-www-form-urlencoded
		 *
		 * @type:
		 * 		{string}
		 * @enum:
		 * 		{"application/x-www-form-urlencoded"|"multipart/form-data"}
		 * @example:
		 * |<div dojoType="unieap.form.Form" enctype="multipart/form-data">
		 * |	<div dojoType="unieap.form.FileInput"></div>
		 * |</div>
		 */
		enctype: "application/x-www-form-urlencoded",

		/**
		 * @summary:
		 * 		设置服务器地址
		 * @description:
		 * 		和<form action="server.jsp">中的action属性相同
		 * @type:
		 * 		{string}
		 */
		action: "",

		/**
		 * @summary:
		 * 		设置提交方式
		 * @description:
		 * 		和<form action="server.jsp" method="post">中的post属性相同
		 * @type:
		 * 		{string}
		 * @enum:
		 * 		{"get"|"post"}
		 */
		method: "post",

		//自动注入dataCenter
		Autowired: "dataCenter",

		/**  2018.8.16  sxf
		 * @summary:
		 * 		设置折叠控件
		 * @description:
		 * 		通过true和false属性，展示和隐藏折叠控件
		 * @type:
		 * 		{boolean}
		 * @default：
		 * 		false
		 * @example：
		 * 	<div dojoType='unieap.form.Form'  expendable='true' ></div>
		 *    expendable值为true时，添加折叠控件
		 */
		expendable: false,

		/**  2018.11.5  CH
		 * @summary:
		 * 		设置折叠控件展开收起状态
		 * @description:
		 * 		1.判断expendable是否为true，它为true才会有此属性功能
		 * 		2.通过true和false属性，展开和收起状态，默认为false
		 * @type:
		 * 		{boolean}
		 * @default：
		 * 		false
		 * @example：
		 * 	<div dojoType='unieap.form.Form'  expendable='true' fromQueryStyle='false' ></div>
		 *    fromQueryStyle值为true时，默认展开状态
		 *    fromQueryStyle值为false时，默认收起状态
		 */

		fromQueryStyle: false,
	
		
		/**
		 * @summary:
		 * 		设置折叠控件展开默认展示行数
		 * @description:
		 *     fromQueryStyle值为false时，此属性生效，默认收起状态
		 * 		默认3行，可自行输入其它值
		 * @type:
		 * 		{string}
		 * @enum:
		 */
		defaultDisplayLines:3,

		/**
		 * @summary：
		 * 		获取表单下所有Form编辑组件
		 * @description：
		 * 		当控件是unieap.form.FormWidget的子类才返回
		 * @return：
		 * 		{array}
		 * @example:
		 * |var form=unieap.byId('form');
		 * |var children=form.getDescendants();
		 * |dojo.forEach(children,function(widget){
		 * |	unieap.debug(widget);
		 * |});
		 */
		getDescendants: function () {
			//判断如果有查询按钮 就增加form的右边距 让form不会被查询按钮遮挡
			var buttons = document.getElementsByClassName('query_buttons');
			dojo.forEach(buttons, function (button) {
				if(button.parentNode.className.indexOf("query_form_padding") == -1){
					button.parentNode.className +=' query_form_padding'  ;}
			})
			var sbuttons = document.getElementsByClassName('select_buttons');
			dojo.forEach(sbuttons, function (button) {
				if(!dojo.query(".limit_buttons", dojo.byId(button.parentNode.id)).length){
					button.className += ' only_select_buttons'
				}
				if(button.className.indexOf('select_buttons_label') == -1){
					var para = document.createElement("span");
					var DIV = document.createElement("div")
					para.className="select_buttons_span";
					DIV.className =  'select_buttons_mask';
					var txt1 = document.createTextNode("勾选后操作:");
					para.appendChild(txt1);
					button.className +=' select_buttons_label';
					button.insertBefore(para,button.childNodes[0]);
					button.appendChild(DIV);
				}else{
					return
				}
			})
			var descendants = this.inherited(arguments);
			if (!this.its) {
				this.its = {};
			}
			for (var i = descendants.length - 1; i >= 0; i--) {
				if (!(descendants[i] instanceof unieap.form.FormWidget)) {
					descendants.splice(i, 1);
				} else if (!descendants[i].form) { //sxf
					var it = descendants[i];
					var ct = it.domNode.parentNode.previousElementSibling;
					if (ct) {
						ct = ct.querySelector('label');
						if (ct) {
							it.label = ct.textContent;
						}
						if (it.binding) {
							this.its[it.label] = it.binding.name;
						}
					}
					it.form = this;
				}
			}
			return descendants;
		},


		//sxf 得到字段值
		getPropertyValue: function (propertyName) {
			var me = this;
			if (me.getBinding() == null) {
				return null;
			}
			var dds = me.getDescendants();
			for (var i in dds) {
				var item = dds[i];
				if (item.binding && item.binding.name == propertyName) {
					return item.getValue();
				}
			}
			var store = me.getBinding().getDataStore();
			if (store.getRowSet().getRowCount() <= 0) {
				return null;
			}
			var propertyValue = store.getRowSet().getItemValue(0, propertyName);
			return propertyValue;
		},
		//sxf 通过Label名得到字段值
		getPropertyValueByLabel: function (labelName) {
			var me = this;
			return me.getPropertyValue(me.its[labelName]);
		},
		//sxf 得到数据的Map
		getDataMap: function () {
			var me = this;
			if (me.getBinding() == null) {
				return null;
			}
			var data = me.getBinding().getDataStore().rowSet.primary;
			if (data.length != 0) {
				data = data[0];
				delete data["_o"];
				delete data["_t"];
			}
			return data;
		},

		//sxf 得到数据的Map
		setDataMap: function (data) {

			var me = this;
			if (me.getBinding() == null) {
				return;
			}
			var store = form.getBinding().getDataStore();
			if (store.getRowSet().getRowCount() <= 0) {
				return;
			}
			var rs = store.getRowSet();
			for (var key in data) {
				rs.setItemValue(0, key, data[key]);
			}

			return data;
		},
		//设置表单元素集合{key:val}
		setPropertiesValues : function(id,data) {
			if(data){
				var form = unieap.byId(this.getRealId(id));
				if(form.getBinding() ==null){
					return;
				}
				var store = form.getBinding().getDataStore();
				if(store.getRowSet().getRowCount() <= 0){
					return;
				}
				var rs=store.getRowSet();
				for(var key in data){
					rs.setItemValue(0,key,data[key]);

				}
			}
		},
		//sxf 通过字段设置字段值
		setPropertyValue: function (propertyName, propertyVal) {
			var me = this;
			if (me.getBinding() == null) {
				return null;
			}
			var store = me.getBinding().getDataStore();
			if (store.getRowSet().getRowCount() <= 0) {
				return null;
			}
			store.getRowSet().setItemValue(0, propertyName, propertyVal);
		},

		//sxf 通过Label设置字段值
		setPropertyValueByLabel: function (labelName, propertyVal) {
			var me = this;
			me.setPropertyValue(me.its[labelName], propertyVal);
		},

		postCreate: function () {
			//文件上传时,ie和firefox不一样.ie不能直接操作enctype属性
			if (dojo.isIE < 9) {
				if (this.enctype) {
					var encType = this.domNode.getAttributeNode("enctype");
					encType.value = this.enctype;
				}
				if (this.method) {
					var method = this.domNode.getAttributeNode("method");
					method.value = this.method;
				}
			} else {
				this.enctype && dojo.attr(this.domNode, "enctype", this.enctype);
				this.method && dojo.attr(this.domNode, "method", this.method);
			}
			this.action && dojo.attr(this.domNode, "action", this.action);
			dojo.addClass(this, "u-form");
			dojo.addClass(this.domNode, "u-form");


			if (this.expendable) {
				this.addFoldContain();
			}
		},

		startup: function () {
			this.binding && this.binding.store && this._bindData();
			//如果是FF等设置Enter键换Tab的处理
			if (!dojo.isIE) {
				setTimeout(dojo.hitch(this, "_enter2Tab"), 0);
			} else if (dojo.isIE > 8) { //U_EAP00029169 @yll 解决ie浏览器enter切换焦点bug
				setTimeout(dojo.hitch(this, "_enter2Tab"), 0);
			}
		},

		/**
		 * @summary：
		 * 		判断各表单控件的值是否已被修改
		 * @description:
		 * 		对于DataStore中的一条Row而言，它有很多字段。修改其中任何一个字段的值,isModified方法将返回false
		 * @example:
		 * |var form=unieap.byId('form');
		 * |var isModified=form.isModified();
		 * 		返回Form的修改状态
		 * @return：
		 * 		{boolean}
		 * 		已修改返回true；没有修改则返回为false
		 */
		isModified: function () {
			var binding = this.getBinding();
			return binding ? binding.getRow().isModified() : false;
		},

		/**
		 * @summary:
		 * 		清空Form控件下各表单控件的值.
		 * @description:
		 * 		如果Form控件绑定了数据源,调用本方法,Form控件下各表单控件左上角的红色三角将隐藏
		 * @example:
		 * |var form=unieap.byId('form');
		 * |form.clear();
		 */
		clear: function () {
			dojo.forEach(this.getDescendants(), function (widget) {
				if ("unieap.form.FileInput" == widget.declaredClass) {
					widget._clearInput();
				} else {
					widget.declaredClass == 'unieap.form.ComboBox' ? widget.setValue(null) : widget.setValue("");
				}
				if (widget.declaredClass == 'unieap.form.ComboBox' && widget.autoCompleter != null) {
					var ds = widget.getDataProvider().getDataStore();
					if (ds) {
						ds = new unieap.ds.DataStore();
						widget.getDataProvider().setDataStore(ds);
					}
				}
				widget.setModified(false);
				widget.getValidator() && widget.getValidator().handleError(true);
			});
		},

		/**
		 * @summary:
		 * 		恢复绑定的初始值
		 * @description:
		 * 		将Form控件下各表单控件的值恢复到初次绑定DataStore时的值
		 * @example:
		 * |var form=unieap.byId('form');
		 * |form.reset();
		 */
		reset: function () {
			dojo.forEach(this.getDescendants(), function (widget) {
				widget.reset();
			});
		},

		/**
		 * @summary：
		 * 		对Form控件下的各个表单控件进行校验操作
		 * @description:
		 * 		当嵌套在Form内的每一个表单控件的检验方法都返回true时，该方法返回true
		 * 		如果参数errorPrompt为true,当校验不通过时会自动提示错误信息并将光标置于第一个校验不通过的文本框。
		 * @param:
		 * 		{boolean} errorPrompt 是否自动提示校验信息,不传入则从global.js中的unieap.widget.errorPrompt读取
		 * @return:
		 * 		{boolean}
		 * @example:
		 * |<script type="text/javascript">
		 * |	var form=unieap.byId('form');
		 * |	//没有传入参数errorPrompt,errorPrompt值为unieap.widget.errorPrompt
		 * |	var isValid=form.validate();
		 * |</script>
		 * @example:
		 * |<script type="text/javascript">
		 * |	var form=unieap.byId('form');
		 * |	var isValid=form.validate(false);
		 * |</script>
		 */
		validate: function (errorPrompt) {
			var b = true,
				_widget;
			this._inValidWidget = null;
			dojo.forEach(this.getDescendants(), function (widget) {
				if (widget.getValidator) {
					var validator = widget.getValidator();
					//增加自定义校验函数 sxf的判断
					if (widget.validFn) {
						var value = widget.getValue();
						if ("validFalse" == eval(widget.validFn)) {
							_widget = this._inValidWidget = widget;
							b = false;
						}
					}

					if (validator && !validator.validate() && b) {
						_widget = this._inValidWidget = widget;
						b = false;
					}
				}
			}, this);

			if (typeof (errorPrompt) == "undefined") {
				errorPrompt = unieap.widget.errorPrompt;
			}

			//sxf 明确异常错误提示的字段
			if (_widget) {
				if (_widget.validFn) {
					return;
				}
				if (errorPrompt) {
					var errorMsg = _widget.getValidator().getErrorMsg();
					if (_widget.label) {
						if (!errorMsg) {
							errorMsg = "不符合要求";
						}
						errorMsg = _widget.label + ": " + errorMsg;
					}
					MessageBox.alert({
						title: RIA_I18N.form.form.validateMsg,
						message: errorMsg,
						type: 'warn',
						onComplete: function () {

							_widget.focus();
						}
					})
				} else {
					_widget.focus && _widget.focus();
				}
			}

			// else{
			// 	errorPrompt?_widget&&MessageBox.alert({
			// 		title:RIA_I18N.form.form.validateMsg,
			// 		message:_widget.getValidator().getErrorMsg(),
			// 		type:'warn',
			// 		onComplete:function(){
			// 			_widget.focus();
			// 		}
			// 	}):_widget&&_widget.focus&&_widget.focus();
			// }
			return b;
		},

		/**
		 * @summary:
		 * 		当Form主动校验不通过时,获得Form控件中第一个输入值不合法的控件
		 * @description:
		 * 		使用本方法时请确保调用了validate方法
		 * @return:
		 * 		{null||unieap.form.FormWidget}
		 * @example:
		 * |<script type="text/javascript">
		 * |	var form=unieap.byId('form');
		 * |	var isValid=form.validate(false);
		 * |	if(!isValid){
		 * |		var widget=form.getInvalidWidget();
		 * |		//获得控件的错误提示信息;
		 * |		alert(widget.getValidator().getErrorMsg());
		 * |		//光标置于输入不合法的文本框中
		 * |		widget.focus();
		 * |	}
		 * |</script>
		 */
		getInvalidWidget: function () {
			return this._inValidWidget;
		},

		/**
		 * @summary:
		 * 		强制刷新Form控件的数据绑定
		 * @description:
		 * 		相当于重新对Form控件进行了数据绑定，如果Form绑定的DataStore为空，则执行clear动作
		 * @example:
		 * |var form=unieap.byId('form');
		 * |form.refresh();
		 */
		refresh: function () {
			var binding = this.getBinding();
			binding && binding.getRow() ? binding.bind(binding.getRow()) : this.clear();
		},

		/**
		 * @summary:
		 * 		获得Form控件的辅助模块
		 * @description:
		 * 		该模块提供了一些方法来对Form控件进行操作
		 * @example:
		 * |var form=unieap.byId('form');
		 * |var helper=form.getHelper();
		 * @see:
		 * 		unieap.form.FormHelper
		 */
		getHelper: function () {
			dojo.require("unieap.form.FormHelper");
			return new unieap.form.FormHelper(this);
		},

		/**
		 * @summary:
		 * 		获得Form控件的数据绑定模块
		 * @description:
		 * 		该模块提供了一些方法来对绑定的DataStore进行操作
		 * @return:
		 * 		{unieap.form.FormBinding}
		 * @example:
		 * |var form=unieap.byId('form');
		 * |var binding=form.getBinding();
		 * @see:
		 * 		unieap.form.FormBinding
		 */
		getBinding: function () {
			return unieap.getModuleInstance(this, "binding", "unieap.form.FormBinding");
		},



		/**
		 * @summary:
		 * 		实现Form 与 Grid 的绑定
		 * @description:
		 * 		实现Form 与 Grid 的绑定,当选中Grid中的某行，自动将选中的数据绑定到Form上。
		 * @param:
		 * 		{string} gridid
		 * 		需要与Form绑定的Grid的 id
		 * @example:
		 * |var form = unieap.byId('form');
		 * |	form.bindGrid('grid');
		 *
		 */
		bindGrid: function (gridid) {
			var target = unieap.byId((this._rootID || "") + gridid);
			if (!target) {
				return;
			}
			this.connect(target.getManager("SelectionManager"), 'onAfterSelect', function () {
				var datastore = target.getBinding().getDataStore();
				var row = target.getManager('SelectionManager').getSelectedRows()[0];
				if (row == null) {
					var index = grid.getRowManager().getCurrentRowIndex();
					if (index != null && index > 0) {

						row = datastore.getRowSet().getRow(index);
					}
				}
				if (row != null) {
					return this.getBinding().bind(row);
				}
			});
		},


		//数据绑定、自动获取codelist
		_bindData: function () {
			var binding = this.getBinding();
			binding.bind(binding.row);
		},

		destroy: function () {
			//form
			this.getBinding() && this.getBinding().unbind();
			this.inherited(arguments);
		},

		_enter2Tab: function () {
			dojo.forEach(this.getDescendants(), function (widget, index, widgets) {
				//unieap.form.RadioButtonGroup 有fucosOffset属性
				widget.focusOffset && (index += widget.focusOffset);
				var nextFocusWidget = widgets[index + 1];
				if (nextFocusWidget) {
					!widget.nextFocusId && widget.setNextFocusId(nextFocusWidget.id);
				} else {
					var node = this.domNode;
					while (node && !node.nextSibling) {
						node = node.parentNode;
					}!node && (node = document.body);
					!node.id && (node.id = "focus_" + unieap.getUnique());
					!widget.nextFocusId && widget.setNextFocusId(node.id);
				}
			});
		},

		//2018.8.16 sxf  增加折叠控件方法

		//增加折叠html代码，绑定事件
		addFoldContain: function () {
			var form = this;
			//			if($(this.domNode).find('>table>tbody>tr').length>1){
			var foldHtml = "<div class='fold-form-query'><label class='fold-form-text'>收起</label><i class='iconfont icon-up '></i></div>";
			$(this.domNode).append(foldHtml);
			setTimeout(function () {
				var width = $(form.domNode).parent().find(".query_buttons").width();
				$(form.domNode).parent().find(".fold-form-query").css({
					"display": "block"
				}).css("cssText","right:"+width + "px !important");
				/*1280*768下form四列收起布局修改*/
				if(typeof (width) === 'undefined'){
					form.domNode.childNodes.forEach(function(item,index){
						if(item.className && (item.className.indexOf('fold-form-query')>-1)){
							item.style.cssText = 'right: 0px !important';
						}
					})
				}

			}, 500);
			var foldNode = $(this.domNode).parent().find(".fold-form-query");
			// 判断默认是收起还是展开状态，true为展开，false为收起 CH
			if (this.fromQueryStyle == true) {
				foldNode.removeClass("fold-form-state-open").addClass("fold-form-state-close");
			} else {
				foldNode.removeClass("fold-form-state-close").addClass("fold-form-state-open");
			}
			form.foldStateQuery();
			$(form.domNode).find(".fold-form-query").click(function () {
				form.foldStateQuery();

				// 添加点击之后重新定位 CH
				setTimeout(function () {
					var width = $(form.domNode).parent().find(".query_buttons").width();
					$(form.domNode).parent().find(".fold-form-query").css({
						"display": "block"
					}).css("cssText","right:"+width + "px !important");
				}, 100);
			})
			//			}
		},
		//判断隐藏或展开
		foldStateQuery: function (judgeState) {
			var foldNode = $(this.domNode).parent().find(".fold-form-query");
			var defaultLine  =  this.defaultDisplayLines>-1?this.defaultDisplayLines:3;
			if (foldNode.hasClass("fold-form-state-close")) {
				if (judgeState == "query_close") {
					foldNode.removeClass("fold-form-state-open").addClass("fold-form-state-close");
					foldNode.find(".fold-form-text").text("展开");
					foldNode.find(".iconfont").addClass("fold-icon-down");
					$(this.domNode).find('>table>tbody>tr:gt('+(defaultLine-1)+')').addClass('fold-form-hide-row');
				} else {
					this.openQuery();
				}
			} else {
				foldNode.removeClass("fold-form-state-open").addClass("fold-form-state-close");
				foldNode.find(".fold-form-text").text("展开");
				foldNode.find(".iconfont").addClass("fold-icon-down");
				$(this.domNode).find('>table>tbody>tr:gt('+(defaultLine-1)+')').addClass('fold-form-hide-row');
			}
			var fullPaneId = $(this.domNode).parent().parent().attr("id");
			if (fullPaneId) {
				var fullPanel = unieap.byId(fullPaneId);
				fullPanel.resizeContainer();
			}
		},
		//展开内容
		openQuery: function () {
			var foldNode = $(this.domNode).parent().find(".fold-form-query");
			foldNode.removeClass("fold-form-state-close").addClass("fold-form-state-open");
			foldNode.find(".fold-form-text").text("收起");
			foldNode.find(".iconfont").removeClass("fold-icon-down");
			$(this.domNode).find('table tbody .fold-form-hide-row').removeClass('fold-form-hide-row');
			var fullPaneId = $(this.domNode).parent().parent().attr("id");
			var fullPanel = unieap.byId(fullPaneId);
			fullPanel.resizeContainer();
		},
		//2018.9.26  增加addItems方法
		addItems: function (itemsDs, view) {
			var formId = this.id;
			var rootId = this._rootID || '';

			////jols add
			var tableLayoutDom = dojo.query('form[id*="' + formId + '_tableLayout"]');
			if (tableLayoutDom.length < 1)
				tableLayoutDom = dojo.query(this.containerNode);
			var tableDom = tableLayoutDom.query('tbody');
			//jols update
			if (tableDom.length < 1)
				tableDom = dojo.query(this.containerNode).query("tbody");

			if (itemsDs && itemsDs.rowSet && itemsDs.rowSet.primary && tableDom.length > 0) {
				//jols update
				var cols = tableLayoutDom.query("colgroup col"); // dojo.query('#'+formId+'_tableLayout colgroup col');	
				var cellLen = 2;
				if (cols) {
					cellLen = cols.length;
				}
				var appendItems = [];
				var itemIndex = 0;
				var tr = null;
				//清除 已添加的Item
				//郑舟修改。原方式在google,ie11中无法正确获取。
				var oldTd = tableDom.query('td');
				dojo.forEach(oldTd, function (itm) {
					if (itm.userDynamicFormTd == true) {
						dojo.query(".u-form-widget", itm).forEach(function (oldWidget) {
							var widgetId = dojo.attr(oldWidget, 'id');
							dijit.registry.remove(widgetId);
							dojo.destroy(oldWidget);
						})
					}
				})

				//清除 已添加的Tr
				//郑舟修改。原方式在google,ie11中无法正确获取。
				var oldTr = tableDom.query('tr');
				dojo.forEach(oldTr, function (itm) {
					if (itm.userDynamicForm == true) {
						dojo.destroy(itm);
					}
				});

				//添加动态组件

				dojo.forEach(itemsDs.rowSet.primary, function (item) {
					if (tableDom.length > 0) {
						if (item.disabled == "true" || item.disabled == true) {
							item.disabled = "true";
						} else {
							delete item.disabled;
						}
						if (item.dojoType == "Label") {
							item.colspan = cellLen > 0 ? cellLen : 1;
						} else {
							item.colspan = parseInt(item.colspan || 2);
						}
						if (itemIndex == 0 || cellLen - itemIndex < item.colspan || cellLen == 0 || item.dojoType == "Label") {
							tr = dojo.create('tr', {
								userDynamicForm: true
							}, tableDom[0]);
							itemIndex = 0;
						}
						item.id = item.id;
						var labelClass= item.label.length===0?'no_colon':''
						if (item.dojoType == "Label") {
							//						if(cellLen>0&&itemIndex>0){
							//							itemIndex = itemIndex+(cellLen-(itemIndex%cellLen));
							//						}else{
							//							itemIndex = itemIndex+cellLen;
							//						}
							dojo.create('td', {
								id: item.id + '_label_td',
								colspan: item.colspan,
								innerHTML: '<label style="' + item.style + '" id="' + item.id + '_label"'+'class="'+labelClass+'">' + item.label + '</label>'
							}, tr);
						} else {
							var labelColspan = 1;
							var widgetColspan = item.colspan - labelColspan;
							dojo.create('td', {
								align: 'right',
								id: item.id + '_label_td',
								colspan: labelColspan,
								innerHTML: '<label style="' + item.style + '" id="' + item.id + '_label"'+'class="'+labelClass+'">' + item.label + '</label>'
							}, tr);
							var td = dojo.create('td', {
								id: item.id + '_td',
								colspan: widgetColspan,
								userDynamicFormTd: true
							}, tr);
							//jols add
							if (item['clazz'])
								item['class'] = item['clazz'];
							for (var key in item) {
								if (key == 'events') {
									continue;
								}
								var v = item[key];
								if (dojo.isObject(v)) {
									item[key] = dojo.toJson(item[key]).replace(/"/g, "'");
								}
							}
							item.userDynamicFormItem = true;

							var appendItem = dojo.create('div', item, td);

							appendItem.events = item.events;

							if (item.dojoType) {
								dijit.registry.remove(rootId + item.id);
								appendItems.push(appendItem);
							}
						}
						itemIndex = itemIndex + item.colspan;
					}
				});

				// 添加自动补全TD避免IE11因TD不全造成错位BUG
				if(cellLen - itemIndex > 0){
					for(var tdLength = 0; tdLength < cellLen - itemIndex; tdLength ++){
						var td = dojo.create('td', {
							colspan: 1,
							userDynamicFormTd: true
						}, tr);
					}
				}
				
				dojo.parser.instantiate(
					appendItems,
					null, {
						dataCenter: this.dataCenter,
						currentDataCenter: this.dataCenter,
						xhr:rootId ? true : false,
						rootNode:rootId ? unieap.getElementById(rootId) : null
					},
					function () {}
				);
				//初始化Form数据源,否则取不到值
				var form = unieap.byId(formId);
				if (form) {

					//注册事件 key为:onKeyUp,onChange,onBlur等，
					/*
					 {
					   onKeyUp:function(){},
					   onKeyDown:function(){console.log(arguments)}
					 }
					*/
					if (view) {
						for (var i in appendItems) {
							var at = appendItems[i].events;
							for (var key in at) {
								view.connect(dijit.byId(appendItems[i].id), key, at[key]);
							}
						}
					}

					// 处理IE9鼠标移入加长的bug
					var formLength = form.getDescendants();
					if (dojo.isIE == 9) {
						for (var i = 0; i < formLength.length; i++) {
							if (typeof (formLength[i].fieldNode) != 'undefined') {
								var _width2 = formLength[i].fieldNode.offsetWidth + 8
								if (_width2 == 8) {
									$(formLength[i].domNode).parent().css('width', 192)
								}
								if (_width2 > 100) {
									$(formLength[i].domNode).parent().css('width', _width2)
								}
							}

						}
					}

					//处理datastore
					var formStore = form.getBinding().getDataStore();
					var store = null;
					if (store == null || store.getRowSet().getRowCount() == 0) {
						if (formStore != null) {
							if (typeof unieap.widget.form.keepValidationMessage != 'undefined' && unieap.widget.form.keepValidationMessage) {
								var formRowSet = formStore.getRowSet();
								formRowSet.deleteAllRows();
								formRowSet.insertRow({});
								var row = formRowSet.getRow(0);
								form.getBinding().bind(row);
								return;
							} else {
								var formRowSet = formStore.getRowSet();
								formRowSet.deleteAllRows();
								formRowSet.resetUpdate();
								form.getBinding().setDataStore(formStore);
								return;
							}
						}
					}

				}
			}
		}
	});
}
if(!dojo._hasResource["unieap.form.FormWidgetValidator"]){
dojo._hasResource["unieap.form.FormWidgetValidator"] = true;
dojo.provide("unieap.form.FormWidgetValidator");
dojo.require("unieap.util.util");
dojo.declare("unieap.form.FormWidgetValidator",null,{
	/**
	 * @declaredClass:
	 * 		unieap.form.FormWidgetValidator
	 * @summary:
	 * 		FormWidgetValidator为一个表单控件校验器基类,它能对表单中的数据进行校验
	 *
	 */

	 /**
	  * @summary:
	  * 	当校验失败时,提示用户错误信息
	  * @type:
	  * 	{string}
	  * @img:
	  * 	images/form/errorMsg.png
	  */
	 errorMsg:RIA_I18N.form.formWidgetValidator.errorMsg,


	 //prompts{
	 //	 nullable:'该输入项的值不可以为空'
	 //	 maxLength: '最大长度为6'
	 //	 minLength: '最小长度为3'
	 //	 pattern: '只能输入字母'
	 //	 future: '日期不能大于2010-03-26'
	 //	 past: '日期不能小于2010-02-26'
	 //  max: '最大值为20'
	 //	 min: '最小值为10'
	 //	 precision:'数字整数部分为6位，小数2位'
	 //	 scale:'数字整数部分为6位，小数2位'
	 //}

	 /**
	  * @summary:
	  *		用于用户自定义提示信息,优先级高于MetaData中的prompts提示信息和errorMsg
	  *	@type:
	  *		{object}
	  * @example:
	  * |prompts{
	  * | 	nullable:'该输入项的值不可以为空'
	  * | 	maxLength: '最大长度为6'
	  * | 	minLength: '最小长度为3'
	  * |	pattern: '只能输入字母'
	  * |	future: '日期不能大于2010-03-26'
	  * |	past: '日期不能小于2010-02-26'
	  * |   max: '最大值为20'
	  * |	min: '最小值为10'
	  * |	precision:'数字整数部分为6位，小数2位'
	  * |   scale:'数字整数部分为6位，小数2位'
	  * |}
	  * @example:
	  * |<div dojoType="unieap.form.TextBox" validator="{prompts:{nullable:'不可以为空'}}" required="true" binding="{name:'deptno'}">
	  * |</div>
	  */
	 prompts:null,


	 //错误提示信息指针
	 _errorMsg:'',


	 /**
	  * @summary：
	  * 	用户自定义的异常码
	  * @description：
	  * 	10000 ~ 19999 范围为系统级异常码
	  * 		10001为非空异常码
	  * 		10002为最大长度异常码
	  * 		10003为最小长度异常码
	  * 		10004为最大值异常码(NumberTextBox控件)
	  * 		10005为最小值异常码(NumberTextBox控件)
	  * 		10006为精度不正确常码(NumberTextBox控件)
	  * 	20000 ~29999 范围为用户级异常码
	  * 		默认为20001
	  * @type:
	  * 	{number}
	  * @example:
	  * |<div dojoType="unieap.form.TextBox" validator="{errorCode:20002}"></div>
	  */
	 errorCode : 20001,

	 _errorCode:0,



	 constructor: function(params){
		dojo.mixin(this, params);
		!this.prompts&&(this.prompts={});
		var orginFn = this.validate;
		this.validate = function(){
			if(!this.widget.domNode || this.widget.disabled|| dojo.style(this.widget.domNode, 'display') == 'none') return true;
			//该属性表明控件曾经执行过校验操作
			this.widget.wasValidated=true;
			this._errorMsg="";
			this._errorCode=0;

			//如果onBeforeValidate返回false,什么校验都不操作,validate方法直接返回true
			var value = this.widget.getValue();
			var bool = unieap.fireEvent4Widget(this,this.widget,this.onBeforeValidate,[value]);//this.onBeforeValidate(value);
			if(bool){
				bool=this._baseValidate(value);
				//数字框在设置范围后，数字“0”不能触发该校验
				if(bool&&!(value==="")){
					bool=orginFn.call(this,value);
					if(!bool){
						this._errorMsg= this._errorMsg|| this.errorMsg ;
						this._errorCode = this._errorCode || this.errorCode;
					}
				}
			}
			this.handleError(bool);
			return bool;
		}
	 },

	 //获得prototype上的errorMsg属性
	 getDefaultErrorMsg:function(){
	 	return dojo.getObject(this.declaredClass).prototype.errorMsg;
	 },

	 //获得值为空的校验信息
	 getNullableMsg:function(meta){
	 	return this.prompts["nullable"]||(meta&&meta.getPrompt("nullable"))||RIA_I18N.form.formWidgetValidator.nullError;
	 },

	 //获得最大长度限制的校验信息
	 getMaxLengthMsg:function(meta){
	 	return this.prompts["maxLength"]||(meta&&meta.getPrompt("maxLength"));
	 },

	 //获得最小长度的校验信息
	 getMinLengthMsg:function(meta){
	 	return this.prompts["minLength"]||(meta&&meta.getPrompt("minLength"));
	 },

	 //基本验证,验证控件是否非空、长度是否合法等
	 _baseValidate : function(value){
	 	value = value!=null ? String(value) : "";
		var binding=this.widget.getBinding(),
			//是否可以为空
			isNullable=true,meta;
		if(binding&&binding.getRow()){
			var meta=binding.getMetaData();
			meta&&(isNullable=meta.isNullable());
		}
	 	//非空校验，从required属性或者元数据中读取
	 	if((this.widget.required||!isNullable) && dojo.trim(value)==""){
 			this._errorMsg = this.getNullableMsg(meta);
 			this._errorCode = 10001;
 			return false;
	 	}
	 	//长度校验
		var minLength=this.widget.minLength>-1?this.widget.minLength:-1;
		var maxLength=this.widget.maxLength>-1?this.widget.maxLength:-1;


		//如果最小长度的值大于最大长度，最小长度值变为-1，即最小长度无效
		if(maxLength>-1){
			minLength>maxLength&&(this.widget.minLength=-1);
			if(unieap.bitLength(value)>maxLength){
				this._errorMsg = this.getMaxLengthMsg(meta)||(RIA_I18N.form.formWidgetValidator.maxLengthError+maxLength);
				this._errorCode = 10002;
	 			return false;
			}
		}
		if(value!=null&&unieap.bitLength(value)<minLength){
			this._errorMsg =  this.getMinLengthMsg(meta)||(RIA_I18N.form.formWidgetValidator.minLengthError+minLength);
			this._errorCode = 10003;
	 		return false;
		}
	 	return true;
	 },

	/**
	 * @summary：
	 * 		对控件的值进行校验
	 * @param：
	 * 		{object} value 控件传入的值
	 * @example：
	 * |var box=unieap.byId('txtBox');
	 * |var value = box.getValue();
	 * |var bool=box.getValidator().validate(value);
	 * @return:
	 * 		{boolean}
	 */
	validate: function(value){
		return true;
	},

	/**
	 * @summary:
	 * 		设置校验前回调事件,如果返回为false则不执行校验操作
	 * @param:
	 * 		{object} value 控件传入的值
	 * @example：
	 *  |<div dojoType="unieap.form.TextBox" validator="{onBeforeValidate:function(value){this.setErrorMsg('自定义错误');return false;}}">
	 * @return：
	 * 		{boolean} 默认返回为true
	 */
	onBeforeValidate: function(value){
		return true;
	},

	//处理错误，如果不合法就显示错误信息 {boolean} isValid 是否合法
	handleError : function(isValid){
		var errorNode=this.widget.errorNode;
		if(isValid){
			this.widget.fieldNode&&dojo.removeClass(this.widget.fieldNode,"u-form-textbox-error");
			if(errorNode){
				dojo.require("unieap.Tooltip");
				unieap.hideTooltip(errorNode)
				dojo.style(errorNode,"display","none");
			}
		}else{
			this.widget.fieldNode&&dojo.addClass(this.widget.fieldNode,"u-form-textbox-error");
			if(errorNode){
				dojo.style(errorNode,"display","none");
				if(!errorNode.onmouseover){
					dojo.require("unieap.Tooltip");
					this.widget.connect(errorNode,"onmouseover",function(){
						var errorMsg = this.getValidator().getErrorMsg();
						unieap.showTooltip(errorMsg,this.errorNode);
					});
					this.widget.connect(errorNode,"onmouseout",function(){
						unieap.hideTooltip(this.errorNode);
					});
				}
			}
		}
	},

	/**
	 * @summary:
	 * 		获取错误信息
	 * @return：
	 * 		{string}
	 */
	getErrorMsg : function(){
		return this._errorMsg;
	},

	/**
	 * @summary:
	 * 		设置错误提示信息
	 * @description:
	 * 		当没有错误时,该方法返回的为空字符串
	 * @param：
	 * 		{string} msg
	 */
	setErrorMsg : function(msg){
		this._errorMsg = msg;
	},


	/**
	 * @summary:
	 * 		获取错误码
	 * @description:
	 * 		当没有错误时,该方法返回的为0
	 * @return：
	 * 		{number}
	 */
	getErrorCode : function(){
		return this._errorCode;
	},

	/**
	 * @summary:
	 * 		设置错误码
	 * @param：
	 * 		{number} errorCode
	 */
	setErrorCode:function(errorCode){
		this._errorCode=errorCode;
	}
});
}

if (!dojo._hasResource["unieap.form.FormWidgetBinding"]) {
dojo._hasResource["unieap.form.FormWidgetBinding"] = true;
dojo.provide("unieap.form.FormWidgetBinding");
dojo.declare("unieap.form.FormWidgetBinding", null, {
	/**
	 * @declaredClass:
	 * 		unieap.form.FormWidgetBinding
	 * @summary:
	 * 		表单控件的绑定控制器，用来维护控件绑定相关操作。
	 */
	 
	/**
	 * @summary:
	 * 		指定表单控件要绑定的列(来自DataStore的Row)
	 * @type:
	 * 		{string}
	 * @example:
	 * |<form dojoType="unieap.form.Form" binding="{store:'emp'}>
	 * |	<div dojoType="unieap.form.TextBox" binding="{name:'name'}"></div>
	 * |    <div dojoType="unieap.form.DateTextBox" binding="{name:'hiredate'}"></div>
	 * |</form>
	 * 		TextBox控件和DateTextBox控件分别绑定emp DataStore的第一条row的name字段和hiredate字段
	 */
	name: '',
	
 
	/**
	 * @summary:
	 * 		设置表单控件的元数据类型
	 * @description：
	 * 		如果没有设置,框架将从元数据中去自动获取
	 * @type:
	 * 		{"string"|"number|"}
	 * @example:
	 * |<form dojoType="unieap.form.Form" binding="{store:'emp'}>
	 * |	<div dojoType="unieap.form.TextBox" name="age" dataType="number"></div>
	 * |</form>
	 */
	dataType: '',
		
	/**
	 * @summary:
	 * 		设置是否显示数据修改标记。
	 * @description：
	 * 		如果为true，数据修改后会在控件左上角显示红色的三角形
	 * @type:
	 * 		{boolean}
	 * @default:
	 * 		true
	 * @img:
	 * 		images/form/markdirty.png
	 * @example:
	 * |<div dojoType="unieap.form.TextBox" binding="{name:'attr_sal',markDirty:false}"></div>
	 * 设置markDirty为false，数据修改后不会在控件左上角显示红色三角形
	 */
	markDirty: true,
	
	constructor: function(params){
		dojo.mixin(this, params);
		this.connects = [];
	},
	
	/**
	 * @summary:
	 * 		判断各表单控件的值是否已被修改。
	 * @return:
	 * 		{boolean}
	 * 		如果已被修改，返回true；没有修改则返回为false
	 * @example:
	 * |var box=unieap.byId('empName');
	 * |var binding=box.getBinding();
	 * |var bool=binding&&binding.isModified();
	 */
	isModified: function(){
		return this.getValue()!=this.getOrigValue();
	},
	

	//设置表单控件的值
	setValue: function(value){
		if(!this.row) return ;
		var dataType = this.getDataType();
		if(dataType=="number" && dojo.trim(String(value))!="" && value != null && !isNaN(value)){
			value = Number(value);
		}
		//数字类型时 0和“”会认为相同 导致问题 需要用===进行类型匹配 U_EAP00029243
		if(dataType=="number"){
			this.getValue()!== value && this.row.setItemValue(this.name, value);	
		}else{
			this.getValue()!= value && this.row.setItemValue(this.name, value);	
		}
		this.markDirty&&this.widget.setModified(this.row.isItemChanged(this.name));
	},
	
	//获得表单控件绑定的值
	getValue: function(){
		var value=null;
		if(this.row){
			value=this.row.getItemValue(this.name);
			value==null&&this.metadata&&(value=this.metadata.getDefaultValue());
		}
		return value;
	},
	/**
	 * @summary:
	 * 		获取数据类型
	 * @return:
	 * 		{String} 枚举：{"number"|"string"|"boolean"|"date"}
	 */
	getDataType : function(){
		var dataType = this.dataType;
		if(!dataType && this.metadata){
			dojo.require("unieap.util.util");
			dataType = unieap.getDataType(this.metadata.getDataType());
		}
		return dataType;
	},
	
	/**
	 * @summary:
	 * 		获得表单控件初次绑定DataStore时的值
	 * @return:
	 * 		{string}
	 * @example:
	 * |var box=unieap.byId('empName');
	 * |var binding=box.getBinding();
	 * |var value=binding&&binding.getOrigValue();
	 * |alert(value);
	 */
	getOrigValue: function(){
		return this.row&&this.row.getItemOrigValue(this.name);
	},
	
	//获得控件绑定的Row对象
	getRow: function() {
		return this.row;
	},
	
	//获得绑定的datastore的元数据信息
	getMetaData:function(){
		return this.metadata
	},
	
	/**
	 * @summary:
	 * 		设置是否显示数据修改标记
	 * @description：
	 * 		如果为true，数据修改后会在控件左上角显示红色的三角形
	 * @param:
	 * 		{boolean}
	 * @example:
	 * |var text=unieap.byId('txt');
	 * |var binding=text.getBinding();
	 * |binding&&binding.setMarkDirty(false);
	 * 		设置不显示修改标记
	 */
	setMarkDirty: function(markDirty){
		this.markDirty = markDirty;
	},
	
	
	onBeforeBind:function(){},
	
	
	//数据绑定
	bind: function(row){
		if(!this.name || !row)   return;
		this.onBeforeBind();
		this.unbind();
		this.row = row;
        this.metadata = this.row.getRowSet().getMetaData(this.name);
		var widget=this.widget,
			meta=this.metadata;
		
		//添加combo和radio的默认值，暂时支持这两种
		if((this.widget instanceof unieap.form.RadioButton) && this.widget.checked){
			var checkedValue = this.widget.checkedValue;
			if(!this.getValue() && checkedValue){
				var name, self = this.widget, flag = true;
				dojo.query("> input[name]", this.widget.domNode).forEach(
						function(input){
							name = dojo.attr(input, "name");
						}
				);
				var inputName;
				dojo.query("div.u-form-rdoBtn").forEach(
						function(node) {
							var radioButton = dijit.byNode(node);
							dojo.query("> input[name]", radioButton.domNode)
									.forEach(function(input) {
										inputName = dojo.attr(input, "name");
									});
							if (inputName == name
									&& radioButton != self && radioButton.binding.name && radioButton.checkedValue == row.getItemValue(radioButton.binding.name)) {
									flag = false;
									return;
								}
						});
				if(flag){
					this.row.setIdentifier(this.name,  checkedValue);
				}
			}
		}
		if((this.widget instanceof unieap.form.ComboBox) && this.widget.hasDefault){
			var items = this.widget.getDataProvider().getItems();
			if(!this.getValue() && items){
				this.row.setIdentifier(this.name,  this.widget.getDecoder().code(items[0]));
			}
	    }
		//控件没有maxLength属性时，处理控件的最大长度,从元数据中提取precision属性
		//如果控件为NumberTextBox,需要从元数据中读取scale
		dojo.require("unieap.form.TextBox");
		if(meta&&(widget instanceof unieap.form.TextBox)){
				var maxLen=meta.getMaxLength(),
					required = meta.isNullable(),
					minLen=meta.getMinLength();

			//如果控件的maxLength为-1，即用户没有设置maxLength属性
			if(widget.maxLength==-1&&maxLen){
				widget.inputNode.maxLength=maxLen;
				widget.maxLength=maxLen;
			}
			
			//如果控件的minLength为-1，即用户没有设置minLength属性
			if(widget.minLength==-1&&minLen){
				widget.minLength=minLen;
			}
			if(!required){
				widget._setRequired(true);
			}
			
			//对NumberTextBox而言，长度用precision和scale来控制
			dojo.require("unieap.form.NumberTextBox");
			if (widget instanceof unieap.form.NumberTextBox) {
				var precision = meta.getPrecision(),
					required = meta.isNullable(), 
					scale = meta.getScale();
				//NumberTextBox控件没有配置precision属性
				if (widget.precision ==-1&&precision) {
					widget.precision = precision;
					if (widget.scale<=0&&scale&&scale<precision) {
						widget.scale=scale;
					}
				}
				if(!required){
					widget._setRequired(true);
				}
				
				//NumberTextBox控件有precision但是没有scale
				if(widget.precision>-1&&widget.scale<=0&&scale&&scale<widget.precision){
					widget.scale=scale;
				}
			}
		}
		//如果set进来的值为null或者undefined 那么就给默认值
	var currentValue = this.getValue();
	if(currentValue == null){
		if(this.widget.comboShowSelect&&this.widget.comboShowSelectValue!=null&&this.widget.comboShowSelectValue!=undefined){
			currentValue = this.widget.comboShowSelectValue
		}
		if(this.widget.defaultValue != null && this.widget.defaultValue !=undefined){
			currentValue = this.widget.defaultValue
		}
	}
	this.widget.setValue(currentValue);

	// if(this.widget.comboShowSelectValue)
	//  //避免表单设计器给设置了默认值或者默认选中值的时候 重新给组件赋值  2021-04-15  lind
	//  if(((this.widget.comboShowSelectValue == '' ||this.widget.comboShowSelectValue == null)&& !this.widget.comboShowSelect)
	//  &&
	//  ((this.widget.value == '' ||this.widget.value == null)&& !this.widget.defaultValue)){
	// 	 this.widget.setValue(this.getValue());
	//  }
		this.connect(this.widget,"fireDataChange",function(){
				if (this.widget instanceof unieap.form.NumberTextBox){
					this.dataType = "number";
				}
        		var value = this.widget.getValue();
        		this.setValue(value);
        });   
        
        this.connect(this.row.getRowSet(),"onItemChanged",
        	function(row, name,value){
	        	if(this.name == name && 
	        		this.row.getData()==row.getData()){	 
	        		if(this.widget.getValue()==null&&dojo.isString(value)&&value=='')return;
	        		if(value==null&&dojo.isString(this.widget.getValue())&&this.widget.getValue()=='')return;
	        		if(this.widget.getValue()!=value || typeof(this.widget.getValue())!=typeof(value))
	        			this.widget.setValue(value);
	        	}
        });
        this._binded = true;
	},
	
	//事件绑定
	connect: function(context,eventName, eventFunc){
		 this.connects.push(dojo.connect(context, eventName, this, eventFunc));
	},
	
	//解除控件与store的绑定
	unbind: function(){
		if(!this.row){
			return;
		}
		dojo.forEach(this.connects, function(handle){
			dojo.disconnect(handle);
		});
		this.connects = [];
		this.row = null;		
		this.widget.setModified(false);
	},
	
	isBinded: function(){
		return !!this.row;
	}
});
}

if (!dojo._hasResource["unieap.form.Formatter"]) {
	dojo._hasResource["unieap.form.Formatter"] = true;
	dojo.provide("unieap.form.Formatter");
	dojo.declare("unieap.form.Formatter", null, {
		/**
		 * @declaredClass:
		 * 		unieap.form.ValueFormatter
		 * @summary:
		 * 		Form组件格式化控制器的接口。
		 */
		/**
		 * @summary:
		 * 		从value值格式化成相应的值
		 * @param:
		 * 		{object} value
		 * @return:
		 * 		{string}
		 */
		format: function(value){
			return value;
		},
		
		/**
		 * @summary:
		 * 		format的相反过程，将值解析为value
		 * @param:
		 * 		{string} value
		 * @return:
		 * 		{object}
		 */
		parse: function(value){
			return value;
		}
	});
}
if (!dojo._hasResource["unieap.form.SimpleFormatter"]) {
	dojo._hasResource["unieap.form.SimpleFormatter"] = true;
	dojo.provide("unieap.form.SimpleFormatter");
	dojo.require("unieap.form.Formatter");
	dojo.declare("unieap.form.SimpleFormatter", unieap.form.Formatter, {
		/**
		 * @declaredClass:
		 * 		unieap.form.SimpleFormatter
		 * @summary:
		 * 		格式化控制器。
		 */
		/**
		 * @summary:
		 * 		格式化字符串
		 * @type:
		 * 		{string}
		 */
		dataFormat: "",
		
		constructor: function(params){
			dojo.mixin(this, params);
		},
		/**
		 * @summary:
		 * 		设置格式化字符串
		 * @description：
		 * 		给dataFormat属性赋值
		 * @param:
		 * 		{string} dataFormat
		 */
		setFormat: function(dataFormat){
			this.dataFormat = dataFormat;
		},
		
		/**
		 * @summary:
		 * 		获取格式化字符串
		 * @description：
		 * 		获取dataFormat属性值
		 * @return:
		 * 		{string}
		 */
		getFormat: function(){
			return this.dataFormat;
		}
	});
	
}
dojo.provide("unieap.form.FormWidget");
dojo.require("dijit._Widget");
dojo.require("dijit._Templated");
dojo.require("unieap.util.util");

dojo.declare("unieap.form.FormWidget", [dijit._Widget, dijit._Templated],{
	/**
	 * @declaredClass:
	 * 		unieap.form.FormWidget
	 * @summary:
	 * 		FormWidget为所有表单控件的基类,它定义表单控件所需的一些基本属性和方法
	 */
	
	//配置属性接口
	UserInterfaces : {
		id : "string",
		jsId : "string",
		"class" : "string",
		style : "string",
		name : "string",
		tabIndex : "number",
		disabled : "boolean",
		display : "string",
		required : "boolean",
		width : "string",
		height : "string",
		binding : "object",
		validator : "object",
		nextFocusId : "string",
		securityId : "string"		
	},
	
	/**
	 * @summary:
	 * 		设置文本框的name属性
	 * @type:
	 * 		{string}
	 */
	name:'',
	
	/**
	 * @summary:
	 * 		设置Tab键的顺序
	 * @description:
	 * 		当用户按下Tab键时,控件会按照tabIndex值的大小依次被选中
	 * @type:
	 * 		{number}
	 * @img:
	 * 		images/form/tabIndex.png
	 * @example:
	 * |<div dojoType="unieap.form.Form" binding="{store:'empStore'}"></div>
	 * |	编号：<div id="id" dojoType="unieap.form.TextBox" binding="{name:id}" tabIndex="1"></div>
	 * | 	性别：<div id="sex" dojoType="unieap.form.TextBox" binding="{name:sex}" tabIndex="3"></div>
	 * |	城市：<div id="city" dojoType="unieap.form.ComboBox" binding="{name:city}" dataProvider="{store:'city'}" hasDefault="true" tabIndex="2">
	 * |</div>
	 * 未配置tabIndex属性的情况下，Tab键聚焦的顺序是：编号-->性别-->城市；
	 * 如上配置tabIndex属性以后,聚焦顺序是：编号-->城市-->性别。
	 * 注:为了代码清晰，上述示例代码去掉了布局代码
	 */
	tabIndex: 0,
	
	/**
	 * @summary:
	 * 		设置是否禁用控件
	 * @description：
	 * 		如果初始化的时候是可用状态，则不要在标签上配置disabled属性，
	 * 		浏览器是IE的情况下，只要设置disabled属性，就为不可用状态
	 * @type:
	 * 		{boolean}
	 * @example:
	 * | <div id="id" dojoType="unieap.form.TextBox" binding="{name:id}" disabled="true"></div>
	 * @img:
	 * 		images/form/disabled.png
	 */
	disabled: false,
	
	/**
	 * @summary:
	 * 		设置是否显示控件
	 * @description：
	 * 		设置display属性为block时,显示控件，当display为none时，则不显示控件
	 * @type:
	 * 		{string}
	 * @example:
	 * | <div id="id" dojoType="unieap.form.TextBox" binding="{name:id}" display="none"></div>
	 * 
	 */
	display: null,
	
	
	
	/**
	 * @summary:
	 * 		设置控件的值是否必须
	 * @description:
	 * 		如果为true,控件用淡黄色背景色标示
	 * @type:
	 * 		{boolean}
	 * @example:
	 * | <div id="id" dojoType="unieap.form.TextBox" binding="{name:id}" required="true"></div>
	 * @img:
	 * 		images/form/require.png
	 */
	required: false,
	
	
	/**
	 * @summary:
	 * 		设置控件的宽度,支持数字或者百分比
	 * @type:
	 * 		{number|string}
	 */
	width: "",

	/**
	 * @summary:
	 * 		设置控件的高度,支持数字或者百分比
	 * @type:
	 * 		{number|string}
	 * @example:
	 * | <div id="id" dojoType="unieap.form.TextBox" height="40px"></div>
	 * @example:
	 * | <div id="id" dojoType="unieap.form.TextBox" height="50%"></div>
	 */
	height: "",
	
	
	/**
	 * @summary:
	 * 		设置控件的数据绑定信息
	 * @type:
	 * 		{object}
	 * @example:
	 * | <div dojoType="unieap.form.Form" binding="{store:'empStore'}">
	 * | 	<div id="id" dojoType="unieap.form.TextBox" binding="{name:id}"></div>
	 * | </div>
	 * 如上例所示textbox绑定了empStore的id字段
	 */
	binding: null,
	
	/**
	 * @summary:
	 * 		校验器
	 * @type:
	 * 		{object}
	 * @example:
	 * |<div dojoType="unieap.form.TextBox" validator="{regExp:/^\d+$/,errorMsg:'只能输入数字'}></div>
	 * validator属性可以对控件的输入值进行校验,/^\d+$/是一个正则表达式,表示文本框的值只能为数字,否则会提示错误信息
	 * @img:
	 * 		images/form/textbox_validator.png
	 */
	validator: null,
	
	/**
	 * @summary:
	 * 		定义默认的验证实现类
	 * @description:
	 * 		子类可以替换其类的声明，而不必重载对应get方法(如：getValidator)
	 * @type:
	 * 		{string}
	 */
	validatorClass : "unieap.form.FormWidgetValidator",	
	
	/**
	 * @type:
	 * 		{string}
	 * @summary:
	 * 		设置焦点跳转的目的控件
	 * @description:
	 * 		Form控件支持回车聚焦功能（类似Tab键功能）：
	 * 		当焦点落到该控件时，回车事件会使焦点跳转到其他控件，Form中默认按控件在Form中的顺序跳转。
	 * 		可以通过设置nextFocusId属性，改变默认顺序，设置焦点跳转的目的控件。
	 * 		该功能在FireFox浏览器下，默认不能进行跨Form的焦点跳转，需要时可以通过配置该属性实现。
	 * @example:
	 * |<div dojoType="unieap.form.Form"></div>
	 * |	<div id="t1" dojoType="unieap.form.TextBox" nextFocusId="t3"></div>
	 * |	<div id="t2" dojoType="unieap.form.TextBox"></div>
	 * |	<div id="t3" dojoType="unieap.form.TextBox" nextFocusId="t2"></div>
	 * |</div>
	 * 		上述例子：当焦点落到控件t1上时，连续回车事件，焦点的跳转顺序是：t1->t3->t2，
	 * 		如果不配置nextFocusId属性的跳转顺序是：t1->t2->t3。
	 * 
	 * @example:
	 * |<div dojoType="unieap.form.Form" id="f1"></div>
	 * |	<div id="t1" dojoType="unieap.form.TextBox"></div>
	 * |	<div id="t2" dojoType="unieap.form.TextBox" nextFocusId="t3"></div>
	 * |</div>
	 * |<div dojoType="unieap.form.Form" id="f2"></div>
	 * |	<div id="t3" dojoType="unieap.form.TextBox"></div>
	 * |	<div id="t4" dojoType="unieap.form.TextBox"></div>
	 * |</div>
	 * 		上述例子控件t2配置了nextFocusId="t3",在FireFox浏览器下实现了跨Form焦点跳转。
	 */
	nextFocusId:'',
	
	securityId:'',

	
	postCreate: function() {
		//处理控件文本输入域的tabIndex
		if(this.tabIndex && this.focusNode && !this.readOnly ){
			dojo.attr(this.focusNode, "tabindex", this.tabIndex); 
		}
		this._setWidthAndHeigth();
		//设置disabled属性
		this.disabled && this.setDisabled(this.disabled);	
		//设置必填属性
		this.required && this._setRequired(this.required);
		//设置name属性
		this.name && this.inputNode&&(this.inputNode.name=this.name);
		//记录原始值
		this.origValue = this.value || "";
		//设置hidden属性，即是否显示
		this.display && this.setDisplay(this.display);
		if(this.id && this.inputNode){
			this.inputNode.id = this.id + "_unieap_input"
		}
	},
	
	_setRequired: function(required) {
		this.required = required;
		this.requiredNode && dojo.style(this.requiredNode,"visibility",required?"visible":"hidden");
		var fieldNode = this.fieldNode;
		var inputNode = this.inputNode;
		if(required){
			fieldNode && dojo.hasClass(fieldNode,'u-form-file-required-right') && dojo.removeClass(fieldNode,'u-form-file-required-right');
			fieldNode && dojo.addClass(fieldNode,'u-form-file-required-error');
			inputNode && dojo.addClass(inputNode,'u-form-textbox-input-required');
		}else{
			fieldNode && dojo.hasClass(fieldNode,'u-form-file-required-error') && dojo.removeClass(fieldNode,'u-form-file-required-error');
			fieldNode && dojo.addClass(fieldNode,'u-form-file-required-right');		
			inputNode && dojo.hasClass(inputNode,'u-form-textbox-input-required') && dojo.removeClass(inputNode,'u-form-textbox-input-required');
		}
//		this.fieldNode&&dojo.addClass(this.fieldNode,required?"u-form-file-required-error":"u-form-file-required-right");
	},
	
	_setWidthAndHeigth: function() {
		//处理控件的宽度和高度
		this.width && dojo.style(this.domNode, "width", isNaN(this.width)?this.width:(this.width+"px"));
		//解决报表显示问题，同时修改了FileInput.js，解决height设置百分比无效问题
		if(this.height.indexOf("%") > 0){
			dojo.style(this.domNode, "height", isNaN(this.height)?this.height:(this.height+"px"));
		}
		this.height && this.fieldNode && dojo.style(this.fieldNode, "height", isNaN(this.height)?this.height:(this.height+"px"));
	},

	/**
	 * @summary:
	 * 		设置控件的样式
	 * @description：
	 * 		使用错误的样式可能导致异常
	 * @param:
	 * 		{string} name
	 * @param:
	 * 		{string} value
	 * @example:
	 * |	<div id="box" dojoType="unieap.form.TextBox"></div>
	 * |	var box = unieap.byId('box');
	 * |	box.setStyle('width','200px');
	 * 		设置TextBox的宽度为"200px";		
	 */
	setStyle: function(name, value) {
		if (dojo.isString(name)) {
			dojo.style(this.domNode, name, String(value));
		}
	},
	
	/**
	 * @summary:
	 * 		获得控件的宽度
	 * @return:
	 * 		{number}
	 */
	getWidth: function() {
		return dojo.contentBox(this.domNode).w;
	},
	
	/**
	 * @summary:
	 * 		获得控件的高度
	 * @return:
	 * 		{number}
	 */	
	getHeight: function() {
		return dojo.contentBox(this.domNode).h;
	},
	
	/**
	 * @summary:
	 * 		设置控件的宽度
	 * @param:
	 * 		{number} width
	 */	
	setWidth: function(width) {
		dojo.style(this.domNode, "width", width);
	},
	
	/**
	 * @summary:
	 * 		设置控件的高度
	 * @param:
	 * 		{number} height
	 */	
	setHeight: function(height) {
		if(height.indexOf("%") > 0){
			dojo.style(this.domNode, "height", isNaN(height)?height:(height+"px"));
		}
		dojo.style(this.fieldNode, "height", isNaN(height)?height:(height+"px"));
	},
	
	/**
	 * @summary:
	 * 		设置控件是否隐藏
	 * @param:
	 * 		{boolean} bool 
	 */	
	setVisible: function(visible) {
		if(visible){
			dojo.style(this.domNode, "position", "relative");
			dojo.style(this.domNode, "visibility", "visible");
		}else{
			dojo.style(this.domNode, "postion", "absolute");
			dojo.style(this.domNode, "visibility", "hidden");
		}
	},
	
	/**
	 * @summary:
	 * 		设置是否禁用控件,背景颜色为"不可用"灰色
	 * @param:
	 * 		{boolean} bool 
	 */	
	setDisabled: function(disabled) {
		this.disabled = disabled;
		this.inputNode && (this.inputNode.disabled = disabled);
	},
	
	/**
	 * @summary:
	 * 		设置控件的值是否必须录入
	 * @description:
	 * 		设置required属性为true时,文本框控件的背景色为淡黄色
	 * 		当disabled为true时，则以disabled的样式优先
	 * @param:
	 * 		{boolean} bool 
	 */	
	setRequired: function(required) {
		if(!this.requiredNode) return;
		this._setRequired(required);
		this.getValidator().validate();
	},
	
	/**
	 * @summary:
	 * 		设置控件是否显示
	 * @description:
	 * 		设置display属性为block时,显示控件，当display为none时，则不显示控件
	 * @param:
	 * 		{boolean} bool 
	 */	
	setDisplay: function(display){
		dojo.style(this.domNode,"display",display);
	},
	
	setModified:function(modified){
		this.modifiedNode && dojo.style(this.modifiedNode,"visibility",modified?"visible":"hidden");
	},
	
	/**
	 * @summary:
	 * 		获取控件的数据绑定信息,binding可以为空
	 * @return:
	 * 		{unieap.form.FormWidgetBinding}  
	 */	
	getBinding: function() {	
		return this.binding && unieap.getModuleInstance(this,"binding","unieap.form.FormWidgetBinding");		
	},
	
	/**
	 * @summary:
	 * 		获得控件的校验器信息
	 * @return :
	 * 		{unieap.form.FormWidgetValidator}
	 */	
	getValidator: function() {	
		return unieap.getModuleInstance(this,"validator",this.validatorClass);
	},
	
	//内部private方法,触发数据改变
	fireDataChange: function() {
	},
		
	/**
	 * @summary:
	 * 		设置组件的值
	 * @param:
	 * 		{object} value
	 */
	setValue: function(value) {
	},
	
	/**
	 * @summary:
	 * 		取得组件的值
	 * @param:
	 * 		object
	 */
	getValue: function() {
	},
	
	/**
	 * @summary:
	 * 		将表单控件的值恢复到初次绑定DataStore时的值
	 * @description：
	 * 		例如某个表单控件的初始值(来自于DataStore)为10，用户手动改为20,调用本方法，控件中的值将重新显示为10
	 */
	reset: function() {
		var binding = this.getBinding(),
			   value =  binding?  binding.getOrigValue() : this.origValue;
		this.setValue(value);
		//特殊处理value值为空或者null的情况
		if(value==""||value==null){
			this.setModified(false)
		}
	},
	
	/*
	 * @summary：
	 * 		设置下一个焦点控件Id
	 * @private
	 */
	setNextFocusId : function(nextFocusId){
		this.nextFocusId = nextFocusId;
	},
	
	destroy:function(){
		this.getBinding() && this.getBinding().unbind();
		this.inherited(arguments);
	},

	//private 供子类调用
	//firefox下按住回车换行,只支持nextFocusId为widget控件的id
	processNextFocusId:function(){
		if(this.nextFocusId){
			var nfw = dijit.byId((this._rootID||"")+this.nextFocusId) || dijit.byId(this.nextFocusId);
			if(nfw){
				//判断节点是否隐藏,隐藏就直接执行nfw.processNextFocusId()
				if(nfw.domNode&&nfw.domNode.offsetHeight&&!nfw.skipFocus){
					if(nfw.focus){
						nfw.disabled?nfw.processNextFocusId():nfw.focus();
					}else if(nfw.focusNode){ //如果控件有focusNode的dom节点
						var rs=dojo.attr(nfw.focusNode,'disabled');
						//解决在Button控件下focus执行onClick的bug
						rs?nfw.processNextFocusId():setTimeout(function(){
							nfw.focusNode.focus();
						},0);
					}else{
						var inputs = dojo.query("input",nfw.domNode);
						var rs=dojo.filter(inputs,function(ele){
							return !dojo.attr(ele, 'disabled');
						});
						rs.length>0?rs[0].focus():nfw.processNextFocusId()
					}
				}else{
					nfw.processNextFocusId();
				}
			}
		}
	}
});
dojo.provide("unieap.form.TextBoxValidator");
dojo.require("unieap.form.FormWidgetValidator")
dojo.declare("unieap.form.TextBoxValidator",unieap.form.FormWidgetValidator,{
	/**
	 * @declaredClass:
	 * 		unieap.form.TextBoxValidator
	 * @superClass：
	 * 		unieap.form.FormWidgetValidator
	 * @summary:
	 * 		对文本框的数据进行校验
	 * @classDescription：
	 * 		支持正则校验
	 * 		支持自定义方法校验
	 * 		支持实时校验
	 * @example:
	 * |var textbox=unieap.byId('txtbox');
	 * |var validator=textbox.getValidator();
	 * |validator.validate();
	 * 		取得TextBox的校验器，并进行校验。
	 * @example：
	 * |<div dojoType="unieap.form.TextBox" validator="{realTime:true,regExp:/^\d+$/}"></div>
	 * 		在validator标签中配置realTime以及regExp。		
	 */
	 
	 /**
	  * @summary:
	  * 		对控件的数据进行正则校验
	  * @description:
	  * 	为了方便用户,regExp也可以配置成一个函数,这个函数需要返回一个bool值,控件传给函数的值为当前控件的value值
	  * @type:
	  * 		{object|function}
	  * @example:
	  * |<div dojoType="unieap.form.TextBox" validator="{regExp:/^\d+$/}">
	  * |</div>
	  * 	在写正则表达式时,如果已经定义了正则表达式以^符号开头以$符号结尾，请不要在斜杠后加上g，例如/^\d+$/g,这样书写会导致浏览器第一次校验成功后第二次校验必失败。
	  * @example:
	  * |<div dojoType="unieap.form.TextBox" validator="{regExp:fn,exampleMsg:'不能小于100'}"></div>
	  * |function fn(value,widget){
	  * |	return value>100;
	  * |}
	  * 	上述代码表明当输入的值不大于100时控件会提示错误信息
	  */
	 regExp:null,
	 
	 /**
	  * @summary:
	  * 	设置是否对控件输入的值进行实时校验
	  * @description：
	  * 	实时校验是指用户在输入字符时控件就对用户输入的数据进行校验并提示错误信息，
	  * 	默认情况下,当控件失去焦点时,控件才对用户输入的数据进行校验。
	  * @type:
	  * 	{boolean}
	  * @default:
	  * 	false
	  * @example:
	  * |<div dojoType="unieap.form.TextBox" validator="{regExp:/^\d+$/,realTime:true}">
	  */
	 realTime:false,
	 
	/**
	 * @summary：
	 * 		对控件的值进行校验。如果校验成功返回true，否则返回false
	 * @return:
	 * 		{boolean}
	 */
	validate: function(){
		var result=true,meta,
			binding=this.widget.getBinding();
		if(binding&&binding.getRow()){
			var meta=binding.getMetaData(),reg;
			//如果Form绑定一个带元数据的datastore，然后绑定另外一个带有不同元数据的datastore
			//需要更新一些状态信息
			this.regExpFlag&&(this.regExp=this.getDefaultRegExp());
			if(meta){
				reg=this.getRegExp(meta);
				reg&&(this.regExp=reg);
			}
		}
		if(this.regExp){
			var value=this.widget.getValue();
			if(dojo.isFunction(this.regExp) && this.regExp.call){
				result=!!this.regExp.call(this,value,this.widget);
			}else{
				if(typeof (this.regExp)=="string"){
                    var regArr=this.regExp.split('');
                    if(regArr[0]=="/"){
                        regArr.splice(0,1)
					}
					if(regArr[regArr.length-1]=="/"){
                        regArr.splice(regArr.length-1,1)
					}
                    this.regExp=regArr.join('');
				}
				result=new RegExp(this.regExp).test(value);
			}
			!result&&(this.setErrorMsg(this.getPatternMsg(meta)));
			return result;
		}
		return result;
	},
	
	
	//获得正则表达式
	getRegExp:function(meta){
		var	reg,defaultReg=this.getDefaultRegExp();
		this.regExp==defaultReg&&meta.getPattern()&&(reg=meta.pattern)&&(this.regExpFlag=true);
		return reg;
	},
	
	//获得默认的正则表达式
	getDefaultRegExp:function(){
		return dojo.getObject(this.declaredClass).prototype.regExp;
	},
	
	//获得正则校验信息
	getPatternMsg:function(meta){
		return this.prompts["pattern"]||(meta&&meta.getPrompt("pattern"))||this.errorMsg||this.getDefaultErrorMsg();
	},
	
	
	/**
	 * @summary:
	 * 		设置控件校验所需要的正则表达式或者函数
	 * @param:
	 * 		{object|function} regExp 正则表达式或者函数
	 * @example:
	 * |var box=unieap.byId('txtbox');
	 * |box.getValidator().setRegExp(/^\d+$/);
	 */
	setRegExp:function(regExp){
		this.regExp=regExp;
		
	}
});

dojo.provide("unieap.form.InputFilter");
dojo.declare("unieap.form.InputFilter", null,{
	/**
	 * @declaredClass:
	 * 		unieap.form.InputFilter
	 * @summary:
	 * 		对控件输入的值进行过滤
	 */
	
	constructor:function(params){
		dojo.mixin(this,params);
	},

	/**
	 * @summary:
	 * 		设置控件的过滤规则,指定用户能从键盘输入的单个字符。
	 * @description:
	 * 		filterRule属性控制的是用户输入的单个字符
	 * @type：
	 * 		{object}
	 * @example：
	 * |<div dojoType="unieap.form.TextBox" inputFilter="{filterRule:/\d/}"></div>
	 * 		上述代码表明,用户从键盘输入单个字符时,每次输入的字符只能是数字(0～9)
	 */
	filterRule:"",
	
	//控件文本框中只能输入filterRule指定的字符
	filter:function(evt){
		var codeValue=evt.charOrCode;
			if(typeof(this.filterRule)=== 'string'){ //判断filterRule 取过来是不是个string 万一是个string 无法正则匹配
				this.filterRule = eval(this.filterRule);
			}
		if (this.filterRule) {
			if (this.isSpecialKey(evt)) {
				return;
			}
			
			if (!new RegExp(this.filterRule).test(codeValue)) {
				dojo.stopEvent(evt);
			}
			
			if (this.widget.declaredClass == 'unieap.form.NumberTextBox' || this.widget.declaredClass == 'unieap.form.CurrencyTextBox') {
				//如果无法通过正则表达式，或者已经输入了“-”号并且又输入一个减号，
				//或者已经输入了“.”号又输入一个减号，阻止事件
				//修正问题 U_EAP00021028
				var text = this.widget.getText();
				if ((text.indexOf('-') > -1 && '-' == codeValue) || (text.indexOf('.') > -1 && '.' == codeValue) || (text.length>0 && '-' == codeValue)) {
					dojo.stopEvent(evt);
				}
			}
		}
	},
	
	/**
	 * @summary:
	 * 		设置控件的过滤规则,指定用户能从键盘输入的字符
	 * @param:
	 * 		{object} filterRule 过滤正则表达式
	 * @example:
	 * |var box=unieap.byId('txtbox');
	 * |box.getInputFilter().setFilterRule(/[0-9]/);
	 */
	setFilterRule:function(filterRule){
		this.filterRule=filterRule;
	},
	
	//如果按下的键为回格键、回车键、TAB键以及左右方向箭头,不执行dojo.stopEvent()方法
	//如果是组合键CTRL+A CTRL+C CTRL+V CTRL+X,CTRL+S,也不执行不执行dojo.stopEvent()方法
	isSpecialKey:function(evt){
		var keys=[8,9,13,37,39];
		if(dojo.indexOf(keys,evt.keyCode)>-1){
			return true;
		}else if(evt.ctrlKey&&dojo.indexOf([65,67,83,86,88,97,99,118,120,129],evt.keyCode||evt.which)>-1){ 

			return true;
		}
		return false;
	}
	
});



dojo.provide("unieap.form.TextBox");
dojo.require("unieap.form.FormWidget");
dojo.declare("unieap.form.TextBox",unieap.form.FormWidget,{
	/**
	 * @declaredClass:
	 * 		unieap.form.TextBox
	 * @superClass：
	 * 		unieap.form.FormWidget
	 * @summary:
	 * 		普通文本框控件,相当于HTML中的input标签。
	 * @description:
	 * 		支持文本的正则校验、编辑格式化，显示格式化，保存值格式化
	 * @img:
	 * 		images/form/textbox.png
	 * @example:
	 * | ${1}<div dojoType="unieap.form.TextBox"></div>
	 * 	${1}普通文本框
	 * | ${2}<div dojoType="unieap.form.TextBox" password="true"></div>
	 *	${2}上述代码解析后会生成一个密码框
	 * @example:
	 * | ${3}<div dojoType="unieap.form.TextBox" validator="{regExp:/^\d+$/,errorMsg:'只能输入数字'}></div>
	 *  ${3}validator属性可以对控件的输入值进行校验,/^\d+$/是一个正则表达式,表示文本框的值只能为数字,否则会提示错误信息
	 * @example:
	 * | ${4}<div dojoType="unieap.form.TextBox" inputFilter="filterRule:/[0-9]/"></div>
	 * ${4}inputFilter表示对输入的数据进行过滤,/[0-9]/表示控件只能输入数字,其他字符无法输入。
	 * 注意：如果用户打开软键盘输入字符,inputFilter属性将无法控制用户输入。可以考虑将validator属性和inputFilter属性联合使用。
	 */
	
	//用户属性配置接口
	UserInterfaces : dojo.mixin({
		textAlign : "string",
		trim : "boolean",
		password : "boolean",
		maxLength : "number",
		minLength : "number",
		displayFormatter : "object",
		valueFormatter : "object",
		editFormatter : "object",
		inputFilter : "object",
		prompt: "object",
		readOnly : "boolean",
		globalEnabled : "boolean",
		value : "string",
		onBeforeClick : "function",
		onClick : "function",
		onEnter : "function",
		onTab : "function",
		onChange : "function",
		onKeyUp : "function",
		onKeyPress : "function",
		onKeyDown : "function",
		onBlur : "function",
		onFocus : "function",
		onDblClick : "function",
		onBeforeCopy : "function",
		onCopy : "function",
		onBeforePaste : "function",
		onPaste : "function",
		onBeforeCut : "function",
		onCut : "function",
		validatorClass:"string",
        validFn:'string'//sxf,自定义校验函数
	},
	unieap.form.FormWidget.prototype.UserInterfaces),
	
	templateString :
		"<div class='u-form-widget'>"+
		    "<div dojoAttachPoint='globalEnabledNode' class='u-form-file-btn u-form-globalEnabled' style='display:none;width:0px;'>...</div>" +
			"<div dojoAttachPoint='requiredNode' class='u-form-required'>*</div>" + 
			"<div dojoAttachPoint='fieldNode' class='u-form-field'>"+
				"<div dojoAttachPoint='modifiedNode' style='visibility:hidden' class='u-form-modified'></div>"+
				"<div dojoAttachPoint='errorNode' class='u-form-error'></div>"+
				"<div class='u-form-textbox-field'>" +
					"<input dojoAttachPoint='inputNode,focusNode,hoverNode' class='u-form-textbox-input' autocomplete='off' onfocus='unieap.fep&&unieap.fep(this)'>"+
				"</div>" +
			"</div>" +
		"</div>",

	/**
	 * @type:
	 * 		{string}
	 * @summary:
	 * 		设置文本的对齐方式
	 * @default:
	 * 		"left"
	 * @enum:
	 * 		{"right"|"left"|"center"}
	 * @example:
	 * |<div dojoType="unieap.form.TextBox" textAlign="right"></div>
	 */
	textAlign:"left",

	/**
	 * @type:
	 * 		{boolean}
	 * @summary:
	 * 		是否对文本进行格式化，去掉两边的空格
	 * @default：
	 * 		false
	 * @example:
	 * |<div dojoType="unieap.form.TextBox" trim="true"></div>
	 */
	trim:false,

	/**
	 * @type:
	 * 		{boolean}
	 * @summary:
	 * 		是否为密码文本框。密码框中的文字不可复制、粘贴和剪切
	 * @default：
	 * 		false
	 * @example:
	 * |<div dojoType="unieap.form.TextBox" password="true"></div>
	 */
	password:false,

	/**
	 * @type:
	 * 		{number}
	 * @summary:
	 * 		设置控件能输入的最大长度
	 * @description:
	 * 		可以在global.js中配置一个汉字占用多少个字符
	 * @example:
	 * |<div dojoType="unieap.form.TextBox" maxLength="6"></div>
	 * 		上述代码表示控件最多能输入6个字符,当设置汉字占用两个字符时控件只能输入3个汉字,输入多个会提示错误信息
	 */
	maxLength:-1,

	/**
	 * @type:
	 * 		{number}
	 * @summary:
	 * 		设置控件必须输入的最小长度,当长度没有达到需求时,控件会提示错误
	 * @description:
	 * 		当minLength的值大于maxLength时，设置的minLength将无效
	 * @example:
	 * |<div dojoType="unieap.form.TextBox" minLength="6"></div>
	 */
	minLength:-1,

    //默认校验器实现类名称
	validatorClass:'unieap.form.TextBoxValidator',

	/**
	 * @summary：
	 * 		设置显示格式化信息
	 * @description:
	 * 		所谓显示值格式化是指当控件失去焦点时,对控件的值进行格式化
	 * @type:
	 * 		{object}
	 * @see：
	 * 		unieap.form.SimpleFormatter
	 * @example:
	 * |<div dojoType="unieap.form.TextBox"
	 * |		displayFormatter="{declaredClass:'unieap.form.NumberDisplayFormatter',dataFormat:'###,###.00'}">
	 * |</div>
	 * 		上述代码表示对控件的值进行格式化.例如控件的值为2000,格式化后的值为2,000.00
	 * 		用户可以编写的自己的displayFormatter对象,只需要继承unieap.form.SimpleFormatter即可
	 * @example:
	 * |dojo.provide("unieap.demo.MyDisplayFormatter");
	 * |dojo.require("unieap.form.SimpleFormatter");
	 * |dojo . declare("unieap.demo.MyDisplayFormatter",unieap.form.SimpleFormatter,{
	 * |
	 * |	//可选值为CH或者USA
	 * |	dataFormat:'CHN',
	 * |
	 * |	//格式化,比如格式化成￥5000
	 * |	format:function(value){
	 * |		var format=this._processDataFormat(this.dataFormat);
	 * |		if(value){
	 * |			return format+value;
	 * |		}
	 * |		return value;
	 * |	},
	 * |
	 * |	//把格式化后的值还原,例如￥5000还原成5000
	 * |	parse:function(value){
	 * |		var format=this._processDataFormat(this.dataFormat);
	 * |		if(value){
	 * |			return value.replace(new RegExp(format),'');
	 * |        }
	 * |		return value;
	 * |	},
	 * |
	 * |   _processDataFormat:function(dataFormat){
	 * |	   var str="";
	 * |	   switch(dataFormat){
	 * |		   case 'CHN':
	 * |			   return '￥';break;
	 * |		   case 'USA':
	 * | 			   return '$';break;
	 * |		}
	 * |    }
	 * |});
	 * |
	 * |<div dojoType="unieap.form.TextBox"
	 * |	 displayFormatter="{declaredClass:'unieap.demo.MyDisplayFormatter',dataFormat:'CHN'}">
	 * |</div>
	 * 		使用自定义的格式化类
	 */
	displayFormatter:null,


	//默认显示格式化实现类名称
	displayFormatterClass : "unieap.form.SimpleFormatter",

	/**
	 * @summary：
	 * 		设置保存值格式化信息
	 * @description:
	 * 		保存值格式化是指将控件的实际值格式化成另外一个值供其他格式化对象使用。
	 * 		以日期为例,假设有一个字符为"2009/08/01",我们想让它在控件中显示为"2009年8月1日",如下处理：
	 * 		首先,将"2009/08/01"通过valueFormatter对象格式化成长整型(日期本来就是一个long型)。
	 * 		然后再通过displayFormatter对象把长整型格式化成"2009年8月1日"。
	 * 		具体可以参考DateTextBox控件的模块unieap.form.DateValueFormatter和unieap.form.DateDisplayFormatter
	 * @type:
	 * 		{object}
	 * @see:
	 * 		unieap.form.SimpleFormatter
	 */
	valueFormatter:null,


	//默认值格式化实现类名称
	valueFormatterClass : "unieap.form.SimpleFormatter",

	/**
	 * @summary：
	 * 		设置编辑格式化信息
	 * @description:
	 * 		编辑值格式化是指当控件得到焦点时,对控件的值格式化
	 * @type:
	 * 		{object}
	 * @see:
	 * 		unieap.form.SimpleFormatter
	 */
	editFormatter:null,


	//默认编辑格式化实现类名称
	editFormatterClass : "unieap.form.SimpleFormatter",

	/**
	 * @summary：
	 * 		设置输入过滤信息,让控件只能输入指定的字符
	 * @type:
	 * 		{object}
	 * @see:
	 * 		unieap.form.InputFilter
	 * @example:
	 * |<div dojoType="unieap.form.TextBox" inputFilter="{filterRule:/[0-9]/}">
	 * |</div>
	 */
	inputFilter:null,

	/**
	 * @summary:
	 * 		设置控件的初始值
	 * @type:
	 * 		{string}
	 *
	 * @example:
	 * |<div dojoType="unieap.form.TextBox" value='开始信息'></div>
	 */
	value:'',

	/**
	 * @summary:
	 * 		设置控件的只读属性
	 * @default:
	 * 		false
	 * @type:
	 * 		{boolean}
	 * @example:
	 * |<div dojoType="unieap.form.TextBox" readOnly="true"></div>
	 */
	readOnly:false,

	/**
	 * @summary:
	 * 		设置光标置入到控件的输入域时的提示信息
	 * @type:
	 * 		{object}
	 * @example:
	 * |<div dojoType="unieap.form.TextBox" prompt="{promptMsg:'你好!',duration:2000}">
	 * |</div>
	 * 		上述代码中,promptMsg表示要提示的信息,duration表示多少毫秒后提示信息消失。
	 * 		设置duration小于等于0时,提示信息将不会自动消失
	 * @see:
	 * 		unieap.form.PromptManager
	 */
	prompt:null,

	//记录背景色，setDisalbed时使用
	_backgroundColor:'',

	//多语言开关
	globalEnabled:false,
	
	postCreate:function(){
		//解决IE7下form下边框显示不全问题
		if(dojo.isIE<8){
			dojo.style(this.fieldNode,'height','21px');
		}
		//如果password为true,则删除inputNode并且新建立一个密码框
		if(this.password){
			var inputNode = this.inputNode;
			this.inputNode = this.focusNode = dojo.create('input',{
				'type':'password',
				'class':'u-form-textbox-input',
				'name':inputNode.name,
				'tabIndex':inputNode.tabIndex
			});
			inputNode.parentNode.replaceChild(this.inputNode,inputNode);
			//绑定onfocus监听事件
			this.inputNode.onfocus =function(){
				unieap.fep && unieap.fep(this);
			};
		}
		//设置文字显示位置
		this.inputNode.style.textAlign = this.textAlign;
		//设置文本框的最大长度
		this.maxLength >-1 && (this.inputNode.maxLength = this.maxLength);
		//设置文本框的最小长度
		this.minLength >-1 && (this.inputNode.minLength = this.minLength); //checklength没计算最小长度
		//设置文本框的初始值
		this.readOnly&&this.setReadOnly(this.readOnly);
		//设置文本框初始值,如果trim为true，这删除字符左右的空格
		if(this.value){
			this.defaultValue = this.value
		}
		this.value&& this.setValue(this.value);
		//绑定事件
		this.connect(this.focusNode, "onfocus", "_onFocus");
		this.connect(this.focusNode, "onblur", "_onBlur");
		this.connect(this.inputNode, "onchange", "_onChange");
		this.connect(this.inputNode, "onkeyup", "_onKeyUp");
		this.connect(this.inputNode, "onkeydown", "_onKeyDown");
		this.connect(this.inputNode, "onkeypress", "_onKeyPress");
		this.connect(this.inputNode, "ondblclick", "_onDblClick");
		this.connect(this.inputNode, "onclick", "_onClick");
		this.connect(this.inputNode, "oncopy", "_onCopy");
		this.connect(this.inputNode, "onpaste", "_onPaste");
		this.connect(this.inputNode, "oncut", "_onCut");
		this.connect(this.hoverNode, "onmouseover", "_onMouseover");
		this.connect(this.hoverNode, "onmouseout", "_onMouseout");
		/********************多语言处理 start***********************/
		// 设置多语言
		this._setGlobalEnabled(this.globalEnabled);
		// 增加事件
		this.globalEnabled && this.connect(this.globalEnabledNode, "onmouseover", "_onMlMouseOver");
		this.globalEnabled && this.connect(this.globalEnabledNode, "onmouseout", "_onMlMouseOut");
		this.globalEnabled && this.connect(this.globalEnabledNode, "onclick", "_onMlClick");
		/********************多语言处理 end ************************/
		this.inherited(arguments);
	},
	/********************多语言处理 start***********************/
	// 设置多语言
	_setGlobalEnabled: function(globalEnabled){
		this.globalEnabled = globalEnabled;
		this.globalEnabledNode && dojo.style(this.globalEnabledNode,"display",globalEnabled?"block":"none");
		this.globalEnabledNode && dojo.style(this.globalEnabledNode, "width", globalEnabled?"15px":"0px");
	},
	// 绑定click事件
	_onMlClick: function(/*Event*/ e) {
		unieap.fireEvent(this,this.onMlClick,[e]);
		dojo.stopEvent(e);
	},
	// 绑定mouseOver事件
	_onMlMouseOver: function(/*Event*/ e) {
		unieap.showTooltip({inner:RIA_I18N.form.textBox.multilanguageTootip,autoClose:true}, this.globalEnabledNode);
		dojo.stopEvent(e);
	},
	// 绑定mouseOut事件
	_onMlMouseOut: function(/*Event*/ e) {
		unieap.hideTooltip(this.globalEnabledNode);
		dojo.stopEvent(e);
	},
	// 多语言处理
	onMlClick:function(e){
		var node = e.target;
		var widget, _node;
		node instanceof dijit._Widget?(_node=node.domNode)&&(widget=node):(_node=node)&&(widget=dijit.byNode(_node));
		while((widget||0).declaredClass!='unieap.form.Form'&&_node.tagName!="BODY"){
			_node=_node.parentNode;
			widget = dijit.byNode(_node);
		}
		var ds = widget.getBinding().getDataStore();
		// 当主表没有id时提示异常
		var dialogHeight = 200;
		var flag = false;
		var url=unieap.WEB_APP_NAME+ "/techcomp/ria/commonProcessor!commonMethod.action?t=" + new Date().getTime();
	    var dc=new unieap.ds.DataCenter();
		dc.setParameter("_boId", "ria_multiLanguageBO_bo");
		dc.setParameter("_methodName", "getMulitLanguageConfig");
		dc.setParameter("_methodParameterTypes", "java.lang.Object");
		dc.addDataStore("obj", ds);
	    dc.setParameter("_parameters", "obj");
	    dc.setParameter("_parameterTypes", "pojo");
	    unieap.Action.requestData({
	    	url:url,
	    	sync:true,
	    	load:function(dc){
	    	    flag = dc.getParameter("hasData");
	    	    if(flag){
	    	    	var language = dc.getParameter("supportLanguage");
	    	    	var langArr = language.split(",")
	    	    	dialogHeight += langArr.length * 50;
	    	    }else{
	    	    	MessageBox.alert({title:RIA_I18N.form.textBox.confirmTitle,message:RIA_I18N.form.textBox.confirmMessage});
	    	    	return;
	    	    }
	    	}
	    },dc,false);
	    if(!flag){
	    	return;
	    }
		var attr, label, data = {}, type = {};
		dojo.query(".u-form-globalEnabled", widget.domNode).forEach(function(mlNode){
			if("visible" == dojo.style(mlNode,"visibility")){
				var currwidget = dijit.byNode(mlNode.parentNode);
				if(currwidget){
					attr = currwidget.binding.name;
					type[attr] = currwidget.declaredClass;
					var labelNode = document.getElementById(currwidget.id+"_label");
					if(labelNode){
						data[attr] = labelNode.innerText;
					}
				}
			}
		});
		var dialog = new unieap.dialog.Dialog({
			url: unieap.WEB_APP_NAME + '/techcomp/ria/multiLanguage-view.jsp',
			title:RIA_I18N.form.textBox.multilanguageTootip,
			height:""+ dialogHeight,
			width:"450",
			onComplete: this._mlDialogComplete
		});
		dialog.dialogData = {data:data,type:type,currBindingName:this.binding.name,currType:this.declaredClass,ds:ds};
		dialog.show();
	},

	// 多语言回调方法
	_mlDialogComplete:function(returnObj){
		if(returnObj){
			returnObj.formDS.append(returnObj.mlDS,"union");
//			self.getBinding().getDataStore().append(returnObj, "union");
    	}
	},
	/********************多语言处理 end***********************/
	/**
	 * @summary:
	 * 		置光标到控件的文本域
	 * @example:
	 * |var box=unieap.byId('box');
	 * |box.focus();
	 */
	focus:function(){
		dijit.focus(this.focusNode);
		this.select();
	},

	/**
	 * @summary:
	 * 		选中控件中的文本
	 * @example:
	 * |var box=unieap.byId('box');
	 * |box.select();
	 */
	select:function(){
//		setTimeout(dojo.hitch(this,function(){
			this.focusNode&&this.focusNode.select();
//		},0));
	},

	/**
	 * @summary:
	 * 		设置控件的值
	 * @description:
	 * 		当控件设置了displayFormatter等属性时,控件显示的是格式化后的值
	 * @param:
	 * 		{object} value
	 * @example:
	 * |var box=unieap.byId('box');
	 * |box.setValue('测试');
	 */
	setValue:function(value){
		
		(value==null||typeof(value)=="undefined")&&(value="");
		//如果有背景色，清除背景色
		value=this._trim(value);
		if (typeof(value) != 'object') {
			value = this.getValueFormatter().format(value);
		}
		if (this.displayFormatter) {
			value = this.getDisplayFormatter().format(value);
		}
		this.inputNode.value =(value!=null?value:"");
		if(unieap.global.validateOnSetValue && value) this.getValidator().validate();
		this.fireDataChange();
	},

	/**
	 * @summary:
	 * 		获取控件的值
	 * @description:
	 * 		当设置了displayFormatter等属性时,得到的值是控件格式化之前的值
	 * @return:
	 * 		{string}
	 * @example:
	 * |var box=unieap.byId('box');
	 * |var value=box.getValue();
	 */
	getValue : function(){
		var value = this.getText();
		value = this.getDisplayFormatter().parse(value);
		value = this.getValueFormatter().parse(value);
		return value;
	},

	/**
	 * @summary:
	 * 		得到控件的文本显示值
	 * @description:
	 * 		当控件不配置displayFormatter、valueFormatter等时，getValue和getText()返回的值相同
	 * @return:
	 * 		 {string}
	 * @example:
	 * |var box=unieap.byId('box');
	 * |var value=box.getText();
	 */
	getText:function(){
		return this._trim(this.inputNode.value);
	},

	/**
	 * @summary:
	 * 		设置控件的文本显示值
	 * @description:
	 * 		由于控件的实际值是更根据显示值转换过来的，改变显示值也会改变控件的实际值
	 * @param:
	 * 		 {string} value 要设置的显示值
	 */
	setText:function(value){
		this.inputNode.value = value;
	},

	//获得控件的最大长度
	getMaxLength:function(){
		return this.maxLength;
	},


	/**
	 * @summary:
	 * 		得到显示值格式化对象
	 * @return：
	 * 		{unieap.form.Formatter}
	 * @see:
	 * 		unieap.form.SimpleFormatter
	 * @example:
	 * |var box=unieap.byId('box');
	 * |var formatter=box.getDisplayFormatter();
	 */
	getDisplayFormatter:function(){
		return unieap.getModuleInstance(this,"displayFormatter",this.displayFormatterClass);
	},

    /**
	 * @summary:
	 * 		得到编辑格式化对象
	 * @return:
	 * 		unieap.form.Formatter
	 * @see:
	 * 		unieap.form.SimpleFormatter
	 * @example:
	 * |var box=unieap.byId('box');
	 * |var formatter=box.getEditFormatter();
     */
	getEditFormatter:function(){
		return unieap.getModuleInstance(this,"editFormatter",this.editFormatterClass);
	},

	/**
	 * @summary:
	 * 		得到保存值格式化对象
	 * @return:
	 * 		unieap.form.Formatter
	 * @see:
	 * 		unieap.form.SimpleFormatter
	 * @example:
	 * |var box=unieap.byId('box');
	 * |var formatter=box.getValueFormatter();
	 */
	getValueFormatter:function(){
		return unieap.getModuleInstance(this,"valueFormatter",this.valueFormatterClass);
	},

	/**
	 * @summary:
	 * 		得到输入过滤对象
	 * @return:
	 * 		unieap.form.InputFilter
	 * @see：
	 * 		unieap.form.InputFilter
	 * @example:
	 * |var box=unieap.byId('box');
	 * |var formatter=box.getInputFilter();
	 */
	getInputFilter:function(){
		return unieap.getModuleInstance(this,"inputFilter","unieap.form.InputFilter");
	},

   /**
	* @summary:
	* 	获得消息提示管理器
	* @return:
	* 	unieap.form.PromptManager
	* @see:
	* 	unieap.form.PromptManager
	* @example:
	* |var box=unieap.byId('box');
	* |var formatter=box.getPromptManager();
	*/
	getPromptManager:function(){
		if(!this.prompt){
			this.prompt = {};
		}
		return unieap.getModuleInstance(this,"prompt","unieap.form.PromptManager");
	},

	/**
	 * @summary:
	 *		设置控件是否只读
	 * @param：
	 *		{boolean} readOnly
	 * @example:
	 * |var box=unieap.byId('box');
	 * |var formatter=box.setReadOnly(true);
	 */
	setReadOnly:function(readOnly){
		this.inputNode.readOnly= this.readOnly=readOnly;
		//U_EAP00027739
		dojo.isIE && dojo.hasAttr(this.inputNode,'unselectable') && dojo.attr(this.inputNode,'unselectable','');
		if(readOnly){
			//设置文本框的tabindex为-1
			this.focusNode && dojo.attr(this.focusNode,'tabindex',-1);
		    dojo.addClass(this.fieldNode,"u-form-readOnly");
		    dojo.addClass(this.inputNode,"u-form-textbox-input-readonly");
		}else{
			//还原文本框的tabindex
			this.focusNode && dojo.attr(this.focusNode,'tabindex',this.tabIndex||0);
			dojo.removeClass(this.fieldNode,"u-form-readOnly");
			dojo.removeClass(this.inputNode,"u-form-textbox-input-readonly");
		}
	},
	destroy:function(){
		if (this.inputNode)
			this.inputNode.onfocus = null; //防止内存泄漏
		this.inherited(arguments);
	},
	/**
	 * @summary:
	 * 		设置是否禁用控件
	 * @param:
	 * 		{boolean} disabled
	 * @example:
	 * |var box=unieap.byId('box');
	 * |box.setDisabled(true);
	 */
	setDisabled:function(disabled){
		//记录原始disabled状态
		if(this.disabled=disabled){
			this.inputNode.disabled=true;
			dojo.addClass(this.fieldNode,"u-form-disabled");
			dojo.addClass(this.inputNode,"u-form-textbox-input-disabled");
			//清除校验颜色,如果校验过就清除校验错误信息
			//this.wasValidated赋值见FormWidgetValidator.js文件
			this.wasValidated && this.getValidator().handleError(true);
		}else{
			dojo.removeAttr(this.inputNode,'disabled');
			dojo.removeClass(this.fieldNode,"u-form-disabled");
			dojo.removeClass(this.inputNode,"u-form-textbox-input-disabled");
		}
	},

	//////////////////////////////////////////内部方法///////////////////////////////////

	//如果trim为true,去掉value值的前后空格
	_trim:function(value){
		//当值为日期类型时，去掉空格后值转为字符串类型，在format时如果不是日期或者number类型，将返回空。
		//业务代码中日期值通常前后不会有空格，所以可以直接将值返回。
		if(value instanceof Date){
			return value;
		}
		//去掉半角和全角空格
		return this.trim?dojo.trim(value+"").replace(/^[\u3000]*/,"").replace(/[\u3000]*$/,""):value;
	},

	//对文本框进行延时校验
	_job:function(scope,fn){
//		var handleName= fn+"Handle";
//		var s = [];
//		Array.prototype.push.apply(s,arguments);
//		s.splice(0,2);
//		window.clearTimeout(scope[handleName]);
//		scope[handleName]=window.setTimeout(dojo.hitch(scope,function(){
//			this[fn].apply(this,s);
//		}),"250");
//		上面的代码可以实现往fn里面传入参数,例如:
//		this._job(this.getValidator(),'validate',3,4,5);
		var handleName=fn+"Handle";
		window.clearTimeout(scope[handleName]);
		scope[handleName]=window.setTimeout(dojo.hitch(scope,fn),"250");
	},

	//是否显示promptMsg
	_showPromptMsg:function(bool){
		var promptManager=this.getPromptManager();
		if(promptManager){
			if(bool){
				promptManager.showPromptMsg(this.inputNode);
			}else{
				promptManager.hidePromptMsg(this.inputNode);
			}
		}
	},


	////////////////////////////////////////内部事件/////////////////////////////////////

	//执行inputNode的onfocus事件
	_onFocus:function(evt){
		//dojo1.4中会在dijit/_base/focus.js中执行this._onFocus方法
		//传入的evt为"mosue",屏蔽之
		if (!evt||typeof(evt)=="string")  return ;
		var validator=this.getValidator();
		//validator.handleError&&validator.handleError(true);
		
		//wangzhb U_EAP00013602
		if (!unieap.widget.form.alwaysShowErrMssage) { 
		  validator.handleError&&validator.handleError(true);
		}
		
		var value = this.getText();
//		this._focusValue = value;
		value = this.getDisplayFormatter().parse(value);
		value = this.getEditFormatter().format(value);
		if(this.inputNode.value!=value){
			//解决光标置入的问题
			this.inputNode.value = value;
//			if(dojo.isIE){
//				var range=this.inputNode.createTextRange();
//				range.collapse(false);
//				range.moveEnd('character',0);
//				range.select();
//			}
		}
		//显示promptMsg信息
		this._showPromptMsg(true);
		this.select();
		unieap.fireEvent(this,this.onFocus,[evt]);
	},
	//执行inputNode的onblur事件
	_onBlur:function(evt,flag){

		// 移植原 OES 脚本注入处理
		if(this.declaredClass == "unieap.form.NumberTextBox"){
			if(this.getValue() == '-'){
				this.setValue("");
				this.setText("");
			}
		}
		// 去掉TextBox和Textarea中的script字符
		if(this.declaredClass == "unieap.form.TextBox" || this.declaredClass == "unieap.form.Textarea"){
			var glVlaue = this.getValue().replace(/script/i,"");
			this.setValue(glVlaue);
			this.setText(glVlaue);
		}
		// 去掉TextBox和Textarea中的write字符防止输入document.write
		if(this.declaredClass == "unieap.form.TextBox" || this.declaredClass == "unieap.form.Textarea"){
			var glVlaue = this.getValue().replace(/document.write/i,"documentwrite");
			this.setValue(glVlaue);
			this.setText(glVlaue);
		}
		//去掉Text和Textarea中的<a字符防止输入a标签
		if(this.declaredClass == "unieap.form.TextBox" || this.declaredClass == "unieap.form.Textarea"){
			var glVlaue = this.getValue().replace(/<a/i,"<");
			this.setValue(glVlaue);
			this.setText(glVlaue);
		}

		// HR 动态表单需求添加 onFormula 支持
		var node = this.inputNode;  
		if(node.blurValue == node.value){
			if (!evt||typeof(evt)=="string" && !flag) return;
		}else{
			node.blurValue = node.value; 
			this.onFormula && this.onFormula(node.value);
		}
		//dojo1.4中会在dijit/_base/focus.js中执行this._onBlur方法
		//传入的evt为"mosue",屏蔽之
		if (!evt||typeof(evt)=="string" && !flag)  return ;
		var value = this.getText(),
			nowValue=value;
		value = this.getEditFormatter().parse(value);
		value = this.getDisplayFormatter().format(value);
		value =this._formateDate(value);

		nowValue != value && (this.inputNode.value = value);

		//失去焦点时进行校验
		//如果只读，不校验
		!this.readOnly && this.getValidator().validate();
		this.fireDataChange();
		this._showPromptMsg(false);
		unieap.fireEvent(this,this.onBlur,[evt]);
	},
	//执行inputNode的onchange事件
	_onChange:function(value){

		var isValid = this._lengthCheck();
		if(!isValid){
			  this.focusNode.value=this._subString(this.focusNode.value,this.maxLength);
		}
		value = this.getValue();
		this.fireDataChange();
		unieap.fireEvent(this,this.onChange,[value]);
	},
	//执行inputNode的onkeyup事件
	_onKeyUp:function(evt){
		// 双日历控件文本禁止手动输入 zhaos
		if(this.domNode.className.indexOf("start-end-date-text") > -1){
			//双日期允许手动输入
			// if(evt.keyCode != 8 && evt.keyCode != 46){
			// 	this.textbox.blur();
			// 	if(evt.keyCode > 46 && evt.keyCode < 112 ){
			// 		MessageBox.warn({message:"双日期不允许手动输入！"});
			// 	}
			// 	return;
			// }

			if((evt.keyCode == 8 ||evt.keyCode == 46) && this.getValue()==""){
				this.setValue("");
				this.beginDateTextBox.setValue('', '');
			}
		}
		if(+evt.keyCode === 222){//防止sql注入 截断  '为sql截断语句  '强行改成 " LD
			var text = this.getText().replace(/\'/, '"');
			this.setText(text);
		}
		if(this.inputNode.tagName == 'TEXTAREA'){
			return
		}
		var isValid = this._lengthCheck();
		if(!isValid){
			 this.focusNode.value=this._subString(this.focusNode.value,this.maxLength);
		}
		//如果realTime为true则进行及时校验
		var validator=this.getValidator();
		//延时校验
		validator.realTime&&this._job(validator,"validate");
		unieap.fireEvent(this,this.onKeyUp,[evt]);
	},

	//执行inputNode的onkeydown事件
	_onKeyDown:function(evt){
		if(this.domNode.className.indexOf("start-end-date-text") > -1 && !this.dateEdit){
			this.dateEdit=true;
			$('#'+evt.currentTarget.id).inputmask("9999-99-99 ~ 9999-99-99");
		}
		if(this.domNode.className.indexOf("start-end-date-text-YM") > -1 && !this.dateYMEdit){
			this.dateYMEdit=true;
			$('#'+evt.currentTarget.id).inputmask("9999-99 ~ 9999-99");
		}
		switch(evt.keyCode){
			case dojo.keys.ENTER :
				this.fireDataChange();
				if(unieap.fireEvent(this,this.onEnter,[evt])==false) return;
				this._enter2Tab(evt);
				//U_EAP00028754
//				dojo.isIE && dojo.stopEvent(evt);
				break ;
			case dojo.keys.TAB :
				this.fireDataChange();
        //unieap.fireEvent(this,this.onTab,[evt]);
        this._enter2Tab(evt);
				break;
			case dojo.keys.BACKSPACE:
				//在IE8下，设置为文本框为readonly,但关闭依然可以置入
				//此时按住BACKSPACE键盘,页面会回退到上一页,这是ie浏览器本身的问题
				this.readOnly&&dojo.stopEvent(evt);
				unieap.fireEvent(this,this.onKeyDown,[evt]);
				break;
			default :
				unieap.fireEvent(this,this.onKeyDown,[evt]);
		}
	},


	//执行inputNode的onkeydown事件，触发tab键
	_enter2Tab : function(evt){
		if(!this.nextFocusId) { //U_EAP00029169
			(dojo.isIE<11)?(evt.keyCode = dojo.keys.TAB):dojo.byId('unieap_for_focus').focus();
		} else {
			//避免回车触发按钮的onclick事件
			dojo.stopEvent(evt);

			dijit.byId((this._rootID||"")+this.nextFocusId)||dijit.byId(this.nextFocusId)?this.processNextFocusId():dojo.byId("unieap_for_focus").focus();

		}
		unieap.fireEvent(this,this.onTab,[evt]);
	},
	//执行inputNode的onkeypress事件
	_onKeyPress:function(evt){
		//如果设置了filter,则只能输入用户指定的字符
		this.getInputFilter().filter(evt);
		unieap.fireEvent(this,this.onKeyPress,[evt]);
	},
	//执行inputNode的ondblclick事件
	_onDblClick:function(evt){
		unieap.fireEvent(this,this.onDblClick,[evt]);
	},

	//执行inputNode的onclick事件
	_onClick:function(evt){

		if (unieap.fireEvent(this,this.onBeforeClick,[])) {
			unieap.fireEvent(this,this.onClick,[evt]);
		}
	},

	//执行inputNode的oncopy事件,如果是密码框,不可复制
	_onCopy:function(evt){
		if(this.password||!unieap.fireEvent(this,this.onBeforeCopy,[])){
			dojo.stopEvent(evt);
			return;
		}
		unieap.fireEvent(this,this.onCopy,[evt]);
	},

	//执行inputNode的onpaste事件,如果是密码框，不可粘贴
	_onPaste:function(evt){
		if(this.password||!unieap.fireEvent(this,this.onBeforePaste,[])){
			dojo.stopEvent(evt);
			return;
		}
		unieap.fireEvent(this,this.onPaste,[evt]);
	},
	//执行inputNode的onpaste事件,如果是密码框，不可粘贴
	_onCut:function(evt){
		if(this.password||!unieap.fireEvent(this,this.onBeforeCut,[])){
			dojo.stopEvent(evt);
			return;
		}
		unieap.fireEvent(this,this.onCut,[evt]);
	},
	_onMouseover:function(evt){
		this._toolTipTimer=setTimeout(dojo.hitch(this,function() {
			if (!this._globalSpan && !dojo.byId('_globalSpan_')) {
				this._globalSpan = dojo.create("span", {
					style: {
						visibility: 'hidden',
						position: 'absolute'
					}, id: '_globalSpan_'
				}, dojo.body(), "first");
			}
			this._globalSpan = dojo.byId('_globalSpan_');
			var value = evt.target.value;
			if (!value || value.trim().length == 0 || evt.target.type==="checkbox")
				return;
			this._globalSpan.style.fontSize = '14px';
			this._globalSpan.innerHTML = value;
			var showTip = dojo.contentBox(this._globalSpan).w >= evt.target.offsetWidth;
			evt.target.title = '';
			if(showTip) evt.target.title = value;

			// if (showTip) {
			// 	unieap.showTooltip(value, evt.target, ['above']);
			// }

		}), 0);
	},
	_onMouseout:function(evt){
		clearTimeout(this._toolTipTimer);
		// this._globalSpan&&unieap.hideTooltip(evt.target);
	},
	//检查文本框中的value值长度是否超过了maxLength
	_lengthCheck:function(){
		var len=unieap.bitLength(this.getValue());
		//checklength没计算最小长度
		return (this.maxLength>0?this.maxLength>=len:true) && (this.minLength>0?this.minLength<=len:true);
	},

	//从字符串中截取指定长度的字符串
	_subString:function(str,length){//length为要截取的长度
		var step=0; //当为汉字时，step增2，数字或者字母增1
		var str_temp="";
		for(var i=0,l=str.length;i<l;i++){
			// str.charCodeAt(i)>255?step+=unieap.global.bitsOfOneChinese:step++;
			if(step>length)return str_temp;
			str_temp+=str.charAt(i);
		}
		return str;
	},
	_isDateYM:function(dateString){
		if(dateString.trim()=="")return true;
		var r=dateString.match(/^(\d{1,4})(-|\/)(\d{1,2})$/);
		if(r==null){
			return false;
		}
		var d=new Date(r[1],r[3]-1);
		var num = (d.getFullYear()==r[1]&&(d.getMonth()+1)==r[3]);
		return (num!=0);
	},
	_isDate:function(dateString){
		if(dateString.trim()=="")return true;
		var r=dateString.match(/^(\d{1,4})(-|\/)(\d{1,2})\2(\d{1,2})$/);
		if(r==null){
			return false;
		}
		var d=new Date(r[1],r[3]-1,r[4]);
		var num = (d.getFullYear()==r[1]&&(d.getMonth()+1)==r[3]&&d.getDate()==r[4]);
		return (num!=0);
	},
	_formateDate:function(value){
		/*双日期年月 双日期年月日验证*/
		if(this.domNode.className.indexOf("start-end-date-text-YM") > -1){
			if(this.inputNode.value.indexOf('~')>0 ){
				var startDate= this.inputNode.value.split("~")[0].trim();
				var endDate = this.inputNode.value.split("~")[1].trim();
				if( !this._isDateYM(startDate) || !this._isDateYM(endDate) ){
					value="";
				}else if(new Date(startDate)>new Date(endDate)) {
					MessageBox.warn({message:"开始时间不能大于结束时间！"});
					value="";
				}else if(this.dateYMEdit){
					this.beginDateTextBox.setValue(new Date(startDate), new Date(endDate));
					this.dateYMEdit=false;
				}
			}
		}else if(this.domNode.className.indexOf("start-end-date-text") > -1){
			if(this.inputNode.value.indexOf('~')>0 ){
				var startDate= this.inputNode.value.split("~")[0].trim();
				var endDate = this.inputNode.value.split("~")[1].trim();
				if( !this._isDate(startDate) || !this._isDate(endDate) ){
					value="";
				}else if(new Date(startDate)>new Date(endDate)) {
					MessageBox.warn({message:"开始时间不能大于结束时间！"});
					value="";
				}else if(this.dateEdit){
					this.beginDateTextBox.setValue(new Date(startDate), new Date(endDate));
					this.dateEdit=false;
				}
			}
		}
		return value;
	},

///////////////////////////////用户事件///////////////////////////////////////////

   /**
    * @summary:
    * 		点击事件前回调事件
    * @return:
    * 		{boolean}
    */
	onBeforeClick:function(){
		return true;
	},

	/**
	 * @summary:
	 * 		点击事件
	 * @param:
	 * 		 {event} evt
	 */
	onClick:function(evt){},

	/**
	 * @summary:
	 * 		回车键事件。在onkeydown事件中按下回车键触发事件。
	 * @param:
	 * 		{event} evt
	 */
	onEnter:function(evt){

	},
	/**
	 * @summary:
	 * 		Tab键事件。在onkeydown事件中按下tab键触发事件。
	 * @param:
	 * 		{event} evt
	 */
	onTab : function(evt){

	},

	/**
	 * @summary:
	 * 		当对象内容改变时触发。
	 * @param:
	 * 		{string} value
	 */
	onChange:function(value){},

	/**
	 * @summary:
	 * 		当用户释放键盘按键时触发
	 * @param:
	 * 		{event} evt
	 */
	onKeyUp:function(evt){},

	/**
	 * @summary:
	 * 		当用户按下或按住键盘键时触发
	 * @param:
	 * 		{event} evt
	 */
	onKeyPress:function(evt){},


	/**
	 * @summary:
	 * 		当用户按下键盘键时触发
	 * @param:
	 * 		{event} evt
	 */
	onKeyDown:function(evt){

	},


	/**
	 * @summary:
	 * 		在对象失去输入焦点时触发
	 * @param:
	 * 		 {event} evt
	 */
	onBlur:function(evt){
	},

	/**
	 * @summary:
	 * 		当对象获得焦点时触发
	 * @param:
	 * 		 {event} evt
	 */
	onFocus:function(evt){
	},

	/**
	 * @summary:
	 * 		当用户双击对象时触发
	 * @param:
	 * 		 {event} evt
	 */
	onDblClick:function(evt){

	},

	/*
	 * @summary:
	 * 		复制文本框到文本框之前触发
	 * @return:
	 * 		{boolean}
	 */
	onBeforeCopy:function(){
		return true;
	},

	/**
	 * @summary:
	 * 		当用户复制文本框里的数据时触发
	 * @type:
	 * 		{event} evt
	 */
	onCopy:function(evt){},

	/**
	 * @summary: 粘贴文字到文本框之前触发
	 * @return:
	 * 		{boolean}
	 */
	onBeforePaste:function(){
		return true;
	},
	/**
	 * @summary:
	 * 		当用户粘贴数据以便从系统剪贴板向文档传送数据时在目标对象上触发。
	 * @param:
	 * 		 {event} evt
	 */
	onPaste:function(evt){

	},
	/**
	 * @summary:
	 * 		剪切文本框中的文字之前触发
	 * @return:
	 * 		{boolean}
	 */
	onBeforeCut:function(){
		return true;
	},
	/**
	 * @summary:
	 * 		当用户剪文本框中的文字时触发
	 * @param:
	 * 		 {event} evt
	 */
	onCut:function(evt){

	},
	fireEvent : function(eventName,args){
		this._hasFiredEvent = this._hasFiredEvent || {};
		if(eventName in this._hasFiredEvent){
			return;
		} 
		this._hasFiredEvent[eventName] = true;
		setTimeout(dojo.hitch(this,function(){
			delete this._hasFiredEvent[eventName];
		}),0);
		return this[eventName](args);
	}

});
dojo.provide("unieap.form.NumberDisplayFormatter");
dojo.require("unieap.form.SimpleFormatter");
dojo.require("dojo.number");
dojo.require("unieap.patch.number");

dojo.declare("unieap.form.NumberDisplayFormatter", unieap.form.SimpleFormatter, {
	
	/**
	 * @declaredClass:
	 * 		unieap.form.NumberDisplayFormatter
	 * @summary:
	 * 		对数字文本框中的数字进行格式化
	 * @example:
	 * |<div dojoType="unieap.form.NumberTextBox" displayFormatter="{dataFormat:'###,###'}"></div>
	 */
	
	/**
	 * @summary:
	 * 		指定格式化的数据类型，在没有配置binding的情况下使用
	 * @type：
	 * 		{String}
	 * @example:
     * |<div dojoType="unieap.form.NumberTextBox" displayFormatter="{dataType:'number'}"></div>
	 */
    dataType : "number",
    
    /**
	 * @summary:
	 * 		格式化字符串
	 * @type:
	 * 		{string}
	 * @description:
	 * 		数字格式化字符串，参见
	 * 		http://www.unicode.org/reports/tr35/#Number_Format_Patterns
	 * @example:
	 * |<div dojoType="unieap.form.NumberTextBox" value="1234567.8910" displayFormatter="{dataFormat:'#,000.00'}"></div>
	 * @img:
     * 		images/form/numberformat.png
	 */
	dataFormat: "",
    
    /**
     * @summary
     * 		格式转换,对形如###,###的格式进行转换,
     * 		该方法仅适合20位以内的数字的格式化，大于20位的数字可以自定义格式化方法，具体见下面样例。
     * @param:
     * 		{number} value 要格式化的数字
     * @return:
     * 		{string}
     * @example:
     * |<script type="text/javascript">
     * |var dataFormat = function(value){
     * |	return value+'999';
     * |}
     * |</script>
     * |<div dojoType="unieap.form.NumberTextBox" displayFormatter="{format:dataFormat}"></div>
     */
    format: function(value){
    	var dataType = "";
    	if(this.dataType){
    		dojo.require("unieap.util.util");
			dataType = unieap.getDataType(this.dataType);
    	}
    	else{
    		//如果不在form中使用，不存在getbinding方法
    		if(this.widget.getBinding){
	    		var binding = this.widget.getBinding();
		    	if(binding){
		    		dataType = binding.getDataType();
		    	}
    		}
    	}
    	if(dataType=="number" && dojo.trim(String(value))!="" && value != null && !isNaN(value)){
			 value = Number(value);
		}

		//isNaN("")返回的是false,isNaN("333")返回的也是false,isNaN('char')为true
		if (value!==""&&!isNaN(value)) {
			value=this.toNonExponential(value);
			value = this.dataFormat ? dojo.number.format(value, {
				pattern: this.dataFormat
			}) : value;
		}
		return value;		
    },
	toNonExponential: function(num) {
		var m =  new Number(num).toExponential().match(/\d(?:\.(\d*))?e([+-]\d+)/);
		return new Number(num).toFixed(Math.max(0, (m[1] || '').length - m[2]));
	},

    /**
     * @summary
     * 		根据dataFormat的值还原成value值
     * @param:
     * 		{string} value 要解析的字符
     * @return：
     * 		{number}
     */
    parse: function(value){
		//处理dojo在处理百分比数字格式时的BUG U_EAP00028991
    	if(toString(value).indexOf("%")>-1 || (typeof(value)=='string' && value.indexOf("%")>-1)){
    		var v = value.replace("%","");
    		var strList = this.dataFormat.split("");
    		for(var i=0,len=strList.length; i<len; i++){
    			var str = strList[i];
    			if(str != "." && str != "#" && str != "0"){
    				v = v.replace(new RegExp(str,"g"),"");
    			}
    		}
    		v = Number(v.movePointLeft(2));
    		return String(v)=="NaN" ? value : v ;
    	}
		var v=this.dataFormat?dojo.number.parse(value,{pattern:this.dataFormat}):value;
		return String(v)=="NaN" ? value : v ;		
    }
});
dojo.provide("unieap.form.NumberTextBoxValidator");
dojo.require("unieap.form.TextBoxValidator");
dojo.declare("unieap.form.NumberTextBoxValidator",unieap.form.TextBoxValidator,{
	
	/**
	 * @declaredClass:
	 * 		unieap.form.NumberTextBoxValidator
	 * @superClass:
	 * 		unieap.form.TextBoxValidator
	 * @summary:
	 * 		NumberTextBox控件的校验模块
	 */
	
	/**
	 * @summary:
	 * 		NumberTextBox控件的默认正则校验
	 * @type:
	 * 		{object|function}
	 * @default:
	 * 		/^(-)?\d+\.?\d*$/
	 */
	regExp:/^(-)?\d+\.?\d*$/,
	
	/**
	 * @summary:
	 * 		NumberTextBox控件默认的错误提示信息
	 * @type:
	 * 		{string}
	 * @default:
	 * 		"该输入项只能输入数字!"	
	 */
	errorMsg:RIA_I18N.form.numberTextBox.errorMsg,
	
	/**
	 * @summary:
	 * 		NumberTextBox控件的校验默认为及时校验
	 * @type:
	 * 		{boolean}
	 * @default:
	 * 		true
	 */
	realTime:true,
	
	/**
	 * @summary：
	 * 		对控件的值进行校验。如果校验成功返回true，否则返回false
	 * @description:
	 * 		校验过程是对输入的值先进行正则校验、然后是数字范围校验、最后是精度校验
	 * @return:
	 * 		{boolean}
	 */
	validate: function(){
		var bool=this.inherited(arguments),widget=this.widget;
		if(bool){
			var binding=widget.getBinding(),
				meta=binding&&binding.getRow()&&binding.getMetaData();
			this._update(widget);
			meta&&this.updateRange(widget.range,{
				'range':meta.getRange(),
				'max': meta.getMax(),
				'min': meta.getMin()
			});
			bool=this.validateRange(widget,meta);
			bool&&(bool=this.validatePrecisionAndScale(widget,meta));

		}
		return bool;
	},
	
	//超过最大值校验信息
	getMaxMsg:function(meta){
		var msg=this.prompts["max"]||meta&&meta.getPrompt("max");
		return msg;
	},
	
	
	//小于最小值校验信息
	getMinMsg:function(meta){
		var msg=this.prompts["min"]||meta&&meta.getPrompt("min");
		return msg;
	},
	

	
	//不再某个范围内校验信息
	getRangeMsg:function(meta){
		var msg=this.prompts["range"]||meta&&meta.getPrompt("range");
		return msg;
	},
	
	//获得精度校验信息
	getPrecisionMsg:function(meta){
		var msg=this.prompts["precision"]||meta&&meta.getPrompt("precision");
		return msg;
	},
	
	//获得精度校验信息
	getScaleMsg:function(meta){
		var msg=this.prompts["scale"]||meta&&meta.getPrompt("scale");
		return msg;
	},
	
	//获得是否允许小数点的校验信息
	getDecimalMsg:function(meta){
		var msg=this.prompts["decimal"]||meta&&meta.getPrompt("decimal");
		return msg;

	},
	
	
	//校验数字范围
	validateRange:function(widget,meta){
		var value=widget.getValue(),
			max=widget.range.max,
			min=widget.range.min,
			msg='';
		if(meta){
			if (meta.range) {
				if (value > max || value < min) {
					msg=this.getRangeMsg(meta);
					msg&&this.setErrorMsg(msg);
					return false;
				}
			}
			else {
				if(meta.max!="undefined"&&value>meta.max){
					msg=this.getMaxMsg(meta);
					msg&&this.setErrorMsg(msg);
					return false;
				}else if(meta.min!="undefined"&&value<meta.min){
					msg=this.getMinMsg(meta);
					msg&&this.setErrorMsg(msg);
					return false;
				}else{
					//有meta，但没有meta.max或者meta.min
					//TODO:
					//	后台应该有校验信息吧,不用再从this.prompts中读取吧?
					//   汗~ |||-_-|||
					if(value>max||value<min) return false;
				}
			}
		}else{
			//没有meta
			if(this.prompts['range']){
				if(value>max||value<min){
					msg=this.getRangeMsg(null);
					msg&&this.setErrorMsg(msg);
					return false;
				}
			}else{
				if(this.prompts['max']&&value>max){
					msg=this.getMaxMsg(null);
					msg&&this.setErrorMsg(msg);
					return false;
				}
				if (this.prompts['min'] && value < min) {
					msg = this.getMinMsg(null);
					msg&&this.setErrorMsg(msg);
					return false;
				}
				
				//没有prompts属性
				if(value>max||value<min) return false;
				
			}
		}
		
		//是否允许输入小数点
		if(String(widget.range.allowDecimal)=='false'){
			if(typeof value=="number"){
				value = this.widget.getText();
				var valueString = value.toString();
				if(valueString.indexOf('.')>-1){
					var msg=this.getDecimalMsg();
					msg&&this.setErrorMsg(msg);
					return false;
				}
			}
		}
		return true;
	},
	
	//精度校验
	validatePrecisionAndScale:function(widget,meta){
		var result=true;
		if(widget.precision>0){
			var value=widget.getValue()+"",re;
			var len=widget.precision-widget.scale;
			if(len<=0) return true;
			if(value.indexOf(".")>-1&&widget.scale>0){
				re=new RegExp("^(-)?\\d{1,"+len+"}.\\d{1,"+widget.scale+"}$")
			}else {
				re=new RegExp("^(-)?\\d{1,"+len+"}$");
			}
			//校验精度
			if(!re.test(value)){
				if(widget.scale>0){
					var msg=this.getScaleMsg(meta);
					msg&&this.setErrorMsg(msg);
				}else{
					var msg=this.getPrecisionMsg(meta);
					msg&&this.setErrorMsg(msg);
				}
				result=false;
			}
		}
		return result;
	},
	
	//还原到prototype状态
	_update:function(widget){
		this.maxRangeFlag&&(widget.range.max=Infinity);
		this.minRangeFlag&&(widget.range.min=-Infinity);
	},
	
	//从元数据中读取range(max、min)
	updateRange:function(range,obj){
		var max,min;
		if(obj['range']) {
			max=obj['range']['max'];
			min=obj['range']['min'];
			this._updateRange(range,max,min);
		}else{
			max=obj['max'],min=obj['min'];
			this._updateRange(range,max,min);
		}
	},
	
	_updateRange:function(range,max,min){
		if(max&&range['max']==Infinity){
			range['max']=max;
			this.maxRangeFlag=true;
		}
		if(min&&range['min']==-Infinity){
			range['min']=min;
			this.minRangeFlag=true;
		}
	}
	
})

dojo.provide("unieap.form.NumberTextBox")
dojo.require("unieap.form.TextBox");
dojo.declare("unieap.form.NumberTextBox",unieap.form.TextBox,{
	/**
	 * @declaredClass:
	 * 		unieap.form.NumberTextBox
	 * @superClass:
	 * 		unieap.form.TextBox
	 * @summary:
	 * 		数字文本框控件,只能输入负号、数字和小数点。
	 * @description:
	 * 		在默认情况下,数字文本框会对输入的字符进行及时校验,您可以设置validator="{realTime:false}"来关闭。
	 * 		关闭后,只有在数字文本框失去焦点时才进行校验
	 * 
	 */
	
	
	UserInterfaces : dojo.mixin({
		range : "object",
		precision : "number",
		scale : "number"		
	},
	unieap.form.TextBox.prototype.UserInterfaces),
	
	//覆盖默认格式化类
	displayFormatterClass:'unieap.form.NumberDisplayFormatter',
	
	validatorClass:'unieap.form.NumberTextBoxValidator',
	
	//数字文本框之内输入负号、数字及其点号
	inputFilter : {filterRule:/[-\.\d]/},
	
	
	/**
	 * @summary:
	 * 		设置控件能输入的最大值和最小值
	 * @description:
	 * 		range.max:控件能输入的最大值
	 * 		range.min:控件能输入的最小值
	 * 		range.allowDecimal:是否允许数字中出现小数点
	 * @default:
	 * 		range.max为Infinity,即正无限大
	 * 		range.min为-Infiniy,即负无限大
	 * 		range.allowDecimal为true,即允许数字中出现小数点
	 * @type:
	 * 		{object}
	 * @example:
	 * |<div dojoType="unieap.form.NumberTextBox" validator="{errorMsg:'只能输入-100~100之间的整数'}" range="{min:-100,max:100,allowDecimal:false}"></div>
	 *    该代码表示用户只能输入-100~100之间的整数,否则控件会提示错误信息
	 */
	range:null,
	

	/**
	 * @summary:
	 * 		设置控件中数字的精度限制
	 * @type:
	 * 		{number}
	 * @example:
	 * |<div dojoType="unieap.form.NumberTextBox" precision="5" scale="2"></div>
	 * 上述代码表明数字文本框中最多只能输入5个数字和一个小数点,其中整数为3位,小数为2位,例如123.45
	 */
	precision:-1,
	
	
	/**
	 * @summary:
	 * 		设置控件中数字的小数精度
	 * @description:
	 * 		scale的值不能大于或等于precision的值,如果大于precision的值,scale的值就变为0
	 * @type:
	 * 		{number}
	 * @example:
	 * |<div dojoType="unieap.form.NumberTextBox" precision="5" scale="2"></div>
	 * 上述代码表明数字文本框中最多只能输入5个数字和一个小数点,其中整数为3位,小数为2位,例如123.45
	 */
	scale:0,

	postMixInProperties:function(){
		this.inherited(arguments);
		!this.range&&(this.range={		
			min:-Infinity,
			max:Infinity,
			allowDecimal:true
		});
		typeof(this.range['max'])=='undefined'&&(this.range['max']=Infinity);
		typeof(this.range['min'])=='undefined'&&(this.range['min']=-Infinity);
		typeof(this.range['allowDecimal'])=='undefined'&&(this.range['allowDecimal']=true);
	},
	
	postCreate:function(){
		this.password=false;
		this.inherited(arguments);
		//数字文本框只能输入数字,需要屏蔽输入法
		dojo.style(this.inputNode,"imeMode","disabled");
		this._initMaxLength();
		if(this.range.min>this.range.max){
			this.range.min=-Infinity;
		}
	},
	
	
	//在grid编辑器中,metadata的dataType为4，清除编辑器的值
	//再次点击编辑器,编辑器的值会变为0,因为此时传入的value为null
	setValue:function(value){
		value==null&&(value='');
		this.inherited(arguments);
	},
	getValue : function(){
		var value = this.getText();
		value = this.getDisplayFormatter().parse(value);
		value = this.getValueFormatter().parse(value);
		if(value!=''&& value!=null && value!="-"){
			value = Number(value);
			if(isNaN(value)){
				this.setValue('');
				this.focus();
				return '';
			}else
				return value;
		}
		else
			return value;
	},
	
	
	///////////////////////////////////内部方法//////////////////////////////
	
	//处理最大长度、精度等
	_initMaxLength:function(){
		if(this.maxLength>-1){
			this.inputNode.maxLength=this.maxLength;
		}
		if(this.precision>-1){
			if(Number(this.scale)>=Number(this.precision)||!this.scale||this.scale<0){
				this.scale=0;
			}
		}
	},
	
	_onBlur:function(evt){
		if (!evt||typeof(evt)=="string")  return ;		
		var value=this.inputNode.value;
		var len=value.length;
		//过滤输入值最后的一个点号,例如'3.'会显示成'3'
		if(len>0&&value.indexOf('.')==len-1){
			this.inputNode.value=this.inputNode.value.substring(0,len-1);
		}
		this.inherited(arguments);
	}
});
if(!dojo._hasResource["unieap.form.Textarea"]){
dojo._hasResource["unieap.form.Textarea"] = true;
dojo.provide("unieap.form.Textarea");
dojo.require("unieap.form.TextBox");
dojo.declare("unieap.form.Textarea", unieap.form.TextBox, {
	/**
	 * @summary:
	 * 		Textarea控件,相当于HTML中的textarea标签
	 * @declaredClass:
	 * 		unieap.form.Textarea
	 * @superClass:
	 * 		unieap.form.TextBox
	 * @img:
	 * 		images/form/textarea.png
	 * @example:
	 * |	<div dojoType="unieap.form.Textarea" ></div>
	 * @default:
	 * 		"50px"
	 */
	
	height:'',
	
	postCreate : function(){
		//Textarea控件不应该为密码框
		this.password=false;
		var inputNode = this.inputNode;
		dojo.style(this.fieldNode,{position:'relative',minHeight:'63px'});
		//修改errorNode的定位方式,不用float的方式而是absolute,见bug U_EAP00008166
		dojo.style(this.errorNode,{position:'absolute',right:'17px'});
		//将input替换成textarea
		this.inputNode = this.focusNode = dojo.create('textarea',{
			'class':'u-form-textarea-input',
			'name':inputNode.name,
			'tabIndex':inputNode.tabIndex,
			'rows':3,
			'style':{overflowX:'hidden',overflowY:'auto'}
		});
		inputNode.parentNode.replaceChild(this.inputNode,inputNode);
		this.inputNode.onfocus = function(){
			unieap.fep && unieap.fep(this);
		};
		dojo.style(this.inputNode.parentNode,"height","100%");
		dojo.style(this.inputNode,"height","100%");
		this.inherited(arguments);
		this.connects = [];
		if(this.height.indexOf("%")>0){
			dojo.addClass(this.domNode,"unieap-container");
		}
		else{
			var h = parseInt(this.height,10) - 2;
//			dojo.style(this.fieldNode,'height',h + "px");
			dojo.style(this.inputNode,'height',h + "px");
		}
	},
	//默认情况下,按Enter键会执行Tab操作,return false就不会了
	onEnter : function(){
		return false;
	},
	//改变容器大小
	resizeContainer : function(){
		var box = dojo.contentBox(this.domNode),h = box.h -2;
		if(h>0){
			dojo.style(this.fieldNode,'height',h + "px");
			dojo.style(this.inputNode,'height',h + "px");
		}	
	},
	startup : function(){
		dojo.require("unieap.layout.Container");
		var cp = unieap.layout.Container.prototype;
		//没有外层容器
		if(!cp.getParentContainer.apply(this,arguments)){
			cp.bindEvent4onresize.apply(this,arguments);
			this.resizeContainer();
		}
	},
	destroy:function(){
		this.inherited(arguments);
		while(this.connects.length){
			dojo.disconnect(this.connects.pop());
		}
	},
	setHeight: function(height) {
		this.inherited(arguments);
		if(height.indexOf("%")>0){
			dojo.addClass(this.domNode,"unieap-container");
			this.resizeContainer();
		}
		else{
			var h = parseInt(height,10) - 2;
//			dojo.style(this.fieldNode,'height',h + "px");
			dojo.style(this.inputNode,'height',h + "px");
		}
	}
});
}
dojo.provide("unieap.form.FileInput");
dojo.require("unieap.form.FormWidget");
dojo.declare("unieap.form.FileInput", unieap.form.FormWidget, {
	/**
	 * @declaredClass:
	 * 		unieap.form.FileInput
	 * @superClass:
	 * 		unieap.form.FormWidget
	 * @summary:
	 * 		文本上传控件,相当于HTML标签中的<input type="file" name="uploadFile" />
	 * @example:
	 * |	<div dojoType="unieap.form.FileInput" fileFilter="gif,jpg,png" name="userFile"></div>
	 * @img:
	 * 		images/form/fileinput.png	
	 */
	
	//配置属性接口
	UserInterfaces : dojo.mixin({
		label : "string",
		cancelText : "string",
		fileFilter : "string",
		fileMultiple : "string",
		onBeforeCancel : "function",
		onCancel : "function",
		onChange : "function"			
	},
	unieap.form.FormWidget.prototype.UserInterfaces),
	
	/**
	 * @summary:
	 * 		设置控件选择文件按钮的名称
	 * @type:
	 * 		{string}
	 * @default:
	 * 		"浏览"
	 */
	label: RIA_I18N.form.fileinput.browser,
	
	/**
	 * @summary:
	 * 		设置清空控件值的按钮名称
	 * @type:
	 * 		{string}
	 * @default:
	 * 		"取消"
	 */
	cancelText: RIA_I18N.form.fileinput.cancel,
	
	/**
	 * @summary:
	 * 		设置文件上传的名称,便于服务端处理。
	 * @description:
	 * 		相当于<input type="file" name="fileName" />中的name属性
	 * @type:
	 * 		{string}
	 * @default:
	 * 		"uploadFile"
	 */
	name: "uploadFile",
	
	/**
	 * @summary:
	 * 		设置只允许上传特定后缀名的文件
	 * @type:
	 * 		{string}
	 * @example:
	 * |	<div dojoType="unieap.form.FileInput" fileFilter="jpg,gif"></div>
	 * 		上述代码表明控件只接受后缀名为jpg和gif的图片文件
	 * 		
	 */
	fileFilter: "",
	/**
	 * @summary:
	 * 		设置允许上传文件个数 默认支持单个文件上传
	 * @type:
	 * 		{string}
	 * @example: fileMultiple="single"支持单个文件上传  fileMultiple="multiple"支持多个文件上传
	 * |	<div dojoType="unieap.form.FileInput" ></div>
	 *
	 */
	fileMultiple: "",
	
	templateString : 
		"<div class='u-form-file'>" + 	
			"<span class='u-form-file-btn' dojoAttachPoint='cancelNode'></span>" +
			"<span class='u-form-file-btn btn-fileBtn' dojoAttachPoint='browseNode'></span>" + 
			"<span class='u-form-file-required' dojoAttachPoint='requiredNode'>*</span>" + 
			"<div dojoAttachPoint='fieldNode' class='u-form-field' style='position:relative;'>"+
				"<div dojoAttachPoint='errorNode' class='u-form-error'></div>"+
				"<div class='u-form-file-fileField'>" +
					"<input class='u-form-textbox-input' autocomplete='off' readonly tabindex='-1' type='text' dojoAttachPoint='focusNode,inputNode' onfocus='unieap.fep&&unieap.fep(this)'/>" +
				"</div>" +
			"</div>"+
			"<div class='u-form-file-realFileField' dojoAttachPoint='realinputArea'>" +						
					"<input size='1' tabindex='-1' type='file'  dojoAttachPoint='fileInput' autocomplete='off' style='cursor:pointer;position:absolute;width:62px;left:-5px;height: 27px;'>" +
			"</div>" +	
		"</div>",
	
	postCreate : function() {
		this.inherited(arguments);
		//解决报表显示问题
		dojo.style(this.fieldNode,'height','100%');
		if(dojo.isFF){
			this.browseNode.textContent=this._processText(this.label);
			this.cancelNode.textContent=this._processText(this.cancelText);
		}else{
			this.browseNode.innerText=this._processText(this.label);
			this.cancelNode.innerText=this._processText(this.cancelText);
		}
		if(this.fileMultiple=="multiple"){
			this.fileInput.multiple = "multiple";
		}
		//由于要处理的是真正的文文件上传,清空文本输入框的name属性
		dojo.removeAttr(this.inputNode,"name");
		this.fileInput.name = this.name;
		this.inputNode.readOnly = true;
		this.fileFilter = this.fileFilter? String(this.fileFilter).toLowerCase().split(",") : "";
		
		//事件绑定
		this.connect(this.cancelNode,"onclick","_cancelClick");
		dojo.isIE&&this.connect(this.inputNode,'onkeydown',"_stopBackSpaceKey");
		
//		this._fileInputHandle=this.connect(this.fileInput,"onchange","_onChange");
		//控件隐藏时不能使用上面的方法，所以改为以下写法 CH
		var me = this;
		$(this.fileInput).change(function(evt){me._onChange(evt)});
	
	},
	
	getValue:function(){
		return this.getFullPath();
	},
	
	/**
	 * @summary:
	 * 		点击取消按钮之前触发。
	 * @description:
	 * 		如果返回为false就不执行清空文本框操作。
	 * @return:
	 * 		{boolean}
	 * @example:
	 * |	<div dojoType="unieap.form.FileInput" onBeforeCancel="fn">
	 * |	</div>
	 * |	function fn(){
	 * |		if(..)
	 * |		return false;
	 * |	}
	 */
	onBeforeCancel:function(){
		return true;
	},
	
	
	/**
	 * @summary:
	 * 		点击取消按钮时触发
	 * @param:
	 * 		{event} evt
	 */
	onCancel:function(evt){
	},
	
	/**
	 * @summary:
	 * 		重新选择文件时触发
	 */
	onChange:function(evt){
	},
	
	_stopBackSpaceKey:function(evt){
		//在IE8下，设置为文本框为readonly,但关闭依然可以置入
		//此时按住BACKSPACE键盘,页面会回退到上一页,这是ie浏览器本身的问题
		evt.keyCode==dojo.keys.BACKSPACE&&dojo.stopEvent(evt);
	},
	
	
	//当字符串的长度大于2时,剩下的字符以省略号显示
	_processText:function(str){
//		if(str.length>2){
//			str=str.substr(0,2)+"...";
//		}
		return str;
	},
	setDisabled : function(disabled){
		this.inherited(arguments);
		this.fileInput.disabled = disabled;
		this.browseNode.disabled = disabled;
		this.cancelNode.disabled = disabled;
	},
	//点击取消按钮时触发
	_cancelClick: function(evt) {
		if (unieap.fireEvent(this,this.onBeforeCancel,[])) {
			this._clearInput();
			unieap.fireEvent(this,this.onCancel,[evt]);
		}
	},
	
	/**
	 * @summary:
	 * 		清空控件的值
	 */
	clearInput: function() {
		this._clearInput();
	},
	
	//清空控件的值,在ie下需要删除fileinput再重新创建
	_clearInput:function(){
		if(dojo.isIE){
			var fileInput=dojo.clone(this.fileInput);
			this.realinputArea.innerHTML="";
			this.disconnect(this._fileInputHandle);
			dojo.place(fileInput,this.realinputArea);
			this.fileInput=fileInput;
			
//			this._fileInputHandle=this.connect(this.fileInput,"onchange","_onChange");
			//控件隐藏时不能使用上面的方法，所以改为以下写法 CH
			var me = this;
			$(this.fileInput).change(function(evt){me._onChange(evt)});

		}
		this.inputNode.value="";
		this.fileInput.value="";
		
	},
	
	//当fileInput的值发生变化时触发
	_onChange: function(evt) {
		if (this._validateSuffix()) {
			this.inputNode.value=this.getFullPath();
			unieap.fireEvent(this,this.onChange,[evt]);
			this.getValidator().validate();
		}else if(this.getFileName().toLowerCase()==""){
			return
		} else {
			this._clearInput();
			dojo.require("unieap.dialog.MessageBox");
			MessageBox.alert({
				title:RIA_I18N.form.fileinput.info,
				message:RIA_I18N.form.fileinput.fileInvalidFormer+this.fileFilter.join(',')+RIA_I18N.form.fileinput.fileInvalidLatter
			});
		}
		
	},
	
	setValue:function(value){
		(value==null||typeof(value)=="undefined")&&(value="");
		this.inputNode.value =(value!=null?value:"");
		if(dojo.isIE){
			var fileInput=dojo.clone(this.fileInput);
			this.realinputArea.innerHTML="";
			this.disconnect(this._fileInputHandle);
			dojo.place(fileInput,this.realinputArea);
			this.fileInput=fileInput;
			
//			this._fileInputHandle=this.connect(this.fileInput,"onchange","_onChange");
			//控件隐藏时不能使用上面的方法，所以改为以下写法 CH
			var me = this;
			$(this.fileInput).change(function(evt){me._onChange(evt)});

		}
		this.fileInput.value=(value!=null?value:"");
		this.fireDataChange();
	},
	
	
	
	
	//验证文件的后缀名
	_validateSuffix: function() {
		//获得文件名称
		var fileName = this.getFileName().toLowerCase();
		if (fileName) {
			//如果存在文件过滤
			if (this.fileFilter) {
				var index = fileName.lastIndexOf(".");
				//当文件路径为c:\demo\hello hello是一个没有后缀名的文件
				if(index==-1){
					return false;
				}
				//获得文件后缀名比如hello.txt后缀名为txt
				var fileSuffix = fileName.substring(index + 1);
				return dojo.some(this.fileFilter, function(type){
					return type == fileSuffix;
				});
			}
			return true;
		}
		return false;		
	},	
	
	//获得文件的名称,例如c:\demo\demo.txt,名称为demo.txt
	getFileName: function() {
		var value = this.fileInput.value;
		if (value) {
			var index = value.lastIndexOf("\\");
			var filename = value.substring(index + 1);
			return filename;
		} else {
			return "";
		}
	},
	
	/**
	 * @summary:
	 * 		获得文件的全路径,比如c:\demo\demo.txt
	 * @description:
	 * 		由于firefox安全策略的问题,在firefox下可能只能获得文件名demo.txt
	 */
	getFullPath:function(){
		if(this.fileInput.files.length> 1){
			var fname ="";
			var fileList = this.fileInput.files;
			for(var i=0;i<fileList.length;i++){
				fname+=fileList[i].name+" ";
			}
			return fname;

		}else{
		// 不显示本地路径 CH
		var fname = this.fileInput.value;
		if(fname!=null) fname=fname.replace("C:\\fakepath\\", "");
		return fname;
		}
	},
	
	//获取firefox的完整文件路径
	_getFFPath:function(fileBrowser) {
		var file=null;
	    try {
	        netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
		    var fileName=fileBrowser.value;
		    file = Components.classes["@mozilla.org/file/local;1"].createInstance(Components.interfaces.nsILocalFile);
		    file.initWithPath(fileName.replace(/\//g, "\\\\"));
	    } 
	    catch (e) {
	    }
		if(file&&file.path){
			return file.path;
		}
		return fileBrowser.value;
}
});

dojo.provide("unieap.form.TextBoxWithIcon");
dojo.require('unieap.form.TextBox');
dojo.declare("unieap.form.TextBoxWithIcon", unieap.form.TextBox,{
	/**
	 * @declaredClass:
	 * 		unieap.form.TextBoxWithIcon
	 * @summary:
	 * 		带图标的文本框。
	 * 		可以定义图标样式。
	 * @superClass：
	 * 		unieap.form.TextBox
	 * @example:
	 * |<div dojoType="unieap.form.TextBoxWithIcon" iconClass="newIcon"></div>
	 * @img:
	 * 		images/form/textboxwithicon_common.png
	 */
	
	//用户属性配置接口
	UserInterfaces : dojo.mixin({
		label: "string",
		cancelText : "string",
		fileFilter: "string",
		iconClass: "string",
		showIcon: "boolean",
		onBeforeIconClick: "function",
		onIconClick: "function",
		onBeforeCancel: "function",
		onCancel: "function",
		onChange: "function",
		popup: "object"
	},
	unieap.form.TextBox.prototype.UserInterfaces), 
	
	templateString :
		"<div class=\"u-form-widget\">"+
			"<div dojoAttachPoint='requiredNode' class='u-form-required'>*</div>" + 
			"<div dojoAttachPoint=\"fieldNode\" class=\"u-form-field\">"+
				"<div dojoAttachPoint=\"modifiedNode\" class=\"u-form-modified\"></div>"+
				"<a href='javascript:void(0);' tabindex='-1' class=\"u-form-textbox-icon u-form-textbox-icon-normal u-a-common\" dojoAttachPoint=\"iconNode\"></a>"+
				"<div dojoAttachPoint=\"errorNode\" class=\"u-form-error\"></div>"+
				"<div class=\"u-form-textbox-field\">" +
					"<input dojoAttachPoint=\"inputNode,focusNode,textbox\" class=\"u-form-textbox-input\" autocomplete=\"off\" onfocus=\"unieap.fep&&unieap.fep(this)\">"+
				"</div>" + 	
			"</div>" + 	
		"</div>",
	
	/**
	 * @summary:
	 * 		设置控件是否显示右侧图标。
	 * @type:
	 * 		{boolean}
	 * @default:
	 * 		true
	 */
	showIcon:true,
	
	
	/**
	 * @summary:
	 * 		通过改变css样式来设置控件右侧的图标
	 * @type:
	 * 		{string}
	 * @example:
	 * |<style type="text/css">
	 * |	.newIcon{
	 * |		border-left: 1px solid #7f9db9; 
	 * |		width: 16px; 
	 * |		height: 19px; 
	 * |		float: right; 
	 * |		overflow:hidden;
	 * |		background:url("../images/find.gif") no-repeat;
	 * |	}
	 * |</style>
	 * |<div dojoType="unieap.form.TextBoxWithIcon" iconClass="newIcon"></div>
	 * @img:
	 * 		images/form/textboxwithicon.png
	 */
	iconClass:"u-form-textbox-icon",
	
	/**
	 * @type：
	 * 		{object}
	 * @summary:
	 * 		设置弹出控件控制器
	 * @see：
	 * 		unieap.form.Popup
	 */
	popup:null,
	
    /**
	 * @type：
	 * 		{boolean}
	 * @summary:
	 * 		设置当点击图标的时候，是否将光标转移到其他控件，默认为false，即不进行转移
	 * @default:
	 * 		false
	 */
	focusShift:false,
	
	popupClass:"unieap.form.Popup",
	
	_infield: false,

	/**
	 * @summary:
	 * 		点击图前回调事件
	 * @param：
	 * 		{event} evt
	 */
	onBeforeIconClick:function(evt){
		return true
	},
	
	/**
	 * @summary:
	 * 		点击图标触发的事件
	 * @param：
	 * 		{event} evt
	 */
	onIconClick:function(evt){},
	
	/**
	 * @summary:
	 * 		重新设置TextBoxWithIcon控件右侧的图标的样式
	 * @param:
	 * 		{string} className
	 * @example:
	 * |<style type="text/css">
	 * |	.newIcon{
	 * |		border-left: 1px solid #7f9db9; 
	 * |		width: 16px; 
	 * |		height: 19px; 
	 * |		float: right; 
	 * |		overflow:hidden;
	 * |		background:url("../images/find.gif") no-repeat;
	 * |	}
	 * |</style>
	 * |<script type="text/javascript">
	 * |	var box = unieap.byId('box');
	 * |	box.setIconClass('newIcon');
	 * |</sript>
	 * |<div id="box" dojoType="unieap.form.TextBoxWithIcon"></div>
	 * |
	 */
	setIconClass:function(className){
		if(!this.iconNode) return;
		dojo.removeClass(this.iconNode,this.iconClass);
		dojo.addClass(this.iconNode,className);
		this.iconClass=className;
	},
	
	/**
	 * @summary:
	 * 		重新设置TextBoxWithIcon控件右侧的图标的是否显示
	 * @param:
	 * 		{boolean} show
	 * @example:
	 * |<script type="text/javascript">
	 * |var show=false;
	 * |	function showIcon(){
	 * |		dijit.byId("text1").changeIconState(show);
	 * |		show=!show
	 * |	}
	 * |</sript>
	 * |<div id="text1" dojoType="unieap.form.TextBoxWithIcon"></div>
	 * |<div dojoType="unieap.form.Button" onClick="showIcon" label="改变图标显示"></div>
	 * |
	 */
	changeIconState: function(show){
		if(!show){
			dojo.style(this.iconNode,"display","none");
		} else {
			dojo.style(this.iconNode,"display","block");
		}
	},
	
	postCreate:function(){
		this.inherited(arguments);
		if(this.iconClass){
			dojo.addClass(this.iconNode,this.iconClass);
		}
		this.connect(document.body, "onclick", "_onBodyClick");
		if(dojo.isFF){
			this.connect(document.body, "DOMMouseScroll", "_onBodyClick");
		}else{
			this.connect(document.body, "onmousewheel", "_onBodyClick");
		}
		this.connect(this.fieldNode, "onmousedown", "_mouseDownInFiled");

		this.connect(this.iconNode, "onclick", "_onIconClick");
		this.connect(this.iconNode, "onblur", "_onIconBlur");
		!this.showIcon&&dojo.style(this.iconNode,"display","none");
	},
	//对下拉按钮增加禁用样式
	setDisabled: function() {
		this.inherited(arguments);
		if(this.disabled){
			dojo.removeClass(this.iconNode,'u-form-textbox-icon-normal');
			dojo.addClass(this.iconNode,'u-form-textbox-icon-disabled');
		}else{
			dojo.removeClass(this.iconNode,'u-form-textbox-icon-disabled');
			dojo.addClass(this.iconNode,'u-form-textbox-icon-normal');
		}
	},
	
	/**
	 * @summary:
	 * 		得到下拉框的下拉控制器
	 * @return：
	 * 		{unieap.form.Popup}
	 * @see：
	 * 		unieap.form.Popup
	 */
	getPopup: function(){
		return unieap.getModuleInstance(this,"popup",this.popupClass);
	},
	
	
	/////////////////////////////////////  内部事件  ////////////////////////////////////////////////
	destroy: function() {
		if(this.popup&&this.popup.destroy){
			this.popup.destroy();
		}
		this.inherited(arguments);
	},
	
	_mouseDownInFiled: function() {
		this._infield = true;
	},
	
	_onIconClick: function(evt) {
		
		if(!(this.readOnly&&unieap.global.textboxwithicon_notReadonlyPopup)&&!this.disabled&& unieap.fireEvent(this,this.onBeforeIconClick,[evt])) {
			unieap.fireEvent(this,this.onIconClick,[evt])
			var popup=this.getPopup();
			if(popup._isShowingNow){
				popup.close()
			}else{
				popup.open()
			}
		}
		dojo.byId("unieap_for_focus") && dojo.byId("unieap_for_focus").focus();
		//@JiaX 双日历背景遮罩
		// if(!$("#shadeDiv").length){
		// 	$("body").prepend("<div id='shadeDiv' style='width:100%;height:100%;position:fixed;z-index:9999;background-color: #fff;opacity: 0;'></div>");
		// 	$("#shadeDiv").click(function(){
		// 		$(".u-form-field",this.domNode).removeClass("border_bstyle");
		// 		if(popup){
		// 			popup.close();
		// 		}
		// 		$("#shadeDiv").remove();
	 	// 	})
		// }
		// 防止多次点击 chenH
//		if(!unieap.textBoxWithIconIconClickDate){
//			unieap.textBoxWithIconIconClickDate = 0;
//		}
//    	var iconClickDate = new Date().getTime();
//		if(iconClickDate - unieap.textBoxWithIconIconClickDate > 1000){
//			unieap.textBoxWithIconIconClickDate = iconClickDate;
//			if(!(this.readOnly&&unieap.global.textboxwithicon_notReadonlyPopup)&&!this.disabled&& unieap.fireEvent(this,this.onBeforeIconClick,[evt])) {
//				unieap.fireEvent(this,this.onIconClick,[evt])
//				var popup=this.getPopup();
//				if(popup._isShowingNow){
//					popup.close()
//				}else{
//					popup.open()
//				}
//			}
//			dojo.byId("unieap_for_focus") && dojo.byId("unieap_for_focus").focus();
//		}else{
//			console.log("你点多了")
//			return;
//		}
		
	},
	
	// 抽出这个api 是为了方便定制，用户可以重载这个方法
	// 请不要随便修改这个方法 chenxujie
	_canPopOpen: function() {
		return true;
	},
	
	_onIconBlur: function(evt) {
		if (this._interestInBlur(evt))
			this._onBlur(evt);
	},

	_onBlur: function(evt,flag) {
		if (this._interestInBlur(evt)) {
			this._onBeforeBlur&&this._onBeforeBlur();
            //2019.4.28  sxf 判断chrome走关闭事件
            if(dojo.isWebKit || dojo.isFF){
                this.getPopup().close();
            }else {
            }
			this.inherited("_onBlur",arguments); 
		}else if(arguments.length > 1 && !this._infield){
			this.inherited("_onBlur",arguments); 
		}
		this._infield = false;
	},
	_onBodyClick: function(evt) {
		if($("#shadeDiv").length){
			$("#shadeDiv").remove();	
		}
		if(unieap.isClassEntity(this.popup)&&this.getPopup()._isShowingNow){
			var t = evt.target;
			if (dojo.isDescendant(t,this.domNode)||dojo.isDescendant(t,this.getPopup().domNode)) {
				return;
			}else {
				this.getPopup().close();
				if (dojo.isSafari || dojo.isChrome) {
					this.inherited("_onBlur",arguments);
				}
			}
		}
		this._infield = false;
	},	
	//触发tab键
	_onTab: function(evt) {
		this.getPopup().close();
		this.inherited("_onTab",arguments);
		this._infield = false;
	},
	
	// 判断是否应该执行_onBlur
	_interestInBlur: function(evt) {
		if (!evt||typeof(evt)=="string")
			return false;
		var at = null;
		if (dojo.isIE) {
			at = document.activeElement;
		} else if (dojo.isFF) {
			at = evt.explicitOriginalTarget;
		} else if (dojo.isChrome){//U_EAP00027945
			at = evt.relatedTarget;
		} else if (this._infield) {
			at = this.iconNode;
		}
		if (at == this.iconNode) {
			return false;
		}
		//U_EAP00028621
		if(dojo.isWebKit && this.declaredClass == "unieap.form.ComboBoxTree"){
			var current = evt.currentTarget;
			(at == null) && ( at = current );
		}
		if(dojo.isDescendant(at,this.domNode)
			|| (this.getPopup() && dojo.isDescendant(at,this.getPopup().domNode))) {
			//FF下日期控件不执行onBlur会赋值不上
			if(!dojo.isIE && this.declaredClass == "unieap.form.DateTextBox"&&!this.dateYM) 
				{return true;}
			//U_EAP00027945
//			var relation = evt.relatedTarget;
//			if(dojo.isChrome && evt.type == 'blur' 
//				&& relation && !dojo.isDescendant(relation,this.domNode)){
//				return true;
//			}
			return false;
		}
		return true;
	}

});
dojo.provide("unieap.form.Popup");
dojo.require("dojo.fx");
dojo.declare("unieap.form.Popup", [dijit._Widget, dijit._Templated], {
	/**
	 * @declaredClass:
	 * 		unieap.form.Popup
	 * @summary:
	 * 		TextBoxWithIcon的弹出框的接口
	 */
	
	//注意这里的tabindex,如果不设置它,通过document.activeElement就无法获得到
	templateString: "<div  class='u-popupcontainer' dojoAttachPoint='popupcontainer,containerNode' ></div>",
	
	/**
	 * @summary:
	 * 		指定下拉框的高度
	 * @type：
	 * 		{number}
	 * @default:
	 * 		0
	 */
	height: 0,
	
	
	/**
	 * @summary:
	 * 		指定下拉框的宽度
	 * @type：
	 * 		{number}
	 * @default:
	 * 		-1
	 */
	width: 0,
	
	isOpen:function(){
		return this._isShowingNow;
	},
	
	/**
	 * @summary:
	 * 		是否启用动画效果
	 * @type:
	 * 		{boolean}
	 * @default:
	 * 		true
	 */
	animate:(typeof(unieap.animate) == 'undefined')?true:unieap.animate,
	
	/**
     * @summary:
     * 		指定展开关闭下拉框的持续时间
     * @description:
     * 		animate为false时无效
     * @type：
     * 		{number}
     * @default：
     * 		300
     */
    duration: 300,
	
	_isShowingNow:false,
	
	//是否需要点击domNode时focus到TextBoxWithIcon控件的输入域
	_needFocus:function(){
		return true;
	},
	
	postCreate: function(){
		if (!dojo.byId('dijit-popupBody')) {
			var node = dojo.create('div',null,dojo.body(),'first');
			node.id = "dijit-popupBody";
		}
		if (!dojo.byId('_backgroundIframe')) {
			this._iframe=dojo.create('iframe',null,dojo.byId('dijit-popupBody'));
			this._iframe.frameBorder="no";
			this._iframe.id='_backgroundIframe';
			dojo.addClass(this._iframe,'u-backgroundIframe');
		}else{
			this._iframe=dojo.byId('_backgroundIframe');
		}
		//dijit.placeOnScreenAroundElement(this.popupcontainer,this.widget.domNode,{TL:'BL',TR:'BR'});
		dojo.style(this.domNode,'display','none');
		
		dojo.place(this.domNode,dojo.byId('dijit-popupBody'));
		this._needFocus()&&this.connect(this.domNode,'onclick',function(){
			dijit.focus(this.widget.inputNode);
		});
		
		//默认情况下,在firefox下div是不可以置入焦点的
		//给div设置tabindex为0就可以置入焦点
		dojo.isFF&&dojo.attr(this.domNode,'tabindex',"0");

		
	},
	

	
	/**
	 * @summary:
	 * 		打开弹出框
	 * @example:
	 * |var city = unieap.byId('city');
	 * |city.getPopup().open();
	 * 如果下拉框处于关闭状态，则打开下拉框
	 * 
	 */
	open: function(width, height){
		if(this.animation&&this.animation.status() == "playing"){
			this.animation.stop();
		}
		this._isShowingNow = true;
		this._resetWidgetHW();
		this._resetWidgetTL(width || this.width, height || this.height);
		dojo.style(this.domNode, 'overflow', 'hidden');
		dojo.style(this.domNode, 'display', 'block');
		if(this.animate){
			var node=this.domNode;
			var height=node.offsetHeight;
			var _height=node.style.height;
			this.animation=dojo.animateProperty({
				node: node,
				duration: this.duration,
				onBegin:dojo.hitch(this,function(){
					this.onAnimateBegin();
				}),
				properties: {
					height: {start: '0', end: height , unit:"px"}
				},
				onEnd:dojo.hitch(this,function(){
					this.domNode.style.height=_height
					this.onAnimateEnd();
				})
			});
			this.animation.play();
		}else{
			dojo.isIE&&this._adjustIframePosition();
			if (!this.widget.focusShift) {
				dijit.focus(this.widget.inputNode);
			}
		}
		if(unieap.form.Popup.popwidget){
			var id=unieap.form.Popup.popwidget,popwidget;
			if(id!=this.widget.id){
				popwidget=dijit.byId(id);
				popwidget&&popwidget.getPopup().close();
			}
		}
		unieap.form.Popup.popwidget=this.widget.id;
	},
	
	onAnimateBegin:function(){
		dojo.style(this.domNode, 'height', '1px');
	},
	onAnimateEnd:function(){
		dojo.isIE&&this._adjustIframePosition();
	    if (!this.widget.focusShift) {
		   dijit.focus(this.widget.inputNode);
	    }
	},
	
	/*
	 * 计算容器的top与left属性
	 */
	_resetWidgetTL: function(){
		var widget = this.widget;
		dijit.placeOnScreenAroundElement(this.popupcontainer,widget.domNode,{BL:'TL', BR:'TR',TL:'BL',TR:'BR'});
//		var box = dojo.coords(widget.domNode, true);
//		var box_noscroll = dojo.coords(widget.domNode);
//		var body = dojo.coords(document.body, true);
//		var body_noscroll = dojo.coords(document.body);
//		var dropwidth = dojo.style(this.widget.domNode, "width");
//		if ((box.x + dropwidth) > document.body.clientWidth) {
//			dojo.style(this.popupcontainer, "left", ((box.x + box.w - dropwidth) + "px"));
//		}
//		else {
//			dojo.style(this.popupcontainer, "left", (box.x + "px"));
//		}
//		dojo.style(this.popupcontainer, "top", (box.y + box.h - 1) + "px");
	},
	
	 // 计算容器的height与width属性	 
	_resetWidgetHW: function(width, height){
		if((this.width>0) || ((dojo.style(this.widget.domNode, 'width')-8)>0)){
			dojo.style(this.popupcontainer, 'width', this.width || (dojo.style(this.widget.domNode, 'width')-8) + 'px');
		}
//		dojo.style(this.popupcontainer, 'width', this.width || (dojo.style(this.widget.domNode, 'width')-8) + 'px');
		dojo.style(this.popupcontainer, 'height', this.height);
	},
	

	 //调整iframe蒙层位置,放在popupcontainer下
	_adjustIframePosition: function(){
		dojo.style(this._iframe,{
			width:dojo.style(this.popupcontainer,'width'),
			height:dojo.style(this.popupcontainer,'height'),
			top:dojo.style(this.popupcontainer,'top'),
			left:dojo.style(this.popupcontainer,'left')
		})
	},
	
	/**
	 * @summary:
	 * 		关闭弹出框
	 * @example:
	 * |var city = unieap.byId('city');
	 * |city.getPopup().close();
	 * 如果下拉框处于下拉状态，则关闭下拉框
	 */
	close: function(){
		if(this.animation&&this.animation.status() == "playing"){
			this.animation.stop();
		}
		if (this._isShowingNow) {
			this._isShowingNow = false;
			dojo.style(this.popupcontainer, "display", "none");
			var iframe = this._iframe;
			if (iframe) {
				iframe.style.width = "0px";
				iframe.style.height = "0px";
			}
            if($(this.domNode).hasClass("u-combobox-list") || this._calendar){
                if($("#shadeDiv").length){
                    $("#shadeDiv").remove();
                }
            }

            if($(this.popupcontainer).is('.start-date-popup') != true) return;
			if($(this.domNode).children(".calendar")&& $("#shadeDiv").length>0){
                $("#shadeDiv").remove();
			}
		}
	},
	
	
	/*
	 * @summary:
	 * 		在弹出框中增加节点
	 * @param：
	 * 		{DomNode} node
	 */
	appendNode: function(node){
		this.popupcontainer.appendChild(node);
	},
	
	clearNode: function(node){
		var container = this.popupcontainer;
		if(container==null) return;
		for (var i = container.childNodes.length - 1; i >= 0; i--) {
			container.removeChild(container.childNodes[i]);
		}
	},
	
	destroy : function(){
		if(this._iframe){
			    this._iframe.onreadystatechange = this._iframe.onload = null;
				//没有必要，这个iframe里面根本也没有内容
				//如果在通过href嵌套在ContentPane中反而会出现拒绝访问的问题
			    //this._iframe.contentWindow.document.write("");
				this._iframe.src = "javascript:false";
				this._iframe = null;
				delete this._iframe;
		}
		this.inherited(arguments);
	} 
	
});



if (!dojo._hasResource["unieap.form.DateDisplayFormatter"]) {
    dojo._hasResource["unieap.form.DateDisplayFormatter"] = true;
    dojo.provide("unieap.form.DateDisplayFormatter");
    dojo.require("unieap.util.util")
    dojo.require("unieap.form.SimpleFormatter");
    
    dojo.declare("unieap.form.DateDisplayFormatter", unieap.form.SimpleFormatter, {
       /**
        * @summary:
        * 		格式化显示日期
        * @declaredClass：
        * 		unieap.form.DateDisplayFormatter
     	* @superClass:
     	* 		unieap.form.SimpleFormatter 
        */
	   
	   /**
	    * @summary:
	    * 		显示格式
	    * @type：
	    * 		{string}
	    * @default:
	    * 		"yyyy-MM-dd"
	    * @example:
	    * |	<div dojoType="unieap.form.DateTextBox" displayFormatter="{dataFormat:${1}'yyyy/MM/dd'}">
	    * |	</div>
	    *	${1}日期的显示格式为'yyyy/MM/dd'
	    */
	   dataFormat:RIA_I18N.form.dateTextBox.dataFormat,
	   
	    /**
         * @summary
         * 		格式转换，从Date的long格式化成显示值
         * @param {number} value
         * @return {string}
         */
        format: function(value){
			if(!value){
				return value;
            }
            //防止1940年以后冬令时和夏令时前端计算出来的结果相差一天
			 var is360 = unieap.mime("type", "application/vnd.chromium.remoting-viewer");
            if (unieap.isChrome() && is360) {
            	if((value>515520000000 && value<527011200000) ||
            	   (value>545155200000 && value<558460800000) ||
            	   (value>576604800000 && value<589910400000) ||
            	   (value>608659200000 && value<621964800000) ||
            	   (value>640108800000 && value<653414400000) ||
            	   (value>671558400000 && value<684864000000))  value = value + 1000*60*60;
            }
			
            var date = new Date(Number(value));
            return unieap.dateFormat(date.getTime(), this.getFormat());
        },
        /**
         * @summary
         * 		从显示值转换成Date的long值
         * @param {string} value
         * @return {number}
         */
        parse: function(value){
			if(!value){
				return value;
			}
            return unieap.dateParser(value, this.getFormat()).getTime();
        },
        
        /**
         * @summary
         *		修改日期控件format格式
         * @param:
         *		{String} dataFormat
         *  @example:
	     * |	<div dojoType="unieap.form.DateTextBox" id="date" displayFormatter="{dataFormat:yyyy/MM/dd'}">
	     * |	</div>
	     * |	unieap.byId("date").getDisplayFormatter().setFormat("yyyy-MM-dd");
	     * 将日期显示格式由yyyy/MM/dd转换为yyyy-MM-dd
         */
        setFormat: function(dataFormat){
			this.dataFormat = dataFormat;
			if (this.widget && (typeof this.widget.updateDisplayText=="function"))
				this.widget.updateDisplayText();
		}
    });
}
if (!dojo._hasResource["unieap.form.DateYMDisplayFormatter"]) {
    dojo._hasResource["unieap.form.DateYMDisplayFormatter"] = true;
    dojo.provide("unieap.form.DateYMDisplayFormatter");
    dojo.require("unieap.util.util")
    dojo.require("unieap.form.SimpleFormatter");
    
    dojo.declare("unieap.form.DateYMDisplayFormatter", unieap.form.SimpleFormatter, {
       /**
	    * @summary:
	    * 		显示格式
	    * @type：
	    * 		{string}
	    * @default:
	    * 		"yyyy-MM-dd"
	    * @example:
	    * |	<div dojoType="unieap.form.DateTextBox" displayFormatter="{dataFormat:${1}'yyyy/MM/dd'}">
	    * |	</div>
	    *	${1}日期的显示格式为'yyyy/MM/dd'
	    */
	   dataFormat:"yyyy-MM",
	   
	    /**
         * @summary
         * 		格式转换，从Date的long格式化成显示值
         * @param {number} value
         * @return {string}
         */
        format: function(value){
			if(!value){
				return value;
			}
            var date = new Date(Number(value));           
            return unieap.dateFormat(date.getTime(), this.getFormat());
        },
        /**
         * @summary
         * 		从显示值转换成Date的long值
         * @param {string} value
         * @return {number}
         */
        parse: function(value){
			if(!value){
				return value;
			}
            return unieap.dateParser(value, this.getFormat()).getTime();
        },
        
        /**
         * @summary
         *		修改日期控件format格式
         * @param:
         *		{String} dataFormat
         *  @example:
	     * |	<div dojoType="unieap.form.DateTextBox" id="date" displayFormatter="{dataFormat:yyyy/MM/dd'}">
	     * |	</div>
	     * |	unieap.byId("date").getDisplayFormatter().setFormat("yyyy-MM-dd");
	     * 将日期显示格式由yyyy/MM/dd转换为yyyy-MM-dd
         */
        setFormat: function(dataFormat){
			this.dataFormat = dataFormat;
			if (this.widget && (typeof this.widget.updateDisplayText=="function"))
				this.widget.updateDisplayText();
		}
    });
}
if (!dojo._hasResource["unieap.form.DateValueFormatter"]) {
	dojo._hasResource["unieap.form.DateValueFormatter"] = true;
	dojo.provide("unieap.form.DateValueFormatter");
	dojo.require("unieap.form.SimpleFormatter");
	dojo.require("unieap.util.util")
	dojo.declare("unieap.form.DateValueFormatter", unieap.form.SimpleFormatter, {
	   /**
        * @summary:
        * 		日期实际值的格式化
        * @declaredClass：
        * 		unieap.form.DateValueFormatter
     	* @superClass:
     	* 		unieap.form.SimpleFormatter 
        */
		
		/**
		 * @summary:
		 * 		日期值格式化
		 */
		dataFormat:"",
		/**
		 * @summary
		 * 		格式转换，从字符串转换成Date的long型数据
		 * @param {string} value
		 * @return {number}
		 */
		format: function(value){
			if(!this.dataFormat||!value){
				return value;
			}
			return unieap.dateParser(value, this.getFormat()).getTime();
		},
		/**
		 * @summary
		 * 		从Date的long型转换成字符串
		 * @param {number} value
		 * @return {string}
		 */
		parse: function(value){
			if(!this.dataFormat||!value){
				return value;
			}
			var date = new Date(value);
			return unieap.dateFormat(date.getTime(), this.getFormat());
		}
	});
}

if (!dojo._hasResource["unieap.form.DateValidator"]) {
	dojo._hasResource["unieap.form.DateValidator"] = true;
	dojo.provide("unieap.form.DateValidator");
	dojo.require("unieap.form.TextBoxValidator");
	dojo.declare("unieap.form.DateValidator", unieap.form.TextBoxValidator, {
	   /**
        * @summary:
        * 		日期校验器
        * @declaredClass：
        * 		unieap.form.DateValidator
     	* @superClass:
     	* 		unieap.form.FormWidgetValidator 
        */
		
		
		/**
		 * @summary:
		 * 		关联另一个日期框
		 * @description:
		 * 		当前日期必须晚于指定的日期框
		 */
		preDate:"",
		
		/**
		 * @summary
		 * 		日期校验
		 * */
		validate: function(){
			var bool=this.inherited(arguments);
			if(!bool) return false;
			if(this.nextDate){
				this._processValidate(this.nextDate,'next')
			}
			
			if (this.preDate) {
				this._processValidate(this.preDate,'pre')
			}
			
			var binding=this.widget.getBinding();
			if(binding&&binding.getRow()){
				var meta=binding.getMetaData(),
					currentTime=this._getLongValue(this.widget),
					past=meta&&meta.getPast(),
					future=meta&&meta.getFuture(),
					msg;
				if(meta){
					if(past&&this.compareTime(past,currentTime)){
						msg=this.getPastMsg(meta);
						msg&&(this.setErrorMsg(msg));
						return false;
					}else if(future&&this.compareTime(currentTime,future)){
						msg=this.getFutureMsg(meta);
						msg&&(this.setErrorMsg(msg));
						return false;
					}else{
						return true;
					}
				}else{
					return true;
				}
			}
			return true;
		},
		
		
		//TODO:
		//	其实可以直接进行日期比较,不应该进行format
		//	DateTextBox bug,需要修正
		compareTime:function(date1,date2){
			return date1<date2;
		},
		
		
		//获得时间过大校验信息
		getFutureMsg:function(meta){
			var msg=this.prompts['future']||(meta&&meta.getPrompt("future"));
			return msg;
			
		},
		
		//获得时间过小校验信息
		getPastMsg:function(meta){
			var msg=this.prompts['past']||(meta&&meta.getPrompt("past"));
			return msg;
		},
		
		//处理校验逻辑
		_processValidate:function(id,str){
			var viewContext = unieap.Action.getViewContext(this.widget) || "", viewContextID="";
			viewContext&&(viewContextID = viewContext.rootNode.id);
			var box = (unieap.byId(viewContextID+id)==undefined)?unieap.byId(id):unieap.byId(viewContextID+id);
			if (!box.getValue()||box == undefined) {
				return ;
			}
			switch(str){
				case 'pre':
					bool = this._compareResult(box, this.widget);
					break;
				case 'next':
					bool = this._compareResult(this.widget, box);
					break;
			}
			if(!bool){
				this.widget.setValue(box.getValue());
			}
			
		},
		
		
		//比较两个日期的long值
		_compareResult:function(startDate,endDate){
			var startValue=this._getLongValue(startDate);
			var endValue=this._getLongValue(endDate);
			return startValue<=endValue;
		},
		
		//将日期的文本值转换为long
		_getLongValue:function(box){
			return box.getDisplayFormatter().parse(box.getText());
		}
	});
}
dojo.provide("unieap.form.UrlDataValueFormatter");
dojo.require("unieap.util.util");
dojo.require("unieap.form.SimpleFormatter");
dojo.declare("unieap.form.UrlDataValueFormatter", unieap.form.SimpleFormatter, {

    constructor: function (params) {
        this.doUrl();
    },
    //因为view的名字会自动变，这里加了个追随 zhaohf
    doUrl: function () {
        //判断是否是有view名的
        if (this.targetUrl.indexOf("javascript:") != -1 && this.targetUrl.indexOf(".") != -1) {
            var viewName1 = this.targetUrl.substring(11, this.targetUrl.indexOf("."));//取出原始传入的view名
            var viewName = viewName1;//赋值给要进行检查的变量
            var i = 1;
            if (!window[viewName]) {//如果view对象不存在，则进行下面的处理
                while (!window[viewName]) {
                    var vs = viewName.split("_");
                    if (vs.length > 1) {
                        var last = vs[vs.length - 1];
                        if (/\d+/.test(last)) {
                            last = last * 1 + 1;
                            viewName = viewName.substring(0, viewName.lastIndexOf("_") + 1) + last;
                        }
                    } else {
                        viewName += "_1";
                    }
                    if (i++ > 50) {//防死循环卡死
                        console.log("超出检查次数限制，没有找到可对应的对象:" + viewName1);
                        break;
                    }
                }
                this.targetUrl = this.replaceAll(this.targetUrl, viewName1, viewName);
            }
        }
    },
    /**
     * 字符串全部替换的功能
     */
    replaceAll: function (str, from, to) {
        var start = 0;
        var last = 0;
        while ((last = str.indexOf(from, start)) != -1) {
            str = str.substring(0, last) + str.substring(last).replace(from, to);
            start = last + to.length;
        }
        return str;
    },
    /**
     * @summary:
     *        日期实际值的格式化
     * @declaredClass：
     *        unieap.form.DateValueFormatter
     * @superClass:
     *        unieap.form.SimpleFormatter
     */

    /**
     * @summary:
     *        Url地址
     */
    targetUrl: "",
    isBlank: "",
    /**
     * @summary
     *        格式转换，从字符串转换成Date的long型数据
     * @param {string} value
     * @return {number}
     */
    format: function (value) {
        if (!value) {
            return value;
        }
        var returnUrl = "<a  href=\"";
        if (this.targetUrl) {
            returnUrl += this.targetUrl;
            if (this.targetUrl.indexOf("javascript:") != -1 && this.targetUrl.indexOf("(") == -1 && this.targetUrl.indexOf(")") == -1)
                returnUrl += "(\'" + value + "\')";
            returnUrl += "\"";
        } else
            returnUrl += value + "\"";
        if (this.isBlank == 1)
            returnUrl += " target='_blank'";
        returnUrl += ">" + value + "</a>";
        if (returnUrl.indexOf('inRowIndex') != -1) {
            returnUrl = returnUrl.replace('inRowIndex', arguments[1]);
        }
        if (returnUrl.indexOf('inRowValue') != -1) {
            returnUrl = returnUrl.replace('inRowValue', value);
        }
        return returnUrl;
    }
});


/*  Copyright Mihai Bazon, 2002-2005  |  www.bazon.net/mishoo
 * -----------------------------------------------------------
 *
 * The DHTML Calendar, version 1.0 "It is happening again"
 *
 * Details and latest version at:
 * www.dynarch.com/projects/calendar
 *
 * This script is developed by Dynarch.com.  Visit us at www.dynarch.com.
 *
 * This script is distributed under the GNU Lesser General Public License.
 * Read the entire license text here: http://www.gnu.org/licenses/lgpl.html
 */

// $Id: calendar.js,v 1.2 2008/02/19 07:13:41 yangzz Exp $
if(!dojo._hasResource["unieap.form.calendar"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["unieap.form.calendar"] = true;
dojo.provide("unieap.form.calendar");

/** The Calendar object constructor. */
Calendar = function (firstDayOfWeek, dateStr, onSelected, onClose) {
	// member variables
	this.activeDiv = null;
	this.currentDateEl = null;
	this.getDateStatus = null;
	this.getDateToolTip = null;
	this.getDateText = null;
	this.timeout = null;
	this.onSelected = onSelected || null;
	this.onClose = onClose || null;
	this.dragging = false;
	this.hidden = false;
	this.minYear = 1970;
	this.maxYear = 2099;
	this.dateFormat = Calendar._TT["DEF_DATE_FORMAT"];
	this.ttDateFormat = Calendar._TT["TT_DATE_FORMAT"];
	this.isPopup = true;
	this.weekNumbers = false;//默认改成不显示周/年 zhaohf
	this.firstDayOfWeek = typeof firstDayOfWeek == "number" ? firstDayOfWeek : Calendar._FD; // 0 for Sunday, 1 for Monday, etc.
	this.showsOtherMonths = false;
	this.dateStr = dateStr;
	this.ar_days = null;
	this.showsTime = false;
	this.time24 = true;
	this.yearStep = 2;
	this.hiliteToday = true;
	this.multiple = null;
	// HTML elements
	this.table = null;
	this.element = null;
	this.tbody = null;
	this.firstdayname = null;
	// Combo boxes
	this.monthsCombo = null;
	this.yearsCombo = null;
	this.checkYear=null;
	this.hilitedMonth = null;
	this.activeMonth = null;
	this.hilitedYear = null;
	this.activeYear = null;
	// Information
	this.dateClicked = false;

	// one-time initializations
	if (typeof Calendar._SDN == "undefined") {
		// table of short day names
		if (typeof Calendar._SDN_len == "undefined")
			Calendar._SDN_len = 3;
		var ar = new Array();
		for (var i = 8; i > 0;) {
			ar[--i] = Calendar._DN[i].substr(0, Calendar._SDN_len);
		}
		Calendar._SDN = ar;
		// table of short month names
		if (typeof Calendar._SMN_len == "undefined")
			Calendar._SMN_len = 3;
		ar = new Array();
		for (var i = 12; i > 0;) {
			ar[--i] = Calendar._MN[i].substr(0, Calendar._SMN_len);
		}
		Calendar._SMN = ar;
	}
};

// ** constants

/// "static", needed for event handlers.
Calendar._C = null;

/// detect a special case of "web browser"
Calendar.is_ie = ( /msie/i.test(navigator.userAgent) &&
		   !/opera/i.test(navigator.userAgent) );

Calendar.is_ie5 = ( Calendar.is_ie && /msie 5\.0/i.test(navigator.userAgent) );

/// detect Opera browser
Calendar.is_opera = /opera/i.test(navigator.userAgent);

/// detect KHTML-based browsers
Calendar.is_khtml = /Konqueror|Safari|KHTML/i.test(navigator.userAgent);

// BEGIN: UTILITY FUNCTIONS; beware that these might be moved into a separate
//        library, at some point.

Calendar.getAbsolutePos = function(el) {
	var SL = 0, ST = 0;
	var is_div = /^div$/i.test(el.tagName);
	if (is_div && el.scrollLeft)
		SL = el.scrollLeft;
	if (is_div && el.scrollTop)
		ST = el.scrollTop;
	var r = { x: el.offsetLeft - SL, y: el.offsetTop - ST };
	if (el.offsetParent) {
		var tmp = this.getAbsolutePos(el.offsetParent);
		r.x += tmp.x;
		r.y += tmp.y;
	}
	return r;
};

Calendar.isRelated = function (el, evt) {
	var related = evt.relatedTarget;
	if (!related) {
		var type = evt.type;
		if (type == "mouseover") {
			related = evt.fromElement;
		} else if (type == "mouseout") {
			related = evt.toElement;
		}
	}
	while (related) {
		if (related == el) {
			return true;
		}
		related = related.parentNode;
	}
	return false;
};

Calendar.removeClass = function(el, className) {
	if (!(el && el.className)) {
		return;
	}
	var cls = el.className.split(" ");
	var ar = new Array();
	for (var i = cls.length; i > 0;) {
		if (cls[--i] != className) {
			ar[ar.length] = cls[i];
		}
	}
	el.className = ar.join(" ");
};

Calendar.addClass = function(el, className) {
	Calendar.removeClass(el, className);
	el.className += " " + className;
};

// FIXME: the following 2 functions totally suck, are useless and should be replaced immediately.
Calendar.getElement = function(ev) {
	var f = Calendar.is_ie ? window.event.srcElement : ev.currentTarget;
	while (f.nodeType != 1 || /^div$/i.test(f.tagName))
		f = f.parentNode;
	return f;
};

Calendar.getTargetElement = function(ev) {
	var f = Calendar.is_ie ? window.event.srcElement : ev.target;
	while (f.nodeType != 1)
		f = f.parentNode;
	return f;
};

Calendar.stopEvent = function(ev) {
	ev || (ev = window.event);
	if (Calendar.is_ie) {
		ev.cancelBubble = true;
		ev.returnValue = false;
	} else {
		ev.preventDefault();
		ev.stopPropagation();
	}
	return false;
};

Calendar.addEvent = function(el, evname, func) {
	if (el.attachEvent) { // IE
		el.attachEvent("on" + evname, func);
	} else if (el.addEventListener) { // Gecko / W3C
		el.addEventListener(evname, func, true);
	} else {
		el["on" + evname] = func;
	}
};

Calendar.removeEvent = function(el, evname, func) {
	if (el.detachEvent) { // IE
		el.detachEvent("on" + evname, func);
	} else if (el.removeEventListener) { // Gecko / W3C
		el.removeEventListener(evname, func, true);
	} else {
		el["on" + evname] = null;
	}
};

Calendar.createElement = function(type, parent) {
	var el = null;
	if (document.createElementNS) {
		// use the XHTML namespace; IE won't normally get here unless
		// _they_ "fix" the DOM2 implementation.
		el = document.createElementNS("http://www.w3.org/1999/xhtml", type);
	} else {
		el = document.createElement(type);
	}
	if (typeof parent != "undefined") {
		parent.appendChild(el);
	}
	return el;
};

// END: UTILITY FUNCTIONS

// BEGIN: CALENDAR STATIC FUNCTIONS

/** Internal -- adds a set of events to make some element behave like a button. */
Calendar._add_evs = function(el) {
	with (Calendar) {
		addEvent(el, "mouseover", dayMouseOver);
		addEvent(el, "mousedown", dayMouseDown);
		addEvent(el, "mouseout", dayMouseOut);
        var arr=["preyear","premonth","nextmonth","nextyear"];
        if (is_ie && arr.indexOf(el.className)<0) {
            addEvent(el, "dblclick", dayMouseDblClick);
            el.setAttribute("unselectable", true);
        }
	}
};

Calendar.findMonth = function(el) {
	if (typeof el.month != "undefined") {
		return el;
	} else if (typeof el.parentNode.month != "undefined") {
		return el.parentNode;
	}
	return null;
};

Calendar.findYear = function(el) {
	if (typeof el.year != "undefined") {
		return el;
	} else if (typeof el.parentNode.year != "undefined") {
		return el.parentNode;
	}
	return null;
};

Calendar.showMonthsCombo = function () {
	var cal = Calendar._C;
	if (!cal) {
		return false;
	}

	var cal = cal;
	var cd = cal.activeDiv;
	var mc = cal.monthsCombo;
	if(mc.style.display=='block'){
		mc.style.display='none';
		return false;
	}
	if (cal.hilitedMonth) {
		Calendar.removeClass(cal.hilitedMonth, "hilite");
	}
	if (cal.activeMonth) {
		Calendar.removeClass(cal.activeMonth, "active");
	}
	var mon = cal.monthsCombo.getElementsByTagName("div")[cal.date.getMonth()];
	Calendar.addClass(mon, "active");
	cal.activeMonth = mon;
	var s = mc.style;
	s.display = "block";
	cal.checkYear.style.display = "none";
	if (cd.navtype < 0)
		s.left = cd.offsetLeft + "px";
	else {
		var mcw = mc.offsetWidth;
		if (typeof mcw == "undefined")
			// Konqueror brain-dead techniques
			mcw = 50;
		s.left = (cd.offsetLeft + cd.offsetWidth - mcw + 30) + "px";
	}
	s.top = (cd.offsetTop + cd.offsetHeight) + "px";
};

Calendar.showYearsCombo = function (ev) {

	var cal = Calendar._C;
	if (!cal ) {
		return false;
	}
	if(cal.checkYear.style.display=='block'){
		cal.checkYear.style.display='none'
		return false;
	}


	var cal = cal;
	var cd = cal.activeDiv;
	var yc = cal.checkYear.firstChild;
	if (cal.hilitedYear) {
		Calendar.removeClass(cal.hilitedYear, "hilite");
	}
	if (cal.activeYear) {
		Calendar.removeClass(cal.activeYear, "active");
	}
	cal.activeYear = null;
	var yr = yc.firstChild;
	var show = false;
	for (var i = 1900; i < 2100; i++) {

		  yr.innerHTML = i;
		  yr.year = i;
		  yr.style.display = "block";
		  show = true;
		  yr = yr.nextSibling;

	}
	if (show) {
		var year = yc.getElementsByTagName("div")[cal.date.getYear()];
		Calendar.addClass(year, "active");
		cal.activeYear = year;
		var s =  cal.checkYear.style;
		s.display = "block";
		cal.monthsCombo.style.display='none';
		dojo.window.scrollIntoView(year);
		if (cd.navtype < 0)
			s.left = cd.offsetLeft + "px";
		else {
			var ycw =  cal.checkYear.offsetWidth;
			if (typeof ycw == "undefined")
				// Konqueror brain-dead techniques
				ycw = 50;
			s.left = (cd.offsetLeft + cd.offsetWidth - ycw) + "px";
		}
		s.top = (cd.offsetTop + cd.offsetHeight) + "px";
	}

};
// event handlers
Calendar.tableMouseUp = function(ev) {

	var cal = Calendar._C;
	if (!cal) {
		return false;
	}
	if (cal.timeout) {
		clearTimeout(cal.timeout);
	}
	var el = cal.activeDiv;
	if (!el) {
		return false;
	}
	var target = Calendar.getTargetElement(ev);
	ev || (ev = window.event);
	if(el.navtype == -2){
	  Calendar.removeClass(el, "preyearactive");
	  Calendar.removeClass(el, "preyearhilite");
	}
	else if(el.navtype == -1){
	  Calendar.removeClass(el, "premonthactive");
	  Calendar.removeClass(el, "premonthhilite");
	}
	else if(el.navtype == 0){
	  Calendar.removeClass(el, "todayactive");
	  Calendar.removeClass(el, "todayhilite");
	}
	else if(el.navtype == 1){
	  Calendar.removeClass(el, "nextmonthactive");
	  Calendar.removeClass(el, "nextmonthhilite");
	}
	else if(el.navtype == 2){
	  Calendar.removeClass(el, "nextyearactive");
	  Calendar.removeClass(el, "nextyearhilite");
	}
	else if(el.navtype == 200){
		Calendar.removeClass(el, "closeactive");
	}
	else{
	  Calendar.removeClass(el, "active");
	}
	if (target == el || target.parentNode == el) {
		Calendar.cellClick(el, ev);
	}
	var mon = Calendar.findMonth(target);
	var date = null;
	if (mon) {
		date = new Date(cal.date);
		if (mon.month != date.getMonth()) {
			date.setMonth(mon.month);
			if(mon.month != date.getMonth()){
				date=new Date(date.getTime()-24*60*60*1000);
			}
			cal.setDate(date);
			cal.dateClicked = false;
			cal.callHandler();
		}
	} else {
		var year = Calendar.findYear(target);
		if (year) {
			date = new Date(cal.date);
			if (year.year != date.getFullYear()) {
				date.setFullYear(year.year);
				cal.setDate(date);
				cal.dateClicked = false;
				cal.callHandler();
			}
		}
	}
	with (Calendar) {
		removeEvent(document, "mouseup", tableMouseUp);
		removeEvent(document, "mouseover", tableMouseOver);
		removeEvent(document, "mousemove", tableMouseOver);
		//cal._hideCombos();
		_C = null;
		return stopEvent(ev);
	}
};

Calendar.tableMouseOver = function (ev) {
	var cal = Calendar._C;
	if (!cal) {
		return;
	}
	var el = cal.activeDiv;
	var target = Calendar.getTargetElement(ev);
	if ((target == el || target.parentNode == el)&&Math.abs(el.navtype) > 2) {
		Calendar.addClass(el, "hilite active");
		Calendar.addClass(el.parentNode, "rowhilite1");
	} else {
		if (typeof el.navtype == "undefined" || (el.navtype != 50 && (el.navtype == 0 || Math.abs(el.navtype) > 2)))
			Calendar.removeClass(el, "active");
		Calendar.removeClass(el, "hilite");
		Calendar.removeClass(el.parentNode, "rowhilite1");
	}
	ev || (ev = window.event);
	if (el.navtype == 50 && target != el) {
		var pos = Calendar.getAbsolutePos(el);
		var w = el.offsetWidth;
		var x = ev.clientX;
		var dx;
		var decrease = true;
		if (x > pos.x + w) {
			dx = x - pos.x - w;
			decrease = false;
		} else
			dx = pos.x - x;

		if (dx < 0) dx = 0;
		var range = el._range;
		var current = el._current;
		var count = Math.floor(dx / 10) % range.length;
		for (var i = range.length; --i >= 0;)
			if (range[i] == current)
				break;
		while (count-- > 0)
			if (decrease) {
				if (--i < 0)
					i = range.length - 1;
			} else if ( ++i >= range.length )
				i = 0;
		var newval = range[i];
		el.innerHTML = newval;

		cal.onUpdateTime();
	}
	var mon = Calendar.findMonth(target);
	if (mon) {
		if (mon.month != cal.date.getMonth()) {
			if (cal.hilitedMonth) {
				Calendar.removeClass(cal.hilitedMonth, "hilite");
			}
			Calendar.addClass(mon, "hilite");
			cal.hilitedMonth = mon;
		} else if (cal.hilitedMonth) {
			Calendar.removeClass(cal.hilitedMonth, "hilite");
		}
	} else {
		if (cal.hilitedMonth) {
			Calendar.removeClass(cal.hilitedMonth, "hilite");
		}
		var year = Calendar.findYear(target);
		if (year) {
			if (year.year != cal.date.getFullYear()) {
				if (cal.hilitedYear) {
					Calendar.removeClass(cal.hilitedYear, "hilite");
				}
				Calendar.addClass(year, "hilite");
				cal.hilitedYear = year;
			} else if (cal.hilitedYear) {
				Calendar.removeClass(cal.hilitedYear, "hilite");
			}
		} else if (cal.hilitedYear) {
			Calendar.removeClass(cal.hilitedYear, "hilite");
		}
	}
	return Calendar.stopEvent(ev);
};

Calendar.tableMouseDown = function (ev) {
	if (Calendar.getTargetElement(ev) == Calendar.getElement(ev)) {
		return Calendar.stopEvent(ev);
	}
};

Calendar.calDragIt = function (ev) {
	var cal = Calendar._C;
	if (!(cal && cal.dragging)) {
		return false;
	}
	var posX;
	var posY;
	if (Calendar.is_ie) {
		posY = window.event.clientY + document.body.scrollTop;
		posX = window.event.clientX + document.body.scrollLeft;
	} else {
		posX = ev.pageX;
		posY = ev.pageY;
	}
	cal.hideShowCovered();
	var st = cal.element.style;
	st.left = (posX - cal.xOffs) + "px";
	st.top = (posY - cal.yOffs) + "px";
	return Calendar.stopEvent(ev);
};

Calendar.calDragEnd = function (ev) {
	var cal = Calendar._C;
	if (!cal) {
		return false;
	}
	cal.dragging = false;
	with (Calendar) {
		removeEvent(document, "mousemove", calDragIt);
		removeEvent(document, "mouseup", calDragEnd);
		tableMouseUp(ev);
	}
	cal.hideShowCovered();
};

Calendar.dayMouseDown = function(ev) {
	var el = Calendar.getElement(ev);
	if (el.disabled) {
		return false;
	}
	var cal = el.calendar;
	cal.activeDiv = el;
	Calendar._C = cal;
	if (el.navtype != 300)
		with (Calendar) {
		if (el.navtype == 50) {
			el._current = el.innerHTML;
			addEvent(document, "mousemove", tableMouseOver);
		} else
			addEvent(document, Calendar.is_ie5 ? "mousemove" : "mouseover", tableMouseOver);
		
	if(el.navtype == -2){
	  Calendar.removeClass(el, "preyearhilite");
	  Calendar.addClass(el, "preyearactive");
	}
	else if(el.navtype == -1){
	  Calendar.removeClass(el, "premonthhilite");
	  Calendar.addClass(el, "premonthactive");
	}
	else if(el.navtype == 0){
	  Calendar.removeClass(el, "todayhilite");
	  Calendar.addClass(el, "todayactive");
	}
	else if(el.navtype == 1){
	  Calendar.removeClass(el, "nextmonthhilite");
	  Calendar.addClass(el, "nextmonthactive");
	}
	else if(el.navtype == 2){
	  Calendar.removeClass(el, "nextyearhilite");
	  Calendar.addClass(el, "nextyearactive");
	}
	else if(el.navtype == 200){
		Calendar.removeClass(el, "closehilite");
		Calendar.addClass(el, "closeactive");
	}
	else{
	  Calendar.addClass(el, "hilite active");
	}
	addEvent(document, "mouseup", tableMouseUp);
	} else if (cal.isPopup) {
		cal._dragStart(ev);
	}
	else{
		Calendar.addEvent(document, "mouseup", Calendar.tableMouseUp);
	}
	// if (el.navtype == -1 || el.navtype == 1) {
	// 	if (cal.timeout) clearTimeout(cal.timeout);
	// 	cal.timeout = setTimeout("Calendar.showMonthsCombo()", 250);
	// } else
	if(el.navtype == 300 ){
		if(ev.target.className=='checkedYear'){
			Calendar.showYearsCombo();
		}else if(ev.target.className=='checkedMouth'){
			 Calendar.showMonthsCombo();
		 }
	}else {
		cal.timeout = null;
	}
	return Calendar.stopEvent(ev);
};

Calendar.dayMouseDblClick = function(ev) {
	Calendar.cellClick(Calendar.getElement(ev), ev || window.event);
	if (Calendar.is_ie) {
		document.selection.empty();
	}
};

Calendar.dayMouseOver = function(ev) {
	var el = Calendar.getElement(ev);
	if (Calendar.isRelated(el, ev) || Calendar._C || el.disabled) {
		return false;
	}
	if (el.ttip) {
		if (el.ttip.substr(0, 1) == "_") {
			el.ttip = el.caldate.print(el.calendar.ttDateFormat) + el.ttip.substr(1);
		}
		el.calendar.tooltips.innerHTML = el.ttip;
	}
	if (el.navtype != 300&&el.navtype != 200) {
		if(Math.abs(el.navtype) <=2){
		}
		else{
		Calendar.addClass(el, "hilite");
		if (el.caldate) {
			Calendar.addClass(el.parentNode, "rowhilite1");
		}
		}
	}
	 if(el.navtype == -2){
	  Calendar.addClass(el, "preyearhilite");
	}
	else if(el.navtype == -1){
	  Calendar.addClass(el, "premonthhilite");
	}
	else if(el.navtype == 0){
	  Calendar.addClass(el, "todayhilite");
	}
	else if(el.navtype == 1){
	  Calendar.addClass(el, "nextmonthhilite");
	}
	else if(el.navtype == 2){
	  Calendar.addClass(el, "nextyearhilite");
	}
	else if(el.navtype == 200){
		Calendar.addClass(el, "closehilite");
	}
	return Calendar.stopEvent(ev);
};

Calendar.dayMouseOut = function(ev) {
	with (Calendar) {
		var el = getElement(ev);
		if (isRelated(el, ev) || _C || el.disabled)
			return false;
		  
		  
	if(el.navtype == -2){
	  Calendar.removeClass(el, "preyearhilite");
	}
	else if(el.navtype == -1){
	  Calendar.removeClass(el, "premonthhilite");
	}
	else if(el.navtype == 0){
	  Calendar.removeClass(el, "todayhilite");
	}
	else if(el.navtype == 1){
	  Calendar.removeClass(el, "nextmonthhilite");
	}
	else if(el.navtype == 2){
	  Calendar.removeClass(el, "nextyearhilite");
	}
	else if(el.navtype == 200){
		Calendar.removeClass(el, "closehilite");
	}
	else{
	  removeClass(el, "hilite");
	}
		if (el.caldate)
			removeClass(el.parentNode, "rowhilite1");
		if (el.calendar)
			el.calendar.tooltips.innerHTML = _TT["SEL_DATE"];
		return stopEvent(ev);
	}
};



/**
 *  A generic "click" handler :) handles all types of buttons defined in this
 *  calendar.
 */
Calendar.cellClick = function(el, ev) {
	var cal = el.calendar;
	var closing = false;
	var newdate = false;
	var date = null;
	if (typeof el.navtype == "undefined") {
		if (cal.currentDateEl) {
			Calendar.removeClass(cal.currentDateEl, "selected");
			Calendar.addClass(el, "selected");
			closing = (cal.currentDateEl == el);
			if (!closing) {
				cal.currentDateEl = el;
			}
		}
		cal.date.setDateOnly(el.caldate);
		date = cal.date;
		if(typeof(el.otherMonth)==="string"&&el.otherMonth.replace(/\s*/g,"") == 'oweekend'){
			el.otherMonth = false
		}
		var other_month = !(cal.dateClicked = !el.otherMonth);
		if (!other_month && !cal.currentDateEl)
			cal._toggleMultipleDate(new Date(date));
		else
			newdate = !el.disabled;
		// a date was clicked
		if (other_month)
			cal._init(cal.firstDayOfWeek, date);
	} else {
		if (el.navtype == 200) {
			Calendar.removeClass(el, "closeactive");
			cal.callCloseHandler();
			return;
		}
		date = new Date(cal.date);
		if (el.navtype == 0)
			date.setDateOnly(new Date()); // TODAY
		// unless "today" was clicked, we assume no date was clicked so
		// the selected handler will know not to close the calenar when
		// in single-click mode.
		// cal.dateClicked = (el.navtype == 0);
		cal.dateClicked = false;
		var year = date.getFullYear();
		var mon = date.getMonth();
		function setMonth(m) {
			var day = date.getDate();
			var max = date.getMonthDays(m);
			if (day > max) {
				date.setDate(max);
			}
			date.setMonth(m);
		};
		var minYear = cal.minYear;
		var maxYear = cal.maxYear;
		
		//@JiaXin
		var currDateId = $(cal.sel).parents(".begin-end-style").attr("id");
		var minRecDateId;
		var maxRecDateId;
		//@JiaXin 判断是否有设置最大最小值
		if(cal.minYear.toString().indexOf("-")>0){
			minRecDateId = cal.minYear.split("-")[1];
			//当前选中id与设置最大最小值的控件id是否一致
			if(minRecDateId && currDateId){
				if(currDateId.indexOf(minRecDateId)>=0)
					minYear = parseInt(minYear.split("-")[0].substring(0,4));
				else
					minYear = 1970;
			}
			
		}
		if(cal.maxYear.toString().indexOf("-")>0){
			maxRecDateId = cal.maxYear.split("-")[1];
			if(minRecDateId && currDateId){
				if(currDateId.indexOf(minRecDateId)>=0)
					maxYear = parseInt(maxYear.split("-")[0].substring(0,4));
				else
					maxYear = 2050;
			}
			
		}
			
		switch (el.navtype) {
		    case 400:
			Calendar.removeClass(el, "hilite");
			var text = Calendar._TT["ABOUT"];
			if (typeof text != "undefined") {
				text += cal.showsTime ? Calendar._TT["ABOUT_TIME"] : "";
			} else {
				// FIXME: this should be removed as soon as lang files get updated!
				text = "Help and about box text is not translated into this language.\n" +
					"If you know this language and you feel generous please update\n" +
					"the corresponding file in \"lang\" subdir to match calendar-en.js\n" +
					"and send it back to <mihai_bazon@yahoo.com> to get it into the distribution  ;-)\n\n" +
					"Thank you!\n" +
					"http://dynarch.com/mishoo/calendar.epl\n";
			}
			return;
		    case -2:
			if (year > minYear) {
				date.setFullYear(year - 1);
			}
			break;
		    case -1:
			if (mon > 0) {
				setMonth(mon - 1);
			} else if (year-- > minYear) {
				date.setFullYear(year);
				setMonth(11);
			}
			break;
		    case 1:
			if (mon < 11) {
				setMonth(mon + 1);
			} else if (year < maxYear) {
				date.setFullYear(year + 1);
				setMonth(0);
			}
			break;
		    case 2:
			if (year < maxYear) {
				date.setFullYear(year + 1);
			}
			break;
		    case 100:
			cal.setFirstDayOfWeek(el.fdow);
			return;
		    case 50:
			var range = el._range;
			var current = el.innerHTML;
			for (var i = range.length; --i >= 0;)
				if (range[i] == current)
					break;
			if (ev && ev.shiftKey) {
				if (--i < 0)
					i = range.length - 1;
			} else if ( ++i >= range.length )
				i = 0;
			var newval = range[i];
			el.innerHTML = newval;
			cal.onUpdateTime();
			return;
		    case 0:
			// TODAY will bring us here
			if ((typeof cal.getDateStatus == "function") &&
			    cal.getDateStatus(date, date.getFullYear(), date.getMonth(), date.getDate())) {
				return false;
			}
			break;
		}
		if (!date.equalsTo(cal.date)) {
			cal.setDate(date);
			newdate = true;
		} else if (el.navtype == 0)
			newdate = closing = true;
	}
	if (newdate) {
		ev && cal.callHandler();
	}
	if (closing) {
		Calendar.removeClass(el, "hilite");
		ev && cal.callCloseHandler();
	}
};

// END: CALENDAR STATIC FUNCTIONS

// BEGIN: CALENDAR OBJECT FUNCTIONS

/**
 *  This function creates the calendar inside the given parent.  If _par is
 *  null than it creates a popup calendar inside the BODY element.  If _par is
 *  an element, be it BODY, then it creates a non-popup calendar (still
 *  hidden).  Some properties need to be set before calling this function.
 */
Calendar.prototype.create = function (_par) {
	var parent = null;
	if (! _par) {
		// default parent is the document body, in which case we create
		// a popup calendar.
		parent = document.getElementsByTagName("body")[0];
		this.isPopup = true;
	} else {
		parent = _par;
		this.isPopup = false;
	}
	this.date = this.dateStr ? new Date(this.dateStr) : new Date();
	var table = Calendar.createElement("table");
	this.table = table;
	table.cellSpacing = 0;
	table.cellPadding = 0;
	table.calendar = this;
	Calendar.addEvent(table, "mousedown", Calendar.tableMouseDown);
	var div = Calendar.createElement("div");
	this.element = div;
	div.className = "calendar";
	div.id="calendar"+(new Date).getTime();
	if (this.isPopup) {
		div.style.position = "absolute";
		div.style.display = "none";
	}
	div.appendChild(table);

	var thead = Calendar.createElement("thead", table);
	var cell = null;
	var row = null;

	var cal = this;
	var hh = function (text, cs, navtype) {
		cell = Calendar.createElement("td", row);
		cell.colSpan = cs;
		if(navtype==-2){
		  cell.className = "preyear";
		}
		else if(navtype==-1){
		  cell.className = "premonth";
		}
		else if(navtype==0){
		  cell.className = "today";
		}
		else if(navtype==1){
		  cell.className = "nextmonth";
		}
		else if(navtype==2){
		  cell.className = "nextyear";
		}
		else if(navtype==300){
			  cell.className = "title";
			}
		else if(navtype==200){
			cell.className = "close";
		}
		else{
		  cell.className = "button";
		}
		Calendar._add_evs(cell);
		cell.calendar = cal;
		cell.navtype = navtype;
		if(text == "今天"){
			text = "今";
		}
		cell.innerHTML = "<div unselectable='on'>" + text + "</div>";
		
		return cell;
	};
	row = Calendar.createElement("tr", thead);
	var title_length = 6;
	(this.isPopup) && --title_length;
	(this.weekNumbers) && ++title_length;
   // Calendar.createElement("td", row);
	//hh("?", 1, 400).ttip = Calendar._TT["INFO"];
	
	row = Calendar.createElement("tr", thead);
	//this.content = hh("<input type='number' name='points' min='1' max='10' onchange='alert(11)'/>", title_length+1, 400);
	row = Calendar.createElement("tr", thead);
	row.className = "headrow";

	this._nav_py = hh("&nbsp;", 1, -2);
	this._nav_py.ttip = Calendar._TT["PREV_YEAR"];

	this._nav_pm = hh("&nbsp;", 1, -1);
	this._nav_pm.ttip = Calendar._TT["PREV_MONTH"];

	this.title = hh("", 2, 300);
	this.title.className = "title";

	if (this.isPopup) {
		this.title.ttip = Calendar._TT["DRAG_TO_MOVE"];
		this.title.style.cursor = "move";
		hh("&nbsp", 1, 200).ttip = Calendar._TT["CLOSE"];
	}

	this._nav_nm = hh("&nbsp;", 1, 1);
	this._nav_nm.ttip = Calendar._TT["NEXT_MONTH"];

	this._nav_ny = hh("&nbsp;", 1, 2);
	this._nav_ny.ttip = Calendar._TT["NEXT_YEAR"];
	
	this._nav_now = hh(Calendar._TT["TODAY"], this.weekNumbers ? 4 : 3, 0);
	this._nav_now.ttip = Calendar._TT["GO_TODAY"];

	// day names
	row = Calendar.createElement("tr", thead);
	row.className = "daynames";
	if (this.weekNumbers) {
		cell = Calendar.createElement("td", row);
		cell.className = "name wn";
		cell.innerHTML = Calendar._TT["WK"];
	}
	for (var i = 7; i > 0; --i) {
		cell = Calendar.createElement("td", row);
		if (!i) {
			cell.navtype = 100;
			cell.calendar = this;
			Calendar._add_evs(cell);
		}
	}
	this.firstdayname = (this.weekNumbers) ? row.firstChild.nextSibling : row.firstChild;
	this._displayWeekdays();

	var tbody = Calendar.createElement("tbody", table);
	this.tbody = tbody;

	for (i = 6; i > 0; --i) {
		row = Calendar.createElement("tr", tbody);
		if (this.weekNumbers) {
			cell = Calendar.createElement("td", row);
		}
		for (var j = 7; j > 0; --j) {
			cell = Calendar.createElement("td", row);
			cell.calendar = this;
			Calendar._add_evs(cell);
		}
	}

	if (this.showsTime) {
		row = Calendar.createElement("tr", tbody);
		row.className = "time";

		cell = Calendar.createElement("td", row);
		cell.className = "time";
		cell.colSpan = 2;
		cell.innerHTML = Calendar._TT["TIME"] || "&nbsp;";

		cell = Calendar.createElement("td", row);
		cell.className = "time";
		cell.colSpan = this.weekNumbers ? 4 : 3;

		(function(){
			function makeTimePart(className, init, range_start, range_end) {
				var part = Calendar.createElement("span", cell);
				part.className = className;
				part.innerHTML = init;
				part.calendar = cal;
				part.ttip = Calendar._TT["TIME_PART"];
				part.navtype = 50;
				part._range = [];
				if (typeof range_start != "number")
					part._range = range_start;
				else {
					for (var i = range_start; i <= range_end; ++i) {
						var txt;
						if (i < 10 && range_end >= 10) txt = '0' + i;
						else txt = '' + i;
						part._range[part._range.length] = txt;
					}
				}
				Calendar._add_evs(part);
				return part;
			};
			var hrs = cal.date.getHours();
			var mins = cal.date.getMinutes();
			var seconds = cal.date.getSeconds();
			var t12 = !cal.time24;
			var pm = (hrs > 12);
			if (t12 && pm) hrs -= 12;
			var H = makeTimePart("hour", hrs, t12 ? 1 : 0, t12 ? 12 : 23);
			var span = Calendar.createElement("span", cell);
			span.innerHTML = ":";
			span.className = "colon";
			var M = makeTimePart("minute", mins, 0, 59);
			var secSpan = Calendar.createElement("span", cell);
			secSpan.innerHTML = ":";
			secSpan.className = "colon";			
			var Sec = makeTimePart("minute", seconds, 0,59);
			var AP = null;
			cell = Calendar.createElement("td", row);
			cell.className = "time";
			cell.colSpan = 2;
			if (t12)
				AP = makeTimePart("ampm", pm ? "pm" : "am", ["am", "pm"]);
			else
				cell.innerHTML = "&nbsp;";

			cal.onSetTime = function() {
				var pm, hrs = this.date.getHours(),
					mins = this.date.getMinutes();
					secs = this.date.getSeconds();
				if (t12) {
					pm = (hrs >= 12);
					if (pm) hrs -= 12;
					if (hrs == 0) hrs = 12;
					AP.innerHTML = pm ? "pm" : "am";
				}
				H.innerHTML = (hrs < 10) ? ("0" + hrs) : hrs;
				M.innerHTML = (mins < 10) ? ("0" + mins) : mins;
				Sec.innerHTML = (secs < 10) ? ("0" + secs) : secs;
			};

			cal.onUpdateTime = function() {
				var date = this.date;
				var h = parseInt(H.innerHTML, 10);
				if (t12) {
					if (/pm/i.test(AP.innerHTML) && h < 12)
						h += 12;
					else if (/am/i.test(AP.innerHTML) && h == 12)
						h = 0;
				}
				var d = date.getDate();
				var m = date.getMonth();
				var y = date.getFullYear();
				date.setHours(h);
				date.setMinutes(parseInt(M.innerHTML, 10));
				date.setSeconds(parseInt(Sec.innerHTML, 10));
				date.setFullYear(y);
				date.setMonth(m);
				date.setDate(d);
				this.dateClicked = false;
				this.callHandler();
			};
		})();
	} else {
		this.onSetTime = this.onUpdateTime = function() {};
	}

	var tfoot = Calendar.createElement("tfoot", table);

	row = Calendar.createElement("tr", tfoot);
	row.className = "footrow";

	cell = hh(Calendar._TT["SEL_DATE"], this.weekNumbers ? 8 : 7, 300);
	cell.className = "ttip";
	if (this.isPopup) {
		cell.ttip = Calendar._TT["DRAG_TO_MOVE"];
		cell.style.cursor = "move";
	}
	this.tooltips = cell;

	this._init(this.firstDayOfWeek, this.date);
	
	//给日期框套上iframe 解决被控件挡住的问题 开始
	var frame=Calendar.createElement("iframe");
	// 原为 245px 太大了 可能导致出现滚动条     社保
	frame.width="100%";
	frame.height="100%";
	frame.style.filter="alpha(opacity=0)";
	frame.style.left="-1px";
	frame.style.top="-1px";
	frame.style.position="absolute";
	frame.style.zIndex= "-1000";
	frame.style.border = "0px";
	this.element.appendChild(frame);
	//给日期框套上iframe 解决被控件挡住的问题 结束
//	$(".premonth",this.element).after($(".title",this.element));
//	$(".nextyear",this.element).after($(".today",this.element));
	parent.appendChild(this.element);
	 
	
};

/** keyboard navigation, only for popup calendars */
Calendar._keyEvent = function(ev) {
	var cal = window._dynarch_popupCalendar;
	if (!cal || cal.multiple)
		return false;
	(Calendar.is_ie) && (ev = window.event);
	var act = (Calendar.is_ie || ev.type == "keypress"),
		K = ev.keyCode;
	if (ev.ctrlKey) {
		switch (K) {
		    case 37: // KEY left
			act && Calendar.cellClick(cal._nav_pm);
			break;
		    case 38: // KEY up
			act && Calendar.cellClick(cal._nav_py);
			break;
		    case 39: // KEY right
			act && Calendar.cellClick(cal._nav_nm);
			break;
		    case 40: // KEY down
			act && Calendar.cellClick(cal._nav_ny);
			break;
		    default:
			return false;
		}
	} else switch (K) {
	    case 32: // KEY space (now)
		Calendar.cellClick(cal._nav_now);
		break;
	    case 27: // KEY esc
		act && cal.callCloseHandler();
		break;
	    case 37: // KEY left
	    case 38: // KEY up
	    case 39: // KEY right
	    case 40: // KEY down
		if (act) {
			var prev, x, y, ne, el, step;
			prev = K == 37 || K == 38;
			step = (K == 37 || K == 39) ? 1 : 7;
			function setVars() {
				el = cal.currentDateEl;
				var p = el.pos;
				x = p & 15;
				y = p >> 4;
				ne = cal.ar_days[y][x];
			};setVars();
			function prevMonth() {
				var date = new Date(cal.date);
				date.setDate(date.getDate() - step);
				cal.setDate(date);
			};
			function nextMonth() {
				var date = new Date(cal.date);
				date.setDate(date.getDate() + step);
				cal.setDate(date);
			};
			while (1) {
				switch (K) {
				    case 37: // KEY left
					if (--x >= 0)
						ne = cal.ar_days[y][x];
					else {
						x = 6;
						K = 38;
						continue;
					}
					break;
				    case 38: // KEY up
					if (--y >= 0)
						ne = cal.ar_days[y][x];
					else {
						prevMonth();
						setVars();
					}
					break;
				    case 39: // KEY right
					if (++x < 7)
						ne = cal.ar_days[y][x];
					else {
						x = 0;
						K = 40;
						continue;
					}
					break;
				    case 40: // KEY down
					if (++y < cal.ar_days.length)
						ne = cal.ar_days[y][x];
					else {
						nextMonth();
						setVars();
					}
					break;
				}
				break;
			}
			if (ne) {
				if (!ne.disabled)
					Calendar.cellClick(ne);
				else if (prev)
					prevMonth();
				else
					nextMonth();
			}
		}
		break;
	    case 13: // KEY enter
		if (act)
			Calendar.cellClick(cal.currentDateEl, ev);
		break;
	    default:
		return false;
	}
	return Calendar.stopEvent(ev);
};

/**
 *  (RE)Initializes the calendar to the given date and firstDayOfWeek
 */
Calendar.prototype._init = function (firstDayOfWeek, date) {
	var today = new Date(),
		TY = today.getFullYear(),
		TM = today.getMonth(),
		TD = today.getDate();
	this.table.style.visibility = "hidden";
	var year = date.getFullYear();
	var minYear = this.minYear;
	var maxYear = this.maxYear;
	//@JiaXin 
		//@JiaXin 获取当前打开日历控件的id
		var currDateId = $(this.sel).parents(".begin-end-style").attr("id");
		var minRecDateId;
		var maxRecDateId;
		//@JiaXin 解析当前设置的最大值与最小值
		if(this.minYear.toString().indexOf("-")>0){
			minRecDateId = this.minYear.split("-")[1];
			//当前选中id与设置最大最小值的控件id是否一致
			if(minRecDateId && currDateId){
				if(currDateId.indexOf(minRecDateId)>=0)
					minYear = parseInt(minYear.split("-")[0].substring(0,4));
				else
					minYear = 1970;
			}
			
		}
		if(this.maxYear.toString().indexOf("-")>0){
			maxRecDateId = this.maxYear.split("-")[1];
			if(minRecDateId && currDateId){
				if(currDateId.indexOf(minRecDateId)>=0)
					maxYear = parseInt(maxYear.split("-")[0].substring(0,4));
				else
					maxYear = 2050;
			}
		}
	if (year < minYear) { 
		year = minYear;
		date.setFullYear(year);
		date.setMonth(0);
		date.setDate(1);
	} else if (year > maxYear) {
		year = maxYear;
		date.setFullYear(year);
		date.setMonth(11);
		date.setDate(31);
	}
	this.firstDayOfWeek = firstDayOfWeek;
	this.date = new Date(date);
	var month = date.getMonth();
	var mday = date.getDate();
	var no_days = date.getMonthDays();

	// calendar voodoo for computing the first day that would actually be
	// displayed in the calendar, even if it's from the previous month.
	// WARNING: this is magic. ;-)
	date.setDate(1);
	var day1 = (date.getDay() - this.firstDayOfWeek) % 7;
	if (day1 < 0)
		day1 += 7;
	date.setDate(-day1);
	date.setDate(date.getDate() + 1);

	var row = this.tbody.firstChild;
	//获得当前月
	var MN = Calendar._SMN[month];
	var ar_days = this.ar_days = new Array();
	var weekend = Calendar._TT["WEEKEND"];
	var dates = this.multiple ? (this.datesCells = {}) : null;
	for (var i = 0; i < 6; ++i, row = row.nextSibling) {
		var cell = row.firstChild;
		if (this.weekNumbers) {
			cell.className = "day wn";
			cell.innerHTML = date.getWeekNumber();
			cell = cell.nextSibling;
		}
		row.className = "daysrow";
		var hasdays = false, iday, dpos = ar_days[i] = [];
		for (var j = 0; j < 7; ++j, cell = cell.nextSibling, date.setDate(iday + 1)) {
			iday = date.getDate();
			var wday = date.getDay();
			cell.className = "day";
			cell.pos = i << 4 | j;
			dpos[j] = cell;
			var current_month = (date.getMonth() == month);
			if (!current_month) {
				if (this.showsOtherMonths) {
					cell.className += " othermonth";
					cell.otherMonth = true;
				} else {
					cell.className = "emptycell";
					cell.innerHTML = "&nbsp;";
					cell.disabled = true;
					continue;
				}
			} else {
				cell.otherMonth = false;
				hasdays = true;
			}
			cell.disabled = false;
			cell.innerHTML = this.getDateText ? this.getDateText(date, iday) : iday;
			if (dates)
				dates[date.print("%Y%m%d")] = cell;
			if (this.getDateStatus) {
				var status = this.getDateStatus(date, year, month, iday);
				if (this.getDateToolTip) {
					var toolTip = this.getDateToolTip(date, year, month, iday);
					if (toolTip)
						cell.title = toolTip;
				}
				if (status === true) {
					cell.className += " disabled";
					cell.disabled = true;
				} else {
					if (/disabled/i.test(status))
						cell.disabled = true;
					cell.className += " " + status;
				}
			}
			if (!cell.disabled) {
				cell.caldate = new Date(date);
				cell.ttip = "_";
				if (!this.multiple && current_month
				    && iday == mday && this.hiliteToday) {
					cell.className += " selected";
					this.currentDateEl = cell;
				}
				if (date.getFullYear() == TY &&
				    date.getMonth() == TM &&
				    iday == TD) {
					cell.className += " tdtoday";
					cell.ttip += Calendar._TT["PART_TODAY"];
				}
				//Zs修改周末文字颜色
				if (weekend.indexOf(wday.toString()) != -1)
				cell.className += cell.otherMonth = " oweekend" ;
				
			}
		}
		if (!(hasdays || this.showsOtherMonths))
			row.className = "emptyrow";
	}
	month = parseInt(month)+1;
	var yearMon = year + "年" + month + "月";
	yearMon.replace(/\s+/g, "");
	this.title.innerHTML='<span class="checkedYear">'+year+ "年" +'</span><span class="checkedMouth">'+month+ "月" +'</span>';
	//this.title.innerHTML = yearMon;
	var div = Calendar.createElement("div", this.element);
	this.checkYear = div;
	div.className = "comboCheck";
	var divYear = Calendar.createElement("div");
	divYear.className = "comboCheckDiv";
	div.appendChild(divYear);
	for (var j = 1900; j <2100; j++) {
		var yc = Calendar.createElement("div");
		yc.className = Calendar.is_ie ? "label-IEfix" : "label";
		divYear.appendChild(yc);
	}
	this.title.appendChild(div);
	var div = Calendar.createElement("div", this.element);
	this.monthsCombo = div;
	div.className = "combo";
	for (i = 0; i < Calendar._MN.length; ++i) {
		var mn = Calendar.createElement("div");
		mn.className = Calendar.is_ie ? "label-IEfix" : "label";
		mn.month = i;
		mn.innerHTML = Calendar._SMN[i];
		div.appendChild(mn);
	}
	this.title.appendChild(div);

	this.onSetTime();
	this.table.style.visibility = "visible";
	this._initMultipleDates();
	// PROFILE
	// this.tooltips.innerHTML = "Generated in " + ((new Date()) - today) + " ms";
};

Calendar.prototype._initMultipleDates = function() {
	if (this.multiple) {
		for (var i in this.multiple) {
			var cell = this.datesCells[i];
			var d = this.multiple[i];
			if (!d)
				continue;
			if (cell)
				cell.className += " selected";
		}
	}
};

Calendar.prototype._toggleMultipleDate = function(date) {
	if (this.multiple) {
		var ds = date.print("%Y%m%d");
		var cell = this.datesCells[ds];
		if (cell) {
			var d = this.multiple[ds];
			if (!d) {
				Calendar.addClass(cell, "selected");
				this.multiple[ds] = date;
			} else {
				Calendar.removeClass(cell, "selected");
				delete this.multiple[ds];
			}
		}
	}
};

Calendar.prototype.setDateToolTipHandler = function (unaryFunction) {
	this.getDateToolTip = unaryFunction;
};

/**
 *  Calls _init function above for going to a certain date (but only if the
 *  date is different than the currently selected one).
 */
Calendar.prototype.setDate = function (date) {

	if (date.getTime()!=this.date.getTime()) {
		this._init(this.firstDayOfWeek, date);
	}
};

/**
 *  Refreshes the calendar.  Useful if the "disabledHandler" function is
 *  dynamic, meaning that the list of disabled date can change at runtime.
 *  Just * call this function if you think that the list of disabled dates
 *  should * change.
 */
Calendar.prototype.refresh = function () {
	this._init(this.firstDayOfWeek, this.date);
};

/** Modifies the "firstDayOfWeek" parameter (pass 0 for Synday, 1 for Monday, etc.). */
Calendar.prototype.setFirstDayOfWeek = function (firstDayOfWeek) {
	this._init(firstDayOfWeek, this.date);
	this._displayWeekdays();
};

/**
 *  Allows customization of what dates are enabled.  The "unaryFunction"
 *  parameter must be a function object that receives the date (as a JS Date
 *  object) and returns a boolean value.  If the returned value is true then
 *  the passed date will be marked as disabled.
 */
Calendar.prototype.setDateStatusHandler = Calendar.prototype.setDisabledHandler = function (unaryFunction) {
	this.getDateStatus = unaryFunction;
};

/** Customization of allowed year range for the calendar. */
Calendar.prototype.setRange = function (a, z) {
	this.minYear = a;
	this.maxYear = z;
};

/** Calls the first user handler (selectedHandler). */
Calendar.prototype.callHandler = function () {
	if (this.onSelected) {
		this.onSelected(this, this.date.print(this.dateFormat));
	}
};

/** Calls the second user handler (closeHandler). */
Calendar.prototype.callCloseHandler = function () {
	if (this.onClose) {
		this.onClose(this);
	}
	this.hideShowCovered();
};

/** Removes the calendar object from the DOM tree and destroys it. */
Calendar.prototype.destroy = function () {
	var el = this.element.parentNode;
	el && el.removeChild(this.element);
	Calendar._C = null;
	window._dynarch_popupCalendar = null;
};

/**
 *  Moves the calendar element to a different section in the DOM tree (changes
 *  its parent).
 */
Calendar.prototype.reparent = function (new_parent) {
	var el = this.element;
	el.parentNode.removeChild(el);
	new_parent.appendChild(el);
};

// This gets called when the user presses a mouse button anywhere in the
// document, if the calendar is shown.  If the click was outside the open
// calendar this function closes it.
Calendar._checkCalendar = function(ev) {
	var calendar = window._dynarch_popupCalendar;
	if (!calendar) {
		return false;
	}
	var el = Calendar.is_ie ? Calendar.getElement(ev) : Calendar.getTargetElement(ev);
	if(el != null && /^body$/i.test(el.tagName)) 
	   return;
	for (; el != null && el != calendar.element; el = el.parentNode);
	if (el == null) {
		// calls closeHandler which should hide the calendar.
		window._dynarch_popupCalendar.callCloseHandler();
		return Calendar.stopEvent(ev);
	}
};

/** Shows the calendar. */
Calendar.prototype.show = function () {
	var rows = this.table.getElementsByTagName("tr");
	for (var i = rows.length; i > 0;) {
		var row = rows[--i];
		Calendar.removeClass(row, "rowhilite1");
		var cells = row.getElementsByTagName("td");
		for (var j = cells.length; j > 0;) {
			var cell = cells[--j];
			Calendar.removeClass(cell, "hilite");
			Calendar.removeClass(cell, "active");
		}
	}
	this.element.style.display = "block";
	this.hidden = false;
	if (this.isPopup) {
		window._dynarch_popupCalendar = this;
		Calendar.addEvent(document, "keydown", Calendar._keyEvent);
		Calendar.addEvent(document, "keypress", Calendar._keyEvent);
		Calendar.addEvent(document, "mousedown", Calendar._checkCalendar);
	}
	this.hideShowCovered();
	var backgroundIframe = dojo.byId("backiframe"+this.element.id);
	if(!backgroundIframe){
		var i = new dijit.BackgroundIframe(this.element); 
		if(i.iframe){
		 i.iframe.style.left = "-1px";
		 i.iframe.style.top = "-1px";
		 i.iframe.id="backiframe"+this.element.id;
		}
	}
};

/**
 *  Hides the calendar.  Also removes any "hilite" from the class of any TD
 *  element.
 */
Calendar.prototype.hide = function () {
	if (this.isPopup) {
		Calendar.removeEvent(document, "keydown", Calendar._keyEvent);
		Calendar.removeEvent(document, "keypress", Calendar._keyEvent);
		Calendar.removeEvent(document, "mousedown", Calendar._checkCalendar);
	}
	this.element.style.display = "none";
	this.hidden = true;
	this.hideShowCovered();
};

/**
 *  Shows the calendar at a given absolute position (beware that, depending on
 *  the calendar element style -- position property -- this might be relative
 *  to the parent's containing rectangle).
 */
Calendar.prototype.showAt = function (x, y) {
	var s = this.element.style;
	s.left = x + "px";
	s.top = y + "px";
	this._hideCombos();
	this.show();
};

/** Shows the calendar near a given element. */
Calendar.prototype.showAtElement = function (el, opts) {
	var self = this;
	var p = dojo.coords(el, true);
	var box_withscroll = dojo.coords(el, true);
	var box_noscroll = dojo.coords(el);
	var body = dojo.coords(document.body, true);
    var body_noscroll = dojo.coords(document.body);
	if (!opts || typeof opts != "string") {
		this.showAt(p.x, p.y + el.offsetHeight);
		return true;
	}
	function fixPosition(box) {
		if (box.x < 0)
			box.x = 0;
		if (box.y < 0)
			box.y = 0;
		if ((box.y  + box.height) > body_noscroll.h) {
				 box.y=box_withscroll.y-box.height-2;
			}
		if(box.y<0){
			box.y=box_withscroll.y+box_withscroll.h+1;
		}
	    if ((box.x + box.width) > body_noscroll.w) {
				 box.x=box.x-box.width+14;
			}
	};
	this.element.style.display = "block";
	Calendar.continuation_for_the_fucking_khtml_browser = function() {
		var w = self.element.offsetWidth;
		var h = self.element.offsetHeight;
		self.element.style.display = "none";
		var valign = opts.substr(0, 1);
		var halign = "l";
		if (opts.length > 1) {
			halign = opts.substr(1, 1);
		}
		// vertical alignment
		switch (valign) {
		    case "T": p.y -= h; break;
		    case "B": p.y += el.offsetHeight+1; break;
		    case "C": p.y += (el.offsetHeight - h) / 2; break;
		    case "t": p.y += el.offsetHeight - h; break;
		    case "b": break; // already there
		}
		// horizontal alignment
		switch (halign) {
		    case "L": p.x -= w; break;
		    case "R": p.x += el.offsetWidth; break;
		    case "C": p.x += (el.offsetWidth - w) / 2; break;
		    case "l": p.x += el.offsetWidth - w; break;
		    case "r": break; // already there
		}
		p.width = w;
		p.height = h;
		self.monthsCombo.style.display = "none";
		fixPosition(p);
		self.showAt(p.x, p.y);
	};
	if (Calendar.is_khtml)
		setTimeout("Calendar.continuation_for_the_fucking_khtml_browser()", 10);
	else
		Calendar.continuation_for_the_fucking_khtml_browser();
};

/** Customizes the date format. */
Calendar.prototype.setDateFormat = function (str) {
	this.dateFormat = str;
};

/** Customizes the tooltip date format. */
Calendar.prototype.setTtDateFormat = function (str) {
	this.ttDateFormat = str;
};

/**
 *  Tries to identify the date represented in a string.  If successful it also
 *  calls this.setDate which moves the calendar to the given date.
 */
Calendar.prototype.parseDate = function(str, fmt) {
	if (!fmt)
		fmt = this.dateFormat;
	this.setDate(Date.parseDate(str, fmt));
};

Calendar.prototype.hideShowCovered = function () {
	if (!Calendar.is_ie && !Calendar.is_opera)
		return;
	function getVisib(obj){
		var value = obj.style.visibility;
		if (!value) {
			if (document.defaultView && typeof (document.defaultView.getComputedStyle) == "function") { // Gecko, W3C
				if (!Calendar.is_khtml)
					value = document.defaultView.
						getComputedStyle(obj, "").getPropertyValue("visibility");
				else
					value = '';
			} else if (obj.currentStyle) { // IE
				value = obj.currentStyle.visibility;
			} else
				value = '';
		}
		return value;
	};

	var tags = new Array("applet", "iframe", "select");
	var el = this.element;

	var p = Calendar.getAbsolutePos(el);
	var EX1 = p.x;
	var EX2 = el.offsetWidth + EX1;
	var EY1 = p.y;
	var EY2 = el.offsetHeight + EY1;

	for (var k = tags.length; k > 0; ) {
		var ar = document.getElementsByTagName(tags[--k]);
		var cc = null;

		for (var i = ar.length; i > 0;) {
			cc = ar[--i];

			p = Calendar.getAbsolutePos(cc);
			var CX1 = p.x;
			var CX2 = cc.offsetWidth + CX1;
			var CY1 = p.y;
			var CY2 = cc.offsetHeight + CY1;

			if (this.hidden || (CX1 > EX2) || (CX2 < EX1) || (CY1 > EY2) || (CY2 < EY1)) {
				
				if (!cc.__msh_save_visibility) {
					cc.__msh_save_visibility = getVisib(cc);
				}
				cc.style.visibility = cc.__msh_save_visibility;
			} else {
				if (!cc.__msh_save_visibility) {
					cc.__msh_save_visibility = getVisib(cc);
				}
			}
		}
	}
};

/** Internal function; it displays the bar with the names of the weekday. */
Calendar.prototype._displayWeekdays = function () {
	var fdow = this.firstDayOfWeek;
	var cell = this.firstdayname;
	var weekend = Calendar._TT["WEEKEND"];
	for (var i = 0; i < 7; ++i) {
		cell.className = "day name";
		var realday = (i + fdow) % 7;
		if (i) {
			cell.ttip = Calendar._TT["DAY_FIRST"].replace("%s", Calendar._DN[realday]);
			cell.navtype = 100;
			cell.calendar = this;
			cell.fdow = realday;
			Calendar._add_evs(cell);
		}
		if (weekend.indexOf(realday.toString()) != -1) {
			//Zs修改周末文字颜色
			Calendar.addClass(cell, "weekend");
			//Calendar.addClass(cell, "weekend");
		}
		cell.innerHTML =Calendar._SDN[(i + fdow) % 7];
		cell = cell.nextSibling;
	}
};

/** Internal function.  Hides all combo boxes that might be displayed. */
Calendar.prototype._hideCombos = function () {
	this.monthsCombo.style.display = "none";
	//this.yearsCombo.style.display = "none";
	this.checkYear.style.display="none";
};
/** Internal function.  Starts dragging the element. */
Calendar.prototype._dragStart = function (ev) {
	if (this.dragging) {
		return;
	}
	this.dragging = true;
	var posX;
	var posY;
	if (Calendar.is_ie) {
		posY = window.event.clientY + document.body.scrollTop;
		posX = window.event.clientX + document.body.scrollLeft;
	} else {
		posY = ev.clientY + window.scrollY;
		posX = ev.clientX + window.scrollX;
	}
	var st = this.element.style;
	this.xOffs = posX - parseInt(st.left);
	this.yOffs = posY - parseInt(st.top);
	with (Calendar) {
		addEvent(document, "mousemove", calDragIt);
		addEvent(document, "mouseup", calDragEnd);
	}
};

// BEGIN: DATE OBJECT PATCHES

/** Adds the number of days array to the Date object. */
Date._MD = new Array(31,28,31,30,31,30,31,31,30,31,30,31);

/** Constants used for time computations */
Date.SECOND = 1000 /* milliseconds */;
Date.MINUTE = 60 * Date.SECOND;
Date.HOUR   = 60 * Date.MINUTE;
Date.DAY    = 24 * Date.HOUR;
Date.WEEK   =  7 * Date.DAY;

Date.parseDate = function(str, fmt) {
	var today = new Date();
	var y = 0;
	var m = -1;
	var d = 0;
	var a = str.split(/\W+/);
	var b = fmt.match(/%./g);
	var i = 0, j = 0;
	var hr = 0;
	var min = 0;
	var sec = 0;
	for (i = 0; i < a.length; ++i) {
		if (!a[i])
			continue;
		switch (b[i]) {
		    case "%d":
		    case "%e":
			d = parseInt(a[i], 10);
			break;

		    case "%m":
			m = parseInt(a[i], 10) - 1;
			break;

		    case "%Y":
		    case "%y":
			y = parseInt(a[i], 10);
			(y < 100) && (y += (y > 29) ? 1900 : 2000);
			break;

		    case "%b":
		    case "%B":
			for (j = 0; j < 12; ++j) {
				if (Calendar._MN[j].substr(0, a[i].length).toLowerCase() == a[i].toLowerCase()) { m = j; break; }
			}
			break;

		    case "%H":
		    case "%I":
		    case "%k":
		    case "%l":
			hr = parseInt(a[i], 10);
			break;

		    case "%P":
		    case "%p":
			if (/pm/i.test(a[i]) && hr < 12)
				hr += 12;
			else if (/am/i.test(a[i]) && hr >= 12)
				hr -= 12;
			break;

		    case "%M":
			min = parseInt(a[i], 10);
			case "%S":
			case "%s":
			sec = parseInt(a[i], 10);
			break;
		}
	}
	if (isNaN(y)) y = today.getFullYear();
	if (isNaN(m)) m = today.getMonth();
	if (isNaN(d)) d = today.getDate();
	if (isNaN(hr)) hr = today.getHours();
	if (isNaN(min)) min = today.getMinutes();
	if (isNaN(sec)) sec = today.getSeconds();
	
	if (y != 0 && m != -1 && d != 0){
		return new Date(y, m, d, hr, min, sec);
	}
	y = 0; m = -1; d = 0;
	for (i = 0; i < a.length; ++i) {
		if (a[i].search(/[a-zA-Z]+/) != -1) {
			var t = -1;
			for (j = 0; j < 12; ++j) {
				if (Calendar._MN[j].substr(0, a[i].length).toLowerCase() == a[i].toLowerCase()) { t = j; break; }
			}
			if (t != -1) {
				if (m != -1) {
					d = m+1;
				}
				m = t;
			}
		} else if (parseInt(a[i], 10) <= 12 && m == -1) {
			m = a[i]-1;
		} else if (parseInt(a[i], 10) > 31 && y == 0) {
			y = parseInt(a[i], 10);
			(y < 100) && (y += (y > 29) ? 1900 : 2000);
		} else if (d == 0) {
			d = a[i];
		}
	}
	if (y == 0)
		y = today.getFullYear();
	if (m != -1 && d != 0)
		return new Date(y, m, d, hr, min, sec);
	return today;
};

/** Returns the number of days in the current month */
Date.prototype.getMonthDays = function(month) {
	var year = this.getFullYear();
	if (typeof month == "undefined") {
		month = this.getMonth();
	}
	if (((0 == (year%4)) && ( (0 != (year%100)) || (0 == (year%400)))) && month == 1) {
		return 29;
	} else {
		return Date._MD[month];
	}
};

/** Returns the number of day in the year. */
Date.prototype.getDayOfYear = function() {
	var now = new Date(this.getFullYear(), this.getMonth(), this.getDate(), 0, 0, 0);
	var then = new Date(this.getFullYear(), 0, 0, 0, 0, 0);
	var time = now - then;
	return Math.floor(time / Date.DAY);
};

/** Returns the number of the week in year, as defined in ISO 8601. */
Date.prototype.getWeekNumber = function() {
	//var d = new Date(this.getFullYear(), this.getMonth(), this.getDate(), 0, 0, 0);
	//var DoW = d.getDay();
	//d.setDate(d.getDate() - (DoW + 6) % 7 + 3); // Nearest Thu
	//var ms = d.valueOf(); // GMT
	//d.setMonth(0);
	//d.setDate(4); // Thu in Week 1
	//return Math.round((ms - d.valueOf()) / (7 * 864e5)) + 1;
	
	var d = new Date(this.getFullYear(), this.getMonth(), this.getDate(), 0, 0, 0);
	var DoW = d.getDay();
	var ms = d.valueOf(); // GMT
	d.setMonth(0);
	var i = 1;
	d.setDate(i); // Thu in Week 1
	while(d.getDay()!=DoW){
		i = i+1;
		d.setDate(i);
	}
	return Math.round((ms - d.valueOf()) / (7 * 864e5)) + 1;
};

/** Checks date and time equality */
Date.prototype.equalsTo = function(date) {
	return ((this.getFullYear() == date.getFullYear()) &&
		(this.getMonth() == date.getMonth()) &&
		(this.getDate() == date.getDate()) &&
		(this.getHours() == date.getHours()) &&
		(this.getMinutes() == date.getMinutes()));
};

/** Set only the year, month, date parts (keep existing time) */
Date.prototype.setDateOnly = function(date) {
	var tmp = new Date(date);
	this.setDate(1);
	this.setFullYear(tmp.getFullYear());
	this.setMonth(tmp.getMonth());
	this.setDate(tmp.getDate());
};

/** Prints the date in a string according to the given format. */
Date.prototype.print = function (str) {
	var m = this.getMonth();
	var d = this.getDate();
	var y = this.getFullYear();
	var wn = this.getWeekNumber();
	var w = this.getDay();
	var s = {};
	var hr = this.getHours();
	var pm = (hr >= 12);
	var ir = (pm) ? (hr - 12) : hr;
	var dy = this.getDayOfYear();
	if (ir == 0)
		ir = 12;
	var min = this.getMinutes();
	var sec = this.getSeconds();
	s["%a"] = Calendar._SDN[w]; // abbreviated weekday name [FIXME: I18N]
	s["%A"] = Calendar._DN[w]; // full weekday name
	s["%b"] = Calendar._SMN[m]; // abbreviated month name [FIXME: I18N]
	s["%B"] = Calendar._MN[m]; // full month name
	// FIXME: %c : preferred date and time representation for the current locale
	s["%C"] = 1 + Math.floor(y / 100); // the century number
	s["%d"] = (d < 10) ? ("0" + d) : d; // the day of the month (range 01 to 31)
	s["%e"] = d; // the day of the month (range 1 to 31)
	// FIXME: %D : american date style: %m/%d/%y
	// FIXME: %E, %F, %G, %g, %h (man strftime)
	s["%H"] = (hr < 10) ? ("0" + hr) : hr; // hour, range 00 to 23 (24h format)
	s["%I"] = (ir < 10) ? ("0" + ir) : ir; // hour, range 01 to 12 (12h format)
	s["%j"] = (dy < 100) ? ((dy < 10) ? ("00" + dy) : ("0" + dy)) : dy; // day of the year (range 001 to 366)
	s["%k"] = hr;		// hour, range 0 to 23 (24h format)
	s["%l"] = ir;		// hour, range 1 to 12 (12h format)
	s["%m"] = (m < 9) ? ("0" + (1+m)) : (1+m); // month, range 01 to 12
	s["%M"] = (min < 10) ? ("0" + min) : min; // minute, range 00 to 59
	s["%n"] = "\n";		// a newline character
	s["%p"] = pm ? "PM" : "AM";
	s["%P"] = pm ? "pm" : "am";
	// FIXME: %r : the time in am/pm notation %I:%M:%S %p
	// FIXME: %R : the time in 24-hour notation %H:%M
	s["%s"] = Math.floor(this.getTime() / 1000);
	s["%S"] = (sec < 10) ? ("0" + sec) : sec; // seconds, range 00 to 59
	s["%t"] = "\t";		// a tab character
	// FIXME: %T : the time in 24-hour notation (%H:%M:%S)
	s["%U"] = s["%W"] = s["%V"] = (wn < 10) ? ("0" + wn) : wn;
	s["%u"] = w + 1;	// the day of the week (range 1 to 7, 1 = MON)
	s["%w"] = w;		// the day of the week (range 0 to 6, 0 = SUN)
	// FIXME: %x : preferred date representation for the current locale without the time
	// FIXME: %X : preferred time representation for the current locale without the date
	s["%y"] = ('' + y).substr(2, 2); // year without the century (range 00 to 99)
	s["%Y"] = y;		// year with the century
	s["%%"] = "%";		// a literal '%' character

	var re = /%./g;
	if (!Calendar.is_ie5 && !Calendar.is_khtml)
		return str.replace(re, function (par) { return s[par] || par; });

	var a = str.match(re);
	for (var i = 0; i < a.length; i++) {
		var tmp = s[a[i]];
		if (tmp) {
			re = new RegExp(a[i], 'g');
			str = str.replace(re, tmp);
		}
	}
    
	return str;
};

Date.prototype.__msh_oldSetFullYear = Date.prototype.setFullYear;
Date.prototype.setFullYear = function(y) {
	var d = new Date(this);
	d.__msh_oldSetFullYear(y);
	if (d.getMonth() != this.getMonth())
		this.setDate(28);
	this.__msh_oldSetFullYear(y);
};

// END: DATE OBJECT PATCHES


// global object that remembers the calendar
window._dynarch_popupCalendar = null;

////////////////////////////////////////
// ** I18N

// Calendar EN language
// Author: Mihai Bazon, <mishoo@infoiasi.ro>
// Encoding: any
// Translator : Niko <nikoused@gmail.com>
// Distributed under the same terms as the calendar itself.

// For translators: please use UTF-8 if possible.  We strongly believe that
// Unicode is the answer to a real internationalized world.  Also please
// include your contact information in the header, as can be seen above.

// full day names
Calendar._DN = new Array
(RIA_I18N.form.calendar.full_Sunday,//\u5468\u65e5
 RIA_I18N.form.calendar.full_Monday,//\u5468\u4e00
 RIA_I18N.form.calendar.full_Tuesday,//\u5468\u4e8c
 RIA_I18N.form.calendar.full_Wednesday,//\u5468\u4e09
 RIA_I18N.form.calendar.full_Thursday,//\u5468\u56db
 RIA_I18N.form.calendar.full_Firday,//\u5468\u4e94
 RIA_I18N.form.calendar.full_Saturday,//\u5468\u516d
 RIA_I18N.form.calendar.full_Sunday);//\u5468\u65e5

// Please note that the following array of short day names (and the same goes
// for short month names, _SMN) isn't absolutely necessary.  We give it here
// for exemplification on how one can customize the short day names, but if
// they are simply the first N letters of the full name you can simply say:
//
//   Calendar._SDN_len = N; // short day name length
//   Calendar._SMN_len = N; // short month name length
//
// If N = 3 then this is not needed either since we assume a value of 3 if not
// present, to be compatible with translation files that were written before
// this feature.

// short day names
Calendar._SDN = new Array
(RIA_I18N.form.calendar.short_Sunday,//
 RIA_I18N.form.calendar.short_Monday,
 RIA_I18N.form.calendar.short_Tuesday,
 RIA_I18N.form.calendar.short_Wednesday,
 RIA_I18N.form.calendar.short_Thursday,
 RIA_I18N.form.calendar.short_Firday,
 RIA_I18N.form.calendar.short_Saturday,
 RIA_I18N.form.calendar.short_Sunday);

// full month names
Calendar._MN = new Array
(RIA_I18N.form.calendar.full_January,
 RIA_I18N.form.calendar.full_February,
 RIA_I18N.form.calendar.full_March,
 RIA_I18N.form.calendar.full_April,
 RIA_I18N.form.calendar.full_May,
 RIA_I18N.form.calendar.full_June,
 RIA_I18N.form.calendar.full_July,
 RIA_I18N.form.calendar.full_August,
 RIA_I18N.form.calendar.full_September,
 RIA_I18N.form.calendar.full_October,
 RIA_I18N.form.calendar.full_November,
 RIA_I18N.form.calendar.full_December);

// short month names
Calendar._SMN = new Array
(RIA_I18N.form.calendar.short_January,
 RIA_I18N.form.calendar.short_February,
 RIA_I18N.form.calendar.short_March,
 RIA_I18N.form.calendar.short_April,
 RIA_I18N.form.calendar.short_May,
 RIA_I18N.form.calendar.short_June,
 RIA_I18N.form.calendar.short_July,
 RIA_I18N.form.calendar.short_August,
 RIA_I18N.form.calendar.short_September,
 RIA_I18N.form.calendar.short_October,
 RIA_I18N.form.calendar.short_November,
 RIA_I18N.form.calendar.short_December);

// tooltips
Calendar._TT = {};
Calendar._TT["INFO"] = RIA_I18N.form.calendar.about;

Calendar._TT["ABOUT"] =
"   DHTML \u65e5\u8d77/\u65f6\u95f4\u9009\u62e9\u63a7\u4ef6\n" +
"(c) dynarch.com 2002-2005 / Author: Mihai Bazon\n" + // don't translate this this ;-)
"For latest version visit: \u6700\u65b0\u7248\u672c\u8bf7\u767b\u9646http://www.dynarch.com/projects/calendar/\u5bdf\u770b\n" +
"\u9075\u5faaGNU LGPL.  \u7ec6\u8282\u53c2\u9605 http://gnu.org/licenses/lgpl.html" +
"\n\n" +
"\u65e5\u671f\u9009\u62e9:\n" +
"- \u70b9\u51fb\xab(\xbb)\u6309\u94ae\u9009\u62e9\u4e0a(\u4e0b)\u4e00\u5e74\u5ea6.\n" +
"- \u70b9\u51fb" + String.fromCharCode(0x2039) + "(" + String.fromCharCode(0x203a) + ")\u6309\u94ae\u9009\u62e9\u4e0a(\u4e0b)\u4e2a\u6708\u4efd.\n" +
"- \u957f\u65f6\u95f4\u6309\u7740\u6309\u94ae\u5c06\u51fa\u73b0\u66f4\u591a\u9009\u62e9\u9879.";
Calendar._TT["ABOUT_TIME"] = "\n\n" +
"\u65f6\u95f4\u9009\u62e9:\n" +
"-\u5728\u65f6\u95f4\u90e8\u5206(\u5206\u6216\u8005\u79d2)\u4e0a\u5355\u51fb\u9f20\u6807\u5de6\u952e\u6765\u589e\u52a0\u5f53\u524d\u65f6\u95f4\u90e8\u5206(\u5206\u6216\u8005\u79d2)\n" +
"-\u5728\u65f6\u95f4\u90e8\u5206(\u5206\u6216\u8005\u79d2)\u4e0a\u6309\u4f4fShift\u952e\u540e\u5355\u51fb\u9f20\u6807\u5de6\u952e\u6765\u51cf\u5c11\u5f53\u524d\u65f6\u95f4\u90e8\u5206(\u5206\u6216\u8005\u79d2).";

Calendar._TT["PREV_YEAR"] = RIA_I18N.form.calendar.prev_year;
Calendar._TT["PREV_MONTH"] = RIA_I18N.form.calendar.prev_month;
Calendar._TT["GO_TODAY"] = RIA_I18N.form.calendar.go_today;
Calendar._TT["NEXT_MONTH"] = RIA_I18N.form.calendar.next_month;
Calendar._TT["NEXT_YEAR"] = RIA_I18N.form.calendar.next_year;
Calendar._TT["SEL_DATE"] = RIA_I18N.form.calendar.sel_date;
Calendar._TT["DRAG_TO_MOVE"] = RIA_I18N.form.calendar.drag_to_move;
Calendar._TT["PART_TODAY"] = RIA_I18N.form.calendar.part_today;

// the following is to inform that "%s" is to be the first day of week
// %s will be replaced with the day name.
Calendar._TT["DAY_FIRST"] = RIA_I18N.form.calendar.day_first;

// This may be locale-dependent.  It specifies the week-end days, as an array
// of comma-separated numbers.  The numbers are from 0 to 6: 0 means Sunday, 1
// means Monday, etc.
Calendar._TT["WEEKEND"] = "0,6";

Calendar._TT["CLOSE"] = RIA_I18N.form.calendar.close;
Calendar._TT["TODAY"] = RIA_I18N.form.calendar.today;
Calendar._TT["TIME_PART"] = RIA_I18N.form.calendar.time_part;

// date formats
Calendar._TT["DEF_DATE_FORMAT"] = RIA_I18N.form.calendar.def_date_format;
Calendar._TT["TT_DATE_FORMAT"] = RIA_I18N.form.calendar.tt_date_format;

Calendar._TT["WK"] = RIA_I18N.form.calendar.wk;
Calendar._TT["TIME"] = RIA_I18N.form.calendar.time;
}

dojo.provide("unieap.form.calendarYM");
dojo.require("unieap.form.FormWidget");
dojo.declare("unieap.form.calendarYM",unieap.form.FormWidget,
				{
		// 用户属性配置接口
		month:null,
		year:null,
		DateYMTextBox:null,
		widget:null,
		giYear:null,
		giMonth:null,
		yearIs:false,
		monthIs:false,
		gdCtrl: null,
		dates: new Date(),	
		select:null,
		currentMonthNode:null,
		currentYearNode:null,
		dateFormat : "%Y-%m-%d",
		UserInterfaces : dojo.mixin( {},
		unieap.form.FormWidget.prototype.UserInterfaces),

		templateString : "<div class=\"DateTextBox_div\">"
				+ "<table   class=\"DateTextBox_table\" >"
				+ "<tr>"
				+ "<td class=\"DateTextBox_tds\">"
				+ "<div class=\"startEndYears\" dojoAttachPoint='startEndYears'>2009-2018</div>"
				+ "<table dojoAttachPoint=\"tableYear\" id=\"yearT\" class=\"yearT\">"
				+ "<tr class=\"DateTextBox_tr\">"
				+ "<td  class=\"preTenYear\" dojoAttachPoint='preTenYear' dojoAttachEvent=\"onclick:DelYear\"><i class ='iconfont icon-left_doublearrow'></i></td>"
				+ "<td  class=\"nextTenYear\" dojoAttachPoint='nextTenYear' dojoAttachEvent=\"onclick:AddYear\"><i class ='iconfont icon-right_doublearrow'></i></td>"
				+ "</tr>"
				+ "<tr>"
				+ "<td dojoAttachPoint=\"tdy0\" minyear=\"minYear\" dojoAttachEvent=\"onclick:ChangeYear\" class ='DateTextBox_td'>2009</td>"
				+ "<td dojoAttachPoint=\"tdy1\" dojoAttachEvent=\"onclick:ChangeYear\" class ='DateTextBox_td'>2010</td>"
				+ "</tr>"
				+ "<tr>"
				+ "<td dojoAttachPoint=\"tdy2\" dojoAttachEvent=\"onclick:ChangeYear\" class ='DateTextBox_td'>2011</td>"
				+ "<td dojoAttachPoint=\"tdy3\" dojoAttachEvent=\"onclick:ChangeYear\" class ='DateTextBox_td'>2012</td>"
				+ "</tr>"
				+ "<tr>"
				+ "<td dojoAttachPoint=\"tdy4\" dojoAttachEvent=\"onclick:ChangeYear\" class ='DateTextBox_td'>2013</td>"
				+ "<td dojoAttachPoint=\"tdy5\" dojoAttachEvent=\"onclick:ChangeYear\" class ='DateTextBox_td'>2014</td>"
				+ "</tr>"
				+ "<tr>"
				+ "<td dojoAttachPoint=\"tdy6\" dojoAttachEvent=\"onclick:ChangeYear\" class ='DateTextBox_td'>2015</td>"
				+ "<td dojoAttachPoint=\"tdy7\" dojoAttachEvent=\"onclick:ChangeYear\" class ='DateTextBox_td'>2016</td>"
				+ "</tr>"
				+ "<tr>"
				+ "<td dojoAttachPoint=\"tdy8\" dojoAttachEvent=\"onclick:ChangeYear\" class ='DateTextBox_td'>2017</td>"
				+ "<td dojoAttachPoint=\"tdy9\" maxyear=\"maxYear\" dojoAttachEvent=\"onclick:ChangeYear\" class ='DateTextBox_td'>2018</td>"
				+ "</tr>"
				+ "</table>"
				+ "</td>"
				+ "<td class=\"DateTextBox_tds\">"
				+ "<table dojoAttachPoint=\"tableMonth\" id=\"monthT\" class=\"monthT\">"
				+ "<tr>"
				+ "<td  dojoAttachPoint=\"td1\" dojoAttachEvent=\"onclick:ChangeMonth\"  class ='DateTextBox_td'>1月</td>"
				+ "<td  dojoAttachPoint=\"td2\" dojoAttachEvent=\"onclick:ChangeMonth\" class ='DateTextBox_td'>2月</td>"
				+ "</tr>"
				+ "<td  dojoAttachPoint=\"td3\" dojoAttachEvent=\"onclick:ChangeMonth\" class ='DateTextBox_td'>3月</td>"
				+ "<td  dojoAttachPoint=\"td4\" dojoAttachEvent=\"onclick:ChangeMonth\" class ='DateTextBox_td'>4月</td>"
				+ "<tr>"
				+ "<td dojoAttachPoint=\"td5\" dojoAttachEvent=\"onclick:ChangeMonth\" class ='DateTextBox_td'>5月</td>"
				+ "<td dojoAttachPoint=\"td6\" dojoAttachEvent=\"onclick:ChangeMonth\" class ='DateTextBox_td'>6月</td>"
				+ "</tr>"
				+ "<td dojoAttachPoint=\"td7\" dojoAttachEvent=\"onclick:ChangeMonth\" class ='DateTextBox_td'>7月</td>"
				+ "<td dojoAttachPoint=\"td8\" dojoAttachEvent=\"onclick:ChangeMonth\" class ='DateTextBox_td'>8月</td>"
				+ "<tr>"
				+ "<td dojoAttachPoint=\"td9\" dojoAttachEvent=\"onclick:ChangeMonth\" class ='DateTextBox_td'>9月</td>"
				+ "<td dojoAttachPoint=\"td10\" dojoAttachEvent=\"onclick:ChangeMonth\" class ='DateTextBox_td'>10月</td>"
				+ "</tr>"
				+ "<tr>"
				+ "<td dojoAttachPoint=\"td11\" dojoAttachEvent=\"onclick:ChangeMonth\" class ='DateTextBox_td'>11月</td>"
				+ "<td dojoAttachPoint=\"td12\" dojoAttachEvent=\"onclick:ChangeMonth\" class ='DateTextBox_td'>12月</td>"
				+ "</tr>"
				+ "</table>"
				+ "</td>"
				+ "</tr>"
				+ "<tr>"
				+ "<td class=\"DateTextBox_tdright\">"
				+ "<button class=\"DateTextBox_button\" dojoAttachPoint=\"DateTextBox_button\" dojoAttachEvent=\"onclick:fSetDate\" >确定</button>"
				+ "</td>"
				+ "<td class=\"DateTextBox_tdleft\">"
				+ "<button class=\"DateTextBox_button\" dojoAttachPoint=\"DateTextBox_button\" dojoAttachEvent=\"onclick:fHideCalendar\" >取消</button>"
				+ "</td>" + "</tr>" + "</table>" + "</div>",

		postCreate : function() {	
			this.inherited(arguments);
		},				
		ChangeMonth : function(evt) {
			var node = evt.target || evt.srcElement;	

			if(this.currentMonthNode!=null){		
				this.currentMonthNode.style.background="#ffffff";
				this.currentMonthNode.style.color="#000";
				this.currentMonthNode.removeAttribute("currentMounth");
			}	 				
	    	node.style.background = "#4e92f5";	
	    	node.style.color = "#fff";
	        	giMonth = "0"+node.innerHTML.substring(0, 1);
			if (node.innerHTML.length > 2) {
				giMonth = node.innerHTML.substring(0, 2);
			}
			if(this.currentYearNode.innerText){
				giYear = this.currentYearNode.innerText;
				this.dates.setFullYear(giYear);
			}
			this.dates.setMonth(giMonth-1);
			this.currentMonthNode=node;
			this.currentMonthNode.setAttribute("currentMounth","currentMounth");
			this.monthIs = true;
			// 添加年月控件点击两次关闭判断
			if(!this.DateYMTextBox.endDateYMClose){
				if($(this.DateYMTextBox.domNode).hasClass("end-date-popup")){
					this.DateYMTextBox.endDateYMClose = true;
				}
				this.DateYMTextBox.endDateYMClose = true;
			}
			this.fSetDate();
		},
		ChangeYear : function(evt) {
			var node = evt.target || evt.srcElement;
			
			if(this.currentYearNode!=null){		
				this.currentYearNode.style.background="#ffffff";
				this.currentYearNode.style.color="#000";
				this.currentYearNode.removeAttribute("currentYear");
			}	
			node.style.background = "#4e92f5";
			node.style.color = "#fff";
			giYear = node.innerHTML.substring(0, 4);
			if(giMonth)
			this.dates.setMonth(giMonth-1);
			this.dates.setFullYear(giYear);
			this.currentYearNode=node;
			this.currentYearNode.setAttribute("currentYear","currentYear");
			this.yearIs = true;
			this.fSetDate();
		},

		fSetDate : function() {
			this.callHandler();
			if(this.yearIs && this.monthIs){
				this.fHideCalendar();
				this.yearIs = false;
				this.monthIs = false;
			}
			
		},
				
		fHideCalendar : function() {
			this.DateYMTextBox.close();						
		},
		fSetYearMon : function(date) {
			giYear=date.getFullYear();
			giMonth=date.getMonth()+1;	
			_this=this;
			var nodes=null;				
            dojo.query("td ",this.tableMonth).forEach(function(node,i){
	         	var month;
	         	if(node.innerHTML.length>2){
	         		month=node.innerHTML.substring(0,2);
	         	}else{
	         		month=node.innerHTML.substring(0,1);
	         	}
	         	node.style.borderRadius="2px";
	         	if(month==giMonth){
	         	   node.style.background="#4e92f5";
	         	  node.style.color="#fff";
	         	   _this.currentMonthNode=node;
	         	  _this.currentMonthNode.setAttribute("currentMounth","currentMounth");
	         	}else{         		
	         		node.style.background="#ffffff";
	         		node.style.color="#000";
	         		node.removeAttribute("currentMounth");
	         	}
           });
           var sub=null;  
           dojo.query("td ",this.tableYear).forEach(function(node,i){
			 	if(i>1){
			 		node.style.borderRadius="2px";
		         	var year = node.innerHTML.substring(3,4);			         			         	     	
		         	if(year==(giYear%10)){
		         		sub=giYear-parseInt(node.innerHTML);
		         	   node.style.background="#4e92f5";
		         	  node.style.color="#fff";
		         	   _this.currentYearNode=node;
		         	  _this.currentYearNode.setAttribute("currentYear","currentYear");
		         	}else{         		
		         		node.style.background="#ffffff";
		         		node.style.color="#000";
		         		node.removeAttribute("currentYear");
		         	}
			 	}
           });               
			 dojo.query("td ",this.tableYear).forEach(function(node,i){
			 	if(i>1){
		         	node.innerHTML=parseInt(node.innerHTML)+sub;
			 	}
           });
            var minYear = dojo.query("td ",this.tableYear)[2].innerHTML,
                tableYear_len=dojo.query("td ",this.tableYear).length,
                maxYear = dojo.query("td ",this.tableYear)[tableYear_len-1].innerHTML;

            var startEndYears = minYear + '-' + maxYear;
            $(this.domNode).find('.startEndYears').html(startEndYears);
			
			if(this.widget.getDisplayFormatter().getFormat()!=null){					
			    this.dateFormat = this.widget._parseDateFormat(this.widget.getDisplayFormatter().getFormat())											
			}
			dates = date;						
		},
		AddYear : function() {
			// 新增定义计算年翻页时计算开始年到结束年
			var minYear = "",
				maxYear = "",
				_this = $(this.domNode);
			 dojo.query("td ",this.tableYear).forEach(function(node,i){
				 node.style.color="#000";
			 	if(i>1){
		         	node.innerHTML=parseInt(node.innerHTML)+10;
		         	// 新增变量赋值
		         	minYer = _this.find("td[minyear='minYear']").text();
		         	maxYer = _this.find("td[maxyear='maxYear']").text();
		         	node.style.borderRadius="2px";
		         	var year = node.innerHTML.substring(3,4);			         			         	     	
		         	if(node.innerHTML==giYear){
		         		sub=giYear-parseInt(node.innerHTML);
		         	   node.style.background="#4e92f5";
		         	  node.style.color="#fff";
		         	   _this.currentYearNode=node;
		         	  _this.currentYearNode.setAttribute("currentYear","currentYear");
		         	  
		         	}else{         		
		         		node.style.background="#ffffff";
		         		node.style.color="#000";
		         		node.removeAttribute("currentYear");
		         	}
			 	}
           });
			 // 新增年翻页时计算开始年到结束年
			 var startEndYears = minYer + '-' + maxYer;
			 $(this.domNode).find('.startEndYears').html(startEndYears)
		},
		DelYear : function() {
			// 新增定义计算年翻页时计算开始年到结束年
			var minYear = "",
				maxYear = "",
				_this = $(this.domNode);
			dojo.query("td ",this.tableYear).forEach(function(node,i){
				node.style.color="#000";
			 	if(i>1){
		         	node.innerHTML=parseInt(node.innerHTML)-10;
		         	// 新增变量赋值
		         	minYer = _this.find("td[minyear='minYear']").text();
		         	maxYer = _this.find("td[maxyear='maxYear']").text();
		         	node.style.borderRadius="2px";
		         	var year = node.innerHTML.substring(3,4);			         			         	     	
		         	if(node.innerHTML==giYear){
		         		sub=giYear-parseInt(node.innerHTML);
		         	   node.style.background="#4e92f5";
		         	  node.style.color="#fff";
		         	   _this.currentYearNode=node;
		         	  _this.currentYearNode.setAttribute("currentYear","currentYear");
		         	}else{         		
		         		node.style.background="#ffffff";
		         		node.style.color="#000";
		         		node.removeAttribute("currentYear");
		         	}
			 	}
           });
			// 新增年翻页时计算开始年到结束年
			 var startEndYears = minYer + '-' + maxYer;
			$(this.domNode).find('.startEndYears').html(startEndYears);
		},
		callHandler :function () {
			this.DateYMTextBox._selected(this, this.print(this.dateFormat));						
		},
		print : function (str) {
			var m = this.dates.getMonth();
			var d = this.dates.getDate();
			var y = this.dates.getFullYear();
		
			var w = this.dates.getDay();
			var s = {};
			var hr = this.dates.getHours();
	
			s["%d"] = (d < 10) ? ("0" + d) : d; // the day of the month (range 01 to 31)
		
			s["%m"] = (m < 9) ? ("0" + (1+m)) : (1+m); // month, range 01 to 12
		
			s["%Y"] = y;		// year with the century
			s["%%"] = "%";		// a literal '%' character

			var re = /%./g;
		
			var a = str.match(re);
			
			for (var i = 0; i < a.length; i++) {
				var tmp = s[a[i]];
				if (tmp) {
					re = new RegExp(a[i], 'g');
					str = str.replace(re, tmp);
				}
			}		    
			return str;
		}					
});


dojo.provide("unieap.form.DateYMTextBoxPopup");
dojo.require("unieap.form.Popup");
dojo.require("unieap.form.calendarYM");

dojo.declare("unieap.form.DateYMTextBoxPopup", unieap.form.Popup, {
    /**
	 * @summary:
	 * 		弹出popup下拉内容
	 */
	calendarbox:null,
	giYear:null,
	giMonth:null,
    gdCurDate:null ,

	
    open: function(){
		this.domNode.style.background='transparent';
        if (this._isShowingNow) {
            this.close();
            return;
        }
        else {
    		if(!this.widget._canPopOpen()){
    			return;
    		}
    		
			dojo.style(this.popupcontainer,"borderWidth","0px");
			if(!this.calendarbox){
				var el = this.widget.inputNode;
				this.calendarbox = new unieap.form.calendarYM({DateYMTextBox:this});
				this.calendarbox.widget = this.widget;
				this.calendarbox.select = this._selected;
				this.calendarbox.sel = el;					
				this.popupcontainer.appendChild(this.calendarbox.domNode);								 			
			}
			
			var date;				
			if (this.widget.inputNode.value) {
				date = this.widget.getDisplayFormatter().parse(this.widget.inputNode.value);
			}
			else{
				date = (new Date()).getTime();
			}								                
            this.calendarbox.fSetYearMon(new Date(date));            
            this.inherited(arguments);
            if(!this.animate){                  
				dojo.style(this.domNode,'overflow','');				
			}

            // 下拉年月日历点击时添加遮罩层，当点击遮罩时下拉日历关闭  sxf 2019.8.10
            var _this = this;
            if(!$("#shadeDiv").length){
                $("body").prepend("<div id='shadeDiv' style='width:100%;height:100%;position:fixed;z-index:9999;background-color: #fff;opacity: 0;'></div>");
                $("#shadeDiv").click(function(){
                    $(".u-form-field",_this.widget.domNode).removeClass("border_bstyle");
                    _this.close();
                    $("#shadeDiv").remove();
                })
            }
        }
    },   
    _selected: function(cal, date){ 
        //点击日期选项即设置值
    	//var dateTime = cal.widget.getDisplayFormatter().parse(date);
		if(cal.widget.valueFormatter != null && cal.widget.valueFormatter.dataFormat != ""){
    		var dateTime = date;
		}else{
			var dateTime = cal.widget.getDisplayFormatter().parse(date);
		}
		if(cal.widget.setValue(dateTime)){
			cal.sel.value = date;
		}
		//@JiaX 触发年月onchange事件
		cal.widget._onBeforeBlur();
    },
	
	destroy : function(){
	} 
});



dojo.provide("unieap.form.DateTextBoxPopup");
dojo.require("unieap.form.Popup");
dojo.require("unieap.form.calendar");

dojo.declare("unieap.form.DateTextBoxPopup", unieap.form.Popup, {
    /**
     * @declaredClass:
     * 		unieap.form.DateTextBoxPopup
     * @summary:
     * 		日期的弹出框，继承自unieap.form.Popup，里面的内容是一个calendar的对象
     * @example:
     * |	<div dojoType="unieap.form.DateTextBox" popup="{firstDayOfWeek:2}">
     * |	</div>
     * 		在popup属性里配置日期弹出框的相关信息
     * @superClass:
     * 		unieap.form.Popup
     */
	
	
    _isShowingNow: false,
    
    
    height: "auto",
    
  	//设置弹出内容的宽度，默认值为auto，会根据内容自动进行调整
    width: "auto",
    
     //对应unieap.form.DateTextBox的引用，用户不需要设置
    widget: null,
    
    /**
     * @summary:
     * 		设置每周的第一天是周几，默认值为7，即以周日作为一周的开始
     * @type：
     * 		{number}
     * @default：
     * 		7
     * @example:
     * |	<div dojoType="unieap.form.DateTextBox" popup="{firstDayOfWeek:4}">
     * |	</div>
     * 		周四为一周的开始
     * @img:
     * 		images/form/date_firstDayOfWeek.png
     */
    firstDayOfWeek: 7,
    
    /**
     * @summary:
     * 		设置显示时间的制式，12或者24，默认为24
     * @description:
     * 		可以设置的值为12或24，将会分别显示12小时或24小时的时间
     * @type：
     * 		{number}
     * @example:
     * |	<div dojoType="unieap.form.DateTextBox" popup="{showsTime:24}">
     * |	</div>
     * 		在弹出的日期框下方显示24小时制的时间
     * @img:
     * 		images/form/date_showsTime.png
     */
    showsTime: "",
    
    /**
     * @summary:
     * 		设置是否显示其他月份的日期
     * @type：
     * 		{boolean}
     * @default:
     * 		true
     * @example:
     * |	<div dojoType="unieap.form.DateTextBox" popup="{showsOtherMonths:false}">
     * |	</div>
     * 		不显示其它月份的日期,否则灰色显示其它月份的日期
     * @img:
     * 		images/form/date_showsOtherMonths.png
     */
    showsOtherMonths: true,
    
    _calendar: null,
    
    
    constructor: function(params){
        dojo.mixin(this, params);
    },
	
	postMixInProperties:function(){
		this.width="auto";
		this.height="auto";
		this.inherited(arguments);
	},
    
    /**
	 * @summary:
	 * 		弹出popup下拉内容
	 */
    open: function(){
		this.domNode.style.background='transparent';
        if (this._isShowingNow) {
            this.close("open");
            return;
        }
        else {
    		if(!this.widget._canPopOpen()){
    			return;
    		}
            this._createCalendar();
			var date;
			if (this.widget.inputNode.value) {
				date = this.widget.getDisplayFormatter().parse(this.widget.inputNode.value);
			} else{
                // if(unieap.isUserStyle){
                    date = (new Date()).getTime();
                // }
                // 关闭时间控件图标点击赋值功能 chenH
                // if(unieap.isUserStyle != true){
                //     if(unieap.currentStyle != 'network'){
                        //this.widget.setValue(new Date(date));
                    // }
                // }
                //this.widget.setValue(new Date(date));

			}
            this._calendar.setDate(new Date(date));
			dojo.style(this.popupcontainer,"borderWidth","0px");
            this.popupcontainer.appendChild(this._calendar.element);
            this._calendar.showAt(0, 0);
			this.widget.inputNode.focus();
			this.widget.inputNode.select();
            this.inherited(arguments);
            if(!this.animate){
				dojo.style(this.domNode,'overflow','');
			}
            //JXin 下拉年月日历点击时添加遮罩层，当点击遮罩时下拉日历关闭(包括双日历)
            var _this = this;
            if(!$("#shadeDiv").length){
                $("body").prepend("<div id='shadeDiv' style='width:100%;height:100%;position:fixed;z-index:9999;background-color: #fff;opacity: 0;'></div>");
                $("#shadeDiv").click(function(){
                    $(".u-form-field",_this.widget.domNode).removeClass("border_bstyle");
                    _this.close();
                    $("#shadeDiv").remove();
                })
            }
        }
    },
    
    /**
	 * @summary:
	 * 		选中某个日期之后的回调方法。
	 * @type：
	 * 		{function}
	 * @param:	
	 * 		{object} date
	 * 		 选中的日期（格式化后）
	 * @example:
	 * |<script type="text/javascript">
	 * |	function select(date){
	 * |		alert(date);
	 * |	}
	 * |</script>
	 * |<div dojoType="unieap.form.DateTextBox" onChange="dateTextBox.change" popup="{onSelect:select}"	
	 * | 				displayFormatter="{dataFormat:'公元yyyy年MM月dd日'}" width="300px"></div>
	 * |</div>
	 */
	onSelect: function(date){
		
	},
	
	onAnimateEnd:function(){
		this.inherited(arguments);
		dojo.style(this.domNode,'overflow','');
	},
	
    _selected: function(cal, date){
        cal.sel.value = date;
        cal.widget.inputNode.focus();
		unieap.fireEvent(cal.widget,cal.widget.getPopup().onSelect,[date]);
        //点击日期选项即设置值
        // if(unieap.isUserStyle){
        //     if(unieap.currentStyle == 'network'){
                if(cal.widget.valueFormatter != null && cal.widget.valueFormatter.dataFormat != ""){
                    var dateTime = date;
                }else{
                    var dateTime = cal.widget.getDisplayFormatter().parse(date);
                }
                
                //选择上一年下一年，上个月下个月时不赋值
                if(cal.activeDiv.className.indexOf("nextmonth") == -1 && cal.activeDiv.className.indexOf("premonth") == -1 &&
    					cal.activeDiv.className.indexOf("preyear") == -1 && cal.activeDiv.className.indexOf("nextyear") == -1){
    					cal.widget.setValue(dateTime);
    				}
            // }
        // }
        if (cal.dateClicked && cal.singleClick) {
            cal.callCloseHandler();
        }
        cal.widget._onBeforeBlur();
    },
    _closeHandler: function(cal){
        cal.widget.getPopup().close();
    },
    _createCalendar: function(){
        if (!this._calendar) {
            var el = this.widget.inputNode;
            this._calendar = new Calendar(this.firstDayOfWeek, null, this._selected, this._closeHandler);
            this._calendar.singleClick = true;
            this._calendar.widget = this.widget;
			
            this._calendar.setRange(this.widget.range.min, this.widget.range.max);
            if (this.showsTime && typeof this.showsTime == "number") {
                this._calendar.showsTime = true;
                this._calendar.time24 = (this.showsTime == 24);
            }
            if (this.showsOtherMonths) {
                this._calendar.showsOtherMonths = true;
            }
            this._calendar.setDateFormat(this.widget._parseDateFormat(this.widget.getDisplayFormatter().getFormat()));
            this._calendar.create(this.popupcontainer);
            this._calendar.sel = el;
        }
        return this._calendar;
    },
	
	destroy : function(){
		this.clearNode();
		if(this._calendar){
			dojo.removeAttr(this._calendar.table, "calendar");
			var tds = this._calendar.table.getElementsByTagName("td");
			dojo.forEach(tds,function(td){
			   dojo.removeAttr(td, "calendar");
			   dojo.removeAttr(td, "caldate");
	        });
			var spans = this._calendar.table.getElementsByTagName("span");
			dojo.forEach(spans,function(span){
			   dojo.removeAttr(span, "calendar");
			   dojo.removeAttr(span, "caldate");
	        });
			this._calendar.destroy();
		}
		this.inherited(arguments);
	} 
});




if (!dojo._hasResource["unieap.form.DateTextBox"]) {
	dojo._hasResource["unieap.form.DateTextBox"] = true;
	dojo.provide("unieap.form.DateTextBox");
	dojo.require('unieap.form.TextBoxWithIcon');
	dojo.require("unieap.util.util");
	dojo.require("dojo.date");
	
	dojo.declare("unieap.form.DateTextBox", unieap.form.TextBoxWithIcon, {
		/**
		 * @declaredClass:
		 * 		unieap.form.DateTextBox
		 * @summary:
		 * 	    日期文本框,支持日期显示值格式化、日期值格式化
		 * @superClass:
		 * 		unieap.form.TextBoxWithIcon
		 * @img:
		 * 		images/form/datetextbox.png
		 * @example:
		 * |	${1}<div dojoType="unieap.form.DateTextBox" displayFormatter="{dataFormat:'yyyy年MM月dd日 HH时mm分ss秒'}"></div>
		 *	${1}点击日期框旁的按钮,日期框会显示当前时间的"年月日 时分秒",例如"2009年06月05日 16时29分30秒"
		 *	HH表示显示24进制的时间,如果想显示12进制,可以将dataFormat中的HH换为hh,此时,文本框右侧会自动出现am或者pm
		 *	使用日期框控件时,请注意如下事项:
		 *	1.当同时设置hh和HH时,HH将不被解析,只解析hh,例如'yyyy-MM-dd hhHH'将输出'2009-06-05 02HH pm';
		 *	2.控件只支持yyyy格式,yy或者YYYY等不支持
		 * @example:
		 * |	${2}<div dojoType="unieap.form.DateTextBox" value="20090605" displayFormatter="{dataFormat:'yyyy/MM/dd'}" valueFormatter="{dataFormat:'yyyyMMdd'}"></div>
		 *	${2}上述代码可以将字符串"20090605"格式化成"2009/06/05"
		 * @example:
		 * |	${3}<div dojoType="unieap.form.DateTextBox" popup="{showsTime:12}></div>
		 *	${3}运行上述代码,弹出日期框下方会显示当前的时间,例如'04:42:30 pm',showsTime可选择值为12和24
		 * 		
		 */
		
		//配置属性接口
		UserInterfaces : dojo.mixin({
			autoDate : "boolean",
			range : "object",
			elementNumber : "number",
			currentNode : "number",
			yearNumber : "number",
			dateYM:"boolean",
			type:"string"
		},
		unieap.form.TextBoxWithIcon.prototype.UserInterfaces),
		
		/**
		 * @summary：
		 *	当输入文本框内容为空并且鼠标焦点置入时,设置文本框是否显示当前时间。
		 * @description:
		 *	可以在global.js的unieap.widget.form.autoDate中配置全局默认值。
		 * @type：
		 * 	 {boolean}
		 * @default:
		 * 		true
		 */
		autoDate: unieap.widget.form.autoDate,
		
		
		iconClass: "u-calendar-icon",
		
		
		editFormatterClass: "unieap.form.DateDisplayFormatter",
		
		displayFormatterClass: "unieap.form.DateDisplayFormatter",
		
		valueFormatterClass: "unieap.form.DateValueFormatter",
		
		validatorClass: 'unieap.form.DateValidator',
		
		popupClass: 'unieap.form.DateTextBoxPopup',
		
		/**
		 * @summary:
		 * 		设置日期的选择范围
		 * @default:
		 * 		min:1900,max:2099
		 * @type:
		 * 		{object}
		 * @example
		 * |<div dojoType="unieap.form.DateTextBox" range="{min:2000,max:2010}"></div>
		 * 只可以选择在2000年到2010年的日期
		 */
		range: {
			min: 1900,
			max: 2099
		},
		
		/**
		 * @summary:
		 * 		设置是否点击日期输入框时弹出日期框
		 * @type:
		 * 		{boolean}
		 * @default:
		 * 		false
		 */	
		isClickPopup: (typeof(unieap.widget.form.dataTextBoxIsClickPopup) == 'undefined')?false:unieap.widget.form.dataTextBoxIsClickPopup,
		
		
		/**
		 * @summary:
		 * 		设置是否引用年月日期控件。dateYM为true时引用年月日期控件
		 * @default:
		 * 		false
		 * @type:
		 * 		boolean
		 * @example
		 * |<div dojoType="unieap.form.DateTextBox" dateYM ="true"></div>
		 * 只可以选择在2000年到2010年的日期
		 */
		dateYM:false,
		
		elementNumber: 6,
		currentNode: 0,
		yearNumber: 0,
		_displayFormat: "",
		/*  2018.8.13 sxf单双日历属性
		* @summary:
		 * 		设置日历引用单双日历
		 * 	@default:
		 * 		" "
		 * 	 @type:
		 * 		string
		 * 	datepicker 单日历
		 * 	rangepicker 双日历
		 * @example
		 * |<div dojoType="unieap.form.DateTextBox"  type="rangepicker"></div>
		*
		* */
        type:"",
		
		getEditFormatter:function(){
			return this.getDisplayFormatter();
		},
		
		postCreate: function(){
			if(this.dateYM){
			    this.editFormatterClass= "unieap.form.DateYMDisplayFormatter";
				this.displayFormatterClass= "unieap.form.DateYMDisplayFormatter";
				this.popupClass = "unieap.form.DateYMTextBoxPopup";
			}
			if(!this.displayFormatter){
				this.displayFormatter={};
			}
			this.inherited(arguments);
			dojo.removeClass(this.iconNode, ["u-textbox-icon","u-form-textbox-icon-normal"]);
			this._displayFormat = this.getDisplayFormatter().getFormat();
			this._parseFormat();
			dojo.addOnLoad(dojo.hitch(this,this._preDate));
			//2018.8.13 通过type属性判断单双日历
			if(this.type=="rangepicker"){
                dojo.addClass(this,"begin-end-style ");
                dojo.addClass(this.domNode,"begin-end-style ");
                //2018.7.13  sxf 双日历
                this._setDefault();
                this._setBeginAndEndDate();
			}

		},
		
		setDisabled:function(bool){
			if(bool){
				this.setIconClass('u-calendar-disabled');
				this.inherited(arguments);
			}else{
				this.setIconClass('u-calendar-icon');
				this.inherited(arguments);
			}
		},
		
		getValue:function(){
			
			var value = this.getText();
			value = this.getDisplayFormatter().parse(value);
			//如果value的值是长整形,判断原始值和当前值格式化后是否一样,如果一样就返回原始值
			//一个long型,例如1249031006562格式化成yyyy-MM-dd后,通过yyyy-MM-dd
			//还原成long型,会出现数据丢失的情况,例如562为毫秒,这个毫秒信息可能就会丢失
			//这样,还原后的long就成了1249031006000
			if(Number(value)){ 
				var binding=this.getBinding();
			  	var origValue=binding?binding.getOrigValue():this.origValue;
				if(origValue&&this.getDisplayFormatter().format(value)==this.getDisplayFormatter().format(origValue)){
					value=origValue;
				}
			}
			value = this.getValueFormatter().parse(value);
			return value;
		},
		
		updateDisplayText:function(){
			
            this._clearState();
            this._parsedFormat=null;
            this._displayFormat = this.getDisplayFormatter().getFormat();
            this._parseFormat();
            var popup=this.getPopup();
            popup._isShowingNow&&popup.close();
            popup._calendar&&popup._calendar.setDateFormat(this._parsedFormat);
            this.setText(this.getDisplayFormatter().format(this.getValue()));
            
        },
		
        //重写父类的select方法，因为父类的_onFocus方法会调用select方法
		//导致出现 bug U_EAP00008824 
		select:function(){
			var caller=arguments.callee.caller;
			if(caller.nom!="_onFocus"){
				this.focusNode&&this.focusNode.select();
			}
		},

		
		_preDate:function(){
			if (this.validator && this.validator.preDate) {
				var datebox=dijit.byId((this._rootID||"")+this.validator.preDate);
				datebox&&(datebox.getValidator().nextDate=this.id);
			}
		},
		
		_initElement: function(index, content, begin, end, min, max){
			this.elementNode[index] = content;
			this.elementBegin[index] = begin;
			this.elementEnd[index] = end;
			this.elementMin[index] = min;
			this.elementMax[index] = max;
		},
		_parseFormat: function(){
			this.elementNode = [];
			this.elementBegin = [];
			this.elementEnd = [];
			this.elementMax = [];
			this.elementMin = [];
			var formatString = this._parseDateFormat(this._displayFormat);
			var index = 0;
			var number = 0;
			var begin=0;
			for (var i = 0; i < formatString.length; i++) {
				if (formatString.charAt(i) == "%") {
					switch (formatString.charAt(i + 1)) {
						case "Y":
							begin = this._displayFormat.indexOf("yyyy");
							this._initElement(index, "yyyy", begin+1, begin+4, this.range.min, this.range.max);
							index++;
							break;
						case "m":
							begin = this._displayFormat.indexOf("MM");
							this._initElement(index, "MM", begin + 1, begin + 2, '01', 12);
							index++;
							break;
						case "d":
							begin = this._displayFormat.indexOf("dd");
							this._initElement(index, "dd", begin + 1, begin + 2, '01', 31);
							index++;
							break;
						case "H":
							begin = this._displayFormat.indexOf("HH");
							this._initElement(index, "HH", begin+1, begin + 2, 0, 23);
							index++;
							break;
						case "I":
							begin = this._displayFormat.indexOf("hh");
							this._initElement(index, "hh", begin+1, begin + 2, 1, 12);
							index++;
							break;
						case "M":
							begin = this._displayFormat.indexOf("mm");
							this._initElement(index, "mm", begin + 1, begin + 2, 00, 59);
							index++;
							break;
						case "S":
							begin = this._displayFormat.indexOf("ss");
							this._initElement(index, "ss", begin + 1, begin + 2, 00, 59);
							index++;
							break;
						case "P":
							begin=this._displayFormat.indexOf("am");
							this._initElement(index, "ap", begin + 1, begin + 2, 'am', 'pm');
							break;
						default:
							break;
					}
					number++;
				}
			}
			this.elementNumber = number;
		},
		_parseDateFormat: function(dateFormat){
			
			if (!dateFormat || typeof dateFormat != "string" || dateFormat.indexOf("%") != -1) {
				return "%Y-%m-%d %H:%M:%S";
			}
			
			if(this._parsedFormat){
				return this._parsedFormat;
			}
			var df = dateFormat;
			if (df.indexOf("yyyy") != -1) {
				df = df.replace(/yyyy/g, "%Y");
			}
			if (df.indexOf("MM") != -1) {
				df = df.replace(/MM/g, "%m");
			}
			if (df.indexOf("dd") != -1) {
				df = df.replace(/dd/g, "%d");
			}
			if(df.indexOf("hh")!=-1){
				df=df.replace(/hh/g,"%I"); //12进制显示时间
			}else if (df.indexOf("HH") != -1) {
				df = df.replace(/HH/g, "%H"); //24进制显示时间
			}
			if (df.indexOf("mm") != -1) {
				df = df.replace(/mm/g, "%M");
			}
			if (df.indexOf("ss") != -1) {
				df = df.replace(/ss/g, "%S");
			}
			
			if(df.indexOf('%I')!=-1){
				df=df+" %P"; //显示am或者pm
				//修改this._displayFormat值,便于查找am/pm
				this._displayFormat=this._displayFormat+" am";
			}
			
			this._parsedFormat=df;
			return df;
		},
		_textSelect: function(start, end){
			var length = end - start + 1;
			start = start < 1 ? 1 : start;
			length = length < 0 ? 0 : length;
			if (dojo.isIE) {
				var rngDate = this.textbox.createTextRange();
				rngDate.collapse();
				rngDate.moveStart('character', start - 1);
				rngDate.moveEnd('character', length);
				rngDate.select();
			}
			else {
				this.textbox.setSelectionRange(start - 1, end);
			}
		},
		_getCursorPos: function(){
			if (typeof(this.textbox.selectionStart) == "number") {
				return this.textbox.selectionStart + 1;
			}
			else {
				var textLen = this.textbox.value.length;
				var rngPos = document.selection.createRange();
				var rngDate = this.textbox.createTextRange();
				rngDate.collapse();
				if (rngPos.inRange(rngDate)) 
					return 1;
				for (var i = 2; i <= textLen + 1; i++) {
					rngDate.move('character', 1);
					if (rngPos.inRange(rngDate)) 
						return i;
				}
			}
		},
		_getText: function(start, end){
			return this.textbox.value.substr(start - 1, end - start + 1);
		},
		_setText: function(start, end, strValue){
			var b = true;
			
			if(start == 6 && end == 7 && strValue > "12"){
				strValue = "12";
			}
			if(start && end && strValue){
				this.textbox.value = this.textbox.value.substr(0, start - 1) + strValue + this.textbox.value.substr(end);
				// 针对xgrid滚动条添加输入日期选项即设置值
				
				var dateTime = null;
				var millisecondNumber=false;
				if(this.widget == undefined){
					if(this.valueFormatter){
						if(this.valueFormatter.dataFormat == ""){
							dateTime = this.getDisplayFormatter().parse(this.textbox.value);
							millisecondNumber=true;
						}else{
							dateTime = this.textbox.value
						}
					}else{
						dateTime = this.getDisplayFormatter().parse(this.textbox.value);
						millisecondNumber=true;
					}
				}else{
					if(this.widget.valueFormatter != null && this.widget.valueFormatter.dataFormat != ""){
						dateTime = this.textbox.value
					}else{
						dateTime = this.getDisplayFormatter().parse(this.textbox.value);
						millisecondNumber=true;
					}
				}
				//@JiaX 如果当前输入为月或日当两位数都输入后再赋值
				if(this.currentNode != 0 && this.count < 1){
					b = false;
				}
				if(b){
					var maxDateTime = millisecondNumber?new Date(this.elementMax.join('-')):this.elementMax.join('-');
					var minDateTime = millisecondNumber?new Date(this.elementMin.join('-')):this.elementMin.join('-');
					if(dateTime>maxDateTime){
						dateTime = maxDateTime;
					}else if(dateTime<minDateTime){
						dateTime=minDateTime;
					}
					this.setValue(dateTime);
				}
			}
		},
		_getSelectText: function(){
			return this._getText(this.elementBegin[this.currentNode], this.elementEnd[this.currentNode]);
		},
		_setSelectText: function(newValue, isLast){
			var textValue = this._getSelectText();
			
//			if (newValue.length != textValue.length) {
				newValue = '0000' + newValue;
				newValue = newValue.substr(newValue.length - textValue.length, newValue.length);
//			}
				
			this._setText(this.elementBegin[this.currentNode], this.elementEnd[this.currentNode], newValue);
			if (isLast) {
				this._selectNext();
			}
			else {
				this._textSelect(this.elementBegin[this.currentNode], this.elementEnd[this.currentNode]);
			}
		},
		_selectNext: function(){
			this._onRightClick();
		},
		_getElementMin: function(){
			return this.elementMin[this.currentNode];
		},
		_getElementMax: function(){
			if (this.elementMax[this.currentNode] == 31) 
				return this._getDayMax();
			else 
				return this.elementMax[this.currentNode];
		},
		_getDayMax: function(){
			var yearIndex, monthIndex,iYear,iMonth;
			for (var i = 0; i < this.elementNumber; i++) {
				if (this.elementNode[i] == "yyyy") {
					yearIndex = i;
				}else if (this.elementNode[i] == "MM") {
					monthIndex = i;
				}
			}
			if (yearIndex != 'undefined') {
				iYear = parseInt(this._getText(this.elementBegin[yearIndex], this.elementEnd[yearIndex]));
			}
			iMonth = parseInt(this._getText(this.elementBegin[monthIndex], this.elementEnd[monthIndex]), 10);
			var date = new Date(iYear, iMonth - 1, 1);
			return dojo.date.getDaysInMonth(date);
			
		},
		_doElemetValidator: function(){
			if (this.textbox.value != "") {
				for (var i = 0; i < this.elementNumber; i++) {
					if (this.elementNode[i] == "yyyy" || this.elementNode[i] == "MM" || this.elementNode[i] == "dd"||this.elementNode[i]=='hh') {
						var temp = this.currentNode;
						this.currentNode = i;
						var displayValue = parseInt(this._getText(this.elementBegin[i], this.elementEnd[i]),10);
						if (displayValue > this._getElementMax()) {
							this._setText(this.elementBegin[i], this.elementEnd[i], this._getElementMax());
						}
						if(displayValue < this._getElementMin()){
							this._setText(this.elementBegin[i], this.elementEnd[i], this._getElementMin());
						}
						this.currentNode = temp;
					}
				}
			}
		},
		_clearState: function(){
			this.yearNumber = 0;
			for (var i = 0; i < this.elementNode.length; i++) {
				var tn = "dateTextElementNode" + this.elementNode[this.currentNode];
				this[tn] = 0;
			}
		},
		_setAutoDate: function(){
			if (this.autoDate&&!this.disabled) {
				var date = new Date();
				var displayValue = unieap.dateFormat(date.getTime(), this._displayFormat);
				displayValue = displayValue.replace(/\-/g,"/");
				displayValue = displayValue.replace(/\~/g,"-");
				this.textbox.value = displayValue;
			}
		},
		
		////////////////////////////////内部事件///////////////////////////
		
		_getKeyPress: function(evt){
			var keyCode = evt.keyCode;
			var key = '';
			if (this._getSelectText() == this.textbox.value) {
				this._textSelect(this.elementBegin[0], this.elementEnd[0]);
				this.currentNode = 0;
			}
			if ((keyCode != 9) && (keyCode != 13)) 
				dojo.stopEvent(evt);
			if (keyCode >= 37 && keyCode <= 40) {
				if (keyCode == 37) 
					key = 'Left';
				if (keyCode == 38) 
					key = 'Up';
				if (keyCode == 39) 
					key = 'Right';
				if (keyCode == 40) 
					key = 'Down';
			}
			else 
				if (keyCode >= 48 && keyCode <= 57) {
					keyCode = keyCode - 48;
					key = '' + keyCode;
				}
				else 
					if (keyCode >= 96 && keyCode <= 105) {
						keyCode = keyCode - 96;
						key = '' + keyCode;
					}
					else 
						if (keyCode == 46 || keyCode == 8) {
							key = 'Delete';
						}
			return key;
		},
		_onDeleteClick: function(){
			this.textbox.value = "";
			this._clearState();
		},
		// _onKeyDown: function(evt){
		// 	if (13 != evt.keyCode && this.readOnly || this.disabled) {
		// 		return;
		// 	}
		// 	var key = this._getKeyPress(evt);
		//
		// 	if (key && "_on" + key + "Click" in this) {
		// 		this["_on" + key + "Click"]();
		// 	}
		// 	else
		// 		if (key && !isNaN(key)) {
		// 			//this._onNumberClick(key);
		// 			this._setInputRule(evt);
		// 		}
		// 		else {
		// 			this.inherited(arguments);
		// 		}
		// },
		_onKeyDown: function(evt){
			this._setInputRule(evt);
			/*
			单日期控件，回车时支持跳转到下一个输入框	
			*/
			switch(evt.keyCode){
				case dojo.keys.ENTER :
					this.fireDataChange();
					if(unieap.fireEvent(this,this.onEnter,[evt])==false) return;
					this._enter2Tab(evt);
					//U_EAP00028754
					break ;
				case dojo.keys.TAB :
					this.fireDataChange();
			this._enter2Tab(evt);
					break;
				case dojo.keys.BACKSPACE:
					//在IE8下，设置为文本框为readonly,但关闭依然可以置入
					//此时按住BACKSPACE键盘,页面会回退到上一页,这是ie浏览器本身的问题
					this.readOnly&&dojo.stopEvent(evt);
					unieap.fireEvent(this,this.onKeyDown,[evt]);
					break;
				default :
					unieap.fireEvent(this,this.onKeyDown,[evt]);
			}
			
		},
		//执行inputNode的onkeydown事件，触发tab键
		_enter2Tab : function(evt){
			if(!this.nextFocusId) { //U_EAP00029169
				(dojo.isIE<11)?(evt.keyCode = dojo.keys.TAB):dojo.byId('unieap_for_focus').focus();
			} else {
				//避免回车触发按钮的onclick事件
				dojo.stopEvent(evt);
		
				dijit.byId((this._rootID||"")+this.nextFocusId)||dijit.byId(this.nextFocusId)?this.processNextFocusId():dojo.byId("unieap_for_focus").focus();
		
			}
			unieap.fireEvent(this,this.onTab,[evt]);
		},
		//处理是am还是pm
		_processAP:function(text){
			if(text=='am'){
				this._setSelectText('pm');
			}else{
				this._setSelectText('am');
			}
			
		},
		_doAddOrPlus: function(operator){
			var text=this._getSelectText();;
			if(isNaN(text)){
				this._processAP(text);
				return;
			}
			var oldValue = parseInt(text,10);
			var newValue = operator == "add" ? oldValue + 1 : oldValue - 1;
			if (operator == "add" && newValue > this._getElementMax()) {
				newValue = this._getElementMin();
			}else if (newValue < this._getElementMin()) {
				newValue = this._getElementMax();
			}
			this._setSelectText(newValue);
		},
		_onUpClick: function(){
			this._doAddOrPlus("add");
		},
		_onDownClick: function(){
			this._doAddOrPlus("plus");
		},
		_doNavigate: function(operator){
			this._doElemetValidator();
			var index = this.currentNode;
			if (operator == "left") {
				if (this.currentNode == 0) 
					this._textSelect(this.elementBegin[0], this.elementEnd[0]);
				else {
					this._textSelect(this.elementBegin[index - 1], this.elementEnd[index - 1]);
					this.currentNode = index - 1;
				}
			}
			else {
				if (this.currentNode == (this.elementNumber - 1)) {
					this._textSelect(this.elementBegin[0], this.elementEnd[0]);
					this.currentNode = 0;
				}
				else {
					this._textSelect(this.elementBegin[index + 1], this.elementEnd[index + 1]);
					this.currentNode = index + 1;
				}
			}
			this._clearState();
			
		},
		_onLeftClick: function(){
			
			this._doNavigate("left");
			this.count = 0;
		},
		_onRightClick: function(){
			
			this._doNavigate("right");
			this.count = 0;
		},
		_checkYear: function(year){
			var y = parseInt(year);
			//@JiaX 当年四位全部输入后再进行判断，小于最小值取最小值，大于最大值取最大值
			if(y<this.range.min && this.count == 3){
				return this.range.min;
			}
			if(y>this.range.max && this.count == 3){
				return this.range.max;
			} 
			return year;
		},
		_onNumberClick: function(key){
			//@JiaX count是对输入次数的记录
			if (this._getSelectText() == "") {
				var date = new Date();
				this.textbox.value = unieap.dateFormat(date.getTime(), this._displayFormat);
//				//解决autoDate=false时，键盘输入的bug
//				if(this.autoDate) {return;}
			}
			if(dojo.indexOf(['am','pm'],this._getSelectText())>-1){
				this._onRightClick();
			}
			if (this.elementNode[this.currentNode] == "yyyy" || this.elementNode[this.currentNode] == "YYYY") {
				var oldValue = this._getSelectText();
				var oldLen = oldValue.length;
				var tmpStr = '0000000000';
//				var newValue = oldValue.substr(1, oldLen - 1) + key;
				//@JiaX 新输入年从前往后依次输入
				var newValue = oldValue.substr(0, this.count) + key + oldValue.substr(this.count+1, oldLen-this.count+1);
				newValue = this._checkYear(newValue);
				if (this.yearNumber == 0) {
					this.oldYear = oldValue;
//					newValue = tmpStr.substr(1, oldLen - 1) + key;
//					newValue = this._checkYear(newValue);
					this.yearNumber++;
					this._setSelectText(newValue);
					this.count++;
				}
				else 
					if (this.yearNumber < 3) {
						//var newValue = oldValue.substr(1, oldLen - 1) + key;
						var newValue = oldValue.substr(0, this.count) + key + oldValue.substr(this.count+1, oldLen-this.count+1);
						newValue = this._checkYear(newValue);
						this.yearNumber++;
						this._setSelectText(newValue);
						this.count++;
					}
					else 
						if (this.yearNumber == 3) {
							var te = newValue;
							if (parseInt(newValue, 10) > this._getElementMax() || parseInt(newValue, 10) < this._getElementMin()) {
								newValue = this.oldYear;
							}
							else {
//								newValue = oldValue.substr(1, oldLen - 1) + key;
								newValue = oldValue.substr(0, this.count) + key + oldValue.substr(this.count+1, oldLen-this.count+1);
							}
							newValue = this._checkYear(newValue);
							this._setSelectText(newValue, newValue == te);
							this.yearNumber = 0;
							this.count = 0;
						}
			}
			else {
				var tn = "dateTextElementNode" + this.elementNode[this.currentNode];
				var numb = this[tn];
				if (!numb) {
					numb = 0;
				}
				numb = numb == 1 ? 0 : 1;
				this[tn] = numb;
				var oldValue = this._getSelectText();
				
				var oldLen = oldValue.length;
				var tmpStr = '0000000000';
				//@JiaX 新输入月、日从前往后依次输入拼接方式
				var newValue = oldValue.substr(0, this.count) + key + oldValue.substr(this.count+1, oldLen-this.count+1);
				var te = newValue;
				if(this.count == 1){
					var b = false;
					//@JiaX 当输入的月或日大于最大值时自动输入最大值，当输入的值小于最小值时自动输入最小值
					if (parseInt(newValue, 10) > this._getElementMax()) {
//						newValue = tmpStr.substr(1, this.count) + key;
						newValue = this._getElementMax();
						b = true;
					}
					if(parseInt(newValue, 10) < this._getElementMin()){
						newValue = this._getElementMin();
						b = true;
					}

					if (newValue == 0 && numb == 0 && (this.elementNode[this.currentNode] == "MM" || this.elementNode[this.currentNode] == "dd"||this.elementNode[this.currentNode] == "hh")) {
						this._setSelectText(newValue, false);
						return;
					}
					if (newValue != te) {
						numb == 0;
						this._setSelectText(newValue, b);
						this.count = 0;
						return;
					}
					this.count = 0;
					this._setSelectText(newValue, numb == 0);
				}else{
					this._setSelectText(newValue, numb == 0);
					this.count++;
				}
				
				
//				else {
//					newValue = oldValue.substr(1, oldLen - 1) + key;
//				}
				
				
				
				
				
			}
			
		},
		_setInputRule:function(evt){
        	if(!this.singDateEdit){
        		this.singDateEdit=true;
				if(!this.dateYM && this._displayFormat=="yyyy-MM-dd"){
					$('#'+evt.currentTarget.id).inputmask("9999-99-99");
				}else if(this.dateYM && this._displayFormat=="yyyy-MM"){
					$('#'+evt.currentTarget.id).inputmask("9999-99");
				}
			}

		},
		
		_onIconClick: function(evt) {
			if(!(this.readOnly&&unieap.global.datatextbox_notReadonlyPopup)&&!this.disabled&& unieap.fireEvent(this,this.onBeforeIconClick,[evt])) {
				unieap.fireEvent(this,this.onIconClick,[evt])
				var popup=this.getPopup();
				if(popup._isShowingNow){
					$(".u-form-field",this.domNode).removeClass("border_bstyle");
					popup.close()
				}else{
					$(".u-form-field",this.domNode).addClass("border_bstyle");
					popup.open();
					//JXin 下拉日历打开时点击其它地方关闭日历下拉
					$("body").one('mousedown',function(e){
						$(".u-form-field",this.domNode).removeClass("border_bstyle");
						 if(3 == e.which){
			            		popup.close();
						 }
			        });
					 //JXin 下拉年月日历点击时添加遮罩层，当点击遮罩时下拉日历关闭
					// if(!$("#shadeDiv").length){
					// 	$("body").prepend("<div id='shadeDiv' style='width:100%;height:100%;position:fixed;z-index:9999;background-color: #fff;opacity: 0;'></div>");
					// 	$("#shadeDiv").click(function(){
					// 		$(".u-form-field",this.domNode).removeClass("border_bstyle");
					// 		popup.close();
					// 		$("#shadeDiv").remove();
				 	// 	})
					// }
							
					//lht 只显示时分秒
					var float=$(this.domNode).hasClass('timeHM');
					if(float){
						$(popup.domNode).hide();
					}
				}
			}
		},

		_onClick: function(evt){
			
			if (this.readOnly || this.disabled) {
				return;
			}
			if(this.isClickPopup){
				var popup=this.getPopup();
				if(popup._isShowingNow){
					$(".u-form-field",this.domNode).removeClass("border_bstyle");
					popup.close()
				}else{
					$(".u-form-field",this.domNode).addClass("border_bstyle");
					popup.open()
				}
			}
			var iPos = this._getCursorPos();
			if (iPos < (this.elementBegin[0])) {
				this.currentNode = 0;
			}
			else 
				if (iPos >= (this.elementEnd[this.elementNumber - 1])) {
					this.currentNode = this.elementNumber - 1;
				}
				else {
					for (var i = 1; i <= this.elementNumber; i++) {
						if (iPos <= (this.elementEnd[i - 1]) + 1) {
							this.currentNode = i - 1;
							break;
						}
					}
				}
				
			this._textSelect(this.elementBegin[this.currentNode], this.elementEnd[this.currentNode]);
			this.inherited(arguments);

		},
		
		_onFocus: function(evt){
			this.count = 0;
			// $("input",this.domNode).css("color","#333");
			// if (!evt||typeof(evt)=="string") return;
			
			this._oText=this.getText();
			
			// 关闭时间控件默认赋值 chenH
	    	// if (this.textbox.value == "" && this.readOnly != true) {
			// 	this._setAutoDate();
			// }
			
			this.inherited(arguments);
		},
		_onBlur: function(evt){
			this.count = 0;
			if(this.dateYM && this.getPopup()._isShowingNow){
				return;
			}
			if (!evt||typeof(evt)=="string") return;
			
			this._doElemetValidator();
			
			this._clearState();
			
			this.inherited(arguments);
			
		},
		_onBeforeBlur: function(){
			var text=this.getText();
			if(text!=this._oText){
				this.fireDataChange();		
				this.onChange(this.getValue());
			}
			this._oText=text;
		},


        //2018.7.13  sxf 新增双日历
        _setDefault : function(){
        var _this = this;
        var dateBoxDom = this.domNode;
        setTimeout(function(){
			var clearInt = function(){
				if($(dateBoxDom).find(".u-form-textbox-input").val() != ''){
					//clearInterval(timeInt);
					return;
				}
			};

            // 默认添加前一个月时间
            if($(dateBoxDom).hasClass('default-pre-month')){
				clearInt();
                // var orderDate = unieap.getLastMonthDay();
                // _this.setValue(orderDate);
                // if($(dateBoxDom).is('.begin-end-style') && _this.dateTextBoxEnd){
                //     _this.dateTextBoxEnd.setValue(new Date());
				// }
				var logint ="";
				//兼容IE下补0不正确造成日期不正确问题
				if(!!window.ActiveXObject || "ActiveXObject" in window){
					logint=unieap.loginUser.loginDate;
					var year = logint.getFullYear()+"/";
					var mouth = (logint.getMonth()+1)>9 ? (logint.getMonth()+1)+"/":"0"+(logint.getMonth()+1)+"/";
					var day = logint.getDate()>9?logint.getDate()+"":"0"+(logint.getDate());
					logint=year+mouth+day;
				}else{
					logint = unieap.loginUser.loginDate.toLocaleDateString().replace(/[\/年月]/g, '-').replace(/[日]/g, '');
					logint = logint.replace(/-(\d)(?!\d)/g,'/0$1');
					logint = logint.replace(/-/g,'/');
					var logintTextFirst = logint.substr(0,4);
					logint = logint.substr(5) + "/" + logintTextFirst;
				}
				logint = new Date(logint);
				_this.setValue(unieap.getCustomFirstDay(logint));
				if($(dateBoxDom).is('.begin-end-style') && _this.dateTextBoxEnd){
					_this.dateTextBoxEnd.setValue(unieap.getCustomLastDay(logint));
				}
			}
			// @yll 供应链（物流/采购）登陆日期当前月的最后一天
			if($(dateBoxDom).hasClass('login-month-last')){
				clearInt();
				var logint = unieap.loginUser.loginDate.toLocaleDateString().replace(/[\/年月]/g, '-').replace(/[日]/g, '');
				logint = logint.replace(/-(\d)(?!\d)/g,'/0$1');
				logint = logint.replace(/-/g,'/');
				var logintTextFirst = logint.substr(0,4);
				logint = logint.substr(5) + "/" + logintTextFirst;
				logint = new Date(logint);
				_this.setValue(unieap.getCustomLastDay(logint));
			}
			// 登陆日期当天
			if($(dateBoxDom).hasClass('login-cur-day')){
				clearInt();
				var logint = unieap.loginUser.loginDate.toLocaleDateString().replace(/[\/年月]/g, '-').replace(/[日]/g, '');
				logint = logint.replace(/-(\d)(?!\d)/g,'/0$1');
				logint = logint.replace(/-/g,'/');
				var logintTextFirst = logint.substr(0,4);
				logint = logint.substr(5) + "/" + logintTextFirst;
				logint = new Date(logint);
				_this.setValue(logint);
			}
            // 默认添加当月当前时间
            if($(dateBoxDom).hasClass('default-cur-day')){
				clearInt();
                var orderDate = unieap.getCurrentDay();
                _this.setValue(orderDate);
                if($(dateBoxDom).is('.begin-end-style') && _this.dateTextBoxEnd){
                    _this.dateTextBoxEnd.setValue(new Date());
                }
            }
            // 默认添加当月第一天时间
            if($(dateBoxDom).hasClass('default-first-day')){
				clearInt();
                var orderDate = unieap.getCurrentFirstDay();
                _this.setValue(orderDate);
                if($(dateBoxDom).is('.begin-end-style') && _this.dateTextBoxEnd){
                    _this.dateTextBoxEnd.setValue(new Date());
                }
            }
            // 默认添加当月最后一天时间
            if($(dateBoxDom).hasClass('default-last-day')){
				clearInt();
                var orderDate = unieap.getCurrentLastDay();
                _this.setValue(orderDate);
			}
			// 默认添加当月第一天至最后一天
			if($(dateBoxDom).hasClass('default-first-last-day')){
				clearInt();
				var orderDate = unieap.getCurrentFirstDay();
				var lastDate = unieap.getCurrentLastDay();
				_this.setValue(orderDate);
				if($(dateBoxDom).is('.begin-end-style') && _this.dateTextBoxEnd){
					_this.dateTextBoxEnd.setValue(lastDate);
				}
			}
        },500);
    },

        _setBeginAndEndDate : function(){
        if( $(this.domNode).is('.begin-end-style')){
            var allClass = this['class'].split(' ');
            var endName = this.binding.name + 'End';
            $.each(allClass,function(i,clazz){
                if(clazz.indexOf('end-name-') == 0){
                    endName = clazz.replace('end-name-','');
                }
            });
            var opt = {
                binding:{
                    name:endName
                },
                required:this.required || false,
                // displayFormatter:this.displayFormatter
            };
            if(this.valueFormatter && this.valueFormatter.dataFormat){
                opt.valueFormatter = {
                    dataFormat:this.valueFormatter.dataFormat
                }
            }
            if(this.dateYM){
                opt.dateYM = this.dateYM;
            }
            this.dateTextBoxEnd = new unieap.form.DateTextBox(opt);
            this.dateTextBoxEnd.placeAt($(this.domNode).parent()[0]);
            this.dateTextBoxEnd.beginDateTextBox = this;
            var isReadOnly = false;
            var iconClass = 'u-calendar-icon';

            var beginEndDateText = new unieap.form.TextBoxWithIcon({
            	iconClass:iconClass,
    			beginDateTextBox:this,
    			endDateTextBox:this.dateTextBoxEnd,
    			'class':'start-end-date-text' + (this.dateYM ? '-YM' : ''),
    			readOnly:isReadOnly,
				required:this.required || false,
				dateYM:this.dateYM,
                onIconClick:function(){
					
        			if(this.readOnly || this.disabled){
        				return;
        			}
    					var beginPopup = this.beginDateTextBox.getPopup();
    	                var endPopup = this.endDateTextBox.getPopup();
        			
        				if(beginPopup._isShowingNow){
        					$(".u-form-field",this.domNode).removeClass("border_bstyle");
        					beginPopup.close(true);
        					endPopup.close(true);
        				}else{
        					//打开开始日期pop
        					$(".u-form-field",this.domNode).addClass("border_bstyle");
        					var startDate="";
        					var endDate="";
        					if( this.inputNode.value && this.inputNode.value.indexOf('~')>0 ){
        						startDate= this.inputNode.value.split("~")[0].trim();
        						endDate = this.inputNode.value.split("~")[1].trim();
        						if(this.dateYM && (!this._isDateYM(startDate) || !this._isDateYM(endDate)) ){
        							this.inputNode.value="";
        						}else if(!this.dateYM && (!this._isDate(startDate) || !this._isDate(endDate)) ){
        							this.inputNode.value="";
        						}else if(new Date(startDate)<=new Date(endDate)) {
        							beginPopup.widget.inputNode.value=startDate;
        							endPopup.widget.inputNode.value=endDate
        						}
        					}
        					if(this.inputNode.value=="") {
									beginPopup.widget.inputNode.value = new Date();
									endPopup.widget.inputNode.value = new Date();
        					}

        					beginPopup.open();
        					var beginEle = this.dateYM ? beginPopup.domNode : beginPopup._calendar.element;
                            $(beginEle).addClass('start-date-popup');
                            $(beginPopup.popupcontainer).css({
								left:$(this.domNode).offset().left,
								// top:$(this.domNode).offset().top + $(this.domNode).outerHeight()
								top:$(beginPopup.popupcontainer).offset().top + 10
                            });
                            //打开结束日期pop
        					endPopup.open();
        					var endEle = this.dateYM ? endPopup.domNode : endPopup._calendar.element;
                            $(endEle).addClass('end-date-popup');
                            $(endPopup.popupcontainer).css({
                            	left:$(beginPopup.popupcontainer).offset().left + $(beginPopup.popupcontainer).children(":first").outerWidth(),
								// top:$(this.domNode).offset().top + $(this.domNode).outerHeight()
								top:$(beginPopup.popupcontainer).offset().top
                            });
                            
                          //@JiaX 判断日期控件是否超出页面
                            var beginPopupW = parseInt($(beginPopup.popupcontainer).width());
                            var endPopupW = parseInt($(endPopup.popupcontainer).width());
                            var beginPopupL = parseInt($(beginPopup.popupcontainer).css("left")) ;
                            var endPopupL = parseInt($(endPopup.popupcontainer).css("left")) ;
                            var bodyW = $("body").width();
                            var mathW = beginPopupW + endPopupW + beginPopupL - bodyW;
                            if(mathW > 0){
                            	$(beginPopup.popupcontainer).css({
                            		left:beginPopupL - mathW - 20
                            	})
                            	$(endPopup.popupcontainer).css({
                            		left:endPopupL - mathW - 20
                            	})
                            }

                            //设置隐藏
            				var _beginEndDateText = this;
            				//@JiaX 设置开始时间和结束时间点击状态
            				_beginEndDateText.beginDateTextBox.beginDateState = false;
            				_beginEndDateText.beginDateTextBox.endDateState = false;
            				_beginEndDateText.showText();
            				_beginEndDateText._clickBody = function(e){
                        		if($(e.target).is('.u-form-textbox-icon') || $(e.target).parents('.u-popupcontainer').length > 0){
									
                            	}else{
                            		$(".u-form-field",this.domNode).removeClass("border_bstyle");
                            		//@JiaX关闭时判断又日历是否进行了两次点击，如果只点击一次则不赋值
//                            		if(!_beginEndDateText.beginDateTextBox.beginDateState || !_beginEndDateText.beginDateTextBox.endDateState){
//                            			_beginEndDateText.resetDateValue(_beginEndDateText,beginPopup,endPopup);
//                            		}else{
                            		if(beginPopup._isShowingNow && endPopup._isShowingNow){
                            			var beginEndText = _beginEndDateText.getText();
                                		if(beginEndText){
                                			beginEndText = beginEndText.replace(/<\/?[^>]*>/gim,"");
                                			beginEndText = beginEndText.replace(/(^\s+)|(\s+$)/g,"");
                                			beginEndText = beginEndText.replace(/\s/g,"");
                                			var beginEndStr = beginEndText.split("-");
                                			var beginValue = beginEndStr[0];
                                    		var endValue = beginEndStr[1];
//                                    		if(beginValue <= endValue){
//                                    			beginPopup.close(true);
//                                            	endPopup.close(true);
//                                    		}else{
                                    			
//                                    		}
                                		}else{
                                			beginPopup.close(true);
                                        	endPopup.close(true);
                                		}
                                        endPopup.endDateYMClose=true;
                                		_beginEndDateText.resetDateValue(_beginEndDateText,beginPopup,endPopup);
                            		}
                            		
                            			
//                            		}
                            	}
                            };
                            $('body').unbind('click',_beginEndDateText._clickBody);
                            $('body').click(_beginEndDateText._clickBody);
        				}
        			},
                onKeyDown:function(e){
                    //退回建 Backspace
                    if(e.keyCode == 8){
                        return;
                    }
                },
                /**
    			 * @JiaX
    			 * 2018-6-20 16:43:43
    			 * 日期控件重新赋值
    			 */
    			resetDateValue:function(_beginEndDateText,beginPopup,endPopup){
					
					var thisDateText = _beginEndDateText.getText();
    				var beginText;
					var endText;
					//created by majian1 2020/01/17
					//------------------------------------------
					var beginDateState = this.beginDateTextBox.beginDateState;
					var endDateState = this.beginDateTextBox.endDateState;
    				var flag = false;	//标记是否有值被点选
    				//如果开始时间已被点选
    				if(beginDateState){
    					flag = true;
    				}
    				//如果结束时间已被点选
    				if(endDateState){
    					flag = true;
    				}
    				if(flag){
    					if(beginDateState){
							beginText = beginPopup.widget._oText;
							
    						if(thisDateText){
    							var thisDateStr = thisDateText.split("~");
    							endText = thisDateStr[1].trim() ;
    						}else{
								
								endText = new Date();
								
    						}
    					}
    					if(endDateState){
							endText = endPopup.widget._oText;
							
    						if(thisDateText){
    							var thisDateStr = thisDateText.split("~");
    							beginText = thisDateStr[0].trim();
    						}else{
								beginText = new Date();
								
    						}
    						
    					}
    				}else{
        				if(thisDateText){
        					var thisDateStr = thisDateText.split("~");
        					beginText = thisDateStr[0].trim();
							endText = thisDateStr[1].trim();
        				}else{
        					beginText = "";
                    		endText = "";
        				}
    				}

					// // //将开始时间和结束时间转换成Date格式
    				if(beginText != "" && endText != ""){
    					if(this.beginDateTextBox._parsedFormat == "%Y-%m"){
    						if(typeof(beginText) == "string"){
    							var beginTextFirst = beginText.substr(0,4);
            					beginText = beginText.substr(5) + "/01/" + beginTextFirst;
								beginText = new Date(beginText);
								
    						}
    						if(typeof(endText) == "string"){
    							var endTextFirst = endText.substr(0,4);
            					endText = endText.substr(5) + "/01/" + endTextFirst;
								endText = new Date(endText);
								
    						}
    					}else{
    						if(typeof(beginText) == "string"){
							
								var beginTextFirst = beginText.substr(0,4);
								
								beginText = beginText.substr(5).replace(/-/g,"/") + "/" + beginTextFirst;
								
								beginText = new Date(beginText);
								
    						}
    						
							if(typeof(endText) == "string"){
								
								var endTextFirst = endText.substr(0,4);
								
								endText = endText.substr(5).replace(/-/g,"/") + "/" + endTextFirst;
								
								endText = new Date(endText);
								
    						}
						}
					}
					//--------------------------------------------
    				// if(thisDateText){
    				// 	var thisDateStr = thisDateText.split("~");
                	// 	beginText = new Date(thisDateStr[0].trim());
                	// 	endText = new Date(thisDateStr[1].trim());
                		
					// }else{
    				// 	beginText = "";
                	// 	endText = "";
    				// }
					_beginEndDateText.beginDateTextBox.setValue(beginText,endText);
    			},
    			showText:function(){
					
    				var beginPopup = this.beginDateTextBox.getPopup();
					var endPopup = this.endDateTextBox.getPopup();
	
    				if(this.dateYM == false){
    					try{
    						this.beginDateTextBox._oText  = this.beginDateTextBox.getText();
    						this.endDateTextBox._oText = this.endDateTextBox.getText();
    					}catch(e){
    						
    					}
    				}
					// 添加年月控件点击两次关闭判断
					if(this.dateYM == true){
						if(endPopup.endDateYMClose == true){
							this.beginDateTextBox.beginDateState = true;
						}
					}
					if(this.beginDateTextBox.beginDateState && this.beginDateTextBox.endDateState){
    					// var startText = this.beginDateTextBox.getText();
						// var endText = this.endDateTextBox.getText();
						if(this.dateYM == true){
							startText = this.beginDateTextBox.getText();
							endText = this.endDateTextBox.getText();
							
						}else{
							var startText,endText
	    					startText = this.beginDateTextBox._oText;
							endText = this.endDateTextBox._oText;
							
	        				// var reg = RegExp(/-/);
	        				// if(reg.test(endText)){
	        				// 	endText = endText.replace(/-/g,"/")
							// }
							
	        				if(startText == "" || startText == undefined || endText == "" || endText == undefined){
								if(this.beginDateTextBox.getText() == '' || this.endDateTextBox.getText() == ''){
									return;
								}
								if(this.beginDateTextBox.getText() && this.endDateTextBox.getText()){
									startText = this.beginDateTextBox.getText();
	            					endText = this.endDateTextBox.getText();
								}
							}
						}
						
        				/**
        				 * @JiaX 判断开始时间是否大于结束时间
        				 * 2018-6-20 16:44:40
        				 */
    	    			if(startText > endText){
    	    				if($('.u-dlg').length >= 1) return
    	    				else MessageBox.warn({message:"开始时间不能大于结束时间！",popupType:"datePopup"});
    	    			}else{
							var connLine = " ~ ";
							if(startText && endText){
    	        				this.setValue(startText + connLine + endText);
							} 
							else if (startText ){
    	    					this.setValue(startText + connLine + '无限制');
    	    				} else if (endText ){
    	    					this.setValue('无限制' + connLine + endText);
							}
							else{
    	    					this.setValue('');
    	    				}
							var validator=this.getValidator();
							if (!unieap.widget.form.alwaysShowErrMssage) {
								validator.handleError&&validator.handleError(true);
							}
							this.beginDateTextBox.onChange(this.beginDateTextBox.getValue());
							
    	    				//@JiaX 关闭日期popup弹层
    	    				if(this.dateYM == true){
	    	    				if(endPopup.endDateYMClose == true){
		    	    				beginPopup.close(true);
				                    endPopup.close(true);
				                    // 添加年月控件点击两次关闭判断
				                    endPopup.endDateYMClose = false;
	    	    				}
    	    				}else{
    	    					beginPopup.close(true);
			                    endPopup.close(true);
    	    				}
    	    				this.beginDateTextBox.beginDateState = false;
	                    	this.beginDateTextBox.endDateState = false;
    	    				}
    				}
    			}
            });
            beginEndDateText.placeAt($(this.domNode).parent()[0]);

            $(this.domNode).addClass('start-date-text-box');
            $(this.dateTextBoxEnd.domNode).addClass('end-date-text-box');

            /*
            var startPopup = this.getPopup();
            startPopup.__selectedBack = startPopup._selected;
            startPopup._selected = function(cal, date){
                startPopup.__selectedBack(cal, date);
                beginEndDateText.showText();
            }*/
            this.getPopup().close = function(_isClose){
                if(_isClose == true){unieap.form.Popup.prototype.close.call(this)};
            };
            this._setValueBack = this.setValue;
            var maxTime = this.range.max;
            var minTime = this.range.min;

            this.setValue = function(dateTime,dateTimeEnd){
                if(dateTime){
                    maxTime = this.range.max;
                    minTime = this.range.min;
					maxTime = getMaxMinTime(maxTime);
					
                    if(dateTime > maxTime && dateTime.length == maxTime.length){
                        MessageBox.warn({message:"开始时间不能大于"+maxTime+"！"});
                        return false;
                    }
                    minTime = getMaxMinTime(minTime);
                    if(dateTime < minTime && dateTime.length == minTime.length){
                        MessageBox.warn({message:"开始时间不能小于"+minTime+"！"});
                        return false;
                    }
                }
                this._setValueBack(dateTime);
                if(dateTimeEnd || (dateTime == "" && dateTimeEnd == "")){
					this.dateTextBoxEnd.setValue(dateTimeEnd);
				}
				//@JiaX
				this.beginDateState = true;
        		beginEndDateText.showText();
        		
        		
//                //@JiaX 判断开始时间结束时间是否同时赋值
//                if(this.dateYM == false && this.binding.row && !dateTimeEnd){
//                    var endName = this.dateTextBoxEnd.binding.name;
//                    if(this.binding.row.data[endName]){
//                        dateTimeEnd = this.binding.row.data[endName];
//                    }
//                }
//
//                //调用代码设置时间
//                if(dateTimeEnd){
//                    if(dateTime > dateTimeEnd){
//                        //MessageBox.warn({message:"开始时间不能大于结束时间！"});
//                        //this.setValue(this.dateTextBoxEnd.getValue());
//                        this.dateTextBoxEnd.setValue(dateTime);
//                        var endPopup = this.dateTextBoxEnd.getPopup();
//                        if(endPopup.calendarbox){
//                            endPopup.calendarbox.fSetYearMon(new Date(dateTime));
//                        }
//                        if(endPopup._calendar){
//                            endPopup._calendar.setDate(new Date(dateTime));
//                        }
//                        //return false;
//                    }
//                    //点击控件设置时间
//                }else{
//                    if(this.dateTextBoxEnd.getValue() && dateTime > this.dateTextBoxEnd.getValue()){
//                        //MessageBox.warn({message:"开始时间不能大于结束时间！"});
//                        //this.setValue(this.dateTextBoxEnd.getValue());
//                        this.dateTextBoxEnd.setValue(dateTime);
//                        var endPopup = this.dateTextBoxEnd.getPopup();
//                        if(endPopup.calendarbox){
//                            endPopup.calendarbox.fSetYearMon(new Date(dateTime));
//                        }
//                        if(endPopup._calendar){
//                            endPopup._calendar.setDate(new Date(dateTime));
//                        }
//                        //return false;
//                    }
//
//                }
//
//                this._setValueBack(dateTime);
//
//                if(dateTimeEnd){
//                    //@JiaX 判断开始时间大于结束时间就把开始时间赋值给结束时间
//                    if(dateTime > dateTimeEnd){
//                        dateTimeEnd = dateTime;
//                        var endPopup = this.dateTextBoxEnd.getPopup();
//                        endPopup._calendar.setDate(new Date(dateTime));
//                    }
//                    this.dateTextBoxEnd.setValue(dateTimeEnd);
//                }
//                //Jiax 只选开始时间时给结束时间赋默认值
//                if(!this.dateTextBoxEnd.getValue() && dateTime && !dateTimeEnd){
//                    //dateTimeEnd = dateTime;
//                    this.dateTextBoxEnd.setValue(dateTime);
//                    var endPopup = this.dateTextBoxEnd.getPopup();
//                    if(endPopup._calendar){
//                        endPopup._calendar.setDate(new Date(dateTime));
//                    }
//                }
//                beginEndDateText.showText();
            }

            /*
            var endPopup = this.dateTextBoxEnd.getPopup();
            endPopup.__selectedBack = endPopup._selected;
            endPopup._selected = function(cal, date){
                endPopup.__selectedBack(cal, date);
                beginEndDateText.showText();
            }
            */
            this.dateTextBoxEnd.getPopup().close = function(_isClose){
                if(_isClose == true){unieap.form.Popup.prototype.close.call(this)}
            };
            this.dateTextBoxEnd._setValueBack = this.dateTextBoxEnd.setValue;
            this.dateTextBoxEnd.setValue = function(dateTime){
            	if(dateTime){
 					maxTime = this.range.max;
 	 				minTime = this.range.min;
 					maxTime = getMaxMinTime(maxTime);
 					if(dateTime >maxTime && dateTime.length == maxTime.length){
 						MessageBox.warn({message:"结束时间不能大于"+maxTime+"！"});
 						return;
 					}
 					minTime = getMaxMinTime(minTime);
 					if(dateTime < minTime && dateTime.length == minTime.length){
 						MessageBox.warn({message:"结束时间不能小于"+minTime+"！"});
 						return;
 					}
 				}
				this._setValueBack(dateTime);
				//@JiaX
				
				// 添加年月控件点击两次关闭判断
//				if(this.dateYM == true){
//					if(this.getPopup().endDateYMClose == true){
//						this.beginDateTextBox.endDateState = true;
//					}else{
//						this.beginDateTextBox.endDateState = false;
//					}
//				}else{
//					this.beginDateTextBox.endDateState = true;
//				}
//				this.getPopup().endDateYMClose = true;
				this.beginDateTextBox.endDateState = true;
        		beginEndDateText.showText();
            };
            this._setDisabledBack = this.setDisabled;
 			this.setDisabled = function(bool){
 				this._setDisabledBack(bool);
				 beginEndDateText.setDisabled(bool);
				 this.dateTextBoxEnd.setDisabled(bool);
 			};
            //修改起止时间日期必须输入控制---------------start-----------
            this._setRequiredBack = this.setRequired;
            this.setRequired = function(bool){

                this._setRequiredBack(bool);
                this.dateTextBoxEnd.setRequired(bool);
                beginEndDateText.setRequired(bool);
            };
            //修改起止时间日期必须输入控制---------------end-----------

 			//@JiaXin 获取时间范围最大值或最小值
 			function getMaxMinTime(MaxOrMinDate){
 				MaxOrMinDate = MaxOrMinDate.toString().split("-")[0];
 				var selYear = "";
				var selMonth = "";
				var selDay = "";
				if(MaxOrMinDate.length==6){
					selYear = MaxOrMinDate.substring(0,4);
					selMonth = MaxOrMinDate.substring(4,6);
					MaxOrMinDate = selYear+"-"+selMonth;
					return MaxOrMinDate;
				}else if(MaxOrMinDate.length==8){
					selYear = MaxOrMinDate.substring(0,4);
					selMonth = MaxOrMinDate.substring(4,6);
					selDay = MaxOrMinDate.substring(6,8);
					MaxOrMinDate = selYear+"-"+selMonth+"-"+selDay;
					return MaxOrMinDate;
				}
				
 			}

        }
    },
	
        // 新增获取begin双时间结束时间，自动根据dataFormat转义
        getEndValue : function(){
        if(this.dateTextBoxEnd){
            return this.dateTextBoxEnd.getValue();
        }else{
            alert("调用有误。");
        }
    },
    // 新增获取begin双时间结束时间，自动根据dataFormat转义
    getEndText : function(){
        if(this.dateTextBoxEnd){
            return this.dateTextBoxEnd.getText();
        }else{
            alert("调用有误。");
        }
    },
        _addClass : function(){
        var dateBoxDom = this.domNode;
        var dataInptWidth = 100;
        var _this = this;
        setTimeout(function(){
            if($(dateBoxDom).width() != 0){
                if($(dateBoxDom).width() < dataInptWidth){
                    dojo.addClass(dateBoxDom,'u-dataTime');
                }
            }
        },500);
    }

	});
}
// 获取当月当前时间
unieap.getCurrentDay = function(){
    var date = new Date();
    return date;
};

//获取当前日期上个月的日期
unieap.getLastMonthDay = function (){
    var date = new Date();

    date.setMonth(date.getMonth()-1);

    return date;
};
//获取当前月份1号
unieap.getCurrentFirstDay =function(){
    var date = new Date();

    date.setDate(1);

    return date;
};
//获取当前月份最后一天
unieap.getCurrentLastDay = function(){
    var date = new Date();

    date.setDate(1);

    date.setMonth(date.getMonth()+1);

    date.setDate(0);

    return date;
};
//获取指定时间月份1号
unieap.getCustomFirstDay =function(date){
    date.setDate(1);
    return date;
};
//获取指定时间月份最后一天
unieap.getCustomLastDay = function(date){
    date.setDate(1);

    date.setMonth(date.getMonth()+1);

    date.setDate(0);

    return date;
};
//计算两个日期之间的天数
unieap.getDaysFromPeriod = function(startTime,endTime){
    var tempStart = new Date(startTime);
    tempStart.setHours(0);
    startTime = tempStart.getTime();
    var tempEnd = new Date(endTime);
    tempEnd.setHours(0);
    endTime = tempEnd.getTime();
    return (endTime-startTime)/1000/60/60/24+1;
};

dojo.provide("unieap.form.ComboBoxDataFilter");
dojo.declare("unieap.form.ComboBoxDataFilter", null, {
	/**
	 * @declaredClass:
	 * 		unieap.form.ComboBoxDataFilter
	 * @summary:
	 * 		下拉框数据过滤器
	 * @classDescription:
	 * 	1.模糊匹配
	 * 	2.大小写规则
	 * 	3.多个过滤条件
	 *  4.两种过滤模式
	 *  5.汉字拼音过滤
	 */
	
	constructor:function(params){
		dojo.mixin(this,params);
		if (!this.searchAttr) {
			var d = this.widget.getDecoder();
			this.searchAttr = [];
			this.searchAttr.push(d.displayAttr);
            //@wc
            //this.searchAttr.push(d.valueAttr);
		}
	},
		
	/**
	 * @summary:
	 * 		模糊匹配。
	 * @description：
	 * 		输入过程中,设置下拉框模糊匹配指定的匹配列。
	 * 		默认为displayAttr，valueAttr两列。
	 * @type：
	 * 		{string|array}
	 * @example：
	 * |		var store = new unieap.ds.DataStore([{
	 * |			CODEVALUE: 1,
	 * |			CODENAME: '浙江',
	 * |			hello: 'zj'
	 * |		}, {
	 * |			CODEVALUE: 2,
	 * |			CODENAME: '辽宁',	
	 * |			hello: 'ln'
	 * |		}]);
	 * |	dataCenter.addDataStore('test',store);
	 * |	<div dojoType="unieap.form.ComboBox" dataFilter="{searchAttr:'hello'}"></div>
	 * |	//对hello列进行模糊匹配
	 * |	<div dojoType="unieap.form.ComboBox" dataFilter="{searchAttr:['hello','CODENAME']}"></div>
	 * |	//对hello CODENAME两列进行模糊匹配
	 */
	searchAttr:null,
	
	/**
	 * @summary:
	 * 		大小写规则
	 * @description：
	 * 		指定构造数据时是否忽略大小写。
	 * @type：
	 * 		{boolean}
	 * @default：
	 * 		true
	 */
	ignoreCase:true,
	
	/**
	 * @summary:
	 * 		过滤时过滤条件的且或关系。
	 * @enum：
	 * 		{"||"|"&&"}：
	 * @default:
	 * 		"||"
	 */
	relation:"||",
	
	/**
	 * @summary：
	 * 		过滤条件的设置
	 * @description：
	 * 		多个过滤条件的关系可以用过relation参数设置,多个过滤条件无先后之分。
	 * @type：
	 * 		{object|function}
	 * @example：
	 * |	<div dojoType="unieap.form.ComboBox" dataFilter="{filter:myFilter}"></div>
	 * |	function myFilter(item){
	 * |		//返回true false
	 * |		return item.CODENAME == 'filtertest';
	 * |	}
	 * 		对整个列进行过滤。支持filter为方法,参数为item，一行数据。
	 * @example:
	 * |	<div dojoType="unieap.form.ComboBox" dataFilter="{filter:myFilter}"></div>
	 * |	myFilter={
	 * |		CODEVALUE:'1|2|3|4'
	 * |	}
	 * 		对某一列进行枚举过滤,string对象以'|'隔开。CODEVALUE列的数据可为1,2,3,4;
	 * @example：
	 * |	<div dojoType="unieap.form.ComboBox" dataFilter="{filter:myFilter}"></div>
	 * |	myFilter={
	 * |		CODENAME:/^1[23]$/
	 * |	}
	 * 		对某一列进行正则过滤。CODENAME列的数据可为12,13；
	 * @example：
	 * |	<div dojoType="unieap.form.ComboBox" dataFilter="{filter:myFilter}"></div>
	 * |	myFilter={
	 * |		CODEDISPLAY:function(value,item){return value=='1'}
	 * |	}
	 * 		对一列进行方法过滤。CODEDISPLAY的数据可为1.
	 */
	filter:null,
	
	/**
	 * @summary:
	 * 		过滤类型,和fitler联合使用
	 * @description:
	 * 		include:显示满足条件的数据
	 * 		exclude:排除满足条件的数据
	 * @enum：
	 * 		{"include"|"exclude"}
	 * @default:
	 * 		"include"
	 * @example:
	 * |<script type="text/javascript">
	 * |	var city = new unieap.ds.DataStore("city_store", [
	 * |		{CODEVALUE: 1,CODENAME: "宁波"}, 
	 * |		{CODEVALUE: 2,CODENAME: "宁海"}, 
	 * |		{CODEVALUE: 3,CODENAME: "温州"}, 
	 * |		{CODEVALUE: 4,CODENAME: "沈阳"}
	 * |	]);
	 * |</script>
	 * |<div dojoType="unieap.form.ComboBox" dataFilter="{filter:{CODEVALUE:'1|2'},filterMode:'exclude'}"></div>
	 * 由于配置了filterMode:'exclude',过滤之后的ComboBox数据条目是 CODEVALUE=3或4的两条，而不是默认情况下(filterMode:'include')的CODEVALUE=1或2的两条
	 */
	filterMode:"include",
	
	/**
	 * @summary：
	 * 		 拼音字母模糊匹配
	 * @description:
	 * 		根据显示列创建内部的一个拼音列用来进行拼音模糊匹配。
	 * @example：
	 * |		var store = new unieap.ds.DataStore([{
	 * |			CODEVALUE: 1,
	 * |			CODENAME: "浙江"
	 * |		}, {
	 * |			CODEVALUE: 2,
	 * |			CODENAME: "辽宁"
	 * |		}]);
	 * |	<div dojoType="unieap.form.ComboBox" dataFilter="{spellAttr:'py'}"></div>
	 * 		此时将会动态生成一列数据，列明为'py'。并自动增加到searchAttr中去，即支持拼音模糊匹配。
	 * 		当输入z时,过滤出'浙江'列
	 */
	spellAttr: "",

	/**
	 * @summary：
	 *          特殊字符匹配规则
	 * @description:
	 *         指定构造数据时是否忽略特殊字符。
	 */
	ignoreCharacter : false,

	/*
	 * @summary:
	 * 		配置{filter:null}情况下"下拉出全部数据"或"下拉不出任何数据"
	 * @description:
	 * 		all:下拉出全部数据
	 * 		none:下拉不出任何数据
	 * @enum：
	 * 		{'all'|'none'}
	 * @default：
	 * 		'all'
	 */
	filterNull: "all",
	
	/*
	 * @summary:
	 * 		排序方式
	 * @type:
	 * 		{object|array}
	 * @example:
	 * |	order=[{CODENAME:"asc"},{CODEVALUE:"asc"}]
	 */
	order: "",
	
	/**
	 * @summary：
	 * 		动态设置ComboBox的过滤条件
	 * @param：
	 * 		{object} filter
	 */
	setFilter: function(filter) {
		this.filter=filter;
//		this.widget.getDataProvider().clearCacheItems();
	},
	
	/*
	 * @summary：
	 * 		设置级联过滤条件
	 * @param：
	 * 		{object} filter  级联条件
	 * @param:
	 * 		{boolean} defaultSelect 是否默认选中第一条数据
	 * @param:
	 * 		enum 
	 */
	setCascadeFilter:function(filter, defaultSelect, filterNull){
		//属性在doFilter方法里用
		this.filterNull = filterNull;
		
		var _default;
		this.cascadeFilter = filter;
		if (arguments.length>=2) {
			_default = defaultSelect;
		} else {
			_default = this.widget.getCascade().defaultSelect
		}
		if (_default) {
			// 选中第一条数据
			var items = this.widget.getDataProvider().getItems();
			if (items.length > 0) {
				this.widget.setValue(this.widget.getDecoder().code(items[0]));
				return;
			}
		}
		this.widget.setValue(null);
	},
	
	/*
	 * @summary:
	 * 		根据过滤条件过滤数据
	 * @param:
	 * 		{array} items
	 * @param：
	 * 		 {filter} filter
	 */
	doFilter: function(items, filter, filterMode, relation){
		var filter=filter || this.filter;
		var filterMode = filterMode || this.filterMode;
		var relation = relation || this.relation;
		var ignoreCase = this.ignoreCase;
		var filterFunction = function(item) {
			var matchs = [];
			var f = {};
			if (typeof filter=="function") {
				//filter为方法
				var match = !!filter.call(this.widget,item);
				matchs.push(match);
			} else {
				for (f in filter) {
					var match = false;
					if (filter[f]===null && this.filterNull=="all") {
						match = true;
					}else if (filter[f]===null && this.filterNull=="none") {
						match = false;
					} else if (typeof filter[f] == "object") {
						//正则过滤条件
						var regExp=null;
						regExp = new RegExp(filter[f]);
//						match = item[f].toString().match(regExp)?true:false;
						var _itemValueIgnoreCase = this.widget.dataProvider._getItemValueIgnoreCase(item,f);
                        if(_itemValueIgnoreCase){
                            if(_itemValueIgnoreCase instanceof Array && _itemValueIgnoreCase.length>0&&_itemValueIgnoreCase[0]){
								//codeName包含多音字，py为数组，长度大于1时
								for(var i=0;i<_itemValueIgnoreCase.length;i++){
									match = _itemValueIgnoreCase[i].toString().match(regExp)?true:false;
									if(match){
										break;
									}
								}
                            }else{
                                match = _itemValueIgnoreCase.toString().match(regExp)?true:false;
                            }
                        }
//						match = this.widget.dataProvider._getItemValueIgnoreCase(item,f).toString().match(regExp)?true:false;
					} else if(typeof filter[f] =="string" || typeof filter[f]=="number") {
						//string过滤条件
						var filters = filter[f].toString().split('|');
						match = dojo.some(filters,dojo.hitch(this,function(fv) {
							var values = this.widget.dataProvider._getItemValueIgnoreCase(item,f)||"";
							values = values.toString().split('|');
							if (ignoreCase) {
								if(typeof values == "object" && values.length>0){
									return dojo.some(values,dojo.hitch(this,function(value){
										return fv.toLowerCase() == value.toString().toLowerCase();
									}));
								}else
									return fv.toLowerCase()==values.toString().toLowerCase();
							} else {
//								return fv==(item[f]||"").toString();
								if(typeof values == "object" && values.length>0){
									return dojo.some(values,dojo.hitch(this,function(value){
										return fv == value.toString();
									}));
								}else
									return fv==values.toString();
							}
						}));
					} else if (typeof filter[f] == "function") {
						//回调方法过滤
						if (filter[f].call) {
//							match=!!filter[f].call(this.widget,item[f],item);
							match=!!filter[f].call(this.widget,this.widget.dataProvider._getItemValueIgnoreCase(item,f),item);
						} else {
							//在safari中 typeof /^1$/ 返回 "function"
							var regExp = null;
							regExp = new RegExp(filter[f]);
//							match = item[f].toString().match(regExp)?true:false;
							//wty 怀疑这块写错了
							//match = this.widget,this.widget.dataProvider._getItemValueIgnoreCase(item,f).toString().match(regExp)?true:false;
							var itemValueIgnoreCase = this.widget.dataProvider._getItemValueIgnoreCase(item,f);
							if(itemValueIgnoreCase){
								match = itemValueIgnoreCase.toString().match(regExp)?true:false;
							}
						}
					}
					matchs.push(match);
				}
			}
			if (matchs.length > 0) {
				//_everyOrSome 过滤条件的且或关系 不存在先后关系
				//dojo1.4将dojo._everyOrSome改为内部函数
				//var match=dojo._everyOrSome(relation=="&&",matchs,function(match){return match});
				var match;
				if (relation == "&&") {
					match = dojo.every(matchs, function(match) {return match;})
				} else {
					match = dojo.some(matchs, function(match) {return match;})
				}
				//include or exclude
				return filterMode=="include"?match:!match;
			} else {
				return true;
			}
		}
		var items = dojo.filter(items,dojo.hitch(this,filterFunction));
		return items;
	}
	
});

dojo.provide("unieap.form.ComboBoxDataProvider");
dojo.declare("unieap.form.ComboBoxDataProvider", null, {
	/**
	 * @declaredClass: unieap.form.ComboBoxDataProvider
	 * @summary: 下拉列表的数据源控制器
	 */
	 
	/**
	 * @summary: 设置下拉框绑定的DataStore对象或者DataStore对象的名称。
	 * @type: {string|unieap.ds.Datastore}
	 */
	store: null,
	
	/*
	 * @summary: 下拉框请求数据的相关参数 @type: {object}
	 */
	parameters: {},
	
	/**
	 * @summary: 添加自定义项
	 * @type： {object|array}
	 * @example： | <div dojoType="unieap.form.ComboBox"
	 *           dataProvider="{customItem:{CODEVALUE:'3',CODENAME: '大连'}}" > |
	 *           </div> 此时除了store中的数据，还将增加一个自定义项。多列时可配置为数组。
	 */
	customItem: null,
	
	// items
	items: null,
	
	_currentItems: null,
	
	_loseItems: null,


	
	/**
	 * @summary: 设置ComboBox控件绑定的数据源的数据类型
	 * @description: 只有当数据源的值为bool值时才设置此属性，比如dataType值为"boolean"
	 * @type: {string}
	 * @example: |<script type="text/javascript"> | var ds=new
	 *           unieap.ds.DataStore("demo",[{CODEVALUE:false,CODENAME:'测试'}]); |
	 *           dataCenter.addDataStore(ds); |</script> |<div
	 *           dojoType="unieap.form.ComboBox"
	 *           dataProvider="{store:'demo',dataType:'boolean'}"></div>
	 */
	dataType: "",
	
	/**
	 * @summary: 是否使用静态数据
	 * @description: 注意:开启staticData功能是,ComboBox的标签请使用select标签。
	 * @type： {boolean}
	 * @default： false
	 * @example： | <select dojoType="unieap.form.ComboBox"
	 *           dataProvider="{staticData:true}" > | <option value="1">男</option> |
	 *           <option value="0">女</option> | </select> 此时ComboBox将增加两个自定义数据
	 */	
	staticData: false,
	
	isReport: false,
	//匹配程序   full: 存在   left 左匹配   right:右匹配
	//class left=matchLeft   right=mainRight 
	fullMathType:"full",
	
	constructor: function(params) {
		dojo.mixin(this, params);
		this.isReport = this.widget.isReport;
		this.setDataStore(this.store);
	},
	
	/**
	 * @summary: 用户自定义数据源,构造ComboBox支持的数据格式
	 * @param: {string} name DataStore的名字
	 * @param： {object} parameters 自定义参数 ，如{a:123,b:456}
	 * @example： | <div dojoType="unieap.form.ComboBox"
	 *           dataProvider="{loadStore:loadMyStore}" > | </div> | loadMyStore =
	 *           function(name,parameters){ | return new
	 *           unieap.ds.DataStore(name,[{a:1,b:1},{a:2,b:2}]); | }
	 * @return {unieap.ds.DataStore}
	 */
	loadStore: function(name, parameters) {
		return null;
	},
	//jols add
	setFullMathType:function(fullMathType){
		this.fullMathType=fullMathType;
	},
	/**
	 * 匹配程序   full: 存在   left 左匹配   right:右匹配
	* class left=matchLeft   right=mainRight
	* class  matchAll=matchAll(增加全匹配功能 按照左匹配、中匹配、右匹配)规则匹配并且生成数据
	 */
	getFullMathType:function(){ 
		if(this.fullMathType=="full"){
			if(dojo.hasClass(this.widget.domNode,"matchLeft")){
				this.setFullMathType("left");
			}else if(dojo.hasClass(this.widget.domNode,"matchRight")){
				this.setFullMathType("right");
			}else if(dojo.hasClass(this.widget.domNode,"matchAll")){
				this.setFullMathType("matchAll");
			}
		} 
		return this.fullMathType;
	}
	,
	/**
	 * @summary: 设置数据源
	 * @description: 重新构造ComboBox支持的数据格式
	 * @param： {unieap.ds.DataStore|string} store
	 */
	setDataStore: function(store) {
		var dc = this.widget.dataCenter || (unieap.Action.getViewContext(this.widget) || window).dataCenter;
		var ds = unieap.getDataStore(store, dc, true);
		if (!ds) {
			ds = this.loadStore(store, this.parameters);
		}
		if (!ds) {
			dojo.require("unieap.rpc");
			ds = unieap.Action.getCodeList(store);
		}
		this.store = ds;
		this._loadItems(this.store);
	},
	
	/**
	 * @summary: 获取ComboBox绑定的DataStore
	 * @return： unieap.ds.DataStore
	 * @example: |var combobox = unieap.byId('cityComboBox'); |var store =
	 *           combobox.getDataProvider().getDataStore();
	 */
	getDataStore: function() {
		return this.store;
	},
	
	// API
	/**
	 * @summary: 依据条件获取下拉框的数据对象数组（item数组）
	 * @description: 不传递参数，则返回ComboBox绑定的所有item的数组,多条件仅支持“或”关系
	 * @param: {string} text
	 *         针对显示值的过滤条件，多个条件用ComboBox控件的separator属性字符分割，并设置isMulti参数为true
	 * @param: {boolean} isMulti 是否是多个条件
	 * @return: {array}
	 * @example: |<script type="text/javascript"> | var city = new
	 *           unieap.ds.DataStore('city_store', [ | {CODEVALUE: 1,CODENAME:
	 *           '宁波'}, | {CODEVALUE: 2,CODENAME: '宁海'}, | {CODEVALUE:
	 *           3,CODENAME: '温州'}, | {CODEVALUE: 4,CODENAME: '沈阳'} | ]); |
	 *           dojo.addOnLoad(function(){ | var city = unieap.byId('city'); |
	 *           city.getDataProvider().getItems('宁,阳',true); | }); |</script> |<div
	 *           dojoType="unieap.form.ComboBox" id="city"
	 *           dataProvider="{'store':'city_store'}"></div>
	 *           以上示例展示多条件的getItems方法使用，单条件API调用如：city.getDataProvider().getItems('宁',false);。
	 *           上述示例运行结果如图所示
	 * @img: images/form/combobox_getitems_data.png
	 * 
	 */
	getItems: function(text, isMulti,strictFilter) {
		var items = this.items;
		if(!this.tempItems){
			var tempItems=[];
			dojo.forEach(this.items, function(item) {
				tempItems.push(JSON.parse(JSON.stringify(item)));
			});
			this.tempItems=tempItems;
		}
		var itemsList=this.tempItems;
		if (this._loseItems!=null && dojo.isArray(this._loseItems))
			items = items.concat(this._loseItems);
		var decoder = this.widget.getDecoder();
		var dataFilter = this.widget.getDataFilter();
		if(text && dojo.trim(text)!=="" && dataFilter.ignoreCharacter){
			itemsList=this._getItemIgnoreCharacter(itemsList,decoder.displayAttr,text);
		}
		if (dataFilter.spellAttr) {
			// 构造拼音模糊匹配列
			items=this._createSpellCols(items, dataFilter, decoder.displayAttr, dataFilter.spellAttr);
			itemsList=this._createSpellCols(itemsList, dataFilter, decoder.displayAttr, dataFilter.spellAttr);
		}
		if (dataFilter.cascadeFilter) {
			items = dataFilter.doFilter(items, dataFilter.cascadeFilter, "include", "||");
			itemsList=dataFilter.doFilter(itemsList, dataFilter.cascadeFilter, "include", "||");
		}
		// 本征条件过滤
		items = dataFilter.doFilter(items);
		itemsList=dataFilter.doFilter(itemsList);
		

		// 动态条件过滤
		if (text && dojo.trim(text)!=="") {
			if (isMulti) {
				var texts = text.split(this.widget.separator);
				text = texts.join("|");
			}
			var reg=this._getDataFilterFilter(dojo.trim(text),strictFilter,dataFilter.ignoreCase); //majz 添加dojo.trim 解决下拉框快速查询，不显示下拉框bug
			var filter = {};
			
			if (dataFilter.searchAttr) {
				dataFilter.searchAttr = [].concat(dataFilter.searchAttr);
				for(var i=0,l=dataFilter.searchAttr.length; i<l; i++){
					filter[dataFilter.searchAttr[i]] = reg;
				}
			}

			//如果返回回来是全匹配（包含左匹配，中匹配，又匹配）
			if(dojo.isArray(reg)&&reg.length==3){
				var leftItem = [],centerItem=[],rightItem=[];
				var leftReg = filter.py[0],centerReg = filter.py[1],rightReg = filter.py[2];
				var keys = Object.keys(filter)[0]&&Object.keys(filter)[0].toLowerCase();
				dojo.forEach(items,function(item){
						if(item[keys]&& item[keys].match(leftReg)){
							leftItem.push(item);
						}else if(item[keys]&& item[keys].match(centerReg)){
							centerItem.push(item);
						}else if(item[keys]&&item[keys].match(rightReg)){
							rightItem.push(item);
						}
				})
				return leftItem.concat(centerItem).concat(rightItem)
			}
			items = dataFilter.doFilter(items, filter, "include", "||");
			itemsList=dataFilter.doFilter(itemsList, filter, "include", "||");
		}
		if(text && dojo.trim(text)!=="" && dataFilter.ignoreCharacter && itemsList.length>items.length){
			var _this =this;
			dojo.forEach( itemsList, function(item) {
				for(var k=0;k<_this.items.length;k++){
					var temp = _this.items[k];
					if(item[decoder.valueAttr]==temp[decoder.valueAttr]){
						items.push(temp);
						break;
					}
				}
			});
		}
		this._currentItems = items;
		return items;
	},
	//jols add 得到匹配程度
	_getDataFilterFilter:function(text,strictFilter,dataFilterIgnorCase){		
		var reg = null;
		try {
			// 当text=[时存在错误 dataFilter.ignoreCase
			if(strictFilter){
				reg = dataFilterIgnorCase?new RegExp("^"+text+"$","i"):new RegExp("^.*"+text+".*$");
			}else{
				
				//jols add 如果是拼音码，则全匹配
//				var isPym=false;
//				var reg= /^[A-Za-z]+$/;
//				if (reg.test(value))
//					isPym=true;
// 				if(unieap.isUserStyle){
					
					if(this.getFullMathType().toLowerCase()=="full"/*||isPym*/){
                        reg = dataFilterIgnorCase?new RegExp("^.*"+text+".*$","i"):new RegExp("^.*"+text+".*$");
					} else{
						if(dataFilterIgnorCase)
							if(this.getFullMathType().toLowerCase()=="left"){
//								var regStr="(^"+text+".*$)|(^.*\\s+"+text+".*$)";//匹配以text开头   或   以  '空格'+text  匹配
								//new RegExp("(^现金.*$)|(^.*\s.现金.*$)","i")
								var regStr="(^"+text+".*$)";//
								reg =new RegExp(regStr,"i");
							}else if(this.getFullMathType().toLowerCase()=="right"){
								reg =new RegExp("^.*"+text+"$","i");
							}else if(this.getFullMathType()=="matchAll"){
								 regStr="(^"+text+".*$)";//全匹配规则
								 reg = [new RegExp(regStr,"i"),dataFilterIgnorCase?new RegExp("^.*"+text+".*$","i"):new RegExp("^.*"+text+".*$"),new RegExp("^.*"+text+"$","i")]
								return reg
								}
					}
				// }else{
				// 	reg = dataFilterIgnorCase?new RegExp("^.*"+text+".*$","i"):new RegExp("^.*"+text+".*$");
				// }
			}
		} catch (e) {
			reg = dataFilterIgnorCase?new RegExp("^.*$","i"):new RegExp("^.*$");
		}
		
		 return reg;
	}
	
	,
	
	/**
	 * @summary: 取得ComboBox可下拉的数据条目（items）
	 * @description: 在ComboBox级联的情况下，调用从ComboBox的此方法，可以获得到经过主ComboBox过滤后的从ComboBox可下拉的数据条目
	 * @return： {array}
	 * @example: |var combobox = unieap.byId('cityComboBox'); |var items =
	 *           combobox.getDataProvider().getCurrentItems();
	 */
	getCurrentItems: function() {
		return this._currentItems==null?this.getItems():this._currentItems;
	},
	
	/**
	 * @summary: 清空当前页显示的数据
	 */
	clearCurrentItems: function() {
		this._currentItems = null;
	},
	
	/**
	 * @summary: 清空ComboBox内的缓存数据
	 */
	clearCacheItems: function() {
		// do nothing, there isn's any cacheItems any more.
	},
	
	/**
	 * @summary: 得到当前选中的节点
	 * @description: 多条被选中(复选ComboBox)时，返回item数组
	 * @return: {array}
	 */
	getSelectedItems: function() {// for user and cascade
		return this.widget._getSelectedItems();
	},
	
	/**
	 * @summary: 动态增加一条或多条下拉数据
	 * @param： {object|array} item
	 * @example: |var city = new unieap.ds.DataStore('city_store', [ |
	 *           {CODEVALUE: 1,CODENAME: '宁波'}, | {CODEVALUE: 2,CODENAME: '宁海'}, |
	 *           {CODEVALUE: 3,CODENAME: '温州'}, | {CODEVALUE: 4,CODENAME: '沈阳'}
	 *           |]); |var city = unieap.byId('cityComboBox');
	 *           |city.getDataProvider().addItem({CODEVALUE:5,CODENAME:'大连'});
	 *           //添加一条item
	 *           |city.getDataProvider().addItem([{CODEVALUE:6,CODENAME:'鞍山'},{CODEVALUE:7,CODENAME:'瓦房店'}]);//添加一个item数组，多条item
	 *           如上代码执行后，city ComboBox可以下拉出7条数据，包括动态添加进来的'大连'、'鞍山'、'瓦房店'
	 */
	addItem: function(item) {
		if (this.items && dojo.isArray(this.items)) {
			if (dojo.isArray(item)) {
				this.items = this.items.concat(item);
			} else {
				this.items.push(item);
			}
		}
	},
	
	/**
	 * @summary: 选中一个或多个节点
	 * @param： {array} item
	 * @param: {boolean} 是否改变显示值 默认true
	 * @example: |function setSelectItems(){ | var items =
	 *           unieap.byId("setSelect").getDataProvider().getItems(); |
	 *           unieap.byId("setSelect").getDataProvider().setSelectedItems([items[2],items[3]],true); |} |<div
	 *           id="setSelect" popup="{displayStyle:'multi'}"
	 *           dojoType="unieap.form.ComboBox"
	 *           dataProvider="{'store':'city_store'}"> |</div>
	 *           以上代码执行后，会将第三条和第四条数据选中。
	 */
	setSelectedItems: function(items, display) {
		if (dojo.isArray(items)) {
			var d = this.widget.getDecoder();
			var values = [];
			var allItems = this.getItems();
			for (var i=0; i<items.length; i++) {
				for (var j=0; j<allItems.length; j++) {
					if (items[i] != allItems[j]) continue;
					var v = d.code(items[i]);
					values.push(v);
					break;
				}
			}
			if (display===false) {
				var text = this.widget.getText();
				this.widget.setValue(values.join(this.widget.valueSeparator));
				this.widget.setText(text);
			} else {
				this.widget.setValue(values.join(this.widget.valueSeparator));
			}
		}
	},
	
	/**
	 * @summary: 清空ComboBox
	 * @description: 清空ComboBox输入框的值及下拉框的选中状态
	 * @example: |var city = unieap.byId('cityComboBox');
	 *           |city.getDataProvider().clear();
	 */
	clear: function() {
		this.widget.setValue("");
	},
	
	// inner API
	_loadItems: function(store) {
		var data = [];
		if (store) {
			try {
				if(this.isReport){
					data = dojo.clone(store.rowSet.getData());
				}else{
					var rowset = store.getRowSet();
					rowset.forEach(function(row){
						var d = this.widget.getDecoder();
						var item = {};
						//sxf 2019.3.25  页面绑定的displayAttr和valueAttr带下划线时，进行判断并兼容
						if(d.displayAttr.indexOf('_')!=-1 ){
                            item[d.displayAttr] = row.getItemValue(d.displayAttr);
						}
						if( d.valueAttr.indexOf('_')!=-1){
                            item[d.valueAttr] = row.getItemValue(d.valueAttr);
						}
						for(var key in row.getData()){
							item[key] = row.getItemValue(key);
						}
						item[this.widget.getCascade().filterAttr] = row.getItemValue(this.widget.getCascade().filterAttr);
						var dataFilter = this.widget.getDataFilter();
						if (dataFilter.spellAttr) {
							item[dataFilter.spellAttr] = row.getItemValue(dataFilter.spellAttr);
						}
						if (dataFilter.searchAttr) {
							item[dataFilter.searchAttr] = row.getItemValue(dataFilter.searchAttr);
						}
						item["_rowIndex"] = row.index;
						data.push(item);
					},null,null,null,this);
				}
			} catch (e) {
				data = [];
			}
		}
		// 增加静态数据
		if (this.staticData) {
			data = [].concat(this._createStaticItems(), data);
            //判断数据来源是否来自toolbar
            if(data[0].CODENAME == 'toolbar' || data[0].CODEVALUE == 'toolbar'){
                this.widget.isToolBar = true;
                var curtail = function(arr){
                    var m = arr.slice(0);
                    m.splice(0,1);
                    return m;
                }
                data = curtail(data);
            }
		}
		// 增加自定义数据
		if (this.customItem) {
			data = [].concat(this.customItem, data);
            //判断数据来源是否来自toolbar
            if(data[0].CODENAME == 'toolbar' || data[0].CODEVALUE == 'toolbar'){
                this.widget.isToolBar = true;
                var curtail = function(arr){
                    var m = arr.slice(0);
                    m.splice(0,1);
                    return m;
                }
                data = curtail(data);
            }
		}
		this.items = data;

		// 2020.1.6 chentaoyu 以下影响默认值逻辑
		// if(this.isComboShowSelect()){
		// 	var text  = this.widget.comboShowSelectText || unieap.widget.form.comboShowSelectText;
		// 	var d = this.widget.getDecoder()
		// 	if(this.items&&this.items.length>0){
		// 		var _item={};
		// 		_item[d.valueAttr]=this.widget.comboShowSelectValue;
		// 		_item[d.displayAttr]=text;
		// 		this.items = [ _item ].concat(this.items);
		// 	}
		// }
		//2018.8.2 sxf 下拉菜单增加空行，在comboBoxPopop.js判断必填时删除空行
		// if(this.items && this.items.length>0  && !this.widget.isToolBar){
         //    var addInfo=JSON.parse(JSON.stringify(this.items[0]));
		// 	for(var v in addInfo){
         //            addInfo[v]=null;
		// 	}
         //    this.items = [addInfo].concat(this.items);
		// }
	},
	
	isComboShowSelect:function(){
		var flag=this.widget.comboShowSelect;

		if(flag!=null){
					return flag;
		}else{
			dojo.require("unieap.global");
			return unieap.widget.form.comboShowSelect;	
		}		
		
	},
	
	_checkLoseItems: function(values) {
		if (values==null || !dojo.isArray(values)) return;
		var d = this.widget.getDecoder(), items = this.items;
		var loseitems = [];
		dojo.forEach(values,dojo.hitch(this.widget,function(v){
			var _item=null;
			for (var i=0; i<items.length; i++) {
				var item = items[i],
					dvalue = d.code(item);
				this.dataType=="boolean" && (dvalue=String(dvalue));
				if (dvalue == v) {
					_item = item;
					break;
				}
			}
			if (_item == null) {
				loseitems.push(this.getLoseItem.call(this,v));
			}
		}));
		this._setLoseItems(loseitems)
	},
	
	_setLoseItems: function(items) {
		if (items==null || !dojo.isArray(items)) {
			this._loseItems = null;
			return; 
		}
		this._loseItems = items;
	},
	
	_createStaticItems: function(){
		var node = this.widget._staticNode;
		var items = [];
		var d = this.widget.getDecoder();
		dojo.forEach(node.childNodes, function(option) {
			if (option && option.tagName=="OPTION") {
				var item = {};
				item[d.displayAttr] = option.innerHTML;
				item[d.valueAttr] = option.value;
				items.push(item);
			}
		});
		return items;
	},
	
	_createSpellCols: function(items, dataFilter, displayAttr, spellAttr) {
		// 将此列加到模糊匹配中去
		if(dataFilter.searchAttr != null){
			if(dataFilter.searchAttr.indexOf(dataFilter.spellAttr) == -1){
				dataFilter.searchAttr=[].concat(dataFilter.searchAttr).concat(dataFilter.spellAttr);
			}
		}else{
			dataFilter.searchAttr=[].concat(dataFilter.searchAttr).concat(dataFilter.spellAttr);
		}
		
		// 已有此列时返回
		if (dojo.some(items, function(item){return item[spellAttr]!=null;})){
			return items;
		}
		// 将此列加到模糊匹配中去
//		dataFilter.searchAttr=[].concat(dataFilter.searchAttr).concat(dataFilter.spellAttr);
		dojo.require("unieap.util.spell");
		var _self = this;
		items = dojo.map(items, function(item) { 
			// if(unieap.isUserStyle){
			//     if(unieap.currentStyle == 'network'){
			    	var itemValueIgnoreCase=_self._getItemValueIgnoreCase(item,displayAttr);
					if (typeof(itemValueIgnoreCase) != "string") {
						item[spellAttr] = unieap.makePy(itemValueIgnoreCase+"");
					}else{
                        item[spellAttr] = unieap.makePy(itemValueIgnoreCase);
					}

                // }else{
                 //    item[spellAttr] = unieap.makePy(_self._getItemValueIgnoreCase(item,displayAttr).toString());
				// }

			// }else{
             //    item[spellAttr] = unieap.makePy(_self._getItemValueIgnoreCase(item,displayAttr).toString());
			// }
			//
			 
			return item;
		});
		return items;
	},
	_getItemIgnoreCharacter:function(items,displayAttr,text){
		var reg= new RegExp("[`~!@#$%^&*()+=|{}':;',\\[\\]<>/?~！@#￥%……&*（）——+|{}【】‘；：”“’。，、？-]","g");
		if(text.replace(reg,"")!=""){
			for (var i=0; i<items.length; i++) {
				var item= items[i];
				item[displayAttr]=item[displayAttr].replace(reg,"");
			}
		}
		return items;
	},
	_getItemValueIgnoreCase:function(item,name){
		var itemValue = item[name];
		if(itemValue)
			return itemValue;
		var nameLowerCase = name.toLowerCase();
		var itemLowerCaseValue = item[nameLowerCase];
		if(itemLowerCaseValue)
			return itemLowerCaseValue;
		var nameUpperCase = name.toUpperCase();
		var itemUpperCaseValue = item[nameUpperCase];
		if(itemUpperCaseValue)
			return itemUpperCaseValue;
		for(key in item){
			if(key.toLowerCase() == nameLowerCase){
				return item[key];
			}
		}
		return null;
	},
	
	_getItemRealKey:function(item,name){
		var itemValue = item[name];
		if(itemValue)
			return name;
		var nameLowerCase = name.toLowerCase();
		var itemLowerCaseValue = item[nameLowerCase];
		if(itemLowerCaseValue)
			return nameLowerCase;
		var nameUpperCase = name.toUpperCase();
		var itemUpperCaseValue = item[nameUpperCase];
		if(itemUpperCaseValue)
			return nameUpperCase;
		for(key in item){
			if(key.toLowerCase() == nameLowerCase){
				return key;
			}
		}
		return null;
	}
});

dojo.provide("unieap.form.ComboBoxPopup");
dojo.require("unieap.form.Popup");
dojo.require("unieap.global")
dojo.declare("unieap.form.ComboBoxPopup", unieap.form.Popup, {
	/**
	 * @declaredClass:
	 * 		unieap.form.ComboBoxPopup
	 * @summary:
	 * 		下拉框的弹出框
	 * @superClass:
	 * 		unieap.form.Popup
	 * @example:
	 * |var city = new unieap.ds.DataStore('city_store', [
	 * |	{CODEVALUE: 1,CODENAME: '宁波'}, 
	 * |	{CODEVALUE: 2,CODENAME: '宁海'}, 
	 * |	{CODEVALUE: 3,CODENAME: '温州'}, 
	 * |	{CODEVALUE: 4,CODENAME: '沈阳'}, 
	 * |	{CODEVALUE: 5,CODENAME: '大连'}, 
	 * |	{CODEVALUE: 6,CODENAME: '金州'},
	 * |	{CODEVALUE: 7,CODENAME: '旅顺'},
	 * |	{CODEVALUE: 8,CODENAME: '鞍山'}
	 * |]);
	 * |<div dojoType="unieap.form.ComboBox" 
	 * |		dataProvider="{'store':'city_store',valueAttr:'CODEVALUE',displayAttr:'CODENAME'}"
	 * |		popup="{displayStyle:'multi',height:100px}">
	 * |</div>
	 * 上述代码展示，通过popup属性配置下拉框多选和下拉框高度
	 * @img:
	 * 		images/form/combobox_multi_height.png
	 */
	 
	// 用div标签并且设置taindex为0,在firefox下通过document.actionElement可以获得到
	templateString: 
		"<div tabindex='0' class='u-combobox-list' dojoAttachPoint='listNode,popupcontainer,containerNode'>"+
			"<div class='u-combobox-list-header' dojoAttachPoint='listHeaderNode'>"+
				"<table dojoAttachPoint='tableHeaderNode'></table>"+
			"</div>"+
			"<div class='u-combobox-items-container' dojoAttachPoint='listContainerNode'>"+
				"<table dojoAttachPoint='tableBodyNode,focusNode'><tbody></tbody></table>"+
			"</div>"+
			"<div class='u-combobox-list-footer' dojoAttachPoint='listFooterNode'></div>"+
		"<div>",
	/**
	 * @summary:
	 * 		指定下拉框的高度
	 * @type：
	 * 		{number}
	 * @default:
	 * 		auto
	 * @example:
	 * |	<div dojoType='unieap.form.ComboBox' id='comboBox1' popup="{height:'200px'}">
	 * |	</div>
	 */
	height: "auto",
	
	/**
	 * @summary:
	 * 下拉列表item个数限制
	 */
	pageSize: -1,
	
	/**
	 * @summary:
	 * 		下拉框的显示类型
	 * @description:
	 * 		下拉框的显示类型,可以在global.js中定义全局默认值
	 * @type：
	 * 		"string"
	 * @enum：
	 * 		{"table"|"list"|"multi"}
	 * @example:
	 * |<div dojoType="unieap.form.ComboBox" popup="{displayStyle:'table'}" dataProvider="{'store':'city_store'}">
	 * |</div>
	 * 上述代码展示了displayStyle为table的配置
	 * @img:
	 * 		images/form/combobox_table.png
	 */
	displayStyle: unieap.widget.form.comboDisplayStyle,
	
	/**
	 * @summary:
	 * 		下拉框的结构
	 * @type:
	 * 		{object}
	 * @example:
	 *|	<script type="text/javascript">  
	 *|		var search = new unieap.ds.DataStore('mysearch', [
	 *|		 		{CODEVALUE:'baidu',CODENAME: '百度'}, 
	 *|		 		{CODEVALUE: 'google',CODENAME: '谷歌'} 
	 *|			]);
	 *|		dataCenter.addDataStore(search);
     *|		var structure = {   
	 *|	            rows : [{   
	 *|	                field :"CODEVALUE",   
	 *|	                width : "30%"   
	 *|	            }, {   
	 *|	                "title" : "代码标题",   
	 *|	                field : "CODENAME",   
	 *|	                width : "70%"   
	 *|	            }]   
	 *|	        }   
	 *|	    var imgPath="/EAPDomain/ria33demo/pages/samples/form/images/";   
	 *|	    function getInnerHTML(value, item, field, text, matchReg){   
	 *|	        if (field == 'CODEVALUE') {   
	 *|	            if (item.CODEVALUE == "baidu") {   
	 *|	                return "<img style='display:block;height:16px;width:16px' src='"+imgPath+"baidu.bmp"+"' />"   
	 *|	            }else{   
	 *|	                return "<img style='display:block;height:16px;width:16px' src='"+imgPath+"google.bmp"+"' />"   
	 *|	            }   
	 *|	        }   
	 *|	        return "<span>" + value + "</span>";   
	 *|	    }   
	 *|	</script>  
	 *|	<div dojoType="unieap.form.ComboBox" popup="{structure:structure,getInnerHTML:getInnerHTML}" dataProvider="{'store':'mysearch'}">  
	 *|	</div>  
	 *上述代码展示了自定义下结构和下拉框的例子
	 *@img:
	 *		images/form/combobox_custom.png
	 */
	structure: null,
	
	// assumption that the widget is instanceof ComboBox
	widget: null,
	
	// template variables during opening
	_selection: null,/* Array of Item */
	_highlighted: null,// domNode
	
	// callback will be a function which will be called at the end of the closing of this popup
	_callback: null,
	
	// lift cycle
	postMixInProperties: function() {
		this.inherited(arguments);
		if (this.displayStyle=="multi") {
			this.structure = this.structure || unieap.widget.form.comboStructure;
			dojo.require("unieap.form.ComboBoxPopupMulti");
			dojo.mixin(this, unieap.form.ComboBoxPopup.multi);
		} else {
			dojo.require("unieap.form.ComboBoxPopupList");
			dojo.mixin(this, unieap.form.ComboBoxPopup.list);
		}
	},
	postCreate: function() {
		this.inherited(arguments);
		if (dojo.isWebKit) {
			this.connect(this.focusNode, "onmousedown", "_onMouseDown");
		} else {
			this.connect(this.focusNode, "onclick", "_onClick");
		}
		this.connect(this.focusNode, "onmouseover", "_onMouseOver");
		this.connect(this.focusNode, "onmouseout", "_onMouseOut");
		this.connect(this.focusNode, "onblur",	"_onBlur");
	},
	destroy: function() {
		dojo.query(".u-comboxbox-item", this.tableBodyNode).forEach(dojo.hitch(this, function(tr) {
			dojo.removeAttr(tr, "item");
		}));
		dojo.forEach(this.handleList,function(handle){
			dojo.disconnect(handle);
		});
		this.inherited(arguments);
	},
	
	// override parent
	/**
	 * @summary:
	 * 		打开下拉框
	 */
	open: function(items, selection, callback) {
		if(!this.widget._canPopOpen()){
			return;
		}
		if (!dojo.isArray(items)) {
			items = this.widget.getDataProvider().getItems();
            // 判断 quickSearch 添加外部自定义样式

                if(this.widget._autoDialogModel == "formQuery"){
                    dojo.addClass(this.domNode,'quickSearchList');
                }
                // majz 添加searchlist下拉框 最大宽度为1000px
                // if(parseInt(this.width)>=1000){
                //     dojo.addClass(this.domNode,'listMaxwidth1000');
                // }

			if (!dojo.isArray(items) || items.length==0)
				return;
		}
		if (this.pageSize == 0) return;
		if (this.pageSize > 0) {
			items = items.slice(0, this.pageSize);
		}
		
		if (selection) {
			this._selection = dojo.isArray(selection)?selection:[];
		} else {
			this._updateSelection();
		}
		this._callback = callback || this.widget._onPopupClose;
		this._highlighted = null;
		
		if (this.structure == null) {
			this._createStructure();
		}
        if(!this.widget.required  && !this.widget.isToolBar && this.widget._autoDialogModel !== "formQuery"){
            var addInfo=JSON.parse(JSON.stringify(items[0]));
            for(var v in addInfo){
                addInfo[v]=null;
            }
            items = [addInfo].concat(items);
        }
		this._createPopup(items, this.structure);
		this.inherited(arguments);
		//比较弹框高度和table内容高度，判断滚动条是否出现
		var list_h=this.height;
		var table_h=$(".u-combobox-items-container table ",this.domNode).height();
		if(this.displayStyle=="multi"){
            $(".u-combobox-items-container table",this.domNode).css("table-layout","fixed");
            $(".u-combobox-items-container table tr td:nth-child(1)",this.domNode).css("width","30px");
            if(this.height !="auto" && table_h>list_h){
                $(".u-combobox-items-container table td span",this.domNode).css("width",($(this.domNode).width()-37)+"px")
            }else {
                $(".u-combobox-items-container table td span",this.domNode).css("width",($(this.domNode).width()-30)+"px")
			}
		}
        //单选时弹框选项的span宽度与弹框宽度相等，内容超出宽度显示省略号
        if(this.displayStyle=="list"){
            // u-combobox-list
			if(this.height !="auto" && table_h>list_h){
                $(".u-combobox-items-container table td span",this.domNode).css("width",($(this.domNode).width()-7)+"px")

			}else{
                $(".u-combobox-items-container table td span",this.domNode).css("width",$(this.domNode).css("width"))
			}
        }
        //下拉框高度auto时，判断是否超出屏高   2019-3-18 sxf
		var limit_h=$("body").height()-dojo.style(this.popupcontainer, "top");
        if(this.height=="auto" && this.domNode.offsetHeight>limit_h){
            dojo.style(this.popupcontainer, 'height', (limit_h-40)+'px');
            var _h=limit_h-40-this.listHeaderNode.offsetHeight;
            dojo.style(this.listContainerNode,'height',_h+'px');
        }
        //旋转右边小图标
        $('#'+this.widget.id+' .u-form-combobox-icon-normal').addClass('u-form-combobox-icon-down');
        // dojo.query(".u-form-combobox-icon-normal", this.widget.id).addClass('u-form-combobox-icon-down');
        
     // 下拉多选添加全选功能 CH
		if(this.displayStyle == "multi"){
			if($(this.domNode.childNodes[1]).next(".checkAllDiv").length == 0) {
				// 创建div
				var checkDiv = document.createElement("div");
				$(checkDiv).addClass("checkAllDiv");
				$(this.domNode.childNodes[1]).after(checkDiv);
				// 创建input
				var td = document.createElement("td");
				td.style.width = "25px";
				td.style.position = "relative";
				$(td).addClass("u-down-unchecked");
				var input = document.createElement("input");
				input.type = "checkbox";
				input.id = "combobox-check-style";
				checkDiv.appendChild(td);
				var label = document.createElement("label");
				label.className = "multi-check-style";
				label.for = "combobox-check-style";
				td.appendChild(input);
				td.appendChild(label);
				var td2 = document.createElement("td");
				var span = document.createElement("span");
				span.innerHTML = "全选";
				checkDiv.appendChild(td2);
				td2.appendChild(span);
				var _that = this;
				$(this.domNode.childNodes[1]).next(".checkAllDiv").click(function(e) {
					_that._onSelectAll(e);
				});
			}
			this._isCheckAll();
		}
        
        if (!this.animate) {
			dojo.style(this.listContainerNode, "overflowY", "auto");
			// 高亮显示选中的节点
			// if(this.displayStyle == "multi") return;
			if (this._selection && this._selection.length>0) {
				var isfocusOption = false;
				var lastTr = null;
				for (var i=0; i<this._selection.length; i++) {
					dojo.query(".u-combobox-item", this.tableBodyNode).forEach(dojo.hitch(this, function(tr) {
						if (tr.item==this._selection[i]) {
							this._focusOptionNode(tr);
							isfocusOption = true;
						}
						else if(tr.item == "lastTr")
							lastTr = tr;
					}));
				}
				if(!isfocusOption && lastTr)
					this._focusOptionNode(lastTr);
			}
		}
		if(this.widget.class.indexOf("notAutoSelected") >-1){return} //如果是有这个class 不自动选中第一行
		/*打开下拉框默认选中第一个 和选中反选回值的问题   lind*/
		if(this.declaredClass=="unieap.form.ComboBoxPopup" && this._selection.length==0){
			if(this.widget.required){
				this._highlightNext(0);
			}else{
				this._highlightNext(1);
			}

		}
		/*打开下拉框默认选中第一个    lind*/
		if(this.declaredClass=="unieapx.form.QuickSearchPopup" && this._selection.length==0){
			this._highlightNext(0);
		   }
	},
	
	/**
	 * @summary:
	 * 		关闭下拉框
	 */
	close: function(callback) {
		if (this.isOpen()) {
			this.inherited(arguments);
			if (dojo.isFunction(callback)) {
				callback.apply(this.widget, [this._selection]);
			} else if (dojo.isFunction(this._callback))  {
				this._callback.apply(this.widget, [this._selection]);
			}
                $('#'+this.widget.id+' .u-form-combobox-icon-normal').removeClass('u-form-combobox-icon-down');
            // dojo.query(".u-form-combobox-icon-normal", this.widget.id).removeClass('u-form-combobox-icon-down');
		}
	},

	/**
	 * @summary:
	 * 		设置下拉框的结构
	 * @param：
	 * 		{object} structure
	 */ 
	setStructure:function(structure){
		this.structure=structure;
	},
	
	onAnimateBegin: function() {
		this.inherited(arguments);
		dojo.style(this.domNode, "visibility", "visible");
		dojo.style(this.listContainerNode, "overflowY", "hidden");
	},
	onAnimateEnd: function() {
		this.inherited(arguments);
		if (dojo.isIE) {
			if (this.listContainerNode.offsetHeight<this.tableBodyNode.offsetHeight) {
				dojo.style(this.listContainerNode, "overflowY", "scroll");
			}
		} else {
			dojo.style(this.listContainerNode, "overflowY", "auto");
		}
	},
	
	
	// API
	/**
	 * @summary:
	 * 		选中某条下拉数据之后的回调方法。
	 * @type：
	 * 		{function}
	 * @param:	
	 * 		{object} item
	 * 		 选中的本行数据
	 * @param
	 * 		{unieap.form.Combobox} widget
	 * 		combobox变量	
	 * @example:
	 * |<script type="text/javascript">
	 * |	var city = new unieap.ds.DataStore('city_store', [
	 * |		{CODEVALUE: 1,CODENAME: '宁波'}, 
	 * |		{CODEVALUE: 2,CODENAME: '宁海'}, 
	 * |		{CODEVALUE: 3,CODENAME: '温州'}
	 * |	]);
	 * |	function selectItem(item,widget){
	 * |		alert(item.CODEVALUE);
	 * |		alert(widget.id);
	 * |	}
	 * |</script>
	 * |<div id="combobox" dojoType="unieap.form.ComboBox" popup="{onSelect:selectItem}" dataProvider="{'store':'city_store'}">
	 * |</div>
	 * onSelect的可以或得两个参数，1.被选中的数据对象item 2.ComboBox控件对象widget			
	 */
	onSelect: function(item, widget) {
	},
	
	/**
	 * @summary:
	 * 		渲染下拉列表中的td的innerHTML
	 * @param 
	 * 		{string} value
	 * 		显示值
	 * @param:
	 * 	 	{object} item
	 * 		本行数据
	 * @param: 
	 * 		{string} field
	 * 		显示值所在的字段值,如：CODEVALUE CODENAME
	 * @param:
	 * 		{string} text
	 * 		当前输入域文本
	 * @param:  {object} matchReg
	 * 		默认提供的正则表达式,控制输入文本的高亮显示。
	 * @return：
	 * 		{innerHTML}返回innerHTML
	 * @example :
	 * |	<div dojoType="unieap.form.ComboBox" popup="{getInnerHTML:getInnerHTML}">
	 * |	</div>
	 * |	function getInnerHTML(value,item,field,text,matchReg){
	 * |		if(field=='age'){
	 * |			if(value<16){
	 * |				reurn "<img src='child.png'/>"
	 * |			}
	 * |			return "<img src='person.png'/>"
	 * |		}
	 * |		return "<span>"+value+"</span>";
	 * |	} 
	 * 		修改年龄字段的显示为图片
	 */
	getInnerHTML: function(value, item, field, text, matchReg) {
		if (matchReg) {
			value = value.toString().replace(matchReg,"<strong class='mtach'>$1</strong>");
		}
		// ie下td的innerHTML为"<"时不能正常显示，帮套上一个<span>
		if(value){
            return "<span>"+value+"</span>";
		}else {
            return value;
		}
	},
	// inner API
	_updateSelection: function(selection) {
		var selection = this.widget._getSelectedItems();
		this._selection = dojo.isArray(selection)?selection:null;
		// update ui?
	},
	_createPopup: function(items, structure) {
		// override by list|table|multi
	},
	_createStructure: function() {
		var d = this.widget.getDecoder();
		if (this.displayStyle=="table") {
			// table的默认展现方式
			this.structure = {
				rows: [
					{title:RIA_I18N.form.combobox.codeValue,field:d.valueAttr,width:'30%'},
					{title:RIA_I18N.form.combobox.codeName,field:d.displayAttr,width:'70%'}
				]
			}
		} else {
			this.structure = {
				rows: [
					{field: d.displayAttr}
				]
			}
		}
		return this.structure;
	},
	_resetWidgetHW: function() {
		//var listWidth = this._getListContainerNodeWidth();
		if (this.animate)
			dojo.style(this.domNode, "visibility", "hidden");
		dojo.style(this.domNode, "display", "block");
		dojo.style(this.popupcontainer, "height", "");
		dojo.style(this.listContainerNode, "height", "");
		var textFiledWidth = dojo.style(this.widget.domNode, 'width');
		if(this.width == "auto" || this.width==""){
			//dojo.style(this.popupcontainer, "width", (listWidth?(listWidth>textFiledWidth?listWidth:textFiledWidth):textFiledWidth) + 'px');
			//下拉域与comboBox宽度对齐
			dojo.style(this.popupcontainer, "width", (textFiledWidth-8) + 'px');
		}else{
			dojo.style(this.popupcontainer, "width", this.width);
		}
		if(this.height !="auto"){
            this.height = (this.height+"").replace(/[^0-9]/g,'');
            if (this.height && this.domNode.offsetHeight>this.height) {
                dojo.style(this.popupcontainer, 'height', this.height+'px');
                var _h=this.height-this.listHeaderNode.offsetHeight;
                dojo.style(this.listContainerNode,'height',_h+'px');
            }
		}
	},
	
	//获取下拉框的真实宽度
	_getListContainerNodeWidth:function(){
//		var div = document.createElement("div");
//		dojo.style(div,{
//			visibility: "hidden",
//			position: "absolute",
//			top: "-100px",
//			left: "-100px"
//		});
//		
//		div.appendChild(this.tableBodyNode);
//		dojo.doc.body.appendChild(div);
//		var bodyWidth = this.tableBodyNode.offsetWidth;
//		this.listContainerNode.appendChild(this.tableBodyNode);
//		
//		div.appendChild(this.tableHeaderNode);
//		var headerWidth = this.tableHeaderNode.offsetWidth;
//		this.listHeaderNode.appendChild(this.tableHeaderNode);
//		dojo.destroy(div);
//		return Math.max(headerWidth,bodyWidth)+24; //加上 24 px 是为了防止文字换行
		return 300;
	},
	
	// 使结点获得焦点，并高亮显示
	_focusOptionNode: function(/*DomNode */ node) {
		if (this._highlighted == node)
			return;
		this._blurOptionNode();
		this._highlighted = node;
		dojo.addClass(this._highlighted, "u-comobobox-item-hover");//这个class写错了，暂时将错就错。。。
		dijit.scrollIntoView(this._highlighted);	
	},
	_highlightNext: function(numItme) {
		if(numItme==null || numItme==undefined){
            numItme=0;
		}
		/*键盘上下键事件*/
//		if(this._highlighted){
//            this._focusOptionNode(this._highlighted);
//		}else 
		if (!this._highlighted) {
			this._focusOptionNode(this.tableBodyNode.rows[numItme]);
		} else if (this._highlighted.nextSibling) {
			this._focusOptionNode(this._highlighted.nextSibling);
		}
	},
	_highlightPrev: function() {
		if (!this._highlighted) {
			this._focusOptionNode(this.tableBodyNode.rows[0]);
		} else if (this._highlighted.previousSibling) {
			this._focusOptionNode(this._highlighted.previousSibling);
		}
	},
	_blurOptionNode: function() {
		if (this._highlighted) {
			dojo.removeClass(this._highlighted, "u-comobobox-item-hover");
			this._highlighted = null;
		}
	},
	
	// inner event handler
	_onMouseDown: function(evt) {
		var t = evt.target || evt.srcElement;
		var isItem = true;
		while (!t.item) {
			t = t.parentNode;
			if (t === this.listNode) {
				isItem = false;
				break;
			}
		}
		isItem && this._onSelect(evt, t);
		this._inmousedown = true;
	},
	
	_onClick: function(evt) {
		var t = evt.target || evt.srcElement;
		var isItem = true;
		while (!t.item) {
			t = t.parentNode;
			if (t === this.listNode) {
				isItem = false;
				break;
			}
		}
		isItem && this._onSelect(evt, t);
	},
	_onSelect: function(evt, target) {
		// override by list|table|multi
	},
	// 下拉多选添加全选功能 CH
	_onSelectAll: function(evt) {
		
	},
	// 鼠标移入
	_onMouseOver: function(evt) {
		var t = evt.target;
		while (t && !t.item) {
			t = t.parentNode;
		}
		if (!t) return;
		try {
			this._focusOptionNode(t);
		} catch (e) {}
		//增加tooltip工具
		var tagName=(evt.srcElement ? evt.srcElement.tagName : evt.target.tagName),
        target=evt.srcElement||evt.target;
		if(tagName=="SPAN" && $(target).html()){
            this._enableTooltip(evt);
		}
	},
	// 鼠标移出
	_onMouseOut: function(evt) {
		this._blurOptionNode();
        //移除tooltip工具
        var target=evt.srcElement||evt.target;
        if(target.tagName=="SPAN" && $(target).html()){
            this._disableTooltip(target);
		}
	},
	_handKeyUp: function(evt) {
		// 被autocompleter调用，似乎没必要
	},
	// when this popup is showing, handle onkeydown evt(from the inputNode of the widget)
	_handleKeyDown: function(evt) {
		// override by list|table|multi
	},
	_onBlur: function(evt){
		this.widget._onBlur(evt,true);
	},
	handleList:[],
    //2018.9.30 下拉框Tooltip
    _enableTooltip: function(e){
        this._toolTipTimer=setTimeout(dojo.hitch(this,function(){
            if(!this._globalSpan&&!dojo.byId('_globalSpan_')){
                this._globalSpan=dojo.create("span",{style: {
                        visibility: 'hidden',
                        position: 'absolute'
                    },id:'_globalSpan_'},dojo.body(),"first");
            }
            this._globalSpan = dojo.byId('_globalSpan_');
            if(dojo.isIE == 6){
                dojo.style(this._globalSpan,'display','');
            }
            var cellNode,
                fontSize="12px",
                paddingRight=0,
            // var tagName=(evt.srcElement ? evt.srcElement.tagName : evt.target.tagName),
                target=e.srcElement||e.target;
            try{
                cellNode=target;
                fontSize=dojo.style(cellNode,'fontSize');
            }catch(ex){
            }
            this._globalSpan.style.fontSize=fontSize;
            //在配置了filter的情况下不判断会报错
            if(!cellNode||!cellNode.innerHTML) return;
            var innerHTML,
                tooltipHTML = innerHTML = cellNode.innerHTML;
            // innerHTML=cellNode.innerHTML;
            innerHTML = "<DIV class=\"u-grid-text\">" +innerHTML+ "</DIV>";
            this._globalSpan.innerHTML = innerHTML;
            paddingRight=parseInt(dojo.getComputedStyle(cellNode).paddingRight);//火狐下tooltip报脚本错误问题 见U_EAP00008619
            var cellNodeWidth = dojo.contentBox(cellNode).w;
            var showToolTip = dojo.contentBox(this._globalSpan).w-paddingRight>=cellNodeWidth;//U_EAP00028357
            //解决IE6下显示tooltip出现滚动条的问题 见U_EAP00008377
            dojo.isIE==6&&dojo.style(this._globalSpan,"display","none");
            //判断cellNodeWidth是否为0，解决新表格在滚动鼠标滑轮时cellNode宽度为0出现toolTip的bug 见U_EAP00021303
            if(showToolTip && 0 != cellNodeWidth){
                //整个window的宽度
                var windowWidth;
                try {
                    windowWidth = dojo.style(unieap.getTopWin().dojo.body(),'width');
                }
                catch(err) {
                    windowWidth = $(document.body).width();
                }
                //全文的tooltip长度
                var tooltipWidth = dojo.style(this._globalSpan,'width');
                var aroundNodePos = dojo.coords(cellNode, true);
                //cell的宽度
                var cellNodeWidth = aroundNodePos.w;
                var cellX = aroundNodePos.x;
                var rightPlaceWidth = windowWidth-cellX-cellNodeWidth;

                var isSetTooltipWidth = false;

                if(cellX > rightPlaceWidth){//tooltip出现在左侧
                    if( (cellX < tooltipWidth) || (tooltipWidth > 600)){//tooltip如果太宽，需要制定大小 而且全屏也不美观
                        tooltipWidth = Math.floor(Math.min((cellX-100),600));
                        isSetTooltipWidth = true;
                    }
                }else {
                    if(tooltipWidth>600){//tooltip在右侧但太宽
                        tooltipWidth = Math.floor(Math.min((rightPlaceWidth-100),600));
                        isSetTooltipWidth = true;
                    }
                }

                if(isSetTooltipWidth){
                    tooltipHTML = "<DIV style='padding: 0 5px 0 5px;vertical-align: middle;word-wrap: break-word;overflow: hidden;" +
                        "height:100%;width:"+tooltipWidth+"px'>" +tooltipHTML+ "</DIV>";
                }else{
                    tooltipHTML = "<DIV style='padding: 0 5px 0 5px;vertical-align: middle;word-wrap: break-word;overflow: hidden;" +
                        "height:100%;'>" +tooltipHTML+ "</DIV>";
                }

                unieap.showTooltip(tooltipHTML,cellNode);
            }

        }),0);
    },
    //2018.10.8 隐藏Tooltip
    _disableTooltip: function(e){
        clearTimeout(this._toolTipTimer);
        this._globalSpan&&unieap.hideTooltip(e);
    }
});
dojo.provide("unieap.form.ComboBoxPopupList");
unieap.form.ComboBoxPopup.list = {
	
	_createPopup: function(items, structure,text) {
		this._createHeader(structure);
		this._createOptions(items, structure,text);
	},
	_createHeader: function(structure) {
		dojo.empty(this.tableHeaderNode);
		var head = dojo.create("thead");
		var tr = dojo.create("tr", null, head);
		if (dojo.some(structure.rows, function(row) {return !row.title})) {
			dojo.style(this.listHeaderNode, "display", "none");
		} else {
			// 每列都有title的情况
			dojo.forEach(structure.rows, function(row) {
                /*默认计算下拉框表格头部每列宽度*/
//				dojo.create("th", {innerHTML: row.title, style:{"width": row.width||""}}, tr);
                var titleDefaultWidth = unieap._calStringWidth(row.title) + 14;
                dojo.create("th", {innerHTML: row.title, style:{"width": titleDefaultWidth+'px'}}, tr);
			});
			dojo.style(this.listHeaderNode, "display", "");
			this.tableHeaderNode.appendChild(head);
		}
	},
	_createOptions: function(results, structure, text) {
		var matchReg = null;
		if(typeof(this.optionSize) == "undefined" || this.optionSize == null){
			this.optionSize = 1;
		}
		if (text && text!="") {
			matchReg = this._getMatchReg(text);
		}
		dojo.empty(this.tableBodyNode);
		var tbody = dojo.create("tbody");

		var optimize = unieap.widget.form.comboBoxPopupOptimize;
		var widgetWidth = this.widget.getWidth();
		var itemWidths = [];
		//判断如果是quicksearch 并且传进来是自定义的options 并且text传进来是object  例如 正在查询数据 或者暂无结果
		if(typeof(text) === 'object' && results.length == [] &&this.widget._autoDialogModel == "formQuery"){
			dojo.addClass(this.domNode,'quickSearchList');
			var tableTr = dojo.create('tr');
			var tableTd = dojo.create("td", {}, tableTr);
			dojo.addClass(tableTr, "u-combobox-item");
			dojo.style(tableTd,{'text-align':'center'})
			tableTd.colspan = structure.length;
			tableTd.innerHTML = text.text;
			dojo.style(this.tableBodyNode,{'width':'100%'})
			tbody.appendChild(tableTr);
		}

		// 修改根据属性展示所有下拉框的值 sxf
				if($(this.widget.domNode).is('.combobox-open-all')){
					var dataLength = results.length;
				}else{
					var dataLength = Math.min(results.length,50*this.optionSize);
				}

		for (var i=0,l=optimize?dataLength:results.length; i<l; i++) {
			var item = results[i];
			var tr = dojo.create("tr");
			for (var k=0,len=structure.rows.length; k<len; k++) {
				var col = structure.rows[k];// it should be named "col" instead of "row"
				var field = col.field;
				field = this.widget.dataProvider._getItemRealKey(item,field);
				var value = (item[field]==undefined ? "" : item[field]);
//				var value = this.widget.dataProvider._getItemValueIgnoreCase(item,field);
				if(this.widget.comboShowSelectValue === value){
					value = "";
				}

             	var  td = dojo.create("td", {}, tr);


				// var td = dojo.create("td", {style:{"width": col.width||""}}, tr);
				td.innerHTML = this.getInnerHTML(value, item, field, text, matchReg);

                //动态改变PopList宽度
                    var _itemWidth = unieap._calStringWidth(value) + 18;

                    if(itemWidths.length <=k){
                        itemWidths.push(0);
                    }
                    itemWidths[k] = itemWidths[k] > _itemWidth ? itemWidths[k] : _itemWidth;
			}
			tr.item = item;
			dojo.addClass(tr, "u-combobox-item");
			tbody.appendChild(tr);

                // // 判断是否是quickserch
                // if(this.widget._autoDialogModel == "formQuery"){
                //     tr.item = item;
                //     dojo.addClass(tr, "u-combobox-item u-combobox-center");
                //     // 判断是否第一行数据，如果是第一行数据且非必填就不插入到数据集合中，仅针对quicksearch
                //     if(i == 0){
                //         // 第一行，必填项插入集合中
                //         if(this.widget.required){
                //             tbody.appendChild(tr);
                //         }
                //     }
                //     if(i!=0){
                //         // 判断偶数添加行变色样式
                //         if(i%2 ==0){
                //             dojo.addClass(tr, "u-from-quickserch-row-odd");
                //         }
                //         tbody.appendChild(tr);
                //     }
                //     //tbody.appendChild(tr);
                // }else{
                //     tr.item = item;
                //     dojo.addClass(tr, "u-combobox-item");
                //     tbody.appendChild(tr);
                // }

		}

		// 修改根据属性展示所有下拉框的值 sxf
				if(!$(this.widget.domNode).is('.combobox-open-all') &&this.widget._autoDialogModel != "formQuery"){
					if(optimize && results.length > 50*this.optionSize){
						var lastTr = dojo.create("tr"),
							lastTd = dojo.create("td", {style:{"width": "100%"},align:"center",colspan:structure.rows.length},lastTr),
							_this = this;
						lastTd.innerHTML = "<strong class='mtach'>……</strong>";
						dojo.addClass(lastTr, "u-combobox-item");
						lastTr.item = "lastTr";
						tbody.appendChild(lastTr);
						this.handleList.push(dojo.connect(lastTr,'onmousedown',function(evt){
								var scrollThisDom = $(this).parents('.u-combobox-items-container');
								var thisScrollTop = scrollThisDom.scrollTop();
								//dojo.isWebKit && dojo.stopEvent(evt);//U_EAP0002846
								//ie 下拉不正常 zhaohf
								(dojo.isWebKit || evt) && dojo.stopEvent(evt);//U_EAP00028464
								_this.optionSize ++;
								_this._createOptions(results,structure,text);
								scrollThisDom.scrollTop(thisScrollTop);

						}));
					}
				}
		this.tableBodyNode.appendChild(tbody);

        //重置下拉宽度
        // if(unieap.isUserStyle){
            var popWidth = this.widget.getPopup().width || 0;
			var maxWidth = dojo.style(dojo.body(),"width")-320;
            popWidth = (popWidth + '').replace('px','');
            popWidth = parseInt(popWidth);
			popWidth = popWidth>maxWidth?this.widget.getPopup().width=maxWidth+'px':popWidth;
            var itemWidth = 0;
            var cellWidth = 0;
            //quickSerach 下拉
            var listHeader = $(tbody).parents('.u-combobox-list').find('.u-combobox-list-header table tr th');
            if(listHeader.length == itemWidths.length){
                for(var i = 0;i<itemWidths.length;i++){
                    var header = $(listHeader[i]).html();
                    if(header){
                        var _itemWidth = unieap._calStringWidth(header) + 14;
                        itemWidths[i] = itemWidths[i] > _itemWidth ? itemWidths[i] : _itemWidth;
						cellWidth+= itemWidths[i];
                    }
                }
            }
            for(var i = 0;i<itemWidths.length;i++){

                //大于1时为quickSerch,处理滚动条宽度
                //等于1时为下拉框 不处理
                //if(itemWidths.length > 1){
                //最后一列加20宽度作为滚动条
                if(i == (itemWidths.length -1)){
                    itemWidths[i] = itemWidths[i] + 20;
                }

				if((cellWidth+itemWidths.length*10>maxWidth) &&  (itemWidths[i] >(maxWidth/itemWidths.length-10))){
					itemWidths[i] =maxWidth/itemWidths.length-10;
				}
                //头宽度
                if(listHeader.length == itemWidths.length){
                    $(listHeader[i]).css('width',itemWidths[i] + 'px');
                }
                //内容宽度
                $('tr td:eq('+i+')',tbody).css('width',itemWidths[i] + 'px');

                itemWidth += itemWidths[i];
            }
            if(itemWidth > popWidth && itemWidth > (widgetWidth - 8)){
                this.widget.getPopup().width = itemWidth;
                if(this.widget.getPopup().width > maxWidth){
					this.widget.getPopup().width= maxWidth+'px';
				}
				if(this.widget._autoDialogModel == "formQuery"){
					this.widget.getPopup().width = itemWidth+20 +'px';
				}
			}
			//夏刚增加
			if(
				this.widget.params &&
				this.widget.params.prompt &&
				this.widget.params.prompt.promptMsg &&
				this.widget.params.prompt.promptMsg.indexOf('offCalStrWidth') != -1){
				   for(var i = 0;i<structure.rows.length;i++){
					 //头宽度
					   if(listHeader.length == itemWidths.length){
						   $(listHeader[i]).css('width',structure.rows[i].width);
					   }
					   //内容宽度
					$('tr td:eq('+i+')',tbody).css('width',structure.rows[i].width);
				   }
				  }

            // 不是QuickSearch才执行 chenhao
            if(this.widget._autoDialogModel != "formQuery"){
                //如果当前需要的宽度小于现有的宽度，但现有的还大于控件的宽度，自动恢复到控件宽度 zhaohf
                if(itemWidth < popWidth && popWidth > (widgetWidth-8)&& itemWidth < (widgetWidth-8)){
                    this.widget.getPopup().width = widgetWidth;
                }
                //如果当前需要的宽度小于现有的宽度，但现有的还大于控件的宽度，并且需要的宽度大于控件宽度，设置为需要的宽度
                if(itemWidth < popWidth && popWidth > (widgetWidth-8)&& itemWidth > (widgetWidth-8)){
                    this.widget.getPopup().width = itemWidth;
                }
            }
        // }

 		// 点击加载更多数据时，设置下拉项宽度，增加省略号 2019-4-1 sxf
        if(this.widget._autoDialogModel != "formQuery"){
            if(this.optionSize>1){
                if(this.height !="auto" ){
                    $(".u-combobox-items-container table td span",this.domNode).css("width",($(this.domNode).width()-7)+"px")
                }else{
                    $(".u-combobox-items-container table td span",this.domNode).css("width",$(this.domNode).css("width"))
                }
            }

		}
	},
	_getMatchReg: function(text) {
		try {
			// new RegExp("("+text+")","gi")可能发生异常
			if (text != "") {
				return new RegExp("("+text+")","gi");
			}
		} catch (e) {
			return null;
		}
	},
	_onSelect: function(evt, target) {
		this._selection = [target.item];
		unieap.fireEvent4Widget(this,this.widget,this.onSelect,[target.item]);
		this.close(this._callback);
	},
	_handleKeyDown: function(evt) {
		if (!this.isOpen())
			return;
		var kcode = evt.keyCode;
		if (kcode==dojo.keys.PAGE_DOWN || kcode==dojo.keys.DOWN_ARROW) {
			this._highlightNext();
			this._selection = [this._highlighted.item];
			this.widget.setText(this.widget.getDecoder().decode(this._selection[0]));
		} else if (kcode==dojo.keys.PAGE_UP || kcode==dojo.keys.UP_ARROW) {
			this._highlightPrev();
			this._selection = [this._highlighted.item];
			this.widget.setText(this.widget.getDecoder().decode(this._selection[0]));
		} else if (kcode==dojo.keys.ENTER && this._highlighted) {
			this._onSelect(evt, this._highlighted);
		} else if (kcode==dojo.keys.ENTER && !this._highlighted 
					&& unieap.widget.form.comboSelectFirstValue) {
			this.widget._setFirstValueWhenTypeEnter();
		}
	}
}

dojo.provide("unieap.form.ComboBoxPopupMulti");
unieap.form.ComboBoxPopup.multi = {
	_createPopup: function(items, structure) {
		this._createHeader(structure);
		this._createOptions(items, structure);
		// 下拉多选添加全选功能 CH
		this.resultItems = items;
	},
	_createHeader: function(structure) {
		dojo.empty(this.tableHeaderNode);
		var head = dojo.create("thead");
		var tr = dojo.create("tr", null, head);
		var checkboxtitle = null;
		if (dojo.isIE < 9) {
			// ie下设置checkbox.checked=boolean存在问题				
			checkboxtitle = document.createElement("<input type='checkbox' autocomplete='off' style='margin-right:4px'/>");
		} else {
			checkboxtitle = dojo.create("input", {type:"checkbox"});
			checkboxtitle.checked = "";
			dojo.style(checkboxtitle,"margin-right","4px");
		}			
		this.widget.selectAllHandle = this.connect(checkboxtitle,"onclick","selectAll");		
		checkboxtitle?dojo.create("th", {style:{"width":"30px"}}, tr).appendChild(checkboxtitle):dojo.create("th", {style:{"width":"30px"}}, tr);		
		if (dojo.some(structure.rows, function(row) {return !row.title})) {
			dojo.style(this.listHeaderNode, "display", "none");
		} else {
			// 每列都有title的情况
		
			dojo.forEach(structure.rows, function(row) {
				dojo.create("th", {innerHTML: "<span>"+row.title+"</span>", style:{"width": row.width||""}}, tr);
			});
			dojo.style(this.listHeaderNode, "display", "");
			this.tableHeaderNode.appendChild(head);
		}
	},
	_createOptions: function(results, structure, text) {
		var checkNodeTitle = dojo.query("input[type^=checkbox]",this.tableHeaderNode);
		var items = this.widget.getDataProvider().getItems();	
		var flagtrue=0;	
		var matchReg = null;
		var lengthByItem=items.length;	
		if(typeof(this.optionSize) == "undefined" || this.optionSize == null){
			this.optionSize = 1;
		}
		if (text && text!="") {
			matchReg = this._getMatchReg(text);
		}
		dojo.empty(this.tableBodyNode);
		var optimize = unieap.widget.form.comboBoxPopupOptimize;
		var tbody = dojo.create("tbody");
		for (var i=0,l=optimize?Math.min(results.length,50*this.optionSize):results.length; i<l; i++) {
			var item = results[i];
			var tr = dojo.create("tr");
			var selection = this._selection||[];
			if ((this.widget.comboShowSelect||this.widget.getDataProvider().isComboShowSelect()) 
				&& this.widget.comboShowSelectValue == item.CODEVALUE) {
				 //"请选择"行不生成checkbox
			} else if (dojo.indexOf(selection, item)!=-1) {
				item["checked"] = true;
			} else {
				item["checked"] = false;
			}
			var checkbox = null;
			if (dojo.isIE < 9) {
				// ie下设置checkbox.checked=boolean存在问题
				if (item["checked"]==true) {
					checkbox = document.createElement("<input type='checkbox' autocomplete='off' id='combobox-check-style'  checked/>");
				} else if (item["checked"]==false){
					checkbox = document.createElement("<input type='checkbox' autocomplete='off' id='combobox-check-style' />");
				}
			} else if (item["checked"]!=undefined) {
				checkbox = dojo.create("input", {type:"checkbox",id:"combobox-check-style"});
				checkbox.checked = item["checked"];
			}
            var label = dojo.create("label", {class:"multi-check-style",for:"combobox-check-style"});
            var displayAttr = this.widget.decoder.displayAttr,valueAttr=this.widget.decoder.valueAttr;
            	 displayAttr = this.widget.dataProvider._getItemRealKey(item,displayAttr);
            	 valueAttr = this.widget.dataProvider._getItemRealKey(item,valueAttr);
			if(!item[displayAttr] && !item[valueAttr]){
            //  2018.8.2 sxf  多选下拉出现空数据时不填加checkbox
            }else{
                checkbox?dojo.create("td", {class:(item["checked"]?"u-down-checked":"u-down-unchecked"),style:{"width":"30px","padding-left":"12px"}}, tr).appendChild(checkbox):dojo.create("td", {class:(item["checked"]?"u-down-checked":"u-down-unchecked"),style:{"width":"30px","padding-left":"12px"}}, tr);
                dojo.query("td",tr)[0].appendChild(label);
            }

			for (var k=0,len=structure.rows.length; k<len; k++) {
				var col = structure.rows[k];// it should be named "col" instead of "row"
				var field = col.field;
				field = this.widget.dataProvider._getItemRealKey(item,field);
				var value = (item[field]==undefined ? "" : item[field]);
//				var value = this.widget.dataProvider._getItemValueIgnoreCase(item,field);
				var td = dojo.create("td", {style:{"width": col.width||""}}, tr);
				td.innerHTML = this.getInnerHTML(value, item, field, text, matchReg);
			}
			tr.item = item;
			dojo.addClass(tr, "u-combobox-item");
			tbody.appendChild(tr);
		}
		if(optimize&&results.length > 50*this.optionSize){
			var lastTr = dojo.create("tr"),
				lastTd = dojo.create("td", {style:{"width": "200px"},align:"center",colspan:structure.rows.length+1},lastTr),
				_this = this;
			lastTd.innerHTML = "<strong class='mtach'>……</strong>";
			dojo.addClass(lastTr, "u-combobox-item");
			lastTr.item = "lastTr";
			tbody.appendChild(lastTr);
			this.handleList.push(dojo.connect(lastTr,'onmousedown',function(evt){
				dojo.isWebKit && dojo.stopEvent(evt);//U_EAP00028464
				_this.optionSize ++;
				_this._createOptions(results,structure,text);
			}));
		}
		this.tableBodyNode.appendChild(tbody);
// 点击加载更多数据时，设置下拉项宽度，增加省略号  2019-4-1 sxf
		if(this.optionSize>1){
            if(this.height !="auto"){
                $(".u-combobox-items-container table td span",this.domNode).css("width",($(this.domNode).width()-37)+"px")
            }else {
                $(".u-combobox-items-container table td span",this.domNode).css("width",($(this.domNode).width()-25)+"px")
            }
		}
		for(var i=0;i<items.length;i++){
			if(items[i]["checked"]==true){
				flagtrue++;
			}
		}
		if(items.length>0 && items[0].CODEVALUE == this.widget.comboShowSelectValue){
			lengthByItem=lengthByItem-1;
		}
		if(checkNodeTitle[0] && flagtrue==lengthByItem ){
			checkNodeTitle[0].checked=true;
		}		
	},
	_getMatchReg: function(text) {
		var texts = text.split(this.widget.separator);
		text = dojo.filter(texts, function(text) {
			return text != "";
		}).join("|");
		try {
			// new RegExp("("+text+")","gi")可能发生异常
			if (text != "") {
				return new RegExp("("+text+")","gi");
			}
		} catch (e) {
			return null;
		}
	},
	_onSelect: function(evt, target) {
		var checkNodeTitle = dojo.query("input[type^=checkbox]",this.tableHeaderNode);
		var items = this.widget.getDataProvider().getItems();
		var item = target.item;
		if ((this.widget.comboShowSelect||this.widget.getDataProvider().isComboShowSelect()) 
			&& this.widget.comboShowSelectValue == item.CODEVALUE)
			return;
		var decoder = this.widget.getDecoder();
		var selection = [];
		var texts = [];
		var lengthByItem=items.length;	
		for (var i=0; i<items.length; i++) {
			var selected = false;
			for (var j=0; j<this._selection.length; j++) {
				if (this._selection[j] == items[i]) {
					selected = true;
					break;
				}
			}
			if (!selected && item==items[i]) {
				selection.push(items[i]);
				texts.push(decoder.decode(items[i]));
			} else if (selected && item!=items[i]) {
				selection.push(items[i]);
				texts.push(decoder.decode(items[i]));
			}
		}
		if(items.length>0 && items[0].CODEVALUE == this.widget.comboShowSelectValue){
			lengthByItem=lengthByItem-1;
		}
		if(checkNodeTitle!=null && checkNodeTitle!=""){
			if(lengthByItem==texts.length){					
				checkNodeTitle[0].checked=true;			
			}else {			
				checkNodeTitle[0].checked=false;			
			}
		}
		
		// 下拉多选添加全选功能 CH
		this._selection = selection;
		var _this = this;
		setTimeout(function() {
			_this._updateCheckbox(evt, target);
		}, 200)
		
//		this._selection = selection;
//		this._updateCheckbox(evt, target);
		this.widget.setText(texts.join(this.widget.separator));
		this.onSelect(item, this.widget);
			//表格编辑时，解决焦点失去，选择值失效问题  wangc20170816
			var values = [], de = this.widget.getDecoder();
			for (var i=0; i<selection.length; i++) {
				values.push(de.code(selection[i]));
			}
			var value = values.join(this.widget.valueSeparator);
			if (this.widget._validateChange(value)) {
				this.widget._changeValue(value);
				unieap.fireEvent(this.widget, this.widget.onChange,[value]);
			} else {
				this.widget._updateText(this.widget);
			}
	},
	// 下拉多选添加全选功能 CH
	_onSelectAll: function(event){
		var checkbox;
		var t= event.target;
		var checkNodeTitle = $(this.domNode.childNodes[1]).next(".checkAllDiv").find('input[type^=checkbox]');
		var decoder = this.widget.getDecoder();	
		var checkNode=dojo.query("input[type^=checkbox]",this.tableBodyNode);
		var items = this.resultItems;	
		var select = [];
		var text = [];
		var codeLs = [];
//		if ((event.type=="click" || event.type=="mousedown") && t && t.tagName=="LABEL") {
//			// 选中checkbox将自动改变checkbox的状态
//			checkbox=t;
//		}else 
		if((event.type=="click" || event.type=="mousedown") && t && t.tagName=="SPAN"){
			// 选中全选标签
			checkbox = $(t).parent().prev().find(":input");
			if (checkbox && checkbox.length>0)
				checkbox = checkbox[0];
			checkbox.checked = !checkbox.checked;
			
		}else if((event.type=="click" || event.type=="mousedown") && t && t.tagName=="LABEL"){
			// 选中全选标签
			checkbox = $(t).prev(":input");
			if (checkbox && checkbox.length>0)
				checkbox = checkbox[0];
			checkbox.checked = !checkbox.checked;
		} else {
			// 选中全选空白区域
			checkbox = dojo.query("input", t);
			if (checkbox && checkbox.length>0)
				checkbox = checkbox[0];
			checkbox.checked = !checkbox.checked;
		}
		checkNodeTitle[0].checked = checkbox.checked;
		if(checkNodeTitle[0] && checkNodeTitle[0].checked){					  	  	
							  	  	
			if(items[0].CODEVALUE!=this.widget.comboShowSelectValue){
				for(var i=0;i<checkNode.length;i++){
					if(decoder.decode(items[i])){
                        text.push(decoder.decode(items[i]));
                        codeLs.push(decoder.code(items[i]));
                        select.push(items[i]);
					}
                    checkNode[i].checked=true;
                    $(checkNode[i]).parent().removeClass("u-down-unchecked");
                    $(checkNode[i]).parent().addClass("u-down-checked");
                    $(checkNode[i]).parents(".u-combobox-item").addClass("u-combobox-item-select");
	  			}				
				for(var i=checkNode.length;i<items.length;i++){
                    text.push(decoder.decode(items[i]));
                    codeLs.push(decoder.code(items[i]));
				   select.push(items[i]);
				}  
			}else{				  		
			  	for(var i=0;i<checkNode.length;i++){
			  		if(decoder.decode(items[i])){
                        text.push(decoder.decode(items[i+1]));
                        codeLs.push(decoder.code(items[i+1]));
                        select.push(items[i+1]);
					}
				     checkNode[i].checked=true;
                    $(checkNode[i]).parent().removeClass("u-down-unchecked").addClass("u-down-checked");
                    $(checkNode[i]).parents(".u-combobox-item").addClass("u-combobox-item-select");
			    	}						        			      	
			        for(var i=checkNode.length;i<items.length;i++){
                        text.push(decoder.decode(items[i]));
                        codeLs.push(decoder.code(items[i]));
			   	       select.push(items[i]);
			        } 
				}
			checkNodeTitle.parent().removeClass("u-down-unchecked");
		  	checkNodeTitle.parent().addClass("u-down-checked");
							  
		}else{				  		
		  	for(var i=0;i<checkNode.length;i++){
		       	checkNode[i].checked=false;
		       	$(checkNode[i]).parent().removeClass("u-down-checked");
		       	$(checkNode[i]).parent().addClass("u-down-unchecked");
		       	$(checkNode[i]).parents(".u-combobox-item").removeClass("u-combobox-item-select");
		    }		
		  	checkNodeTitle.parent().removeClass("u-down-checked");
			checkNodeTitle.parent().addClass("u-down-unchecked");
		}					  
		this._selection = select;
		this.widget._isPopOnClick = true;
	    this.widget.setText(text.join(this.widget.separator));
		var value = codeLs.join(this.widget.valueSeparator);
		if (this.widget._validateChange(value)) {
			this.widget._changeValue(value);
		}
	    unieap.fireEvent(this.widget, this.widget.onChange,[codeLs.join(this.widget.separator)]);
	    
	},
	selectAll: function() {
		var checkNodeTitle = dojo.query("input[type^=checkbox]",this.tableHeaderNode);
		var decoder = this.widget.getDecoder();			
		var checkNode=dojo.query("input[type^=checkbox]",this.tableBodyNode);
		var items = this.widget.getDataProvider().getItems();	
		var select = [];
		var text = [];		
		if(checkNodeTitle[0] && checkNodeTitle[0].checked){					  	  	
			if(items[0].CODEVALUE!=this.widget.comboShowSelectValue){				  	  	
				for(var i=0;i<checkNode.length;i++){
	       			text.push(decoder.decode(items[i]));			     				   
	        		select.push(items[i]);
	       			checkNode[i].checked=true;						        	
	  			}				
				for(var i=checkNode.length;i<items.length;i++){
				   select.push(items[i]);
				}  
			}else{				  		
			  	for(var i=0;i<checkNode.length;i++){
				       	text.push(decoder.decode(items[i+1]));			     				   
				        select.push(items[i+1]);
				       	checkNode[i].checked=true;
			    	}						        			      	
			        for(var i=checkNode.length+1;i<items.length;i++){
			   	       select.push(items[i]);
			        } 
				}					  
		}else{				  		
		  	for(var i=0;i<checkNode.length;i++){
		       	checkNode[i].checked=false;				       		
		    }				 
		}					  
		this._selection = select;
		this.widget._isPopOnClick = true;
	    this.widget.setText(text.join(this.widget.separator));	
	},	
	_updateCheckbox: function(evt, target) {
		var t = evt.target;
		var checkbox,chkInput;
		if ((evt.type=="click" || evt.type=="mousedown") && t && t.tagName=="INPUT") {
			// 选中checkbox将自动改变checkbox的状态
			checkbox=t;
		} else {
			checkbox = dojo.query("input", target);
			if (checkbox && checkbox.length>0)
				checkbox = checkbox[0];
			// 选中行，手动改变checkbox的状态
			checkbox.checked = !checkbox.checked;
		}
        chkInput=dojo.query("input", target);
		if(chkInput && chkInput.length>0){
            target.item["checked"] = checkbox.checked;
            if(target.item["checked"]){
                $(target).children("td").eq(0).removeClass("u-down-unchecked").addClass("u-down-checked");
            }else {
                $(target).children("td").eq(0).removeClass("u-down-checked").addClass("u-down-unchecked");
            }
		}

		// 下拉多选添加全选功能 CH
		this._isCheckAll();
	},
	_handleKeyDown: function(evt) {
		if (!this.isOpen())
			return;
		var kcode = evt.keyCode;
		if (kcode==dojo.keys.PAGE_DOWN || kcode==dojo.keys.DOWN_ARROW) {
			this._highlightNext();
		} else if (kcode==dojo.keys.PAGE_UP || kcode==dojo.keys.UP_ARROW) {
			this._highlightPrev();
		} else if (kcode==dojo.keys.ENTER && this._highlighted) {
			this._onSelect(evt, this._highlighted);
			this.close(this._callback);
		} else if (kcode==dojo.keys.ENTER && !this._highlighted 
				&& unieap.widget.form.comboSelectFirstValue) {
			this.widget._setFirstValueWhenTypeEnter();
		}
	},
	// 下拉多选添加全选功能 CH
	_isCheckAll:function(){
		var checkAll = $(this.domNode.childNodes[1]).next(".checkAllDiv").children("td:eq(0)");
		var checkNodeTitle = $(this.domNode.childNodes[1]).next(".checkAllDiv").find('input[type^=checkbox]');
		var checkLength = $(this.domNode).find(".u-combobox-item input[type^=checkbox]:checked").length;
		var length = $(this.domNode).find(".u-combobox-item input[type^=checkbox]").length;
				if ($(this.domNode.childNodes[1]).next(".checkAllDiv").length == 1) {
					if (checkLength == length) {
						checkNodeTitle[0].checked = true;
						checkAll.removeClass("u-down-unchecked");
						checkAll.addClass("u-down-checked");
					} else {
						checkNodeTitle[0].checked = false;
						checkAll.removeClass("u-down-checked");
						checkAll.addClass("u-down-unchecked");
					}
				}
	}
}

dojo.provide("unieap.form.ComboBoxDecoder");
dojo.declare("unieap.form.ComboBoxDecoder", null, {
	/**
	 * @declaredClass:
	 * 		unieap.form.ComboboxDecoder
	 * @summary:
	 * 		下拉框的转码控制器
	 * @example:
	 * |	<div dojoType="unieap.form.ComboBox" 
	 * |		decoder="{displayAttr:'display',valueAttr:'value'}">
	 * |	</div>
	 * 		显示值为'display'字段值,value值为'value'字段值
	 */
	
	constructor: function(params) {
		dojo.mixin(this, params);
	},
	
	/**
	 * @summary:
	 * 		指定特定的字段值在文本控件中显示，与valueAttr一起使用
	 * @type：
	 * 		{string}
	 * @default：
	 * 		 "CODENAME"
	 */
	displayAttr: "CODENAME",
	
	/**
	 * @summary:
	 * 		指定特定的字段值在作为关键字，与displayAttr一起使用
	 * @type:
	 * 		{string}
	 * @default:
	 * 		CODEVALUE
	 */
	valueAttr: "CODEVALUE",
	
	code: function(item) {
		if (item == null) return null;
//		return item[this.valueAttr];
		return this.widget.dataProvider._getItemValueIgnoreCase(item,this.valueAttr);
	},
	
	decode: function(item) {
		if (item == null) return null;
//		return item[this.displayAttr];
		return this.widget.dataProvider._getItemValueIgnoreCase(item,this.displayAttr);
	}
});

dojo.provide("unieap.form.Cascade");
dojo.declare("unieap.form.Cascade", null,{
	/**
	 * @declaredClass:
	 * 		unieap.form.Cascade
	 * @summary:
	 * 		下拉框级联控制器
	 * @classDescription:
	 * 		可以通过字段实现级联
	 * 		可以通过改变数据源实现级联
	 * @example:
	 * |	var p = new unieap.ds.DataStore('province',
	 * |	 [{CODEVALUE: 11,CODENAME: '浙江'}, 
	 * |	  {CODEVALUE: 12,CODENAME: '辽宁'}]);
	 * |	var c = new unieap.ds.DataStore('city',
	 * |	 [{CODEVALUE: 1,CODENAME: '宁波',filter: 11},
	 * |	  {CODEVALUE: 2,CODENAME: '宁海',filter: 11},
	 * |	  {CODEVALUE: 3,CODENAME: '温州',filter: 11}, 
	 * |	  {CODEVALUE: 4,CODENAME: '沈阳',filter: 12},
	 * |	  {CODEVALUE: 15,CODENAME: '大连',filter: 12},
	 * |	  {CODEVALUE: 16,CODENAME: '金州',filter: 12}]);
	 * |	<div dojoType="unieap.form.ComboBox" id="combo" dataProvider="{store:'province'}">
	 * |	</div>
	 * |	<div dojoType="unieap.form.ComboBox" cascade="{primary:'combo',filterAttr:'filter'}" 
	 * |		dataProvider="{store:'city'}">
	 * |	</div>
	 * 		市根据省的变化而变化。
	 * 		由filterAttr字段'filter'去和主ComboBox的值进行匹配实现过滤
	 * 		另外提供两个可配置属性：defaultSelect和filterNull，详见属性描述信息
	 * @example:
	 * |	var p = new unieap.ds.DataStore('province',
	 * |	 [{CODEVALUE: 11,CODENAME: '浙江'}, 
	 * |	  {CODEVALUE: 12,CODENAME: '辽宁'}]);
	 * |	var c1 = new unieap.ds.DataStore('city1',
	 * |	 [{CODEVALUE: 1,CODENAME: '宁波'},
	 * |	  {CODEVALUE: 2,CODENAME: '宁海'},
	 * |	  {CODEVALUE: 3,CODENAME: '温州'}]);
	 * |	var c2 = new unieap.ds.DataStore('city2',
	 * |	  {CODEVALUE: 4,CODENAME: '沈阳'},
	 * |	  {CODEVALUE: 15,CODENAME: '大连'},
	 * |	  {CODEVALUE: 16,CODENAME: '金州']);
	 * |	function getCascadeStore(value){
	 * |		if(value==11){
	 * |			return 'city1'
	 * |		}else if (value == 12){
	 * |			return 'city2'
	 * |		}
	 * |	}
	 * |	<div dojoType="unieap.form.ComboBox" id="combo" dataProvider="{store:'province'}">
	 * |	</div>
	 * |	<div dojoType="unieap.form.ComboBox" cascade="{primary:'combo',getCascadeStore:getCascadeStore}" 
	 * |		dataProvider="{store:'city'}">
	 * |	</div>
	 * 		根据getCascadeStore方法实现切换store，此方式仅支持defaultSelect属性，不支持filterNull属性
	 * 		主ComboBox值为空时，需要在getCascadeStore中对value == null 进行处理。
	 * @img:
	 * 		images/form/cascade.png
	 */
	
	constructor:function(params){
		dojo.mixin(this,params);
		this._registerCascade();
	},
	
	/**
	 * @summary:
	 * 		指向级联的主ComboBox
	 * @description:
	 * 		primary的值为主ComboBox的id,须与filterAttr属性一起使用
	 * @type:
	 * 		{string}
	 */
	primary:"",
	
	/**
	 * @summary:
	 * 		两个下拉文本框联动时使用，须与primary属性一起使用。
	 * @description:
	 * 		两个ComboBox做级联的原理是主ComboBox的valueAttr列和从ComboBox的filterAttr(默认值为FILTER)列相对应。
	 *		主ComboBox选择后，从ComboBox根据主ComboBox的值，针对filterAttr对应的列作过滤。
	 * @type:
	 * 		{string}
	 * @default：
	 * 		"FILTER"
	 */
	filterAttr:"FILTER",
	
	/**
	 * @summary:
	 * 		级联时是否选中第一条数据
	 * @type：
	 * 		{boolean}
	 * @default：
	 * 		true
	 */
	defaultSelect:true,
	
	/**
	 * @summary:
	 * 		级联中，主ComboBox为空时，从ComboBox可配置"下拉出全部数据"或"下拉不出任何数据"
	 * @description:
	 * 		all:下拉出全部数据
	 * 		none:下拉不出任何数据
	 * @type:
	 * 		{enum}
	 * @enum：
	 * 		{'all'|'none'}
	 * @default：
	 * 		'all'
	 */
	filterNull:'all',
	
	
	/*_onSelectedChange时触发,在dojo.global.ComboBoxCascadeMap中寻找是否有注册到本combobox的从combobox
	有的话根据本combobox的value设置从combobox的级联filter条件
	@param secondId,若指定从combobox id 则只过滤该从combobox,否则过滤该主combobox下的全部从combobox*/
	cascade:function(secondId){
		if (dojo.global.ComboBoxCascadeMap) {
			var map = dojo.global.ComboBoxCascadeMap;
			var key=this.widget.id;
			if (map[key]) {
				if(secondId) {
					this._cascadeSecond(secondId);
				} else {
					var secondary=map[key];
					for (var m = 0, l = secondary.length; m < l; m++) {
						this._cascadeSecond(secondary[m]);
					}
				}
			}
		}
	},
	
	_cascadeSecond: function(secondId) {
		var second = dijit.byId(secondId);
		if (second) {
			var items=this.widget.getDataProvider().getSelectedItems()
			var item=(items&&items.length>0?items[0]:null)||null;
			var value=this.widget.getValue();
			var filter = {};
			filter[second.getCascade().filterAttr] = value;
			var valueAttr = this.widget.getDecoder().valueAttr;
			var getCascadeStore =second.getCascade().getCascadeStore;
			//判断方法是否被重写
			if(getCascadeStore){
//				second.getDataProvider().setDataStore(getCascadeStore(item && item[valueAttr]));
				second.getDataProvider().setDataStore(getCascadeStore(item && this.widget.dataProvider._getItemValueIgnoreCase(item,valueAttr)));
				second.getDataFilter().setCascadeFilter(null);
			}else{
				second.getDataFilter().setCascadeFilter(filter,
						second.getCascade().defaultSelect,
						second.getCascade().filterNull);
				//清除错误提示
				value!=null && second.getValidator().handleError(true);
			}
		}
	},
	
	/**
	 * @summary:
	 * 		获取级联store,需要按照业务需求重写
	 * @param:
	 * 		{object} value
	 */
	getCascadeStore: null,
	//getCascadeStore: function(value){}
	
	//注册级联信息，将自身注册成主Combobox的从Combobx
	_registerCascade:function(){
		if (this.primary) {
			var widget=this.widget;
			var widgetId = widget._rootID || "";
			var key=widgetId + this.primary;
			if (!dojo.global) {
				dojo.global= {};
			}
			if (!dojo.global.ComboBoxCascadeMap) {
				dojo.global.ComboBoxCascadeMap = {};
			}
			if (!dojo.global.ComboBoxCascadeMap[key]) {
				dojo.global.ComboBoxCascadeMap[key] = [];
			} 
			dojo.global.ComboBoxCascadeMap[key].push(widget.id);
		}
	},
	
	//通知主ComboBox，过滤this Combobox
	_notifyFilterMe: function() {
		if(this.primary) {
			var parent = dijit.byId((this.widget._rootID||"")+this.primary);
			parent && parent.getCascade().cascade(this.widget.id);
		}
	}
});
dojo.provide("unieap.form.AutoCompleter");
dojo.require("unieap.rpc");
dojo.declare("unieap.form.AutoCompleter",null,{
	/**
	 * @declaredClass:
	 * 		unieap.form.AutoCompleter
	 * @summary:
	 * 		下拉框的自动完成模块,用于自动从后台读取数据
	 * @example:
	 * |	<div dojoType="unieap.form.ComboBox" autoCompleter="{url:'/process.do'}"></div>
	 * 		上述代码表明服务端处理请求的地址为/process.do,在后台可以这样获得控件发送的字符串:
	 * |	String query=request.getParameter("query"); 
	 * 		然后服务端返回一个dataCenter对象,控件会自动把该dataCenter中的第一个datastore设置到ComboBox控件上
	 */
	
	//构造函数
	constructor:function(params){
		dojo.mixin(this,params);
	},
	
	widget:null,
	
	/**
	 * @summary:
	 * 		设置当输入的字符串长度为多少时,控件才向后台发送请求
	 * @type:
	 * 		{number}
	 */
	minQueryLength:1,
	
	/**
	 * @summary:
	 * 		设置处理http请求的url地址
	 * @description:
	 * 		url地址为应用程序相对路径,比如/process.do,控件会自动为之加上unieap.WEB_APP_NAME
	 * @type:
	 * 		{string}
	 */
	url:'',
	
	
	/**
	 * @summary:
	 * 		发送到服务端的字符串的名称,通过request.getParameter()可以获得到
	 * @default:
	 * 		query
	 * @type:
	 * 		{string}
	 */
	queryName:'query',
	
	
	/**
	 * @summary:
	 * 		设置是否让AutoComplter总是往后台发送请求
	 * @description:
	 * 		默认情况下,用户输入一个字符,服务端会返回一个datastore;如果用户再次输入一个字符并且该字符在返回的datastore之中，
	 * 		控件就不会再发请求。设置该属性为true,用户每输入一个字符,控件都会向服务端发送数据请求
	 * @defaut:
	 * 		false
	 * @type:
	 * 		{boolean}
	 */
	alwaysSendRequest:false,
	
	/**
	 * @summary:
	 * 		控件向服务端请求数据的回调事件,在请求数据之前触发
	 * @param:
	 * 		{object} params 传到后台的参数,用户可以自己来添加自定义的参数
	 * @example:
	 * |	<div dojoType="unieap.form.ComboBox" autoCompleter="{onBeforeSendQuery:fn}"></div>
	 * |	function fn(params,dc){
	 * |		unieap.debug(dc);
	 * |		params.name="psd";
	 * |		params.age=22;
	 * |	}
	 * |	//在Action端通过如下方法获取传递的参数：
	 * |	String name = request.getParameter("name"); //psd
	 * |	String age = request.getParameter("age"); //22
	 */
	onBeforeSendQuery:function(params,dc){
	},
	
	/**
	 * @summary:
	 * 		控件向服务端请求数据的回调事件,在获得请求的数据之后触发
	 * @param:
	 * 		{unieap.ds.DataCenter} dc 服务端返回的dataCenter
	 * @example:
	 * |	<div dojoType="unieap.form.ComboBox" jdId="demo" autoCompleter="{onBeforeSendQuery:fn}"></div>
	 * |	function fn(dc){
	 * |		alert(dc.declaredClass=='unieap.ds.DataCenter');
	 * |		unieap.debug(dc);
	 * |	}
	 */
	onAfterSendQuery:function(dc){
	},
	

	
	//////////////////////////////////////////内部方法///////////////////////////////
	
	_canSendQuery:function(sQuery){
		if(sQuery == null){
			sQuery = "";
		}
		var me = this;
    	var query=me.queryName;
		if(me.params && me.params["queryType"] == "LK" && me.params[query] == sQuery){	//上次请求过的条件不重复请求
			return false;
		}
	    if(sQuery.length < this.minQueryLength) {
	        return false;
	    }
		return true;
	},
	
	//往服务端发送数据请求

	//flag用来区分是否是通过setValue方式给带有autoCompleter属性的ComboBox赋值
	
	_setSendCache:function(url,params,dc){
		var key = url + "_" + JSON.stringify(params);
		unieap._autoCompleterCache = unieap._autoCompleterCache || {};
		unieap._autoCompleterCache[key] = dc;
		console.log("autoCompleter 设置缓存:" + key);
	},
	
	_getSendCache:function(url,params){
		var key = url + "_" + JSON.stringify(params);
		if(unieap._autoCompleterCache && unieap._autoCompleterCache[key]){
			console.log("autoCompleter 命中缓存:" + key);
			return unieap._autoCompleterCache[key];
		}
		return null;
		
	},
	
	

	_sendQuery:function(sQuery,selItems,isLazyOpen){
		var me=this;
	    if(this.url&&this._canSendQuery(sQuery)){
	    	var url=unieap.WEB_APP_NAME+this.url;
	    	var query=me.queryName;
			me.params = {};
			me.params[query] = encodeURIComponent(sQuery);
			me.params["queryType"] = "LK";
		    var dc=new unieap.ds.DataCenter();
		    me.onBeforeSendQuery(me.params,dc);//可以在此回调方法中重新修改已有参数或者增加其他参数
		    
		    var cacheDc = me._getSendCache(url,me.params);
		    if(cacheDc){
		    	me._showResult(cacheDc,selItems,isLazyOpen);
	    		me.onAfterSendQuery(cacheDc);
	    		return;
		    }
		    
		    if(me.widget){
			    $(me.widget.domNode).addClass('u-form-combobox-loading');
		    }
		    unieap.Action.requestData({
		    	url:url,
		    	parameters:me.params,
		    	sync:true,
		    	load:function(dc){
				    if(!dc){
						return;
					}
					me._showResult(dc,selItems,isLazyOpen);
		    		me._setSendCache(url,me.params,dc);
		    		me.onAfterSendQuery(dc);
		    		if(me.widget){
		    			$(me.widget.domNode).removeClass('u-form-combobox-loading');
		    		}
		    	}
		    },dc,false);//fasle表示不显示loading
	    }

	},
	
	_sendQueryByValue:function(value){
		if(value == null || value == "") return;
		var me=this;
	    if(this.url){
	    	var url=unieap.WEB_APP_NAME+this.url;
	    	var query=me.queryName;
			me.params = {};
			me.params[query] = value;
			me.params["queryType"] = "EQ";
		    var dc=new unieap.ds.DataCenter();
		    me.onBeforeSendQuery(me.params,dc);//可以在此回调方法中重新修改已有参数或者增加其他参数
		    
		    var cacheDc = me._getSendCache(url,me.params);
		    if(cacheDc){
		    	var store=cacheDc.getSingleDataStore();
				if(me.widget){
					me.widget.getDataProvider().setDataStore(store);
				}
	    		me._cacheStore(store);
				me.onAfterSendQuery(cacheDc);
	    		return;
		    }
		    
		    unieap.Action.requestData({
		    	url:url,
		    	parameters:me.params,
		    	sync:true,
		    	load:function(dc){
		    		if(!dc){
						return;
					}
					var store=dc.getSingleDataStore();
					if(me.widget){
						me.widget.getDataProvider().setDataStore(store);
					}
		    		me._cacheStore(store);
		    		me._setSendCache(url,me.params,dc);
					me.onAfterSendQuery(dc);
		    	}
		    },dc,false);//fasle表示不显示loading
	    }
		
	},
	
	
	_cacheStore:function(store){
		 var _dataCenter = this.dataCenter;
		 var _storeName = this.storeName;
		 var _decoder = this.decoder;
		 if(this.widget){
			 if(this.widget.dataCenter){
	    		 _dataCenter = this.widget.dataCenter;
	    	 }
			 if(this.widget.params.dataProvider && this.widget.params.dataProvider.store){
				_storeName = this.widget.params.dataProvider.store;
			 }
			 if(this.widget.getDecoder){
				 _decoder = this.widget.getDecoder()
			 }
		 }
		 
		 if(_dataCenter && _storeName && _decoder){
			 var cacheStore = _dataCenter.getDataStore(_storeName);
			 if(cacheStore){
    			var valueAttr = _decoder.valueAttr;
    			store.getRowSet().forEach(function(storeRow){
    				var isAddCache = true;
    				cacheStore.getRowSet().forEach(function(cacheRow){
    					if(storeRow.data[valueAttr] == cacheRow.data[valueAttr]){
    						isAddCache = false;
    					}
    				});
    				if(isAddCache){
    					cacheStore.getRowSet().addRow(storeRow.data,true);
    				}
    			});
    		}else{
    			_dataCenter.addDataStore(_storeName,store);
    		}
		 }
	},
	
	_showResult:function(dc,selItems,isLazyOpen){
	    var store=dc.getSingleDataStore();
	    
	    if(selItems && selItems.length > 0 && this.widget){
	    	var valueAttr = this.widget.getDecoder().valueAttr;
		    $.each(selItems || [],function(i,selItem){	// 补充选中的数据
		    	var isAppendLast = true;
		    	store.getRowSet().forEach(function(row){
		    		var rowData = row.data;
		    		if(rowData[valueAttr] == selItem[valueAttr]){
		    			isAppendLast = false;
		    		}
		    	});
		    	if(isAppendLast){
		    		selItem._rowIndex = store.getRowSet().getRowCount();
		    		store.getRowSet().addRow(selItem,true);
		    	}
		    })
	    }
		
	    if(this.widget){
	    	this.widget.getDataProvider().setDataStore(store);
	    	if($(this.widget.domNode).parent().length > 0 ){//表格上关闭 不再打开
	    		var me = this;
	    		
	    		function _openPopup(){
	    			me.widget.getPopup().open(null, selItems || [], me.widget._onPopupClose); 
	    		}
	    		
	    		if(isLazyOpen == true){
	    			function _lazyOpen(lazyCount){
	    				if(me.widget.getPopup()._isShowingNow){
	    					_openPopup();
	    				}else{
	    					if(lazyCount <= 20){ // 2秒内不打开,则不继续打开
	    						setTimeout(function(){
	    							_lazyOpen(lazyCount + 1);
    							},100);
	    					}
	    				}
	    			}
	    			_lazyOpen(0);
	    		}else{
	    			_openPopup();
	    		}
	    		
	    	}
	    }
		
		
	    this._cacheStore(store);
	    
//		this.widget.getPopup()._handKeyUp();
		//在设置alwaysSendRequest为true的情况下,用鼠标点击弹出的item,再输入字符,弹出窗口不打开,需要处理
//		this.widget.getPopup()._isShowingNow && this.widget.getPopup().close();
		
	},

	// 当ComboBox设置了autoCompleter属性后，如果grid与From绑定则Combobox无法级联
	// value是ComboBox.setValue()方法的value参数
	// flag为true表示是通过setValue给ComboBox赋值，而不是输入过滤查询赋值
	// value和flag只在通过setValue时有效，输入过滤查询时无效
	_handleKeyUp: function(value){
		var text=value || this.widget.getText();
		if(this.alwaysSendRequest || text == null || text == ""){	//空直接请求
			this._sendQuery(text);
		}else{
			var arr=this.widget.getDataProvider().getItems(text,false);
			(arr.length==0) && this._sendQuery(text)
		}
	}
})
dojo.provide("unieap.form.ComboBox");
dojo.require("unieap.form.TextBoxWithIcon");
dojo.declare("unieap.form.ComboBox", unieap.form.TextBoxWithIcon, {
	/**
	 * @declaredClass:
	 * 		unieap.form.ComboBox
	 * @superClass:
	 * 		unieap.form.TextBoxWithIcon
	 * @summary:
	 * 		普通下拉框
	 * @classDescription：
	 *		1.支持的数据源包括unieap.ds.DataStore和html的option节点。
	 *		2.输入框支持模糊匹配，支持拼音查询。
	 *		3.支持根据指定数据列排序。
	 *		4.支持ComboBox组件间的级联。
	 *		5.支持多种展现风格，包括列表，表格，多选列表。
	 *		6.支持数据过滤。
	 *		7.支持自定义下拉框的显示内容(见popup属性)
	 * @img:
	 * 		images/form/combobox.png
	 */
	 
	// 用户属性配置接口
	UserInterfaces: dojo.mixin(
		{
			dataProvider: "object",
			separator: "string",
			valueSeparator: "string",
			decoder: "object", 
			dataFilter: "object",
			autoCompleter: "object",
			cascade: "object",
			hasDefault: "boolean",
			focusOffset: "number",
			popup: "object",
			defaultText: "string",
			dataType: "boolean",
			textValidate: "boolean",
			comboShowSelect:"boolean",
			comboShowSelectValue:"string",
			comboShowSelectText:"string",
			strictFilter: "boolean",
			isReport: "boolean",
            threeSelection:"string",
            isToolBar:"boolean"

		},
		unieap.form.TextBoxWithIcon.prototype.UserInterfaces),
	
	// 组件，其中popup在父类中已有声名
	/**
	 * @type
	 * 		{object}
	 * @summary:
	 * 		设置数据源相关的信息
	 * @see：
	 * 		unieap.form.ComboBoxDataProvider
	 */
	dataProvider: null,
	
	/**
	 * @summary:
	 * 		设置下拉框转码相关的信息
	 * @description:
	 * 		定义下拉框数据的显示列名，保存值列名等。
	 * @type：
	 * 		{object}
	 * @example:
	 * |	<div id="multiCombobox"  dojoType="unieap.form.ComboBox" 
	 * |		${1}decoder="{displayAttr:'value',valueAttr:'key'}">
	 * |	</div>
	 * 	${1}对应的数据格式为[{key:'1',value:'value1'},{key:'2',value:'value2'}]
	 * @see：
	 * 		unieap.form.ComboboxDecoder
	 */
	decoder: null,
	
	/**
	 * @summary:
	 * 		设置数据源的过滤查询信息
	 * @type：
	 * 		{object}
	 * @see：
	 * 		unieap.form.ComboBoxDataFilter
	 */
	dataFilter: null,
	
	/**
	 * @summary：
	 * 		设置级联相关信息
	 * @type：
	 * 		{object}
	 * @see：
	 * 		unieap.form.Cascade
	 */
	cascade: null,
	
	//自动注入dataCenter
	Autowired : "dataCenter",
	
	/**
	 * @summary：
	 * 		设置自动下拉相关信息
	 * @type：
	 * 		{object}
	 * @see：
	 * 		unieap.form.AutoCompleter
	 */
	autoCompleter: null,
	
	/**
	 * @type：
	 * 		{object}
	 * @summary:
	 * 		设置弹出控件控制器
	 * @see：
	 * 		unieap.form.ComboBoxPopup
	 */
	popup: null,
	
	popupClass: "unieap.form.ComboBoxPopup",
	
	/**
	 * @summary:
	 *		多选时，数据的分隔符
	 * @type:
	 * 		{string}
	 * @default：
	 *		","
	 * @example:
	 * |	<div id="multiCombobox" popup="{displayStyle:'multi'}" dojoType="unieap.form.ComboBox" separator="#">
	 * |	</div>
	 * |	${1}unieap.byId("multiCombobox").setValue("1#2#3");
	 * 	${1}设置值为 1 2 3
	 */
	separator: ",",
	
	//多选时value的分隔符 注意：原有的separator已经退化为text的分隔符
	valueSeparator: ",",
	
	/**
	 * @summary:
	 * 		设置控件(绑定)值的数据类型
	 * @description:
	 * 		如果控件绑定的值为boolean类型，需要设置此属性为boolean.如果没有，会从元数据中取得
	 * @type:
	 * 		{string}
	 * @example:
	 * |<script type="text/javascript">
	 * |	//info的值为bool类型，不是字符串类型
	 * |	var ds=new unieap.ds.DataStore("formDs",[{info:true}]);
	 * |	var ds1=new unieap.ds.DataStore("infoDs",[{CODEVALUE:'true',CODENAME:'正确'},{CODEVALUE:'false',CODENAME:'错误'}]);
	 * |	dataCenter.addDataStore(ds);
	 * |	dataCenter.addDataStore(ds1);
	 * |</script>
	 * |<div dojoType="unieap.form.Form" binding="{store:'formDs'}">
	 * |	<div dojoType="unieap.form.ComboBox" dataType='boolean' dataProvider="{store:'infoDs'}">
	 * |</div>
	 */
	dataType: "",
	//
	/**
	 * @summary：
	 * 		是否默认选中第一条数据
	 * @description:
	 * 		在hasDefault属性和onChange事件一起使用的情况下请注意:
	 * 		var box=combox 错误写法,不应该使用jsId属性.由于dojo生命周期的关系,此时combox对象还没有创建
	 * 		正确写法为unieap.byId('combox1');
	 * @type：
	 * 		{boolean}
	 * @default：
	 * 		false
	 * @example：
	 * |	<div dojoType='unieap.form.ComboBox' hasDefault='true' onChange='fn' id='combox1' ></div>
	 * |	function fn(){
	 * |		${1}var box=unieap.byId('combobox1');
	 * |	}
	 * 	${1}在获取控件对象时推荐使用unieap.byId,这样可以保证代码无误!
	 */
	hasDefault: false,
	
	/**
	 * @summary:
	 * 		当焦点离开时校验输入值是否在下拉框中，如果不在清空下拉框
	 * @type：
	 * 		{boolean}
	 * @default：
	 * 		false
	 * @example:
	 * |//当输入非法值时焦点离开自动清空
	 * |<div dojoType='unieap.form.ComboBox' hasDefault='true' textValidate='true' ></div>
	 */
	textValidate: unieap.widget.form.textValidate,
	
	defaultText: "",
	
	/**
	 * @summary:
	 * 		覆盖全局配置默认选择项配置（该选项配置的值将常在下拉选项中）
	 * @type：
	 * 		{boolean}
	 * @default：
	 * 		null
	 * 
	 */
	comboShowSelect:null,
	
	// values
	values: [],
	
	/*
	 * input域keydown、onclick、oniconclick时将其设为true，
	 * input域blur、keyup时将其设为false
	 * 当keyup时，若此变量true，则认为在此域内完成一次type in，执行set
	 */
	_keyPressed: false,
	
	
	_hasBlur:false,
	
	comboShowSelectValue: unieap.widget.form.comboShowSelectValue || "",
	
	comboShowSelectText: "",
	
	/**
	 *  @summary:
	 * 		是否开启严格检索功能，默认关闭严格检索功能，开启模糊检索功能
	 *  @type：
	 * 		{boolean}
	 *  @default：
	 * 		false
	 * 	@example:
	 *      |//当设置strictFilter="true"时，即关闭模糊检索功能，启用严格检索功能。
	 * 		|<div dojoType='unieap.form.ComboBox' strictFilter="true" ></div>
	 */
	strictFilter: false,	
	
	isReport: false,

    /**
     *  @summary:
     * 		是否把下拉框转换为按钮形式
     *  @type：
     * 		{string}
     *  @default：
     * 		" "，默认为普通下拉框
     * 	@example:
     *      |//当设置threeSelection="all"时，下拉框变为  全部/是/否 按钮
     *      |//当设置threeSelection="two"时，下拉框变为  是/否 按钮
     * 		|<div dojoType='unieap.form.ComboBox' threeSelection="all" ></div>
     */
    threeSelection:"",
    /**
     *  @summary:
     * 		是否是ToolBar分页选项的下拉框
     *  @type：
     * 		{boolean}
     *  @default：
     * 		false
     */
    isToolBar:false,

	
	setIsReport: function(flag){
		this.isReport = flag;
	},
	
	// 获取组件的方法
	/**
	 * @summary:
	 * 		得到数据源控制器
	 * @return：
	 * 		{unieap.form.ComboBoxDataProvider}
	 * @see：
	 * 		unieap.form.ComboBoxDataProvider
	 */
	getDataProvider: function() {
		return unieap.getModuleInstance(this,"dataProvider", "unieap.form.ComboBoxDataProvider");
	},
	
	/**
	 * @summary:
	 * 		获取下拉框转码器
	 * @return：
	 * 		{unieap.form.ComboboxDecoder}
	 * @see：
	 * 		unieap.form.ComboboxDecoder
	 */
	getDecoder: function() {
		return unieap.getModuleInstance(this,"decoder", "unieap.form.ComboBoxDecoder");
	},
	
	/**
	 * @summary:
	 * 		得到数据过滤器
	 * @return：
	 * 		{unieap.form.ComboBoxDataFilter}
	 * @see：
	 * 		unieap.form.ComboBoxDataFilter
	 */
	getDataFilter: function(){
		return unieap.getModuleInstance(this,"dataFilter", "unieap.form.ComboBoxDataFilter");
	},
	
	/**
	 * @summary:
	 * 		获取级联控制器
	 * @return：
	 * 		{unieap.form.Cascade}
	 * @see：
	 * 		unieap.form.Cascade
	 */
	getCascade: function(){
		return unieap.getModuleInstance(this,"cascade", "unieap.form.Cascade");
	},
	
	/**
	 * @summary：
	 * 		获取自动下拉控制器
	 * @type：
	 * 		{unieap.form.AutoCompleter}
	 * @see：
	 * 		unieap.form.AutoCompleter
	 */
	getAutoCompleter:function(){
		return unieap.getModuleInstance(this,"autoCompleter", "unieap.form.AutoCompleter");
	},
	
	//U_EAP00027972
    constructor:function(param) {
        if(param && param.separator && typeof(param.valueSeparator) == "undefined"){
            param.valueSeparator = param.separator;
        }
		dojo.mixin(this, param);
	},
	
	// life cycle
	postMixInProperties: function() {
		// staticData功能
		if (this.dataProvider && this.dataProvider.staticData) {
			this._staticNode = dojo.clone(this.srcNodeRef);
		}
	},
	
	postCreate: function() {
		this.inherited(arguments);
		dojo.addClass(this.iconNode, "u-form-combobox-icon-normal");
		//构造器中调用_registerCascade
		this.getCascade();
		if (this.hasDefault||this.comboShowSelectValue) {
			if(this.getDataProvider().isComboShowSelect()){
				this._setValue(this.comboShowSelectValue);
			}else if(this.value){
				this._setValue(this.value);
			}
			else{
				var items = this.getDataProvider().getItems();
				if (items.length > 0) {
					this.setValue(this.getDecoder().code(items[0]));
				}
			}
		}
		if(this.getCascade().filterNull == "none"){
			this.getCascade()._notifyFilterMe();
		}
        //U_EAP00027972
		if(this.srcNodeRef && dojo.hasAttr(this.srcNodeRef,'separator') && (!dojo.hasAttr(this.srcNodeRef,'valueSeparator'))){
			this.valueSeparator = this.separator;
		}

        //2018.8.15 sxf 初始化按钮
		if(this.threeSelection){
			$(this.domNode).addClass("combo_button_style");
            this._initComboButton();
		}
	},
	
	//对下拉按钮增加禁用样式
	setDisabled: function() {
		this.inherited(arguments);
		if(this.disabled){
			dojo.removeClass(this.iconNode,'u-form-combobox-icon-normal');
			dojo.addClass(this.iconNode,'u-form-combobox-icon-disabled');
		}else{
			dojo.removeClass(this.iconNode,'u-form-combobox-icon-disabled');
			dojo.addClass(this.iconNode,'u-form-combobox-icon-normal');
		}
	},
	
	// API
	/**
	 * @summary:
	 * 		设置组件值
	 * @param:
	 * 		 {string} value
	 * @example：
	 * |	combobox.setValue("1");
	 * |	combobox.setValue("1,2,3,4");
	 * |	combobox.setValue("1|2|3|4"); separator='|'
	 * 		设置值
	 */
	setValue: function(value) {
		if (value === "" || value ===undefined) value = null;
		if(this.autoCompleter != null){
			var autoCompleter = this.getAutoCompleter(),
				me = this;
		    if(autoCompleter.url&&autoCompleter._canSendQuery(value) && value){
		    	var url=unieap.WEB_APP_NAME+autoCompleter.url;
		    	var query=autoCompleter.queryName;
				autoCompleter.params = {};
				autoCompleter.params[query] = value;
				//增加懒加载条件
				autoCompleter.params["queryType"] = "EQ";
			    var dc=new unieap.ds.DataCenter();
			    autoCompleter.onBeforeSendQuery(autoCompleter.params,dc);//可以在此回调方法中重新修改已有参数或者增加其他参数
			    unieap.Action.requestData({
			    	url:url,
			    	parameters:autoCompleter.params,
			    	sync:true,
			    	load:function(dc){
					    if(!dc){
							return;
						}
						var store=dc.getSingleDataStore();
						me.getDataProvider().setDataStore(store);
						autoCompleter._cacheStore(store);
			    		autoCompleter.onAfterSendQuery(dc);
			    	}
			    },dc,false);//fasle表示不显示loading
	    	}
		}
		this._setValue(value);
        //2018.8.15 sxf  设置按钮状态
		if(this.threeSelection){
            this._setComboButtonState(value);
		}
	},
	_setValue: function(value,noNeedOpenPopupAgain){
		this.dataType = this.dataType||(this.getBinding()&&this.getBinding().getDataType());
		if (this.textValidate && !this._validateValue(value)) {
			this._updateText();
			return;
		}
		if (!this._validateChange(value)) {
			this._updateText();
			return;
		}
		//应该在校验合法和校验是否改变之后才改变当前的值，否则dataStore中相应的值不会改变
		this.values = value==null?[]:value.toString().split(this.valueSeparator);
		this._changeValue(value);
		if (this.getPopup().isOpen() && !noNeedOpenPopupAgain) {
			setTimeout(dojo.hitch(this, function() {
				var items = this.getDataProvider().getItems();
				this.getPopup().open(items, this._getSelectedItems(items), this._onPopupClose);
			}), 0);
		}
	},
	
	/**
	 * @summary:
	 * 		返回组件值
	 * @return：
	 * 		{string}
	 */
	getValue: function() {
		if (this.dataType == "boolean") {
			if (this.values.length==1 && this.values[0]=="true") {
				return true;
			} else if (this.values.length==1 && this.values[0]=="false") {
				return false;
			}
		}
//		var autoCompleter = this.autoCompleter;
//		if(autoCompleter != null && autoCompleter.params){
//			query = autoCompleter.queryName;
//			return autoCompleter.params[query];
//		}
		return (this.values==null||this.values.length==0)?
					null:this.values.join(this.valueSeparator);
	},
	
	/**
	 * @summary:
	 * 		设置组件文本显示值
	 * @param：
	 * 		{string} text
	 */
	setText: function(text) {
		if (text == null) {
			text = "";
		}
        if(!this.inputNode) return;
		this.inputNode.value = text;
	},
	
	/**
	 * @summary:
	 * 		返回组件文本显示值
	 * @return：
	 * 		{string}
	 */
	getText: function() {
		return this.inputNode ? this.inputNode.value :'';
	},
	
	/**
	 * @summary:
	 * 		setValue(value)时,当value找不到相应的显示值,将调用getLoseItem返回数据。
	 * @return:
	 * 		{object}
	 * @example:
	 * |	<div dojoType="unieap.form.ComboBox" getLoseItem="getMyItem">
	 * |	</div>
	 * |	getMyItem=function(value){
	 * |		return {CODENAME:"teste",CODEVALUE:value}
	 * |	}
	 * 		当setValue,值为value,而转义中并无此显示值。
	 * 		此时调用此方法得到显示值。默认显示值和值是相等的。
	 * @deprecated
	 */
	getLoseItem: function(value) {
		var _i={};
		_i[this.getDecoder().valueAttr]=value;
		_i[this.getDecoder().displayAttr]=value;
		return _i;
	},
	
	/**
	 * @summary:
	 * 		设置多选分隔符
	 * @param：
	 * 		 {string} separator
	 */
	setSeparator: function(newSeparator) {
		this.separator = newSeparator;
	},
	
	setValueSeparator: function(newValueSeparator){
		this.valueSeparator = newValueSeparator;
	},
	
	/**
	 * @summary:
	 * 		选中一个或多个节点
	 * @param：
	 * 		{array} item
	 * @example:
	 * |function setSelectItems(){
	 * |	var items = unieap.byId("setSelect").getDataProvider().getItems();
	 * |	unieap.byId("setSelect").setSelectedItems([items[2],items[3]]);
	 * |}
	 * |<div id="setSelect" popup="{displayStyle:'multi'}" dojoType="unieap.form.ComboBox" dataProvider="{'store':'city_store'}">
	 * |</div>
	 * 以上代码执行后，会将第三条和第四条数据选中。
	 */
	setSelectedItems: function(items) {
		if (dojo.isArray(items)) {
			var d = this.getDecoder();
			var values = [];
			var allItems = this.getDataProvider().getItems();
			for (var i=0; i<items.length; i++) {
				for (var j=0; j<allItems.length; j++) {
					if (items[i] != allItems[j]) continue;
					var v = d.code(items[i]);
					values.push(v);
					break;
				}
			}
			this.setValue(values.join(this.valueSeparator));
		}
	},
	
	/**
	 * @summary:
	 * 		根据选项序号设置值
	 * @param:
	 * 		{array} index 选项序号数组
	 * @example:
	 * |function setSelectedIndex(){
	 * |	unieap.byId("setSelect").setSelectedIndex([2,3]);
	 * |}
	 */
	setSelectedIndex: function(index) {
		if (dojo.isArray) {
			var items = this.getDataProvider().getItems();
			var selection = [];
			for (var i in index) {
				if (typeof index[i]=="number") {
					selection.push(items[index[i]]);
				}
			}
			this.setSelectedItems(selection);
		}
	},
	
	// inner API
	_getSelectedItems: function(/*[option]传入items以免popup时filter被调用两被*/items) {
		if (items == null)
			items = this.getDataProvider().getItems();
		if (!(dojo.isArray(items) && dojo.isArray(this.values))) return [];
		var selection = [];
		var d = this.getDecoder();
		for (var i=0; i<items.length; i++) {
			for (var j=0; j<this.values.length; j++) {
				if (String(d.code(items[i]))==this.values[j]) {
					selection.push(items[i]);
					break;
				}
			}
		}
		return selection;
	},

	_changeValue: function(value,isBind) {
		
		this.values = value==null?[]:value.toString().split(this.valueSeparator);
		this.getDataProvider()._checkLoseItems(this.values);
		this._updateText();
		this.fireDataChange();
//		if(!isBind){
//			this.getCascade().cascade();
//		}
	},
	
	_updateText: function(isValueUnchange) {
		if (this.values==null || this.values.length==0) {
			this.setText("");
			this.getCascade().cascade();
			return;
		}
		
		var items = this.getDataProvider().getItems();
		
		// 解决在autoCompleter 下 dataStore 中  没有数据而显示Id的问题
		if(this.autoCompleter != null){
			if(items == null || items.length == 0){
				var autoCompleter = this.getAutoCompleter();
				autoCompleter._sendQueryByValue(this.values.join(','));
				items = this.getDataProvider().getItems();
			}
		}
		
		
		if (items == null) {
			this.setText(this.values.join(this.separator));
			return;
		}
		if(!isValueUnchange){
			//在选中值没有变化时（例如再次打开popup，不选择就关闭），不需要触发级联
			this.getCascade().cascade();
		}
		var text = [];
		var d = this.getDecoder();
		for (var i=0; i<this.values.length; i++) {
			var v = this.values[i];
			for (var j=0; j<items.length; j++) {
				if (v==d.code(items[j])) {
//					text.push(decoder.decode(items[j]));
					v = d.decode(items[j]);
					break;
				}
			}
			text.push(v);
		}
		// this.setText(text.join(this.separator));

                if(dojo.isIE){
                    this.setText(text.join(this.separator));
                }else{
                    if(this._autoDialogModel == "formQuery"){
                        if($(this.domNode).parents('form').attr('dojoattachpoint') == 'containerNode'){
                            if(items.length != 0){
                                this.setText(text.join(this.separator));
                            }
                        }else{
                            this.setText(text.join(this.separator));
                        }
                    }else{
                        this.setText(text.join(this.separator));
                    }
                }
	},
	
	// inner event handler
	_onIconClick: function(evt) {
		if(!(this.readOnly&&unieap.global.combobox_notReadonlyPopup)&&!this.disabled&& unieap.fireEvent(this, this.onBeforeIconClick,[evt])) {
			unieap.fireEvent(this, this.onIconClick,[evt])
			var popup=this.getPopup();
			if (popup.isOpen()) {
				popup.close();
			} else {
				//懒加载下拉框获得焦点的处理
				this._focusAutoCompleter(false);
				var items = this.getDataProvider().getItems();
				//当没有数据时不应弹出
				if(items.length && items.length > 0){
					popup.open(items, this._getSelectedItems(items), this._onPopupClose);
				}

                /*zhaos 下拉框点击其他位置关闭*/
                    if(items.length>0){
                        if(!$("#shadeDiv").length){
                            $("body").prepend("<div id='shadeDiv' style='width:100%;height:100%;position:fixed;z-index:9999'></div>");
                            $("#shadeDiv").click(function(){
                                popup.close();
                            })
                        }
                    }
			}
			this._keyPressed = true;
			this._hasBlur = false;
		}else{
			if(evt) dojo.stopEvent(evt);
		}
	},
	
	_onFocus: function(evt) {
		if (!evt||typeof(evt)=="string")  return ;
		this.inherited(arguments);
		this._keyPressed = false;
		this._hasBlur = false;

		//懒加载下拉框获得焦点的处理
		this._focusAutoCompleter(true);
		
	},
	
	_focusAutoCompleter:function(isLazyOpen){
		if(this.autoCompleter != null){
			var autoCompleter = this.getAutoCompleter()
			if(autoCompleter._canSendQuery("")){
				var selItems = this._getSelectedItems();
				autoCompleter._sendQuery("",selItems,isLazyOpen);
			}
		}
	},
	
	_onChange: function(evt) {
		// do key typing
		var value = this.inputNode.value;
		if (value == "") value = null;
		if (this.textValidate && !this._validateValue(value)) {
			this._updateText();
			return;
		}
		if (!this._validateChange(value)) {
			this._updateText();
			return;
		}
		this._changeValue(value,true);
		if (this.getPopup().isOpen()) {
			this.getPopup()._updateSelection();
		}
		unieap.fireEvent(this, this.onChange,[value]);
	},
	
	_onClick: function(evt) {
		if ((this.readOnly&&unieap.global.combobox_notReadonlyPopup) || this.disabled || !unieap.fireEvent(this, this.onBeforeClick,[])) return;
		if (this.getPopup().isOpen()) {
			this.getPopup().close();
		} else {
			var items = this.getDataProvider().getItems();
			if(items.length && items.length > 0){
				this.getPopup().open(items, this._getSelectedItems(items), this._onPopupClose);
			}

            if(items.length>0){
                var _this = this;
                if(!$("#shadeDiv").length){
                    $("body").prepend("<div id='shadeDiv' style='width:100%;height:100%;position:fixed;z-index:9999'></div>");
                    $("#shadeDiv").click(function(){
                        _this.getPopup().close();
                        $("#shadeDiv").remove();
                    })
                }
            }
		}
		unieap.fireEvent(this, this.onClick,[evt]);
		this._keyPressed = true;
		this._hasBlur = false;
	},
	
	_onPopupClose: function(/* Array of Item */selection) {
		if (selection == null || !dojo.isArray(selection) || selection.length==0) {
			if (this._validateChange(null)) {
				if(unieap.widget.form.comboSelectFirstValue && this.values.length>0){
					if(this.getText()=="" || this.getText()==null){  //U_EAP00028046
						this._changeValue(null);
					}
					unieap.fireEvent(this, this.onChange,[this.values.toString()]);
				}else{
					this._changeValue(null);
					unieap.fireEvent(this, this.onChange,[]);
				}
			} else {
				this._updateText();
			}
			return;
		}
		var values = [], de = this.getDecoder();
		for (var i=0; i<selection.length; i++) {
			if(de.code(selection[i])!=="" && de.code(selection[i])!==null){
                values.push(de.code(selection[i]));
			}
		}
        var value;
		if(values.length>0){
            value = values.join(this.valueSeparator);
		}
		if (this._validateChange(value)) {
			this._changeValue(value);
			unieap.fireEvent(this, this.onChange,[value]);
		} else {
			this._updateText(true);
		}
	},
	
	// validate if the given value equals to the old value
	_validateChange: function(value) {
		if (value == null) 
			return !(this.values==null || this.values.length==0);
		
		var newValues = value.toString().split(this.valueSeparator);
		
		if (this.values==null && newValues.length>0)
			return true;
		if (newValues.length!=this.values.length)
			return true;
			
		for (var i=0; i<newValues.length; i++) {
			if (this.values[i]!=newValues[i]) {
				return true;
			}
		}
		return false;
	},
	
	_onKeyUp: function(evt) {
		this.keyCode = evt.keyCode;
		//社保需求，在抬起按钮后确认是否为功能键或功能键+其他键；
		//功能键不过滤选项；功能键+其他做过滤选项
		if(evt.key == 'Control' || (evt.key == 'c') ){
			return;
		}
		if(evt.keyCode==120){
			if(!this.matchLeft){
				this.dataProvider.setFullMathType("left");
				this.getText()!=""?this.setText(""):null;
				this.matchLeft=true;
			}else{
				this.dataProvider.setFullMathType("full");
				this.getText()!=""?this.setText(""):null;
				this.matchLeft=false
			}
		}
		var needPopupFiltItems = true;
		var currentKeyCode = evt.keyCode;
		if(currentKeyCode==dojo.keys.SHIFT 
			|| currentKeyCode==dojo.keys.ALT
			|| currentKeyCode==dojo.keys.CTRL){
			needPopupFiltItems = false;
		}
		if (this.disabled || (this.readOnly&&unieap.global.combobox_notReadonlyPopup)) {
			if(evt)dojo.stopEvent(evt);return;
		}

		var interest = this._interestInKeyCode(evt);
		if (interest && this.autoCompleter) {
			!this.dataProvider&&(this.dataProvider={});
			if(!this.dataProvider.declaredClass){
				var ds=new unieap.ds.DataStore();
				this.dataProvider.store=ds;
				this.getDataProvider().setDataStore(ds);
			}
			this._job(this.getAutoCompleter(), "_handleKeyUp");
		}
		this.inherited(arguments);
		//ComboBox聚集时，按上下键弹出下拉框（社保）U_EAP00021852
		if(!(this.readOnly&&unieap.global.combobox_notReadonlyPopup) && (evt.keyCode == dojo.keys.UP_ARROW || evt.keyCode == dojo.keys.DOWN_ARROW ) && !this.getPopup().isOpen()){
			this.getPopup().open();
		}
		if (interest) {
			clearTimeout(this._uphandle);
			this._uphandle = setTimeout(dojo.hitch(this,function(){
				if (!this._keyPressed && !this._hasBlur) { //如果是从其他控件的keydown来到本域内keyup
					if(this.keyCode != dojo.keys.TAB && this.keyCode != dojo.keys.ENTER){
						this.getPopup().open();
					}
				} else { 
					if(!this._hasBlur&&!this.readOnly && needPopupFiltItems){
						//如果完全是本域内事件
						var items = this._getItemsByValue(this.getText());
						this.tempList = [];
						if (dojo.isArray(items) && items.length>0) {
							this.getPopup().open(items, [], this._onPopupClose);
						}else{
							if(this.increaseValue){
								var _item={};
								var d= this.getDataProvider().widget.getDecoder();
								_item[d.displayAttr] =this.getText();
								_item[d.valueAttr] = this.getText();
								this.tempList[0] =_item;
							}
							if(this.getPopup().isOpen()){
								this.getPopup().close(function(){});// 要求popup什么都不做，只是关闭
							}
						}
					}
				}
			}),0);
		}
	},
	_onPaste:function(evt){
		this._keyPressed = true;
		unieap.fireEvent(this,this._onKeyUp,[evt]);
	},
	_getItemsByValue:function(value){
		var items = this.getDataProvider().getItems(this.getText());
		return items;
	},
	
	_onKeyDown: function(evt) {
		if(evt.key == 'Control' || (evt.key == 'c') ){
			return;
		}
		var targetValue = evt.target.value;
		this.getPopup()._handleKeyDown(evt);
		this.inherited(arguments);
		this._keyPressed = true;
		this._hasBlur = false;
		//针对会计模块下拉框有搜索值 但是没有默认选中的值 回车添加该值
		if(this.getPopup()._selection&&this.getPopup()._selection.length){
			this.tempList = [];
		}
		// if(this.getPopup()&&this.getPopup()._selection&&this.getPopup()._selection.CODEVALUE){}
		if(evt.key =='Enter'&&
			// this.class.indexOf('notAutoSelected')>-1&&
			(this.getPopup()&&this.getPopup()._selection&&this.getPopup()._selection.length == 0)
			&&(this.tempList&&this.tempList.length ==  0 )
			   ){
				  
				   this.tempList = [
					   { 
						   CODEVALUE:targetValue,
						   CODENAME:targetValue
					   }
				   ]
			   }
		//针对会计模块下拉框没有搜索值 回车添加该值
		if(evt.key =='Enter'  && this.increaseValue && this.tempList.length>0){
			this.getDataProvider().items.unshift(this.tempList[0]);
			this._selection=this.tempList;
			this._onPopupClose(this._selection);
		}
	},
	
	_onBlur: function(evt) {     
		if (this._interestInBlur(evt)) {
			this._keyPressed = false;
			this.getPopup()._inmousedown = false;
		}
		this._hasBlur = true;
		this.inherited("_onBlur",arguments);
		var hasItem = false;
		var items = this.getDataProvider().items;
		//针对会计模块下拉框没有搜索值 鼠标移开点击其他地方添加该值
		if(this.tempList&&(this.tempList.length == 0|| evt == 'mouse')) return
		try{
			for(var i=0;i<items.length;i++){
				if(this.tempList&&(items[i].codevalue == this.tempList[0].CODEVALUE)){
					hasItem = true;
					break
				}
			}
		}catch(err){
			console.error(err)
	   }
		if(this.tempList&&!hasItem&& this.increaseValue && this.tempList.length>0){
			this.getDataProvider().items.unshift(this.tempList[0]);
			this._selection=this.tempList;
			this._onPopupClose(this._selection);
		}
	},
	
	// service functions
	// 判断是否对事件键值敏感
	_interestInKeyCode: function(evt) {
		var keyCode = evt.keyCode;
		return !((keyCode<2 && keyCode!=dojo.keys.BACKSPACE)
					|| (keyCode>=33 && keyCode<=46) 
					|| (keyCode>=112 && keyCode<=123)
					|| (evt.ctrlKey&&keyCode==65));
	},
	
	_interestInBlur: function(evt) {
		if (this.getPopup()._inmousedown) {
			return false;
		}
		return this.inherited(arguments);
	},
	
	destroy: function(){
		if (this.inputNode){
			this.inputNode.onfocus = null; //防止内存泄漏
		}
		var cascade = this.getCascade();
		if(cascade && cascade.primary){
			delete dojo.global.ComboBoxCascadeMap[(this._rootID || "") + cascade.primary];
		}
		if(this.autoCompleter){
			var keyUpHandle = this.autoCompleter["_handleKeyUpHandle"];
			if(keyUpHandle){
				window.clearTimeout(keyUpHandle);
			}
		}
		this.inherited(arguments);
	},
	
	//社保需求：在下拉框中输入内容，回车后能将第一个模糊匹配值选中
	_setFirstValueWhenTypeEnter: function(){
		var tempValue = null;
		var text = this.getText();
		var items = this.getDataProvider().getItems(text);
		if(dojo.isArray(items) && items.length>0 && text!=null && text!="")
			tempValue = this.getDecoder().code(items[0]);
		this._setValue(tempValue,true);

	},
	
	// 判断输入值是否合法
	_validateValue: function(value) {
		if (value == null) return true;// 允许空值
		var items = this.getDataProvider().getItems();
		var vals = value.toString().split(this.valueSeparator);
		var  valueAttr= this.getDecoder().valueAttr;
		if ((!dojo.isArray(items) || items.length==0) && vals.length>0)
			return false;
		if (vals.length > items.length)
			return false;
		for (var i=0; i<vals.length; i++) {
			var match = false, v=vals[i];
			for (var j=0; j<items.length; j++) {
//				if (v == items[j][valueAttr]) {
//					match = true;
//					break;
//				}
				if (v == this.dataProvider._getItemValueIgnoreCase(items[j],valueAttr)) {
					match = true;
					break;
				}
			}
			if (!match)
				return false;
		}
		return true;
	},


//	2018.8.15 sxf  下拉框转变按钮

    //设置按钮状态
    _setComboButtonState : function(v){
        if($(this.domNode).is('.combo_button_style')){
            var parentDom = $(this.domNode).parent();
            $(".combo_button_parent .combo_button_child",parentDom).removeClass('checked');
            var _values = this.values.length > 0 ? this.values : [''];
            $.each(_values,function(index,v){
                if(v == null){
                    v = '';
                }
                $(".combo_button_parent .combo_button_child[val='"+v+"']",parentDom).addClass('checked');
            });

        }
},
	//初始化按钮及时事件
    _initComboButton : function(){
    	var combo = this;
        if($(this.domNode).is('.combo_button_style')){
            var parentDom = $(this.domNode).parent();
            var decoder = this.decoder || {
                displayAttr:'CODENAME',
                valueAttr:'CODEVALUE'
            };

            if($('.combo_button_parent',parentDom).length > 0){
                $('.combo_button_parent',parentDom).remove();
            }
            //Zs下拉添加灰色按钮
            if(combo.disabled){
                parentDom.append("<div class='combo_button_parent combo_button_parent_disabled'></div>");
            }else if($(this.domNode).is('.combo_button_style_blue')){
                if(this.required){
                    parentDom.append("<div class='combo_button_parent combo_button_parent_blue'><div class='combo_required'>*</div></div>");
                }else{
                    parentDom.append("<div class='combo_button_parent combo_button_parent_blue'></div>");
                }

            }else{
                if(this.required){
                    parentDom.append("<div class='combo_button_parent'><div class='combo_required'>*</div></div>");
                }else{
                    parentDom.append("<div class='combo_button_parent'></div>");
                }
                //parentDom.append("<div class='combo_button_parent'></div>");
            }
            //parentDom.append("<div class='combo_button_parent'></div>");
            var comboButtonParent = $('.combo_button_parent',parentDom);

            var items = this.getDataProvider().getItems();

            if(this.threeSelection == "all"){
                comboButtonParent.append("<div class='combo_button_child' val=''>全部</div>");
            }

            $.each(items,function(index,item){
                var itemValue = item[decoder.valueAttr];
                var itemDisplay = item[decoder.displayAttr];
                if(itemValue && itemDisplay){
                    comboButtonParent.append("<div class='combo_button_child' val='"+itemValue+"'>"+itemDisplay+"</div>");
				}
            });
            var comboButtonChils = $('.combo_button_child',comboButtonParent);
            $('.combo_button_child',comboButtonParent).click(function(index){
                if(combo.disabled){
                    //禁用时不触发
                }else{
                    var val = $(this).attr('val');
                    if(combo.getPopup().displayStyle == 'multi'){
                        var nowVal = [].concat(combo.values);
                        var valIndex = nowVal.indexOf(val);
                        if(valIndex == -1){
                            nowVal.push(val);
                            combo.setValue(nowVal.join(','));
                        }else{
                            nowVal.splice(valIndex,1);
                            combo.setValue(nowVal.join(','));
                        }
                        unieap.fireEvent(combo, combo.onChange,[combo.values.toString()]);
                    }else{
                        if(val != combo.getValue()){
                            combo.setValue(val);
                            unieap.fireEvent(combo, combo.onChange,[combo.values.toString()]);
                        }
                    }
                }
            });
            $('.combo_button_child:first',comboButtonParent).addClass('combo_button_child_first');
            $('.combo_button_child:last',comboButtonParent).addClass('combo_button_child_last');
            combo._setComboButtonState(combo.getValue());
        }
},

_setComBoxFirstValue:function(key){
	var key = this.decoder.valueAttr;
	var dataProvider1  = this.getDataProvider();
	if(dataProvider1){
		if(dataProvider1.getDataStore()!=null){
			var rowSet = dataProvider1.getDataStore().getRowSet();  
			if(rowSet){
				//获取下拉的第一个值
				var value = rowSet.getItemValue(0,key,"primary")
				if(value){
					this.setValue(value);
				}
			}
		}
	}
}
//function setComBoxFirstValue(item,key){
//	var dataProvider1  = item.getDataProvider();
//	if(dataProvider1){
//		if(dataProvider1.getDataStore()!=null){
//			var rowSet = dataProvider1.getDataStore().getRowSet();  
//			if(rowSet){
//				//获取下拉的第一个值
//				var value = rowSet.getItemValue(0,key,"primary")
//				if(value){
//					item.setValue(value);
//				}
//			}
//		}
//	}
//}
});

dojo.provide("unieap.form.InlineDecoder");
dojo.require("unieap.rpc");
dojo.declare("unieap.form.InlineDecoder",null,{
	/**
	 * @declaredClass:
	 * 		unieap.form.InlineDecoder
	 * @summary:
	 * 		InlineEditBox的解码器
	 * @img:
	 * 		images/form/inlineeditbox1.png
	 * @example:
	 *|var sex = new unieap.ds.DataStore('sex', [
	 *|		{CODEVALUE: 1,CODENAME: '男'},  		
	 *|		{CODEVALUE: 2,CODENAME: '女'}
	 *|]);
	 *|<div id="sex" dojoType="unieap.form.InlineEditBox" decoder="{store:'sex',valueAttr:'CODEVALUE',displayAttr:'CODENAME'}" value="1">
	 *|InlineEditBox的实际值是'1',经过decoder转码以后显示值是'男'
	 */
	
	/**
	 * @summary:
	 * 		标识控件的数据来源
	 * @type:
	 * 		{unieap.form.DataStore}
	 */
	store:null,
	
	/**
	 * @summary:
	 * 		设置控件的显示值对应数据集中的列
	 * @type：
	 * 		{string} 
	 */
	displayAttr:'CODENAME',
	
	/**
	 * @summary:
	 * 		设置控件的值对应数据集中的列
	 * @type:
	 * 		{string}
	 */
	valueAttr:'CODEVALUE',
	
	constructor:function(params){
		dojo.mixin(this,params);
		this.store = unieap.Action.getCodeList(this.store);
	},
	
	//转码，比如var ds=new unieap.ds.DataStore("demo,[{id:'1',name:'Nuesoft'}]);
	//设置好store、valueAttr及其displayAttr后，decode(1)讲返回'Neusoft'
	decode:function(value){
		var transcodeValue = value;
		if(this.store){
			transcodeValue=unieap.transcode(value, {
				store : this.store,
				valueAttr : this.valueAttr,
				displayAttr : this.displayAttr
			});	
			if(transcodeValue == ""){
				return value;
			}
		}
		return transcodeValue;
	}
});
dojo.provide("unieap.form.InlineEditor");
dojo.declare("unieap.form.InlineEditor",null,{
	
	/**
	 * @declaredClass:
	 * 		unieap.form.InlineEditor
	 * @summary:
	 * 		InlineEditBox控件的编辑器，当点击InlineEditBox控件的只读文本时弹出，对文本进行编辑，失去焦点后消失，文本值发生改变。
	 * @img:
	 * 		images/form/inlineeditbox2.png
	 * @example:
	 * | 	<div dojoType="unieap.form.InlineEditBox" editor="{editorClass:'unieap.form.TextBox'}" value="1">
	 * |	</div>
	 */
	
	
	
	/**  
	 * @summary:
	 * 		编辑器名
	 * @type:
	 * 		{string}
	 * @default:
	 * 		unieap.form.TextBox
	 * @example:
	 * | 	<div dojoType="unieap.form.InlineEditBox" editor="{editorClass:'unieap.form.TextBox'}">
	 * |	</div>
	 */
	editorClass:'unieap.form.TextBox',
	
	/**
	 * @summary:
	 * 		创建编辑器所需要的参数
	 * @type:
	 * 		{object}
	 * @img:
	 * 		images/form/inlineeditbox_checkbox2.png
	 * @example:
	 * |	英语四级：<div id="level" dojoType="unieap.form.InlineEditBox" 
	 * |					editor="{editorClass:'unieap.form.CheckBox',editorProps:{checkedValue:'通过',uncheckedValue:'未通过'}}">
	 * |			  </div>
	 * 处于编辑状态时，如下图：
	 * @img:
	 * 		images/form/inlineeditbox_checkbox1.png
	 */
	editorProps:null,
	
	constructor:function(params){	
		this.widget = params.widget;
		this.editorClass=params.editorClass||this.editorClass;
		this.editorProps=params.editorProps;	
		dojo.require(this.editorClass);
		var clazz = dojo.getObject(this.editorClass);
		//重新创建一个编辑器对象
		this.editWidget = new clazz(this.editorProps);		
		if(this.widget.nextFocusId){
			this.editWidget.setNextFocusId(this.widget.nextFocusId);
		}
		dojo.connect(this.editWidget,"onBlur",this,"_onBlur");   
		dojo.connect(this.editWidget,"onDblClick", this, "_onDblClick");
	},
	attachEditor : function(){
		this.widget.editing = true;
//		if(this.editWidget.declaredClass ==	"unieap.form.ComboBox")
//			this.editWidget.setValue(this.editWidget.values.join(this.editWidget.separator));
//		else
//			this.editWidget.setValue(this.widget.value);
		var binding = this.editWidget.getBinding();
		binding && binding.bind(this.widget.getBinding().row);
		if(!this.widget.editorNode){
			this.widget.editorNode = this.editWidget.domNode;
			this.widget.domNode.appendChild(this.editWidget.domNode);
		}
		dojo.style(this.widget.inlineNode,"display","none");
		dojo.style(this.editWidget.domNode,"display","block");
		this.focus();
	},	
    //编辑器的onblur事件
	_onBlur: function(evt){
			dojo.style(this.widget.inlineNode,"display","block");
			dojo.style(this.editWidget.domNode,"display","none");
			var binding = this.editWidget.getBinding();
			binding && binding.unbind();
			this.widget.editing = false;
			var value=this.editWidget.getValue();
			var widgetValue = this.widget.value;
			var oldValue = this.widget.oldValue;
			this.widget.setValue(value);
			if(value!= null && (value!=oldValue || value!= widgetValue)){
				unieap.fireEvent(this.widget,this.widget.onChange,[value]);
			}
			this.widget.getValidator().validate();
			//判断是否有Popup，有就关闭它
			this.editWidget.getPopup&&this.editWidget.getPopup().close();
			
	},
	focus: function(){
		if(this.editWidget.declaredClass ==	"unieap.form.ComboBox"){
			if(this.editWidget.values.length == 0){
				var newValues = this.widget.value.split(this.editWidget.separator);
				this.editWidget.values = [];
				for (var i=0; i<newValues.length; i++) {
					this.editWidget.values.push(newValues[i]);
				}
				this.editWidget.setValue(this.widget.value);
			}
		}
		else
			this.editWidget.setValue(this.widget.value);
		 this.editWidget.focus();    
	},
	_onDblClick:function(evt){
		unieap.fireEvent(this.widget,this.widget.onDblClick,[evt]);
	}

});
dojo.provide("unieap.form.InlineEditBox")
dojo.require("unieap.form.FormWidget")
dojo.declare("unieap.form.InlineEditBox",unieap.form.FormWidget,{
	
	
	/**
	 * @declaredClass:
	 * 		unieap.form.InlineEditBox
	 * @superClass:
	 * 		unieap.form.FormWidget
	 * @summary:
	 * 		从外表上看,InlineEditBox控件是一个只读文本;当点击只读文本时,会弹出一个编辑器,它可以对文本进行编辑。编辑器失去焦点后，编辑器消失，文本的值发生改变。
	 * @img:
	 * 		images/form/inlineeditbox.png
	 * @example:
     * |<form dojoType="unieap.form.Form" binding="{store:'empStore'}">
     * |	<div id="sex" dojoType="unieap.form.InlineEditBox" binding="{name:empName}" editor="{editorClass:'unieap.form.TextBox'}">
     * |	</div>
     * |</div>
	 */
	 
	 
	 UserInterfaces : dojo.mixin({
		showUnderLine : "boolean",
		decoder : "object",
		editor : "object",
		displayFormatter: "object",
		value : "string",
		disabled : "boolean",
		skipFocus : "boolean",
		width: "string",
		onChange : "function",
		onDblClick : "function",
		maxLength : "number",
		minLength : "number",
		required: "boolean"
	},
	unieap.form.FormWidget.prototype.UserInterfaces),
	 
	templateString:
			"<div class=\"u-form-inlineWidget\">" +
				'<div dojoAttachPoint=\"inlineNode\"  class="u-form-inline">' +
				 "<div dojoAttachPoint='requiredNode' class='u-form-required'>*</div>" +
					"<div dojoAttachPoint=\"modifiedNode\" class=\"u-form-modified\"></div>" +
					"<div dojoAttachPoint='errorNode' class='u-form-error'></div>"+
					'<div class="u-form-inline-display" dojoAttachPoint="displayNode,focusNode"></div>' +
				 "</div>" + 
			'</div>',
				  

	
	/**
	 * @summary:
	 * 		设置是否在只读文本下显示下划线
	 * @type:
	 * 		{boolean}
	 * @default:
	 * 		false
	 * @example:
	 * |	<div dojoType="unieap.form.InlineEditBox" showUnderLine="true"></div>
	 */
	showUnderLine:true,
	
	/**
	 * @summary:
	 * 		设置InlineEditBox的转码,例如将数字3转码成辽宁省等
	 * @type:
	 * 		{object}
	 * @example:
	 * |	<div dojoType="unieap.form.InlineEditBox" decoder="{store:'provinceStore',displayAttr:'id',valueAttr:'name'}"></div>
	 *      decoder的valueAttr和displayAttr属性的值分别为id,name。
	 */
	decoder:null,
	
	
	/**
	 * @summary:
	 * 		对InlineEditBox控件的显示值进行格式化
	 * @type:
	 * 		{object}
	 * @example:
	 *      下面的代码会把数字22转换为"$22.00"
	 * |	<div dojoType="unieap.form.InlineEditBox" displayFormatter="{declaredClass:'unieap.form.NumberDisplayFormatter',dataFormat:'$###,###.00'}"></div>
	 *      下面的代码会把字符串"1202745600000"变为"2008/02/02"
	 * |	div dojoType="unieap.form.InlineEditBox" displayFormatter="{declaredClass:'unieap.form.DateDisplayFormatter',dataFormat:'yyyy/MM/dd'}"></div>
	 *      
	 */
	displayFormatter:null,
	
	/**
	 * @summary:
	 * 		对日期值进行格式化。
	 * @type:
	 * 		{object}
	 * @example:
	 * 		假设有一个字符串为"2008-01-01",我们想把它格式化成"2008/01/01"
	 * |	<div dojoType="unieap.form.InlineEditBox" value="2008-01-01" valueFormatter="{declaredClass:'unieap.form.DateValueFormatter',dataFormat:'yyyy-MM-dd'}"
	 * |		 displayFormatter="{declaredClass:'unieap.form.DateDisplayFormatter',dataFormat:'yyyy/MM/dd'}">
	 * |	</div>
	 * 		
	 */
	valueFormatter:null,
	
	
	/**
	 * @summary:
	 * 		设置InlineEditorBox控件的编辑器,默认编辑器为unieap.form.TextBox
	 * 
	 * @type：
	 * 		{object}
	 * @example:
	 * |	<div dojoType="unieap.form.InlineEditBox" editor="{editorClass:'unieap.form.TextBox'}"></div>
	 * |	<div dojoType="unieap.form.InlineEditBox" editor="{editorProps:{required:true}}"></div>
	 */
	editor:{},
	
	/**
	 * @summary:
	 * 		设置是否禁用InlineEditBox控件
	 * @type:
	 * 		{boolean}
	 * @default:
	 * 		false
	 * @description:
	 * 		禁用后,控件将不可编辑
	 */
	disabled:false,
	/**
	 * @summary:
	 * 		设置控件的值是否必须
	 * @description:
	 * 		如果为true,控件用淡黄色背景色标示
	 * @type:
	 * 		{boolean}
	 * @example:
	 * | <div id="id" dojoType="unieap.form.InlineEditBox" binding="{name:id}" required="true"></div>
	 * @img:
	 * 		images/form/require.png
	 */
	required:false,
	/**
	 * @type:
	 * 		{number}
	 * @summary:
	 * 		设置控件能输入的最大长度
	 * @description:
	 * 		可以在global.js中配置一个汉字占用多少个字符
	 * @example:
	 * |<div dojoType="unieap.form.InlineEditBox" maxLength="6"></div>
	 * 		上述代码表示控件最多能输入6个字符,当设置汉字占用两个字符时控件只能输入3个汉字,输入多个会提示错误信息
	 */
	maxLength : -1,
	/**
	 * @type:
	 * 		{number}
	 * @summary:
	 * 		设置控件必须输入的最小长度,当长度没有达到需求时,控件会提示错误
	 * @description:
	 * 		当minLength的值大于maxLength时，设置的minLength将无效
	 * @example:
	 * |<div dojoType="unieap.form.InlineEditBox" minLength="6"></div>
	 */
	minLength : -1,

	/**
	 * @summary:
	 * 		控件初始化时显示的文本值
	 * @type:
	 * 		{string}
	 */
	value: "",

	//回车聚焦时跳过
	skipFocus: true,
	
	width: "",
	firstSet:true,
	
	validatorClass:'unieap.form.InlineEditBoxValidator',
	
	/**
	 * @summary:
	 * 		当控件的值发生变化时触发
	 * @param:
	 * 		{object} value
	 */
	onChange:function(value){
		
	},
	/**
	 * @summary:
	 * 		双击控件时触发
	 * @param:
	 * 		{object} event
	 */
	onDblClick : function (evt){
	},
	
	postCreate: function(){
		//设置静态文本格式化参数
		unieap.setLabelFormatProps(this);
		//如果设置了显示下划线
		if(!this.showUnderLine){
			//设置一个无效的1px 下划线消失?why?如果为空,ff下下划线不消失
			this.inlineNode.style.height= '20px';
			this.inlineNode.style.borderBottom="1px";
		}		
        //给displayNode增加点击事件
	    this.connect(this.domNode, 'onclick', '_onClick');
		this.connect(this.inlineNode, 'onmouseover', '_onMouseover');
		this.connect(this.inlineNode, 'onmouseout', '_onMouseout');
		this.connect(this.inlineNode, "onfocus", "_onFocus");
		
		//设置disabled属性
		this.disabled && this.setDisabled(this.disabled);
		this.required && this._setRequired(this.required);
		//文本默认居左
		dojo.style(this.displayNode, 'text-align', 'left');
		this.maxLength >-1 && (this.getEditor().editWidget.maxLength = this.maxLength);
		//初始化displayNode的值
		this.value&&this.setValue(this.value);
		  
		//由于数据绑定后源binding属性将变为unieap.form.FormWidgetBinding,克隆原有的binding属性
		this.orignBinding = dojo.clone(this.binding);
		this._setWidth();
		this._setHeight();
		this.tabIndex && dojo.attr(this.inlineNode,"tabIndex",this.tabIndex);
		this.tabIndex && dojo.attr(this.getEditor().editWidget.focusNode,"tabIndex",this.tabIndex);
	},
	
	destroy:function(){
		//销毁InlineEditor中的editWidget，以免发生内存泄露
		if(this.getEditor().editWidget){
			this.getEditor().editWidget.destroy();
		}
		this.inherited(arguments);
	},
	
	_onFocus:function(evt) {
		//屏蔽页面授权时点击inlineEditBox
		if(this.disabled) {return;}
		if(evt){ dojo.stopEvent(evt); return;}
		this.getEditor().attachEditor();
		if(this.tabIndex && dojo.attr(this.getEditor().editWidget.focusNode,"tabIndex") != dojo.attr(this.inlineNode,"tabIndex"))
			 dojo.attr(this.getEditor().editWidget.focusNode,"tabIndex",dojo.attr(this.inlineNode,"tabIndex"));
	},

    //点击只读文本时触发
	_onClick: function(evt){
		//如果配置了禁用属性或者正在编辑中……
		if(this.disabled || this.editing){ return; }
		if(evt){ dojo.stopEvent(evt); }
		var editor = this.getEditor();		
		editor.attachEditor();
	},
	
	focus : function(){
		var editor = this.getEditor();		
		editor.attachEditor();
	},
	_onMouseover: function(evt) {
		//displayNode Div实际高度>行高，说明换行，Inline显示不下，需要Tooltip
//		var needTooltip = dojo.style(this.displayNode, "height") 
//						> dojo.style(this.displayNode, "lineHeight");
		var needTooltip = this.displayNode.scrollWidth > dojo.style(this.displayNode, "width");
		var text = this.getText();
		var domNode = this.domNode;
		if(needTooltip && text) {
			this.toolTip = window.setTimeout(function(){
				unieap.showTooltip({inner:text,autoClose:true},domNode);
			},500);
		}
	},
	
	_onMouseout: function(evt) {
//		var needTooltip = dojo.style(this.displayNode, "height") 
//						> dojo.style(this.displayNode, "lineHeight");
		var needTooltip = this.displayNode.scrollWidth > dojo.style(this.displayNode, "width");
		var domNode = this.domNode;
		if(needTooltip && this.toolTip) {
			window.clearTimeout(this.toolTip);
			unieap.hideTooltip(domNode);
		}
	},
	
	//获得编辑器对象,获得一次后讲缓存这个编辑器对象.缓存过程可以查看getModuleInstance这个方法
	getEditor:function(){
		this.editor.editorProps = dojo.mixin({},
			this.editor.editorProps,
			{binding:this.orignBinding}
		);
		return unieap.getModuleInstance(this,"editor","unieap.form.InlineEditor");
	},
	
	//用户可以自己定义自己的formatter,例如
	//displayFormatter="{declaredClass:'unieap.form.NumberDisplayFormatter',dataFormat:'###,###.00'}"
	getDisplayFormatter:function(){
		return unieap.getModuleInstance(this,"displayFormatter","unieap.form.SimpleFormatter");
	},
	
	//获得Decoder对象
	getDecoder:function(){
		return unieap.getModuleInstance(this,"decoder","unieap.form.InlineDecoder");
	},
	
	/**
	 * @summary:
	 * 		设置InlineEditBox控件的解码器
	 * @param:
	 * 		{object} decoder
	 * @example:
	 * |	unieap.byId("inline").setDecoder({store:'ds',valueAttr:'id',displayAttr:'name'});
	 */
	setDecoder:function(decoder){
		this.getDecoder = dojo.getObject(this.declaredClass).prototype.getDecoder;
		this.decoder=decoder;
		this.setValue(this.value);
	},
	
	//对日期进行格式化
	getValueFormatter:function(){
		return unieap.getModuleInstance(this,"valueFormatter","unieap.form.SimpleFormatter");
	},
	
	setValue: function(value){
		(value==null||typeof(value)=="undefined")&&(value="");
		if(this.firstSet){
			this.oldValue = value;
			this.firstSet = false;
		}
		else
			this.oldValue = this.value;
		this.value=value;
		//如果处于控件处于编辑状态，直接返回
		if (this.editing) {
			return;
		}
		//进行解码操作
		if(this.decoder){
			value=this.getDecoder().decode(value);
		}
		//value值格式化操作
		if (this.valueFormatter) {
			value = this.getValueFormatter().format(value);
		}
		
		//显示值格式化操作
		if (this.displayFormatter) {
			value = this.getDisplayFormatter().format(value);
		}
		this.setText(value);
		this.fireDataChange();
	},
	/**
	 * @summary:
	 * 		设置是否禁用控件,背景颜色为"不可用"灰色
	 * @param:
	 * 		{bolean} bool 
	 */	
	setDisabled: function(disabled) {
		this.disabled = disabled;
//		this.domNode.disabled = disabled;
//		if(disabled){
//		   dojo.addClass(this.domNode, 'u-form-disabled');
//		}else{
//		   dojo.hasClass(this.domNode, 'u-form-disabled') && dojo.removeClass(this.domNode, 'u-form-disabled');
//		}
	},
	/**
	 * @summary:
	 * 		获得控件的值
	 * @return:
	 * 		{string}
	 * @example:
	 * |	例如控件的值是"0411",但显示成"大连"。那么getValue()返回的就为0411
	 */
	getValue: function(){
		return this.value;
	},
	
	/**
	 * @summary:
	 * 		获取控件的文本值
	 * @return:
	 * 		{string}
	 */
	getText:function(){
		return this.displayNode[dojo.isFF?"textContent":"innerText"] || "";
	},
	
//	_setWidth: function(){
//		var Width = this.width || this.domNode.style.width;
//		Width && dojo.style(this.domNode, "width", isNaN(Width)?Width:(this.width+"px"));
//	},
//	_setHeight : function(){
//		var Height = this.height || this.inlineNode.style.height;
//		Height && dojo.style(this.inlineNode, "height", isNaN(Height)?Height:(this.height+"px"));
//	},
	
	 _setWidth: function(){
		var Width = this.width || this.domNode.style.width;
		Width && dojo.style(this.domNode, "width", isNaN(Width)?Width:(this.width+"px"));
		Width && dojo.style(this.inlineNode, "width", "100%");
	},
	_setHeight : function(){
		var Height = this.height || this.domNode.style.height;
		Height && dojo.style(this.domNode, "height", isNaN(Height)?Height:(this.height+"px"));
		Height && dojo.style(this.inlineNode, "height", "100%");
	},

	/**
	 * @summary：
	 * 		设置控件的显示值
	 */
	setText:function(text){
		if(text == null)
			text = "";
		this.displayNode[dojo.isFF?"textContent":"innerText"] = text;
		if(this.getEditor().editWidget.declaredClass == "unieap.form.Textarea"){
			this.displayNode.style.lineHeight = "normal";
		}
	},
	      
	_setRequired: function(required) {
		this.required = required;
		this.requiredNode && dojo.style(this.requiredNode,"visibility",required?"visible":"hidden");
	}
});
dojo.provide("unieap.form.ComboBoxTreeDataProvider");
dojo.declare("unieap.form.ComboBoxTreeDataProvider",null,{
	/**
	 * @declaredClass:
	 * 		unieap.form.ComboBoxTreeDataProvider
	 * @summary:
	 * 		下拉树控件的数据源控制器
	 * 
	 */
	
	widget:null,
	
	/**
	 * @summary:
	 * 		该方法已经不推荐使用,请使用getLazyLabel
	 * @type:
	 * 		{string}
	 */
	label:'',
	
	/**
	 * @summary:
	 * 		下拉树懒加载时，数据未加载完毕,控件在树中找不到指定的id所对应的label,所以需要用户显示指定。
	 * @type:
	 * 		{function}
	 * @example:
	 * |var ds=new unieap.ds.DataStore('demo',[
	 * |	{empNo:'1002'}
	 * |]);
	 * |dataCenter.addDataStore(ds);
	 * |function getLabels(ids){
	 * |	alert(ids); //ids默认是以逗号分隔的字符串
	 * |	var labels=sendRequest(ids); //用户将ids发送到后台
	 * |	return labels; //返回的labels也应该是以逗号分隔的字符串.返回成功后文本框中将显示labels
	 * |}
	 * |<div dojoType="unieap.form.Form" binding="{store:'demo'}">
	 * |	<div dojoType="unieap.form.ComboBoxTree" binding="{name:'empNo'} 
	 * |		dataProvider="{${1}getLazyLabel:getLabels}"  
	 * |		treeJson="{loader:{url:'/getChildren.do'},label:'LazyTree',binding:{leaf:'leaf'}}">
	 * |	</div>
	 * |</div>
	 * ${1}定义获取label的方法 
	 */
	getLazyLabel:null,
	
	constructor:function(params){
		dojo.mixin(this,params);
	}
	
});

dojo.provide("unieap.form.ComboBoxTree")
dojo.require("unieap.form.TextBoxWithIcon");
dojo.require("unieap.tree.Tree");
dojo.require("unieap.util.util");
dojo.declare("unieap.form.ComboBoxTree",unieap.form.TextBoxWithIcon,{
	/**
	 * @declaredClass:
	 * 		unieap.form.ComboBoxTree
	 * @superClass:
	 * 		unieap.form.TextBoxWithIcon
	 * @summary:
	 * 		ComboBoxTree控件又叫做下拉树控件。从外观上来看，它和ComboBox控件类似。
	 * 		但后者下拉的是列表，而前者是一棵树形结构。当用户需要展现带有层次结构的数据时，可以考虑使用下拉树控件
	 * @img:
	 * 		images/form/comboboxtree.png
	 * @example:
	 * |var ds=new unieap.ds.DataStore("menuTree",[
	 * |	{id:'1001',label:'人',parent:'',leaf:false},
	 * |	{id:'10011',label:'学生',parent:'1001',leaf:true},
	 * |	{id:'10013',label:'农民',parent:'1001',leaf:true},
	 * |	{id:'1002',label:'动物', parent:'',leaf:false},
	 * |	{id:'1003',label:'脊椎动物', parent:'1002',leaf:true}
	 * |
	 * |]);
	 * |dataCenter.addDataStore(ds);
	 * |var combotree=new unieap.form.ComboBoxTree({
	 * |	id:'combo_tree',
	 * |	popup:{width:'300px',height:'400px'},
	 * |	separator:',',
	 * |	treeJson:{
	 * |		label:'UniEAP',
	 * |		checkLogic:{model:'multiple'},
	 * |		binding:{
	 * |			leaf:'leaf',
	 * |			store:'menuTree',
	 * |			query:{
	 * |				name: 'parent',
	 * |				relation: '=',
	 * |				value:'1001'
	 * |			}
	 * |		}
	 * |	}
	 * |});
	 * 		上述的代码的popup表示设置弹出窗口的宽度和高度,treeJson其实就是树的属性。树怎么配置,treeJson就怎么配置
	 * @example:
	 * |<div dojoType="unieap.form.ComboBoxTree"
	 * |	id='combo_tree',
	 * |	popup="{width:'300px',height:'400px'}",
	 * |	separator:",",
	 * |	treeJson="{label:'UniEAP',binding:{leaf:'leaf',store:'menuTree',query:{name:'parent',relation:'=',value:'1001'}}}">
	 * |</div>
	 * |
	 * 上述代码展示了标签配置ComboBoxTree的方式
	 */

	//配置属性接口
	UserInterfaces : dojo.mixin({
			dataProvider : "object",
			separator : "string",
			expandTree : "boolean",
			treeJson : "object",
			getValuePath:"function",
			spellAttr:"string"
		},
		unieap.form.TextBoxWithIcon.prototype.UserInterfaces),

	popupClass:"unieap.form.ComboBoxTreePopup",

	//树组件,通过treeJson生成
	_tree:null,

	//树的id列表,对应树的id,为一个数组,例如[1,2,3,...]
	_treeIdList:null,

	//树的label列表,对应树的label,为一个数组,和_treeIdList一一对应,例如["one","two","tree",...]
	_treeLabelList:null,

	//树的id名称
	_treeId:'id',

	//树的label名称
	_treeLabel:'label',

	//是否是复选树
	_isMultiTree:false,

	//树绑定的datastore,来置于binding属性
	_store:null,

	_flag:true,

	//缓存Tree节点数据zhaos
	_dataJosn: [],
	//缓存Tree属性 zhaos
	_treeJson: {
		binding: {}
	},
	// store名称 用与重新渲染Tree zhaos
	_storeName: "",
	/**
	 * @summary:
	 * 		设置是否点击下拉按钮就根据树的id来展开树
	 * @type:
	 * 		{boolean}
	 * @default:
	 * 		true
	 */
	expandTree:true,


	/**
	 * @summary:
	 * 		动态创建一棵树，传入树的属性即可
	 * @type:
	 * 		{object}
	 * @example:
	 * |var ds=new unieap.ds.DataStore("treeDs",[
	 * |	{id:'1001',label:'人',parent:'',leaf:false},
	 * |	{id:'1002',label:'动物',parent:'',leaf:false},
	 * |	{id:'10011',label:'学生',parent:'1001',leaf:true},
	 * |	{id:'10012',label:'工人',parent:'1001',leaf:true},
	 * |	{id:'10013',label:'软体动物',parent:'1002',leaf:true},
	 * |	{id:'10021',label:'脊椎动物',parent:'1002',leaf:true}
	 * |]);
	 * |dataCenter.addDataStore(ds);
	 * |<div dojoType="unieap.form.ComboBoxTree"  treeJson="{label:'UniEAP',binding:{leaf:'leaf',store:'treeDs'}}"></div>
	 */
	treeJson:null,

	//自动注入dataCenter
	Autowired : "dataCenter",

	/**
	 * @summary:
	 *		设置当树为多选时数据的分隔符
	 * @type:
	 * 		{string}
	 * @example:
	 * |<div dojoType="unieap.form.ComboBoxTree" separator="#"></div>
	 * |combo_tree.setValue("1#2#3");
	 * 		如果树找到了对应的label,会显示成"one#two#three"
	 * @default：
	 *		","
	 */
	separator: ",",


	/**
	 * @summary:
	 * 		数据提供对象
	 * @description:
	 * 		常用于数据绑定且树为懒加载的情况。
	 * 		由于控件初始化后会根据数据绑定传来的值(id)在输入域中显示该值(id)所对应的显示值(label);当树是懒加载时,数据未加载完毕,控件在树中找不到指定的id所对应的label,所以需要用户显示指定。
	 *   	dataProvider对象的getLazyLabel为一个回调函数,用于处理懒加载数据
	 *
	 * @type:
	 * 		{object}
	 * @example:
	 * |var ds=new unieap.ds.DataStore('demo',[
	 * |	{empNo:'1002'}
	 * |]);
	 * |dataCenter.addDataStore(ds);
	 * |function getLabels(ids){
	 * |	alert(ids); //ids默认是以逗号分隔的字符串
	 * |	var labels=sendRequest(ids); //用户将ids发送到后台
	 * |	return labels; //返回的labels也应该是以逗号分隔的字符串.返回成功后文本框中将显示labels
	 * |}
	 * |<div dojoType="unieap.form.Form" binding="{store:'demo'}">
	 * |	<div dojoType="unieap.form.ComboBoxTree" binding="{name:'empNo'}
	 * |		dataProvider="{${1}getLazyLabel:getLabels}"
	 * |		treeJson="{loader:{url:'/getChildren.do'},label:'LazyTree',binding:{leaf:'leaf'}}">
	 * |	</div>
	 * |</div>
	 * ${1}定义获取label的方法
	 */
	dataProvider:null,

	/**
	 * @summary：
	 *          拼音字母模糊匹配
	 * @description:
	 *         根据显示列创建内部的一个拼音列用来进行拼音模糊匹配。
	 *         值为'py'，支持拼音模糊匹配
	 */
	spellAttr:'',

	/**
	 * @summary:
	 * 		为setValue方法提供节点路径
	 * @param:
	 * 		{string} 所要设置的value值
	 * @description:
	 * 		用于数据绑定且树为懒加载的情况。
	 * 		由于控件初始化后会根据数据绑定传来的值(id)在输入域中显示该值(id)所对应的显示值(label);当树是懒加载时,数据未加载完毕,控件在树中找不到指定的id所对应的label,所以需要用户显示指定。
	 *   	节点路径来获取label值
	 *
	 * @type:
	 * 		{object}
	 */
	getValuePath : function(nodeId){},

	postMixInProperties:function(){
		this.inherited(arguments);
		this._treeIdList=[]
		this._treeLabelList=[];
		this._connectHandles=[];
		this._getTreeInfo(this.treeJson);
	},

	postCreate:function(){
		dojo.addClass(this.iconNode, "u-form-combobox-icon-normal");
		var binding=this.getBinding(),
			dataProvider=this.getDataProvider();
		if(binding&&dataProvider&&dataProvider.label){
			this.connect(binding,"onBeforeBind",function(){
				this._flag=true;
			})
		}
		this.inherited(arguments);
	},


	/**
	 * @summary:
	 * 		获得下拉树控件下拉的树对象
	 * @return:
	 * 		unieap.tree.Tree
	 * @example:
	 * |var tree=unieap.byId('comboxTree').getTree();
	 * |alert(tree.declaredClass);
	 */
	getTree:function(){
		return this._tree;
	},

	/**
	 * @summary:
	 * 		获得数据提供对象
	 * @return:
	 * 		{unieap.form.ComboBoxTreeDataProvider|null}
	 * @example:
	 * |var dataProvider=unieap.byId('comboxTree').getDataProvider();
	 * |unieap.debug(dataProvider);
	 */
	getDataProvider:function(){
		return this.dataProvider && unieap.getModuleInstance(this,"dataProvider","unieap.form.ComboBoxTreeDataProvider");
	},


	/**
	 * @summary:
	 * 		重新设置treeJson属性,创建一棵新的树。
	 * @description:
	 * 		注意，调用该方法，原有的树将被销毁
	 * @param:
	 * 		{object} treeJson
	 * @example:
	 * |var treeJson={
	 * |	label:'新的根节点',
	 * |	binding:{leaf:'leaf',store:'newStore'}
	 * |}
	 * |var comboTree=unieap.byId('comboBoxTree');
	 * |comboTree.setTreeJson(treeJson);
	 */
	setTreeJson:function(treeJson){
		this._tree&&this._tree.destroy(); //销毁树
		this._tree=null;
		this.treeJson=treeJson;
		//清空树的id列表和label列表
		//this._reset();
		//如果有弹出窗口则关闭
		// if(this.getPopup()._isShowingNow) {
		// 		// 	this.getPopup().close();
		// 		// }
		//重新置this._isMultiTree为false,否则由复选树转为单选树时,this._isMultiTree属性
		//仍然为true
		this._isMultiTree=false;
		//获得树的id、label、store等属性
		this._getTreeInfo(treeJson);
		this._createJsonTree(treeJson);
	},



	/**
	 * @summary:
	 * 		设置树多选时的数据分隔符
	 * @param:
	 * 		{string} separator 要设置的分隔符
	 * @example:
	 * |var comboTree=unieap.byId('comboTree');
	 * |comboTree.setSeparator(',');
	 *
	 */
	setSeparator: function(separator){
		this.separator = separator;
	},

	//value是以逗号分隔的字符串,比如"1,2,3",它需要查找到对应的label,例如"one、two、three"
	//并显示在输入域中
	setValue:function(value){
		var valueStr = value;
		this.treeJson&&this._createJsonTree(this.treeJson);
		if(value!=null&&value!=""&&typeof(value)!="undefined"){
			value=value+"";
			//去除重复的元素
			value=unieap.array_unique(value.split(this.separator));
		}else{
			value=[];
		}

		//处理节点的选中的和取消
		if(this._isMultiTree && this._tree){
			this._processSelectedNode(value);
		}

		//清空_treeIdList、_treeLabelList
		this._reset();


		if(value.length>0){
			//首先查询binding(来自于treeJson)中的datastore,看能否找到id对应的label
			if(this._store){
				this._helper1(value);
			}

			//然后通过已经展开过的树的id来获得对应的domNode
			if(value.length!=this._treeIdList.length && this._tree){
				this._helper2(value);
			}

			//依然找不到,根据传入的节点的path寻找
			if(value.length!=this._treeIdList.length){
				var valuePath = this.getValuePath(valueStr);
				if(this.getValuePath && valuePath ){
					this.expandTree&&this._tree.expandNodeByPath(valuePath);
					this._helper2(value);
				}
			}

			//从用户自定义的回调函数或者label属性来查找
			if(value.length!=this._treeIdList.length){
				var dataProvider=this.getDataProvider();
				dataProvider&&this._getLazyLabel(dataProvider,value);
			}

			//依然找不到,在文本框中显示id
			if(value.length!=this._treeIdList.length){
				this._helper3(value);
			}
		}
		this.setText(this._treeLabelList.join(this.separator));
		this.fireDataChange();
	},




	/**
	 * @summary:
	 * 		获得控件的值,控件的值以seperator分开,例如"1,2,3"
	 * @return:
	 * 		{string}
	 * @example:
	 * |var comboBoxTree=unieap.byId('comboBoxTree');
	 * |var value=comboBoxTree.getValue();
	 * |alert(value);
	 */
	getValue:function(){
		return this._treeIdList.join(this.separator);
	},


	/**
	 * @summary:
	 * 		清空控件的值以及选中状态(如果是复选树)
	 * @example:
	 * |var comboBoxTree=unieap.byId('comboBoxTree');
	 * |comboBoxTree.clear();
	 */
	clear:function(){
		if(this._isMultiTree){
			var nodes=this._tree.getSelectedNodes();
			dojo.forEach(nodes,function(node){
				this._tree.setChecked(node,false);
			},this);
		}
		this._reset();
		this._updateRow("");
		this.fireDataChange();
	},

	///////////////////内部方法////////////////////////////

	//清空id、label等
	_reset:function(){
		this._treeIdList=[];
		this._treeLabelList=[];
		this.setText('');
	},

	//通过json字符串来创建树
	_createJsonTree:function(treeJson){
		// if(this.getTree()) return;
		// if(treeJson){
		// 	this._tree = new unieap.tree.Tree(dojo.mixin(treeJson,{dataCenter:this.dataCenter}));
		// }
		// if (this._tree) {
		// 	dojo.style(this._tree.domNode, "display", "none");
		// 	this._connectEvents();
		// 	this._tree.placeAt(this.getPopup().domNode,"first");
		// }

		//如果只有一个节点，可能处理不正常，再重建下这棵树  2019.8.6
		var tree = this.getTree();
		if (tree && tree.dataCenter) {
			var dss = tree.dataCenter.dataStores;
			if (!dss.result) {
				dss = dss[treeJson.binding.store];
			} else {
				dss = dss.result;
			}
			var primarydata=[];
			if(dss && dss.rowSet){
				primarydata = dss.rowSet.primary;
			}
			//if (primarydata && primarydata.length < 1) return;
			var i = 0;
			for (var v in tree._nodeMap) {
				if (++i > 1) {
					break;
				}
			}
		}

		if (treeJson) {
			//树下拉添加空行
			if (treeJson.binding && treeJson.binding.store && !this.required && this.dataCenter) {
				var data = this.dataCenter.getDataStore(treeJson.binding.store);
				if (data) {
					if (data.getRowSet().getRowCount() > 0 && data.getRowSet().getItemValue(0, treeJson.binding.id)) {
						var newRow = {};
						newRow[treeJson.binding.id] = "";
						newRow[treeJson.binding.label] = "";
						newRow[treeJson.binding.leaf] = 1;
						newRow[treeJson.binding.parent] = -1;
						data.getRowSet().insertRow(newRow, 0);
					}
				}
			}
			// 解决下拉树，每点击一次，里面数据就增加一倍
			if(!this._tree || (this._tree._nodeMap && Object.keys(this._tree._nodeMap).length<2) || (this._tree && typeof(this._tree.params.binding.store) == 'string')) {
				this._tree && this._tree.destroy(); //若已有数据，清空树
				this._tree = null;
				// 根据treeJson的checkLogic属性判断是否是带复选框的树
				if(this.params && this.params.treeJson){
					treeJson['checkLogic'] = this.params.treeJson.checkLogic;
				}
				this._tree = new unieap.tree.Tree(dojo.mixin(treeJson,{dataCenter:this.dataCenter}));
			}
		}
		if (this._tree) {
			// 根据treeJson的checkLogic属性判断是否是带复选框的树
			if(this.params && this.params.treeJson){
				var logic = this.params.treeJson.checkLogic;
				if (logic && logic.model == "multiple") {
					this._isMultiTree = true;
				}
			}

			dojo.style(this._tree.domNode, "display", "block");
			this._connectEvents();
			this._tree.placeAt(this.getPopup().domNode, "first");
		}
	},

	//获得树的id、label、store、是否是复选树等属性
	_getTreeInfo:function(treeJson){
		var logic,binding;
		if(treeJson){
			logic=treeJson.checkLogic;
			binding=treeJson.binding;
		}
		if(logic&&logic.model){
			this._isMultiTree=true;
		}
		if(binding){
			this._treeId=binding.id||this._treeId;
			this._treeLabel=binding.label||this._treeLabel;
			this._store=binding.store;
		}
	},


	//处理节点的选中的和取消
	_processSelectedNode:function(value){

		var treeNode;
		var list=unieap.array_unique(this._treeIdList.concat(value));
		dojo.forEach(list,function(id){
			if(dojo.indexOf(value,id)==-1){
				treeNode=this._tree.getNodeById(id);
				treeNode&&treeNode.isChecked()&&this._tree.setChecked(treeNode,false);

			}else{
				treeNode=this._tree.getNodeById(id);
				treeNode&&!treeNode.isChecked()&&this._tree.setChecked(treeNode,true);
			}
		},this)
	},

	//首先从树绑定的datastore中找label
	_helper1:function(list){
		dojo.forEach(list,function(id){
			var label=unieap.transcode(id,{
				valueAttr:this._treeId,
				displayAttr:this._treeLabel,
				store:this._store
			}, this.dataCenter);
			if(label){
				this._treeIdList.push(id);
				this._treeLabelList.push(label);
			}
		},this);
	},

	//从已经展开的树节点中获取label
	_helper2:function(list){
		dojo.forEach(list,function(id){
			var index=dojo.indexOf(this._treeIdList,id);
			var treeNode=this._tree.getNodeById(id);
			if(index==-1&&treeNode){
				var label=treeNode.getLabel();
				this._treeIdList.push(id);
				this._treeLabelList.push(label);
			}
		},this);
	},

	//如果树是懒加载的
	_getLazyLabel:function(dataProvider,list){
		//dataProvider中getLazyLabel函数
		if(dataProvider.getLazyLabel&&dojo.isFunction(dataProvider.getLazyLabel)){
			var ids=[];
			dojo.forEach(list,function(id){
				dojo.indexOf(this._treeIdList,id)==-1&&ids.push(id);
			},this);

			var labels=dataProvider.getLazyLabel(ids.join(this.separator));
			if(labels&&labels.split(this.separator).length==ids.length){
				this._treeIdList=this._treeIdList.concat(ids);
				this._treeLabelList=this._treeLabelList.concat(labels);
			}
		}else if(dataProvider.label){  //deprecated,不建议使用
			//判断是谁调用了setValue方法,如果是控件本身,this._flag保存不变
			//如果用户调用了form.getBinding().setDataStore(),则this._flag重新变为true
			if(this._flag){
				var binding=this.getBinding(),
					row=binding&&binding.getRow();
				var item=row&&row.getItemValue(dataProvider.label);
				if(item&&item.split(this.separator).length==list.length){
					this._treeIdList=list;
					this._treeLabelList=item.split(this.separator);
				}
				this._flag=false;
			}
		}
	},


	//如果找不到id所对应的label,就假设id和label相同
	_helper3:function(list){
		dojo.forEach(list,function(id){
			var index=dojo.indexOf(this._treeIdList,id);
			if(index==-1){
				this._treeIdList.push(id);
				this._treeLabelList.push(id);
			}
		},this);
	},

	//根据树的id来展开树
	_expandTree:function(){
		if(!this._tree){
			return;
		}else if(this._treeIdList.length==0){
			//this.clear();
			this._tree.blurNode();
			this._tree.collapseAllNodes();
		}else{
			this._tree.blurNode();
			this._tree.collapseAllNodes();
			this._tree.showNodesById(this._treeIdList);
		}

	},

	//用于树是懒加载的情况,假设一个store的一条row为:
	//[empNo:'1001',empName:'测试信息'],同时dataProvider为{label:'empNo'}
	//修改empNo的同时也得修改empName
	_updateRow:function(str){
		var dataProvider=this.getDataProvider();
		if(dataProvider&&dataProvider.label){
			var binding=this.getBinding();
			var row=binding&&binding.getRow();
			row&&row.setItemValue(dataProvider.label,str);
		}
	},



	///////////////////内部事件/////////////////////////////

	//覆盖父类的_onChange方法,因为TextBoxWithIcon的onChange事件和Comboxtree的onChange是不一样的
	// _onChange:function(){
	//
	// },
	_onKeyUp: function (evt) {
		this.inherited(arguments);
		this.getPopup().open();
		//获取文本框的value值
		var filterValue = this.getText();
		if(filterValue==""){
			this.clear();
		}
		this.searchNodeLazy(filterValue, evt);
	},
	searchNodeLazy: function (filterValue, evt) {
		if (filterValue === "") {
			if(this._dataJosn&&this._dataJosn.length){
				this.treeJson.binding.store.rowSet.primary = this._dataJosn;
				this._dataJosn = [];

			}
		} else {
			if(!this._dataJosn||!this._dataJosn.length){
				if(this._tree.binding.store && this._tree.binding.store.rowSet){
					this._dataJosn = this._tree.binding.store.rowSet.primary;
				}else{
					this._dataJosn = [];
				}
			}
			if(this.spellAttr=='py'){
				this._dataJosn = this._createSpellCols(this._dataJosn,this.spellAttr);
				filterValue=filterValue.toUpperCase();
			}
			var filterList = this.searchByRegExp(filterValue, this._dataJosn);
			filterList = this.unique(filterList);
			var tempDataStore = new unieap.ds.DataStore('result',filterList);
			this.treeJson.binding.store = tempDataStore;
		}
		this.setTreeJson(this.treeJson);
		this.getPopup().open();
		if(filterValue!=""){
			this._tree.expandAllNodes();
		}
	},



	//去重 zhaos
	unique: function (arry) {
		var res = [];
		var jso = {};
		for (var i = 0; i < arry.length; i++) {
			if (!jso[JSON.stringify(arry[i])]) {
				res.push(arry[i]);
				jso[JSON.stringify(arry[i])] = 1;
			};
		}
		return res;
	},

	/**
	 * @param {过滤值} keyWord  zhaos
	 * @param {整个树的data} list
	 */
	searchByRegExp: function (keyWord, list) {
		if (!(Array.isArray(list))) {
			return;
		}
		var len = list.length;
		var arr = []; //根据输入的内容匹配的数据
		var filterArry = []; //匹配父节点的数据
		var spellArry = [];//匹配首字母匹配的数据
		var reg = new RegExp(keyWord);
		for (var i = 0; i < len; i++) {
			//如果字符串中不包含目标字符会返回-1

			var tempLabel = '';
			var tempSpell = '';
			if(list[i][this.treeJson.binding.label]){
				tempLabel = list[i][this.treeJson.binding.label];
			}else if(list[i].label){
				tempLabel = list[i].label;
			}

			if (tempLabel && tempLabel.match(reg)) {
				arr.push(list[i]);
			}
			if(this.spellAttr=="py"){
				tempSpell = list[i][this.spellAttr].toString();
				if (tempSpell && tempSpell.match(reg)) {
					spellArry.push(list[i]);
				}
			}
		}
		if(arr.length==0 && spellArry.length>0){
			arr=spellArry;
		}

		//zhaos  搜索结果带父节点
		for (var index = 0; index < arr.length; index++) {
			var element = arr[index];
			var tempId = this.treeJson.binding.id ? element[this.treeJson.binding.id] : element.id;
			//var treeChild = this.getTreeChild(list, tempId, this.treeJson.binding.id);
			var tempParent = this.treeJson.binding.parent ? element[this.treeJson.binding.parent] : element.parent;
			var treeParent = this.getTreeParent(list, tempParent);
			//Array.prototype.push.apply(filterArry, treeChild);
			Array.prototype.push.apply(filterArry, treeParent)
		}
		Array.prototype.push.apply(arr, filterArry)
		return arr;
	},
	//查找子节点 zhaos
	getTreeChild: function (arr, id, realId) {
		var temp = [];
		var realid = realId;
		var _this = this;
		var selectChild = function (arr, id, realid) {
			for (var i = 0; i < arr.length; i++) {
				var item = arr[i];
				var itemParent = _this.treeJson.binding.parent ? item[_this.treeJson.binding.parent] : item.parent;
				var itemId = _this.treeJson.binding.id ? item[_this.treeJson.binding.id] : item.id;
				if (itemParent == id) {
					temp.push(item);
					var childId = realid ? item[realid] : itemId;
					selectChild(arr, childId, realid);
					return;
				}
			}
		};
		selectChild(arr, id, realid);
		return temp;
	},
	//查找父节点 zhaos
	getTreeParent: function (arr, parentId) {
		var temp = [];
		var _this = this;
		var selectParent = function (arr, parentId) {
			for (var i = 0; i < arr.length; i++) {
				var item = arr[i];
				var itemParent = _this.treeJson.binding.parent ? item[_this.treeJson.binding.parent] : item.parent;
				var itemId = _this.treeJson.binding.id ? item[_this.treeJson.binding.id] : item.id;
				if (itemId == parentId) {
					temp.push(item);
					selectParent(arr, itemParent);
					return;
				}
			}
		};
		selectParent(arr, parentId);
		return temp;
	},
	//对下拉控件中的树进行事件绑定
	_connectEvents:function(){
		this.handles = [];
		//复选树
		if(this._isMultiTree){
//			var logic = this._tree.getCheckLogic();
//			var x = logic['onChecked'];
//			if(dojo.isFunction(x) && unieap.fireEvent(logic,x,[]) == false)
//			{
//				return x;
//			}else{
//			}
			this.handles.push(dojo.connect(this._tree.getCheckLogic(),'onChecked',this,'_checkTree'));
			this.handles.push(dojo.connect(this._tree.getCheckLogic(),'onUnChecked',this,'_unCheckTree'));
			this.handles.push(dojo.connect(this._tree,'onAfterExpand',this,'_checkOrUnCheckTree'));
		}else{
			//单选树
			//setTimeout(function(){innerThis.connect(innerThis._tree, 'onClick', '_singleClick');},0);
			this.handles.push(dojo.connect(this._tree, 'onClick', this,'_singleClick'));
		}
		if (dojo.isWebKit) {
			this.handles.push(dojo.connect(this._tree, 'onMouseDown', this,'_onMouseDown'));
		}
	},


	destroy : function(){
		while(this.handles.length){
			dojo.disconnect(this.handles.pop());
		}
		this.inherited(arguments);
	},
	_onBlur: function(evt) {
		if(this.inputNode.value == ""){
			this._reset();
		}
		if (this._interestInBlur(evt)) {
			//this.inherited(arguments);
			this._inmousedown = false;
		}
		this.inherited(arguments);
	},
	_onMouseDown: function(node,evt) {
		var flag = unieap.fireEvent(this,this.onBeforeMouseDown,[node]);
		if (flag === false) {
			return;
		}
		if(!this._isMultiTree){
			this._singleClick(node,evt);
		}
		this._inmousedown = true;
	},
	//单选树点击事件
	_singleClick:function(node,evt){
		// off-parent-select是父级不可选的className标识
		if($(this.domNode).is('.off-parent-select') && (!node.isLeaf() || this.hasChildren(node))){
			//all-line-expend是点击父级展开子节点的className标识
			if(!$(this.domNode).is('.all-line-expend')){
				return false;
			}

		}
		//如果当前节点是根节点,不操作_treeIdList和_treeLabelList
		if(!node.isRoot()){
			var isNodeSelected = true;	//操作是否选中了某个树节点
			var info=node.getItem().data;
			var id=info[this._treeId];
			var label=info[this._treeLabel];
			if(this._treeIdList[0]!=id){
				if(dojo.isWebKit){	//U_EAP00028621
					if(evt && evt.target && evt.target.className &&
						(evt.target.className == "dijitTreeExpandoClosed"
							|| evt.target.className == "dijitTreeExpandoOpened"
							|| evt.target.className == "dijitTreeExpandoLeaf") ){
						//点击展开/收起/叶子图标不应该让其选中
						isNodeSelected = false;
					}else{
						//U_EAP00028211
						this._tree.blurNode();
						this._tree.lastFocused = node.domNode;
					}
				}
				if(isNodeSelected){
					this._treeIdList=[id];
					this._treeLabelList=[label];
					this.setText(label);
					//触发onChange事件
					this._updateRow(label);
					this.onChange(id,label);
					this.fireDataChange();
				}
			}
		}
		if(dojo.isWebKit){//非webKit浏览器 没有evt 需要单独处理
			if(evt){
				var domElement = evt.target;
				var treeDomNode = this._tree._getTreeDomNodeByEvent(evt);
			}
			if (this.getPopup()._isShowingNow && evt && domElement != this._tree.getExpandoNode(treeDomNode)) {
				this.getPopup().close();
			}
		}else{
			if (this.getPopup()._isShowingNow) {
				this.getPopup().close();
			}
		}
		this.focus();
	},
	hasChildren:function(node){
		var treeId=this.treeJson.binding.id;
		var currentId=node.item.data[treeId]||node.item.data['id'];
		for(var i=0;i<this._dataJosn.length;i++){
			var item= this._dataJosn[i];
			var currentParent = this.treeJson.binding.parent ? item[this.treeJson.binding.parent] : item.parent;
			if(currentParent===currentId){
				return true;
			}
		}
		return false;
	},
	//复选树选中复选框事件
	_checkTree:function(node){
		// off-parent-select是父级不可选的className标识
		if($(this.domNode).is('.off-parent-select') && (!node.isLeaf() || this.hasChildren(node))){
			//all-line-expend是点击父级展开子节点的className标识
			if(!$(this.domNode).is('.all-line-expend')){
				return false;
			}
		}
		if(!node.isRoot()){
			var info=node.getItem().data;
			var id=info[this._treeId];
			var label=info[this._treeLabel];
			//如果在列表中找不到节点对应的id
			if(dojo.indexOf(this._treeIdList,id)==-1){
				this._treeIdList.push(id);
				this._treeLabelList.push(label);
				this.setText(this._treeLabelList.join(this.separator));
				this._updateRow(this._treeLabelList.join(this.separator));
				this.onChange(id,label);
				this.fireDataChange();
			}
		}

	},

	//复选树清空复选框事件
	_unCheckTree:function(node){
		if(!node.isRoot()){
			var info=node.getItem().data;
			var id=info[this._treeId];
			var label=info[this._treeLabel];
			var index=dojo.indexOf(this._treeIdList,id);
			if(index>-1){
				this._treeIdList.splice(index,1);
				this._treeLabelList.splice(index,1);
				this.setText(this._treeLabelList.join(this.separator));
				this._updateRow(this._treeLabelList.join(this.separator));
				this.onChange(id,label);
				this.fireDataChange();
			}
		}

	},

	//Tree的onAfterExpand事件
	_checkOrUnCheckTree:function(node,evt){
		var obj,isChecked,id,treeNode;
		var children=this._tree.getChildrenByDom(node.domNode);
		var treeJsonId = this.treeJson.binding.id;
		dojo.forEach(children,function(domNode){
			obj = domNode.associatedData;
			isChecked = obj.isChecked;
			id = obj.item.data[treeJsonId] || obj.item.data['id'];
			treeNode = this._tree.getNodeByDom(domNode);
			if(dojo.indexOf(this._treeIdList,id)>-1){
				!isChecked&&this._tree.setChecked(treeNode,true);
			}else{
				//树的id不在_treeIdList中并且节点处于选中状态,取消选选中
				isChecked&&this._tree.setChecked(treeNode,false);
			}
		},this);

	},

	//点击下拉箭头时触发,覆盖父类TextBoxWithIcon中的方法
	_onIconClick: function(evt){
		if(!(this.readOnly&&unieap.global.comboboxtree_notReadonlyPopup)&&!this.disabled&&this.onBeforeIconClick(evt)){
			this.treeJson&&this._createJsonTree(this.treeJson);
			if (this.getPopup()._isShowingNow) {
				this.getPopup().close();
			}
			else {

				this._tree&&dojo.style(this._tree.domNode,"display","block");
				this.expandTree&&this._expandTree();
				this.getPopup().open();

				/*下拉框点击其他位置关闭 否则打开下拉状态后页面其他按钮可点击 2019.8.7 sxf*/
				var _that = this;
				if(!$("#shadeDiv").length){
					$("body").prepend("<div id='shadeDiv' style='width:100%;height:100%;position:fixed;z-index:9999'></div>");
					$("#shadeDiv").click(function(){
						_that.getPopup().close();
						$("#shadeDiv").remove();
					})
				}
			}
			unieap.fireEvent(this, this.onIconClick,[evt]);
		}
	},



	//点击输入域时触发
	_onClick:function(evt){
		if(!this.onBeforeClick()) return;
		if(!(this.readOnly&&unieap.global.comboboxtree_notReadonlyPopup)&&!this.disabled&&this.onBeforeIconClick(evt)){
			this.treeJson&&this._createJsonTree(this.treeJson);
			if (this.getPopup()._isShowingNow) {
				this.getPopup().close();
			}
			else {
				this._tree&&dojo.style(this._tree.domNode,"display","block");
				this.expandTree&&this._expandTree();
				this.getPopup().open();

				/*下拉框点击其他位置关闭 否则打开下拉状态后页面其他按钮可点击*/
				var _that = this;
				if(!$("#shadeDiv").length){
					$("body").prepend("<div id='shadeDiv' style='width:100%;height:100%;position:fixed;z-index:9999'></div>");
					$("#shadeDiv").click(function(){
						_that.getPopup().close();
						$("#shadeDiv").remove();
					})
				}
			}
			unieap.fireEvent(this, this.onClick,[evt]);
		}
	},


	//ie下的onkeypress不捕获BACKSPACE键,需要特殊处理
	_onKeyDown:function(evt){
		if(dojo.isIE&&(evt.keyCode==8 || evt.keyCode==46)){
			this.clear();
		}
		this.inherited(arguments);
	},

	_onKeyPress:function(evt){
		//var code=evt.keyCode;

		//如果是Tab键、回车键、左右方向箭头，则不执行dojo.stopEvent()方法
		// if (dojo.indexOf([9,13,37,39],code)>-1) {
		// 	return;
		// }else if(code===8 || code===46){
		// 	this.clear();
		// }else if(evt.ctrlKey&&dojo.indexOf([65,67,97,99],evt.keyCode||evt.which)>-1){
		// 	return;
		// }
		// dojo.stopEvent(evt);
	},

	onBeforeMouseDown: function(node){
	},
	_createSpellCols:function(items,spellAttr){
		// 已有此列时返回
		if (dojo.some(items, function(item){return item[spellAttr]!=null;})){
			return items;
		}
		dojo.require("unieap.util.spell");
		var _self=this;
		items=dojo.map(items,function(item){
			var cellValue='';
			if(item.label){
				cellValue= item.label;
			} else if(_self.treeJson.binding.label){
				cellValue= item[_self.treeJson.binding.label];
			}

			if(typeof(cellValue) !="string"){
				item[spellAttr]= unieap.makePy(cellValue+"");
			}else{
				item[spellAttr]= unieap.makePy(cellValue+"");
			}
			return item;
		});
		return items;
	},

	destroy : function(){
		if(this._tree){
			this._tree.destroy();
		}
		this.inherited(arguments);
	}

});

dojo.provide("unieap.form.ComboBoxTreePopup");
dojo.require("unieap.form.Popup")
dojo.declare("unieap.form.ComboBoxTreePopup",unieap.form.Popup,{
	
	/**
	 * @declaredClass:
	 * 		unieap.form.ComboBoxTreePopup
	 * @superClass:
	 * 		unieap.form.Popup
	 * @summary:
	 * 		下拉树的弹出窗口管理
	 */
	
	_isShowingNow:false,
	/**
	 * @summary:
	 * 		设置下拉树弹出窗口的高度
	 * @type：
	 * 		{string}
	 * @default:
	 * 		172px
	 */
	height:"172px",
	
	postCreate: function() {
		this.inherited(arguments);
		this.connect(this.containerNode,"onblur","_onBlur");
	},
	
	_onBlur: function(evt){
		this.widget._onBlur(evt,true);
	},
	
	open:function(){
		if(!this.widget._canPopOpen()){
			return;
		}
		this.inherited(arguments);
        //旋转右边小图标
        $('#'+this.widget.id+' .u-form-combobox-icon-normal').addClass('u-form-combobox-icon-down');
		dojo.addClass(this.popupcontainer, "u-combobox-popup-open-border");
		dojo.style(this.popupcontainer,"overflow","auto");
	},
    /**
     * @summary:
     * 		关闭下拉框 旋转箭头  2018.6.5石向锋新增
     */
    close: function(callback) {
        if (this.isOpen()) {
            this.inherited(arguments);
            $('#'+this.widget.id+' .u-form-combobox-icon-normal').removeClass('u-form-combobox-icon-down');
        }
    },
	 //zhaos 计算容器的height与width属性	 
	_resetWidgetHW: function(width, height){
		var textFiledWidth = dojo.style(this.widget.domNode, 'width');
		if((this.width == "auto" || this.width=="" ) &&(textFiledWidth-8)>0){
			dojo.style(this.popupcontainer, 'min-width', this.width || (dojo.style(this.widget.domNode, 'width')-8) + 'px');
			}else if(parseInt(this.width)>0){
				dojo.style(this.popupcontainer, "min-width", parseInt(this.width)+"px");
			}
		dojo.style(this.popupcontainer, 'height', this.height);
	}
});
dojo.provide("unieap.form.BaseButton");
dojo.require("unieap.form.FormWidget");
dojo.declare("unieap.form.BaseButton", unieap.form.FormWidget, {
	/**
	 * @declaredClass:
	 * 		unieap.form.BaseButton
	 * @summary:
	 * 		所有按钮的基类
	 * @superClass:
	 * 		unieap.form.FormWidget
	 */
	 
	//配置属性接口 
	UserInterfaces : dojo.mixin({
		accessKey : "string",
		onEnter : "function",
		onTab : "function",
		onKeyDown : "function",
		onClick : "function"	
	},
	unieap.form.FormWidget.prototype.UserInterfaces),
	
	/**
	 * @summary:
	 * 		设置或获取对象的快捷键
	 * @type:
	 * 		{string}
	 * @example:
	 * |<div dojoType="unieap.form.Button" accessKey="j" label="J">
	 * |</div>
	 * 		在ie中按下Alt+j 触发这个按钮的onClick事件。
	 * 		其它浏览器需要使用各自的组合键。			
	 */
	accessKey: "",	
	
	postCreate: function() {
		this.inherited(arguments);
		this.inputNode.accessKey = this.accessKey;
		var flag = true;
		if("" != this.accessKey){
			flag = false;
		}
		this._postCreate(); 
		this.connect(this.inputNode, "onclick", "_onButtonClick",flag);
		this.connect(this.inputNode,'onkeydown','_onKeyDown',flag);
	},
	
	//子类初始化其他方法和参数
	_postCreate : function(){		
	},
	
	
	//绑定click事件
	_onButtonClick: function(/*Event*/ e) {
		            // @yll针对单个按钮本身1秒内连续点击禁止
					var currentDate = new Date().getTime(); 
					if(!this.lastClickTime){
						this.lastClickTime = 0;
					}
					if(currentDate-this.lastClickTime>1000){
						this.lastClickTime = currentDate;
						unieap.fireEvent(this,this.onClick,[e]);
						// if(dojo){
						//     dojo.stopEvent(e);
						// }
					}else {
						return;
					}
				// unieap.fireEvent(this,this.onClick,[e]);
		// dojo.stopEvent(e);
	},
	
	
	_onKeyDown:function(evt){
		switch(evt.keyCode){
			case dojo.keys.ENTER :
				this._onEnterDown(evt);
				break ;
			case dojo.keys.TAB :
				unieap.fireEvent(this,this.onTab,[evt])
				break;
			default :
				unieap.fireEvent(this,this.onKeyDown,[evt])
		}		
	},
	
	_onEnterDown: function(evt) {
		if(unieap.fireEvent(this,this.onEnter,[evt])==false) return;
		this._enter2Tab(evt);
	},

	//执行inputNode的onkeydown事件，触发tab键
	_enter2Tab : function(evt){
		if(dojo.isIE&&!this.nextFocusId) {
			evt.keyCode = dojo.keys.TAB
		} else {
			//避免回车触发按钮的onclick事件
			dojo.stopEvent(evt);
			this.processNextFocusId();
		}
		unieap.fireEvent(this,this.onTab,[evt])
	},
	
	
	onEnter:function(evt){},
    
	onTab:function(evt){},	
	
	onKeyDown:function(evt){},
	
	
	
	/**
	 * @summary:
	 * 		按钮的点击事件
	 * @description:
	 * 		注意大小写，编程方式创建时'onClick'将不被解析
	 * @param:
	 * 		{event} e
	 * @example:
	 * |<div dojoType="unieap.form.Button" onClick="hello()"></div>
	 * 		绑定hello方法到onClick事件		
	 */
	onClick: function(/*Event*/ e) {			
	},
	
	focus: function() {
		try{
			this.focusNode&&this.focusNode.focus&&this.focusNode.focus();
		}catch(e){
		}
	}
});

dojo.provide("unieap.form.Button");
dojo.require("unieap.form.BaseButton");
dojo.declare("unieap.form.Button", unieap.form.BaseButton, {
	/**
	 * @declaredClass:
	 * 		unieap.form.Button
	 * @superClass:
	 * 		unieap.form.BaseButton
	 * @summary:
	 * 		按钮控件和普通HTML中的button标签类似，可以像使用普通按钮一样来使用。
	 * 		支持数据绑定，可以绑定数据源中的值作为按钮的标签
	 * @img:
	 * 		images/form/button.png
	 * @example:
	 * |<div dojoType="unieap.form.Button" label="Neusoft东软"></div>
	 * 		创建一个显示值为'Neusoft东软'的按钮
	 * @example:
	 * |<form dojoType="unieap.form.Form"  binding="{store:'emp_store'}>
	 * |	<div dojoType="unieap.form.Button" binding="{name:empName}"></div> 
	 * |</for>
	 * 		通过数据绑定设置Button显示值		
	 */
	 
	//配置属性接口 
	UserInterfaces : dojo.mixin({
		label : "string",
		toolTip : "string",
		iconClass : "string"
	},
	unieap.form.BaseButton.prototype.UserInterfaces),
	
	/**
	 * @summary:
	 * 		按钮上显示的文本值
	 * @type:
	 * 		{string}
	 * @example:
	 * |<div dojoType="unieap.form.Button" label="你好"></div>
	 * 		创建一个显示值'你好'的按钮
	 */
	label: '',
	
	/**
	 * @summary:
	 * 		通过改变css样式来设置按钮上的图标
	 * @type:
	 * 		{string}
	 * @example:
	 * |<style type="text/css">
	 * |		.iconBtn{
	 * |			display:inline-block;
	 * |			width:16px;
	 * |			height:16px;
	 * |			background:url("../images/find.gif") no-repeat;
	 * |		}
	 * |</style>
	 * |<div dojoType="unieap.form.Button" iconClass="iconBtn" labal="设置图标"></div>
	 * @img:
	 * 		images/form/buttonWithIcon.png
	 */
	iconClass:'',
	
	_background:'',
	
	toolTip:'',
	
	templateString:
			"<a href='javascript:void(0);' class='u-form-btn-outer' tabindex='-1' style=\"text-decoration:none;vertical-align:middle;\">" +
				"<button type=\"button\"  class=\"u-form-btn\" dojoAttachPoint=\"focusNode, inputNode,btnNode\" onfocus=\"unieap.fep&&unieap.fep(this)\">" +
					"<table style=\"display:inline-block\">"+
						"<tr><td dojoAttachPoint=\"iconNode\"></td>" +
						"<td class=\"u-form-btn-txt\" dojoAttachPoint=\"labelNode\"></td></tr>" +
					"</table>"+
				"</button>"+
			"</a>",
			
			
	postCreate:function(){
		this.inherited(arguments);
		this.label&&this.setLabel(this.label);
		this.iconClass&&this.setIconClass(this.iconClass);
//		this.connect(this.btnNode,'onmouseover',this._onMouseOver);
//		this.connect(this.btnNode,'onmouseout',this._onMouseOut);
		if(this.toolTip){
			this.inputNode.title = this.toolTip;
		}
		if(this.inputNode.accessKey !='' && this.label && this.label.indexOf(this.inputNode.accessKey)== -1 ){
			this.setLabel(this.label+'('+this.inputNode.accessKey.toUpperCase()+')')
		}
        if(this.iconNode.className){
            $(this.iconNode).addClass("iconfont");
        }
	},
	
	_setWidthAndHeigth: function() {
		//处理控件的宽度和高度
		var btnWidth = this.width || this.domNode.style.width;
		var btnHeight = this.height || this.domNode.style.height;
		
		btnWidth && dojo.style(this.domNode, "width", isNaN(btnWidth)?btnWidth:(this.width+"px"));
		btnWidth && dojo.style(this.btnNode, "width", "100%");
		btnHeight && dojo.style(this.domNode, "height", isNaN(btnHeight)?btnHeight:(this.height+"px"));
	},
	
   /**
	 * @summary:
	 * 		设置是否按钮禁用
	 * @param:
	 * 		{boolean} disabled
	 * @example:
	 * |var btn=unieap.byId('btn');
	 * |btn.setDisabled(true);
	 */
	setDisabled:function(disabled){
		if(disabled){
			dojo.style(this.labelNode,"color","#a7a6aa");
			dojo.removeClass(this.domNode,'u-form-btn-outer');
			dojo.addClass(this.domNode,'u-form-btn-outer-disabled');
		}else{
			dojo.style(this.labelNode,"color","");
			dojo.removeClass(this.domNode,'u-form-btn-outer-disabled');
			dojo.addClass(this.domNode,'u-form-btn-outer');
		}
		this.btnNode.disabled=disabled;
		this.disabled = disabled;
	},
	
	
	//数据绑定
	setValue: function(value) {
		this.label=value;
		if(this.getBinding()&&this.getBinding().getRow()){
			this.setLabel(this.label);
			this.fireDataChange();
		}
		
	},
	
	
	getValue:function(){
		return this.label;
	},
	

	/**
	 * @summary:
	 * 		设置按钮的标签值
	 * @param:
	 * 		{string} label 要设置的标签值
	 * @example:
	 * |var btn=unieap.byId('btn');
	 * |btn.setLabel('你好');
	 * 		设置显示值为'你好'
	 */
	setLabel:function(label){
		this.label=label;
		this.labelNode.innerHTML=label;
	},
	
	/**
	 * @summary:
	 * 		设置按钮图标样式
	 * @description：
	 * 		建议图片大小:16*16,CSS设置width,height为16px; 
	 * @param:
	 * 		{string} className 图标的css名
	 * @example:
	 * |<style type="text/css">
	 * |		.iconBtn{
	 * |			display:inline-block;
	 * |			width:16px;
	 * |			height:16px;
	 * |			background:url("../images/find.gif") no-repeat;
	 * |		}
	 * |</style>
	 * |var btn=unieap.byId('btn');
	 * |btn.setIconClass('iconBtn');
	 */
	setIconClass: function(className) {
		this.iconClass&&dojo.removeClass(this.iconNode,this.iconClass);
		dojo.addClass(this.iconNode,className);
		this.iconClass=className;
	},
	
	_onMouseOver:function(){
		this.toolTip && unieap.showTooltip({inner:this.toolTip},this.inputNode);
	},
	
	_onMouseOut:function(){
		this.toolTip && unieap.showTooltip(this.inputNode);
	},
	
	_onEnterDown: function(evt) {
		this.onEnter(evt);
	}
});
dojo.provide("unieap.form.DropDownButton");
dojo.require("unieap.form.Button");
dojo.declare("unieap.form.DropDownButton", [unieap.form.Button], {
	/**
	 * @declaredClass:
	 * 		unieap.form.DropDownButton
	 * @superClass:
	 * 		unieap.form.Button
	 * @summary:
	 * 		下拉按钮控件由两部分组成,控件左侧是一个按钮,右侧是一个下拉箭头。
	 * @classDescription:		
	 * 		点击按钮会触发按钮点击事件,点击下拉箭头会触发下拉箭头点击事件
	 * @img:
	 * 		images/form/dropDown.png
	 * @example:
	 * |<div dojoType="unieap.form.DropDownButton" onClick="clickBtn()" label="点击我">
	 * |	<div dojoType="unieap.menu.Menu">
	 * |		<div dojoType="unieap.menu.MenuItem">中国</div>
	 * |		<div dojoType="unieap.menu.MenuItem">美国</div>
	 * |	</div>
	 * |</div>
	 * 		运行上述代码,点击按钮时会弹出数字1,点击下拉箭头会弹出菜单
	 */
	popDom:null,
	//配置属性接口
	UserInterfaces : dojo.mixin({
		onBeforeArrowClick : "function",
		onArrowClick : "function"
	},

	unieap.form.Button.prototype.UserInterfaces),
	
	templateString: "<a href='javascript:void(0);' tabIndex='-1' class='u-form-dropBtn u-form-btn-outer' style=\"text-decoration:none;\">"+
						"<button class='u-form-btn'  style='padding-left: 0px;' type='button' style=\"height:100%\" dojoAttachPoint='inputNode,btnNode' onfocus=\"unieap.fep&&unieap.fep(this)\">"+
							"<table dojoAttachPoint=\"mainTable\" style=\"display:inline-block;\">"+
								"<tr><td><div dojoAttachPoint=\"iconNode\"></div></td>" +
								"<td><div class=\"u-form-btn-txt\" dojoAttachPoint=\"labelNode\"></div></td>"+
							"</table>"+
						"</button>"+
						"<span class='u-form-dropBtn-icon u-form-dropBtn-icon-normal exportHidden' dojoAttachPoint='arrowNode'></span>"+
					"</a>",
	
	
	/**
	 * @summary:
	 * 		设置下拉按钮控件要下拉的对象,一般用于编程方式来创建控件
	 * @type:
	 * 		{object}
	 * @example:
	 * |var menu=new unieap.menu.Menu();
	 * |	menu.addChild(new unieap.menu.MenuItem({label:'中国'});
	 * |	menu.addChild(new unieap.menu.MenuItem({label:'美国'});
	 * |var dropBtn=new unieap.form.DropDownButton({label:'点击我',dropDown:menu});
	 * |	dropBtn.placeAt(dojo.body());
	 * 		在body下创建一个DropDownButton,并增加两个菜单
	 */
	dropDown:null,
	
	
	//覆盖_Template.js中的_fillContent方法
	_fillContent: function(){
		if(this.srcNodeRef){
			var nodes = dojo.query("*", this.srcNodeRef);
			unieap.form.DropDownButton.superclass._fillContent.call(this, nodes[0]);
			this.dropDownContainer = this.srcNodeRef;
		}
	},
	
    postCreate:function(){
		
		this.inherited(arguments);
		
		this.conns = [];
		if(!this.disabled) {
			this.dropDownHandle = dojo.connect(this.arrowNode,'onclick',this,'_processDropDown');
			this.conns.push(this.dropDownHandle);
		}
		
		//计算按钮实际宽度
		var width = this.width || dojo.style(this.domNode,'width');
		var buttonWidth = parseInt(width,10) - (dojo.style(this.arrowNode,'width')||16);
		buttonWidth > 0 && dojo.style(this.btnNode,'width',buttonWidth+"px");
		
		//在IE8下,当width设置过小时，比如38px,显示不了图标
		if(dojo.isIE==8 || !!dojo.isWebKit){
			if(buttonWidth>0&&parseInt(buttonWidth,10)<30){
				this.mainTable.style.width=buttonWidth;
				this.btnNode.style.paddingLeft="0";
				this.btnNode.style.paddingRight="0";
				
			}
		}
	},
	
	_setWidthAndHeigth: function() {
		//处理控件的宽度和高度
		this.width && dojo.style(this.domNode, "width", isNaN(this.width)?this.width:(this.width+"px"));
		this.height && dojo.style(this.domNode, "height", isNaN(this.height)?this.height:(this.height+"px"));
	},
	
	
	startup: function() {
		if(this._started){ return; }
		if(!this.dropDown){
			var dropDownNode = dojo.query("[widgetId]", this.dropDownContainer)[0];
			dropDownNode&&(this.dropDown = dijit.byNode(dropDownNode));
			delete this.dropDownContainer;
		}
		
		//dojo1.4中将dijit.popup.prepare改为dijit.popup.moveOffScreen;
		//this.dropDown&&dijit.popup.prepare(this.dropDown.domNode);
		//兼容dojo1.3写法
		if(this.dropDown){
			dijit.popup.moveOffScreen?dijit.popup.moveOffScreen(this.dropDown.domNode):dijit.popup.prepare(this.dropDown.domNode);
		}

		this.inherited(arguments);
	},
	
	destroy:function(){
		dojo.forEach(this.conns,dojo.disconnect);
		this.dropDown&&this.dropDown.destroy();
		this.inherited(arguments);
	},
	
	setDisabled:function(disabled){
		this.inherited(arguments);
		if(disabled){
			this.dropDownHandle && dojo.disconnect(this.dropDownHandle);
			this.dropDownHandle = null;
			dojo.removeClass(this.arrowNode,'u-form-dropBtn-icon-normal');
			dojo.addClass(this.arrowNode,'u-form-dropBtn-icon-disabled');
		}else{
			if(!this.dropDownHandle) {
				this.dropDownHandle = dojo.connect(this.arrowNode,'onclick',this,'_processDropDown');
				this.conns.push(this.dropDownHandle);
			}
			dojo.removeClass(this.arrowNode,'u-form-dropBtn-icon-disabled');
			dojo.addClass(this.arrowNode,'u-form-dropBtn-icon-normal');
		}
	},
	
	//处理点击下拉箭头事件
	_processDropDown:function(evt){
		var ele;
        // if(dojo.isIE){
        // 	console.log(evt.currentTarget);
        //     ele = evt.currentTarget
        // }else{
        //     ele = evt.path[1]
        // }
        ele =evt.currentTarget|| evt.path[1];
        dojo.addClass(ele,'popActive');
        this.popDom = ele;

		if(unieap.fireEvent(this,this.onBeforeArrowClick,[evt])&&this.dropDown){
			this._openDropDown();
			unieap.fireEvent(this,this.onArrowClick,[evt])
		}
	},
	
	//显示弹出菜单
	_openDropDown: function() {

		if(!this._opened){
			var dropDown = this.dropDown;
			var oldWidth=dropDown.domNode.style.width;
			var self = this;
			dijit.popup.open({
				parent: this,
				popup: dropDown,
				around: this.domNode,
				orient: this.isLeftToRight() ? {'BL':'TL', 'BR':'TR', 'TL':'BL', 'TR':'BR'}
					: {'BR':'TR', 'BL':'TL', 'TR':'BR', 'TL':'BL'},
				onExecute: function(){
					self._closeDropDown(true);
				},
				onCancel: function(){
					self._closeDropDown(true);
				},
				onClose: function(){
					dropDown.domNode.style.width = oldWidth;
					this._opened = false;
				}
			});
			if(this.domNode.offsetWidth > dropDown.domNode.offsetWidth){
				var adjustNode = null;
				if(!this.isLeftToRight()){
					adjustNode = dropDown.domNode.parentNode;
					var oldRight = adjustNode.offsetLeft + adjustNode.offsetWidth;
				}
				// 使得弹出菜单和按钮一样宽
				dojo.marginBox(dropDown.domNode, {w: this.domNode.offsetWidth});
				if(adjustNode){
					adjustNode.style.left = oldRight - this.domNode.offsetWidth + "px";
				}
			};
            var window_top=$(dropDown.domNode).offset().top-$(window).scrollTop();
            if(dropDown.domNode.offsetHeight>($(window).height()-window_top)){
                $(dropDown.domNode.parentNode).css({"height":$(window).height()-window_top-16,"overflowY": "auto","box-shadow": "0 2px 8px rgba(0,0,0,.15)"});
            }else{
                $(dropDown.domNode.parentNode).css({"height":"auto","overflowY": "inherit","box-shadow": "0 2px 8px rgba(0,0,0,.15)"});
			}
			this._opened=true;
			
		}else{
			
			this._closeDropDown();
		}

	},
	
	_closeDropDown: function() {
		if(this._opened){
            dojo.removeClass(this.popDom,'popActive');
			dijit.popup.close(this.dropDown);
			this._opened = false;			
		}
	},

	/**
	 * @summary:
	 * 		在点击控件右侧的下拉箭头之前触发
	 * @description:
	 * 		如果返回为false,下拉菜单将不会显示
	 * @param:
	 * 		{event} evt
	 * @return:
	 * 		{boolean}
	 */
	onBeforeArrowClick:function(evt){
		return true;
	},

	/**
	 * @summary:
	 * 		点击控件右侧的下拉箭头时触发
	 * @param:
	 * 	{event} evt
	 */
	onArrowClick: function(evt) {

	},

	//覆盖父类的方法
	_onButtonClick: function(evt) {
            this._closeDropDown();
            this.onClick(evt);
	},

	_onBlur:function(){
		this._closeDropDown();
	},
    addMenus: function (buttons) {
        if (this.dropDown == null) {
            var ddMenu = new unieap.menu.Menu();
        } else {
            var ddMenu = this.dropDown;
        }
        dojo.forEach(buttons, function (button) {
			if(!button){return}//防止调用addMenus方法传进来的数组会有undefined
            if (button.declaredClass == "unieap.form.Button") {
                ddMenu.addChild(new unieap.menu.MenuItem({
                    id: button.id + '_menu',
                    label: button.label,
                    //iconClass:button.iconClass,
                    owner: button,
                    onClick: function () {
                        this.owner.onClick();
                    }
                }));

                dojo.addClass(button.domNode, 'drop-down-button-owner');
                dojo.addClass(button.domNode, 'drop-down-button-hide');
            } else {
                ddMenu.addChild(new unieap.menu.MenuItem(button));
            }

        });
        if (this.dropDown == null) {
            this.dropDown = ddMenu;
        }
	},
	addMenu:function(button, visible){
		if (this.dropDown == null) {
			this.dropDown = new unieap.menu.Menu();
		}
		var menuItem = null;
		if (button.declaredClass == "unieap.form.Button") {
			menuItem = new unieap.menu.MenuItem({
				id: button.id + '_menu',
				label: button.label,
				//iconClass:button.iconClass,
				owner: button,
				onClick: function () {
					this.owner.onClick();
				}
			});

			dojo.addClass(button.domNode, 'drop-down-button-owner');
			dojo.addClass(button.domNode, 'drop-down-button-hide');
		} else {
			menuItem = new unieap.menu.MenuItem(button);
		}
		menuItem.setVisible(visible);
		this.dropDown.addChild(menuItem);
	},
	/**
	 * @summary:
	 * 		显示/隐藏下拉菜单项
	 * @param:
	 * 	{id} 菜单项id,
	 *  {visible} 显示/隐藏
	 */
	setMenuVisible:function(id,visible){
		if (this.dropDown && this.dropDown.declaredClass=='unieap.menu.Menu'){
			var menuItems = this.dropDown.getChildren();
			var findItem = this._rootID+id+'_menu';
			dojo.forEach(menuItems, function (menuItem) {
				if (menuItem.id==findItem){
					menuItem.setVisible(visible);
				}

			})
		}

	}
});

dojo.provide("unieap.form.CheckBox");
dojo.require("unieap.form.BaseButton");
dojo.declare("unieap.form.CheckBox", unieap.form.BaseButton, {
    /**
     * @declaredClass:
     *        unieap.form.CheckBox
     * @summary:
     *        复选按钮，支持数据绑定
     * @superClass:
     *        unieap.form.BaseButton
     * @example:
     * |<div dojoType="unieap.form.CheckBox" checked="true" checkedValue="yes" uncheckedValue="no"></div>
     *        如果复选框被勾选,通过getValue返回的是yes,否则为no
     * @example:
     * |//在ie下复选框(单选按钮)checked属性存在bug，如下代码所示：
     * |var box=document.createElement('input');
     * |box.type="checkbox";
     * |//box.type=true  在ie下不能写在此处,此时box还没有放在页面文档流中
     * |document.body.appendChild(box); //需将checkbox加入到文档流，然后再进行checked属性的设置
     * |box.checked=true;
     * @example:
     * |//由于ie上述bug,RIA解决方法如下：
     * |var box=new unieap.form.CheckBox({id:'chkBox'});
     * |box.placeAt(dojo.body());
     * |box.setChecked(true);
     *        必须把控件放到页面文档流中中才能执行setChecked操作
     */

    //配置属性接口
    UserInterfaces: dojo.mixin({
            checked: "boolean",
            checkedValue: "string",
            uncheckedValue: "string",
            onBeforeClick: "function",
            onBeforeChange: "function",
            onChange: "function",
            disabled: "boolean",
            type:"string"
        },
        unieap.form.BaseButton.prototype.UserInterfaces),

    /**
     * @summary:
     *        设置初始化时的选中状态
     * @type:
     *        {boolean}
     * @default:
     *        false
     * @example:
     * |    <div dojoTYpe="unieap.form.CheckBox" checked="true"></div>
     *        页面加载完毕后,控件就处于选中状态,即复选框被勾选上了。
     */
    checked: false,

    /**
     * @summary：
     *        控件处于选中状态时对应的值
     * @type：
     *        {string}
     * @default:
     *        "1"
     * @example:
     * |    <div dojoType="unieap.form.CheckBox" checkedValue="1"></div>
     *        当控件处于选中状态时,调用getValue()方法,返回的值就为1
     *
     *
     */
    checkedValue: "1",

    /**
     * @summary:
     *        控件处于非选中状态时对应的值
     * @type:
     *        {string}
     * @default:
     *        "0"
     * @example:
     * |<div dojoTYpe="unieap.form.CheckBox" uncheckedValue="0"></div>
     *        当控件处于非选中状态时,调用getValue()方法,返回的值就为0
     */
    uncheckedValue: "0",

    templateString: "<div class=\"u-form-chk\" >" +
    "<div dojoAttachPoint=\"modifiedNode\" class=\"u-form-modified\"></div>" +
    "<input type=\"checkbox\" class=\"u-form-chkInput\" name=\"${name}\" autocomplete=\"off\" dojoAttachPoint=\"inputNode,focusNode\" onfocus=\"unieap.fep&&unieap.fep(this)\"/>" +
    "<span class=\"formImgSelect\"></span>" +
    "</div>",


    name: 'chkBox',

    /**
     * @summary：
     *        控件是否转换为开关按钮
     * @type：
     *        {string}
     * @default:
     *        "default"，三个值default，switch，toggle，type值为default，则为普通复选框，type值为switch，转换为开关按钮, type值为toggle,转换图片开关
     * @example:
     * |    <div dojoType="unieap.form.CheckBox" type="default"></div>
     *        当控件type值为switch,复选框转换为开关按钮
     *
     *
     */
    type: "default",



    postMixInProperties: function () {
        //保存控件的初始值
        this.inherited(arguments);
        this.checked && (this.value = this.checkedValue);
    },

    //覆盖父类的_postCreate方法
    _postCreate: function () {
        this.inputNode.checked = this.checked;
        this.inputNode.value = this.checkedValue;
        this.setCheckedImage(this.checked);
        if(this.type=="switch"){
            dojo.addClass(this,"check_yesno_style");
            dojo.addClass(this.domNode,"check_yesno_style");
        }else if (this.type=="toggle") {
            dojo.addClass(this,"check_openClose_style");
            dojo.addClass(this.domNode,"check_openClose_style");
        }
        this._initCheckYesOrNo();
    },

    /**
     * @summary:
     *        点击复选框前的触发事件,返回为false将不勾选复选框
     * @return:
     *        {boolean}
     * @example:
     * |function fn(){
	 * |	return false;
	 * |}
     * |<div dojoType="unieap.form.CheckBox" onBeforeClick="fn"></div>
     */
    onBeforeClick: function () {
        return true;
    },


    onBeforeChange: function () {
        return true;
    },


    //覆盖父类unieap.form._onButtonClick
    _onButtonClick: function (evt) {
        if (!unieap.fireEvent(this, this.onBeforeClick, []) || !unieap.fireEvent(this, this.onBeforeChange, [])) {
            dojo.stopEvent(evt);
            return;

        }
        this.setChecked(!this.checked);
        unieap.fireEvent(this, this.onClick, [evt])
        this._onChange();
    },

    _onChange: function () {
        unieap.fireEvent(this, this.onChange, [this.checked]);
        this.fireDataChange();
    },


    /**
     * @summary:
     *        设置复选按钮的选中状态
     * @param:
     *        {boolean} checked
     */
    setChecked: function (checked) {
        this.setCheckedImage(checked);
        this.inputNode.checked = checked;
        // if(unieap.isUserStyle){
        // 	if(unieap.currentStyle == 'network'){
        if (checked == false) {
            $(this.inputNode).next('span').removeClass('selectDisabled')
        }
        // 	}
        // }
        if (checked == this.checked) return;
        this.checked = checked;
        this.fireDataChange();

    },
    /**
     * @summary
     *        获取复选按钮的选中状态
     */
    isChecked: function () {
        return this.inputNode.checked;
    },
    /**
     * @summary:
     *        选中状态改变事件
     * @param:
     *        {boolean}复选按钮选中状态
     * @example:
     * |function fn(checked){
	 * |	if(checked) { 
	 * |		alert('选中');
	 * |	}else {
	 * |		alert('取消选中');
	 * |	}
	 * |}
     * |<div dojoType="unieap.form.CheckBox" onChange="fn"></div>
     */
    onChange: function (checked) {

    },


    /**
     * @summary:
     *        设置复选按钮的值,相当于调用setChecked方法
     * @description:
     *        注意,当且仅当value值为checkedValue时复选框才能被选中,或者取消选中。
     * @param:
     *        {string} value
     */
    setValue: function (value) {
        //如果value值和用户设置的的checkedValue值相同,则选中复选框
        //var bool=value==null||value==''||typeof(value)=='undefined';
        if (String(value) == String(this.checkedValue)) {
            this.setChecked(true);
        } else {
            this.setChecked(false);
        }
        this.fireDataChange();
        //bool&&this.setModified(false);
        if ($(this.domNode).is(".check_yesno_style")||$(this.domNode).is(".check_openClose_style")) {
            this._setCheckYesOrNoState(value);
        }

    },
    //zhaos 对复选按钮增加禁用样式
    setDisabled: function (disabled) {
        this.disabled = disabled;
        this.inputNode && (this.inputNode.disabled = disabled);
        var spanNode = $(this.inputNode.nextElementSibling);
        if (this.disabled) {
            if (this.checked == false) {
                spanNode.hasClass('formImgSelect') ? spanNode.removeClass('formImgSelect') : null;
                spanNode.addClass('unSelectDisabled');

            } else if (this.checked == true) {
                spanNode.hasClass('unSelectDisabled') ? spanNode.removeClass('unSelectDisabled') : null;
                spanNode.hasClass('formImgSelect') ? spanNode.removeClass('formImgCheced') : null;
                spanNode.hasClass('formImgSelect') ? spanNode.removeClass('formImgSelect') : null;
                spanNode.addClass('selectDisabled');
            }
        } else {
            if (this.checked == false) {
                spanNode.hasClass('unSelectDisabled') ? spanNode.removeClass('unSelectDisabled') : null;
                spanNode.addClass('formImgSelect');

            } else if (this.checked == true) {
                spanNode.hasClass('unSelectDisabled') ? spanNode.removeClass('unSelectDisabled') : null;
                spanNode.hasClass('selectDisabled') ? spanNode.removeClass('selectDisabled') : null;
                spanNode.addClass('formImgSelect').addClass('formImgCheced');
            }
        }
    },
    /**
     * @summary:
     *        取得复选按钮的值
     * @return:
     *        object
     */
    getValue: function () {
        return this.inputNode.checked ? this.checkedValue : this.uncheckedValue;
    },

    /**
     * @summary:
     *        取得复选按钮选中状态的值
     * @return:
     *        object
     */
    getCheckedValue: function () {
        return this.checkedValue;
    },

    /**
     * @summary:
     *        取得复选按钮非选中状态的值
     * @return:
     *        object
     */
    getUncheckedValue: function () {
        return this.uncheckedValue;
    },

    destroy: function () {
        if (this.inputNode) {
            this.inputNode.onfocus = null; //防止内存泄漏
        }
        this.inherited(arguments);
    },


    /**
     * @summary:
     *        设置复选按钮选中状态和非选中状态的值
     * @param:
     *        {object} checkedValue
     *        选中状态的值
     * @param:
     *        {object} uncheckedValue
     *        非选中状态的值
     * @example:
     * |<div dojoType="unieap.form.CheckBox" id="checkbox"></div>
     * |var checkbox = unieap.byId('checkbox');
     * |checkbox.setCheckedOption("yes","no");
     * 设置CheckBox选中状态的值是yes，非选中状态的值是no
     */
    setCheckedOption: function (checkedValue, uncheckedValue) {
        this.checkedValue = checkedValue;
        this.uncheckedValue = uncheckedValue;
        this.inputNode.value = this.checkedValue;
    },
    // 新增方法setCheckedImage，判断是否选中添加图片切换选中状态
    setCheckedImage: function (checked) {
        // if(unieap.isUserStyle){
        // 	if(unieap.currentStyle == 'network'){
        if (checked) {
            // 判断type等于check还是radio
            if (dojo.attr(this.inputNode, "type") == "checkbox") {
                // checkbox添加选中状态
                $(this.inputNode).next().addClass("formImgSelected");
            } else {
                // radio添加选中状态
                $(this.inputNode).next().addClass("formImgRadioed");
                //对勾显示效果
                $(this.inputNode).next('.formImgRadioed').find('i').animate({'opacity': '1'}, 300)
            }
        } else {
            // 判断type等于check还是radio
            if (dojo.attr(this.inputNode, "type") == "checkbox") {
                // 去掉选中状态
                $(this.inputNode).next().removeClass("formImgSelected");
            } else {
                $(this.inputNode).next().removeClass("formImgRadioed");
                $(this.inputNode).next('.formImgRadio').find('i').animate({'opacity': '0'}, 300)
            }
        }
        // 	}
        // }
    },

    //2018.10.26新增开关转换
    _initCheckYesOrNo: function () {
        var checkBox = this;
        if ($(this.domNode).is('.check_yesno_style')) {
            var parentDom = $(this.domNode).parent();

            if ($('.check_yesno_parent', parentDom).length > 0) {
                $('.check_yesno_parent', parentDom).remove();
            }
            if (this.disabled) {
            // if ($(this.domNode).is('.check_yesno_lose')) {
                parentDom.append("<div class='check_yesno_parent check_yesno_parent_lose'><div class='check_yesno_child'></div><div class='check_yesno_child_text'>否</div></div>");
            } else {
                parentDom.append("<div class='check_yesno_parent'><div class='check_yesno_child'></div><div class='check_yesno_child_text'>否</div></div>");
            }

            var comboButtonParent = $('.check_yesno_parent', parentDom);

            this.isCheckBoxClick(comboButtonParent, checkBox);
        }
        /**
         * JXin 开关按扭
         * 2017年8月23日9:59:01
         */
        if ($(this.domNode).is('.check_openClose_style')) {
            var parentDom = $(this.domNode).parent();
            if ($('.check_openClose_vparent', parentDom).length > 0) {
                $('.check_openClose_vparent', parentDom).remove();
            }
            if ($(this.domNode).is('.check_openClose_lose')) {
                parentDom.append("<div class='check_openClose_vparent check_openClose_vparent_lose'><div class='check_openClose_close'></div><div class='check_openClose_open'></div></div>");
            } else {
                parentDom.append("<div class='check_openClose_vparent'><div class='check_openClose_close'></div><div class='check_openClose_open'></div></div>");
            }

            var comboButtonParent = $('.check_openClose_vparent', parentDom);
            // 20170925 chenH 判断check是否禁用，禁用不绑定click事件。
            this.isCheckBoxClick(comboButtonParent, checkBox)
        }
        checkBox._setCheckYesOrNoState(checkBox.getValue());
    },

    _setCheckYesOrNoState: function (v) {
        if ($(this.domNode).is('.check_yesno_style')) {
            var parentDom = $(this.domNode).parent();
            if (v == 1) {
                $(".check_yesno_parent", parentDom).addClass('checked');
                //判断按钮是否失效样式check_yesno_parent_lose，如按钮失效就去掉蓝色背景
                var obj = $(".check_yesno_parent", parentDom);
                if (!obj.hasClass('check_yesno_parent_lose')) {
                    obj.css("background", "#4e92f5")
                }
               if($(window.parent.parent.document).find(".dark").length==1){
                	 obj.css("background", "#038DB5");
                }
                $('.check_yesno_parent .check_yesno_child_text', parentDom).html('开').show('500');
                $(".check_yesno_parent .check_yesno_child", parentDom).animate({
                    left: 21
                });
            } else {
                $(".check_yesno_parent", parentDom).removeClass('checked');
                var obj = $(".check_yesno_parent", parentDom);
                if (!obj.hasClass('check_yesno_parent_lose')) {
                    obj.css("background", "#999")
                }
                $('.check_yesno_parent .check_yesno_child_text', parentDom).html('关');
                $(".check_yesno_parent .check_yesno_child", parentDom).animate({
                    left: 1
                });
            }
            // $(".check_yesno_parent .combo_button_child", parentDom).removeClass('checked');
            // $(".combo_button_parent .combo_button_child[val='" + v + "']", parentDom).addClass('checked');
            //lht 如果YesorNo 添加disabled属性不添加点击事件
            if ($(this.domNode).find('input').attr('disabled')) {
                return false
            }
        }

        /**
         * JXin 开关按扭
         * 2017年8月23日9:59:01
         * v==1 代表close
         */
        if ($(this.domNode).is('.check_openClose_style')) {
            var parentDom = $(this.domNode).parent();
            if (v == 1) {
                $(".check_openClose_vparent", parentDom).addClass('checked');
                //$('.check_yesno_vparent .check_yesno_child_text',parentDom).html('是');
                if ($(".check_openClose_vparent .check_to_close", parentDom).length > 0)
                    $(".check_openClose_vparent .check_openClose_open", parentDom).removeClass("check_to_close");
                if ($(".check_openClose_vparent .check_to_open", parentDom).length > 0)
                    $(".check_openClose_vparent .check_openClose_close", parentDom).removeClass("check_to_open");
                $(".check_openClose_vparent .check_openClose_open", parentDom).addClass("check_to_close");
                $(".check_openClose_vparent .check_openClose_close", parentDom).addClass("check_to_open");
                if ($(this.domNode).is('.check_openClose_lose')) {
                    $(".check_openClose_vparent .check_openClose_close", parentDom).animate({
                        left: 23
                    });
                    $(".check_openClose_vparent .check_openClose_open", parentDom).animate({
                        left: 3
                    });
                } else {
                    $(".check_openClose_vparent .check_openClose_close", parentDom).animate({
                        left: 23
                    });
                    $(".check_openClose_vparent .check_openClose_open", parentDom).animate({
                        left: 3
                    });
                }

            } else {
                $(".check_openClose_vparent", parentDom).removeClass('checked');
                $(".check_openClose_vparent .check_openClose_open", parentDom).removeClass("check_to_close");
                $(".check_openClose_vparent .check_openClose_close", parentDom).removeClass("check_to_open");
                if ($(this.domNode).is('.check_openClose_lose')) {
                    $(".check_openClose_vparent .check_openClose_close", parentDom).animate({
                        left: 3
                    });
                    $(".check_openClose_vparent .check_openClose_open", parentDom).animate({
                        left: 23
                    });
                } else {
                    $(".check_openClose_vparent .check_openClose_close", parentDom).animate({
                        left: 3
                    });
                    $(".check_openClose_vparent .check_openClose_open", parentDom).animate({
                        left: 23
                    });
                }
            }
            //lht 如果YesorNo 添加disabled属性不添加点击事件
            if ($(this.domNode).find('input').attr('disabled')) {
                return false
            }
        }
    },


    /*
     *
     * 转换后的checkBox添加点击事件
     * 接收两个参数，第一个当前点击对象，第二个点击对象的this
     * clickObj 当前点击对象
     * thisObj 点击对象的 this 源生的
     */
    isCheckBoxClick: function (clickObj, thisObj) {
        //20170925 chenH 判断check是否禁用，禁用不绑定click事件。
        clickObj.click(function (evt) {
            if (thisObj.disabled == true) {
                return;
            }
            if (!unieap.fireEvent(thisObj, thisObj.onBeforeClick, []) || !unieap.fireEvent(thisObj, thisObj.onBeforeChange, [])) { //添加该判断，否认onbeforeclick返回false时不生效
                dojo.stopEvent(evt);
                return;
            }
            if (thisObj.getValue() == 1) {
                // 20170901 CH 添加check转换按钮之后绑定onClick事件
                thisObj._onButtonClick();
                thisObj.setValue(0);
            } else {
                // 20170901 CH 添加check转换按钮之后绑定onClick事件
                thisObj._onButtonClick();
                thisObj.setValue(1);
            }
        })
    }
});



dojo.provide("unieap.form.RadioButton");
dojo.require("unieap.form.CheckBox");
dojo.declare("unieap.form.RadioButton", unieap.form.CheckBox, {
	/**
	 * @declaredClass:
	 * 		unieap.form.RadioButton
	 * @summary:
	 * 		单选按钮，支持数据绑定
	 * @superClass:
	 * 		unieap.form.CheckBox
	 */
	templateString:"<div class=\"u-form-rdoBtn\" >" +
			"<div dojoAttachPoint=\"modifiedNode\" class=\"u-form-modified\"></div>"+
			"<input type=\"radio\" class=\"u-form-chkInput\" name=\"${name}\"  dojoAttachPoint=\"inputNode,focusNode\" onfocus=\"unieap.fep&&unieap.fep(this)\"/>"+
			"<span class='formImgRadio'><i class='fadeIn' style='opacity: 1;'></i></span>"+ //2018.6.6 新增单选样式 石向锋
			"</div>",
	
	
	//在ie<8下,无法把一组单选按钮变为按钮组,例如:
	//<input type='radio' /><input type='radio' /><input type='raido'>
	//dojo.forEach(document.getElementsByTagName('input'),function(ele){
	//       ele.name='radioBtn'
	//})
	// 事实上,他们依然不是单选按钮组,单选按钮组中的元素可以通过左右箭头进行导航
	//
	name:'radioBtn',
	
	_onButtonClick: function(evt) {
		if(!this.onBeforeClick()||!this.onBeforeChange()){
			dojo.stopEvent(evt);
			return;
		
		}
		this.setChecked(true);
			var name, self = this;
						dojo.query("> input[name]", this.domNode).forEach(
								function(input){
									name = dojo.attr(input, "name");
								}
						);
						var inputName;
						dojo.query("div.u-form-rdoBtn").forEach(
								function(node) {
									var radioButton = dijit.byNode(node);
									if(radioButton){
										dojo.query("> input[name]", radioButton.domNode)
										.forEach(function(input) {
											inputName = dojo.attr(input, "name");
										});
										if (inputName == name
												&& radioButton != self) {
											radioButton.setChecked(false);
										}
									}
								});
		this.onClick(evt);
		this._onChange();
	},
	
	onTab:function(evt){
		this.inherited(arguments);
		if(this.nextWidget){
			this.nextWidget.focus();
			dojo.stopEvent(evt);
		}
	}
});

dojo.provide("unieap.form.CheckGroup");
dojo.require("unieap.form.FormWidget");

dojo.declare("unieap.form.CheckGroup", unieap.form.FormWidget, {
    /**
     * @declaredClass:
     * 		unieap.form.CheckGroup
     * @summary:
     * 		CheckBoxGroup的基类，定义了模板及基本结构。
     * @superClass:
     * 		unieap.form.FormWidget
     */

    //配置属性接口
    UserInterfaces : dojo.mixin({
            cols : "number",
            value : "string",
            labelAlign : "string",
            dataProvider : "object",
            decoder : "object",
            nextFocusId : "string",
            disabled : "boolean",
            focusOffset : "number",
            onChange : "function",
            onBeforeChange : "function",
            onTab : "function"
        },
        unieap.form.FormWidget.prototype.UserInterfaces),

    /**
     * @summary:
     * 		设置按钮组布局的列数
     * @type:
     * 		{number}
     * @default:
     * 		4
     */
    cols: 4,

    /**
     * @summary:
     * 		设置按钮组初始值
     * @type:
     * 		{object}
     * @default:
     * 		null
     */
    value: '',

    /**
     * @summary:
     * 		设置标签位置
     * @type:
     * 		{string}
     * @enum:
     * 		{"left"|"right"|"top"|"bottom"};
     * @default:
     * 		"left"
     */
    labelAlign: 'left',

    /**
     * @summary:
     * 		设置数据源的信息
     * @type
     * 		{object}
     * @see：
     * 		unieap.form.CheckGroupProvider
     */
    dataProvider: null,

    /**
     * @summary:
     * 		设置按钮组转码相关的信息
     * @type：
     * 		{object}
     * @see：
     * 		unieap.form.GroupDecoder
     */
    decoder: null,

    //自动注入dataCenter
    Autowired : "dataCenter",

    nextFocusId:'',


    /**
     * @summary:
     * 		设置是否禁用按钮组控件,禁用后控件将不可再进行选择
     * @type:
     * 		{boolean}
     * @default:
     * 		false
     */
    disabled: false,

    //Form._enter2Tab使用,跳过子RadioButton
    focusOffset: 0,

    templateString :
    "<div class='u-form-chkGroup'>" +
    "<div dojoAttachPoint='modifiedNode' class='u-form-modified'></div>" +
    "<div dojoAttachPoint='requiredNode' class='u-form-required'>*</div>" +
    "<div dojoAttachPoint='errorNode' class='u-form-error'></div>"+
    "<div dojoAttachPoint='containerNode' class='u-form-chkGroup-border'>" +
    "<div dojoAttachPoint='inputNode,focusNode'  style='overflow:hidden;width:100%;zoom:100%;'></div>" +
    "</div>" +
    "</div>",


    postCreate: function(){
        this.checkboxMap = [];
        this.setLayout(this.getDataProvider().getDataStore());
        this.inherited(arguments);

    },
    _attachTab : function(){
    },
    startup : function(){
        if(!this.getDataProvider().getDataStore()){
            this.checkboxMap = dijit.findWidgets(this.containerNode);
            this._attachTab();
        }
        this.value && this.setValue(this.value);
        this.disabled&&(this.setDisabled(true,[]));
    },

    //布局
    setLayout: function(store){
        if (!store)
            return;

        var rs = store.getRowSet(), count = rs.getRowCount();
        if (count < 1)
            return;

        //如果用户调用了setDataStore(),可能需要重新构建布局,删除原有的布局
        dojo.empty(this.inputNode);
        var mp = this.checkboxMap;
        while (mp.length > 0) {
            mp.pop();
        }

        var tb = document.createElement("TABLE"), tbody = document.createElement("TBODY"), layout = this[["_", this.labelAlign, "Layout"].join("")];
        tb.className = "u-form-chkGroup-tab";
        tb.cellpadding = tb.cellspacing = 0;
        tb.appendChild(tbody);
        for (var index = 0; index < count; index++) {
            layout.call(this, tbody, index);
        }
        //补偿TABLE
        for (var i = 0, l = count % this.cols == 0 ? 0 : (this.cols - count % this.cols); i < l; i++) {
            var td = document.createElement("TD");
            td.innerHTML = "&nbsp;";
            this.tr.appendChild(td);
            var labelTd = document.createElement("TD");
            labelTd.innerHTML = "&nbsp;";
            this.labelTr.appendChild(labelTd);
        }
        this.tr = this.labelTr = null;
        //插入模拟radio
        // if(unieap.isUserStyle == true){
            // if(unieap.currentStyle == 'network'){
                var inputlist=$(tb).find('input');
                $(tb).find('input[type="radio"]').eq(0).attr('checked','checked');
                for(var i=0; i<inputlist.length;i++){
                    if($(inputlist[i]).attr('checked')=='checked'){
                        if($(inputlist[i]).attr('type') == 'checkbox'){
                            $(inputlist[i]).after('<span class="formImgSelect formImgCheced"><i class="fadeIn" style="opacity: 1;"></i></span>');
                        }else{
                            $(inputlist[i]).after('<span class="formImgRadio formImgRadioed"><i class="fadeIn" style="opacity: 1;"></i></span>');
                        }
                    }else{
                        if($(inputlist[i]).attr('type') == 'checkbox'){
                            $(inputlist[i]).after('<span class="formImgSelect"><i class="fadeIn" style="opacity: 0;"></i></span>');
                        }else{
                            $(inputlist[i]).after('<span class="formImgRadio"><i class="fadeIn" style="opacity: 0;"></i></span>');
                        }
                    }
                }
            // }
        // }

        this.inputNode.appendChild(tb);
    },

    //labelAlign=="left",文字居左布局
    _leftLayout: function(tb, index){
        //是否开始换行,创建新的tr
        if (index % this.cols == 0) {
            this.labelTr = this.tr = document.createElement("TR");
            tb.appendChild(this.tr);
        }
        this._addCellLabel(index, "right");
        var td = document.createElement("TD");
        td.align = "center";
        td.className = "u-form-chkGroup-cell";
        td.appendChild(this.getCheckBox(index).checkboxNode);
        this.tr.appendChild(td);
    },

    //labelAlign=="right",文字居右布局
    _rightLayout: function(tb, index){
        if (index % this.cols == 0) {
            this.labelTr = this.tr = document.createElement("TR");
            tb.appendChild(this.tr);
        }
        this._addCell(index, "left");
    },

    //labelAlign=="top",文字居上
    _topLayout: function(tb, index){
        if (index % this.cols == 0) {
            this.labelTr = document.createElement("TR");
            tb.appendChild(this.labelTr);
            this.tr = document.createElement("TR");
            tb.appendChild(this.tr);
        }
        this._addCell(index, "center");
    },


    //labelAlign=="bottom",文字居下
    _bottomLayout: function(tb, index){
        if (index % this.cols == 0) {
            this.tr = document.createElement("TR");
            tb.appendChild(this.tr);
            this.labelTr = document.createElement("TR");
            tb.appendChild(this.labelTr);
        }
        this._addCell(index, "center");
    },

    //创建单元格
    _addCell: function(index, position){
        var td = document.createElement("TD");
        td.align = "center";
        td.className = "u-form-chkGroup-cell";
        td.appendChild(this.getCheckBox(index).checkboxNode);
        this.tr.appendChild(td);
        this._addCellLabel(index, position);
    },

    _addCellLabel:function(index, position){
        var labelTd = document.createElement("TD");
        labelTd.className = "u-form-chkGroup-label-td";//U_EAP00028475
        labelTd.align = position;
        var labelFont = document.createElement("LABEL");
        labelFont.className = "u-form-chkGroup-label";//U_EAP00028475
        labelFont.innerHTML = this.getLabel(index);
        var checkbox = this.getCheckBox(index);
        this.connect(labelFont,"onmousedown",function(evt){
            if(checkbox.inputNode && !checkbox.inputNode.disabled && !checkbox.inputNode.readOnly){
                if("unieap.form.RadioButtonGroup" == this.declaredClass){
                    if(checkbox.inputNode.checked) return;
                    checkbox.inputNode.checked = true;
                    if(!unieap.fireEvent(this,this.onBeforeChange,[])){
                        dojo.stopEvent(evt);
                        return;

                    }
                    if (checkbox) {
                        this._onChange(checkbox);
                    }
                }else if("unieap.form.CheckBoxGroup" == this.declaredClass){
                    var originalChecked = checkbox.inputNode.checked;
                    originalChecked == false?checkbox.inputNode.checked=true:checkbox.inputNode.checked=false;
                    if(!unieap.fireEvent(this,this.onBeforeChange,[])){
                        checkbox.inputNode.checked = false;
                        dojo.stopEvent(evt);
                        checkbox.inputNode.checked = originalChecked;
                        return;
                    }
                    this.getValidator().validate();
                    this.fireDataChange();
                    this.setChecked(checkbox.inputNode.checked, [index]);
                    this.onChange(this.getValue());
                }
            }
        });
        labelTd.appendChild(labelFont);
        this.labelTr.appendChild(labelTd);
    },

    //禁用所有的按钮(单选、多选)
    _setDisabled: function(bool){
        var map = this.checkboxMap,item;
        for (key in map) {
            item=map[key];
            this._setCheckDisabled(item,bool);
        }
    },

    /**
     * @summary:
     * 		得到数据源控制器
     * @return：
     * 		{unieap.form.CheckGroupProvider}
     * @see：
     * 		unieap.form.CheckGroupProvider
     */
    getDataProvider: function(){
        return unieap.getModuleInstance(this,"dataProvider", "unieap.form.CheckGroupProvider");
    },

    /**
     * @summary:
     * 		得到转码器
     * @return:
     * 		{unieap.form.GroupDecoder}
     * @see:
     * 		unieap.form.GroupDecoder
     */
    getDecoder: function(){
        return unieap.getModuleInstance(this,"decoder", "unieap.form.GroupDecoder");
    },

    /**
     * @summary:
     * 		按钮组值改变前事件,返回为false将不改变按钮组值,如果要保留原值调用this.setValue(this.getValue());
     * @return:
     * 		{boolean}
     * @example:
     * |function fn(){
	 * |	this.setValue(this.getValue());
	 * |	return false;
	 * |}
     * |<div dojoType="unieap.form.RadioButtonGroup" onBeforeChange="fn"></div>
     */
    onBeforeChange: function(){
        return true;
    },

    /**
     * @summary:
     * 		按钮组值改变时触发事件
     * @param:
     * 		{unieap.form.CheckBox} checkbox
     * 		触发事件的按钮
     */
    onChange: function(checkbox){
//    	$(checkbox.inputNode).attr('checked')
//         if(unieap.isUserStyle == true){
            //  if(unieap.currentStyle == 'network'){
            // if($(checkbox.inputNode).attr('checked')=='checked'){
            //     $(checkbox.inputNode).parents('.u-form-chkGroup-tab').find('.formImgRadio').removeClass('formImgRadioed');
            //     $(checkbox.inputNode).next('.formImgRadio').addClass('formImgRadioed');
            //     $(checkbox.inputNode).next('.formImgRadio').find('i').animate({opacity:1},300)
            // }
            // }
        // }
    },

    /**
     * @summary:
     * 		取得按钮组数据源指定行的显示值
     * @param:
     * 		{number} inRowIndex
     * 		数据源行号
     */
    getLabel: function(inRowIndex){
        var displayAttr = this.getDecoder().getDisplayAttr();
        return this.getDataProvider().getItemValue(displayAttr, inRowIndex);
    },

    /**
     * @summary:
     * 		设置组内某些CheckBox为可用或不可用
     * @param:
     * 		{boolean} bool 可用或不可用
     * @param:
     * 		{array} items CheckBox序号数据
     * @description:
     * 		如果不传items,则会禁用或者解禁所有按钮
     * @example:
     * |var box=unieap.byId('chkBox')
     * |box.setDisabled(true)
     * |box.setDisabled(false,[0,1,2])
     */
    setDisabled: function(bool, items){
        if(!items) {
            this._setDisabled(bool);
        } else if(dojo.isArray(items) && items.length != 0) {
            var checkboxMap = this.checkboxMap, checkbox;
            for (var i = 0; i < items.length; i++) {
                checkbox = checkboxMap[items[i]];
                checkbox && this._setCheckDisabled(checkbox,bool);
            }
        }
    },


    //返回指定索引号的CheckBox(RadioButton)控件,子类覆盖即可
    getCheckBox: function(inRowIndex){
        return null;
    },

    onTab: function(){
    },

    focus: function() {
        this.checkboxMap.length && this.checkboxMap[0].inputNode.focus();
    },

    //是否显示promptMsg
    _showPromptMsg:function(bool){
        var promptManager=this.getPromptManager();
        if(promptManager){
            if(bool){
                promptManager.showPromptMsg(this.inputNode);
            }else{
                promptManager.hidePromptMsg(this.inputNode);
            }
        }
    },
    getPromptManager:function(){
        if(!this.prompt){
            this.prompt = {};
        }
        return unieap.getModuleInstance(this,"prompt","unieap.form.PromptManager");
    },
    _setCheckDisabled: function(checkbox,disabled){
        checkbox.inputNode && (checkbox.inputNode.disabled = disabled);
    }

});

if(!dojo._hasResource["unieap.form.GroupDecoder"]){
dojo._hasResource["unieap.form.GroupDecoder"] = true;
dojo.provide("unieap.form.GroupDecoder");

dojo.declare("unieap.form.GroupDecoder", null,{
	/**
	 * @declaredClass:
	 * 		unieap.form.GroupDecoder
	 * @summary:
	 * 		按钮组的转码控制器
	 */
	
	/**
	 * @summary:
	 * 		指定特定的字段值在作为关键字，与displayAttr一起使用
	 * @type:
	 * 		{string}
	 * @default:
	 * 		"CODEVALUE"
	 */
	valueAttr: "CODEVALUE",
	
	/**
	 * @summary:
	 * 		指定特定的字段值在文本控件中显示，与valueAttr一起使用
	 * @type：
	 * 		{string}
	 * @default：
	 * 		 "CODENAME"
	 */
	displayAttr: "CODENAME",
	
	constructor: function(params) {
		dojo.mixin(this, params);
	},
	
	/**
	 * @summary:
	 * 		转码方法
	 */
	decode: function(value) {
		return value;
	},
	
	/**
	 * @summary:
	 * 		取得属性值
	 * @return:
	 * 		string
	 */
	getValueAttr: function() {
		return this.valueAttr;
	},
	
	/**
	 * @summary:
	 * 		取得属性显示值
	 * @return:
	 * 		string
	 */
	getDisplayAttr: function() {
		return this.displayAttr;
	}
	
});
}

dojo.provide("unieap.form.CheckGroupProvider");
dojo.require("unieap.util.util");
dojo.declare("unieap.form.CheckGroupProvider", null,{
	/**
	 * @declaredClass:
	 * 		unieap.form.CheckGroupProvider
	 * @summary:
	 * 		按钮组数据源控制器
	 */
	 
	/**
	 * @summary:
	 * 		设置按钮组绑定的DataStore。
	 * @type:
	 * 		{string|unieap.ds.Datastore}
	 */
	store: null,
	
	dataCenter: null,
	
	constructor: function(params) {
		dojo.mixin(this, params);		
		//this.store = unieap.getDataStore(this.store,this.widget.dataCenter,true);
		this._initDataStore(this.store);
	},
	
	//公卫需求，如果dataCenter中不存在dataStore，去代码表中取
	_initDataStore: function(store) {
		if(!this.dataCenter){
				this.dataCenter = this.widget.dataCenter || (unieap.Action.getViewContext(this.widget) || window).dataCenter;
			}
		this.store = unieap.getDataStore(this.store,this.dataCenter,true);
		if (!this.store) {
			dojo.require("unieap.rpc");
			this.store = unieap.Action.getCodeList(store);
		}
	},
	
	/**
	  * @summary:
	  * 	取得数据源对象
	  * @return：
	  * 	unieap.ds.DataStore
	  */
	getDataStore: function() {
		return this.store;
	},
	
	/**
	  * @summary:
	  * 	设置数据源
	  * @param：
	  * 	{unieap.ds.DataStore|string} store
	  */
	setDataStore: function(store) {
		if(dojo.isString(store)){
			if(!this.dataCenter){
				this.dataCenter = this.widget.dataCenter || (unieap.Action.getViewContext(this.widget) || window).dataCenter;
			}
			this.store=unieap.getDataStore(store, this.dataCenter, false);
			if (!this.store) {
				dojo.require("unieap.rpc");
				this.store = unieap.Action.getCodeList(store);
			}
		}else{
			this.store = store;
		}
		this.widget.setLayout(this.store);		
	},
	
	/**
	 * @summary:
	 * 		取得指定条目的值
	 * @param:
	 * 		{string} name
	 * 		列名
	 * @param:
	 * 		{number} inRowIndex
	 * 		行号
	 */
	getItemValue: function(name,inRowIndex) {
		return this.store.getRowSet().getItemValue(inRowIndex,name);
	}
});

dojo.provide("unieap.form.CheckBoxGroup");
dojo.require("unieap.form.CheckGroup");

dojo.declare("unieap.form.CheckBoxGroup",unieap.form.CheckGroup,{
	/**
	 * @declaredClass:
	 * 		unieap.form.CheckBoxGroup
	 * @summary:
	 * 		复选按钮组
	 * @classDescription:
	 * 		1.依靠unieap.ds.DataStore类型的数据源构造一个复选按钮组。
	 * 		2.复选按钮组本身作为一个FormWidget支持数据绑定，可通过getBinding()方法取得绑定对象。
	 * 		3.用户可通过设置cols值来控制按钮组布局。
	 * 		4.支持对组内按钮状态变化的监听.
	 * 		5.支持组内按钮反选.
	 * 		6.支持组内按钮的获取。
	 * @superClass:
	 * 		unieap.form.CheckGroup
	 * @example:
	 * |<script type="text/javascript">
	 * |	var city = new unieap.ds.DataStore('city_store', [
	 * |		{CODEVALUE: 1,CODENAME: '浙江'}, 
	 * |		{CODEVALUE: 2,CODENAME: '辽宁'}, 
	 * |		{CODEVALUE: 3,CODENAME: '福建'},
	 * |		{CODEVALUE: 4,CODENAME: '沈阳'}, 
	 * |		{CODEVALUE: 5,CODENAME: '北京'},
	 * |		{CODEVALUE: 6,CODENAME: '宁海'}, 
	 * |		{CODEVALUE: 7,CODENAME: '宁波'}, 
	 * |		{CODEVALUE: 8,CODENAME: '水车'},
	 * |		{CODEVALUE: 15,CODENAME: '上园'}, 
	 * |		{CODEVALUE: 16,CODENAME: '下园'}
	 * |	]);
	 * |	dataCenter.addDataStore(city);
	 * |</script>
	 * |<div id="CheckboxGroup" 
	 * |	cols="4" 
	 * |	labelAlign="left"
	 * |	dojoType="unieap.form.CheckBoxGroup"
	 * |	dataProvider="{'store':'city_store'}">
	 * |</div>
	 * @img:
	 * 		images/form/checkboxgroup.png
	 */
	 
	 
	separator: ",",

	
	//获得复选框,没有则创建
	getCheckBox: function(inRowIndex) {
		if(this.checkboxMap[inRowIndex]){
			return this.checkboxMap[inRowIndex];
		}		
		var provider = this.dataProvider || this.getDataProvider();
		var valueAttr = this.getdecoder?this.decoder.getValueAttr():this.getDecoder().getValueAttr();
//		var me=this;
		var checkbox = {};
		var checkboxNode = document.createElement('div');
		checkboxNode.name = this.name || this.id;
		checkboxNode.className="u-form-chk";
		var modifiedNode = document.createElement('div');
		modifiedNode.className="u-form-modified";
		var inputNode = document.createElement('input');
		inputNode.className="u-form-chkInput";
	 	inputNode.type="checkbox";
		checkboxNode.appendChild(modifiedNode);
		checkboxNode.appendChild(inputNode);
//		inputNode.onclick = function(evt){
//			dojo.stopEvent(evt);
//			me.getValidator().validate();
//			me.fireDataChange();
//			me.onChange(me.getValue());
//		};

        checkbox.getValue = dojo.hitch(this,function(){
            return this.getValue();
        });


		this.connect(inputNode,"onclick",function(evt){
			if(!unieap.fireEvent(this,this.onBeforeChange,[])){
				dojo.stopEvent(evt);
				return;
			}

            if (checkbox) {
                // if(unieap.isUserStyle == true){
                //if(unieap.currentStyle == 'network'){
                if($(checkbox.inputNode).attr('checked')=='checked' || $(checkbox.inputNode).prop('checked')==true){
                    // $(checkbox.inputNode).parents('.u-form-chkGroup-tab').find(' .formImgSelect').removeClass('formImgSelected');
                    $(checkbox.inputNode).next('.formImgSelect').addClass('formImgSelected');
                    $(checkbox.inputNode).next('.formImgSelect').find('i').animate({opacity:1},300)
                }else {
                    $(checkbox.inputNode).next('.formImgSelect').removeClass('formImgSelected');
				}
                // }
                // }

            }


			this.getValidator().validate();
			this.fireDataChange();
			this.onChange(this.getValue());
		});
	 	dojo.style(modifiedNode,"display","none");
		checkbox.checkboxNode = checkboxNode;
		checkbox.modifiedNode = modifiedNode;
		checkbox.inputNode = inputNode;
		this.checkboxMap[inRowIndex] = checkbox;
		return checkbox;
	},
	
	/**
	 * @summary:
	 * 		设置复选按钮组的值，如果要设置多个值，请用复选分隔符（separator）进行区分
	 * @param:
	 * 		{string} value
	 * @example:
	 * |	unieap.byId("checkBoxGroup").setValue("China");
	 * |	unieap.byId("checkBoxGroup").setValue("China,England,German");
	 */
	setValue: function(value) {
		value = (value!=null ? String(value) : "").split(this.separator);	
		var mp = unieap.convertArrayToMap(value);
		var checkboxMap = this.checkboxMap;	
		var valueAttr = this.decoder?this.decoder.getValueAttr():this.getDecoder().getValueAttr();	

		for (var i=0, l = checkboxMap.length;i<l; i++) {
			checkboxMap[i].inputNode.checked = false;
			$(checkboxMap[i].inputNode).next('.formImgSelect').removeClass('formImgSelected');
			if(mp[this.dataProvider.getItemValue(valueAttr, i)]){
				checkboxMap[i].inputNode.checked = true;
				$(checkboxMap[i].inputNode).next('.formImgSelect').addClass('formImgSelected');
				$(checkboxMap[i].inputNode).next('.formImgSelect').find('i').animate({opacity:1},300)
			}
		}
		this.fireDataChange();
	},
	
	/**
	 * @summary:
	 * 		取得复选按钮组选中的值，如果选中了多个项，对应的值会用复选分隔符（separator）进行拼装
	 * @return:
	 * 		string
	 * @example:
	 * |	unieap.byId("checkBoxGroup").getValue();
	 */
	getValue: function() {
		var checkboxMap = this.checkboxMap;
		var value = [];
		for (var i=0; i<checkboxMap.length; i++) {
			if(checkboxMap[i].inputNode.checked){
				var valueAttr = this.decoder?this.decoder.getValueAttr():this.getDecoder().getValueAttr();
				value.push(this.dataProvider.getItemValue(valueAttr, i));
			}
		}
		return  value.join(this.separator);
	},
	
	/**
	 * @summary:
	 * 		取得复选按钮组未选中的值
	 * @return:
	 * 		string
	 */
	getUnCheckedValue: function() {
		var checkboxMap = this.checkboxMap;
		var value = [];
		for (var i=0; i<checkboxMap.length; i++) {
			if (!checkboxMap[i].inputNode.checked) {
				var valueAttr = this.decoder?this.decoder.getValueAttr():this.getDecoder().getValueAttr();
				value.push(this.dataProvider.getItemValue(valueAttr, i));
			}
		}
		return  value.join(this.separator);
	},
	
	/**
	 * @summary:
	 * 		取得全部选中按钮的标签值，以分隔符间隔
	 * @return:
	 * 		string
	 */
	getText: function() {
		var checkboxMap = this.checkboxMap;
		var text = [];
		for (var i=0; i<checkboxMap.length; i++) {
			if (checkboxMap[i].inputNode.checked) {
				text.push(this.getLabel(i));
			}
		}
		return  text.join(this.separator);
	},
	/**
	 * @summary:
	 * 		取得全部未选中按钮的标签值，以分隔符间隔
	 * @return:
	 * 		string
	 */
	getUnCheckedText: function() {
		var checkboxMap = this.checkboxMap;
		var text = [];
		for (var i=0; i<checkboxMap.length; i++) {
			if (!checkboxMap[i].inputNode.checked) {
				text.push(this.getLabel(i));
			}
		}
		return  text.join(this.separator);
	},
	
	/**
	 * @summary:
	 * 		设置组内某些CheckBox的选中状态
	 * @param:
	 * 		{boolean} bool
	 * @param:
	 * 		{array} items
	 * 		CheckBox序号数据 【注】CheckBox的序号从“0”开始
	 * @example:
	 * |	unieap.byId("checkBoxGroup").setChecked(true,[1]);
	 * |	unieap.byId("checkBoxGroup").setChecked(true,[0,1,4]);
	 */
	setChecked: function(bool, items) {
		if (!dojo.isArray(items)) {
			return;
		}		
		for(var i=0; i<items.length; i++) {
			var checkbox = this.checkboxMap[items[i]];
			checkbox.inputNode.checked=bool;
			if(bool){
                $(checkbox.inputNode).next('.formImgSelect').addClass('formImgSelected');
                $(checkbox.inputNode).next('.formImgSelect').find('i').animate({opacity:1},300)
            }else {
                $(checkbox.inputNode).next('.formImgSelect').removeClass('formImgSelected');
            }

		}
		this.fireDataChange();
	},
	
	/**
	 * @summary:
	 * 		复选按钮组反选
	 */
	checkReverse: function() {
		var checkboxMap = this.checkboxMap;
		for (var i=0; i<checkboxMap.length; i++) {
			var checkbox = checkboxMap[i];
			if(checkbox.inputNode.checked){
				checkbox.inputNode.checked = false;
			}else{
				checkbox.inputNode.checked = true;
			}
		}
		this.fireDataChange();
	},
	
	setNextFocusId: function(widgetId) {
		if(this.checkboxMap.length == 0) {
			this.nextFocusId = widgetId;
		} else {
			this.nextFocusId = this.checkboxMap[0].id;
			for(var i=0; i<this.checkboxMap.length; i++) {
				if (i != (this.checkboxMap.length-1)) {
					this.nextFocusId = this.checkboxMap[i+1].id;
				} else {
					this.nextFocusId = widgetId;
				}
			}
		}
	},

	isChecked: function() {
		var checkboxMap = this.checkboxMap;
		var value = [];
		for (var i=0; i<checkboxMap.length; i++) {
			if (checkboxMap[i].inputNode.checked) {
        		value.push('true');
			}else{
				value.push('false');
			}
		}
		return  value.join(this.separator);
	}
});
dojo.provide("unieap.form.RadioButtonGroup");
dojo.require("unieap.form.CheckGroup");

dojo.declare("unieap.form.RadioButtonGroup", unieap.form.CheckGroup,{

    /**
     * @declaredClass:
     * 		unieap.form.RadioButtonGroup
     * @summary:
     * 		单选按钮组
     * @superClass:
     * 		unieap.form.CheckBoxGroup
     * @example:
     * |<script type="text/javascript">
     * |	var city = new unieap.ds.DataStore('city_store', [
     * |		{CODEVALUE: 1,CODENAME: '浙江'},
     * |		{CODEVALUE: 2,CODENAME: '辽宁'},
     * |		{CODEVALUE: 3,CODENAME: '福建'},
     * |		{CODEVALUE: 4,CODENAME: '沈阳'},
     * |		{CODEVALUE: 5,CODENAME: '北京'},
     * |		{CODEVALUE: 6,CODENAME: '宁海'},
     * |		{CODEVALUE: 7,CODENAME: '宁波'},
     * |		{CODEVALUE: 8,CODENAME: '水车'},
     * |		{CODEVALUE: 15,CODENAME: '上园'},
     * |		{CODEVALUE: 16,CODENAME: '下园'}
     * |	]);
     * |	dataCenter.addDataStore(city);
     * |</script>
     * |<div id="RadioGroup"
     * |	cols="4"
     * |	labelAlign="left"
     * |	dojoType="unieap.form.RadioButtonGroup"
     * |	dataProvider="{'store':'city_store'}">
     * |</div>
     * @img:
     * 		images/form/radioboxgroup.png
     */


    getCheckBox: function(inRowIndex) {
        if(this.checkboxMap[inRowIndex]){
            return this.checkboxMap[inRowIndex];
        }
        var checkbox = {};
        var checkboxNode = document.createElement('div');
        checkboxNode.name = this.name || this.id;
        checkboxNode.className="u-form-rdoBtn";
        var modifiedNode = document.createElement('div');
        modifiedNode.className="u-form-modified";
        var inputNode = document.createElement('input');
        inputNode.className="u-form-chkInput";
        inputNode.type="radio";
        checkboxNode.appendChild(modifiedNode);
        checkboxNode.appendChild(inputNode);
        checkbox.getValue = dojo.hitch(this,function(){
            return this.getValue();
        });
        this.connect(inputNode,"onmousedown",function(evt){
            if(inputNode.checked) return;
            inputNode.checked = true;
            if(!unieap.fireEvent(this,this.onBeforeChange,[])){
                dojo.stopEvent(evt);
                return;

            }
            if (checkbox) {
                // if(unieap.isUserStyle == true){
                    //if(unieap.currentStyle == 'network'){
                    if($(checkbox.inputNode).attr('checked')=='checked' || $(checkbox.inputNode).prop('checked')==true){
                        $(checkbox.inputNode).parents('.u-form-chkGroup-tab').find('.formImgRadio').removeClass('formImgRadioed')
                        $(checkbox.inputNode).next('.formImgRadio').addClass('formImgRadioed')
                        $(checkbox.inputNode).next('.formImgRadio').find('i').animate({opacity:1},300)
                    }
                    // }
                // }
                this._onChange(checkbox);
            }
        });
        this.connect(inputNode,"onkeydown",function(evt){ //U_EAP00028253
            if(evt.keyCode == dojo.keys.ENTER || evt.keyCode == dojo.keys.SPACE){
                if(inputNode.checked) return;
                inputNode.checked = true;
                if(!unieap.fireEvent(this,this.onBeforeChange,[])){
                    dojo.stopEvent(evt);
                    return;

                }
                if (checkbox) {
                    // if(unieap.isUserStyle == true){
                        //if(unieap.currentStyle == 'network'){
                        if($(checkbox.inputNode).attr('checked')=='checked' ||$(checkbox.inputNode).prop('checked')==true){
                            $(checkbox.inputNode).parents('.u-form-chkGroup-tab').find('.formImgRadio').removeClass('formImgRadioed')
                            $(checkbox.inputNode).next('.formImgRadio').addClass('formImgRadioed')
                            $(checkbox.inputNode).next('.formImgRadio').find('i').animate({opacity:1},300)
                        }
                        //}
                    // }
                    this._onChange(checkbox);
                }
            }
        });
        dojo.style(modifiedNode,"display","none");
        checkbox.checkboxNode = checkboxNode;
        checkbox.modifiedNode = modifiedNode;
        checkbox.inputNode = inputNode;
        this.checkboxMap[inRowIndex] = checkbox;
        return checkbox;
    },

    /**
     * @summary:
     * 		设置单选按钮组的值
     * @param:
     * 		{string} value
     */
    setValue: function(value) {
//		value = value!=null ? String(value) : "";
        var checkboxMap = this.checkboxMap;		
        var valueAttr = this.decoder?this.decoder.getValueAttr():this.getDecoder().getValueAttr();
        for (var i=0, l = checkboxMap.length;i<l; i++) {
            if(this.dataProvider.getItemValue(valueAttr, i)==value){
                checkboxMap[i].inputNode.checked=true;
                checkboxMap[i].inputNode.nextSibling.classList.add("formImgRadioed");
            }else{
                checkboxMap[i].inputNode.checked=false;
                checkboxMap[i].inputNode.nextSibling.classList.remove("formImgRadioed");
            }
        }
        this.fireDataChange();
    },

    /**
     * @summary:
     * 		取得单选按钮组的值
     * @return:
     * 		string
     */
    getValue: function() {
        var checkboxMap = this.checkboxMap;
        for (var i=0; i<checkboxMap.length; i++) {
            if (checkboxMap[i].inputNode.checked) {
                var valueAttr = this.decoder?this.decoder.getValueAttr():this.getDecoder().getValueAttr();
                return this.dataProvider.getItemValue(valueAttr, i);
            }
        }
        return  "";
    },

    /**
     * @summary:
     * 		取得选中按钮的标签
     * @return:
     * 		string
     */
    getText: function(){
        var checkboxMap = this.checkboxMap;
        for (var i=0; i<checkboxMap.length; i++) {
            if (checkboxMap[i].inputNode.checked) {
                return this.getLabel(i);
            }
        }
        return  "";
    },

    _onChange: function(checkbox) {
        var checkboxMap = this.checkboxMap;
        for (var i=0; i<checkboxMap.length; i++) {
            if (checkboxMap[i] == checkbox) continue;
            checkboxMap[i].inputNode.checked = false;
        }
        //lht 点击选项字段不勾选
        // if(unieap.isUserStyle == true){
            //if(unieap.currentStyle == 'network'){
            if($(checkbox.inputNode).attr('checked')=='checked' || $(checkbox.inputNode).prop('checked')==true){
                $(checkbox.inputNode).parents('.u-form-chkGroup-tab').find('.formImgRadio').removeClass('formImgRadioed')
                $(checkbox.inputNode).next('.formImgRadio').addClass('formImgRadioed')
                $(checkbox.inputNode).next('.formImgRadio').find('i').animate({opacity:1},300)
            }
            // }
        // }
        //结束修改
        this.getValidator().validate();
        this.fireDataChange();
        this.onChange(checkbox);
    },



    /**
     * @summary:
     * 		设置选中RadioButton的状态
     * @param:
     * 		{boolean} bool
     * @param:
     * 		{number} item
     * 		RadioButton序号
     */
    setChecked: function(bool, item) {
        var checkbox = this.checkboxMap[item];

        //zhaohf,界面上以下的功能不好用，需要从这处理下
        try{
            for(var i in this.checkboxMap){
                var c = this.checkboxMap[i];
                c.inputNode.checked = false;
                c.inputNode.nextSibling.classList.remove("formImgRadioed");
                c.inputNode.nextSibling.children[0].style.opacity=0;
            }
            if(bool){
                checkbox.inputNode.nextSibling.classList.add("formImgRadioed");
                checkbox.inputNode.nextSibling.children[0].style.opacity=1;
            }
        }catch(e){

        }
        checkbox.inputNode.checked=bool;
        this.fireDataChange();
    }
});

dojo.provide("unieap.layout.Container");
dojo.require("unieap.util.util");
dojo.require("dijit._Widget");
(function(){
//容器管理器
var containerManager = new function(){
	var containers = [];
	this.getContainers = function(){
		return containers;
	}
	this.addContainer = function(container){
		containers.push(container);
	}
	this.removeContainer = function(container){
		for(var i=0;containers[i];i++){
			if(container == containers[i]){
				containers.splice(i,1);
				return;
			}
		}
	}
	this.getParent = function(container){
		//在文档流中查找此节点，如果不在文档流中返回-1，如果没有根节点返回null
		if(dojo.byId(container.id)==null){
			return -1; 
		}
		var node = container.domNode.parentNode,widget;
		while(node){
			if(node.getAttribute && (widget=dijit.byNode(node))){
				if(dojo.hasClass(node,"unieap-container")){
					return widget;
				}
			}
			node = node.parentNode;
		}
		return null;
	}
	this.getChildren = function(container){
		var chilren = [];
		for(var i=0;containers[i];i++){
			if(container==containers[i].getParent()){
				children.push(containers[i]);
			}
		}
		return children;
	}
	
}();
dojo.declare("unieap.layout.Container", dijit._Widget, {
	/**
     * @declaredClass:
     * 		unieap.layout.Container
     * @summary:
     * 		简单的容器组件，unieap的容器组件均继承自此类
     * @classDescription:
     *		本组件可以直接使用，可用作某些容器组件的父容器。
     *      可以控制容器的显示、隐藏以及大小，并会同时调整父子容器的显示状态和大小。
     * @example:
     * |<div dojoType="unieap.layout.Container" style='height:200px'>
     * |	<div dojoType="unieap.layout.TitlePane" style="width:100%">
     * |	</div>
     * |</div>
     */
    //配置属性接口
	UserInterfaces : {
		width : "string",
		height : "string",
		securityId : "string",
		id : "string",
		parentContainer : "string",
		"class" : "string",
		style : "string",
		postponeRender : "boolean",
		onContainerResize : "function"		
	},
	
	
	buildRendering : function(){
		// all widgets with descendants must set containerNode
		this.inherited(arguments);
		if(this.templateString==null){
			this.containerNode = this.domNode;
		}
	},
	
	postCreate:function(){
		if(this.declaredClass == 'unieap.layout.Container') {
			dojo.style(this.containerNode,{
				'position':'relative',
				'overflow':'hidden'
			});
		}
		this.initContainer();
	},
	
	//容器启动时会调用的方法
	startup : function() {
		//  if(!this.getParentContainer()) { //取消判断  在react外层的时候 判断出问题 2019-1-10  LD
			//最外层容器，需要监听window的变换
			this.bindEvent4onresize();
			//改变子容器
			this.resizeContainer();
		// }
	},
	
	/**
	 * @summary:
	 *		容器初始化是否延迟渲染
	 * @type:
	 *		{boolean}
	 * @default:
	 *		false
	 */
	postponeRender : false,
	
	/**
	 * @summary：
	 * 		设置容器的宽度
	 * @type：
	 * 		{string}
	 * @default：
	 * 		auto
	 */
	width : "auto",

	/**
	 * @summary：
	 * 		设置容器的高度
	 * @type：
	 * 		{string}
	 * @default：
	 * 		auto
	 */
	height : "auto",
	
	/**
	 * @summary:
	 *   权限id,控制显示或隐藏
	 * @type:
	 *   	{string}
     */
	securityId:'',
	
	/**
	 * @summary:
	 * 		父容器的id或者对象
	 * @type:
	 * 		{string | object}
	 */
	parentContainer : '',
	
	children : null,
	
	//进行容器的参数初始化，在容器的postCreate里面，需要调用该方法
	initContainer : function(){
		//给容器增加唯一的class定义，便于查找容器
		dojo.addClass(this.domNode,"unieap-container");
		this.connects = [];
		//设置宽度和高度
		this._setWidth(this.domNode.style.width || this.width);
		this._setHeight(this.domNode.style.height || this.height);
		this.connects.push(dojo.connect(this,"resizeContainer",this,"onContainerResize"));
	},
	
	//绑定onresize事件 ，如果没有_viewport的判断，页面切换也会触发onresize事件
	bindEvent4onresize: function() {
	
		this._viewport = dijit.getViewport();
		try{
			this.connects.push(dojo.connect(dojo.global, 'onresize', this, function(){
				var newViewport = dijit.getViewport();
				if(newViewport.w != this._viewport.w ||  newViewport.h != this._viewport.h){
					this._viewport = newViewport;
					this.resizeContainer();
				}
			}));
		}catch(e){}
		
	},
	
	
	//===========================容器调整============================
	/**
	 * @summary：
	 *		通知子容器和父容器调整其高度和宽度
	 * @description:
	 *		在容器的内部实现中，本容器大小发生变化时，会调用该方法以设置页面内相关容器的大小
	 *		用户也可以调用该方法，从而按照页面配置的原则，手动改变关联容器的大小
	 * @example:
	 * |unieap.byId("container").notifyResize()
	 */
	notifyResize : function(){
		this.resizeContainer();
		//通知父容器重新分配子容器大小
		unieap.notify(this.getParentContainer(),"notifyParentResize",this);
	},
	
	/**
	 * @summary：
	 *		通知本容器的子容器调整大小
	 * @example:
	 * |unieap.byId("container").resizeContainer()
	 */
	resizeContainer: function() {
		if(null==this.domNode) return;
		this.resizeChildrenContainer();
	},
	
    //重置子容器高度和宽度
	resizeChildrenContainer : function(){
		var children = this.getChildrenContainer();
		setTimeout(function(){
			for(var i=0,child;i<children.length;i++){
				child= children[i];
				unieap.notify(child,"resizeContainer");
			}
		},0);
	},
	
	//通知父容器重新分配子容器大小,自适应容器重载此方法重新分配各子容器宽高
	notifyParentResize : function(child){
		unieap.notify(this.getParentContainer(),"notifyParentResize",this);
	},
	
	/**
	 * @summary：
	 *   大小改变事件
	 * @description:
	 *   当本容器（例如：AdaptiveContainer、StackCOntainer和HBoxContainer）的大小发生变化的时候，会触发的事件 
	 * @example:
	 * |<div id="AdaptiveContainer" dojoType="unieap.layout.AdaptiveContainer">
	 * |	<div dojoType="unieap.layout.AdaptivePane">
	 * |		<div dojoType="unieap.layout.TitlePane" title="titlepane" >
	 * |			固定高度1
	 * |		</div>	
	 * |	</div>
	 * |	<div dojoType="unieap.layout.AdaptivePane" autoHeight="true" onContainerResize="heightChange">
	 * |		自适应内容
	 * |	</div>
	 * |	<div dojoType="unieap.layout.AdaptivePane">
	 * |		<div dojoType="unieap.layout.TitlePane" title="titlepane" >
	 * |			固定高度3
	 * |		</div>	
	 * |	</div>
	 * |</div>	
	 * |<script>
	 * |function heightChange(){
	 * |	if(this.isHidden())
	 * |		return ;
	 * |	alert("回调事件");
	 * |}
	 * |</script>
	 */
	onContainerResize : function(){},
	
    /*
	* @summary：
	*   	设置父容器对象id
	* @param：
	* 		{string} parentContainer
	*/
	setParentContainer : function(parentContainer){
		this.parentContainer = parentContainer;
	},
	
	/**
	 * @summary：
	 *		获取父容器对象
	 * @return :
	 *		{unieap.layout.Container} 容器对象
	 * @example:
	 * |var parent = unieap.byId("testContainer").getParentContainer();
	 * |alert(parent.domNode.offsetHeight);
	 */
	getParentContainer : function(){
		if(this.parentContainer){
			if(dojo.isString(this.parentContainer)){
				this.parentContainer = unieap.byId((this._rootID||"")+this.parentContainer);
			}
			return this.parentContainer;
		}
		var node = this.domNode.parentNode,widget = null;
		while(node ){
			if(node.getAttribute && (widget = dijit.byNode(node))){
				if(dojo.hasClass(node,"unieap-container")){
					break;
				}
			}
			node = node.parentNode;
		}
		return (this.parentContainer = widget);
	},
	
	/**
	 * @summary：
	 *   	显示本容器
	 * @description:
	 *   	在容器隐藏的情况下，调用本方法，能够将容器显示出来，并动态调整页面内其它容器组件的大小
	 * 		【注】该方法为父类的基本方法，具体的pane类容器请使用其对应container类的相关方法
	 * 		比如，需要显示某个隐藏的tabPane时，请使用TabContainer的showTab方法
	 * @example:
	 * |unieap.byId("container").show();
	 */
	show : function(){
		if(this.postponeRender){
			this.postponeRender = false;
			dojo.parser.parse(this.containerNode);
		}
		dojo.style(this.domNode,"display","block");
		this.notifyResize();
	},
	
	/**
	 * @summary：
	 *   	隐藏容器
	 * @description:
	 *   	在容器显示的情况下，调用本方法，能够将容器隐藏，并动态调整页面内其它容器组件的大小
	 * 		【注】该方法为父类的基本方法，具体的pane类容器请使用其对应container类的相关方法
	 * 		比如，需要隐藏某个tabPane时，请使用TabContainer的hideTab方法
	 * @example:
	 * |unieap.byId("container").hide();
	 */
	hide : function(){
		dojo.style(this.domNode,"display","none");
		this.notifyResize();
	},
	
	/**
	 * @summary:
	 *   	判断容器是否隐藏
	 * @description:
	 *   	返回值为容器是否处于隐藏状态
	 * @return 
	 *		{boolean}
	 * @example:
	 * |var hidden = unieap.byId("container").isHidden();
	 * |if(hidden){
	 * |		unieap.byId("container").show();
	 * |}
	 */
	isHidden : function(){
		return dojo.style(this.domNode,"display")=="none";
	},
	
	/**
	 * @summary:
	 *		获取本容器的直接子容器构成的数组
	 * @return:
	 * 		{array} 子容器数组对象
	 * @description:
	 *		在RIA的容器框架中，调用本方法可以得到指定容器的所有直接子容器
	 * @example:
	 * |var children = unieap.byId("parentContainer").getChildrenContainer();
	 * |for(var i=0;i<children[i];i++){
	 * |   alert(children[i].isHidden());	
	 * |}
	 */
	getChildrenContainer : function(){
		return unieap.getChildrenContainer(this.containerNode);
	},
	
	destroy : function(){
		//销毁事件绑定
		if(this.connects){
			while(this.connects.length){
				dojo.disconnect(this.connects.pop());
			}
		}
		var children = (this instanceof unieap.layout.Container) && this.containerNode ? dijit.findWidgets(this.containerNode) : [];
		dojo.forEach(children,function(widget){
			widget.destroy();
		});
		this.inherited(arguments);
	},
	_setWidth : function(width){
		this.width = width;
		dojo.style(this.domNode,"width",this._convertNumber(this.width));
	},
	
	/**
	 * @summary：
	 * 		设置容器的宽度
	 * @param：
	 * 		{string} width
	 * @description：
	 * 		用户可以动态的调整容器的宽度，可以是固定数值、百分比或auto
	 *      调用该方法将会动态调整页面内相关的容器组件的宽度
	 * @example:
	 * |unieap.byId("container").setWidth("300px");
	 */
	setWidth : function(width){
		this._setWidth(width);
		this.notifyResize();
	},
	_setHeight : function(height){
		this.height = height;
		dojo.style(this.domNode,"height",this._convertNumber(this.height));
	},
	/**
	 * @summary:
	 * 		设置容器的高度
	 * @param:
	 * 		{string} height
	 * @description:
	 * 		用户可以动态的调整高度，可以是固定数值、百分比或auto
	 *      调用该方法将会动态调整页面内相关的容器组件的高度
	 * @example:
	 * |unieap.byId("container").setHeight("800px");
	 */
	setHeight : function(height){
		this._setHeight(height);
		this.notifyResize();
	},
	
	//转换合法的数值
	_convertNumber : function(data){
		return data + ((isNaN(data)||data=="")?"" : "px");
	},
	
	/**
	 * @summary:
	 * 		获得container所有孩子节点(widget)
	 * @description:
	 *      调用该方法将返回本容器下的所有孩子容器节点
	 * @example:
	 * | var children = unieap.byId("container").getChildren();
	 */
	getChildren: function(){
		//上面buildRendering没走
		!this.containerNode && (this.containerNode = this.domNode);
		if(!this.containerNode) return [];
		this.children = dojo.query("> [widgetId]", this.containerNode).map(dijit.byNode);
		return this.children;
	},
	
	/**
	 * @summary:
	 * 		为container增加孩子节点
	 * @param:
	 * 		{object} widget 要增加的子容器widget
	 * @param:
	 * 		{number} insertIndex 子容器插入父容器位置的index
	 * @description:
	 *      调用该方法将在本容器下增加一个子容器节点
	 * @example:
	 * | var container = new unieap.layout.Container();
     * | var title = new unieap.layout.TitlePane({title:"自定义", height:"100px"});
     * | container.addChild(title);
     * | container.notifyResize();
	 */
	addChild: function(/*Widget*/ widget, /*int?*/ insertIndex){
		var refNode = this.containerNode;
		if(insertIndex && typeof insertIndex == "number"){
			var children = this.getChildren();
			if(children && children.length >= insertIndex){
				refNode = children[insertIndex-1].domNode;
				insertIndex = "after";
			}
		}
		dojo.place(widget.domNode, refNode, insertIndex);

		// If I've been started but the child widget hasn't been started,start it now.  
		if(this._started && !widget._started){
		
			widget.startup();
		}
	},
	
	/**
	 * @summary:
	 * 		移除container中指定孩子节点
	 * @param:
	 * 		{object | number} widget 要移除的子容器widget，输入参数支持index
	 * @description:
	 *      调用该方法将在本容器下移除一个子容器节点
	 * @example:
     * | var title = unieap.byId("title");
     * | container.removeChild(title);
     * | container.notifyResize();
	 */
	removeChild: function(/*Widget or int*/ widget){
		if(typeof widget == "number" && widget >= 0){
			widget = this.getChildren()[widget];
		}
		// If we cannot find the widget, just return
		if(!widget || !widget.domNode){ return; }
		
		var node = widget.domNode;
		node.parentNode.removeChild(node);	// detach but don't destroy
	},
	
	/**
	 * @summary:
	 * 		查找孩子节点在container中的位置(index)，没有找到返回-1
	 * @param:
	 * 		{object} child 要查找的子容器widget
	 * @return:
	 * 		{number} 子容器的index,没有找到返回-1
	 * @description:
	 *      调用该方法将在本容器下增加一个子容器节点
	 * @example:
     * | var title = unieap.byId("title");
     * | alert(container.getIndexOfChild(title));
	 */
	getIndexOfChild: function(/*Widget*/ child){
		var children = this.getChildren();
		for(var i=0, c; c=children[i]; i++){
			if(c == child){ 
				return i; // int
			}
		}
		return -1; // int
	},
	
	/**
	 * @summary:
	 * 		判断是container是否含有孩子节点
	 * @return:
	 * 		{boolean} container含有孩子节点返回true，否则返回false
	 * @description:
	 *      调用该方法将在本容器下增加一个子容器节点
	 * @example:
     * | alert(container.hasChildren());
	 */
	hasChildren: function(){
		return !!this.getChildren().length;
	}
});
})();
if (!dojo._hasResource["unieap.form.FieldSet"]) {
	dojo._hasResource["unieap.form.FieldSet"] = true;
	dojo.provide("unieap.form.FieldSet");
	dojo.require("unieap.layout.Container");
	dojo.require("dijit._Templated");

	dojo.declare("unieap.form.FieldSet", [unieap.layout.Container,dijit._Templated], {
				
		/**
		 * @declaredClass:
		 * 		unieap.form.FieldSet
		 * @summary:
		 * 		相当于HTML中fieldset标签
		 * @classDescription:
		 * 		FieldSet控件的高度值是随着FieldSet内容的增多而增大的,所以高度不必设置。
		 * @img:
		 * 		images/form/fieldset.png
		 * @example:
		 * |<div dojoType="unieap.form.FieldSet" id="fld" title="用户信息" open="true"></div>
		 * @example:
		 * |var fieldSet=unieap.byId('fld');
		 * |fld.setTitle('我改变了Title信息');
		 * |fld.toggle();
		 */
	
		//配置属性接口
		UserInterfaces : dojo.mixin({
			showIcon : "boolean",
			title : "string",
			description : "string",
			open : "boolean",
			flexible : "boolean",
			onBeforeToggle : "function",
			showTitle: "boolean",
			onToggle : "function"
		},
		unieap.layout.Container.prototype.UserInterfaces),
	
		templateString : "<div>" +
				"<fieldset class=\"u-form-fieldset\" dojoAttachPoint=\"rootNode\"><legend class=\"u-form-fieldset-legend\" style=\"-moz-user-select: none;\"  dojoAttachPoint=\"legendNode\">"
				+ "<span class=\"u-form-fieldset-btn\" dojoAttachEvent=\"onclick:_onToggle,onmouseover:_handleFocus,onmouseout:_handleFocus\" dojoAttachPoint=\"focusNode\">"
				+ "</span>"
				+ "<span dojoAttachPoint=\"titleNode\"></span>"
				+ "<span dojoAttachPoint=\"descNode\" ></span>"
				+ "</legend>"
				+ "<div class=\"u-form-fieldset-hiddenNode\">"
				+ "<div style=\"height: auto;\" dojoAttachPoint=\"containerNode\" >"
				+ "</div></div></fieldset></div>",
		
		/**
		 * @summary:
		 * 		设置是否显示FieldSet上的三角图标
		 * @type:
		 * 		{boolean}
		 */	
		showIcon:true,		
				
		
        /**
         * @summary:
         * 		设置FieldSet控件的文字信息,相当于HTML中legend的内容
         * @type:
         * 		{string}
         * @example:
         * 		在HTML标签中,可以这样书写
         * |<fieldset>
         * |	<legend>你好</legend>
         * |</fieldset>
         * @example:
         * 		在RIA中,这样书写:
         * |<div dojoType="unieap.form.FielSet" title="你好"></div>
         * 
         */
        title:'',
        
        /**
		 * @summary:
		 * 		设置是否显示FieldSet的提示信息
		 * @type:
		 * 		{boolean}
		 * @default:
		 * 		true
		 */	
        showTitle:(typeof(unieap.widget.form.showTitle) == 'undefined')?true:unieap.widget.form.showTitle,
		
		/**
		 * @summary:
		 * 		设置Title的附加信息,只有当控件处于关闭状态时才显示
		 * @description:
		 * 		例如设置了title为学生,可以设置description的属性为"姓名、年龄"等
		 * @type:
		 * 		{string}
		 * @example:
		 * |<div dojoType="unieap.form.FieldSet" title="学生" description="年龄:22,性别:男"></div>
		 */
		description:'',
		
		/**
		 * @summary:
		 * 		设置FieldSet控件的初始状态
		 * @description:
		 * 		如果open为true,FieldSet控件内的内容可见,否则不可见
		 * @type:
		 * 		{boolean}
		 * @default:
		 * 		true
		 * @example:
		 * |<div dojoType="unieap.form.FieldSet" open="false"></div>
		 * 		FieldSet控件处于关闭状态,里面的内容不可见
		 */
		open : true,
		
		
	    /**
	     * @summary:
	     * 		是否支持展开关闭
	     * @type：
	     * 		{boolean}
	     * @default：
	     * 		true
	     * @example：
	     * |	<div dojoType="unieap.layout.FieldSet" flexible="false">
	     * |	</div>
	     * 		此时FieldSeet不可关闭		
	     */	
		flexible:true,
		
		
		
		/**
		 * @summary:
		 * 		点击FieldSet控件上的按钮前触发
		 * @description:
		 * 		当方法返回为true时,点击FieldSet控件上的按钮,控件的状态将发生变化(展开或者关闭)。
		 * 		如果方法返回为false,控件的状态将保持不变
		 * @example:
		 * |function fn(){
		 * |	return false;
		 * |}
		 * |<div dojoType="unieap.form.FieldSet" onBeforeToggle="fn"></div>
		 * 		当点击FieldSet控件上的按钮时,控件还是处于展开状态
		 */
		onBeforeToggle:function(){
			return true;
		},
		
		//按钮点击事件
		_onToggle:function(evt){
			if(unieap.fireEvent(this,this.onBeforeToggle,[])&&this.flexible){
				unieap.fireEvent(this,this.onToggle,[])
				this.open = !this.open;
				this._setCss();
				this.notifyResize();
			}
		},
		
		/**
		 * @summary:
		 * 		点击FieldSet控件上的按钮时触发
		 * @param：
		 * 		{object} evt
		 */
		onToggle:function(evt){
		},
		
		startup : function() {
			!this.showTitle && (this.domNode.title="");
			this.title&&this.setTitle(this.title);
			!this.open&&this.description&&this.setDescription(this.description);
			//是否显示控件图标
			dojo.style(this.focusNode,"display",!this.showIcon?"none":"block");
			this._setCss();
			this.inherited(arguments);
		},


        /**
         * @summary:
         * 		展开或者关闭FieldSet控件
         * @description:
         * 		当FieldSet控件处于展开状态时调用本方法会关闭FieldSet控件,反之则展开FieldSet控件。
         * 		值得说明的是,如果控件的onBeforeToggle返回的是false或者flexible为false,调用本方法将无效
         * @example:
         * |var filedSet=unieap.byId('fieldSet');
         * |fieldSet.toggle();
         */
		toggle : function() {
			if(unieap.fireEvent(this,this.onBeforeToggle,[])&&this.flexible){
				this.open = !this.open;
				this._setCss();
				//U_EAP00029060
				this.notifyResize();
			}
		},

        //toggle按钮,改变fielset的状态
		_setCss : function() {
			if(this.open){
				dojo.removeClass(this.rootNode,'dijitClosed');
				dojo.addClass(this.rootNode,'dijitOpen');
				//dojo.style(this.rootNode,"borderWidth","1px 1px 1px 1px")
				this.setDescription('');
				this._setHeight(this.height);
				this.resizeContainer();
			}else{
				dojo.removeClass(this.rootNode,'dijitOpen');
				dojo.addClass(this.rootNode,'dijitClosed');
				//dojo.style(this.rootNode,"borderWidth","1px 0px 0px 0px")
				this.description&&this.setDescription(this.description);
				if(this.height!="auto"){
					//U_EAP00023102 自适应容器内放入fieldset，关闭再也展不开了
	    			var height = dojo.contentBox(this.legendNode).h ;
	    			dojo.style(this.rootNode,"height", height + "px");
	    			dojo.style(this.domNode,"height","auto");
				}
			}
		},

        //鼠标移动到按钮上的效果
		_handleFocus : function(evt) {
			if(evt.type=='mouseover'){
				dojo.addClass(this.legendNode,'u-form-fieldset-mouseover');
			}else{
				dojo.removeClass(this.legendNode,'u-form-fieldset-mouseover');
			}

		},

		/**
		 * @summary:
		 * 		设置FieldSet控件的文字信息,相当于HTML中legend的内容
		 * @param:
		 * 		{string} title
		 * @example:
		 * |unieap.byId('fldSet').setTitle('我改变了');
		 */
		setTitle : function(title) {
			if(title==""||title==null||typeof(title)==undefined){
				dojo.removeClass(this.titleNode,"u-form-fieldset-label");
			}
			this.titleNode.innerHTML=title;
			this.title = title;
			dojo.attr(this.domNode,'title','');
			dojo.addClass(this.titleNode,"u-form-fieldset-label")
		},
		
		/**
		 * @summary:
		 * 		设置Title属性的附件信息
		 * @param:
		 * 		{string} desc
		 * @example:
		 * |unieap.byId("fldSet").setDescription("<b>hi</b>");
		 */
		setDescription:function(desc){
			if(desc==""||desc==null||typeof(desc)==undefined){
				dojo.removeClass(this.descNode,"u-form-fieldset-desc");
			}
			this.descNode.innerHTML=desc;
			dojo.addClass(this.descNode,"u-form-fieldset-desc")
		},
		
		/**
		 * @summary:
		 * 		设置图标是否显示
		 * @param {Object} value
		 * @example:
		 * |unieap.byId("fldSet").toggleIcon("true");
		 */
		toggleIcon:function(value){
			this.showIcon = value;
			if(!this.showIcon){
				this.focusNode.style.display = "none";
			}else{
				this.focusNode.style.display = "block";
			}
		},
		
		resizeContainer : function(){
			//隐藏的时候不显示
    		if(null==this.domNode|| 0 == this.domNode.offsetHeight) return;
    		if(this.open){
    			if(this.height!="auto"){
    				if( dojo.contentBox(this.domNode).h > 9){
    					var height = dojo.contentBox(this.domNode).h - 2-10;
    					if(dojo.isIE){
    						dojo.style(this.rootNode,"height", height + "px");
    					}
    					height = height - dojo.contentBox(this.legendNode).h-8;
    					(height < 0) && (height = 0);
    					dojo.style(this.containerNode,"height", height + "px");
    				}
    			}
    			this.resizeChildrenContainer();
    		}
		}
	});
}
dojo.provide("unieap.dialog.DialogUtil");
/*
dojo.declare("unieap.dialog.DialogUtil",[dijit._Widget, dijit._Templated],{
/**
 * @summary:
 *      对话框组件的辅助工具类
 * @classDescription:
 *     提供了对对话框组件的辅助方法类
 *     在页面引入该文件后，会创建一个DialogUtil对象，以后的对话框操作可以借用该类进行实现
 *     在主页面引用该文件且主框架非frameset结构的话，若页面内容通过链接确定，能够实现对话框在最外层的页面进行显示
 * @declaredClass:
 *		unieap.dialog.DialogUtil
 */

(function(){
	if(typeof this["DialogUtil"] == "undefined") {
		//在页面引入该文件后，会创建的一个对象
		this.DialogUtil = {};
		//存储对话框引用的数组
	    //this.DialogUtil.dialogs = [];
	}
	
	DialogUtil = {
		//存放打开的dialog堆栈，dialog可以一层一层地弹出
		dialogs : [],
		//社保需求，可以同时打开多个dialog，相互之间没有调用关系，自己控制dialog
		//在hndlDlgs中的dialog不会放入dialogs中
		hndlDlgs: [],
		
		/**
		 * @summary:
		 *        创建并显示一个对话框
		 * @param 
		 *         {object} config  对话框的配置信息
		 * @param 
		 *         {domNode} srcElement  渐入渐出效果的起始终结元素
		 * @param 
		 *         {object} handle  任意形式的对象，标识用户控制的dialog，由用户自己维护
		 * @return 
		 *         {unieap.dialog.Dialog}
		 * @description:
		 *         创建对话框并显示
		 *         如对话框的内容不是通过inner确定的，而是指向一个url并且最外层框架不是frameset，将会试图在最外层上创建此对话框
		 *         如果对话框的内容是通过inner方式确定的，只能在当前帧上创建对话框，此时拖拽时只能限于当前帧的区域
		 *         会将产生的对话框组件作为返回值
		 * @example:
		 * |var dialog = DialogUtil.showDialog({
		 * |	inner: "Hello World!",
		 * |	title:"Hello World!",
		 * |	height:"200",
		 * |	width:"200"
		 * |}, document.getElementById("sourceNode"));
		 *         
		 */
		showDialog: function(config,srcElement,handle) {
			/*
			 * 为事业部扩展提供切入点，不要删除
			 */
			config = this._config_show_ex(config,srcElement);
			
			var dialog = null,
				topWin = unieap.getTopWin();
			if (topWin.DialogUtil&&config["inner"]==null&&topWin.document.getElementsByTagName("frameset").length==0 && !window.opener) {
				dialog = topWin.DialogUtil.createDialog(config,handle);
			} else {
				dialog = this.createDialog(config,handle);
			}
			if (srcElement) {
				dialog.show(srcElement);
			} else {
				dialog.show();
			}
			return dialog;
		},
		   
		_config_show_ex: function(config, srcElement) {
			return config;
		},
	 
		/**
	     * @summary:
	     *     创建一个对话框
	     * @param 
	     *       {object} config  该对话框的配置参数
	     * @param 
	     *       {object} handle  任意形式的对象，标识用户控制的dialog，由用户自己维护
	     *  @return
	     *       {unieap.dialog.Dialog}
	     * @description:
	     *      创建一个对话框，不进行显示，需要用户手动调用Dialog的show方法进行显示
	     *      如对话框的内容不是通过inner确定的，而是指向一个url并且最外层框架不是frameset，将会试图在最外层上创建此对话框
		 *      如果对话框的内容是通过inner方式确定的，只能在当前帧上创建对话框，此时拖拽时只能限于当前帧的区域
		 *      会将产生的对话框组件作为返回值
		 * 	@example:
		 * |var dialog = DialogUtil.createDialog({
		 * |	inner: "Hello World!",
		 * |	title:"Hello World!",
		 * |	height:"200",
		 * |	width:"200"
		 * |});
		 * |dialog.show();
	     */
		createDialog: function(config,handle) {
			/*
			 * 为事业部扩展提供切入点，不要删除
			 */
			config = this._config_create_ex(config);
				
			var context = null,
				topWin = unieap.getTopWin();
			if(topWin.DialogUtil&&config["inner"]==null&&topWin.document.getElementsByTagName("frameset").length==0&& !window.opener){
				context = topWin;
			}else{
				context  = window;
			}
			dojo.require("unieap.dialog.Dialog");
			var dialog=	new context.unieap.dialog.Dialog(config);
			if (handle) {
				context.DialogUtil.hndlDlgs.push({hnd:handle,dlg:dialog});
				var idx = -1;
				for (i in context.DialogUtil.dialogs) {
					if (context.DialogUtil.dialogs[i]==dialog) {
						idx=i;
						break;
					}
				}
				if (idx!=-1)
					context.DialogUtil.removeDialog(idx);
			}
			return dialog;
		},
		
		_config_create_ex: function(config) {
			return config;
		},
		
		//在dialog数组中，添加某一对象，在对话框新建的时候会调用
		addDialog: function(dialog) {
			if (unieap.getDialog(dialog))
				return;
			if (this.dialogs) {
				this.dialogs.push(dialog);
			}
		},
		
		//得到对话框数组
		getDialogs: function() {
			return this.dialogs;
		},
	
		//在dialog数组中，移除某一对象，在对话框关闭的时候会调用
		removeDialog: function(idx) {
			if (typeof idx=="number") {
				this.dialogs.splice(idx,1);
			} else {
				var handle = idx,i=-1;
				for(el in this.hndlDlgs) {
					if (this.hndlDlgs[el].hnd==handle||this.hndlDlgs[el].dlg==handle) {
						i = el;
						break;
					}
				}
				if (i!=-1) {
					this.hndlDlgs.splice(Number(i), 1);
				}
			}	
		},
	
		//得到最上层的对话框
		getDialog: function(handle){
			if (handle) {
				for(el in this.hndlDlgs) {
					if (this.hndlDlgs[el].hnd==handle||this.hndlDlgs[el].dlg==handle)
						return this.hndlDlgs[el].dlg;
				}
				return null;
			}
			var dialogDom = DialogUtil.getDialogs();
		    if (dialogDom == null) {
				return null;
			}
			var l = dialogDom.length - 1;
			if (l >= 0) {
				for(var i=l;i>=0 ;i--) {
					var diaObj = dialogDom[i];
					if(diaObj != null) {
						return diaObj;
					}
				}
			}
		}
}
})();

if(!dojo._hasResource["unieap.progressbar.ProgressBar"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["unieap.progressbar.ProgressBar"] = true;
dojo.provide("unieap.progressbar.ProgressBar");

dojo.require("dojo.fx");
dojo.require("dojo.number");

dojo.require("dijit._Widget");
dojo.require("dijit._Templated");
dojo.require("dijit.ProgressBar");

dojo.declare("unieap.progressbar.ProgressBar", [dijit.ProgressBar], {
	/**
	 * @declaredClass:
	 * 		unieap.progressbar.ProgressBar
	 * @summary:
	 * 		进度条控件
	 * @example:
	 * |<div dojoType="unieap.progressbar.ProgressBar"
	 * |	progress="..." maximum="...">
	 * |</div>
	 */
	 
	 /**
	  * @summary:
	  * 	进度值
	  * @type:
	  * 	{number}
	  * @default:
	  * 	0
	  */
	 progress: "0",
	 
	 /**
	  * @summary:
	  * 	最大进度值
	  * @type:
	  * 	{number}
	  * @default:
	  * 	100
	  */
	 maximum: 100,
	 
	 /**
	  * @summary:
	  * 	含混模式
	  * @type:
	  * 	{boolean}
	  * @default:
	  * 	false
	  * @description:
	  * 	此属性为true时，进度条不显示具体的进度
	  */
	 indeterminate: false,
	 
	 /**
	  * @summary:
	  * 	设置控件的高度,支持数字或者百分比
	  * @type:
	  * 	{number|string}
	  */
	 height: "",
	 
	 /**
	  * @summary:
	  * 	设置控件的高度,支持数字或者百分比
	  * @type:
	  * 	{number|string}
	  */
	 width: "",
	 
	 places: 0,
	 
	 /**
	  * @summary:
	  * 	更新进度条
	  * @type:
	  * 	{object}
	  * @example:
	  * |	var doupdate = function(complete) {
	  * |		unieap.byId("progressBar1").update({progress:complete});
	  * |		if (complete<100) {
	  * |			var i=complete+1;
	  * |			setTimeout("doupdate("+i+")", 100);
	  * |		}
	  * |	}
	  * |	doupdate(1);
	  */
	 update: function(attributes) {
	 	this.inherited(arguments);
	 },
	 
	 postCreate:function(){
		this.inherited(arguments);
		this.height&&dojo.style(this.domNode,"height",this.height);
		this.width&&dojo.style(this.domNode,"width",this.width);
	 }

});
}

dojo.provide("unieap.form.CurrencyTextBox")
dojo.require("unieap.form.NumberTextBox");
dojo.declare("unieap.form.CurrencyTextBox",unieap.form.NumberTextBox,{
	/**
	 * @declaredClass:
	 * 		unieap.form.CurrencyTextBox
	 * @superClass:
	 * 		unieap.form.NumberTextBox
	 * @summary:
	 * 		金额输入框,只能输入数字和小数点。
	 * @description:
	 * 		在默认情况下,金额输入框会对输入的字符进行及时校验,您可以设置validator="{realTime:false}"来关闭。
	 * 		关闭后,只有在金额输入框失去焦点时才进行校验
	 * 
	 */
	
	
	UserInterfaces : dojo.mixin({
	},
	unieap.form.NumberTextBox.prototype.UserInterfaces),
	
	displayFormatterClass:'unieap.form.CurrencyDisplayFormatter',
	
	validatorClass:'unieap.form.NumberTextBoxValidator',
	
	inputFilter : {filterRule:/[\.\d]/},
	
	_currencyOrginValue:"",//记录金额四舍五入之前得值
	_beforeToChinaNum:"",//记录中文大写之前得数值，这样避免了中文-->数字的转变过程
	_chinaNum:"",//记录中文大写用于输出
	
	postMixInProperties:function(){
		this.inherited(arguments);
		this.scale = "2";//sacle必须是2，不可以修改
		!this.displayFormatter&&(this.displayFormatter={		
			dataFormat:"#,000.00"
		});
	},
	
	postCreate:function(){
		this.inherited(arguments);
	},
	
	//获得中文大写的方法
	getChinaNum:function(){
		if(this._isCHNFormatter()){
			return this._chinaNum;
		}else{
			return this.displayFormatter._numberToChinaType(Math.round(this._currencyOrginValue * Math.pow(10, 2))/Math.pow(10, 2));
		}
	},
	
	//getValue()方法
	getValue : function(){
		//金额控件getValue()获得的是四舍五入之前得值
		var currencyOrginValue = this._currencyOrginValue;
		var value;
		var formatFlag = false;
		var realValue = this._currencyOrginValue == ""?this.getText():this._currencyOrginValue;
		if(this._isCHNFormatter()){
			if(currencyOrginValue !== '' && realValue == this.getDisplayFormatter().format(currencyOrginValue)){
				formatFlag = true;
				value = currencyOrginValue ;
			}else{
				value = realValue;
			}
		}else{
			value = realValue;
		}
		value = this.getDisplayFormatter().parse(value);
		value = this.getValueFormatter().parse(value);
		if(value!=''&& value!=null && !formatFlag){
			value = Number(value);
			if(isNaN(value)){
				this.setValue('');
				this.focus();
				return '';
			}
			return value;
		}
		else
			return value;
	},
	
	_isCHNFormatter:function(){
		if(this.displayFormatter.dataFormat == "CHN"){
			return true;
		}
		return false;
	},
	
	//执行inputNode的onchange事件
	_onKeyUp:function(evt){
		var isValid = this._lengthCheck();
		if(!isValid){
			 this.focusNode.value=this._subString(this.focusNode.value,this.maxLength);
		}
		this._currencyOrginValue = this.focusNode.value;
		//如果realTime为true则进行及时校验
		var validator=this.getValidator();
		//延时校验
		validator.realTime&&this._job(validator,"validate");
		unieap.fireEvent(this,this.onKeyUp,[evt]);
	},
	
	_cancelHeadZero:function(value){
		if(value=="" || value==null){
			return "";
		}
		if(Number(value) == 0){
			return "0.00";
		}
		if(value.startWith("0") && value.indexOf(".")!=1){
			value = value.substring(1,value.length);
			return this._cancelHeadZero(value);
		}else{
			return value;
		}
	},
	
	_onBlur:function(evt){
		if (!evt||typeof(evt)=="string")  return ;
		var value = this._currencyOrginValue == ""?this.getText():this._currencyOrginValue,
		nowValue=value;
		value = this.getEditFormatter().parse(value);
		value = this.getDisplayFormatter().format(value);
		if(!this._isCHNFormatter()){
			value = this._cancelHeadZero(value);
		}
		this.inputNode.value = value;
		//失去焦点时进行校验
//		//如果只读，不校验
		!this.readOnly && this.getValidator().validate();
//		this.fireDataChange();
//		this._showPromptMsg(false);
		unieap.fireEvent(this,this.onBlur,[evt]);
	},
	
	//仿照textbox的onfocus事件
	_onFocus:function(evt){
		if (!evt||typeof(evt)=="string")  return ;
		var validator=this.getValidator();

		if (!unieap.widget.form.alwaysShowErrMssage) { 
		  validator.handleError&&validator.handleError(true);
		}
		var value = this._currencyOrginValue == ""?this.getText():this._currencyOrginValue;
		if( value != ""){
			if(!this._isCHNFormatter()){
				value = this.getDisplayFormatter().parse(value);
				value = this.getEditFormatter().format(value);
				if(this.inputNode.value!=value){
					this.inputNode.value = value;
				}
				this._showPromptMsg(true);
			}else{
				this.inputNode.value=this._currencyOrginValue;
			}
			//显示promptMsg信息
			this.select();
		}
		
		unieap.fireEvent(this,this.onFocus,[evt]);
	}

});
dojo.provide("unieap.form.CurrencyDisplayFormatter");
dojo.require("unieap.form.NumberDisplayFormatter");

dojo.declare("unieap.form.CurrencyDisplayFormatter", unieap.form.NumberDisplayFormatter, {
	
	/**
	 * @summary:
	 * 		格式化字符串
	 * @type:
	 * 		{string}
	 * @description:
	 * 		数字格式化字符串，默认是#,000.00，数值逗号分隔，可以设置成CHN，表示大写中文显示
	 * @example:
	 * |<div dojoType="unieap.form.CurrencyTextBox" value="1234567.8910" displayFormatter="{dataFormat:'CHN'}"></div>
	 * @img:
     * 		images/form/currency.png
	 */
	dataFormat:"#,000.00",
	
	constructor: function(params){
		dojo.mixin(this, params);
	},
		
    format: function(value){
    	var dataType = "";
    	if(this.dataType){
    		dojo.require("unieap.util.util");
			dataType = unieap.getDataType(this.dataType);
    	}
    	else{
    		//如果不在form中使用，不存在getbinding方法
    		if(this.widget.getBinding){
	    		var binding = this.widget.getBinding();
		    	if(binding){
		    		dataType = binding.getDataType();
		    	}
    		}
    	}
    	var widget = this.widget;
    	//isNaN("")返回的是false,isNaN("333")返回的也是false,isNaN('char')为true
    	if(!isNaN(value)&&value!==""){
    		if(this.dataFormat == "CHN"){
    			if(widget.declaredClass=="unieap.form.CurrencyTextBox"){
		    		widget._currencyOrginValue = value;
		    		value = Math.round(value * Math.pow(10, 2))/Math.pow(10, 2);//四舍五入处理
		    		value = value.toString();
		    		value = this._manageMmaximum(widget,value);
		    		widget._beforeToChinaNum = value;
		    		value = widget._chinaNum = this._numberToChinaType(value);
		    	}else{//grid可编辑状态需要format时就不需要保留初始值了
		    		value = Math.round(value * Math.pow(10, 2))/Math.pow(10, 2);//四舍五入处理
					value = value.toString();
					value = this._manageMmaximum(widget,value);
		    		value = widget._chinaNum = this._numberToChinaType(value);
		    	}
    		}else{
    			if(widget.declaredClass=="unieap.form.CurrencyTextBox"){
    				widget._currencyOrginValue = value;
				}
				if(this.dataFormat === '#,000.00'  ){//判断如果value小于 1的时候改变format  避免出现 000.30这种情况 LD
					this.dataFormat = '#,###.00'
				}
	    		value = this.dataFormat ? dojo.number.format(value, {
					pattern: this.dataFormat
				}) : value;
	    	}
    	}else{
    		widget._currencyOrginValue = "";
    	}
    	
		return value;		
    },
    
    _manageMmaximum:function(widget,value){
    	var eindex = value.indexOf("e+");
    	if(eindex>-1){//处理最大长度,过长的话就0，数值计算只能是16位数字，模仿dojo.number
			value = Math.round(value.substring(0,eindex) * Math.pow(10, 2))/Math.pow(10, 2);
			widget._currencyOrginValue = value;
		}
		return value;
    },
    
    
    _numberToChinaType:function(number,isBigPart){
    	var numberValue;
    	if(number<1){
    		numberValue = new String(number * Math.pow(10, 2));
    	}else{
    		numberValue=new String(number);
    		var decimalNum = numberValue.indexOf('.');
    		if(decimalNum==-1 && (typeof(isBigPart)=="undefined" || isBigPart==true)){
    			numberValue = numberValue + "00";
    		}else if(decimalNum>-1 && decimalNum == numberValue.length-2){
    			numberValue = numberValue.replace('.','')+"0";
    		}else if(decimalNum>-1 && decimalNum == numberValue.length-3){
    			numberValue = numberValue.replace('.','');
    		}
    	}
		var chineseValue=""; // 转换后的汉字金额
		var String1 = "零壹贰叁肆伍陆柒捌玖"; // 汉字数字
		var String2 = "万仟佰拾亿仟佰拾万仟佰拾元角分"; // 对应单位
		var len=numberValue.length; // numberValue 的字符串长度
		var Ch1; // 数字的汉语读法
		var Ch2; // 数字位的汉字读法
		var nZero=0; // 用来计算连续的零值的个数
		var String3; // 指定位置的数值
		if(len>14){
			chineseValue = this._numberToChinaType(numberValue.substring(0,len-14),true)+this._numberToChinaType(numberValue.substring(len-14,len),false);
			return chineseValue;
		}
		if (numberValue==0){
			chineseValue = "零元整";
			return chineseValue;
		}
		String2 = String2.substr(String2.length-len, len); // 取出对应位数的STRING2的值
		for(var i=0; i<len; i++){
			String3 = parseInt(numberValue.substr(i, 1),10); // 取出需转换的某一位的值
			if ( i != (len - 3) && i != (len - 7) && i != (len - 11) && i !=(len - 15) ){
				if ( String3 == 0 ){
					Ch1 = "";
					Ch2 = "";
					nZero = nZero + 1;
				}
				else if ( String3 != 0 && nZero != 0 ){
					Ch1 = "零" + String1.substr(String3, 1);
					Ch2 = String2.substr(i, 1);
					nZero = 0;
				}
				else{
					Ch1 = String1.substr(String3, 1);
					Ch2 = String2.substr(i, 1);
					nZero = 0;
				}
			}
			else{ // 该位是万亿，亿，万，元位等关键位
				if( String3 != 0 && nZero != 0 ){
					Ch1 = "零" + String1.substr(String3, 1);
					Ch2 = String2.substr(i, 1);
					nZero = 0;
				}
				else if ( String3 != 0 && nZero == 0 ){
					Ch1 = String1.substr(String3, 1);
					Ch2 = String2.substr(i, 1);
					nZero = 0;
				}
				else if( String3 == 0 && nZero >= 3 ){
					Ch1 = "";
					Ch2 = "";
					nZero = nZero + 1;
				}
				else{
					Ch1 = "";
					Ch2 = String2.substr(i, 1);
					nZero = nZero + 1;
				}
				if( i == (len - 11) || i == (len - 3)){ // 如果该位是亿位或元位，则必须写上
					if(isBigPart){
						Ch2 = "万";
					}else{
						Ch2 = String2.substr(i, 1);
					}
				}
			}
			chineseValue = chineseValue + Ch1 + Ch2;
		}
		if ( String3 == 0 && !isBigPart ){ // 最后一位（分）为0时，加上“整”
			chineseValue = chineseValue + "整";
		}
		return chineseValue;
	}
});
dojo.provide("unieap.form.ComboBoxLocation");
dojo.require("unieap.form.ComboBox");
dojo.declare("unieap.form.ComboBoxLocation", unieap.form.ComboBox, {
	/**
	 * @declaredClass:
	 * 		unieap.form.ComboBoxLocation
	 * @superClass:
	 * 		unieap.form.ComboBox
	 * @summary:
	 * 		地点选择控件
	 * @classDescription：
	 * 		1.支持的数据源包括unieap.ds.DataStore。
	 *		2.输入框支持模糊匹配，支持拼音首字母查询。
	 * @img:
	 * 		images/form/comboboxlocation.png
	 */
	 
	// 用户属性配置接口
	UserInterfaces: dojo.mixin(
		{
		},
		unieap.form.ComboBox.prototype.UserInterfaces),

	postMixInProperties: function() {
		this.inherited(arguments);
		this.popupClass = "unieap.form.ComboBoxLocationPopup";
	},
	
	postCreate: function() {
		this.inherited(arguments);
		dojo.addClass(this.iconNode, "u-form-combobox-icon-location");
		this.getDataFilter().spellAttr = "py";
	},
	
	//改变了不同于combobox的匹配模式，只匹配首个汉字
	_getItemsByValue:function(value){
		var dataFilter = this.getDataFilter();
//		var reg = dataFilter.ignoreCase?new RegExp("^.*["+charNum+"].*$","i"):new RegExp("^.*["+charNum+"].*$");
		var reg = new RegExp("^"+value+".*$","i");//头部匹配只支持第一个字母匹配
		var filter = {};
			if (dataFilter.searchAttr) {
				dataFilter.searchAttr = [].concat(dataFilter.searchAttr);
				for(var i=0,l=dataFilter.searchAttr.length; i<l; i++){
					filter[dataFilter.searchAttr[i]] = reg;
				}
			}
		var items = dataFilter.doFilter(this.getPopup()._initItems, filter, "include", "||");
		return items;
		
	},
	
	// inner event handler
	_onIconClick: function(evt) {
		if(!(this.readOnly&&unieap.global.combobox_notReadonlyPopup)&&!this.disabled&& unieap.fireEvent(this, this.onBeforeIconClick,[evt])) {
			unieap.fireEvent(this, this.onIconClick,[evt])
			var popup=this.getPopup();
			if (popup.isOpen()) {
				popup.close();
			} else {
				var items = this.getDataProvider().items;
				//当没有数据时不应弹出
				if(items.length && items.length > 0){
					popup.open(items, this._getSelectedItems(items), this._onPopupClose, true);
				}
			}
			this._keyPressed = true;
			this._hasBlur = false;
		}else{
			if(evt) dojo.stopEvent(evt);
		}
	}
	
});

dojo.provide("unieap.form.ComboBoxLocationPopup");
dojo.require("unieap.form.Popup");
dojo.require("unieap.global")
dojo.declare("unieap.form.ComboBoxLocationPopup", unieap.form.Popup, {
	
	templateString: 
		"<div class='u-comboboxloaction-list' dojoAttachPoint='listNode,popupcontainer,containerNode'>"+		
			"<div class='u-comboboxloaction-list-tip' dojoAttachPoint='listTipNode'>"+
				"<span dojoAttachPoint='tipSpanNode'></span>"+
				"<a class='u-comboboxloaction-list-close' dojoAttachPoint='tipCloseNode'></a>"+
			"</div>"+	
			"<div class='u-comboboxloaction-list-header' dojoAttachPoint='listHeaderNode'>"+
			"</div>"+
			"<div class='u-comboboxloaction-list-container' dojoAttachPoint='listContainerNode,focusNode'>"+
			"</div>"+
			"<div class='u-comboboxloaction-list-footer' dojoAttachPoint='listFooterNode'>"+
			"</div>"+
		"</div>",
	
	/**
	 * @summary:
	 * 		指定下拉框的高度
	 * @type：
	 * 		{number}
	 * @default:
	 * 		0
	 */
	height: "auto",
	
	width :"",//宽度一定
	
	_width :"342px",	
	
	_optionSize:5,//初始每行5个数据
	
	_previousPageState : false,//前一页状态标识符
	
	_nextPageState : false,//后一页转台标识符
	
	postMixInProperties: function() {
		this.inherited(arguments);
		dojo.require("unieap.form.ComboBoxLocationPopupList");
		dojo.mixin(this, unieap.form.ComboBoxLocationPopup.list);
	},
	postCreate: function() {
		this.inherited(arguments);
		this.width = this._width;
		this.optionSize = this._optionSize;
		this.connect(this.focusNode, "onmouseover", "_onMouseOver");
		this.connect(this.focusNode, "onmouseout", "_onMouseOut");
	},
	
	onSelect: function(item, widget) {
	},
	
	/**
	 * @summary:
	 * 		打开弹出框
	 * @example:
	 * |var city = unieap.byId('city');
	 * |city.getPopup().open();
	 * 如果下拉框处于关闭状态，则打开下拉框
	 * 
	 */
	open: function(items, selection, callback, unIconClick) {
		if(!this.widget._canPopOpen()){
			return;
		}
		if (!dojo.isArray(items)) {
			items = this.widget.getDataProvider().getItems();
			if (!dojo.isArray(items) || items.length==0)
				return;
		}
		
		if (this.pageSize == 0) return;
		if (this.pageSize > 0) {
			items = items.slice(0, this.pageSize);
		}
		
		if (selection) {
			this._selection = dojo.isArray(selection)?selection:[];
		} else {
			this._updateSelection();
		}
		this._callback = callback || this.widget._onPopupClose;
		this._highlighted = null;
		
		if (this.structure == null) {
			this._createStructure();
		}
		
		this._createPopup(items, this.structure,unIconClick);
		this.inherited(arguments);
	},
	
	_headerOnClick:function(evt){
		this._onStatePageNum = 1;
		var t = evt.target || evt.srcElement;
		var charNum = t.charNum;
		dojo.addClass(evt.target,"u-comboboxloaction-list-header-click");
		
		var dataFilter = this.widget.getDataFilter();
//		var reg = dataFilter.ignoreCase?new RegExp("^.*["+charNum+"].*$","i"):new RegExp("^.*["+charNum+"].*$");
		var reg = new RegExp("^["+charNum+"].*$","i");//头部匹配只支持第一个字母匹配
		var filter = {};
			if (dataFilter.searchAttr) {
				dataFilter.searchAttr = [].concat(dataFilter.searchAttr);
				for(var i=0,l=dataFilter.searchAttr.length; i<l; i++){
					filter[dataFilter.searchAttr[i]] = reg;
				}
			}
		var items = dataFilter.doFilter(this._initItems, filter, "include", "||");
		this._items = items;
		this._pageNum = Math.ceil(items.length/(this.optionSize*this._initRowNum));
		this._doCreateOptions(items);
		this._createFooter();
	},
	
	_createStructure: function() {
		var d = this.widget.getDecoder();
		if (this.displayStyle=="table") {
			// table的默认展现方式
			this.structure = {
				rows: [
					{title:RIA_I18N.form.combobox.codeValue,field:d.valueAttr,width:'30%'},
					{title:RIA_I18N.form.combobox.codeName,field:d.displayAttr,width:'70%'}
				]
			}
		} else {
			this.structure = {
				rows: [
					{field: d.displayAttr}
				]
			}
		}
		return this.structure;
	},
	
	_onClick: function(evt) {
		var t = evt.target || evt.srcElement;
		var isItem = true;
		while (!t.item) {
			t = t.parentNode;
			if (t === this.listNode) {
				isItem = false;
				break;
			}
		}
		isItem && this._onSelect(evt, t);
	},
	
	/**
	 * @summary:
	 * 		关闭弹出框
	 * @example:
	 * |var city = unieap.byId('city');
	 * |city.getPopup().close();
	 * 如果下拉框处于下拉状态，则关闭下拉框
	 */
	close: function(callback) {
		if (this.isOpen()) {
			this.inherited(arguments);
			if (dojo.isFunction(callback)) {
				callback.apply(this.widget, [this._selection]);
			} else if (dojo.isFunction(this._callback))  {
				this._callback.apply(this.widget, [this._selection]);
			}
		}
	},
	
	_onSelect: function(evt, target) {
		// override by list|table|multi
	},
	
	_createPopup: function(items, structure) {
		// override by list|table|multi
	},
	
	_handleKeyDown: function(evt) {
		// override by list|table|multi
	},
	
	_focusOptionNode: function(/*DomNode */ node) {
		if (this._highlighted == node)
			return;
		this._blurOptionNode();
		this._highlighted = node;
		dojo.addClass(this._highlighted, "u-comboboxlocation-item-hover");//这个class写错了，暂时将错就错。。。
		dijit.scrollIntoView(this._highlighted);	
	},

	_blurOptionNode: function() {
		if (this._highlighted) {
			dojo.removeClass(this._highlighted, "u-comboboxlocation-item-hover");
			this._highlighted = null;
		}
	},
	
	// inner API
	_updateSelection: function(selection) {
		var selection = this.widget._getSelectedItems();
		this._selection = dojo.isArray(selection)?selection:null;
		// update ui?
	},
	
	// 鼠标移入
	_onMouseOver: function(evt) {
		var t = evt.target;
		while (t && !t.item) {
			t = t.parentNode;
		}
		if (!t) return;
		try {
			this._focusOptionNode(t);
		} catch (e) {}
	},
	// 鼠标移出
	_onMouseOut: function(evt) {
		this._blurOptionNode();
	}
});
dojo.provide("unieap.form.ComboBoxLocationPopupList");
unieap.form.ComboBoxLocationPopup.list = {
	
	_initRowNum:1,
	_optionSize:5,//每行5个
	_initFlag:true,
	_initItems:null,//记录第一次加载的时候的全部的items
	_items:null,//每点击一次头部A-E就算一次得到的items，以便翻页使用
	_pageNum:1,//通过高度算出的总页数
	_onStatePageNum:1,//当前的页数
	
	//构造下拉框
	_createPopup: function(items, structure,unIconClick) {
		this._items = items;
		var _this = this;
		this._onStatePageNum = 1;
		dojo.connect(dojo.query(".u-comboboxloaction-list-close", this.listTipNode)[0],"onclick",function(evt){
			_this.close();
		});
		this._createHeader(structure ,unIconClick);
		this._createOptions(items, structure,unIconClick);
		this._createFooter();		
	},
	
	//下拉框头部
	_createHeader: function(structure, unIconClick) {
		var _this = this;
		dojo.empty(this.listHeaderNode);
		this.tipSpanNode.innerHTML = "支持拼音首字符输入";
		this.tipCloseNode.title ="全部";
		
		var ul = dojo.create("ul");
		var li = dojo.create("li", {innerHTML: "全部"}, ul);
		li.charNum = "a-z";
		dojo.addClass(li, "u-comboboxloaction-list-header-click");
		dojo.create("li", {innerHTML: "A-E"}, ul).charNum = "a-e";
		dojo.create("li", {innerHTML: "F-J"}, ul).charNum = "f-j";
		dojo.create("li", {innerHTML: "K-O"}, ul).charNum = "k-o";
		dojo.create("li", {innerHTML: "P-T"}, ul).charNum = "p-t";
		dojo.create("li", {innerHTML: "U-Z"}, ul).charNum = "u-z";
		dojo.query("li", ul).forEach(dojo.hitch(this, function(li){
			dojo.connect(li,'onclick',function(evt){
				dojo.removeClass(dojo.query(".u-comboboxloaction-list-header-click", ul)[0],"u-comboboxloaction-list-header-click");
				_this._headerOnClick(evt);
			});
		}));
		dojo.style(this.listHeaderNode, "display", "");
		this.listHeaderNode.appendChild(ul);
		var text = this.widget.getText();
		if (text && dojo.trim(text)!=="" && !unIconClick && this._selection.length == 0) {
			dojo.style(this.listHeaderNode, "display", "none");
			dojo.style(this.listTipNode, "display", "none");
			this.width = (dojo.style(this.widget.fieldNode,"width")-1)+"px";
		}else{
			dojo.style(this.listHeaderNode, "display", "");
			dojo.style(this.listTipNode, "display", "");
			this.width = "342px";
		}
		this.listHeaderNode.appendChild(ul);
	},
	
	//下拉框中部
	_createOptions: function(results, structure, unIconClick) {
		if(typeof(this._optionSize) == "undefined" || this._optionSize == null){
			this._optionSize = 5;
		}
		//根据高度计算可以容纳的行数
		var popupRealHeight = this.height;
		var textFlag = this.widget.getText();
		if(this._initFlag){
			this._initItems = results;
			var popupAutoHeight = 102;//auto情况下的高度是169px 头部和底部加起来是92px 中间是5*25px+2*5=135px
			if(popupRealHeight != "auto"){
				var orginRowNum = 1;//根据高度算出的行数，每行五个
				popupRealHeight = popupRealHeight.replace("px","");
				if(popupRealHeight - popupAutoHeight<=27){
					this.height = "127px";//只显示一行
				}else{
					orginRowNum = Math.round((popupRealHeight - popupAutoHeight)/27);
					this._initRowNum = Math.round(results.length/5)>rowNum?rowNum:Math.round(results.length/5);
					this.height = popupAutoHeight + this._initRowNum * 27 + "px" ;
				}
			}else{
				this._initRowNum = 5;
				this.height = popupAutoHeight + this._initRowNum * 27 + "px" ;
			}
		}
		var rowNum = this._initRowNum;
		if (textFlag && dojo.trim(textFlag)!=="" && !unIconClick && this._selection.length == 0) {	
				this._optionSize = 1;
				rowNum = rowNum + 2;
				
		}else{
				this._optionSize = 5;
		}
		this._pageNum = Math.ceil(results.length/(this._optionSize*rowNum));
		this._items = results;
		this._doCreateOptions(results,rowNum);
	},
	
	_doCreateOptions:function(results,rowNum){
		var _this = this;
		dojo.empty(this.listContainerNode);
		var ul = dojo.create("ul");
		var optimize = unieap.widget.form.comboBoxPopupOptimize;
		rowNum = !rowNum?this._initRowNum:rowNum;
		this._initFlag = false;
		for (var i=0,l=optimize?Math.min(results.length,this._optionSize*rowNum):results.length; i<l; i++) {
			var item = results[i];
			var value = item[this.widget.getDecoder().displayAttr]||"";
			if(this.widget.comboShowSelectValue == value){
				value = "";
			}
			var li = dojo.create("li", null, ul);
			li.innerHTML = value;
			dojo.connect(li,"onclick",function(evt){
				_this._onClick(evt);
			});
			li.item = item;
			if (this._optionSize == 1) {			
				dojo.addClass(li,"querylist");
			}else{
				dojo.removeClass(li,"querylist");
			}
			ul.appendChild(li);
		}
		this.listContainerNode.appendChild(ul);
	},
	
	//下拉框底部
	_createFooter:function(){
		var _this = this;
		dojo.empty(this.listFooterNode);
		var previous = dojo.create("a",{innerHTML:"«&nbsp;向前"},this.listFooterNode);
		previous.stateFlag = "previous";
		dojo.addClass(previous,"u-comboboxloaction-list-footer-Previous");
		dojo.connect(previous,'onmousedown',function(evt){
			_this._changeToPage(evt);
		});
		dojo.connect(previous,'onmouseover',function(evt){
			_this.widget.stopUpdateText = true;
		});dojo.connect(previous,'onmouseout',function(evt){
			_this.widget.stopUpdateText = false;
		});
		var next = dojo.create("a",{innerHTML:"向后&nbsp;»"},this.listFooterNode);
		next.stateFlag = "next";
		dojo.addClass(next,"u-comboboxloaction-list-footer-next");
		dojo.connect(next,'onmousedown',function(evt){
			_this._changeToPage(evt);
		});
		dojo.connect(next,'onmouseover',function(evt){
			_this.widget.stopUpdateText = true;
		});dojo.connect(next,'onmouseout',function(evt){
			_this.widget.stopUpdateText = false;
		});
		this._highlightFooterNode();
	},
	
	_highlightFooterNode:function(){
		if(this._onStatePageNum<this._pageNum){
			this._nextPageState = true;
		}else{
			this._nextPageState = false;
		}
		if(this._onStatePageNum>1){
			this._previousPageState = true;
		}else{
			this._previousPageState = false;
		}
		this._highlightPrevious(this.listFooterNode.firstChild);
		this._highlightNext(this.listFooterNode.lastChild);
	},
	
	//处理前一页高亮样式
	_highlightPrevious:function(previous){
		var previousPageState = this._previousPageState;
		if(previousPageState){
			dojo.addClass(previous,"u-comboboxloaction-list-footer-able");
		}else{
			dojo.removeClass(previous,"u-comboboxloaction-list-footer-able");
		}
	},
	
	//处理下一页高亮样式
	_highlightNext:function(next){
		var nextPageState = this._nextPageState;
		if(nextPageState){
			dojo.addClass(next,"u-comboboxloaction-list-footer-able");
		}else{
			dojo.removeClass(next,"u-comboboxloaction-list-footer-able");
		}
	},
	
	//翻页
	_changeToPage:function(evt){
		var t = evt.target || evt.srcElement;
		if(t.className.indexOf("u-comboboxloaction-list-footer-able")==-1){
			return;
		}
		while (!t.stateFlag) {
			t = t.parentNode;
			if (t === this.listFooterNode) {
				break;
			}
		}
		if(t.stateFlag == "previous"){
			this._onStatePageNum--;
			
		}else if(t.stateFlag == "next"){
			this._onStatePageNum++;
		}
		this._highlightFooterNode();
		var rowNum = this._initRowNum;
		if (this._optionSize == 1 && this._selection.length == 0) {	
			rowNum = rowNum + 2;
		}
		this._pageNum = Math.ceil(this._items.length/(this._optionSize*rowNum));
		var newItems = {};
		var initNum = this._optionSize*rowNum*(this._onStatePageNum-1);
		var newItemsLength = 0;
		var currentNum = this._optionSize*rowNum*this._onStatePageNum; 
		var lenghNum = this._items.length>currentNum?currentNum:this._items.length;
		for(var i= initNum;i<lenghNum;i++){
			newItems[i-initNum]=this._items[i];
			newItemsLength++;
		}
		newItems.length = newItemsLength;
		this._doCreateOptions(newItems,rowNum);
		this.widget.stopOnBlur = true;
	},
	
	_onSelect: function(evt, target) {
		this._selection = [target.item];
		unieap.fireEvent4Widget(this,this.widget,this.onSelect,[target.item]);
		this.close(this._callback);
	},
	
	//暂不支持键盘控制	
	_handleKeyDown: function(evt) {
		if (!this.isOpen())
			return;
		var kcode = evt.keyCode;
		if (kcode==dojo.keys.PAGE_DOWN || kcode==dojo.keys.DOWN_ARROW) {
			if (!this._highlighted) {
				this._focusOptionNode(this.listContainerNode.childNodes.item(0).childNodes.item(0));
			} else if (this._highlighted.nextSibling) {
				this._focusOptionNode(this._highlighted.nextSibling);
			}
			this._selection = [this._highlighted.item];
			this.widget.setText(this.widget.getDecoder().decode(this._selection[0]));
		} else if (kcode==dojo.keys.PAGE_UP || kcode==dojo.keys.UP_ARROW) {
			if (!this._highlighted) {
				this._focusOptionNode(this.listContainerNode.childNodes.item(0).childNodes.item(0));
			} else if (this._highlighted.previousSibling) {
				this._focusOptionNode(this._highlighted.previousSibling);
			}
			this._selection = [this._highlighted.item];
			this.widget.setText(this.widget.getDecoder().decode(this._selection[0]));
		} else if (kcode==dojo.keys.ENTER && this._highlighted) {
			this._onSelect(evt, this._highlighted);
		} else if (kcode==dojo.keys.ENTER && !this._highlighted 
					&& unieap.widget.form.comboSelectFirstValue) {
			this.widget._setFirstValueWhenTypeEnter();
		}
	}
}

if (!dojo._hasResource["unieap.form.EmailValidator"]) {
	dojo._hasResource["unieap.form.EmailValidator"] = true;
	dojo.provide("unieap.form.EmailValidator");
	dojo.require("unieap.form.TextBoxValidator");
	dojo.declare("unieap.form.EmailValidator", unieap.form.TextBoxValidator, {
		/**
        * @summary:
        * 		Email校验器
        * @declaredClass：
        * 		unieap.form.EmailValidator
     	* @superClass:
     	* 		unieap.form.FormWidgetValidator 
        */
        
        regExp: /^\w+[-_.]*\w*@\w+(.\w{1,4}){0,2}$/,
        
        errorMsg: RIA_I18N.form.emailValidator.errorMsg,
        
        validate: function() {
        	var bool = this.inherited(arguments);
			return bool;
        }
	});
}
if (!dojo._hasResource["unieap.form.MobilePhoneValidator"]) {
	dojo._hasResource["unieap.form.MobilePhoneValidator"] = true;
	dojo.provide("unieap.form.MobilePhoneValidator");
	dojo.require("unieap.form.TextBoxValidator");
	dojo.declare("unieap.form.MobilePhoneValidator", unieap.form.TextBoxValidator, {
		/**
        * @summary:
        * 		手机号码校验器
        * @declaredClass：
        * 		unieap.form.MobilePhoneValidator
     	* @superClass:
     	* 		unieap.form.FormWidgetValidator 
        */
        
        regExp: /^((\+86)|86)?1\d{10}$/,
        
        errorMsg: RIA_I18N.form.mobilePhoneValidator.errorMsg,
        
        validate: function() {
        	var bool = this.inherited(arguments);
			return bool;
        }
	});
}
if (!dojo._hasResource["unieap.form.TelephoneValidator"]) {
	dojo._hasResource["unieap.form.TelephoneValidator"] = true;
	dojo.provide("unieap.form.TelephoneValidator");
	dojo.require("unieap.form.TextBoxValidator");
	dojo.declare("unieap.form.TelephoneValidator", unieap.form.TextBoxValidator, {
		/**
        * @summary:
        * 		座机号码校验器
        * @declaredClass：
        * 		unieap.form.MobilePhoneValidator
     	* @superClass:
     	* 		unieap.form.FormWidgetValidator 
        */
        
        regExp: /^(\d{3,4}-?)?\d{7,8}(-\d{1,4})?$/,
        
        errorMsg: RIA_I18N.form.telephoneValidator.errorMsg,
        
        validate: function() {
        	var bool = this.inherited(arguments);
			return bool;
        }
	});
}
if (!dojo._hasResource["unieap.form.CarPlateValidator"]) {
	dojo._hasResource["unieap.form.CarPlateValidator"] = true;
	dojo.provide("unieap.form.CarPlateValidator");
	dojo.require("unieap.form.TextBoxValidator");
	dojo.declare("unieap.form.CarPlateValidator", unieap.form.TextBoxValidator, {
		/**
        * @summary:
        * 		Email校验器
        * @declaredClass：
        * 		unieap.form.EmailValidator
     	* @superClass:
     	* 		unieap.form.FormWidgetValidator 
        */
        
        regExp: /^([a-zA-Z\u4E00-\u9FA5].{6})$/,
        
        // 民用车牌正则表达式
        _peopleRegexp: /^[\u4eac\u5180\u8c6b\u4e91\u8fbd\u9ed1\u6e58\u7696\u9c81\u65b0\u82cf\u6d59\u8d63\u9102\u6842\u7518\u664b\u8499\u9655\u5409\u95fd\u8d35\u7ca4\u9752\u85cf\u5ddd\u5b81\u743c\u6e1d\u6d25\u6caa][a-zA-Z]\w{4}[a-zA-Z0-9\u6e2f\u6fb3\u5883]$/,
        
        // 军用车牌正则表达式
        _armyRegExp: /^[a-zA-Z\u519b\u7a7a\u6d77\u5317\u6c88\u5170\u6d4e\u5357\u5e7f\u6210][a-zA-Z]\w{5}$/,
        
        // 警用车牌正则表达式 
        _policeRegExp: /^[a-zA-Z\u4eac\u5180\u8c6b\u4e91\u8fbd\u9ed1\u6e58\u7696\u9c81\u65b0\u82cf\u6d59\u8d63\u9102\u6842\u7518\u664b\u8499\u9655\u5409\u95fd\u8d35\u7ca4\u9752\u85cf\u5ddd\u5b81\u743c\u6e1d\u6d25\u6caa][a-zA-Z]\w{4}[\u8b66]$/,
        
        errorMsg: RIA_I18N.form.carPlateValidator.errorMsg,
        
        validate: function() {
        	var bool = this.inherited(arguments);
			
			var value = this.widget.getValue();
			
			if(bool) {
				if(this._peopleRegexp.test(value)) {
					return true
				} else if(this._armyRegExp.test(value)) {
					return true;
				} else if(this._policeRegExp.test(value)) {
					return true;
				} else return false;
			} else return false;
        }
	});
}
if (!dojo._hasResource["unieap.form.IDCardValidator"]) {
	dojo._hasResource["unieap.form.IDCardValidator"] = true;
	dojo.provide("unieap.form.IDCardValidator");
	dojo.require("unieap.form.TextBoxValidator");
	dojo.declare("unieap.form.IDCardValidator", unieap.form.TextBoxValidator, {
		/**
        * @summary:
        * 		身份证号码校验器
        * @declaredClass：
        * 		unieap.form.IDCardValidator
     	* @superClass:
     	* 		unieap.form.FormWidgetValidator 
        */
        
        _cityArray: {
        	11:"北京",
	        12:"天津",
	        13:"河北",
	        14:"山西",
	        15:"内蒙古",
	        21:"辽宁",
	        22:"吉林",
	        23:"黑龙江",
	        31:"上海",
	        32:"江苏",
	        33:"浙江",
	        34:"安徽",
	        35:"福建",
	        36:"江西",
	        37:"山东",
	        41:"河南",
	        42:"湖北",
	        43:"湖南",
	        44:"广东",
	        45:"广西",
	        46:"海南",
	        50:"重庆",
	        51:"四川",
	        52:"贵州",
	        53:"云南",
	        54:"西藏",
	        61:"陕西",
	        62:"甘肃",
	        63:"青海",
	        64:"宁夏",
	        65:"新疆",
	        71:"台湾",
	        81:"香港",
	        82:"澳门",
	        91:"国外"
	    },
        
        regExp: /^(\d{6})(\d{4})([01]\d)([0123]\d)(\d{3})(\d|x|X)?$/,
        
        errorMsg: RIA_I18N.form.idCardValidator.errorMsg,
        
        validate: function() {
        	var bool = this.inherited(arguments);
			if(!bool) return false;
			
			var value = this.widget.getValue();
			
			if(!this._isValidCity(value)) return false;
			if(!this._isValidBirth(value)) return false;
			if(!this._isValidCheckDigit(value)) return false;
			
			return true;
        },
        
        _isValidCity: function(value) {
        	var city = value.substring(0, 2);
        	return !!this._cityArray[parseInt(city)];
        },
        
        _isValidBirth: function(value) {
        	var year, month, day;
        	if(value.length == 18) {
        		year = value.substring(6, 10);
        		month = value.substring(10, 12);
        		day = value.substring(12, 14);
        	} else if(value.length == 15) {
        		year = "19" + value.substring(6, 8);
        		month = value.substring(8, 10);
        		day = value.substring(10, 12);
        	} else return false;
        	
        	if(year < 1900) return false;
        	if(month > 12 || month < 1) return false;
        	if(day > 31 || day < 1) return false;
        	
        	try {
    			var birth = new Date(year, month, day);
    			var current = new Date();
    			
    			return birth.getTime() < current.getTime();
    		} catch (e) {
    			return false;
    		}
        },
        
        _isValidCheckDigit: function(value) {
        	if(value.length == 18) {
        		var weightArray = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2];
        		var checkArray = ['1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2'];
        		
        		var sum = 0;
        		for(var i = 0; i < 17; i++) {
        			sum += value.substring(i, i + 1) * weightArray[i]; 
        		}
        		var checkDigit = checkArray[sum % 11];
        		return checkDigit == value.substring(17, 18);
        	}
        }
	});
}
dojo.provide("unieap.form.IpAddress");
dojo.require("unieap.form.FormWidget");
dojo.declare("unieap.form.IpAddress", unieap.form.FormWidget,{
	
	templateString :
		"<div class='u-form-ip-container' dojoAttachPoint='mainNode'>"+
			"<input type='text' autocomplete='off' class='u-form-ip-child u-form-ip-firstchild' dojoAttachPoint='firstNode'></input><div class='u-form-ip-dotchild'>.</div>"+
			"<input type='text' autocomplete='off' class='u-form-ip-child' dojoAttachPoint='secondNode'></input><div class='u-form-ip-dotchild'>.</div>"+
			"<input type='text' autocomplete='off' class='u-form-ip-child' dojoAttachPoint='thirdNode'></input><div class='u-form-ip-dotchild'>.</div>"+
			"<input type='text' autocomplete='off' class='u-form-ip-child u-form-ip-forthchild' dojoAttachPoint='forthNode'></input>"+
		"</div>",
	
	/**
	 * @summary:
	 * 		设置控件的宽度
	 * @description:
	 * 		为IP控件设置宽度，不小于130px。
	 * @type:
	 * 		{number|string}
	 */
	width: "130px",
	
	range: {min:0, max:255},
	
	_childwidth: "20px",
	
	//IP文本框之内不允许输入负号、数字及其点号
	inputFilter : {filterRule:/[\.\d]/},
	
	postCreate:function(){
		this.nodeList = [this.firstNode,this.secondNode,this.thirdNode,this.forthNode];
		this._initWidth();
		for(var i=0; i<4; i++){
			dojo.style(this.nodeList[i],"tabIndex", this.tabIndex+i);
			this.connect(this.nodeList[i], "onkeypress", "_onKeyPress");
			this.connect(this.nodeList[i], "onkeydown", "_onKeyDown");
			this.connect(this.nodeList[i], "onkeyup", "_onKeyUp");
			this.connect(this.nodeList[i], "onblur", "_onblur");
		}
	},
	
	/**
	 * @summary:
	 * 		获取IP控件值
	 * @description：
	 * 		如果IP控件值没有输入完整，将返回空串
	 * @example:
	 * |	<div id="ip" dojoType="unieap.form.IpAddress"></div>
	 * |	var ipAddr = unieap.byId('ip');
	 * |	ipAddr.getValue();
	 */
	getValue: function(){
		var retStr = "";
		for(var i=0; i<4; i++){
			if(this.nodeList[i].value != ""){
				retStr += this.nodeList[i].value;
				(i!=3) && (retStr+=".");
			} else {
				return "";
			}
		}
		return retStr;
	},
	
	/**
	 * @summary:
	 * 		设置IP控件值
	 * @description：
	 * 		如果value不是标准的用“.”隔开的4段数字，将不会为控件赋值，字符串中的如果有不合法的字符，将停止赋值。
	 * @param:
	 * 		{string} value
	 * @example:
	 * |	<div id="ip" dojoType="unieap.form.IpAddress"></div>
	 * |	var ipAddr = unieap.byId('ip');
	 * |	ipAddr.getValue();
	 */
	setValue: function(value){
		var strs = value.split(".");
		if(strs.length==4){
			for(var i=0; i<4; i++){
				var temp = parseInt(strs[i]);
				if(isNaN(temp)){
					return;
				}
				var max=this.range.max,
					min=this.range.min;
				if (temp > max || temp < min) {
					temp = 255;
				}
				this.nodeList[i].value=temp;
			}
		}
	},
	
	_initWidth: function(){
		this.width = parseInt(this.width, 10);
		if(this.width<130){
			this.width = 130;
		} else {
			this._childwidth = (this.width-50)/4;
		}

		dojo.style(this.mainNode,"width", this.width+"px");

		for(var i=0; i<4; i++){
			dojo.style(this.nodeList[i],"width", this._childwidth+"px");
		}
	},
	
	_onKeyPress: function(evt){
		this.currentInput = evt.target;
		if(evt.keyCode == 46){
			dojo.stopEvent(evt);
			this._onKeyDot(evt);
			return;
		}
		
		this.getInputFilter().filter(evt);
	},
	
	_movetoright: function(evt){
		if(dojo.isIE){
			var obj = evt.target.createTextRange();
			var r = document.selection.createRange();
			r.collapse(false);
			r.setEndPoint("StartToStart",obj);
			if(r.text == evt.target.value){
				var inputs = this.nodeList;
				for(var i=0; i<3; i++){
					if(evt.target == inputs[i]){
						inputs[i+1].focus();
						this.currentInput = inputs[i+1];
						break;
					}
				}
			}
		}else{
			var start = evt.target.selectionStart;
			if(start == evt.target.value.length){
				var inputs = this.nodeList;
				for(var i=0; i<3; i++){
					if(evt.target == inputs[i]){
						inputs[i+1].focus();
						this.currentInput = inputs[i+1];
						break;
					}
				}
			}
		}
	},
	
	_movetoleft: function(evt){
		if(dojo.isIE){
			var obj = evt.target.createTextRange();
			var r = document.selection.createRange();
			r.collapse(false);
			r.setEndPoint("StartToStart",obj);
			if(r.text == ""){
				var inputs = this.nodeList;
				for(var i=1; i<4; i++){
					if(evt.target == inputs[i]){
						//inputs[i-1].focus();
						var obj1 = inputs[i-1].createTextRange();
						obj1.moveEnd('character', inputs[i-1].value.length);
  						obj1.moveStart('character', inputs[i-1].value.length);
						obj1.select();
						this.currentInput = inputs[i-1];
					}
				}
			}
		}else{
			var start = evt.target.selectionStart;
			if(start == 0){
				var inputs = this.nodeList;
				for(var i=1; i<4; i++){
					if(evt.target == inputs[i]){
						var len = inputs[i-1].value.length;
						inputs[i-1].setSelectionRange(len, len);
						inputs[i-1].focus();
						this.currentInput = inputs[i-1];
					}
				}
			}
		}
	},
	
	_onKeyDown: function(evt){
		switch(evt.keyCode){
			case dojo.keys.RIGHT_ARROW:
				this._movetoright(evt);
				break;
			case dojo.keys.LEFT_ARROW:
				this._movetoleft(evt);
				break;
			default :
		}
	},
	
	_onKeyUp: function(evt){
		switch(evt.keyCode){
			case dojo.keys.RIGHT_ARROW:
			case dojo.keys.LEFT_ARROW:
			case dojo.keys.TAB:			//Tab键
			case 110:					//delete键
			case 189:					//减号
				return;
		}
		if(this._ishas3Number(evt)){
			this._onKeyDot(evt);
		}
		if(evt.target==this.forthNode){
			this._onblur(evt);
		}
	},
	
	_ishas3Number: function(evt){
		var value = parseInt(evt.target.value, 10);
		if(value>99){
			return true;
		}
		return false;
	},
	
	_onblur: function(evt){
		var value = evt.target.value;
		while(value.length>1&&value[0]=='0'){
			value = value.substring(1);
		}
		evt.target.value = value;
		this.validateRange(evt);
	},
	
	_onKeyDot: function(evt){
		var inputs = this.nodeList;
		for(var i=0; i<3; i++){
			if(evt.target == inputs[i]){
				this._onblur(evt);
				inputs[i+1].select();
				this.currentInput = inputs[i+1];
				break;
			}
		}
	},
	
	validateRange:function(evt){
		var value=parseInt(evt.target.value, 10);
			max=this.range.max,
			min=this.range.min;
		if (value > max || value < min) {
			evt.target.value = 255;
			alert(value+"不是一个有效项目，请指定一个介于0和255之间的数值");
		}
	},
	
	getInputFilter:function(){
		return unieap.getModuleInstance(this,"inputFilter","unieap.form.InputFilter");
	}
	
});
if (!dojo._hasResource["unieap.form.MultilineTextBox"]) {
	dojo._hasResource["unieap.form.MultilineTextBox"] = true;
	dojo.provide("unieap.form.MultilineTextBox");
	dojo.require("unieap.form.Textarea");
	dojo.declare("unieap.form.MultilineTextBox", unieap.form.Textarea, {
		/**
		 * @summary: MultilineTextBox控件，多行文本编辑控件，显示时带下划线，可设置显示行数
		 * @declaredClass: unieap.form.MultilineTextBox
		 * @superClass: unieap.form.Textarea
		 * @example: | <div dojoType="unieap.form.MultilineTextBox" ></div>
		 */
		UserInterfaces : dojo.mixin({
					lineNumber : 'number',
					fontStyle : 'object',
					isShowLine:'boolean'
				}, unieap.form.Textarea.prototype.UserInterfaces),

		/**
		 * @type:
		 * 		{number}
		 * @summary:
		 * 		设置控件显示的行数
		 * @description:
		 * 		显示的行数是指非编辑状态下的行数，带下划线，行高会根据控件高度自动计算
		 * 		内容超出的部分将会隐藏，编辑状态下可见
		 * @default
		 * 		2
		 * @example:
		 * |<div dojoType="unieap.form.MultilineTextBox" lineNumber="6"></div>
		 */
		lineNumber : 2,
		
		/**
		 * @type:
		 * 		{object}
		 * @summary:
		 * 		设置控件字体属性
		 * @description:
		 * 		可设置控件的字体属性，包括大小、颜色、字体等
		 * 		设置属性名称要使用javascript中的属性名，如fontSize, fontFamily等
		 * @default
		 * 		与其它formWidget控件相同
		 * @example:
		 * |<div dojoType="unieap.form.MultilineTextarea" lineNumber="6"
		 * | fontStyle="{color: 'red', fontSize: '30px'}"></div>
		 */
		fontStyle : null,
		// 行高
		_lineHeight : null,
		
		// 下划线div
		_lineContainer : null,
		
		// 内容超出显示大小时的提示
		_overflowIcon : null,
		isShowLine:true,
		
		postMixInProperties : function() {
			this.inherited(arguments);
		},

		postCreate : function() {
			this.inherited(arguments);
			// 隐藏边框
			dojo.addClass(this.fieldNode, 'u-form-multiline-border-transparent');
			// 去除Textarea的滚动条，禁止调整大小
			dojo.style(this.inputNode, {
				'overflowX': 'hidden',
				'overflowY': 'hidden',
				'resize': 'none'
			});
			dojo.style(this.inputNode.parentNode, 'position', 'relative');
			if(this.fontStyle && typeof(this.fontStyle) == "object"){
				for (var i in this.fontStyle){
					dojo.style(this.inputNode, i, this.fontStyle[i]);
				}
			}
		},

		startup : function() {
			this.inherited(arguments);
			var textarea, cttPos, coords, line, fontSize, leading;
			textarea = this.inputNode;
			cttPos = dojo.contentBox(textarea);
			coords = dojo.coords(textarea);
			fontSize = parseInt(dojo.style(textarea, 'fontSize'), 10);

			// 计算并调整行高
			this._lineHeight = Math.floor(cttPos["h"] / this.lineNumber);
			dojo.style(textarea, 'lineHeight', this._lineHeight + 'px');
			
			// 生成下划线
			this._lineContainer = dojo.create('div', {
				}, textarea.parentNode);
			dojo.style(this._lineContainer, {
				'position': 'absolute',
				'top' : coords['t'] + 'px',
				'left' : coords['l'] + 'px',
				'width' : '100%',
				'height' : '100%',
				'fontSize': fontSize + 'px',
				'lineHeight': this._lineHeight + 'px'
			});
			if(!this.isShowLine){
				dojo.style(this._lineContainer, 'visibility', 'hidden');
			}
			leading = this._lineHeight - fontSize;
			// 内容超出显示提示
			this._overflowIcon = dojo.create('label', {'innerHTML': '…'}, this._lineContainer);
			dojo.style(this._overflowIcon, {
				'visibility': 'hidden',
				'position': 'absolute',
				'top': ((this.lineNumber - 1) * this._lineHeight) + 'px',
				'right': '0px',
//				'fontSize': fontSize + 'px',
//				'lineHeight': fontSize + 'px',
				'background': 'white',
				'letterSpacing': 'normal',
				'textDecoration': 'none'
			});
			line = dojo.create('div', {
				'innerHTML': new Array(this.lineNumber + 1).join('&nbsp;\n')				
			}, this._lineContainer);
			dojo.style(line, {
				'position': 'absolute',
				'width': '100%',
				'height': '100%',
				'textDecoration': 'underline',
				'letterSpacing': '9999px',
				'wordWrap': 'break-word',
				'overflow': 'hidden'
			});
			
			// 窗口大小调整时更新超出提示
			if(dojo.isIE) {
				this.connect(this.inputNode, 'onresize', '_checkOverflow');
			} else {
				// 这个不太好，但还没想到更好的办法
				this.connect(window, 'onresize', '_checkOverflow');
			}
		},
		
		// 获得焦点时显示边框，隐藏下划线
		_onFocus: function(evt) {
			dojo.style(this._lineContainer, 'visibility', 'hidden');
			dojo.style(this._overflowIcon, 'visibility', 'hidden');
			dojo.removeClass(this.fieldNode, 'u-form-multiline-border-transparent');
			dojo.style(this.inputNode, 'overflowY', 'auto');
			this.inherited(arguments);
		},
		
		// 失去焦点隋隐藏边框，显示下划线
		_onBlur: function(evt,flag) {
			// 去除边框
			dojo.addClass(this.fieldNode, 'u-form-multiline-border-transparent');
			// 隐藏Textarea的滚动条
			dojo.style(this.inputNode, 'overflowY', 'hidden');
			// 回到最顶部
			this.inputNode.scrollTop = 0;
			// 显示下划线
			if(this.isShowLine){
			dojo.style(this._lineContainer, 'visibility', 'visible');
			}
			this._checkOverflow();
			this.inherited(arguments);
		},
		
		// ESC键返回
		_onKeyDown: function(evt) {
			if(dojo.keys.ESCAPE == evt.keyCode) {
				this.focusNode.blur();
				return;
			}
			this.inherited(arguments);
		},
		
		// 检测是否有内容超出显示范围，通过scrollHeight与clientHeight比较实现
		_checkOverflow: function() {
			if((this.inputNode.scrollHeight) <= this.inputNode.clientHeight) {
				dojo.style(this._overflowIcon, 'visibility', 'hidden');
			} else {
				dojo.style(this._overflowIcon, 'visibility', 'visible');
			}
		},
		
		setValue: function(value) {
			this.inherited(arguments);
			// 设置值时进行超出检查
			this._checkOverflow();
		},
		
		setVisible: function(visible) {
			this.inherited(arguments);
			if(visible) {
				dojo.style(this._lineContainer, 'visibility', 'visible');
				this._checkOverflow();
			} else {
				dojo.style(this._lineContainer, 'visibility', 'hidden');
				dojo.style(this._overflowIcon, 'visibility', 'hidden');
			}
		},
		
		setHeight: function(height) {
			this.inherited(arguments);
			this.inputNode.scrollTop = 0;
			var h = dojo.contentBox(this.inputNode)['h'];

			// 计算并调整行高
			this._lineHeight = Math.floor(h / this.lineNumber);
			dojo.style(this.inputNode, 'lineHeight', this._lineHeight + 'px');
			dojo.style(this._lineContainer, {
				'lineHeight': this._lineHeight + 'px'
			});
			dojo.style(this._overflowIcon, 'top', ((this.lineNumber - 1) * this._lineHeight) + 'px');
		},
		
		setWidth: function(width) {
			this.inherited(arguments);
			this.inputNode.scrollTop = 0;
			this._checkOverflow();
		}
	})
}
dojo.provide("unieap.form.Slider");
dojo.require("unieap.form.FormWidget");
dojo.declare("unieap.form.Slider",unieap.form.FormWidget,{
	/**
	 * @declaredClass:
	 * 		unieap.form.Slider
	 * @superClass：
	 * 		unieap.form.FormWidget
	 * @summary:
	 * 	可在一个有限范围内调节的滑动条
	 * @description:
	 * 	支持横向和纵向两种滑动条，支持长度设定，支持范围、步长、当前值设定，支持自定义滑块图标
	 * @example:
	 * | ${1}<div dojoType="unieap.form.Slider"></div>
	 * 	${1}横向滑动条
	 * | ${2}<div dojoType="unieap.form.Slider" axis="y"></div>
	 *	${2}纵向滑动条
	 * @example:
	 * | ${3}<div dojoType="unieap.form.Slider" length="200px"></div>
	 *  ${3}length属性设定滑动条长度
	 * @example:
	 * | ${4}<div dojoType="unieap.form.Slider" min="100", max="200", step="10", value="150"></div>
	 * ${4}最小值、最大值、步长、当前值设定，当前值的取值不一定与设定的值相等，其取值受到最小值、最大值及步长的影响。
	 * @example:
	 * | ${5}<div dojoType="unieap.form.Slider" iconClass="iconThumb"></div>
	 * ${5}iconClass指定自定义图标
	 * @example:
	 * | ${6}var slider=new unieap.form.Slider();
	 * |     dojo.body().appendChild(slider.domNode);
	 * |     slider.startup();
	 * ${6}使用编程式新建一个Slider时,要先把Slider加入到流中,然后再调用startup函数才能正确显示
	 */
	
	UserInterfaces : dojo.mixin({
		axis : "string",
		min : "number",
		max : "number",
		step : "number",
		value: "number",
		length : "string",
		iconClass: "string",
		onBeforeSlide : "function",
		onSlideStart : "function",
		onChange : "function",
		onSlideEnd : "function",
		setRange : "function",
		setStep : "function",
		getStep : "function",
		setLength : "function",
		getLength : "function"
	},unieap.form.FormWidget.prototype.UserInterfaces),
	
	templateString :
		"<span class='u-form-widget u-form-slider'>" +
			"<span dojoAttachPoint='sliderNode'>" +
				"<span dojoAttachPoint='leftCapNode' class='u-form-slider-leftcap'></span>" +
				"<span dojoAttachPoint='rightCapNode' class='u-form-slider-rightcap'></span>" +
				"<span dojoAttachPoint='railNode' class='u-form-slider-rail' >" +
					"<div dojoAttachPoint='progressNode' class='u-form-slider-progress'>" +
						"<div dojoAttachPoint='thumbNode'></div>" +
					"</div>" +
				"</span>" +
			"</span>" +
		"</span>",
	
	/**
	 * @type:
	 * 		{string}
	 * @summary:
	 * 		设置Slider的坐标轴方向，"x"为横向，"y"为纵向
	 * @default:
	 * 		"x"
	 * @enum:
	 * 		{"x"|"y"}
	 * @example:
	 * |<div dojoType="unieap.form.Slider" axis="y"></div>
	 */	
	axis: "x",
	
	/**
	 * @type:
	 * 		{number}
	 * @summary:
	 * 		设置最小值，即最左端或最下端的值
	 * @default:
	 * 		0
	 * @example:
	 * |<div dojoType="unieap.form.Slider" min=10></div>
	 */	
	min: 0,
	
	
	/**
	 * @type:
	 * 		{number}
	 * @summary:
	 * 		设置最大值，即最右端或最上端的值
	 * @default:
	 * 		100
	 * @example:
	 * |<div dojoType="unieap.form.Slider" max=200></div>
	 */	
	max: 100,
	
	/**
	 * @type:
	 * 		{number}
	 * @summary:
	 * 		设置当前值
	 * @description:
	 * 		设置当前值后，滑块会显示在相应的位置，当前值应该最小值与最大值之间，超出范围会自动调整到最接近的值，最后的值还会与步长step有关
	 * @default:
	 * 		0
	 * @example:
	 * |<div dojoType="unieap.form.Slider" value=10></div>
	 */	
	value: 0,
	
	/**
	 * @type:
	 * 		{number}
	 * @summary:
	 * 		设置步长
	 * @description:
	 * 		步长为滑块移动一格时的值，步长会影响value的取值
	 * 		步长应该为正数，当步长为非正数时，会被设为默认值1
	 * @default:
	 * 		1
	 * @example:
	 * |<div dojoType="unieap.form.Slider" min=10 max=30 step=10></div>
	 * 		上述代码中，value取值只能是10, 20, 30
	 */	
	step: 1,
	
	/**
	 * @type:
	 * 		{string}
	 * @summary:
	 * 		设置Slider的显示长度
	 * @default:
	 * 		"150px"
	 * @example:
	 * |<div dojoType="unieap.form.Slider" length="200px"></div>
	 */	
	length: "150px",
	
	/**
	 * @summary:
	 * 		通过改变css样式来设置Slider上的滑块图标
	 * @type:
	 * 		{string}
	 * @example:
	 * |<style type="text/css">
	 * |		.iconThumb{
	 * |			width:14px;
	 * |			height:15px;
	 * |			right: -7px;
	 * |			background:url("../images/thumb.png");
	 * |		}
	 * |</style>
	 * |<div dojoType="unieap.form.Slider" iconClass="iconThumb"></div>
	 */
	iconClass: 'u-form-slider-thumb',
	
	//步长的像素值
	_pixelStep: 1.5,
	
	//总段数
	_stepCount: 100,
	
	//鼠标移动事件句柄
	_handleMouseMove: null,
	
	//鼠标释放事件句柄
	_handleMouseUp: null,
	
	//以下是为了区分横纵向滑动条坐标计算设置的变量
	_PageXOrPageY: "pageX",
	_XOrY: "x",
	_WidthOrHeight: "width",
		
	postMixInProperties:function() {
		this.min = Number(this.min);
		this.max = Number(this.max);
		this.step = Number(this.step);
		this.step = (this.step <= 0) ? 1 : this.step;
		if(this.min > this.max) {
			var temp = this.min;
			this.min = this.max;
			this.max = temp;
		}
	},
			
	
	postCreate:function() {
		dojo.setSelectable(this.domNode, false);	
		dojo.style(this.thumbNode, "position", "absolute");
		dojo.addClass(this.thumbNode,this.iconClass);
		this.disabled && dojo.addClass(this.sliderNode, "u-form-slider-disabled");
		this.connect(this.thumbNode, "onmousedown", this._onThumbMouseDown);
		this.connect(this.domNode, "onmousedown", this._onRailMouseDown);
		this.inherited(arguments);
	},
	
	startup: function() {
		this._stepCount = Math.floor((this.max - this.min) / this.step);
		this._setAxis(this.axis);
		this.setLength(this.length);
		this.setValue(this.value);
	},
	//滑块上鼠标按下时事件处理
	_onThumbMouseDown: function(e) {
		if((!this.disabled) && unieap.fireEvent(this,this.onBeforeSlide,[this.value])) {
			this._onSlideStart();
		}		
		dojo.stopEvent(e);
	},
	
	//轨道上鼠标按下时事件处理
	_onRailMouseDown: function(e) {
		if((!this.disabled) && unieap.fireEvent(this,this.onBeforeSlide,[this.value])) {
			//绑定鼠标事件，并调用滑动前的回调函数
			this._onSlideStart();
			//计算鼠标位置并移动滑块
			var absPos = dojo.position(this.railNode, true);
			var offset = e[this._PageXOrPageY] - absPos[this._XOrY];
			("y" == this.axis) && (offset = absPos["h"] - offset);
			this._setPixelValue(offset);			
		}		
		dojo.stopEvent(e);
	},
	
	_onSlideStart: function() {
		// 首先释放鼠标事件，防止某些情况下出现鼠标不能释放的问题
		if(this.thumbNode.releaseCapture) {
			this.thumbNode.releaseCapture();			
		}
		dojo.disconnect(this._handleMouseMove);
		dojo.disconnect(this._handleMouseUp);
		
		if(this.thumbNode.setCapture) {
			this.thumbNode.setCapture();
			this._handleMouseMove = dojo.connect(this.railNode, "onmousemove", this,this._onMouseMove);
			this._handleMouseUp = dojo.connect(this.railNode, "onmouseup", this,this._onMouseUp);
		} else {
			this._handleMouseMove = dojo.connect(document, "onmousemove",this, this._onMouseMove);
			this._handleMouseUp = dojo.connect(document, "onmouseup",this, this._onMouseUp);
		}
		unieap.fireEvent(this,this.onSlideStart,[this.value]);
	},	
	
	//鼠标抬起事件处理
	_onMouseUp: function() {		
		if(this.thumbNode.releaseCapture) {
			this.thumbNode.releaseCapture();			
		}
		dojo.disconnect(this._handleMouseMove);
		dojo.disconnect(this._handleMouseUp);
		unieap.fireEvent(this,this.onSlideEnd,[this.value]);
	},
	
	_onMouseMove: function(e) {
		var absPos = dojo.position(this.railNode, true);
		var offset = e[this._PageXOrPageY] - absPos[this._XOrY];
		("y" == this.axis) && (offset = absPos["h"] - offset);
		this._setPixelValue(offset);
	},
	
	//根据像素值高处相应的值长滑块位置
	_setPixelValue: function(pixelValue) {
		//计算处开第段
		var count = Math.round(pixelValue / this._pixelStep);
		//越界处理
		(count < 0) && (count = 0);
		(count > this._stepCount) && (count = this._stepCount);;
		
		//计算实际值
		var value = count * this.step + this.min;
		
		//若值发生改变，修改滑块位置
		if(this.value != value) {
			pixelValue = count * this._pixelStep;
			dojo.style(this.progressNode, this._WidthOrHeight, pixelValue+'px');
			this.value = value;			
			this.fireDataChange();
			//调用值改变时的回调函数
			unieap.fireEvent(this,this.onChange,[this.value]);
		}		
	},
		
	/**
	 * @summary:
	 * 		设置取值范围
	 * @description:
	 * 		设置最小值和最大值，可根据值的大小自动判断最小值和最大值
	 * @param:
	 * 		{number} min
	 * 		{number} max
	 */
	setRange: function(min, max) {
		if(isNaN(min) || isNaN(max)) {
			return;
		}
		min = Number(min);
		max = Number(max);
		if(min > max) {
			this.min = max;
			this.max = min;
		} else {
			this.min = min;
			this.max = max;
		}
		
		this._setStep();
		//更新段数
		//this._stepCount = Math.floor((this.max - this.min) / this.step);
		//更新当前值
		this.setValue(this.value);
	},
	
	/**
	 * @summary:
	 * 		设置是否禁用控件
	 * @param:
	 * 		{boolean} disabled
	 * @example:
	 * |var slider=unieap.byId('slider');
	 * |slider.setDisabled(true);
	 */	
	setDisabled: function(disabled) {
		if(this.disabled=disabled){
			this.disabled=true;
			dojo.addClass(this.sliderNode,"u-form-slider-disabled");
		}else{
			dojo.removeClass(this.sliderNode,"u-form-slider-disabled");
		}
	},
	
	/**
	 * @summary:
	 * 		设置滑块图标样式
	 * @description：
	 * 		建议图片大小:14*15,CSS设置width为14px,height为15px,right为-7px; 
	 * @param:
	 * 		{string} className 图标的css名
	 * @example:
	 * |<style type="text/css">
	 * |		.iconThumb{
	 * |			width:14px;
	 * |			height:15px;
	 * |			right:-7px;
	 * |			background:url("../images/thumb.png");
	 * |		}
	 * |</style>
	 * |var slider=unieap.byId('slider');
	 * |slider.setIconClass('iconThumb');
	 */
	setIconClass: function(className) {
		this.iconClass && dojo.removeClass(this.thumbNode, this.iconClass);
		dojo.addClass(this.thumbNode, className);
		this.iconClass = className;
	},
	
	/**
	 * @summary:
	 * 		获取最小值
	 * @return:
	 * 		{number}
	 */
	getMin: function() {
		return this.min;
	},
	
	
	/**
	 * @summary:
	 * 		获取最大值	 
	 * @return:
	 * 		{number}
	 */
	getMax: function() {
		return this.max;
	},
	
	/**
	 * @summary:
	 * 		设置控件当前值
	 * @param:
	 * 		{number} value
	 */
	setValue: function(value) {
		if(isNaN(value)) {
			return;
		}
		value = Number(value);
		var count = Math.round((value - this.min) / this.step);
		(count < 0) && (count = 0);
		(count > this._stepCount) && (count = this._stepCount);
		value = count * this.step + this.min;
		this.value = value;
		this.fireDataChange();
		var pixelValue = count * this._pixelStep;
		dojo.style(this.progressNode, this._WidthOrHeight, pixelValue+'px');
	},
	
	/**
	 * @summary:
	 * 		获取控件当前值
	 * @return:
	 * 		{number}
	 */
	getValue: function() {
		return this.value;
	},
	
	/**
	 * @summary:
	 * 		设置步长
	 * @param:
	 * 		{number} step
	 */
	setStep: function(step) {
		if(isNaN(step)) {
			return;
		}
		step = Number(step);
		(step <= 0) && (step = 1);
		this.step = step;
		this._setStep();
		//调整当前值
		this.setValue(this.value);
	},
	
	_setStep: function() {
		//计算段数
		this._stepCount = Math.floor((this.max - this.min) / this.step);
		//计算步长像素值
		var railLength = dojo.style(this.railNode, this._WidthOrHeight);
		this._pixelStep = this.step / (this.max - this.min) * railLength;
	},
	/**
	 * @summary:
	 * 		获取步长
	 * @return:
	 * 		{number}
	 */
	getStep: function() {
		return this.step;
	},
	
	/**
	 * @summary:
	 * 		设置控件长度
	 * @param:
	 * 		{string} length
	 */
	setLength: function(length) {
		var leftCapLength, rightCapLength, railLength;
		leftCapLength = dojo.style(this.leftCapNode, this._WidthOrHeight);
		rightCapLength = dojo.style(this.rightCapNode, this._WidthOrHeight);
		length = parseInt(length, 10);
		//如果长度过小，进行调整，调整到可能的最小值
		if(length < (leftCapLength + leftCapLength +1)) {
			length = (leftCapLength + leftCapLength +1);			
		}
		this.length = length + 'px';
		//计算滑动轨道长度
		railLength = length - leftCapLength - rightCapLength;
		//调整样式表中的相应长度或高度
		dojo.style(this.domNode, this._WidthOrHeight, length+"px");
		dojo.style(this.railNode, this._WidthOrHeight, railLength + "px");
		//调整步长像素值
		this._pixelStep = this.step / (this.max - this.min) * railLength;
		//更新当前值
		this.setValue(this.value);
	},
	
	/**
	 * @summary:
	 * 		获取控件长度
	 * @return:
	 * 		{string}
	 */
	getLength: function() {
		return this.length;
	},
	
//	/**
//	 * @summary:
//	 * 		设置控件坐标方向
//	 * @param:
//	 * 		{string} axis
//	 */
//	setAxis: function(axis) {
//		this._setAxis(axis);
//		this.setValue(this.value);
//	},
	
	_setAxis: function(axis)	 {

		if("y" == axis.toLowerCase()) {
			this.axis = "y";
			this._PageXOrPageY = "pageY";
			this._XOrY = "y";
			this._WidthOrHeight = "height";
			dojo.removeClass(this.domNode, "u-form-slider-x");
			dojo.addClass(this.domNode, "u-form-slider-y");
			
			var h = dojo.style(this.thumbNode, "height");
			h = -Math.ceil(h / 2);
			dojo.style(this.thumbNode, "top", h + "px");
			dojo.style(this.thumbNode, "right", "0px");
			
			dojo.style(this.progressNode, "width", "");
			dojo.style(this.railNode, "width", "");
			dojo.style(this.domNode, "width", "");
		} else {
			this.axis = "x";
			this._PageXOrPageY = "pageX";
			this._XOrY = "x";
			this._WidthOrHeight = "width";

			dojo.removeClass(this.domNode, "u-form-slider-y");
			dojo.addClass(this.domNode, "u-form-slider-x")
			
			var w = dojo.style(this.thumbNode, "width");
			
			w = -Math.ceil(w / 2);
			dojo.style(this.thumbNode, "top", "0px");
			dojo.style(this.thumbNode, "right", w + "px");
			
			dojo.style(this.progressNode, "height", "");
			dojo.style(this.railNode, "height", "");
			dojo.style(this.domNode, "height", "");
		}  
		
	},
	
	/**
	 * @summary:
	 * 		获取控件坐标方向
	 * @return:
	 * 		{string}
	 */
	getAxis: function() {
		return this.axis;
	},

   /**
    * @summary:
    * 		滑动事件前回调事件
    * @return:
    * 		{boolean}
    */
	
	onBeforeSlide: function(value) {
		return true;
	},
	
   /**
    * @summary:
    * 		滑动事件开始回调事件
    */
	onSlideStart: function(value) {

	},
		
   /**
    * @summary:
    * 		控件值改变开始回调事件
    * @example:
    * |<div dojoType="unieap.form.Slider" onChange="fn"></div>
    */
	onChange: function(value) {
				
	},
	
	/**
    * @summary:
    * 		滑动事件结束回调事件
    */
	onSlideEnd: function(value) {
		
	}
		
});
dojo.provide("unieap.form.NumberSpinner");
dojo.require("unieap.form.FormWidget");
dojo.require("unieap.form.NumberTextBox");
dojo.declare("unieap.form.NumberSpinner",[unieap.form.NumberTextBox,unieap.form.FormWidget],{
	
	//用户属性配置接口
	UserInterfaces : dojo.mixin({
		smallDelta : "number",
		constraints : "object"
	},
	unieap.form.FormWidget.prototype.UserInterfaces),
	
	templateString :
		"<div class='u-form-widget'>"+
			"<div dojoAttachPoint='requiredNode' class='u-form-required'>*</div>" + 
			"<div dojoAttachPoint='fieldNode' class='u-form-field'>"+
				"<div dojoAttachPoint='modifiedNode' class='u-form-modified'></div>"+
				"<div class='u-form-spinner-icon' dojoAttachPoint='iconNode'>"+
					"<div tabindex='-1' class='u-form-spinner-arrowup' dojoAttachPoint='iconUpNode'></div>"+
					"<div tabindex='-1' class='u-form-spinner-arrowdown' dojoAttachPoint='iconDownNode'></div>"+
				"</div>"+
				"<div dojoAttachPoint='errorNode' class='u-form-error'></div>"+
				"<div class='u-form-textbox-field'>" +
					"<input dojoAttachPoint='inputNode,focusNode,textbox' class='u-form-textbox-input' autocomplete='off' onfocus='unieap.fep&&unieap.fep(this)'>"+
				"</div>" + 	
			"</div>" + 	
		"</div>",		
	
	/**
	 * @summary:
	 * 		按向上或向下按钮时，控件中数字减少的偏移量
	 * @type:
	 * 		{Number}
	 * @default：
	 * 		1
	 * @example:
	 * |<div dojoType="unieap.form.NumberSpinner" id="integerspinner1" binding={name:'attr_empno'} 
	 * |		constraints={max:500,min:0} smallDelta=3></div>
	 */
	smallDelta: 1,
	
	/**
	 * @summary:
	 * 		指定控件输入数字的边界。
	 * @type:
	 * 		{object}
	 * @default：
	 * 		null
	 * @example:
	 * |<div dojoType="unieap.form.NumberSpinner" id="integerspinner1" binding={name:'attr_empno'} 
	 * |		constraints={max:500,min:0}></div>
	 */
	constraints: null,
	
	//默认值格式化实现类名称
	valueFormatterClass : "unieap.form.SimpleFormatter",
	
	postCreate:function(){
		this.inherited(arguments);
		if(this.constraints){
			this.constraints.max == undefined && (this.constraints.max = 9999999);
			this.constraints.min == undefined && (this.constraints.min = -9999999);
		} else {
			this.constraints = {max:9999999, min:-9999999};
		}
		this.connect(this.iconNode, "mouseover", "domouseover");
		this.connect(this.iconUpNode, "mousedown", "doupdown");
		this.connect(this.iconUpNode, "mouseup", "doupup");
		this.connect(this.iconDownNode, "mousedown", "dodowndown");
		this.connect(this.iconDownNode, "mouseup", "dodownup");
		var bind = this.getBinding();
	},
	
	domouseover: function(e) {
		e.target.style.cursor = 'pointer'; 
	},

	doupdown: function(e){
		if(this.disabled){ return; }
		dojo.addClass(this.iconUpNode,"u-form-spinner-arrowup-down");
		var value = this.getValue();
		(value=='') && (value=this.constraints.min);
		var new_value = this.floatAdd(value,this.smallDelta);
		if(new_value > this.constraints.max) return;
		this.setValue(new_value);
		var self = this;
		this.handleUp && clearTimeout(this.handleUp);
		this.handleUp=setTimeout(dojo.hitch(self,function(){self.doupdown();}),150);
	},
	
	doupup: function(e){
		this.handleUp && clearTimeout(this.handleUp);
		dojo.removeClass(this.iconUpNode,"u-form-spinner-arrowup-down");
	},
	
	dodowndown: function(e){
		if(this.disabled){ return; }
		dojo.addClass(this.iconDownNode,"u-form-spinner-arrowdown-down");
		var value = this.getValue();
		(value=='') && (value=this.constraints.max);
		var new_value = this.floatSub(value,this.smallDelta);
		if(new_value < this.constraints.min) return;
		this.setValue(new_value);
		var self = this;
		this.handleDown && clearTimeout(this.handleDown);
		this.handleDown=setTimeout(dojo.hitch(self,function(){self.dodowndown();}),150);
	},
	
	dodownup: function(e){
		this.handleDown && clearTimeout(this.handleDown);
		dojo.removeClass(this.iconDownNode,"u-form-spinner-arrowdown-down");
	},
	
	floatAdd: function(arg1,arg2){
		var r1,r2,m; 
		try{r1=arg1.toString().split(".")[1].length;}catch(e){r1=0;}
		try{r2=arg2.toString().split(".")[1].length;}catch(e){r2=0;}
		m=Math.pow(10,Math.max(r1,r2));
		return (this.floatMul(arg1,m)+this.floatMul(arg2,m))/m;
	},
	
	
	floatSub: function(arg1,arg2){ 
		return this.floatAdd(arg1,-arg2);
	},
	
	floatMul: function(arg1,arg2){
		var m=0,s1=arg1.toString(),s2=arg2.toString();
		try{m+=s1.split(".")[1].length}catch(e){}
		try{m+=s2.split(".")[1].length}catch(e){}
		return Number(s1.replace(".",""))*Number(s2.replace(".",""))/Math.pow(10,m)
	},
	_onBlur:function(evt){
		var newValue = this.getValue();
		if('number' == typeof newValue){
			if(newValue < this.constraints.min) this.setValue(this.constraints.min);
			if(newValue > this.constraints.max) this.setValue(this.constraints.max);
		}
		this.inherited(arguments);
	}
});
dojo.provide("unieap.form.FormImage"); 
dojo.declare("unieap.form.FormImage",unieap.form.FormWidget,{
	/**
	 * @declaredClass: unieap.form.formI周期表
	 * @author Jols-zheng
	 * 
	 * @summary: 动态表单中的Image标签
	 * 
	 */
	// 用户属性配置接口
	UserInterfaces : dojo.mixin({ 
		src : "string",
		width:"string",
		height:"string",
		defaultSrc:"string",
		//事件
		onclick : "string",
		onchange:"string"
	}, 
	unieap.form.FormWidget.prototype.UserInterfaces),
	src:"",
	defaultSrc:"",
	width:"80px",
	height:"80px",
	onclick:"",
	onchange:"",
	templateString :
		"<div class='u-form-widget'>"+
		    "<div dojoAttachPoint='globalEnabledNode' class='u-form-file-btn u-form-globalEnabled' style='display:none;width:0px;'>...</div>" +
			"<div dojoAttachPoint='requiredNode' class='u-form-required'>*</div>" + 
			"<div dojoAttachPoint='fieldNode' class='u-form-field' style='display:none'>"+
				"<div dojoAttachPoint='modifiedNode' style='visibility:hidden' class='u-form-modified'></div>"+
				"<div dojoAttachPoint='errorNode' class='u-form-error'></div>"+
				"<div class='u-form-textbox-field'>" +
					"<input dojoAttachPoint='inputNode,focusNode' style='display:none' class='u-form-textbox-input'/>"+
				"</div>" +
			"</div>" +
			"<img  dojoAttachPoint='imageNode' src=''/>"+
		"</div>" ,
		postCreate:function(){
		
			if(dojo.isIE<8){
				dojo.style(this.fieldNode,'height',this.height);
			}
			// 设置文本框初始值,如果trim为true，这删除字符左右的空格
			this.value&& this.setSrc(this.value); 
			this.imageNode.style.width=this.width;
			this.imageNode.style.height=this.height;
			
			
			this.connect(this.inputNode, "onchange", "_onChange");
			this.connect(this.imageNode, "onclick", "_onClick");
			
			if(this.onclick!=null&&this._trim(this.onclick).length>0){
				this.imageNode.style.cursor="pointer";
			}
			
		},
		getValue:function(){
			return this.getSrc();
		},
		setValue:function(value){
			this.setSrc(value);
			
		}
		,
		
		/**
		 * @summary: 设置控件的值
		 * @description: 当控件设置了displayFormatter等属性时,控件显示的是格式化后的值
		 * @param: {object} value
		 * @example: |var box=unieap.byId('box'); |box.setValue('测试');
		 */
		setSrc:function(value){
			
			(value==null||typeof(value)=="undefined")&&(value="");
			// 如果有背景色，清除背景色
			value=this._trim(value);
// if (this.valueFormatter) {
// value = this.getValueFormatter().format(value);
// }
// if (this.displayFormatter) {
// value = this.getDisplayFormatter().format(value);
// }
			this.inputNode.value =(value!=null?value:"");
			if(typeof(value)=="undefined"||value==null||this._trim(value).length<1){
				if(this.defaultSrc!=null&&this._trim(this.defaultSrc).length>0){
					value=this.defaultSrc;
				}
			}
			if(typeof(value)!="undefined"&&value!=null&&this._trim(value).length>0)
				this.imageNode.src=this._rootPath()+"/"+value;
			else
				this.imageNode.src="";
			if(unieap.global.validateOnSetValue && value) this.getValidator().validate();
			this.fireDataChange();
		},

		/**
		 * @summary: 获取控件的值
		 * @description: 当设置了displayFormatter等属性时,得到的值是控件格式化之前的值
		 * @return: {string}
		 * @example: |var box=unieap.byId('box'); |var value=box.getValue();
		 */
		getSrc : function(){
			var value =this._trim(this.inputNode.value);;
// value = this.getDisplayFormatter().parse(value);
// value = this.getValueFormatter().parse(value);
			return value;
		},
		

		// ////////////////////////////////////////内部方法///////////////////////////////////

		// 如果trim为true,去掉value值的前后空格
		_trim:function(value){
			// 当值为日期类型时，去掉空格后值转为字符串类型，在format时如果不是日期或者number类型，将返回空。
			// 业务代码中日期值通常前后不会有空格，所以可以直接将值返回。
			if(value instanceof Date){
				return value;
			}
			// 去掉半角和全角空格
			return this.trim?dojo.trim(value+"").replace(/^[\u3000]*/,"").replace(/[\u3000]*$/,""):value;
		},
		// js获取项目根路径，如： http://localhost:8083/uimcardprj
		_rootPath:function(){
		    // 获取当前网址，如： http://localhost:8083/uimcardprj/share/meun.jsp
		    var curWwwPath=window.document.location.href;
		    // 获取主机地址之后的目录，如： uimcardprj/share/meun.jsp
		    var pathName=window.document.location.pathname;
		    var pos=curWwwPath.indexOf(pathName);
		    // 获取主机地址，如： http://localhost:8083
		    var localhostPaht=curWwwPath.substring(0,pos);
		    // 获取带"/"的项目名，如：/uimcardprj
		    var projectName=pathName.substring(0,pathName.substr(1).indexOf('/')+1);
		    return(localhostPaht+projectName);
		}
		,

		// 执行inputNode的onclick事件
		_onClick:function(evt){

			if (unieap.fireEvent(this,this.onBeforeClick,[])) {
				unieap.fireEvent(this,this.onClick,[evt]);
			}
		},
		// 执行inputNode的onchange事件
		_onChange:function(value){
			var isValid = this._lengthCheck();
			if(!isValid){
				  this.focusNode.value=this._subString(this.focusNode.value,this.maxLength);
			}
			value = this.getValue();
			this.fireDataChange();
			unieap.fireEvent(this,this.onChange,[value]);
		},
		
		

		   /**
			 * @summary: 点击事件前回调事件
			 * @return: {boolean}
			 */
			onBeforeClick:function(){
				return true;
			},

			/**
			 * @summary: 点击事件
			 * @param: {event} evt
			 */
			onClick:function(evt){
				
				if(this.onclick!=null&&this._trim(this.onclick).length>0){
					eval("("+this.onclick+"(this.imageNode))");
				}
			},
			/**
			 * @summary:
			 * 		当对象内容改变时触发。
			 * @param:
			 * 		{string} value
			 */
			onChange:function(value){
				
				if(this.onchange!=null&&this._trim(this.onchange).length>0){
					eval("("+this.onchange+"('"+value+"'))");	
				}
			}
			,
			fireEvent : function(eventName,args){
				this._hasFiredEvent = this._hasFiredEvent || {};
				if(eventName in this._hasFiredEvent){
					return;
				} 
				this._hasFiredEvent[eventName] = true;
				setTimeout(dojo.hitch(this,function(){
					delete this._hasFiredEvent[eventName];
				}),0);
				return this[eventName](args);
			}
});


dojo.provide("unieap.menu.MenuItem");
dojo.require("dijit._Widget");
dojo.require("dijit._Templated");
dojo.require('dijit._Contained');

dojo.declare("unieap.menu.MenuItem",[dijit._Widget, dijit._Templated, dijit._Contained],{
	/**
	 * @declaredClass:
	 * 		unieap.menu.MenuItem
	 * @summary:
	 * 		菜单项
	 */
	 
	templateString:
		 '<tr class="u-menu-item" dojoAttachPoint="itemNode" >'
			+'<td class="u-menu-itemLeft" dojoAttachPoint="itemLeftNode"><div class="iconfont ${iconClass}" dojoAttachPoint="iconNode" ></div></td>'
			+'<td tabIndex="-1" class="u-menu-itemLabel" dojoAttachPoint="containerNode" waiRole="menuitem">'
				+'<div dojoAttachPoint="labelNode"></div>'
			+'</td>'
			+'<td class="u-menu-itemRight" dojoAttachPoint="arrowCell">'
				+'<div class="u-menu-expand ${lockClass}" dojoAttachPoint="expandNode" >'
				+'</div>'
			+'</td>'
		 +'</tr>',
			
	/**
	 * @summary:
	 * 		指定菜单项名称
	 * @type:
	 * 		{string}
	 * @default：
	 * 		''
	 * @example:
	 * |<div dojoType="unieap.menu.Menu">
	 * |		<div dojoType="unieap.menu.MenuItem" label="中国"></div>
	 * |		<div dojoType="unieap.menu.MenuItem" label="日本"></div>
	 * |</div>
	 */
	label: '',
	
	/**
	 * @summary:
	 * 		指定菜单项左侧的css样式,例如在菜单左侧显示图标
	 * @type:
	 * 		{string}
	 * @example:
	 * |.plusIcon{
	 * |	background-image: url(plus.gif);
	 * |	width: 18px;
	 * |	height: 18px;
	 * |}
	 * |<div dojoType="unieap.menu.Menu">
	 * |		<div dojoType="unieap.menu.MenuItem" label="中国" iconClass="plusIcon"></div>
	 * |		<div dojoType="unieap.menu.MenuItem" label="日本"></div>
	 * |</div>
	 */
	iconClass: "",


    /**
     * @summary:
     * 		指定菜单项右侧侧的css样式,例如在菜单右侧显示上锁图标 添加人 LD
     * @type:
     * 		{string}
	*/
	lockClass:"",


     /**
	 * @summary:
	 * 		设置是否禁用菜单项
	 * @type:
	 * 		{boolean}
	 * @default:
	 * 		false
	 * @example:
	 *|<div dojoType="unieap.menu.Menu">
	 *|		<div dojoType="unieap.menu.MenuItem" label="中国"></div>
	 *|		<div dojoType="unieap.menu.MenuItem" label="日本" disabled="true"></div>
	 *|</div>
	 */
	disabled: false,
	
	postCreate: function(){
		dojo.setSelectable(this.domNode, false);
		this.disabled&&this.setDisabled(this.disabled);
		this._conn();
		if(this.label){
			this.labelNode.innerHTML = this.label;
		}
		if(this.getParent()){
			//dojo.style(this.itemLeftNode,"display","none");解决设置isShowIcon = false时样式错乱问题
			!this.getParent().isShowIcon && dojo.style(this.itemLeftNode,"width","0px");
			this.getParent().menuHeight && dojo.style(this.itemNode,"height",this.getParent().menuHeight);
		}
	},
	
	//为菜单绑定一些操作：鼠标移动到其上、鼠标点击事件
	_conn:function(){
		this.connect(this.itemNode,'onmousemove',this._onMouseMove);
		this.connect(this.itemNode,'onclick',this._onClick);
	},
	
	//鼠标移动到其上，突出显示这一项
	_onMouseMove: function(evt){
		dijit.focus(this.containerNode);
		this._toggleClass(true);
		this.getParent()._mouseOver(this);
	},
	
	//鼠标点击，如果此项设置为disabled，点击无效，否则使菜单消失
	_onClick: function(evt){
		if(this.disabled) return;
		if(false == unieap.fireEvent(this,this.onClick,[this.label, evt])){
			return;
		}
		
		var topMenu=this._getTopMenu();
		dijit.popup.close(topMenu);
		
	},
	
	_getTopMenu: function(){
		var top=this;
		while(top.getParent&&top.getParent()&&top.getParent().parentMenu){
			top._toggleClass(false);
			dijit.popup.close(top.getParent());
			top=top.getParent().parentMenu;
		}
		top._toggleClass(false);
		return top.getParent&&top.getParent();
	},
	
	/**
	 * @summary:
	 * 		点击菜单项时触发，如果返回false点击无效，否则使菜单消失
	 * @param：
	 * 		{string} label
	 * @param:
	 * 		{event} evt
	 * @example:
	 * |<script type="javascript/text">
	 * |	function fn(label,evt) {
	 * |		alert('您点击了'+label);
	 * |	}
	 * |</script>
	 * |<div dojoType="unieap.menu.Menu">
	 * |		<div dojoType="unieap.menu.MenuItem" label="中国" onClick="fn"></div>
	 * |		<div dojoType="unieap.menu.MenuItem" label="日本" disabled="true"></div>
	 * |</div>
	 */
	onClick: function(la, evt) {
		return true;
	},
	
	//判断本项是否是叶子节点
	isLeafNode : function(){
		return this.declaredClass!="unieap.menu.PopupMenuItem";
	},
	
	/**
	 * @summary:
	 * 		隐藏菜单项
	 * @param：
	 * 		{boolean} value
	 * @example:
	 * |    var disItem=new unieap.menu.MenuItem({label:'法国'});
	 * |	disItem.setVisible(true);
	 */
	setVisible : function(/*Boolean*/ value){
		this.domNode.style.display = value?"inline-block":"none";

	},
	
	/**
	 * @summary:
	 * 		设置菜单项是否可用
	 * @param：
	 * 		{boolean} value
	 * @example:
	 * |    var disItem=new unieap.menu.MenuItem({label:'法国'});
	 * |	disItem.setDisabled(true);
	 */
	setDisabled: function(/*Boolean*/ value){

		// summary: enable or disable this menu item
		this.disabled = value;
		if(value){
			this.domNode && dojo.addClass(this.domNode, 'u-menu-itemDisabled');
			var className = null;
			if (this.iconNode) {
				className = this.iconNode.className;
			} 
			if(className&&className.lastIndexOf("Disabled")<0){
				this.iconNode.className= className.concat("Disabled");
			}
			if(!this.isLeafNode()){ 				
				dojo.addClass(this.expandNode, 'u-menu-expandDisabled');
				dojo.removeClass(this.expandNode, 'u-menu-expandEnabled');
			}
		}
		else{
			this.domNode && dojo.removeClass(this.domNode, 'u-menu-itemDisabled');
			var className = null,i;
			if (this.iconNode) {
				className = this.iconNode.className;
			} 
			if(className && (i=className.lastIndexOf("Disabled"))>0){
				this.iconNode.className= className.substring(0,i);
			}
			if(!this.isLeafNode()){	
				dojo.removeClass(this.expandNode, 'u-menu-expandDisabled');
				dojo.addClass(this.expandNode, 'u-menu-expandEnabled');
			}
		}
		
	},
	
	focus: function(){
		this._toggleClass(true);
		try{
			dijit.focus(this.containerNode);
		}catch(e){
			// this throws on IE (at least) in some scenarios
		}
	},
	
	// 更新item的样式
	_toggleClass: function(isHover) {
		if (isHover) {
			dojo.addClass(this.domNode, 'u-menu-itemHover');
			dojo.addClass(this.itemLeftNode, 'u-menu-itemHover');
			dojo.addClass(this.containerNode, 'u-menu-itemHover');
			dojo.addClass(this.arrowCell, 'u-menu-itemHover');
		} else {
			dojo.removeClass(this.domNode, 'u-menu-itemHover');
			dojo.removeClass(this.itemLeftNode, 'u-menu-itemHover');	
			dojo.removeClass(this.containerNode, 'u-menu-itemHover');
			dojo.removeClass(this.arrowCell, 'u-menu-itemHover');
		}
	}
});
dojo.provide("unieap.menu.PopupMenuItem");
dojo.require("unieap.menu.MenuItem");

dojo.declare("unieap.menu.PopupMenuItem",unieap.menu.MenuItem,{
	/**
	 * @summary:
	 * 		弹出菜单，当菜单项有子菜单时,需要使用该控件
	 * @declaredClass:
	 * 		unieap.menu.PopupMenuItem
	 * @superClass:
	 * 		unieap.menu.MenuItem
	 * @example:
	 * |	<div dojoType="unieap.menu.Menu">
	 * |		<div dojoType="unieap.menu.MenuItem" label="单独的"></div>
	 * |		<div dojoType="unieap.menu.PopupMenuItem" label="子项目">
	 * |			<div dojoType="unieap.menu.Menu">
	 * |				<div dojoType="unieap.menu.MenuItem" label="项目一"></div>
	 * |				<div dojoType="unieap.menu.MenuItem" label="项目二"></div>
	 * |			</div>
	 * |		</div>
	 * |	</div>
	 */
	
	/**
	 * @summary:
	 * 		子菜单弹出延迟时间,单位为毫秒
	 * @type:
	 * 		{number}
	 * @default:
	 * 		250
	 * @example:
	 * 		<div dojoType="unieap.menu.PopupMenuItem" label="子项目" popupDelay=500><div>
	 */
	popupDelay: 250,
	
	parentMenu:null,
	
	// 对HTML中包含以下语句进行解析
	// <div dojoType="dijit.PopupMenuItem">
	//		<span>pick me</span>
	//		<popup> ... </popup>
	// </div>
	_fillContent: function(){
		if(this.srcNodeRef){
			var nodes = dojo.query("*", this.srcNodeRef);
			
			if(nodes && nodes[0] && nodes[0].tagName=="SPAN"){
				unieap.menu.PopupMenuItem.superclass._fillContent.call(this, nodes[0]);
			}
			// save pointer to srcNode so we can grab the drop down widget after it's instantiated
			this.dropDownContainer = this.srcNodeRef;
		}
	},
	
	startup: function(){
		if(!this.popup){
			var node = dojo.query("[widgetId]", this.dropDownContainer)[0];
			this.popup = dijit.byNode(node);
			dojo.body().appendChild(this.popup.domNode);
			this.popup.domNode.style.display="none";
		}
		
		dojo.addClass(this.expandNode, "u-menu-expandEnabled");
		dojo.style(this.expandNode, "display", "");
		dijit.setWaiState(this.containerNode, "haspopup", "true");
		this.inherited(arguments);
	},
	
	//鼠标移动到其上，突出显示这一项
	_onMouseMove: function(evt){
		this.inherited(arguments);
		this._startPopupTimer(evt);
	},
	
	//鼠标移动到其上，突出显示这一项
	_onMouseOver: function(evt){
		this.inherited(arguments);
		this._startPopupTimer(evt);
	},
	
	_startPopupTimer: function(evt) {
		if(!this.disabled && !this.hover_timer){
			this.hover_timer = setTimeout(dojo.hitch(this, "_openPopup"), this.popupDelay);
		}
	},
	
	_stopPopupTimer: function() {
		if(this.hover_timer){
			clearTimeout(this.hover_timer);
			this.hover_timer = null;
		}
	},
	
	_openPopup: function(){
		this._stopPopupTimer();	
		var popup = this.popup;
;
		if (popup.isShowingNow) return;
	
		
		popup.startup && popup.startup();
		
		dijit.popup.open({
			parent: this,
			popup: popup,
			around: this.domNode,
			orient: this._orient || (this.isLeftToRight() ?
									{'TR': 'TL', 'TL': 'TR', 'BR': 'BL', 'BL': 'BR'} :
									{'TL': 'TR', 'TR': 'TL', 'BL': 'BR', 'BR': 'BL'})
		});
		popup.parentMenu=this;
		this._onBlur = function(){
			this._toggleClass(false);
			this._closePopup();
		}
		popup._removeAllToggle(popup);
	},
	
	_closePopup: function() {
		this._stopPopupTimer();
		if (!this.popup.isShowingNow) return;
		dijit.popup.close(this.popup);
		this.popup.isShowingNow = false;
	},
	
	//鼠标点击，如果此项设置为disabled，点击无效，否则触发onClick
	_onClick: function(evt){
		if(this.disabled) return;
//		if(this.popup.isShowingNow){
//			this._closePopup();
//		}	
		this.onClick(this.label, evt);
	}
});
dojo.provide("unieap.menu.MenuSeparator");
dojo.require("dijit._Widget");
dojo.require("dijit._Templated");

dojo.declare("unieap.menu.MenuSeparator",[dijit._Widget, dijit._Templated],{
	/**
	 * @declaredClass:
	 * 		unieap.menu.MenuSeparator
	 * @summary:
	 * 		设置菜单项之间的分隔符
	 * @example:
	 * |	<div dojoType="unieap.menu.Menu">
	 * |		<div dojoType="unieap.menu.MenuItem">开始</div>
	 * |		<div dojoType="unieap.menu.MenuSeparator"></div>
	 * |		<div dojoType="unieap.menu.MenuItem">结束</div>
	 * |	</div>
	 */
	
	templateString: '<tr class="u-menu-separator">'
			+'<td class="left">'
			+'<span class="u-menu-item-separator"></span>'
			+'</td><td class="middle">'
			+'<span class="u-menu-item-separator"></span>'
			+'</td><td class="right">'
			+'<span class="u-menu-item-separator"></span>'
			+'</td></tr>',

	postCreate: function(){
		dojo.setSelectable(this.domNode, false);
	}
});
dojo.provide("unieap.menu.Menu");
dojo.require("unieap.menu.MenuItem");
dojo.require("unieap.menu.PopupMenuItem");
dojo.require("unieap.menu.MenuSeparator");
dojo.require("dijit._Widget");
dojo.require("dijit._Templated");
dojo.require("dijit._KeyNavContainer"); 

dojo.declare("unieap.menu.Menu",[dijit._Widget, dijit._Templated, dijit._KeyNavContainer],{
	/**
	 * @declaredClass:
	 * 		unieap.menu.Menu
	 * @summary:
	 * 		弹出菜单控件,可以设置是否屏蔽系统右键菜单、绑定菜单到指定的dom节点，
	 * 		设置和得到object，主动弹出菜单方法
	 * 		当弹出菜单控件时，系统右键菜单不会弹出
	 * @example:
	 * |<div dojoType="unieap.menu.Menu">
	 * |	<div dojoType="unieap.menu.MenuItem">第一个</div>
	 * |	<div dojoType="unieap.menu.MenuItem" disabled="true">第一个</div>
	 * |	<div dojoType="unieap.menu.MenuSeparator"></div>  
	 * |	<div dojoType="unieap.menu.MenuItem">第三个</div>
	 * |</div>
	 */
	 
	constructor: function() {
		this._bindings = [];
	},

	templateString:'<table class="u-menu-table" cellPadding="0" cellSpacing="0" dojoAttachPoint="menuNode" >'
					+'<tbody dojoAttachPoint="containerNode"></tbody>'
					+'</table>',

	isShowingNow: false,
	
	/**
	 * @summary:
	 * 		是否显示此menu中的menuItem的指定菜单项左侧的css样式
	 * @type：
	 * 		{boolean}
	 * @default:
     * 		true
     *  @example:
     * |<div dojoType="unieap.menu.Menu" isShowIcon=false>
	 * |	<div dojoType="unieap.menu.MenuItem">项目一</div>
	 * |	<div dojoType="unieap.menu.MenuItem">项目二</div>
	 * |	<div dojoType="unieap.menu.MenuItem">项目三</div>
	 * |</div>
	 */
	isShowIcon: true,
	
	/**
	 * @summary:
	 * 		指定menu中menuItem的宽度
	 * @type：
	 * 		{Number | String}
	 * @default:
     * 		''
     *  @example:
     * |<div dojoType="unieap.menu.Menu" menuWidth=100>或<div dojoType="unieap.menu.Menu" menuWidth='100px'>
	 * |	<div dojoType="unieap.menu.MenuItem">项目一</div>
	 * |	<div dojoType="unieap.menu.MenuItem">项目二</div>
	 * |	<div dojoType="unieap.menu.MenuItem">项目三</div>
	 * |</div>
	 */
	menuWidth: '',
	
	/**
	 * @summary:
	 * 		指定menu中menuItem的高度
	 * @type：
	 * 		{Number | String}
	 * @default:
     * 		''
     *  @example:
     * |<div dojoType="unieap.menu.Menu" menuHeight=30>或<div dojoType="unieap.menu.Menu" menuHeight='30px'>
	 * |	<div dojoType="unieap.menu.MenuItem">项目一</div>
	 * |	<div dojoType="unieap.menu.MenuItem">项目二</div>
	 * |	<div dojoType="unieap.menu.MenuItem">项目三</div>
	 * |</div>
	 */
	menuHeight: '',
	
	/**
	 * @summary:
	 * 		需要绑定菜单的节点集
	 * @type：
	 * 		{string|array}
	 * @default:
     * 		[]
     *  @example:
     * |<button id="btn1">按钮1</button>
     * |<button id="btn2">按钮2</button>
     * |//通过标签配置时,targetNodeIds为用逗号分隔的字符串
     * |<div dojoType="unieap.menu.Menu" targetNodeIds="btn1,btn2">
     * |	<div dojoType="unieap.menu.MenuItem" label="测试"></div>
     * |</div>
     * @example:
     * |//动态创建菜单,targetNodeIds为数组
     * |var menu=new unieap.menu.Menu(targetNodeIds:['btn1','btn2']);
     * |menu.addChild(new unieap.menu.MenuItem({label:'测试'}));
     * |menu.startup();
	 */
	targetNodeIds: [],
	
	/**
	 * @summary:
	 * 		设置是否屏蔽网页的右键菜单,true则屏蔽
	 * @type：
	 * 		{boolean}
	 * @default:
     * 		false
     * @example:
	 * |var menu=new unieap.menu.Menu({id:'menu',contextMenuForWindow:true});
	 */
	contextMenuForWindow: false,
	
	obj: null,
	
	postCreate: function(){
		dojo.addOnLoad(dojo.hitch(this,function(){
			if(this.contextMenuForWindow){         //屏蔽系统菜单时，将菜单绑定到整个页面中
				dojo.body().oncontextmenu = function(){return false}; //U_EAP00029356
			}else{              //不屏蔽系统菜单时，将菜单绑定到targetNodeIds中的各个节点上
				var self = this;
				dojo.forEach(this.targetNodeIds,function(node){
					self.bindDomNode(node);
				});
			}
		}));
//      多层菜单时有问题 会让菜单提前关闭 暂时屏蔽功能		
//		dojo.connect(this.menuNode,'onmouseleave',this._onMouseLeave);
		
		this.menuWidth && dojo.style(this.menuNode,"width",this.menuWidth);
		
		//单帧下关闭页面时销毁对应的menu
		var framePageContainer = unieap.byId("framePageContainer");
		if(typeof framePageContainer  != 'undefined' && framePageContainer.getSelectedTab()){ //U_EAP00029371
			var currentTab = framePageContainer.getSelectedTab().NavigatorContainer?framePageContainer.getSelectedTab().NavigatorContainer.getSelectedTab():framePageContainer.getSelectedTab();
		}
		if(currentTab){
			var container4Menu = currentTab;
			if(!container4Menu.menu) container4Menu.menu = {};
			container4Menu.menu[this.id] = 1;
		}
//		if(typeof framePageContainer  != 'undefined'){
//			var currentTab = framePageContainer.getSelectedTab();
//		}
//		if(currentTab){
//			var container4Menu = currentTab;
//			if(!container4Menu.menu) container4Menu.menu = {};
//			container4Menu.menu[this.id] = 1;
//		}
	},
	
	_onMouseLeave: function(){
		var thisOpener = this._popupOpener;
		if(thisOpener && thisOpener.declaredClass == "unieap.menu.PopupMenuBarItem"){
			thisOpener._closePopup();
			thisOpener._toggleClass(false);
		}
	},
	
	startup: function(thisOpener){
		this.menuNode._popupOpener = thisOpener;
		dojo.forEach(this.getChildren(), function(child){ child.startup(); });
	},
	
	/**
	 * @summary:
	 * 		手动绑定菜单到指定的控件节点
	 * @param 
     * 		{string|object}  控件ID|指定要绑定的节点控件
     * @example:
     * |	var menu=unieap.byId("aMenu");
     * |	var btn=dojo.byId("btn");
     * |	menu.bindDomNode(btn);//或者menu.bindDomNode("btn");
	 */
	bindDomNode: function(/*String|domNode*/ node){
		var viewContext = this._rootID || "";
		if(dojo.body() !== node){
			if(dojo.isString(node)){
				node = dojo.byId(viewContext+node);
			} else {
				// 解决合并单元格上右健菜单不能弹出问题，此时node的id为空，详见U_EAP00022253
				node = (node.id && dojo.byId(node.id)) || node;
			}
		}
		
		node[this.id] = this._bindings.push([
			dojo.connect(node, "oncontextmenu", this, "_openMyself")
		]);
	},
	
	/**
	 * @summary:
	 * 		解除菜单节点和指定的控件节点的绑定
	 * @param 
	 * 		{string|object}  控件ID|指定要绑定的节点控件
	 * @example:
	 * |	function fn_unbind(){
	 * |		unieap.byId('menu').unBindDomNode(dojo.byId('btn1'));
	 * |		//或者unieap.byId('menu').unBindDomNode('btn1');	
	 * |	}
	 */
	unBindDomNode: function(/*string|domNode*/ nodeName){
		var viewContext = this._rootID || "";
		var node = nodeName;
		if(dojo.isString(node)){
			node = dojo.byId(viewContext+nodeName);
		} else {
			node = dojo.byId(node.id);
		}
		var bid = node[this.id]-1, b = this._bindings[bid];
		dojo.forEach(b, dojo.disconnect,this);
		delete this._bindings[bid];
	},
	
	/**
	 * @summary:
	 * 		主动弹出菜单
	 * @param
	 * 		{object} inData 
	 * @example:
	 * |	var menu=new unieap.menu.Menu({id:'menu',contextMenuForWindow:false});
	 * |	menu.addChild(new unieap.menu.MenuItem({label:'中国'}));
	 * |	menu.addChild(new unieap.menu.MenuItem({label:'美国'}));
	 * |	menu.startup();
	 * |	menu.popup({x:10,y:10});
	 * @example:
	 * |	menu.popup({around:domNode});
	 * @example:
	 * |	menu.popup();
	 */
	popup: function(inData){
		if(inData && ((inData.x&&inData.y)||inData.around)){
			dijit.popup.open(dojo.mixin(inData,{popup:this}));
		} else {
			var loc=this._getMouseLocation()
			dijit.popup.open(dojo.mixin(inData,{x:loc.x, y:loc.y, popup:this}));
		}
		this.onOpen();
		dijit.focus(this.domNode);
	},
	
	//捕获当前事件
	_getEvent: function(){
		if(dojo.isIE) 
			return window.event;
		var func=this._getEvent.caller;        
		while(func!=null){
			var arg0=func.arguments[0]; 
			if(arg0){
				if((arg0.constructor==Event 
					|| arg0.constructor ==MouseEvent) 
					|| (typeof(arg0)=="object" && arg0.preventDefault && arg0.stopPropagation)){
						if(arg0.pageX || arg0.pageY){//U_EAP00029236
							return arg0; 
						}
				}
			}
			func=func.caller; 
        } 
		return null; 
	},
	
   //得到当前鼠标位置 
	_getMouseLocation: function(){
		var e = this._getEvent();
		var mouseX = 0;
		var mouseY = 0;
	
		if(!e) 
			return {x:dojo.body().scrollLeft,y:dojo.body().scrollLeft};
		if(dojo.isIE){
			mouseX = e.clientX; 
			mouseY = e.clientY;
		}else{
			mouseX = e.pageX;
			mouseY = e.pageY;  
		}
		return {x:mouseX,y:mouseY};
	},
	
	//在绑定节点后，右键触发弹出菜单事件
	_openMyself: function(/*Event*/ e){
		//阻止系统右键事件触发
		dojo.stopEvent(e);     
		var x,y;
		if(dojo.isIE){
			x=e.clientX;
			y=e.clientY;
		}else{ //U_EAP00029236
			var loca = this._getMouseLocation();
			x = loca.x;
			y = loca.y;
		}
		
		dijit.popup.open({                       //在焦点处弹出右键菜单
			popup: this,
			x: x,
			y: y,
			orient: this._orient || (this.isLeftToRight() ?
									{'TR': 'TL', 'TL': 'TR', 'BR': 'BL', 'BL': 'BR'} :
									{'TL': 'TR', 'TR': 'TL', 'BL': 'BR', 'BR': 'BL'})
		});
				
		this._removeAllToggle(this);
		
		this.focus();
		this._onBlur = function(){
			dijit.popup.close(this);
		}
	},
	
	//鼠标在popupMenuItem上划过时，不弹出子菜单
	_onBlur: function() {
		if (this.isShowingNow){
			dijit.popup.close(this);
			this.isShowingNow=false;
		}		
	},
	
	_removeAllToggle: function(menu){
		var children = menu.getChildren();
		dojo.forEach(children, function(child) {
			child._toggleClass && child._toggleClass(false);
		}, this);
	},
	
	/**
	 * @summary
	 * 		设置object
	 * @param
	 * 		{object} obj 要设置的Object
	 * @description:
	 * 		用户可以把绑定菜单的节点保存在这里，用getObject方法可以获取到
	 */
	setObject: function(obj) {
		this.obj = obj;
	},
	
	/**
	 * @summary
	 * 		获取object
	 * @description:
	 * 		和setObject结合使用
	 */
	getObject: function(){
		return this.obj;
	},
	
	onOpen: function(/*event*/ e){
		dojo.style(this._popupWrapper,"zIndex","10000");
		this.isShowingNow = true;
	},
	
	//----当item的mouseover触发时触发
	_mouseOver: function(item) {
		clearTimeout(this._timeout);
		var children = this.getChildren();
		dojo.forEach(children, function(child) {
			if (child!=item) {
				child._toggleClass && child._toggleClass(false);
				child._closePopup && child._closePopup();
			}
		}, this);
		if(item.disabled){
			item._toggleClass && item._toggleClass(false);
		}
	},
	
	//销毁对象
	destroy: function(){
		dojo.forEach(this._bindings,function(handles){
			if(handles){
				while(handles.length){
					dojo.disconnect(handles.pop());
				}
			}
		});
		var children = this.getChildren();
		dojo.forEach(children, function(child) {
			child.popup && child.popup.destroy();
			child.destroy();
		}, this);
		this.inherited(arguments);
	}
});
dojo.require("unieap.menu.MenuItem");
dojo.require("dijit._Widget");
dojo.require("dijit._Templated");
dojo.require("dijit._Contained");
dojo.provide("unieap.menu.MenuBarItem");
dojo.declare("unieap.menu.MenuBarItem", [dijit._Widget, dijit._Templated, dijit._Contained], {
	
	templateString: 
		"<div class='menuBarItem' dojoAttachPoint='containerNode' >" +
		"</div>",
		
	attributeMap: dojo.delegate(dijit._Widget.prototype.attributeMap, {
		label: { node: "containerNode", type: "innerHTML" }
	}),
	
	baseClass: "menuBarItem",
	
	/**
	 * @summary:
	 * 		指定菜单项名称
	 * @type:
	 * 		{string}
	 * @default：
	 * 		''
	 * @example:
	 * |<div dojoType="unieap.menu.MenuBar">
	 * |		<div dojoType="unieap.menu.MenuBarItem" label="中国"></div>
	 * |		<div dojoType="unieap.menu.MenuBarItem" label="日本"></div>
	 * |</div>
	 */	
	label: '',

	/**
	 * @summary:
	 * 		设置是否禁用菜单项
	 * @type:
	 * 		{boolean}
	 * @default:
	 * 		false
	 * @example:
	 *|<div dojoType="unieap.menu.MenuBar">
	 *|		<div dojoType="unieap.menu.MenuBarItem" label="中国"></div>
	 *|		<div dojoType="unieap.menu.MenuBarItem" label="日本" disabled="true"></div>
	 *|</div>
	 */
	disabled: false,


	postCreate: function(){
		this.inherited(arguments);
		var label = this.id+"_text";
		dojo.attr(this.containerNode, "id", label);
		dojo.setSelectable(this.domNode, false);
		this.disabled&&this.setDisabled(this.disabled);
		this._conn();
	},
	
	_conn:function(){
		this.connect(this.containerNode,'onmousemove',this._onMouseMove);
		this.connect(this.containerNode,'onmouseout',this._onMouseOut);
		this.connect(this.containerNode,'onclick',this._onClick);
	},
	
	_onMouseOut: function(evt){
		if( this._isPopupOpen || this.getParent().focusChild == this){
			(!this.getParent().autoPopup) && this._toggleClass(false);
			 this.getParent().focusChild = this;
			 return;
		}
		this._toggleClass(false);
		this._closePopup && this._closePopup();
	},
	
	_onMouseMove: function(evt){
		var focusChild = this.getParent().focusChild;
		if(focusChild != this){
			if(focusChild){
				focusChild._toggleClass(false);
				focusChild._closePopup && focusChild._closePopup();
			}
			this.getParent().focusChild = this;
			this.getParent().autoPopup && this._startPopupTimer && this._startPopupTimer(evt);
		}
		dijit.focus(this.containerNode);
		!this.disabled && this._toggleClass(true);
		this.getParent().autoPopup && this._openPopup && this._openPopup();
	},

	_onClick: function(evt){
		if(this.disabled) return;
		this.getParent().autoPopup = true;
		this.getParent().focusChild = this;
		this._startPopupTimer && this._startPopupTimer(evt);
		if(false == unieap.fireEvent(this,this.onClick,[this.label, evt])){
			return;
		}
		dojo.stopEvent(evt);
	},

	/**
	 * @summary:
	 * 		点击菜单项时触发
	 * @param：
	 * 		{string} label
	 * @param:
	 * 		{event} evt
	 * @example:
	 * |<script type="javascript/text">
	 * |	function fn(label,evt) {
	 * |		alert('您点击了'+label);
	 * |	}
	 * |</script>
	 * |<div dojoType="unieap.menu.MenuBar">
	 * |		<div dojoType="unieap.menu.MenuBarItem" label="中国" onClick="fn"></div>
	 * |		<div dojoType="unieap.menu.MenuBarItem" label="日本" disabled="true"></div>
	 * |</div>
	 */
	onClick: function(label, /*Event*/ evt){
		return true;
	},

	focus: function(){
		this._toggleClass(true);
		dijit.focus(this.domNode);
		
	},
	
	_toggleClass: function(isHover) {
		if (isHover) {
			dojo.addClass(this.domNode, 'menuBarItemHover');
		} else {
			dojo.removeClass(this.domNode, 'menuBarItemHover');
		}
	},

	/**
	 * @summary:
	 * 		设置菜单项是否可用
	 * @param：
	 * 		{boolean} value
	 * @example:
	 * |    var disItem=new unieap.menu.MenuBarItem({label:'法国'});
	 * |	disItem.setDisabled(true);
	 */
	setDisabled: function(/*Boolean*/ value){
		if(value){
			this.domNode && dojo.addClass(this.domNode, 'u-menu-itemDisabled');
		}
		else{
			this.domNode && dojo.removeClass(this.domNode, 'u-menu-itemDisabled');
		}
	}
	
});
dojo.provide("unieap.menu.PopupMenuBarItem");
dojo.require("unieap.menu.MenuBarItem");
dojo.declare("unieap.menu.PopupMenuBarItem", [unieap.menu.MenuBarItem], {

	// 对HTML中包含以下语句进行解析
	// <div dojoType="dijit.PopupMenuItem">
	//		<span>pick me</span>
	//		<popup> ... </popup>
	// </div>
	_fillContent: function(){
		if(this.srcNodeRef){
			var nodes = dojo.query("*", this.srcNodeRef);
			
			if(nodes && nodes[0] && nodes[0].tagName=="SPAN"){
				unieap.menu.PopupMenuItem.superclass._fillContent.call(this, nodes[0]);
			}
			this.dropDownContainer = this.srcNodeRef;
		}
	},
	
	_isPopupOpen: false,

	startup: function(){
		this._orient = this.isLeftToRight() ? {BL: 'TL'} : {BR: 'TR'};
		if(this._started){ return; }
		this.inherited(arguments);

		// we didn't copy the dropdown widget from the this.srcNodeRef, so it's in no-man's
		// land now.  move it to dojo.doc.body.
		if(!this.popup){
			var node = dojo.query("[widgetId]", this.dropDownContainer)[0];
			this.popup = dijit.byNode(node);
		}
		dojo.body().appendChild(this.popup.domNode);
		this.popup.startup();

		this.popup.domNode.style.display="none";
		if(this.arrowWrapper){
			dojo.style(this.arrowWrapper, "visibility", "");
		}
		dijit.setWaiState(this.containerNode, "haspopup", "true");
	},
	
	_onMouseOver: function(evt){
		this.inherited(arguments);
		this.getParent().autoPopup && this._startPopupTimer(evt);
	},
	
	_startPopupTimer: function(evt) {
		if(!this.disabled && !this.hover_timer){
			this.hover_timer = setTimeout(dojo.hitch(this, "_openPopup"), this.popupDelay);
		}
	},
	
	_stopPopupTimer: function() {
		if(this.hover_timer){
			clearTimeout(this.hover_timer);
			this.hover_timer = null;
		}
	},
	
	_openPopup: function(){
		this._stopPopupTimer();	
		var popup = this.popup;
		popup.startup && popup.startup(this);
		dijit.popup.open({
			parent: this,
			popup: popup,
			around: this.domNode
		});
			
		popup.parentMenu=this;
		var children = popup.getChildren();
		dojo.forEach(children, function(child) {
			child._toggleClass && child._toggleClass(false);
		}, this);
		this._onBlur = function(){
			this._toggleClass(false);
			this._closePopup();
		}
	},
	
	_closePopup: function() {
		this._stopPopupTimer();
		dijit.popup.close(this.popup);
	}
});

dojo.provide("unieap.menu.MenuBar");
dojo.require("unieap.menu.MenuBarItem");
dojo.require("unieap.menu.PopupMenuBarItem");
dojo.require("dijit._Widget");
dojo.require("dijit._Templated");
dojo.require("dijit._KeyNavContainer"); 
dojo.declare("unieap.menu.MenuBar",[dijit._Widget, dijit._Templated, dijit._KeyNavContainer], {
	/**
	 * @declaredClass:
	 * 		unieap.menu.MenuBar
	 * @summary:
	 * 		横向菜单控件。
	 * @example:
	 * |<div dojoType="unieap.menu.MenuBar">
	 * |	<div dojoType="unieap.menu.MenuItem" disabled="true">第一个</div>
	 * |	<div dojoType="unieap.menu.PopupMenuBarItem" label="第二个">
	 * |		 <div dojoType="unieap.menu.Menu">
	 * |			<div dojoType="unieap.menu.MenuItem">子项1</div>
	 * |			<div dojoType="unieap.menu.MenuItem" disabled="true">子项2</div>
	 * |			<div dojoType="unieap.menu.MenuSeparator"></div>  
	 * |			<div dojoType="unieap.menu.MenuItem">子项3</div>
	 * |		 </div>
	 * |	</div>
	 * |	<div dojoType="unieap.menu.MenuBarItem">第三个</div>
	 * |</div>
	 */

	templateString: 
		"<div class='menuBar' dojoAttachPoint='containerNode'>" +
		"</div>",

	focusChild: null,
	
	/**
	 * @summary:
	 * 		指定menuBar是否默认弹出,如果采用默认值，第一次弹出menu需要鼠标点击MenuBar。如需页面加载后鼠标滑过MenuBar时弹出menu需要设置这个属性为true
	 * @type：
	 * 		{boolean}
	 * @default:
     * 		false
     *  @example:
     * |<div dojoType="unieap.menu.MenuBar" autoPopup=true>
	 * |	<div dojoType="unieap.menu.MenuBarItem" label="项目一"></div>
	 * |	<div dojoType="unieap.menu.PopupMenuBarItem" label="项目二">
	 * |		<div dojoType="unieap.menu.Menu" isShowIcon=false menuWidth=100 menuHeight=30>
	 * |			<div dojoType="unieap.menu.MenuItem">子项目一</div>
	 * |			<div dojoType="unieap.menu.MenuItem">子项目二</div>
	 * |			<div dojoType="unieap.menu.MenuItem">子项目三</div>
	 * |		</div>
	 * |	</div>
	 * |</div>
	 */
	autoPopup: false,
	
	postCreate: function(){
		
		dojo.forEach(this.getChildren(), function(child){ child.startup(); });
	}
});
dojo.provide("unieap.dialog.Dialog");
dojo.require("dojo.fx");
dojo.require("dijit._Widget");
dojo.require("dijit._Templated");
(function () {
	var iframeManager = new function () {
		this.getIframe = function () {
			var iframe = dojo.create("iframe", {
				className: "unieap-dlg-contentIframe",
				frameBorder: 0,
				onactivate: function (evt) {
					dojo.stopEvent(evt);
				}
			}, dojo.body());
			dojo.style(iframe, "display", "block");
			return iframe;
		}
	}();

	dojo.declare("unieap.dialog.Dialog", [dijit._Widget, dijit._Templated], {
		/**
		 * @declaredClass:
		 * 		unieap.dialog.Dialog
		 * @summary:
		 * 		模态对话框实现类
		 * @classDescription:
		 *     	可以自定义显示内容，样式。
		 *     	可以通过脚本或标签创建Dialog。
		 *     	支持动画效果。
		 *     	支持拖拽位置，拖拽边框改变大小。
		 * @example:
		 * |var dialog = new unieap.dialog.Dialog({
		 * |	inner: "Hello World!",
		 * |	title:"Hello World!",
		 * |	height:"200",
		 * |	width:"200"
		 * |});
		 * |dialog.show();
		 * @example:
		 * |var dialog = DialogUtil.showDialog({
		 * |	inner: "Hello World!",
		 * |	title:"Hello World!",
		 * |	height:"200",
		 * |	width:"200"
		 * |});
		 * 		初始化一个Dialog,并显示出来
		 * @img:
		 *      images/dialog/dialog.png
		 */

		/**
		 * @summary:
		 *      	回调函数的上下文，用户一般较少用到
		 * @type:
		 *   	{object}
		 * @default:
		 *     	null
		 * @description:
		 *     	对话框关闭的时候，调用的回调函数的上下文，也就是函数的this。
		 * @example:
		 * |<div dojoType="unieap.form.TextBox" id='text' value="initText"></div>
		 * |var dialog = new unieap.dialog.Dialog(
		 * |		{${1}src:unieap.byId("text"),
		 * |     iconCloseComplete: true,
		 * |		onComplete:test,
		 * |		url:"<%=appPath%>/pages/samples/dialog/inner.jsp"}
		 * |);
		 * |function test(){
		 * |		alert(${2}this.getValue())
		 * |}
		 * ${1}src配置的对象
		 * ${2}将会成为回调函数的this
		 */
		src: null,

	    /**
	     * @summary:
	     *      对话框的宽度
	     * @type:
	     *   	{number}   
	     * @description:
	     *     	对话框的默认宽度，单位为"px"。如果不设置将会根据内容自动撑开。
	     */
		width: "",

	    /**
	     * @summary:
	     *      对话框的高度
	     * @type:
	     *   	{number}
	     * @description:
	     *     	对话框的默认高度，单位为"px"。如果不设置将会根据内容自动撑开。
	     */
		height: "",

	    /**
	     * @summary:
	     *      对话框的标题
	     * @type:
	     *   	{string}
	     * @default:
	     *     	对话框
	     */
		title: RIA_I18N.dialog.dialog.title,

	    /**
	     * @summary:
	     *      对话框关闭的回调函数
	     * @type:
	     *   	{function}
	     * @default:
	     *     	null
	     * @description:
	     *     	对话框关闭时，会执行的回调函数
	     * 	  	当通过关闭按钮关闭对话框时，需要将iconCloseComplete设置为true才能执行回调函数
	     *     	如果通过脚本关闭对话框不需要设置iconCloseComplete
	     *     	其参数通过setReturn方法进行设置
	     */
		onComplete: null,

	    /**
	     * @summary:
	     *      对话框内的显示内容
	     * @type:
	     *   	{string|domNode}
	     * @default:
	     *     	null
	     * @description:
	     *     	通过指定html代码片段或domNode确定对话框内的显示内容
	     *     	若同时配置了url，以inner属性优先
	     * @example:
	     * |var inner = "对话框显示的内容是预先定义，该对话框可以最大化和拖拽改变位置。"
	     * |var dialog = new unieap.dialog.Dialog({inner:inner});
	     * |dialog.show(document.getElementById("btn1"));
	     */
		inner: "",


		/**
	     * @summary:
	     * 		是否显示渐入渐出效果
	     * @type:
	     * 		{boolean}
	     * @default:
	     * 		读取unieap.animate的值
	     * @description:
	     *      在对话框生成和关闭的时候，会有渐入渐出的效果
	     */
		animate: (typeof (unieap.animate) == 'undefined') ? true : unieap.animate,

	    /**
	     * @summary:
	     *      对话框内容的链接地址
	     * @type:
	     *   	{string}
	     * @default:
	     *     	null
	     * @description:
	     *    	指定一个链接地址，作为对话框的显示内容
	     * @example:
	     * |var dialog = new unieap.dialog.Dialog({url:"<%=appPath%>/pages/samples/dialog/inner.jsp"});
		 * |dialog.show(document.getElementById("btn2")); 
	     */
		url: "",

	    /**
	     * @summary:
	     *      是否支持最大化功能
	     * @type:
	     *   	{boolean}
	     * @default:
	     *    	 true
	     * @description:
	     *    	设置是否显示最大化按钮，若显示的话，点击会将对话框扩大至整个页面
	     */
		isExpand: true,

		/**
	     * @summary:
	     *      是否按照显示器窗口大小最大化显示
	     * @type:
	     *   	{boolean}
	     * @default:
	     *     	false
	     * @description:
	     *    	设置是否按照显示器窗口大小最大化显示
	     */
		isMax: false,

	    /**
	     * @summary:
	     *      是否支持图标关闭功能
	     * @type:
	     *   	{boolean}
	     * @default:
	     *     	true
	     * @description:
	     *    设置是否显示关闭按钮，若不显示的话，只能通过程序控制进行对话框的关闭
	     *    适用于用户必须作出一定输入的情况
	     */
		isClose: true,

	    /**
	     * @summary:
	     *      是否可以通过拖拽重设对话框大小
	     * @type:
	     *   	{boolean}
	     * @default:
	     *     	true
	     */
		resizable: true,

	    /**
	     * @summary:
	     *      对话框的最小宽度
	     * @type:
	     *   	{number}
	     * @default:
	     *     	185
	     * @description:
	     *      为了保证对话框的显示效果，可设置本属性的值
	     *      若指定的width小于最小宽度，将以最小宽度的值进行显示
	     *      在允许拖拽调整大小的情况下，调整后对话框的宽度不会小于此值
	     */
		minWidth: "185",

	    /**
	     * @summary:
	     *      对话框的最小高度
	     * @type:
	     *   	{number}
	     * @default:
	     *     	80
	     * @description:
	     *      为了保证对话框的显示效果，可设置本属性的值
	     *      若指定的height小于最小高度，将以最小宽度的值进行显示
	     *      在允许拖拽调整大小的情况下，调整后对话框的高度不会小于此值
	     */
		minHeight: "80",

	    /**
	     * @summary:
	     *      父窗口传递到弹出窗口的对象
	     * @type:
	     *   	{object}
	     * @default:
	     *     	null
	     * @description:
	     *     	父窗口传递到对话框的数据
	     *     	对话框组件可以使用getObject方法得到该对象
	     * @example:
	     * |DialogUtil.showDialog({
	     * |		url:"<%=appPath%>/pages/samples/dialog/target.jsp",
	     * |		onComplete:bindDataToForm,
	     * |		dialogData:{name:"param1",value:"param2"},
	     * |		width:"500",
	     * |		height:"400"},
         * |	toSelect.domNode);
	     */
		dialogData: null,

	    /**
	     * @summary:
	     *      点击右上角的关闭按钮时，是否调用回调函数
	     * @type:
	     *   	{boolean}
	     * @default:
	     *     false
	     * @description:
	     *     通过点击右上角的关闭按钮，将对话框关闭的时候，是否会调用回调函数
	     *     默认值为false，即点击按钮关闭对话框，将不会调用指定的回调函数
	     */
		iconCloseComplete: false,

		/**
		 * @summary:
		 * 		和dialogData类似，但是它配置一个函数来供用户使用
		 * @type:
		 * 		{function}
		 * @description:
	     *     	该对象可以通过getObject方法执行配置的function
		 * @example:
		 * |<div dojoType="unieap.dialog.Dialog" id="dialog" url="/demo.do" getDialogData="fn"></div>
		 * |function fn(){
		 * |	//用户自己处理、获取数据
		 * |	var obj=someMethod.getObj();
		 * |	return obj;
		 * |}
		 * |
		 * | var dialog = unieap.byId("dialog");
		 * | alert(dialog.getObject());
		 */
		getDialogData: null,


		//按纽列表，内部属性，供信息提示框使用，记录按钮的引用
		buttons: null,

		//移动和拖拽调整大小时显示的层
		_moveDiv: null,

		//返回数据对象
		returnObj: null,

		//对话框的主要内容保存的iframe
		dialogFrame: null,

		//临时的事件，当对话框进行拖动时会用到
		tempEvents: null,

		//渐入渐出时开始的x坐标，在渐入渐出时都会用到
		startx: null,

		//渐入渐出时开始的y坐标，在渐入渐出时都会用到
		starty: null,

		//渐入渐出时开始的宽度，在渐入渐出时都会用到
		startWidth: null,

		//渐入渐出时开始的高度，在渐入渐出时都会用到
		startHeight: null,

		//开始时对话框顶部所在x的位置，用于对话框的拖拽位置
		startHeadx: 0,

		//开始时对话框顶部所在y的位置，用于对话框的拖拽位置
		startHeady: 0,

		//拖拽前对话框的x位置
		winStartx: 0,//窗口的最初位置。

		//拖拽前对话框的y位置
		winStarty: 0,//窗口的最初位置。

		//是否在移动
		isHeadmove: false,

		//是否正在进行resize操作
		isResizing: false,

		//要调整大小的方式
		resizeType: '',

		//按钮是否获得焦点，用于信息提示框组件，对于除输入型的信息提示框外，需要在生成的时候，进行焦点聚焦
		buttonFocus: null,

		_iconClose: false,

		//在已经有弹出对话框的情况下，再次弹出对话框 此属性指前一对话框
		preDialog: null,

		//对话框已弹出且再次弹出别的对话框时，用于遮挡本对话框的层
		_modalDiv: null,

		//是否处于最大化状态
		_isExpanded: false,

		//对话框初始应该显示的位置
		_initX: null,

		//对话框初始应该显示的位置
		_initY: null,

		//记录对话框在最大化时的参数，以确定当恢复原状时的位置和大小
		_beforeExpandPara: null,

		_isReady: false,

		_isShow: false,

		//是否根据显示的内容确定对话框高宽
		_autoWidth: false,

		_autoHeight: false,

		_buttonArea: null,

		hideTitle: false,


		templateString: "<div class=\"u-dlg\"  dojoAttachPoint=\"mainNode\"  style=\"display:none\">" +
			"<div class=\"u-dlg-mt\" dojoAttachPoint=\"topNode\">" +
			"<div class=\"u-dlg-mtl\"></div>" +
			"<div class=\"u-dlg-mtr\"></div>" +
			"<div class=\"u-dlg-mtc\" dojoAttachPoint=\"topContentNode\">" +
			"<div class=\"u-dlg-mtt\"  dojoAttachPoint=\"dialogTitleNode\"></div>" +
			"<div class=\"u-dlg-mtb\" dojoAttachPoint=\"topButtonNode\">" +
			"<span class=\"u-dlg-be\"  dojoAttachPoint=\"enlargeNode\">&nbsp;&nbsp;&nbsp;&nbsp;</span>" +
			"<span  class=\"u-dlg-bc\" dojoAttachPoint=\"closeNode\">&nbsp;&nbsp;&nbsp;&nbsp;</span>" +
			"</div>" +
			"</div>" +
			"</div>" +
			"<div class=\"u-dlg-mm\"   dojoAttachPoint=\"dialogMiddle\">" +
			"<div class=\"u-dlg-ml\" dojoAttachPoint=\"dialogLeftBorder\"></div>" +
			"<div class=\"u-dlg-mr\" dojoAttachPoint=\"dialogRightBorder\"></div>" +
			"<div class=\"u-dlg-mmm\" dojoAttachPoint=\"dialogMiddleMain\">" +
			"<div class=\"u-dlg-mmf\" dojoAttachPoint=\"dialogMain\" style=\"height:100%\">" +
			"<div class=\"u-dlg-mmc\"  dojoAttachPoint=\"dialogMainContent\">" +
			"</div>" +
			"</div>" +
			"<div class=\"u-dlg-mmb\" style=\"display:block;\" align=\"center\" dojoAttachPoint=\"dialogMiddleButton\">" +
			"</div>" +
			"</div>" +
			"</div>" +
			"<div class=\"u-dlg-mb\"  dojoAttachPoint=\"dialogBottom\">" +
			"<div class=\"u-dlg-mbl\" dojoAttachPoint=\"dialogBottomLeft\"></div>" +
			"<div class=\"u-dlg-mbr\" dojoAttachPoint=\"dialogBottomRight\"></div>" +
			"</div>" +
			"<div dojoAttachPoint='containerNode' style='display:none'></div>" +
			"</div>",

		postCreate: function () {
			//_createDlgWithTag用来判断dialog是否通过标签来创建
			this.enlargeNode.title = RIA_I18N.dialog.dialog.maximinze;
			this.closeNode.title = RIA_I18N.dialog.dialog.close;
			this.srcNodeRef && (this._createDlgWithTag = true);
			if (!this._createDlgWithTag) {
				//如果当前dialog弹出之前已经存在dialog,创建一个蒙层挡住之前的dialog
				this.updatePreDlg();
				//注册该对话框
				this.addDialog(this);
				//创建当前对话框的iframe
				this.initModal();
				//创建移动对象。
				this._createMoveDiv();
			}
			//让已经聚焦的其他控件失去焦点
			unieap.blurWidget();
			this.buttons = [];
			this.tempEvents = [];
			//若当前对话框的前面已经有一个模态对话框，则再次弹出模态对话框时，将前一对话框遮挡住
			if (this.inner && typeof (this.inner) == "object" && this.inner.parentNode && this.inner.parentNode.nodeType != 11) {
				this.innerParentNode = this.inner.parentNode;
			}
			document.body.appendChild(this.domNode);
			this._dealDialogSize();
			//保存原始的url
			this.originUrl = this.url;
			/*
			 * 为事业部扩展提供切入点，不要删除
			 */
			this._postCreate_ex();
			if (this._rootID != "") {
				var rootWidget = dijit.byId(this._rootID);
				if (rootWidget instanceof unieap.layout.ContentPane) {
					if (rootWidget.xhref) {
						var container4Dialog = rootWidget;
						if (!container4Dialog.dialog) container4Dialog.dialog = {};
						container4Dialog.dialog[this.id] = 1;
					}
				} else {
					//单帧下关闭页面时销毁对应的dialog
					var framePageContainer = unieap.byId("framePageContainer");
					if (typeof framePageContainer != 'undefined' && framePageContainer.getSelectedTab()) {
						var currentTab = framePageContainer.getSelectedTab().NavigatorContainer ? framePageContainer.getSelectedTab().NavigatorContainer.getSelectedTab() : framePageContainer.getSelectedTab();
					}
					if (currentTab) {
						var container4Dialog = currentTab;
						if (!container4Dialog.dialog) container4Dialog.dialog = {};
						container4Dialog.dialog[this.id] = 1;
					}
				}
			}
		},

		//处理dialog的高度和宽度
		_dealDialogSize: function () {
			this.minWidth = parseInt(this.minWidth, 10);
			this.minHeight = parseInt(this.minHeight, 10);
			if (this.isMax) {
				var vs = dojo.window.getBox();
				this.width = vs.w;
				this.height = vs.h;
				this._isExpanded = true;
				this.enlargeNode.className = "u-dlg-bs";
			} else {
				//宽度处理
				if (this.width && this.width != "auto") {
					this.width = parseInt(this.width, 10);
					if (this.width < this.minWidth) {
						this.width = this.minWidth;
					}
				} else {
					this.width = 50;
					this._autoWidth = true;
				}
				//高度处理
				if (this.height && this.height != "auto") {
					this.height = parseInt(this.height, 10);
					if (this.height < this.minHeight) {
						this.height = this.minHeight;
					}
				} else {
					this.height = 80;
					this._autoHeight = true;
				}
			}
		},

		_postCreate_ex: function () {

		},

		//如果当前的dialog之前已经存在dialog，在之前的dialog上加一个蒙层
		updatePreDlg: function () {
			var aDlg = this.getUtil().getDialogs(),
				preDlg = aDlg && aDlg[aDlg.length - 1];
			if (preDlg) {
				this.preDialog = preDlg;
				preDlg._isShow && this._createModalDiv();
				this.mainNode.style.zIndex = Number(preDlg.mainNode.style.zIndex) + 2;
			} else if (this.domNode.className.indexOf('u-dlg') > -1) {
				this.mainNode.style.zIndex = 10004;
			} else {
				this.mainNode.style.zIndex = 3000;
			}
		},

		innerShow: function () {
			//真正显示对话框
			this.initShowContent();
			//用div标签创建的dialog不用多次进行数据绑定
			!this._dlgClosed && this.initEvent();
			this.domNode.style.display = "block";
			if (this._isUseButton() && this.buttonFocus) {
				this.buttons[0].focusNode.focus();
			}
			//		 this._moveDiv.style.display="none" //添加这句话会导致动画渐入效果无法展现
			this._isShow = true;
			if (this.isMax) {
				this.enlargeNode.className = "u-dlg-bs";
				this._isExpanded = true;
			}
			dojo.attr(this.domNode, 'title', '');
			unieap.fireContainerResize(this.domNode);

		},


		startup: function () {
			var nodes = dojo.query("*", this.containerNode);
			//nodes.length>0&&!this.url&&(this.inner=this.containerNode);
			if (nodes.length > 0 && !this.url) {
				this.inner = this.containerNode;
				this.innerParentNode = this.domNode;
			}
		},


		/**
		* @summary：
		*         显示本对话框
		*  @param 
		*         {domNode}  渐入渐出效果起始和终止的dom对象
		*  @param:
		*  		{object} parameters 参数对象仅在url属性设置了才有效
		*  @description:
		*         显示本对话框
		*         通过new方法或者调用DialogUtil.createDialog生成的对话框默认会处于不可见状态，调用此方法能够使得对话框可见
		*  @example:
		*  |var dialog = new unieap.dialog.Dialog(args);
		*  |dialog.show(document.getElementById("sourceNode"));
		*  @example:
		*  |var dialog = DialogUtil.createDialog(args);
		  *  |dialog.show(document.getElementById("sourceNode"));
		  *  @example:
		  *  |var dialog=new unieap.dialog.Dialog({url:'/hello.action'});
		  *  |//载入页面的url为/hello.action?name=jack
		  *  |dialog.show(null,{'name':'jack'});
		*/
		show: function (refNode, parameters) {
			var framePageContainer = unieap.byId("framePageContainer");//U_EAP00028323
			var unieapMenuId = null;
			if (typeof framePageContainer != 'undefined' && framePageContainer.getSelectedTab() && framePageContainer.getSelectedTab().NavigatorContainer) {
				unieapMenuId = framePageContainer.getSelectedTab().NavigatorContainer.id.substring("navigatorContainer".length);
			}
			if (unieapMenuId && this.url) {
				//如果通过标签创建的dialog关闭后再重新显示,需要更新自己的preDialog属性
				if (typeof (parameters) == 'object' && this.url) {
					parameters["unieapMenuId"] = unieapMenuId;
					parameters["menuId"] = unieapMenuId;
					this.url = unieap.buildRequestPath(this.originUrl, parameters);
				} else {
					this.url = this.originUrl.indexOf("?") == -1 ? this.originUrl + "?unieapMenuId=" + unieapMenuId : this.originUrl + "&unieapMenuId=" + unieapMenuId;
					this.url = this.url + '&menuId=' + unieapMenuId;
				}
			} else {
				//如果通过标签创建的dialog关闭后再重新显示,需要更新自己的preDialog属性
				if (typeof (parameters) == 'object' && this.url) {
					this.url = unieap.buildRequestPath(this.originUrl, parameters);
				} else {
					this.url = this.originUrl;
				}
			}
			if (this._createDlgWithTag) {
				this.updatePreDlg();
				this.addDialog(this);
				this.initModal();
				this._createMoveDiv();
				this._iconClose = false;
				!this.url && dojo.style(this.containerNode, "display", "block");
			}
			var bgMask = dojo.byId("bgMaskDialog");
			bgMask && dojo.style(bgMask, "display", "block");
			this.refNode = refNode;
			this.innerShow();

 		/*
 		 * 由于popup的z-index高于dialog，
 		 * 需要在Dialog弹出时，关闭已经弹出的popup
 		 */
			dojo.require("unieap.form.Popup");
			if (unieap.form.Popup.popwidget) {
				var id = unieap.form.Popup.popwidget;
				var popwidget = dijit.byId(id);
				popwidget && popwidget.getPopup().close();
			}
		},
		startAnim: function () {
			var viewport = dijit.getViewport();
			this._initX = Math.floor(viewport.l + (viewport.w - this.width) / 2) > 0 ? Math.floor(viewport.l + (viewport.w - this.width) / 2) : "0";
			this._initY = Math.floor(viewport.t + (viewport.h - this.height) / 2) > 0 ? Math.floor(viewport.t + (viewport.h - this.height) / 2) : "0";
			dojo.style(this.mainNode, {
				left: this._initX + "px",
				top: this._initY + "px"
			});
			if (this.animate) {
				var viewport = dijit.getViewport();
				this.starty = Math.floor(viewport.t + 10);
				this.startx = Math.floor(viewport.l + 800);
				this.startWidth = "50";
				this.startHeight = "30";
				var topWin = unieap.getTopWin();
				if (this.refNode && this.getWindow() == topWin) {
					var pos = dojo.coords(this.refNode, true);
					if (dojo.isIE) {
						this.starty = pos.y + dijit.getDocumentWindow(this.refNode.ownerDocument).screenTop - topWin.screenTop;
						this.startx = pos.x + dijit.getDocumentWindow(this.refNode.ownerDocument).screenLeft - topWin.screenLeft;
					} else {
						var position = this.getObjTopRect(this.refNode);
						this.starty = position.top;
						this.startx = position.left;
					}
					this.startWidth = pos.w;
					this.startHeight = pos.h;
				} else if (this.refNode) {
					var pos = dojo.coords(this.refNode, true);
					this.starty = pos.y;
					this.startx = pos.x;
					this.startWidth = pos.w;
					this.startHeight = pos.h;
				}
				dojo.style(this._moveDiv, {
					width: this.startWidth + "px",
					height: this.startHeight + "px",
					left: this.startx + "px",
					top: this.starty + "px",
					display: "block"
				});
				var anim = dojo.animateProperty({
					node: this._moveDiv,
					duration: 450,
					properties: {
						width: { end: this.width, unit: "px" },
						height: { end: this.height, unit: "px" },
						top: this._initY,
						left: this._initX,
						unit: "px"
					},
					onEnd: dojo.hitch(this, function () {
						this._moveDiv.style.display = "none";
						this.domNode.style.visibility = "visible";
						if (this.url && this.dialogFrame) {
							this.dialogFrame.contentWindow.document.body.style.cssText = this.dialogFrame.contentWindow.document.body.style.cssText;
						}
					})
				});
				anim.play();
			} else {
				this.domNode.style.visibility = "visible";
			}
		},

		//在top层次上弹出对话框时，得到渐入渐出效果的起始位置
		getObjTopRect: function (obj) {
			var rect = { top: 0, left: 0 };
			var r = obj.getBoundingClientRect();
			rect.top += r.top;
			rect.left += r.left;
			var win = dijit.getDocumentWindow(obj.ownerDocument);
			while (win != window.top) {
				var element = win.frameElement;
				r = element.getBoundingClientRect();
				rect.top += r.top;
				rect.left += r.left;
				var doc = win.frameElement.ownerDocument;
				win = doc.parentWindow || doc.defaultView;
			}
			return rect;
		},


		//初始化事件
		initEvent: function () {
			if (this.isExpand) {
				this.connect(this.enlargeNode, "onclick", "_enlarge");
				this.connect(this.enlargeNode, "onmouseover", "_enlargeOver");
				this.connect(this.enlargeNode, "onmouseout", "_enlargeOut");
			}
			if (this.isClose) {
				this.connect(this.closeNode, "onclick", "_imgClose");
				this.connect(this.closeNode, "onmouseover", "_closeOver");
				this.connect(this.closeNode, "onmouseout", "_closeOut");
			}
			if (this.resizable) {
				this.connect(this.dialogBottomRight, "onmousedown", "_onDialogBottomRightDown");
				this.connect(this.dialogBottomLeft, "onmousedown", "_onDialogBottomDown");
				this.connect(this.dialogBottom, "onmousedown", "_onDialogBottomDown");
				this.connect(this.dialogRightBorder, "onmousedown", "_onDialogRightDown");
			} else {
				this.dialogBottomRight.style.cursor = "default";
				this.dialogBottomLeft.style.cursor = "default";
				this.dialogBottom.style.cursor = "default";
				this.dialogRightBorder.style.cursor = "default";
			}
			this.connect(this.topContentNode, "onmousedown", "_onheadmousedown");
			//			this.connect(this.topContentNode, "ondblclick", "_ondblclick");
			this.resizeHandle = dojo.connect(this.getWindow(), "onresize", this, "update");
		},

		//初始化模态层
		initModal: function () {
			if (this.preDialog) {
				this.preDialog._isShow && (this.preDialog._modalDiv.style.display = "block");
				var bgMask = dojo.byId("bgMaskDialog");
				bgMask && this.removeNode(bgMask);
			}
			this._createModalIframe();
		},

		//初始化显示内容
		initShowContent: function () {
			this.mainNode.style.top = "0px";
			this.mainNode.style.left = "0px";
			this.mainNode.style.width = this.width + "px";
			this.mainNode.style.height = this.height + "px";
			if (dojo.isIE == 6) { //只有IE6的情况下才创建iframe
				this.baseIframe = dojo.create('iframe', null, this.mainNode);
				dojo.addClass(this.baseIframe, 'u-dlg-backgroundIframe');
				dojo.style(this.baseIframe, {
					width: "100%",
					height: "100%",
					top: "0px",
					left: "0px"
				});
			}
			if (this.isMax) {
				this._beforeExpandPara = {};
				var initHeight = 0;
				var initWidth = 0;
				if (this.params.height == undefined) {
					this._beforeExpandPara.h = 428;
					initHeight = 428;
				} else {
					var heightIndex = this.params.height.indexOf("px");
					if (heightIndex > 0) {
						initHeight = Math.max(Number(this.params.height.substring(0, heightIndex)), this.minHeight);
					} else {
						initHeight = Math.max(Number(this.params.height), this.minHeight);
					}
					this._beforeExpandPara.h = initHeight;
				}
				if (this.params.width == undefined) {
					this._beforeExpandPara.w = 420;
					initWidth = 420;
				} else {
					var widthIndex = this.params.width.indexOf("px");
					if (widthIndex > 0) {
						initWidth = Math.max(Number(this.params.width.substring(0, widthIndex)), this.minWidth);
					} else {
						initWidth = Math.max(Number(this.params.width), this.minWidth);
					}
					this._beforeExpandPara.w = initWidth;
				}
				this._beforeExpandPara.l = (this.width - initWidth) / 2;
				this._beforeExpandPara.t = (this.height - initHeight) / 2;
				this._beforeExpandPara.x = 0;
				this._beforeExpandPara.y = 0;
			}
			this.initHeader();
			this.initBody();
			this.initFooter();
		},

		//初始化头部区域
		initHeader: function () {
			if (this.hideTitle) {
				dojo.addClass(this.domNode, "hideTitle");
				//			dojo.style(this.domNode,"border","none");
				dojo.style(this.topNode, "height", "0px");
				dojo.style(this.topNode, "border", "none");
			}
			this.dialogTitleNode.innerHTML = this.title;
			if (!this.isExpand) {
				this.enlargeNode.style.display = "none";
			}
			if (!this.isClose) {
				this.closeNode.style.display = "none";
			}
		},

		//初始化主显示区
		initBody: function () {
			var topAndBottomHeight = isNaN(this._getTopAndBottomHeight()) ? 0 : this._getTopAndBottomHeight();

			//2018.1.13  sxf 出现按钮组时，增加内边距
			var fixed_buttons = $(".u-dlg-mm .fixed_buttons");
			if (fixed_buttons && fixed_buttons.length > 0) {
				$(".u-dlg-mm .u-dlg-mmc").css("padding-bottom", "60px");
			} else {
				$(".u-dlg-mm .u-dlg-mmc").css("padding-bottom", "0px");
			}

			this.dialogMiddle.style.height = (this.height - topAndBottomHeight) + "px";

			if (this._isUseButton()) {
				this.dialogMain.style.height = (this.height - topAndBottomHeight - 44) + "px";
			}
			this.domNode.style.visibility = "hidden";
			this.domNode.style.display = "block";
			if (this.url) {
				this.dialogMainContent.style.height = this.dialogMiddle.style.height;
				var _this = this;
				var dialogFrame = this.dialogFrame = iframeManager.getIframe();
				this.dialogMainContent.appendChild(dialogFrame);

				dialogFrame.onreadystatechange = dialogFrame.onload = function () {
					if (_this._isReady == false && (
						!this.readyState ||
						this.readyState === "loaded" ||
						this.readyState == "complete")) {
						if (_this._autoHeight || _this._autoWidth) {
							if (_this.dialogFrame.contentWindow && _this.dialogFrame.contentWindow.dojo) {
								var _dojo = _this.dialogFrame.contentWindow.dojo;
								_dojo.addOnLoad(function () {
									_this._adaptiveDialog();
									_this.startAnim();
								});
							} else {
								if (_this._autoHeight) {
									_this.setHeight(420);
								}
								if (_this._autoWidth) {
									_this.setWidth(428);
								}
								_this.startAnim();
							}
						}
						_this._isReady = true;
						if (!_this.animate) {
							_this.dialogFrame.contentWindow.document.body.style.cssText = _this.dialogFrame.contentWindow.document.body.style.cssText;
						}
					}
				}

				if (!this._autoHeight && !this._autoWidth) {
					this.startAnim();
				}
				this.dialogFrame.src = this.url;

			} else if (this.inner) {
				this._isReady = true;
				if (typeof (this.inner) == "object") {

					//得到的是对象，要提取里面css为dialogButtonArea的区域，将其放在按钮区域
					var buttonArea = dojo.query(".dialogButtonArea", this.inner);
					if (buttonArea.length > 0) {
						this._buttonArea = buttonArea[0];
						this.dialogMain.style.height = (this.height - 62) + "px";
					}

					this.dialogMainContent.appendChild(this.inner);
				} else {
					this.dialogMainContent.innerHTML = this.inner;
				}
				if (this._autoHeight || this._autoWidth) {
					var position = dojo.position(this.dialogMainContent)
					var width = position.w;
					var height = position.h;
					if (this._autoHeight) {
						if (height <= 80) {
							this.setHeight(420);
						} else {
							this.setHeight(height + 30);
						}
					}
					if (this._autoWidth) {
						if (width <= 50) {
							this.setWidth(428);
						} else {
							this.setWidth(width + 20);
						}
					}
				}
				this.startAnim();
			} else {
				this._isReady = true;
			}


		},

		/**
		 * @summary：
		 *         自适应对话框的高宽
		 *  @description:
		 *         若对话框没有指定高宽，调用此方法可以根据对话框的内容自适应对话框的大小
		 *  @example:
		 *  |var dialog = new unieap.dialog.Dialog(args);
		 *  |dialog.adaptiveDialog();
		 */
		adaptiveDialog: function () {
			if (!this._isReady)
				return;
			if (this.url) {
				if (this.dialogFrame.contentWindow && this.dialogFrame.contentWindow.dojo) {
					this._adaptiveDialog(true);
				} else {
					if (this._autoHeight) {
						this.setHeight(420);
					}
					if (this._autoWidth) {
						this.setWidth(428);
					}
				}
			} else {
				if (this._autoHeight || this._autoHeight) {
					var position = dojo.position(this.dialogMainContent)
					var width = position.w;
					var height = position.h;
					if (this._autoHeight) {
						if (height <= 50) {
							this.setHeight(420);
						} else {
							this.setHeight(height);
						}
					}
					if (this._autoWidth) {
						if (width <= 50) {
							this.setWidth(428);
						} else {
							this.setWidth(width);
						}
					}
				}
			}
		},
		_adaptiveDialog: function (afterLoad) {
			var _dojo = this.dialogFrame.contentWindow.dojo;
			var width = _dojo.doc.body.scrollWidth;
			var height = _dojo.doc.body.scrollHeight
			//得到第一层容器组件
			var containers = this.dialogFrame.contentWindow.unieap.getChildrenContainer(this.dialogFrame.contentWindow.document.body);
			for (var i = 0; i < containers.length; i++) {
				_dojo.require("unieap.grid.Grid");
				if (containers[i] instanceof this.dialogFrame.contentWindow.unieap.grid.Grid)
					continue;
				var childWidth = containers[i].containerNode.scrollWidth;
				var childHeight = containers[i].containerNode.scrollHeight;
				if (childWidth > width)
					width = childWidth;
				if (childHeight > height)
					height = childHeight;
			}
			if (this._autoHeight) {
				if (height <= 52) {
					this.setHeight(420);
				} else {
					this.setHeight(height + 30);
				}
			}
			if (this._autoWidth) {
				if (width <= 50) {
					this.setWidth(428);
				} else {
					this.setWidth(width + 20);
				}
			}
		},

		//初始化底部内容
		initFooter: function () {
			if (this._isUseButton()) {
				var _span = document.createElement("span");
				_span.innerHTML = "&nbsp;";
				for (var i = 0, len = this.buttons.length; i < len; i++) {
					if (i > 0) {
						this.dialogMiddleButton.appendChild(_span.cloneNode(true));
					}
					this.dialogMiddleButton.appendChild(this.buttons[i].domNode);
				}
			} else if (this._buttonArea) {
				this.dialogMiddleButton.appendChild(this._buttonArea);
			} else {
				this.dialogMiddleButton.style.display = "none";
			}
		},

		/**
		* @summary：
		*         为对话框增加按钮
		*  @param 
		*         {String}  config 设置按钮的label
		*  @param:
		*  		{object} fn 设置按钮的回调函数
		*  @param:
		*  		{object} scope 设置回调函数的this指针
		*  @example:
		*  | var dialog = DialogUtil.createDialog({
		*	|		url: "xxx.html",
		*	|		title:"Hello World!",
		*	|		height:"100",
		*	|		width:"500"
		*	|	});
		*	| dialog.addButton("自定义按钮1",myfunc1,dialog);
		*	| dialog.addButton("自定义按钮2",myfunc2);
		*	| dialog.addButton("自定义按钮3",myfunc3,dialog);
		*	| dialog.show();
		*  |
		*  | function myfunc1(){
		*  |	this.setReturn("myfunc1");
		*  |	this.close();
		*  | }
		*/
		addButton: function (config, fn, scope, className, canEnterHandle) {
			dojo.require("unieap.form.Button");
			var btn = new unieap.form.Button({
				label: config,
				"class": className
			});
			var handler = function (event) {
				fn.call(scope || window, event);
			}
			var _newHandle = dojo.hitch(this, handler);

			//this.connect(btn, "onClick", _newHandle);

			if (!this.connects) {
				this.connects = [];
			}
			this.connects.push(dojo.connect(btn, "onClick", _newHandle));
			if (canEnterHandle === true) {
				this.connects.push(dojo.connect(document, "onkeydown", function(e) {
					if (e.key === 'Enter') {
						_newHandle();
					}
				}));
			}
			
			//this.connect(btn, "onKeyDown",dojo.hitch(this, "keydown", btn));
			this.buttons.push(btn);
			return btn;
		},

		/**
		 * @summary：
		 *        获取通过inner方式传递进来的dom或html代码片段
		 *  @description:
		 *         通过inner传递dom或html代码片段的Dialog，调用此方法能够得到传递进来的dom对象或html字符串
		 *  @example:
		 *  |var dialog = DialogUtil.showDialog({inner:dojo.byId("sss"),height:300,width:420});
		 *  |unieap.getDialog().getInner();
		 */
		getInner: function () {
			if (this.inner) {
				return this.inner;
			} else {
				return null;
			}
		},

		destroy: function () {
			if (this.connects) {
				for (var i = 0, l = this.connects.length; i < l; i++) {
					dojo.disconnect(this.connects[i]);
				}
			}
			this.inherited(arguments);
		},

		//注册本对话框
		addDialog: function (obj) {
			this.getUtil().addDialog(obj);
			if (this._createDlgWithTag) {
				var frm = this.getTopFrm();
				!frm.dialogs && (frm.dialogs = [])
				frm.dialogs.push(this.id);
			}
		},

		//移除对话框
		removeDialog: function (index) {
			this.getUtil().removeDialog(index);
			if (this._createDlgWithTag) {
				var frm = this.getTopFrm();
				frm.dialogs.pop();
			}

		},

		getTopFrm: function () {
			var win = window,
				frameEle;
			try {
				do {
					if (win == win.parent) return win;
					frameEle = win.frameElement;
					if (frameEle) {
						var parentNode = frameEle.parentNode;
						if (parentNode && parentNode.getAttribute('id') == "unieap_pages") {
							return frameEle;
						}
					}
					win = win.parent;
				} while (win)
			} catch (e) {
				return unieap.getTopWin();
			}
			return win;
		},

		//得到工具类
		getUtil: function () {
			return window.DialogUtil;
		},
		/**
		 * @summary：
		 *         为对话框设置高度
		 *  @param 
		 *         {number} 对话框的高度值
		 *  @description:
		 *         为对话框设置高度
		 *  @example:
		 *  |dialog.setHeight(100);
		 */
		setHeight: function (height) {
			var topAndBottomHeight = this._getTopAndBottomHeight();
			this.height = isNaN(height) ? parseInt(height, 10) : height;
			if (this.height < this.minHeight)
				this.height = this.minHeight;

			var viewport = dijit.getViewport();
			if (this.height >= viewport.h)
				this.height = 428;
			dojo.style(this.domNode, "height", this.height + "px");
			if (this._isUseButton() || this._buttonArea) {
				this.dialogMain.style.height = (this.height - topAndBottomHeight - 44) + "px";
			}
			var height = (this.height - topAndBottomHeight) + "px";
			dojo.style(this.dialogMiddle, "height", height);
			dojo.style(this.dialogMainContent, "height", height);
			//ie6 baseiframe计算不对，不能自适应
			dojo.isIE < 7 && dojo.style(this.baseIframe, "height", this.height + "px");
		},
		/**
		 * @summary：
		 *         为对话框设置宽度
		 *  @param 
		 *         {number} 对话框的宽度值
		 *  @description:
		 *         为对话框设置宽度
		 *  @example:
		 *  |dialog.setWidth(100);
		 */
		setWidth: function (width) {
			this.width = isNaN(width) ? parseInt(width, 10) : width;
			if (this.width < this.minWidth)
				this.width = this.minWidth;
			var viewport = dijit.getViewport();
			if (this.width >= viewport.w)
				this.width = 420;
			dojo.style(this.domNode, "width", this.width + "px");
		},

		//判断是否使用按钮，内部函数，用来确定显示区域的高度
		_isUseButton: function () {
			if (this.buttons.length == 0)
				return false;
			else
				return true;
		},



		//在已有对话框弹出的情况下，对前一对话框进行遮挡的div
		_createModalDiv: function () {
			this.preDialog._modalDiv = dojo.create("div");
			this.preDialog._modalDiv.className = "u-dlg-modalDiv";
			this.preDialog._modalDiv.style.height = this.preDialog.domNode.style.height;
			this.preDialog._modalDiv.style.width = this.preDialog.domNode.style.width;
			this.preDialog._modalDiv.style.zIndex = Number(this.preDialog.domNode.style.zIndex) + 1;
			if (this.preDialog.mainNode.style.top) {
				this.preDialog._modalDiv.style.top = this.preDialog.domNode.style.top;
				this.preDialog._modalDiv.style.left = this.preDialog.domNode.style.left;
			} else {
				this.preDialog._modalDiv.style.top = this.preDialog.endy;
				this.preDialog._modalDiv.style.left = this.preDialog.endx;
			}
			this.preDialog._modalDiv.style.display = "none";
			document.body.appendChild(this.preDialog._modalDiv);
		},

		//创建用于渐入渐出和拖拽调整大小的遮挡div	
		_createMoveDiv: function () {
			this._moveDiv = dojo.create("div");
			this._moveDiv.className = "u-dlg-moveDiv";
			document.body.appendChild(this._moveDiv);
			this._moveDiv.style.display = "none";
		},

		//dialog是否可以enlarge、close、resize
		canECR: function () {
			if (this._createDlgWithTag) {
				var frm = this.getTopFrm();
				if (frm.dialogs[frm.dialogs.length - 1] != this.id) {
					return false;
				}
			}
			return true;
		},

		//inner event
		_enlarge: function (evt) {
			if (!this.canECR()) return;
			var topAndBottomHeight = this._getTopAndBottomHeight();
			if (this._isExpanded) {
				//已经最大化，此时需要恢复原来的大小和位置
				if (this._beforeScroll) this.getWindow().document.body.scroll = this._beforeScroll;
				this.enlargeNode.className = "u-dlg-be";
				this.enlargeNode.title = RIA_I18N.dialog.dialog.maximinze;;
				this._isExpanded = false;
				var viewport = dijit.getViewport();
				if (!this._beforeExpandPara) {
					var viewport = dijit.getViewport();
					var left = Math.floor(viewport.l + (viewport.w - 420) / 2) > 0 ? Math.floor(viewport.l + (viewport.w - 420) / 2) : "0",
						top = Math.floor(viewport.t + (viewport.h - 428) / 2) > 0 ? Math.floor(viewport.t + (viewport.h - 428) / 2) : "0",
						width = 400,
						height = 428;
					dojo.style(this.mainNode, {
						left: left + "px",
						top: top + "px",
						width: width + "px",
						height: height + "px"
					});
					this.dialogMiddle.style.height = height + "px";

					if (this._isUseButton() || this._buttonArea) {
						this.dialogMain.style.height = (height - topAndBottomHeight - 44) + "px";
					}

				} else {
					dojo.style(this.mainNode, {
						left: Math.floor(this._beforeExpandPara.l) + "px",
						top: Math.floor(this._beforeExpandPara.t) + "px",
						width: this._beforeExpandPara.w + "px",
						height: this._beforeExpandPara.h + "px"
					});
					this.dialogMiddle.style.height = (this._beforeExpandPara.h - topAndBottomHeight)
						+ "px";
					if (this._isUseButton() || this._buttonArea) {
						this.dialogMain.style.height = (this._beforeExpandPara.h - topAndBottomHeight - 44)
							+ "px";
					}
				}
				this.dialogMainContent.style.height = this.dialogMiddle.style.height;
			} else {
				this.enlargeNode.className = "u-dlg-bs";
				this.enlargeNode.title = RIA_I18N.dialog.dialog.restore;;
				this._isExpanded = true;
				this._beforeExpandPara = dojo.coords(this.mainNode, true);
				this._beforeScroll = this.getWindow().document.body.scroll;
				this.getWindow().document.body.scroll = "no"
				var viewport = dijit.getViewport();
				dojo.style(this.mainNode, {
					left: Math.floor(viewport.l) + "px",
					top: Math.floor(viewport.t) + "px",
					width: Math.floor(viewport.w) + "px",
					height: Math.floor(viewport.h) + "px"
				});
				this.dialogMiddle.style.height = (viewport.h - topAndBottomHeight) + "px";
				if (this._isUseButton() || this._buttonArea) {
					this.dialogMain.style.height = (viewport.h - topAndBottomHeight - 44) + "px";
				}
				this.dialogMainContent.style.height = this.dialogMiddle.style.height;
			}
		},

		update: function () {
			var viewport = dijit.getViewport();
			var topAndBottomHeight = this._getTopAndBottomHeight();
			if (this._isExpanded) {
				var top = viewport.t;
				var left = viewport.l;
				var width = viewport.w;
				var height = viewport.h;
				if (viewport.w < this.minWidth) {
					width = this.minWidth;
					left = 0;
				}
				if (viewport.h < this.minHeight) {
					height = this.minHeight;
					top = 0;
				}
				dojo.style(this.mainNode, {
					left: Math.floor(left) + "px",
					top: Math.floor(top) + "px",
					width: Math.floor(width) + "px",
					height: Math.floor(height) + "px"
				});
				this.dialogMiddle.style.height = (height - topAndBottomHeight) + "px";
				if (this._isUseButton() || this._buttonArea) {
					this.dialogMain.style.height = (height - topAndBottomHeight - 44) + "px";
				}
				this.dialogMainContent.style.height = this.dialogMiddle.style.height;
			}
			var bgMask = dojo.byId("bgMaskDialog");
			if (bgMask) {
				var pos = dojo.coords(this.getWindow().document.body, true);
				//解决dojo.coords方法resize整个window时未生成bgmask会报脚本错误问题
				dojo.style(bgMask, {
					left: "0px",
					top: "0px",
					width: Math.floor(pos.w) + "px",
					height: Math.floor(pos.h) + "px"
				});
			}
		},

		//将最大化的图标更改样式
		_enlargeOver: function () {

		},
		//将最大化的图标更改样式
		_enlargeOut: function () {

		},

		//点击关闭按钮的监听函数
		_imgClose: function () {
			if (!this.canECR())
				return;
			// MessageBox.confirm({
			// 	title: "confirm",
			// 	message: '是否确认关闭?',
			// 	type: 'warn',
			// 	onComplete: confirmReturn,
			// 	iconCloseComplete: true
			// });
			// var that = this;
			// function confirmReturn(value) {
			// 	if (value) {
			// 		// 点击右上角上的"X"时执行
			// 		that.onImgClose && that.onImgClose();
			// 		that.close();
			// 	} 
			// }
			this.onImgClose && this.onImgClose();
			this.close();
			this._iconClose = true;
		},

		_closeOver: function () {

		},

		_closeOut: function () {

		},

		//对右下角拖拽的监听
		_onDialogBottomRightDown: function (event) {
			if (!this.canECR()) return;
			if (this.resizeType != '' || this._isExpanded) {
				return;
			}
			this.isResizing = true;
			this.resizeType = "se";
			this.onStartResize(event);
			//dojo.stopEvent(event);
		},

		//对下方拖拽的监听
		_onDialogBottomDown: function (event) {
			if (!this.canECR()) return;
			if (this.resizeType != '' || this._isExpanded) {
				return;
			}
			var e = dojo.fixEvent(event);
			var target = e.srcElement;
			if (target != this.dialogBottomRight && target != this.dialogBottomLeft) {
				this.isResizing = true;
				this.resizeType = "s";
				this.onStartResize(event);
			}
		},

		//对右侧拖拽的监听
		_onDialogRightDown: function (event) {
			if (!this.canECR()) return;
			if (this.resizeType != '' || this._isExpanded) {
				return;
			}
			this.isResizing = true;
			this.resizeType = "e";
			this.onStartResize(event);
		},

		//开始通过拖拽调整大小
		onStartResize: function (event) {
			this.startHeadx = event.clientX;
			this.startHeady = event.clientY;
			this._moveDiv.style.height = this.domNode.style.height;
			this._moveDiv.style.width = this.domNode.style.width;
			this._moveDiv.style.left = this.domNode.style.left;
			this._moveDiv.style.top = this.domNode.style.top;
			this._moveDiv.style.display = 'block';
			if (this._moveDiv.setCapture) {
				this.tempEvents.push(dojo.connect(this._moveDiv, "onmousemove", this, dojo.hitch(this, this.onResizeMouseMove)));
				this.tempEvents.push(dojo.connect(this._moveDiv, "onmouseup", this, dojo.hitch(this, this.onResizeMouseUp)));
				this._moveDiv.setCapture();
			} else {
				this.resizeMove = dojo.hitch(this, this.onResizeMouseMove);
				this.resizeUp = dojo.hitch(this, this.onResizeMouseUp);
				document.addEventListener("mousemove", this.resizeMove, true);
				document.addEventListener("mouseup", this.resizeUp, true);
			}
		},

		//resize时对鼠标事件的监听
		onResizeMouseMove: function (event) {
			var x = event.clientX;
			var y = event.clientY;
			var pos = dojo.coords(this.domNode);
			if (this.resizeType == "e") {
				if (Math.floor(x - pos.x) > this.minWidth)
					this._moveDiv.style.width = Math.floor(x - pos.x) + "px";
				return;
			}
			if (this.resizeType == "s") {
				if (Math.floor(y - pos.y) > this.minHeight)
					this._moveDiv.style.height = Math.floor(y - pos.y) + "px";
				return;
			}
			if (this.resizeType == "se") {
				if (Math.floor(x - pos.x) > this.minWidth)
					this._moveDiv.style.width = Math.floor(x - pos.x) + "px";
				if (Math.floor(y - pos.y) > this.minHeight)
					this._moveDiv.style.height = Math.floor(y - pos.y) + "px";
			}
		},
		//resize时对鼠标事件的监听
		onResizeMouseUp: function (event) {
			dojo.stopEvent(dojo.fixEvent(event));
			this.isResizing = false;
			this.startHeadx = 0;
			this.startHeady = 0;
			var topAndBottomHeight = this._getTopAndBottomHeight();
			if (this._moveDiv != null) {
				dojo.forEach(this.tempEvents, dojo.disconnect);
				this.tempEvents = [];
				this.mainNode.style.width = this._moveDiv.style.width;
				this.mainNode.style.height = this._moveDiv.style.height;
				this.dialogMiddle.style.height = Math
					.floor(parseInt(this.mainNode.style.height) - topAndBottomHeight)
					+ "px";
				if (this._isUseButton() || this._buttonArea) {
					this.dialogMain.style.height = Math
						.floor(parseInt(this.mainNode.style.height) - topAndBottomHeight - 44)
						+ "px";
				}
				this.dialogMainContent.style.height = this.dialogMiddle.style.height;

				this._moveDiv.style.display = "none";
				if (this._moveDiv.releaseCapture) {
					this._moveDiv.releaseCapture();
				} else {
					document.removeEventListener("mouseup", this.resizeUp, true);
					document.removeEventListener("mousemove", this.resizeMove, true);
				}
				if (this.baseIframe) {
					if (this.baseIframe.style.width == "100%") {
						dojo.style(this.baseIframe, {
							width: "99%"
						});
					} else {
						dojo.style(this.baseIframe, {
							width: "100%"
						});
					}
					if (this.baseIframe.style.height == "100%") {
						dojo.style(this.baseIframe, {
							height: "99%"
						});
					} else {
						dojo.style(this.baseIframe, {
							height: "100%"
						});
					}
				}
			}
			this.resizeType = '';
		},


		_onheadmousedown: function (event) {
			if (this._isExpanded) {
				return;
			}
			var e = dojo.fixEvent(event);
			var target = e.srcElement || e.target; //兼容火狐;
			if (target != this.topButtonNode && target != this.enlargeNode && target != this.closeNode) {
				this.isHeadmove = true;
				this.startHeadx = event.clientX;
				this.startHeady = event.clientY;
				this.winStartx = parseInt(this.domNode.style.left);
				this.winStarty = parseInt(this.domNode.style.top);
				this.onheadStartmove();
			}
		},

		//对标题栏双击事件的监听，在允许最大化的情况下，实现最大化和恢复原状的功能
		//		_ondblclick : function(){
		//			if(!this.isExpand){
		//				return ;
		//			}else{
		//				this._enlarge();
		//			}
		//		},

		//开始拖拽移动位置
		onheadStartmove: function () {
			this._moveDiv.style.height = this.domNode.style.height;
			this._moveDiv.style.width = this.domNode.style.width;
			this._moveDiv.style.left = this.winStartx + "px";
			this._moveDiv.style.top = this.winStarty + "px";
			this._moveDiv.style.display = 'block';
			if (this._moveDiv.setCapture)
				this._moveDiv.setCapture();
			else {
				this.moveMove = dojo.hitch(this, this.onheadmousemove);
				this.moveUp = dojo.hitch(this, this.onheadmouseup);
				document.addEventListener("mousemove", this.moveMove, true);
				document.addEventListener("mouseup", this.moveUp, true);
			}
			this.tempEvents.push(dojo.connect(this._moveDiv, "onmousemove", this, dojo.hitch(this, this.onheadmousemove)));
			this.tempEvents.push(dojo.connect(this._moveDiv, "onmouseup", this, dojo.hitch(this, this.onheadmouseup)));
		},

		//鼠标移动时的事件
		onheadmousemove: function (event) {
			if (this.isHeadmove) {
				var x = event.clientX;
				var y = event.clientY;
				if (this.winStartx + x - this.startHeadx > 0) {
					this._moveDiv.style.left = Math.floor(this.winStartx + x - this.startHeadx) + "px";
				}
				if (this.winStarty + y - this.startHeady > 0) {
					this._moveDiv.style.top = Math.floor(this.winStarty + y - this.startHeady) + "px";
				}
			}
		},

		//拖拽时鼠标弹起时的事件
		onheadmouseup: function () {
			if (this.isHeadmove) {
				this.isHeadmove = false;
				this.startHeadx = 0;
				this.startHeady = 0;
				if (this._moveDiv != null) {
					dojo.forEach(this.tempEvents, dojo.disconnect);
					this.tempEvents = [];
					this.mainNode.style.top = this._moveDiv.style.top;
					this.mainNode.style.left = this._moveDiv.style.left;
					this._moveDiv.style.display = "none";
					if (this._moveDiv.releaseCapture) {
						this._moveDiv.releaseCapture();
					} else {
						document.removeEventListener("mouseup", this.moveUp, true);
						document.removeEventListener("mousemove", this.moveMove, true);
					}
				}
			}
		},

		/**
		 * @summary:
		 *     关闭对话框
		 * @description:
		 *     将当前的对话框关闭并将对应的对象进行销毁
		 * @param:
		 *     {boolean}  isComplete
		 *     在关闭对话框的时候，是不是要调用回调函数，默认通过脚本关闭对话框会调用回调函数
		 * @example:
		 * |unieap.getDialog().close();   
		 */
		close: function (isComplete) {
			this.isComplete = isComplete;
			this._close();
		},

		//关闭对话框并将相关对象销毁
		_close: function () {
			//如果指定的url还没有加载完毕就点右上角的关闭按钮,直接返回
			if (!this._isReady) {
				this._iconClose = false;
				return;
			}
			this.dialogFrame && (this.dialogFrame.onreadystatechange = this.dialogFrame.onload = null);
			if (!this._createDlgWithTag) {
				dojo.disconnect(this.resizeHandle)
			}
			if (this.inner && this.innerParentNode) {
				this.innerParentNode.appendChild(this.inner);
			}
			var dialogDom = this.getUtil().getDialogs();
			if (dialogDom == null)
				return;
			for (var i = dialogDom.length - 1; i >= 0; i--) {
				if (dialogDom[i] == this) {
					this.removeDialog(i);
					break;
				}
			}
			// 如果此对话框是使用handle方式打开的
			if (this.getUtil().getDialog(this))
				this.getUtil().removeDialog(this);

			this.domNode.style.display = "none";
			if (this.animate) {
				dojo.style(this._moveDiv, {
					width: this.domNode.style.width,
					height: this.domNode.style.height,
					left: this.domNode.style.left,
					top: this.domNode.style.top,
					display: "block"
				})
				var anim = dojo.animateProperty({
					node: this._moveDiv,
					duration: 450,
					properties: {
						width: {
							end: this.startWidth,
							unit: "px"
						},
						height: {
							end: this.startHeight,
							unit: "px"
						},
						top: Math.floor(this.starty),
						left: Math.floor(this.startx),
						unit: "px"
					},
					onEnd: dojo.hitch(this, this._clear)
				});
				anim.play()
			}
			else {
				this._clear();
			}
			this._isShow = false;
		},
		_innerDisappear: function () {

		},


		_clear: function () {
			this._moveDiv.style.display = "none";
			this.removeNode(this._moveDiv);
			this.destroyModal();
			//执行回调函数
			if (this.onComplete && ((this._iconClose && this.iconCloseComplete) || (!this._iconClose && this.isComplete != false))) {
				//去除try catch，否则在成功回调里的异常不会被浏览器捕获，用户看不到错误信息
				this.onComplete.call(this.src, this.returnObj);
			}
			if (this.baseIframe != null) {
				this.removeNode(this.baseIframe);
			}
			this.preDialog = null;
			var me = this;
			//判断通过标签的创建的Dialog控件是否关闭过
			this._createDlgWithTag && (this._dlgClosed = true) && (this._isReady = false);
			window.setTimeout(function () {
				var frame = me.dialogFrame;
				try {
					if (me.dialogFrame) {
						dojo.withDoc(me.dialogFrame.contentWindow.document, function () {
							var children = me.dialogFrame.contentWindow.dijit ? me.dialogFrame.contentWindow.dijit.findWidgets(dojo.body()) : [];
							dojo.forEach(children, function (widget) {
								widget && widget.destroy && widget.destroy();
							});
						}, me);
						frame.src = "";
						frame.contentWindow.document.write("");
						dojo.destroy(frame);
						frame = null;
						delete me.dialogFrame;
					}
				} catch (x) {
					frame.src = "";
					dojo.destroy(frame);
					frame = null;
					delete me.dialogFrame;
				}
				if (me.inner && typeof (me.inner) == "object" && !me.innerParentNode) {
					//inner方式创建，且传入的不是html片段而是dom，且没有父节点
					unieap.destroyWidgets(me.inner);
					unieap.destroyWidgets(me.dialogMiddleButton);
				}
				!me._createDlgWithTag && me.destroy();
			}, 0);
		},


		/**
		 * @summary:
		 *     设置对话框组件的返回值
		 * @param: 
		 *     {object} obj
		 * @description:
		 *     在对话框关闭前可以设置对话框的返回值，并将在对话框关闭的时候，作为回调函数的参数
		 * @example:
		 * |unieap.getDialog().setReturn(theReturnObject);  
		 */
		setReturn: function (Obj) {
			this.returnObj = Obj;
		},

		//创建模态对话框的遮挡iframe
		_createModalIframe: function () {
			var bgMask;
			var pos = dojo.coords(this.getWindow().document.body, true);
			if (dojo.isIE == 6) {
				var burl = dojo.moduleUrl("dojo", "../unieap/dialog/_bgLayer.html") + "";
				bgMask = dojo.create("iframe", {
					id: "bgMaskDialog",
					src: burl
					//				style: {position: "absolute",zIndex:"1000", filter:"Alpha(Opacity=\"0\")",opacity:0}
				});
				dojo.addClass(bgMask, "u-dlg-bgMaskDialog-IE6");
				dojo.style(bgMask, {
					left: "0px",
					top: "0px",
					//width:Math.floor(pos.w)+"px",
					//height:Math.floor(pos.h)+"px",
					width: "100%",
					height: "100%",
					display: 'none'
				});
				dojo.body().appendChild(bgMask);
				bgMask.contentWindow.focus();
			} else {
				bgMask = dojo.create("div", {
					//				style: {position: "absolute",background:"#FFF",zIndex: 2998, filter:"Alpha(Opacity=\"0\")",opacity:0},
					id: "bgMaskDialog"
				});
				dojo.addClass(bgMask, "u-dlg-bgMaskDialog-notIE");
				dojo.style(bgMask, {
					left: "0px",
					top: "0px",
					//width:Math.floor(pos.w)+"px",
					//height:Math.floor(pos.h)+"px",
					width: "100%",
					height: "100%",
					display: 'none'
				});
				window.document.oncontextmenu = function (_event) {
					if (window.event) {
						_event = window.event;
						window.event.returnValue = false;
						window.event.cancelBubble = true;
					}
					else _event.preventDefault();
				}
				dojo.body().appendChild(bgMask);
				//bgMask.focus();
			}
			return bgMask;
		},

		//删除模态相关的div和iframe
		destroyModal: function () {
			if (this.preDialog && this.preDialog._modalDiv) {
				this.removeNode(this.preDialog._modalDiv);
				this.preDialog._modalDiv = null;
				delete this.preDialog._modalDiv;
			} else {
				var bgMask = dojo.byId("bgMaskDialog");
				bgMask && this.removeNode(bgMask);
				window.document.oncontextmenu = function () { }
			}

		},

		//自定义移除domNode的方法
		removeNode: function (node) {
			dojo.destroy(node);
		},

		//获得top和bottom的dom高度，包括边框等
		_getTopAndBottomHeight: function () {
			var borderWidth = 0;
			if (dojo.isFF) { //FF下 border属性会被解析成4个子属性 必须用这种方式进行处理！
				borderWidth = Number(dojo.style(this.mainNode, 'borderTopWidth'));
			} else {
				borderWidth = Number(dojo.style(this.mainNode, 'borderWidth'));
			}
			var topAndBottomHeight = Number(dojo.style(this.topNode, 'height'))
				+ Number(dojo.style(this.dialogBottom, 'height'))
				+ borderWidth * 2;
			return topAndBottomHeight;
		},

		getWindow: function () {
			return window;
		},

		/**
		 * @summary:
		 *		得到从父窗口传递的参数
		 * @return
		 *		{object}
		 * @description:
		 *		得到父窗口传递到对话框的参数，可以为任何类型的数据，
		 *		当同时配置dialogData和getDialogData时，执行getDialogData的函数，并返回函数的返回值
		 * @example:
		 * |var param = unieap.getDialog().getObject();
		 */
		getObject: function () {
			var fn = this.getDialogData;
			return dojo.isFunction(fn) ? fn() : this.dialogData;
		},
		//2018.7.10 兼容OES showRight/showPosition方法
		showRight: function (param) {
			this.show();
		},
		showPosition: function (setX, setY) {
			this.show();
		}
	});

})();

dojo.require("unieap.dialog.Dialog");
dojo.require("unieap.dialog.DialogUtil");
dojo.require("unieap.global");
dojo.provide("unieap.dialog.MessageBox");
 	/**
     * @summary:
     *     各种信息提示框的实现
     * @classDescription:
     *     使用了Dialog的核心实现，只是确定了内部显示的内容，并为按钮绑定固定的事件
     *     模拟的信息提示框并不会使JavaScript程序阻塞，所以要将得到结果后的逻辑写在回调函数中
     *     支持多种类型的提示框及多样化的配置参数，包括
     * 	   confirm : 带有两个按钮的简单确认对话框，
     * 	   cancelConfirm : 复杂的确认对话框，
     *     customerButtonConfirm : 自定义按钮的对话框
     *     prompt : 单行输入提示框
     *     multiPrompt : 多行输入提示框
     *     alert : 简单反馈信息的提示框
     *     autoCloseAlert : 可自动关闭的信息提示框
 	 * @declaredClass:
 	 *		unieap.dialog.MessageBox
 	 * @example:
 	 * |	MessageBox.confirm({
 	 * |		title:"confirm"
 	 * |	},node);
 	 * 		一个确认对话框
     */

 MessageBox = {
	
    /**
     * @summary:
     *		简单的确认对话框，带有两个按钮，默认分别显示为"确定"和"取消"，点击分别返回boolean类型的true或false，并执行用户自定义的操作
     * @param:
     * 		{object} config 设置确认信息框的参数，具体可设置参数见详述部分。
     * @param 
     * 		{domNode} node  提示框渐入渐出效果的开始和结束节点，只有设置animate为true，才能看出效果
     * @description:
     *		作用等同于window.confirm方法，弹出提示框包含两个按钮，对应的返回值分别为true和false，用户可以基于不同的返回值采取相应的操作
     *		config部分可设置参数如下：
     *			title：标题的显示内容，默认为"确认框"
     *			message ：文本要显示的内容，默认为"您是否确认?"
     *			onComplete：对话框关闭时要执行的回调函数
     *			yesStr：确认按钮的显示值，默认为"确认"
     *			noStr：取消按钮的显示值，默认为"取消"
     *			animate：是否使用渐入渐出效果，默认为false
     *			type：确定要显示确认框的显示图标，可选值为"warn"、"info"、"error"和"question"，默认为"question"
     *			iconCloseComplete：点击右上角的图标关闭确认框的时候，会不会触发回调函数，默认会触发,并且回调函数的参数值为"false"
     *			isClose：是否显示右上角的关闭图标,默认显示关闭按钮
     * @example:
     * |<div dojoType="unieap.form.Button" label="点击" id="confirm" onClick="fn"></div>
     * |<script type="text/javascript">
     * |	function fn(){
     * |		MessageBox.confirm({
     * |			onComplete: confirmReturn,
     * |			//关闭右上角的"X"按钮时执行onComplete函数
     * |			iconCloseComplete:true 
     * |		}, dojo.byId("confirm"));
     * |	}
     * |
     * |	function confirmReturn(value){
     * |		if(value==true){
     * |			alert('您选择了"确定"');
     * |		}else{
     * |			alert('您选择了"取消"');
     * |		}
     * |	}
     * |</script>
     *@img:
	 *      images/dialog/confirm.png
     */
    confirm: function(config, node){
        config = config || {};
        var _yesStr = config["yesStr"] ? config["yesStr"] : RIA_I18N.dialog.messageBox.confirm;
        var _noStr = config["noStr"] ? config["noStr"] : RIA_I18N.dialog.messageBox.cancel;
        var _text = config["message"] ? config["message"] : RIA_I18N.dialog.messageBox.confirmText;
        // 部分业务页面需要 输出html格式的文字
        //_text = this._stringConvert(_text);
		var type = config["type"];
        if (type != null) 
            type += "Icon";
        else {
            type = "questionIcon";
        }
		var  isanimate = config["animate"];
		if(typeof(isanimate)=='undefined'||isanimate==null){
			isanimate = unieap.animate;
		}
		var  isClose = config["isClose"];
		if(isClose!=false){
			isClose = true;
		}
		var isIconCloseComplete = config["iconCloseComplete"];
		if(isIconCloseComplete!=false){
			isIconCloseComplete = true;
		}
        var htmlObj = this._getConfirmObj(_text, type);
        //created by majian1 2020/1/15
        var dialogConfig = {
            width: (htmlObj["width"] >= document.body.clientWidth) ? (document.body.clientWidth - 10) : htmlObj["width"],
            height: htmlObj["Height"],
            title: config["title"] ? config["title"] : RIA_I18N.dialog.messageBox.confirmTitle,
            inner: htmlObj["obj"],
            onComplete: config["onComplete"],
            animate: isanimate,
            buttonFocus: true,
            isExpand: false,
            resizable: false,
			iconCloseComplete:isIconCloseComplete,
			isClose:isClose,
			hideTitle:true
        }
        var dialog = null,
        	topWin = unieap.getTopWin();
        if (topWin.DialogUtil && config["inner"]==null && topWin.document.getElementsByTagName("frameset").length == 0&& !window.opener) {
            dialog = topWin.DialogUtil.createDialog(dialogConfig);
        }
        else {
            dialog = DialogUtil.createDialog(dialogConfig);
        }
        dialog.addButton(_noStr, function(){
            dialog.setReturn(false);
            dialog.close();
        }, dialog,"btn-default");
        dialog.addButton(_yesStr, function(){
            dialog.setReturn(true);
            dialog.close();
        }, dialog,"btn-success", true);

		
		//confirm对话框,点击右上角的"X",返回为false
		isIconCloseComplete&&isClose&&dialog.setReturn(false);
        this._show(dialog, node);
        $("."+type).parents(".u-dlg").removeClass("infoIcon warnIcon questionIcon errorIcon").addClass(type+"-b");
    },
    
    /**
     *@summary:
     *      复杂的确认对话框
     * @param:
     *		{object} config 设置确认信息框的参数，具体可设置参数见详述部分。
     * @param 
     * 		{domNode}  node  提示框渐入渐出效果的开始和结束节点，只有设置animate为true，才能看出效果
     * @description:
     *		带有三个按钮的确认对话框，默认分别显示为"是"、"否"和"取消".
     *		点击按钮分别返回字符串类型的"yes"、"no"或"cancel"，并执行用户自定义的回调函数
     *		config部分可设置参数如下：
     *			title：标题的显示内容，默认为"确认框"
     *			message：要显示的内容，默认为"您是否要继续？"
     *			onComplete：对话框关闭时要执行的回调函数
     *			yesStr：返回值为"yes"的按钮的显示值，默认为"是"，用户可自定义
     *			noStr：返回值为"no"的按钮的显示值，默认为"否"，用户可自定义
     *			cancelStr：返回值为"cancel"的按钮的显示值，默认为"取消"，用户可自定义
     *			animate：是否使用渐入渐出效果，默认为false
     *			type：确定要显示确认框的显示图标，可选值为"warn"、"info"、"error"和"question"，默认为"question"
     *			iconCloseComplete：点击右上角的图标关闭确认框的时候，会不会触发回调函数，默认会触发并且回调函数的参数值为"cancel"
     *			isClose：是否显示右上角的关闭图标默认显示
     * @example:
     * |MessageBox.cancelConfirm({
     * |		onComplete: cancelConfirmReturn
     * |	}, document.getElementById("cancelconfirm"));
     * |function cancelConfirmReturn(value){
     * |	if(value=='yes'){
     * |		alert('您选择了"是"');
     * |	}else if(value=='no'){
     * |		alert('您选择了"否"');
     * |	}else{
     * |		alert('您选择了"取消"');
     * |	}
     * |}
     * @img:
	 *      images/dialog/cancelConfirm.png
     */
    cancelConfirm: function(config, node){
        config = config ||{};
        var _yesStr = config["yesStr"] ? config["yesStr"] : RIA_I18N.dialog.messageBox.yes;
        var _noStr = config["noStr"] ? config["noStr"] : RIA_I18N.dialog.messageBox.no;
        var _cancelStr = config["cancelStr"] ? config["cancelStr"] : RIA_I18N.dialog.messageBox.cancel;
        var _text = config["message"] ? config["message"] : RIA_I18N.dialog.messageBox.confirmText;
		_text = this._stringConvert(_text);
        var type = config["type"];
        if (type != null) 
            type += "Icon";
        else {
            type = "questionIcon";
        }
	   	var  isanimate = config["animate"];
		if(typeof(isanimate)=='undefined'||isanimate==null){
			isanimate = unieap.animate;
		}
		var  isClose = config["isClose"];
		if(isClose!=false){
			isClose = true;
		}
		var isIconCloseComplete = config["iconCloseComplete"];
		if(isIconCloseComplete!=false){
			isIconCloseComplete = true;
		}
        var htmlObj = this._getConfirmObj(_text, type);
        var dialogConfig = {
            width: "360px",
            height: htmlObj["Height"],
            title: config["title"] ? config["title"] : RIA_I18N.dialog.messageBox.confirmTitle,
            inner: htmlObj["obj"],
            onComplete: config["onComplete"],
            animate: isanimate,
            buttonFocus: true,
            isExpand: false,
            resizable: false,
			iconCloseComplete:isIconCloseComplete,
			isClose:isClose,
			hideTitle:true
        }
        
        var dialog = null,
        	topWin = unieap.getTopWin();
        if (topWin.DialogUtil && config["inner"]==null && topWin.document.getElementsByTagName("frameset").length == 0&& !window.opener) {
            dialog = topWin.DialogUtil.createDialog(dialogConfig);
        }
        else {
            dialog = DialogUtil.createDialog(dialogConfig);
        }
		//添加"是"按钮
        dialog.addButton(_yesStr, function(){
            dialog.setReturn("yes");
            dialog.close();
        }, dialog,"btn-success");
		//添加"否"按钮
        dialog.addButton(_noStr, function(){
            dialog.setReturn("no");
            dialog.close();
        }, dialog,"btn-danger");
		//添加"取消"按钮
        dialog.addButton(_cancelStr, function(){
            dialog.setReturn("cancel");
            dialog.close();
        }, dialog,"btn-default");
		
		//cancelConfirm对话框,点击右上角的"X",返回为cancel
		isIconCloseComplete&&isClose&&dialog.setReturn("cancel");
        
        this._show(dialog,node);
        $("."+type).parents(".u-dlg").removeClass("infoIcon warnIcon questionIcon errorIcon").addClass(type+"-b");
    },
    
    /**
     * @summary:
     *      自定义按钮的对话框
     * @param:
     * 		{object} config 设置确认信息框的参数，具体可设置参数见详述部分。
     * @param 
     * 		{domNode}  node  提示框渐入渐出效果的开始和结束节点，只有设置animate为true，才能看出效果
     * @description:
     *		如果默认的两种对话框无法满足需求，可以自定义按钮及其返回值，实现特定的需求  
     *		config部分可设置参数如下：
     *          width: 弹出框宽度
     *			title：标题的显示内容
     *			message ：要显示的内容
     *			onComplete：对话框关闭时要执行的回调函数
     *			animate：是否使用渐入渐出效果，默认为false
     *			type：确定要显示确认框的显示图标，可选值为"warn"、"info"、"error"和"question"，默认为"question"
     *			customerButtons：自定义按钮的数组，数组元素为JavaScript的对象，包含label、returnValue两个属性.
     *							分别代表该按钮的显示值、返回值
     *			iconCloseComplete：点击右上角的图标关闭确认框的时候，会不会触发回调函数，默认会触发,传入的参数值为null
     *			isClose：是否显示右上角的关闭图标,默认显示
     * @example:
     * |MessageBox.customerButtonConfirm({
     * |	onComplete: customerButtonConfirmReturn,
     * |	customerButtons: [{
     * |		label: "跳过",
     * |		returnValue: "skip"
     * |	}, {
     * |		label: "忽略",
     * |		returnValue: "ignore"
     * |	}, {
     * |		label: "确定",
     * |		returnValue: "confirm"
     * |	}, {
     * |		label: "取消",
     * |		returnValue: "cancel"
     * |	}]
     * |}, document.getElementById("customerbuttonconfirm"));
     * |function customerButtonConfirmReturn(value){
     * |	if(value=='skip'){
     * |		alert('您选择了"跳过"');
     * |	}else if(value=='ignore'){
     * |		alert('您选择了"忽略"');
     * |	}else if(value=='confirm'){
     * |		alert('您选择了"确定"');
     * |	}else{
     * |		alert('您选择了"取消"');
     * |	}
     * |} 
     * @img:
	 *      images/dialog/selfButton.png        
     */
    customerButtonConfirm: function(config,node){
		config = config||{};
        var _text = config["message"]?config["message"]:RIA_I18N.dialog.messageBox.confirmText;
		//config['html']是社保定制代码 zhaolei
		var html=config['html'];
		//将字符串中的script标签进行转义，防止脚本攻击
		html ? (_text=_text.replace(/<script(.*?)>/g,'&lt;script$1&gt;').replace(/<\/script\s*>/g,'&lt;/script&gt;')) : (_text=_text = this._stringConvert(_text));
        var buttons = config["customerButtons"];
        var type = config["type"];
        if (type != null) 
            type += "Icon";
        else {
            type = "questionIcon";
        }
	    var  isanimate = config["animate"];
		if(typeof(isanimate)=='undefined'||isanimate==null){
			isanimate = unieap.animate;
		}
		var  isClose = config["isClose"];
		if(isClose!=false){
			isClose = true;
		}
		var isIconCloseComplete = config["iconCloseComplete"];
		if(isIconCloseComplete!=false){
			isIconCloseComplete = true;
		}
        var htmlObj = this._getConfirmObj(_text, type);
        var dialogConfig = {
            width: config["width"]||htmlObj["width"],
            height: htmlObj["Height"],
            title: config["title"] ? config["title"] : RIA_I18N.dialog.messageBox.confirmTitle,
            inner: htmlObj["obj"],
            onComplete: config["onComplete"],
            animate: isanimate,
            buttonFocus: true,
            isExpand: false,
            resizable: false,
			iconCloseComplete:isIconCloseComplete,
			isClose:isClose,
			hideTitle:true
        }
        var dialog = null,
        	topWin = unieap.getTopWin();
        if (topWin.DialogUtil && config["inner"]==null && topWin.document.getElementsByTagName("frameset").length == 0&& !window.opener) {
			dialog = topWin.DialogUtil.createDialog(dialogConfig);
		}
		else {
			dialog = DialogUtil.createDialog(dialogConfig);
		}
        if (buttons&&buttons.length != 0) {
            for (var i = 0; i < buttons.length; i++) {
                obj = buttons[i];
                this._addButton(dialog, obj);
            }
        }
        this._show(dialog,node);
        $("."+type).parents(".u-dlg").removeClass("infoIcon warnIcon questionIcon errorIcon").addClass(type+"-b");
    },
    
    /**
     * @summary:
     *          单行输入提示框     
     * @param 
     * 		{object} config  设置输入提示框的参数，具体可设置参数见详述部分。
     * @param 
     * 		{domNode}  node  提示框渐入渐出效果的开始和结束节点，只有设置animate为true，才能看出效果
     * @description:
     *		此时文本框为单行，要求用户输入一定的交互信息，然后点击按钮确定或取消，
     *		返回值为一个JavaScript对象，包含两个属性分别为text和btn，第一个属性为string类型，值是文本框里的内容。第二个属性为boolean类型，标识用户点击了哪个按钮。
     *		config部分可设置参数如下：
     *			title：标题的显示内容，默认为"输入提示框"
     *			yesStr ：确定按钮的显示值，默认为"确定"，可自定义
     *			noStr ：取消按钮的显示值，默认为"取消"，可自定义
     *			message ：要显示的内容，默认为"请输入内容"
     *			onComplete：对话框关闭时要执行的回调函数
     *			animate：是否使用渐入渐出效果，默认为false
     *			iconCloseComplete：点击右上角的图标关闭确认框的时候，会不会触发回调函数，默认会触发且传入的参数值为{value:文本框的值,btn:false}
     *			isClose：是否显示右上角的关闭图标,默认显示
     * @example:
     * |MessageBox.prompt({
     * |		onComplete: promptReturn
     * |	}, document.getElementById("prompt"));	
     * |function promptReturn(value){
     * |		if(value.btn){
     * |			alert("您输入了"+'"'+value.text+'"');
     * |		}
     * |}
     * @img:
	 *      images/dialog/prompt.png    
     */
    prompt: function(config,node){
		config = config||{};
        this._prompt(config, "single",node);
    },
    
    /**
     * @summary:
     *          多行输入提示框     
     * @param:
     * 		{object} config  设置输入提示框的参数，具体可设置参数见详述部分。
     * @param:
     * 		{domNode}  node  提示框渐入渐出效果的开始和结束节点，只有设置animate为true，才能看出效果
     * @description:
     *		此时文本框为多行，要求用户输入一定的交互信息，然后点击按钮确定或取消，
     *		返回值为一个JavaScript对象，包含两个属性分别为text和btn，第一个属性为string类型，值是文本框里的内容，第二个属性为boolean类型，标识用户点击了哪个按钮。
     *		config部分可设置参数如下：
     *			title：标题的显示内容，默认为"输入提示框"
     *			yesStr ：确定按钮的显示值，默认为"确定"，可自定义
     *			noStr ：取消按钮的显示值，默认为"取消"，可自定义
     *			message ：要显示的提示内容，默认为"请输入内容"
     *			onComplete：对话框关闭时要执行的回调函数
     *			animate：是否使用渐入渐出效果，默认为false
     *			iconCloseComplete：点击右上角的图标关闭确认框的时候，会不会触发回调函数，默认会触发且传入的参数值为{text:文本框的值,btn:false}
     *			isClose：是否显示右上角的关闭图标,默认显示
     * @example:
     * |MessageBox.multiPrompt({
     * |		onComplete: promptReturn
     * |	}, document.getElementById("multiprompt"));	
     * |function promptReturn(value){
     * |		if(value.btn){
     * |			alert("您输入了"+'"'+value.text+'"');
     * |		}
     * |}
     * @img:
	 *      images/dialog/multiprompt.png    
     */
    multiPrompt: function(config,node){
        this._prompt(config, "multi",node);
    },
	
    /**
     * @summary:
     *       提供简单反馈信息的提示框
     * @param 
     * 		{object} config 设置信息提示框的参数，具体可设置参数见详述部分。
     * @param 
     * 		{domNode} node  提示框渐入渐出效果的开始和结束节点，只有设置animate为true，才能看出效果
     * @description:
     *		给用户一个提示，有一个按钮，点击后会将提示框关闭，但不会有任何返回值
     *		config部分可设置参数如下：
     *			title：标题的显示内容，默认为"确认框"
     *			message ：要显示的提示内容，默认为"信息提示"
     *			onComplete：对话框关闭时要执行的回调函数
     *			yesStr：确认按钮的显示值，默认为"确认"
     *			animate：是否使用渐入渐出效果，默认为false
     *			type : 确定要显示确认框的显示图标，可选值为"warn"、"info"、"error"和"question"，默认为"info"
     *			iconCloseComplete：点击右上角的图标关闭确认框的时候，会不会触发回调函数，默认会触发
     *			isClose：是否显示右上角的关闭图标,默认显示
     * @example:
     * |<script type="text/javascript">
     * |	MessageBox.alert(
     * |		{title:"提示信息",message:'请输入正确的姓名!'}
     * |	);
     * |</script>
     * @img:
	 *      images/dialog/alert.png    
     */
    alert: function(config,node){
    	//如果body没有初始化
    	if(!document.body) return;
		config = config||{};
        // var _yesStr = config["yesStr"]?config["yesStr"]:RIA_I18N.dialog.messageBox.confirm;
        var _yesStr = config["yesStr"]?config["yesStr"]:"关闭";
        var _text = config["message"]?config["message"]:RIA_I18N.dialog.messageBox.infoText;
//        if(unieap.isUserStyle && config["messageHtml"]){
//        	_text = config["messageHtml"];
//        }else{
//    		_text = this._stringConvert(_text);
//        }
		//_text = this._stringConvert(_text);
        var type = config["type"]||"info";
        if (type != null)
            type += "Icon";
	  	 var  isanimate = config["animate"];
		if(typeof(isanimate)=='undefined'||isanimate==null){
			isanimate = unieap.animate;
		}
		var  isClose = config["isClose"];
		if(isClose!=false){
			isClose = true;
		}
		var isIconCloseComplete = config["iconCloseComplete"];
		if(isIconCloseComplete!=false){
			isIconCloseComplete = true;
		}
        var htmlObj = this._getConfirmObj(_text, type);

        var dialogConfig = {
            width: htmlObj["width"],
            height: htmlObj["Height"],
            title: config["title"] ? config["title"] : RIA_I18N.dialog.messageBox.confirmTitle,
            inner: htmlObj["obj"],
            onComplete: config["onComplete"],
            animate: isanimate,
            buttonFocus: true,
            isExpand: false,
            resizable: false,
			iconCloseComplete:isIconCloseComplete,
			isClose:isClose,
			hideTitle:true
        }
        var dialog = null,
        	topWin = unieap.getTopWin();
        if (topWin.DialogUtil && config["inner"]==null && topWin.document.getElementsByTagName("frameset").length == 0&& !window.opener) {
            dialog = topWin.DialogUtil.createDialog(dialogConfig);
        }
        else 
            dialog = DialogUtil.createDialog(dialogConfig);
        dialog.addButton(_yesStr, function(){
			dialog.close();
		}, dialog,"btn-success", true);
        this._show(dialog,node);
        //$("."+type).parents(".u-dlg").removeClass("infoIcon warnIcon questionIcon errorIcon").addClass(type+"-b");
        $(dialog.domNode).removeClass("infoIcon warnIcon questionIcon errorIcon").addClass(type+"-b");
    },
	
    /**
     * @summary:
     *       可自动关闭的信息提示框
     * @param 
     * 		{object} config  设置信息提示框的参数，具体可设置参数见详述部分。
     * @param 
     * 		{domNode}  node  提示框渐入渐出效果的开始和结束节点，只有设置animate为true，才能看出效果
     * @description:
     *		本提示框不包含按钮，没有返回值，经过指定的时间后会自动消失并执行给定的回调函数。
     *		config部分可设置参数如下：
     *			title：标题的显示内容，默认为"自动关闭确认框"
     *			message ：要显示的提示内容，默认为"信息提示"
     *			onComplete：对话框关闭时要执行的回调函数
     *			animate：是否使用渐入渐出效果，默认为false
     *			type : 确定要显示确认框的显示图标，可选值为"warn"、"info"、"error"和"question"，默认为"info"
     *			durationTime ：信息提示框的显示持续的毫秒数，默认为1000，经过该段时间后提示框会自动关闭
     *      注意:当animate属性为true并且durationTime值小于1000时,durationTime的值会被重新设置成1000
     * @example: 
     * |<script type="text/javascript">
     * |	MessageBox.autoCloseAlert({
     * |		durationTime:'2000',
     * |		message:'自动关闭的提示框的提示信息',
     * |		type:'info'
     * |		}
     * |	);
     * |</script>
     * @img:
	 *      images/dialog/autoclose.png    
     */
    autoCloseAlert: function(config,node){
		config = config||{};
        var _text = config["message"]?config["message"]:RIA_I18N.dialog.messageBox.infoText;
		_text = this._stringConvert(_text);
        var type = config["type"]||"info";
        if (type != null) 
            type += "Icon";
		var  isanimate = config["animate"];
		if(typeof(isanimate)=='undefined'||isanimate==null){
			isanimate = unieap.animate;
		}
        var htmlObj = this._getConfirmObj(_text, type);
        var dialogConfig = {
            width: htmlObj["width"],
            height: htmlObj["Height"],
            title: config["title"] ? config["title"] : RIA_I18N.dialog.messageBox.autoClose,
            inner: htmlObj["obj"],
            onComplete: config["onComplete"],
            animate: isanimate,
            buttonFocus: true,
            isExpand: false,
            resizable: false,
			isClose : false,
			hideTitle:true
        }
        var dialog = null,
        	topWin = unieap.getTopWin();
        if (topWin.DialogUtil && config["inner"]==null && topWin.document.getElementsByTagName("frameset").length == 0&& !window.opener) {
            dialog = topWin.DialogUtil.createDialog(dialogConfig);
        }
        else
            dialog = DialogUtil.createDialog(dialogConfig);
        this._show(dialog,node);
        $("."+type).parents(".u-dlg").removeClass("infoIcon warnIcon questionIcon errorIcon").addClass(type+"-b");
        var timer = parseInt(config["durationTime"]);
		timer?isanimate&&timer<1000&&(timer=1000):(timer = 1000);
        setTimeout(function(){
            dialog.close()
        }, timer);
    },
	
	// 增加按钮
    _addButton: function(dialog, obj){
        dialog.addButton(obj.label, function(){
            dialog.setReturn(obj.returnValue);
            dialog.close();
        }, dialog,obj.className||"btn-success");
    },
    //得到各种confirm的主显示区域内容
    _getConfirmObj : function(text, icon){
        var obj = dojo.create("span");
		
        obj.innerHTML = text;
		dojo.mixin(obj.style,{
			'display':'inline-block'
		})
        //document.body.appendChild(obj);
		//iframe下body高度没有弹框高度不对的bug 
		window.top.document.body.appendChild(obj);
        var _width = obj.offsetWidth;
        if (_width == 0) 
            _width = 50;
        _width += 92;
        if (_width < 280) 
            _width = 280;
        if (!icon && _width > 50) {
            _width = _width - 32;
        }
        _height = obj.offsetHeight;
        if (_height == 0) 
            _height = 20;
        // _height += 151;
        if (_height>480){
            _height =480;
        }
        _height += 85;
        if(_width >520){
            if(_width - 92>520)_height +=45;
            if(text.indexOf('<br')>-1) _height +=45;
            _width = 520;

        }
        dojo.destroy(obj);
        obj = null;	
        var sInfo = "<table  vlign='center' style='width:100%;height:100%' class='messageBg'><tr>";
        sInfo += "<td align='center'><table style='width:100%;height:100%' border=0 cellspacing=10><tr style='display: none'><td ></tr>" +
            "<tr style='display: block;width: 100%'><td class= "+icon+ " style='text-align:left;display:block;word-break: keep-all;\n" +
            "    word-wrap: break-word;width:"+_width+"px"+"'> " + text + "</td></tr></table></td></tr></table>";
        return {
            width: _width,
            Height: _height,
            obj: sInfo
        };
    },
    // 显示
    _show: function(dialog, node){
        if (node == null) {
            dialog.show();
        }
        else {
            dialog.show(node);
        }
    },
    
    //单行和多行输入的统一入口
	 _prompt: function(config, type,event){
        var _yesStr = config["yesStr"]?config["yesStr"]:RIA_I18N.dialog.messageBox.confirm;
        var _noStr = config["noStr"]?config["noStr"]:RIA_I18N.dialog.messageBox.cancel;
        var _text = config["message"]?config["message"]:RIA_I18N.dialog.messageBox.inputContent;
		_text = this._stringConvert(_text);
        var htmlObj = null;
        if (type == "multi") {
            htmlObj = this._getMultiPromptObj(_text);
        }
        else {
            htmlObj = this._getPromptObj(_text);
        }
	    var  isanimate = config["animate"];
		if(typeof(isanimate)=='undefined'||isanimate==null){
			isanimate = unieap.animate;
		}
		var  isClose = config["isClose"];
		if(isClose!=false){
			isClose = true;
		}
		var isIconCloseComplete = config["iconCloseComplete"];
		if(isIconCloseComplete!=false){
			isIconCloseComplete = true;
		}
        var dialogConfig = {
            width: htmlObj["width"],
            height: htmlObj["Height"],
            title: config["title"] ? config["title"] : RIA_I18N.dialog.messageBox.promptDialog,
            inner: htmlObj["obj"],
            onComplete: config["onComplete"],
            animate: isanimate,
            buttonFocus: false,
            isExpand: false,
            resizable: false,
			iconCloseComplete:isIconCloseComplete,
			isClose:isClose,
			hideTitle:true
        }
		
		//点击右上角的"X"时执行
		isIconCloseComplete && isClose && (dialogConfig["onImgClose"]=function(){
			var _value = dialog.getWindow().document.getElementById("promptText").value;
			this.setReturn({text:_value,btn:false});
		});
		
        var dialog = null,
        	topWin = unieap.getTopWin();
        if (topWin.DialogUtil && config["inner"]==null && topWin.document.getElementsByTagName("frameset").length == 0&& !window.opener) {
			dialog = topWin.DialogUtil.createDialog(dialogConfig);
		}
		else {
			dialog = DialogUtil.createDialog(dialogConfig);
		}
        // 确认按纽。
        dialog.addButton(_yesStr, function(){
            var _value = dialog.getWindow().document.getElementById("promptText").value;
            dialog.setReturn({
                text: _value,
                btn: true
            });
            dialog.close();
        }, dialog,"btn-success");
        // 取消按纽。
        dialog.addButton(_noStr, function(){
             var _value = dialog.getWindow().document.getElementById("promptText").value;
            dialog.setReturn({
                text: _value,
                btn: false
            });
            dialog.close();
        }, dialog,"btn-default");
		
        this._show(dialog,event);
         $("."+type).parents(".u-dlg").removeClass("infoIcon warnIcon questionIcon errorIcon").addClass(type+"-b");
        window.setTimeout(function(){
           dialog.getWindow().document.getElementById("promptText").focus();
        }, 500);
    },
	 // 获得promp对象
    _getPromptObj: function(text){
        var obj = dojo.create("span");
        obj.innerHTML = text;	
			dojo.mixin(obj.style,{
				'display':'inline-block'
			})
        document.body.appendChild(obj);
        var _width = obj.offsetWidth;
        if (_width == 0) 
            _width = 50;
        _width += 92;
        if (_width < 380) 
            _width = 380;
        _height = obj.offsetHeight;
        if (_height == 0) 
            _height = 20;
        _height += 91;
        if (_height < 110) 
            _height = 110;
        dojo.destroy(obj);
        obj = null;// 直接删除对象。
        var sInfo = "<table  vlign='center' style='width:100%;height:100%' class='messageBg'>";
        sInfo += "<tr><td > " + text + "</td></tr>";
        sInfo += "<tr><td ><input type='text' autocomplete='off' style='width:" + (_width - 25) +"px' id='promptText'></td></tr></table>"
        return {
            width: _width,
            Height: _height,
            obj: sInfo
        };
    },
    // 获得promp对象
    _getMultiPromptObj: function(text){
        var obj = dojo.create("span");
        obj.innerHTML = text;
		dojo.mixin(obj.style,{
			'display':'inline-block'
		})
        document.body.appendChild(obj);
        var _width = obj.offsetWidth;
        if (_width == 0) 
            _width = 50;
        _width += 92;
        if (_width < 300) 
            _width = 300;
        _height = obj.offsetHeight;
        if (_height == 0) 
            _height = 20;
        _height += 162;
        if (_height < 180) 
            _height = 180;
        dojo.destroy(obj);
        obj = null;

        var sInfo = "<table  vlign='center' style='width:100%;height:100%' class='messageBg'>";
        sInfo += "<tr><td > " + text + "</td></tr>";
        sInfo += "<tr><td ><textarea rows='4' style='font-size:12pt;width:" + (_width - 25) + "px'  id='promptText'></textarea></td></tr></table>"
        return {
            width: _width,
            Height: _height,
            obj: sInfo
        };
    },	
	_stringConvert: function(text){
		text = this._convertEnterStr(text);//转换\n,\r\n为换行符号
		var textArr = text.split("@br@");//将字符串按行划分成数组
		var newStr = "";
		dojo.forEach(textArr,dojo.hitch(this,function(str){
			(newStr !="")&&(newStr += "@br@");
			newStr += this._textSplit(str);
		}));//根据长度和字符串定义重新转换字符串
		text = this._convertEnterBack(newStr);
		return this._convertCommonStr(text);//将字符串转换为标准字符串
	},
	_textSplit: function(text){	
		var str = text;
		var newStr="";
		var len = 0;
		while(text.length > 0){
			(newStr!="")&&(newStr += "@br@");
			var str_temp = this._subString(text,100);
			len = str_temp.length;
			newStr += str_temp;
			text = text.slice(len,(text.length));
		}
		newStr == ""?newStr = "@br@" + text:newStr += text;
		return newStr;
	},
	_subString:function(str,length){//length为要截取的长度
		var step=0; //当为汉字时，step增2，数字或者字母增1
		var str_temp="";
		for(var i=0;i<str.length;i++){
			if(str.charCodeAt(i)>255){
				step=step+2;
			}else{
				step=step+1;
			}
			if(step>length){
				return str_temp;
			}
			str_temp=str_temp+str.charAt(i);
		}
		return str;
	},
	_convertEnterStr: function(str){
		var RexStr = /\n|\r\n/g;
		str = str.replace(RexStr,    
	        function(MatchStr){    
	            switch(MatchStr){    
					case "\n":
						return "@br@";
						break;
					case "\r\n":
						return "@br@";
						break;       
	                default :    
	                    break;    
	            }    
	        }    
	    );
		if (str.replaceAll){
            str = str.replaceAll("#br","@br@");
        }else {
            str = str.replace("#br","@br@");
        }

		return str;	
	},
	_convertEnterBack: function(str){
		var RexStr = /@br@/g;
		str = str.replace(RexStr,"\n");
		return str;	
	},
	_convertCommonStr: function(str){
		return str.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/\"/g,"&quot;").replace(/'/g,"&#39;").
		replace(/\n/g,"<br>").replace(/\t/g,"&nbsp;&nbsp;").replace(/\s/g,"&nbsp;");   
	},
     //2018.7.13 sxf 兼容双日历警示框
	warn:function (config) {
        config.type = 'warn';
        return MessageBox.alert(config);
    },
     error:function (config) {
         config.type = 'error';
         return MessageBox.alert(config);
     }
};
// alert框外挂
// if(top.window.creatPortalAlert){
//     MessageBox.alertBack = MessageBox.alert;
//     MessageBox.alert = function(config,node){
//         top.window.creatPortalAlert({
//         	id:config["id"],
//             width: config["width"],
//             height: config["Height"],
//             title: config["title"] ? config["title"] : RIA_I18N.dialog.messageBox.confirmTitle,
//             message:config.message,
//             isMax:config.isMax,
//             yesStr:config.yesStr,
//             type : config["type"]||"info",
//             iconCloseComplete:config.iconCloseComplete,
//             onComplete:config["onComplete"]
//         });
//     };
//     MessageBox.close=function(id){
//     	top.window.closeAlert(id);
//     }
//
// }
dojo.provide("unieap.Tooltip");

dojo.require("dijit._Widget");
dojo.require("dijit._Templated");

dojo.declare("unieap._MasterTooltip",[dijit._Widget, dijit._Templated],{
      //内部类，是tooltip的真正实现类
  
        //渐入渐出的时间
		duration: 100,
		
		/**
		 * @summary:
		 * 		是否启用动画效果
		 * @type:
		 * 		{boolean}
		 * @default:
		 * 		读取unieap.animate的值
		*/
		animate : !!unieap.animate,
		
		//在自动关闭的情况下，保持对onmousedown事件的引用
		handle:null,
		
		//当取后台数据时，tooltip显示的值
		//内容正在加载，请稍候…
		loadingText:RIA_I18N.tooltip.loading,
		
		parenetNode:null,
		
		isDomNode:false,
		
		//tooltip的内部显示值，可以为字符串也可以为一个domNode
		inner:null,
		
		isAroundnode:true,
		
		isLoadData : false,
		
		eventPosition: null,

		templateString: "<div class=\"dijitTooltip dijitTooltipLeft\" id=\"dojoTooltip\">"+
	                         "<div class=\"dijitTooltipContainer dijitTooltipContents\" dojoAttachPoint=\"containerNode\"></div>"+
	                         "<div class=\"dijitTooltipConnector\" dojoAttachPoint=\"ConnectorNode\"></div>"+
                        "</div>",
									   
		postCreate: function(){
			dojo.body().appendChild(this.domNode);
			this.bgIframe = new dijit.BackgroundIframe(this.domNode);
			if(this.animate){
				this.fadeIn = dojo.fadeIn({ node: this.domNode, duration: this.duration, onEnd: dojo.hitch(this, "_onShow") });
				this.fadeOut = dojo.fadeOut({ node: this.domNode, duration: this.duration, onEnd: dojo.hitch(this, "_onHide") });
			}
		},
		
		//得到加载后台数据时的tooltip显示内容
        getLoadingContent:function(){
           return "<div class=\"dijitTooltipContainerLoadingContainer\"><div class=\"dijitTooltipContainerLoadingImage\"></div><div class=\"dijitTooltipContainerLoadingText\">"+this.loadingText+"</div></div>";
        },
        
		//tooltip显示
		show: function(/*String|object*/ config, /*DomNode*/ aroundNode, /*String[]?*/ position){
        	// @yll 当密码不可见
        	if(aroundNode && aroundNode.type=='password'){
        		return;
        	}
        	if(this.isLoadData){
              return;
            }
			if(this.aroundNode && this.aroundNode === aroundNode){
				return;
			}
			if(this.isShowingNow){
			   this.hide();
			}
			if(this.animate && this.fadeOut.status() == "playing"){
				if(!aroundNode.tagName){
				  var position = {x:aroundNode.clientX,y:aroundNode.clientY,width:1,height:1,preEventForTooltip:true};
				  arguments[1] = position;
				 }
				this._onDeck=arguments;
				return;
			}
			//支持通过domNode和事件两种方式确定tooltip显示位置
			if(aroundNode){
				if(aroundNode.tagName){
					this.aroundNode = aroundNode;
					this.isAroundnode = true;
				}else if(aroundNode.preEventForTooltip){
				   delete aroundNode.preEventForTooltip
				   this.isAroundnode = false;
				   this.aroundNode = null;
				   this.eventPosition = aroundNode;
				}else{
				  var e = dojo.fixEvent(aroundNode);
				  this.isAroundnode = false;
				  this.aroundNode = null;
				  this.eventPosition = {x:aroundNode.clientX,y:aroundNode.clientY,width:1,height:1};
				}
			}else{
				return;
			}
			var inner=null;
			var url = null;
			if(typeof config  =="string"){
			   inner = config;
			   this.setAutoClose(false);
			}else{
			   var autoClose = config["autoClose"];
			   this.setAutoClose(autoClose);
			   inner = config["inner"];
			   url = config["url"];
			}
			if(inner){
			  if (typeof(inner) == "object") {
			  	 this.isDomNode = true;
                 this.inner = inner;
                 this.parenetNode = inner.parentNode;
                 this.containerNode.innerHTML="";
			  	 this.containerNode.appendChild(inner);
			  } else {  
			    this.containerNode.innerHTML=inner;
		      }
			  try{
                this._show(position,arguments[1]);
			  }catch(e){
				  
			  }
			}else if(url){
            	var me = this;
            	this.containerNode.innerHTML = this.getLoadingContent();
            	this.isLoadData = true;
                this._show(position,arguments[1]);
            	dojo.rawXhrPost({
                  url: url,
                  sync: false,
                  timeout: 120*1000,
                  headers : {ajaxRequest:true},
                  load: function(text, args){	
                  	me.isLoadData = false;
                  	me.domNode.style.cssText=""
                	me.containerNode.innerHTML = text;
			        me._show(position)
                  },
				  error: function(text, args) {
				  	me.isLoadData = false;
				  	alert(text);
				  }
                });
            }
		},
		
		orient: function(/* DomNode */ node, /* String */ aroundCorner, /* String */ tooltipCorner){
			node.className = "dijitTooltip " +
				{
					"BL-TL": "dijitTooltipBelow dijitTooltipABLeft",
					"TL-BL": "dijitTooltipAbove dijitTooltipABLeft",
					"BR-TR": "dijitTooltipBelow dijitTooltipABRight",
					"TR-BR": "dijitTooltipAbove dijitTooltipABRight",
					"BR-BL": "dijitTooltipRight",
					"BL-BR": "dijitTooltipLeft"
				}[aroundCorner + "-" + tooltipCorner];
		},
		
         _show : function(position,tdDom){
			this.domNode.style.top = (this.domNode.offsetTop + 1) + "px";
			var align = {};
			var ltr = this.isLeftToRight();
			dojo.forEach( (position && position.length) ? position : unieap.Tooltip.defaultPosition, function(pos){
				switch(pos){
					case "after":				
						align[ltr ? "BR" : "BL"] = ltr ? "BL" : "BR";
						break;
					case "before":
						align[ltr ? "BL" : "BR"] = ltr ? "BR" : "BL";
						break;
					case "below":
						// first try to align left borders, next try to align right borders (or reverse for RTL mode)
						align[ltr ? "BL" : "BR"] = ltr ? "TL" : "TR";
						align[ltr ? "BR" : "BL"] = ltr ? "TR" : "TL";
						break;
					case "above":
					default:
						// first try to align left borders, next try to align right borders (or reverse for RTL mode)
						align[ltr ? "TL" : "TR"] = ltr ? "BL" : "BR";
						align[ltr ? "TR" : "TL"] = ltr ? "BR" : "BL";
						break;
				}
			});
			
			if (this.isAroundnode) {
				//通过节点确定tooltip的位置
				//var pos = dijit.placeOnScreenAroundElement(this.domNode, this.aroundNode, align, dojo.hitch(this, "orient"));
				try{
					var width = dojo.coords(this.containerNode).w;
					// if(width>100)
					//     this.containerNode.style.width = width+"px";
					var aroundNodeW = null;
				    var aroundNodeH = null;
				    var aroundNodePos = null;
					var aroundNodeW = this.aroundNode.offsetWidth; 
		            var aroundNodeH = this.aroundNode.offsetHeight; 
		            var aroundNodePos = dojo.coords(this.aroundNode, true);
				}catch(e){
					
				}
                var pos =  dijit._placeOnScreenAroundRect(this.domNode, 
		                    aroundNodePos.x, aroundNodePos.y, aroundNodeW, aroundNodeH,	// rectangle
		                    align, dojo.hitch(this, "orient"));

              
                	//更改中心对齐；包括整个提示框对齐、尖角对齐
                	var $dom = $(this.domNode);
                	var $trig = $dom.find('.dijitTooltipConnector');
                	
                	if($dom.hasClass('dijitTooltipABRight')){
                		$dom.removeClass('dijitTooltipABRight');
                	}
                	
                	var clz = $dom.attr('class');
                	if(clz.indexOf('Above')>0 || clz.indexOf('Below')>0){
                		//上、下提示；
                		$dom.css('left',aroundNodePos.x-($dom.width()/2)+(aroundNodeW/2)-3);
                		
                		$trig.css('left',($dom.width()-14)/2);
                		if(clz.indexOf('Above')>0){
                			$trig.css('top',$dom.height()-3);
                		}else{
                			$trig.css('top',3);
                		}
                	}else{
                		
                		$dom.css('top',aroundNodePos.y + (aroundNodeH/2) - $dom.height()/2);
                		$trig.css('top',($dom.height()-14)/2);
                		
                		if(clz.indexOf('Left')>0){
                			$trig.css('left',$dom.width()-3)
                		}else{
                			$trig.css('left',1)
                		}
                	}
          
				
				//当提示信息在aroundNode右下方时，需要动态调整下,这样更美观点
				if(pos.corner=='TR'&&pos.aroundCorner=='BR'){
		       	  var left=dojo.style(this.domNode,'left'),
		       	  	  top=dojo.style(this.domNode,'top');
				  dojo.style(this.domNode,{
				  	'left':(left-3)+"px",
				  	'top':(top-5)+"px"
				  });
		       }
			}else{
				//通过事件确定tooltip的位置
				var pos = dijit.placeOnScreenAroundElement(this.domNode,  this.eventPosition, align, dojo.hitch(this, "orient"));
			}
			var bodyWidth = dojo.style(dojo.body(),"width"),
				posLeft = dojo.style(this.domNode,"left"),
				toolTipRealWidth = dojo.style(this.domNode,"width");
				toolTipWidth = bodyWidth - posLeft;
			
			if(toolTipRealWidth > toolTipWidth){
			
						if(this.aroundNode.value){
							function getLength(str){
								var re = /[\u4E00-\u9FA5]/g
							    if(re.test(str)){
							        return str.match(re).length;
							    }
							    return 0;
							}
							// 计算字符串中中文个数
							var chineseNumber =  getLength(this.aroundNode.value);
							// 计算字符串中英文个数
							var englishNumber = this.aroundNode.value.length - chineseNumber;
							var strWidth = chineseNumber * 14 + englishNumber * 9 + 12;
							dojo.style(this.domNode,'width',strWidth+"px");
						}else{
							dojo.style(this.domNode,'width',toolTipWidth+"px");
						}
			
				dojo.style(this.domNode,'width',strWidth+"px");
			}
			// 如果tooltip的宽度大于 表格的宽度  让tooltip显示的时候 往上挪动35像素 这样就不会导致 tooltip遮挡住td  导致td一直闪缩
			var $patentGrid =  $(tdDom).parents(".u-xgrid") ||  $(tdDom).parents(".u-grid");
			if(this.domNode.clientWidth >  $patentGrid.width()/2 ){
				$(this.domNode).css(
					'top',(parseInt($(this.domNode).css('top'))-this.domNode.clientHeight)+'px'
				);
			}
			
			//JiaX 表格提示最右侧显示不全
			/**
			 * 如果提示框的宽度加上left大于body的宽度就进if
			 */
			
		
			// if($(tdDom).parents(".u-xgrid").length > 0){
//				if((posLeft + toolTipRealWidth) > (bodyWidth-20)){
//					var thisAroW = dojo.style(this.aroundNode,"width");
//					var thisL = posLeft - thisAroW-toolTipRealWidth;
//					//dojo.style(this.domNode,"left",thisL);
//					$(this.domNode).css("left",thisL);
//					var $dom = $(this.domNode);
//					var $trig = $dom.find('.dijitTooltipConnector');
//					var clz = $dom.attr('class');
//					if(clz.indexOf("Right")>0){
//						$dom.removeClass("dijitTooltipRight");
//						$dom.addClass("dijitTooltipLeft");
//						$trig.css('left',$dom.width()-3);
//					}
//				}
			// }
			
			dojo.style(this.domNode, "opacity", 0);
			if((pos.corner=='BL'&&pos.aroundCorner=='BR')||(pos.corner=='BR'&&pos.aroundCorner=='BL')){
				var connectorTop = (aroundNodePos.y - pos.y) + "px";
				/* 新增计算top位置值 CH */
				var connectorTop = this.containerNode.offsetHeight/2 - this.ConnectorNode/2;
				dojo.style(this.ConnectorNode, "top", connectorTop);
			}
			if(this.animate){
				this.fadeIn.play();
			}else{
				dojo.style(this.domNode, "opacity", 1);
				dojo.style(this.domNode,"display","block");
				this._onShow();
			}
			
			this.isShowingNow = true;
		
			
			    	var thisDomWidth = $(this.domNode).width() + 10,
					thisDomLeft = $(this.domNode).offset().left;
			    	if(thisDomWidth + thisDomLeft > bodyWidth + 16){
			    		$(this.domNode).css({
			    			'left':"auto",
						  	'right':10+"px"
			    		})
			    		$(this.ConnectorNode).css({
			    			'left':"auto",
						  	'right':60+"px"
			    		})
			    	}
		
			    	//有iframe的时候暂时把tooltip上下移动50px  否则会造成遮挡  闪的问题  去掉iframe的时候 就该回来  2018-11-27 林栋
			    	if(this.domNode.clientWidth == 428){//判断是否从表格过来的固定400宽度
			    		if(this.domNode.offsetTop >50){
			    			$(this.domNode).css({
				    			'top':this.domNode.offsetTop-60
				    		})
				    	
			    		}else{
			    			$(this.domNode).css({
				    			'top':this.domNode.offsetTop+60
				    		})
			    		}
			    		
					}
					//2019-12-25 马健 把tooltip网上调了点 为了不让它挡住左箭头 针对预算年度启用里设置的
					if(this.domNode.clientWidth == 66){
						if(this.domNode.offsetLeft < 50){
							$(this.domNode).css({
				    			'left':this.domNode.offsetLeft+20
							}),
							$(this.domNode).css({
				    			'top':this.domNode.offsetTop-40
				    		})
						}
					}
		 },

		_onShow: function(){
			if(dojo.isIE){
				this.domNode.style.filter="";
			}
		},

		hide: function(aroundNode){
			if (this.isShowingNow == false){
				return;
			} 
			if(this._onDeck && this._onDeck[1] == aroundNode){
				this._onDeck=null;
			}
			this.isShowingNow = false;
			this.aroundNode = null;
			if(this.animate){
				this.fadeIn.stop();
				this.fadeOut.play();
			}else{
				dojo.style(this.domNode,"display","none");
				this._onHide();
			}
		},

		_onHide: function(){
		
			this.domNode.style.cssText="";	// to position offscreen again
			if(this.isDomNode&&this.parenetNode){
				this.parenetNode.appendChild(this.inner);
			}
			this.containerNode.style.cssText="";
			this.containerNode.innerHTML = "";
			if(this._onDeck){
				this.show.apply(this, this._onDeck);
				this._onDeck=null;
			}
		},
		
		//是否自动关闭，默认为false，若设为true，则在点击页面其他地方的时候，提示框会消失
		setAutoClose : function(autoClose){
		  if(autoClose&&!this.handle){
		  	this.handle = dojo.connect(dojo.body(),"onmousedown",this,this._hide);
		  }
		  else if(!autoClose&&this.handle){
		     dojo.disconnect(this.handle);
		     this.handle=null;
		  }
		},
		_hide : function(ev){
		  	var el = ev.target;
	        for (; el != null && el != this.domNode; el = el.parentNode);
	        if (el == null&&!this.isLoadData&&this.isShowingNow) {
		        this.hide(this.aroundNode);
	        }
		},
		destroy: function(){
			if(this.bgIframe){
				this.bgIframe.destroy();
			}
			this.inherited(arguments);
		}

	}
);
dojo.declare("unieap.Tooltip",dijit._Widget,{
     	/**
	 * @declaredClass:
	 * 		unieap.Tooltip
	 * @summary:
	 * 		ToolTip的实现类
	 * @classDescription：
	 *		除了直接调用unieap.showTooltip生成Tooltip外，也可以通过标签定义Tooltip示例
	 *     支持给定一系列domNode对象的id组成的数组，在鼠标移上时，弹出tooltip，并在鼠标移出时Tooltip消失
	 *     显示内容在Tooltip定义的时候，需要指定，不支持加载后台内容
	 *     支持上、下、前、后四种显示位置，并自动选择较为美观的样式
	 */

      /**
	 * @type
	 * 		{string}
	 * @summary:
	 * 		指定Tooltip显示的内容
	 */
		label: "",

       /**
	 * @type
	 * 		{number}
	 * @summary:
	 * 		指定从鼠标移上到目标节点到tooltip显示出来所经历的间隔
	 */
		showDelay: 400,

       /**
	 * @type
	 * 		{array}
	 * @summary:
	 * 		该Tooltip所关联domNode的id所组成的数组
	 */
		connectId: [],

       /**
	 * @type
	 * 		{array}
	 * @summary:
	 * 		该Tooltip可以显示的位置组成的数组，可选值为above、below、after、before，程序会自动寻找合适的显示位置
	 *     若不进行设置，会按照unieap.Tooltip.defaultPosition的值进行显示
	 * @example :
	 *    ["above","below"]
	 */
		position: [],

		_setConnectIdAttr: function(ids){
			this._connectNodes = [];
			this.connectId = dojo.isArrayLike(ids) ? ids : [ids];
			dojo.forEach(this.connectId, function(id) {
				var node = dojo.byId(id);
				if (node) {
					this._connectNodes.push(node);
					dojo.forEach(["onMouseEnter", "onMouseLeave", "onFocus", "onBlur"], function(event){
						this.connect(node, event.toLowerCase(), "_"+event);
					}, this);
					if(dojo.isIE){
						node.style.zoom = 1;
					}
				}
			}, this);
		},

		postCreate: function(){	
			dojo.addClass(this.domNode,"dijitTooltipData");
		},

		_onMouseEnter: function(/*Event*/ e){
			this._onHover(e);
		},

		_onMouseLeave: function(/*Event*/ e){
			this._onUnHover(e);
		},

		_onFocus: function(/*Event*/ e){
			this._focus = true;
			this._onHover(e);
			this.inherited(arguments);
		},
		
		_onBlur: function(/*Event*/ e){
			this._focus = false;
			this._onUnHover(e);
			this.inherited(arguments);
		},

		_onHover: function(/*Event*/ e){
			if(!this._showTimer){
				var target = e.target;
				this._showTimer = setTimeout(dojo.hitch(this, function(){this.open(target)}), this.showDelay);
			}
		},

		_onUnHover: function(/*Event*/ e){
			if(this._focus){ return; }
			if(this._showTimer){
				clearTimeout(this._showTimer);
				delete this._showTimer;
			}
			this.close();
		},

		open: function(target){
			target = target || this._connectNodes[0];
			if(!target){ return; }
			if(this._showTimer){
				clearTimeout(this._showTimer);
				delete this._showTimer;
			}
			unieap.showTooltip(this.label || this.domNode.innerHTML, target, this.position);
			this._connectNode = target;
		},

		close: function(){
			if(this._connectNode){
				unieap.hideTooltip(this._connectNode);
				delete this._connectNode;
			}
			if(this._showTimer){
				clearTimeout(this._showTimer);
				delete this._showTimer;
			}
		},

		uninitialize: function(){
			this.close();
		}
	}
);

    /**
	 * @type
	 * 		{array}
	 * @summary:
	 * 		Tooltip的默认显示位置，在不指定position的情况下会在该数组指定的位置中寻找较优的显示位置
	 * @default :
	 *    ["above","below"]
	 */
unieap.Tooltip.defaultPosition = ["after", "before"];
dojo.provide("unieap.Helptip");
dojo.require("dijit._Widget");
dojo.require("dijit._Templated");
dojo.require("unieap.util.util");
dojo.declare("unieap.Helptip",[dijit._Widget, dijit._Templated],{
     	/**
		 * @declaredClass:
		 * 		unieap.Helptip
		 * @summary:
		 * 		Helptip的实现类
		 * @classDescription：
		 *		用于帮助提示
		 */
		 
		 
		/**
		 * @summary:
		 * 		设置helptip控件显示文字
		 * @type:
		 * 		{string}
		 * @example:
		 * |<div dojoType="unieap.Helptip"  label="帮助提示"></div>
		 */
		label:"帮助提示",
		/**
		 * @summary:
		 * 		通过改变css样式来设置helptip上的图标
		 * @type:
		 * 		{string}
		 * @example:
		 * |<style type="text/css">
		 * |		.iconBtn{
		 * |			display:inline-block;
		 * |			width:16px;
		 * |			height:16px;
		 * |			background:url("../images/find.gif") no-repeat;
		 * |		}
		 * |</style>
		 * |<div dojoType="unieap.Helptip" iconClass="iconBtn" label="设置图标"></div>
		 */
		iconClass:"",
		/**
		 * @summary:
		 * 		通过改变css样式来设置helptip上的文字
		 * @type:
		 * 		{string}
		 * @example:
		 * |<style type="text/css">
		 * |		.labelBtn{
		 * |			font-size:30px;
		 * |			font-color:blue;
		 * |		}
		 * |</style>
		 * |<div dojoType="unieap.Helptip" labelClass="labelBtn" label="设置文字"></div>
		 */
		labelClass:"",
		/**
		 * @summary:
		 * 		设置或获取对象的快捷键
		 * @type:
		 * 		{string}
		 * @example:
		 * |<div dojoType="unieap.Helptip" accessKey="j" label="J">
		 * |</div>
		 * 		在ie中按下Alt+j 触发这个按钮的onClick事件。
		 * 		其它浏览器需要使用各自的组合键。			
		 */
		accessKey: "",	
		
		/**
		 * @summary:
		 * 		设置helptip控件是否自动弹出
		 * @type:
		 * 		{string}
		 * @example:
		 * |<div dojoType="unieap.Helptip"  label="帮助提示" autoPopup="true"></div>
		 */
		autoPopup:false,
		
		toolTip:'',
		
		preview:false,
		
		topic:null,
		
		_subscribeHandle:null,
		
		disabled:false,
		
		helptips:null,
		
		startTip:null,
		
		endTip:null,
		
		helpTipNode:null,
		
		_rootID:null,
		
		cases:null,
		
		pageCount:0,
		tipCount:0,
		
		dialogIndex:0,
		
		/**
		 * @summary:
		 * 		点击“上一页”按钮之前事件
		 * @description:
		 * 		注意大返回值，返回true可以执行翻页，返回false将中断操作
		 * @param:
		 * 		{object} tip
		 * @example:
		 * |<div dojoType="unieap.Helptip" onBeforeProTip="hello()"></div>
		 * 		绑定hello方法到onBeforeProTip事件		
		 */
		onBeforeProTip:function(tip){
			return true;
		},
		
		/**
		 * @summary:
		 * 		点击“继续”按钮之前事件
		 * @description:
		 * 		注意大返回值，返回true可以执行翻页，返回false将中断操作
		 * @param:
		 * 		{object} tip
		 * @example:
		 * |<div dojoType="unieap.Helptip" onBeforeNextTip="hello()"></div>
		 * 		绑定hello方法到onBeforeNextTip事件		
		 */
		onBeforeNextTip:function(tip){
			return true;
		},
		
		noShowHelptipType:["isDialog","isCloseDialog","isTab","isSkip","isData"],
		
		templateString:
			"<a href='javascript:void(0);' class='u-helptip-btn-outer' tabindex='-1' style=\"text-decoration:none;vertical-align:middle;\">" +
				"<button type=\"button\"  class=\"u-form-btn\" dojoAttachPoint=\"focusNode, inputNode,btnNode\" onfocus=\"unieap.fep&&unieap.fep(this)\">" +
					"<table style=\"display:inline-block\">"+
						"<tr><td dojoAttachPoint=\"iconNode\"></td>" +
						"<td class=\"u-form-btn-txt\" dojoAttachPoint=\"labelNode\"></td></tr>" +
					"</table>"+
				"</button>"+
			"</a>",
			
		postMixInProperties:function(){
			this._parseNodeRef();
		},
		
		
		//用于判断是否弹出显示操作指引信息的节点
		_isShowHelptipType:function(helptip){
			var size = this.noShowHelptipType.length;
			for(var i=0;i<size;i++){
				if(helptip[this.noShowHelptipType[i]]){
					return false;
				}
			}
			return true;
		},
		
		postCreate:function(){
			this.inherited(arguments);
			this.inputNode.accessKey = this.accessKey;
			this.label&&this.setLabel(this.label);
			this.disabled&&this.setDisabled(this.disabled);
			this.labelClass&&this.setLabelClass(this.labelClass);
			this.iconClass&&this.setIconClass(this.iconClass);
			var flag = true;
			if("" != this.accessKey){
				flag = false;
			}
			this.connect(this.inputNode, "onclick", "_onButtonClick",flag);
			if(this.autoPopup){
				this.showHelpTip();
			}
			if(this.topic){
				var currentTabWin = unieap.getCurrentTabWin();
				if(currentTabWin){
					this._subscribeHandle = currentTabWin.unieap.subscribe(this.topic,dojo.hitch(this,function(){
						this.showHelpTip();
					}));
				}else{
					this._subscribeHandle = unieap.subscribe(this.topic,dojo.hitch(this,function(){
						this.showHelpTip();
					}));
				}
			}
			
			if(this.toolTip){
				this.inputNode.title = this.toolTip;
			}
		},
		
		/**
		 * @summary:
		 * 		显示帮助提示
		 * @description:
		 * 		提供一个方法，用户可以动态调用帮助提示信息显示
		 * @example:
		 * unieap.byId("helptip").showHelpTip();	
		 */
		showHelpTip:function(){
			if(this.helptips && this.helptips.length>0){
				var self = this;
				unieap.helpTipMode = true;
				var tab = this.getCurrentNavigatorContainer();
				if(tab){
					tab._afterPageLoad = function(){
						if(self.startTip){
							self._showHelpTip(self.startTip);
						}else{
							self._showNextTip(-1);
						}
					}
					this._selectFirstSelectPane(tab);
					tab.refresh(this.preview);
				}else{
				}
			}else{
				unieap.publish("_helpConsoleCloseHelptip",null);
			}
		},
		
		
		
		//初始化操作指引数据
		_initTips:function(tips){
			this.helptips = null;
			this.pageCount = 0;
			var size = tips.length;
			var pageNum = 0;
			this.autoPopup = false;
			this.startTip = null;
			this.endTip = null;
			if(size>0){
				tips.sort(function(tip1,tip2){
	    			return tip1.tipIndex-tip2.tipIndex;
	    		});
				this.helptips=[];
				for(var i=0;i<size;i++){
					var tip = {};
					var tipNode = tips[i];
					tip.id = tipNode.id;
					tip.noderefid = tipNode.noderefid;
					tip.title = tipNode.title;
					tip.isSkip = tipNode.isSkip=="T"?true:false;
					tip.isData = tipNode.isData=="T"?true:false;
					tip.isBind = tipNode.isBind=="T"?true:false;
					tip.isDialog = tipNode.isDialog=="T"?true:false;
					tip.isCloseDialog = tipNode.isCloseDialog=="T"?true:false;
					tip.isAuto = tipNode.isAuto=="T"?true:false;
					tip.isTab = tipNode.isTab=="T"?true:false;
					tip.isEnd = tipNode.isEnd=="T"?true:false;
					tip.isStart = tipNode.isStart=="T"?true:false;
					tip.isNoderef = tipNode.isNoderef=="T"?true:false;
					tip.content = tipNode.content;
					tip.controlType = tipNode.controlType;
					tip.helpData = tipNode.helpData;
					var image={};
//					image.url = tipNode.imgUrl;
					image.hasImage = tipNode.hasImage=="T"?true:false;
					image.width = tipNode.imgWidth;
					image.height = tipNode.imgHeight;
					tip.image = image;
					tip.width =  tipNode.tipWidth||"375px";
					if(i==0){
						if(tipNode.isAuto == "T"){
							this.autoPopup=true;
						}else{
							this.autoPopup=false;
						}
					}
					if(tip.isStart){
						tip.pageNum = 0;
//						tip.index = 0;
						tip.position = "below";
						this.startTip = tip;
//						this.helptips.push(tip);
					}else if(tip.isEnd){
						tip.position = "below";
//						tip.index = size-1;
						tip.pageNum = -1;
						this.endTip = tip;
					}else if(!this._isShowHelptipType(tip)){
						tip.pageNum = 0;
//						tip.index = this.helptips.length;
						this.helptips.push(tip);
					}else{
						pageNum++;
						this.pageCount++;
						tip.position = tip.noderefid?this._getPosition(tipNode.position):null;
						tip.pageNum = pageNum;
//						tip.index = this.helptips.length;
						this.helptips.push(tip);
					}
				}
				if(this.startTip){
					this.helptips.splice(0,0,this.startTip);
				}
				if(this.endTip){
					this.helptips.push(this.endTip);
				}
				for(var i=0; i<this.helptips.length;i++){
					this.helptips[i].index = i;
				}
			}
			this.tipCount = size;
		},
		
		_showHelpTip:function(helptip){
			if(helptip){
				var self = this;
				helptip["pageCount"] = this.pageCount;
				helptip["onProTip"] = this._onProTip;
				helptip["onNextTip"] = this._onNextTip;
				helptip["widget"] = this;
				if(this.helpTipNode){
					this.helpTipNode.destroy();
					this.helpTipNode = null;
				}
				//helptip数据如果有id造成再次创建这个tip时，id重复
				if(helptip.id){
					delete helptip.id
				}
				this.helpTipNode = new unieap.HelptipNode(helptip);
				var node = null;
				if(helptip.controlType == "unieapCell" && helptip.helpData){
					try{
						var cellData = dojo.fromJson(helptip.helpData);
						var gridId = helptip.noderefid;
						var idx = cellData.idx;
						var grid = dijit.byId(unieap.getCurrentRootNodeId(this.preview)+gridId) || dijit.byId(gridId);
						if(grid){
							var cell = grid.getLayoutManager().getCell(idx);
							if (cell) {
								if(grid.declaredClass == "unieap.xgrid.Grid"){
									var th = dojo.query("TH", grid.getManager('ViewManager').getViewByCell(cell).headerNode)[cell.layoutIndex];
								 	node = th.firstChild;
								}else if(grid.declaredClass == "unieap.grid.Grid"){
									var th = dojo.query("TH", grid.managers.managers.ViewManager.getViewByCell(cell).headerNode)[cell.layoutIndex];
								 	node = th.firstChild;
								}
							}
						}
					}catch(e){
					}
				}else{
					node = dojo.byId(unieap.getCurrentRootNodeId(this.preview)+helptip.noderefid) || dojo.byId(helptip.noderefid);
				}
				this.showTooltip(this.helpTipNode.domNode,node,helptip["position"]);
				if(node && helptip.isBind && helptip.helpData){
					var unieapObj = dijit.byNode(node);
					if(unieapObj){
						try{
							var dc = unieap.fromJson(helptip.helpData);
							this._bindData(unieapObj,dc);
						}catch(e){}
					}
				}
			}else{
				this.refresh();
			}
		},
		
		//显示上一条操作指引
		_onProTip:function(tip){
			var pageNum = tip.pageNum;
			var index = tip.index;
			var pageCount = tip.pageCount;
			var tipContainer = tip.widget;
			tipContainer._showProTip(index);
		},
		
		_showProTip:function(index){
			this.hideTooltip();
			var tipCount = this.tipCount;
			var helptips = this.helptips;
			var tip = helptips[index];
			var helptip = helptips[index-1];
			if(helptip){
				if(unieap.fireEvent(this,this.onBeforeProTip,[helptips,index])){
					if(tip && tip.isEnd){
						this.closeDialog();
						this.showHelpTip();
					}else{
						this._showHelptipOption(helptips,helptip,index,"pro");
					}
				}
			}else{
				this.refresh();
			}
		},
		
		
		
		//显示下一条操作指引
		_onNextTip:function(tip){
			var pageNum = tip.pageNum;
			var index = tip.index;
			var pageCount = tip.pageCount;
			var tipContainer = tip.widget;
			tipContainer._showNextTip(index);
		},
		
		_showNextTip:function(index){
			this.hideTooltip();
			var helptips = this.helptips;
			var helptip = helptips[index+1];
			if(helptip){
				if(unieap.fireEvent(this,this.onBeforeNextTip,[helptips,index])){
					if(index == helptips.length-1){
						this.refresh(false);
					}else{
						this._showHelptipOption(helptips,helptip,index,"next");
					}
				}
			}else{
				this.refresh();
			}
		},
		
		
		//操作指引分类型显示中枢
		_showHelptipOption:function(helptips,helptip,index,option){
			if(helptip.isDialog){
				if(option == "pro"){
					this._closeDialogOption(helptips,helptip,index,option);
				}else if(option == "next"){
					this._openDialogOption(helptips,helptip,index,option);
				}
			}else if(helptip.isCloseDialog){
				if(option == "pro"){
					this._openDialogOption(helptips,helptip,index,option);
				}else if(option == "next"){
					this._closeDialogOption(helptips,helptip,index,option);
				}
			}else if(helptip.isTab){
				this._openTabOption(helptips,helptip,index,option);
			}else if(helptip.isSkip){
				this._openSkipOption(helptips,helptip,index,option);
			}else if(helptip.isData){
				this._openDataOption(helptips,helptip,index,option);
			}else{
				this._showHelpTip(helptip);
			}
		},
		
		//关闭对话框操作
		_closeDialogOption:function(helptips,helptip,index,option){
			unieap.getXDialog().close();
			if(!this.preview && typeof(_currentNodesOfSingleFrame) != "undefined" && _currentNodesOfSingleFrame.length > 1){
				_currentNodesOfSingleFrame.pop();
				_currentNodeOfSingleFrame = _currentNodesOfSingleFrame[_currentNodesOfSingleFrame.length - 1];
			}
			if(option == "next"){
				this._showNextTip(index+1);
			}else{
				this._showProTip(index-1);
			}
		},
		
		//绑定数据操作
		_bindData:function(unieapObj,dc){
			if(dc && dc.getSingleDataStore){
				if(dc.getParameter("declaredClass") == "unieap.tree.Tree"){
					unieapObj.getBinding().setDataStore(unieapObj.getRootNode(),dc.getSingleDataStore());
					unieapObj.expandAllNodes();
				}else if(dc.getParameter("declaredClass") == "unieap.form.Form"){
					dojo.require("unieap.form.FormHelper");
					var row = dc.getSingleDataStore().getRowSet().getRow(0);
					if(row){
						unieapObj.getHelper().applyTextData(row.getData());
					}
				}else{
					unieapObj.getBinding().setDataStore(dc.getSingleDataStore());
				}
			}
		},
		
		//清空数据操作
		_clearData:function(unieapObj,dc){
			if(dc && dc.getSingleDataStore){
				if(dc.getParameter("declaredClass") == "unieap.tree.Tree"){
					var store = dc.getSingleDataStore();
					store.getRowSet().deleteAllRows();
					unieapObj.getBinding().setDataStore(unieapObj.getRootNode(),store);
				}else{
					unieapObj.getBinding().setDataStore(null);
				}
			}
		},
		
		//数据节点操作
		_openDataOption:function(helptips,helptip,index,option){
			if(helptip.helpData){
				node = dojo.byId(unieap.getCurrentRootNodeId(this.preview)+helptip.noderefid) || dojo.byId(helptip.noderefid);
				if(node){
					var unieapObj = dijit.byNode(node);
					if(unieapObj){
						var dc = unieap.fromJson(helptip.helpData);
						if(option == "next"){
							try{
								this._bindData(unieapObj,dc);
							}catch(e){}
						}else{
							try{
								this._clearData(unieapObj,dc);
							}catch(e){}
						}
					}
				}
			}
			if(option == "next"){
				this._showNextTip(index+1);
			}else{
				this._showProTip(index-1);
			}
		},
		
		
		//跳转节点操作
		_openSkipOption:function(helptips,helptip,index,option){
			if(helptip.helpData){
				var _self = this;
				try{
					var data = dojo.fromJson(helptip.helpData);
					var href = unieap.WEB_APP_NAME + data.href;
					var title = data.title;
					var oldHref = unieap.WEB_APP_NAME + data.oldHref;
					var oldTitle = data.oldTitle;
					var isReturn = data.isReturn
					var view = new unieap.view.View();
					var tab = this.getCurrentNavigatorContainer();
					if(option == "next"){
						if(isReturn){
							view.navigator.prePage(title,null);
							this._showNextTip(index+1);
						}else{
							tab._afterPageLoad = function(){
								_self._showNextTip(index+1);
							}
							view.navigator.forward(null,null,href,title,null);
						}
					}else{
						if(isReturn){
							tab._afterPageLoad = function(){
								_self._showProTip(index-1);
							}
							view.navigator.forward(null,null,oldHref,oldTitle,null);
						}else{
							view.navigator.prePage(oldTitle,null);
							this._showProTip(index-1);
						}
					}
				}catch(e){
					if(option == "next"){
						this._showNextTip(index+1);
					}else{
						this._showProTip(index-1);
					}
				}
			}else{
				if(option == "next"){
					this._showNextTip(index+1);
				}else{
					this._showProTip(index-1);
				}
			}
		},
		
		
		//tab页显示操作
		_openTabOption:function(helptips,helptip,index,option){
			if(helptip.helpData){
				try{
					var data = dojo.fromJson(helptip.helpData);
					var _this = this;
					var showTabId = option=="next"?data.showTabId:data.curTabId;
					var unieapObj = dijit.byId(unieap.getCurrentRootNodeId(this.preview)+showTabId);
					if(unieapObj){
						unieapObj.parentContainer.selectChild(unieapObj);
					}
					setTimeout(function(){
						if(option == "next"){
							_this._showNextTip(index+1);
						}else{
							_this._showProTip(index-1);
						}
					},200);
				}catch(e){
					if(option == "next"){
						this._showNextTip(index+1);
					}else{
						this._showProTip(index-1);
					}
				}
			}else{
				if(option == "next"){
					this._showNextTip(index+1);
				}else{
					this._showProTip(index-1);
				}
			}
		},
		
		//弹出对话框操作
		_openDialogOption:function(helptips,helptip,index,option){
			if(helptip.helpData){
				try{
					var _self = this;
					var data = dojo.fromJson(helptip.helpData);
					var dialog = null;
					if(data.url){
						data.url = unieap.WEB_APP_NAME + data.url;
						data._rootID = data._rootID + this.dialogIndex;
						this.dialogIndex++;
						dialog = new unieap.xdialog.Dialog(data);
						dialog._afterPageLoad = function(){
							if(option == "next"){
								_self._showNextTip(index+1);
							}else{
								_self._showProTip(index-1);
							}
						}
						dialog.show();
					}else{
						dialog = dijit.byId(unieap.getCurrentRootNodeId(this.preview)+data.id) || dojo.byId(data.id);
						if(dialog){
							dialog.show();
						}
						if(option == "next"){
							this._showNextTip(index+1);
						}else{
							this._showProTip(index-1);
						}
					}
				}catch(e){
					if(option == "next"){
						this._showNextTip(index+1);
					}else{
						this._showProTip(index-1);
					}
				}
			}else{
				if(option == "next"){
					this._showNextTip(index+1);
				}else{
					this._showProTip(index-1);
				}
			}
		},
		
		
		//刷新导航容器，并显示第一页
		refreshNavigatorContainer:function(){
			var tab = this.getCurrentNavigatorContainer();
			if(tab){
				this._selectFirstSelectPane(tab);
				var closedChildren = tab.closedNavigatorList;
				for(var i = 0, l = closedChildren.length; i < l; ++i){
					var pane = closedChildren.pop();
					var containerNode = pane.containerNode;
					unieap.destroyWidgets(containerNode);
					unieap.destroyDialogAndMenu(containerNode);
					pane.destroy && pane.destroy();
				}
				tab.refresh(this.preview);
			}
		},
		
		_selectFirstSelectPane :function(tab){
			var navigatorList = tab.navigatorList;
			if(navigatorList){
				var size = navigatorList.length;
				for(var i=0;i<size;i++){
					if(navigatorList[i]){
						tab.selectChild(navigatorList[i]);
						return;
					}
				}
			}
		},
		
		
		getCurrentNavigatorContainer:function(){
			return unieap.getCurrentNavigatorContainer(this.preview);
		},
		
		setLabel:function(label){
			this.label=label;
			this.labelNode.innerHTML=label;
		},
		setLabelClass: function(className) {
			this.labelClass&&dojo.removeClass(this.labelNode,this.labelClass);
			dojo.addClass(this.labelNode,className);
			this.labelClass=className;
		},
		setIconClass: function(className) {
			this.iconClass&&dojo.removeClass(this.iconNode,this.iconClass);
			dojo.addClass(this.iconNode,className);
			this.iconClass=className;
		},
		destroy:function(){
			if(this.helpTipNode){
				this.helpTipNode.destroy();
			}
			if(this._subscribeHandle){
				var topWin = unieap.getTopWin();
				topWin.unieap.unsubscribe(this._subscribeHandle);
			}
			this.inherited(arguments);
		},
		
		
		_parseNodeRef:function(){
			if(this.srcNodeRef){
				var helpNode = this.srcNodeRef.getElementsByTagName('tip');
				var size = helpNode.length;
				this.tipCount = size;
				var pageNum = 0;
				if(size>0){
					this.helptips=[];
					for(var i=0;i<size;i++){
						var tip = {};
						var tipNode = helpNode[i];
						tip.nodeId = tipNode.getAttribute("nodeRef");
						tip.title = tipNode.getAttribute("title");
						tip.content = tipNode.innerHTML;
						tip.image = dojo.fromJson(tipNode.getAttribute("image"));
						tip.width = dojo.fromJson(tipNode.getAttribute("width"))||"375px";
						if(!tip.nodeId && i==0){
							tip.pageNum = 0;
							tip.index = 0;
							tip.start = true;
							tip.position = "below";
							this.startTip = tip;
						}else if(!tip.nodeId && i==size-1){
							tip.position = "below";
							tip.index = size-1;
							tip.pageNum = -1;
							tip.end = true;
							this.endTip = tip;
						}else{
							pageNum++;
							this.pageCount++;
							tip.position = tip.nodeId?(tipNode.getAttribute("position")||"above"):"below";
							tip.pageNum = pageNum;
							tip.index = i;
						}
						this.helptips.push(tip);
					}
				}
			}
		},
		
		
		setDisabled:function(disabled){
			if(disabled){
				dojo.style(this.labelNode,"color","#a7a6aa");
				dojo.removeClass(this.domNode,'u-helptip-btn-outer');
				dojo.addClass(this.domNode,'u-helptip-btn-outer-disabled');
			}else{
				dojo.style(this.labelNode,"color","");
				dojo.removeClass(this.domNode,'u-helptip-btn-outer-disabled');
				dojo.addClass(this.domNode,'u-helptip-btn-outer');
			}
			this.btnNode.disabled=disabled;
			this.disabled = disabled;
		},
		
		previewHelpTipByCaseId:function(caseId){
    		this.showHelpTipByCaseId(caseId);
		},
		
		
		showTooltip : function( innerHTML, aroundNode,position){
			if(!unieap._masterHT){ 
			   unieap._masterHT = new unieap._MasterHelptip(); 
			}
			return unieap._masterHT.show(innerHTML, aroundNode, position);
		},
		
		hideTooltip:function(aroundNode){
			if(dojo.isIE<9){
				var _modalDiv = dojo.byId("_helptipModalDiv");
				if(_modalDiv){
					dojo.style(_modalDiv,"display","none");
				}
			}
			var _bgMark = dojo.byId("_helptipBgMark");
			if(_bgMark){
				dojo.style(_bgMark,"display","none");
			}
			if(!unieap._masterHT){ 
				unieap._masterHT = new unieap._MasterHelptip(); 
			}
			return unieap._masterHT.hide(aroundNode);
		},
		
		
		
		refresh:function(isCase){
			this.hideTooltip();
			this.closeDialog();
			if(!isCase){
				var tab = this.getCurrentNavigatorContainer();
				unieap.helpTipMode = false;
				tab._afterPageLoad = null;
				this.refreshNavigatorContainer();
				unieap.publish("_helpConsoleCloseHelptip",null);
			}
		},
		
		closeDialog:function(){
			var dialog = unieap.getXDialog();
			while(dialog){
				dialog.close();
				dialog.dialogMainContent && unieap.destroyWidgets(dialog.dialogMainContent)
				dialog.destroy && dialog.destroy();
				dialog = unieap.getXDialog();
			}
		},
		
		
		
		
		_getPosition:function(position){
			if(position=="2"){
				return "BM";
			}else if(position=="3"){
				return "ML";
			}else if(position=="4"){
				return "MR";
			}else if(position=="5"){
				return "TL";
			}else if(position=="6"){
				return "BL";
			}else if(position=="7"){
				return "TR";
			}else if(position=="8"){
				return "BR";
			}else if(position=="9"){
				return "MM";
			}else{
				return "TM";
			}
		},
		
		onBeforeClick:function(e){
			return true;
		},
		
		//绑定click事件
		_onButtonClick: function(/*Event*/ e) {
			if(unieap.fireEvent(this,this.onBeforeClick,[e])){
				if(this.cases){
					if(this.cases.length==1){
						this._clickCase(this.cases[0].id);
					}else{
						this.showCases();
					}
				}else{
					this.showHelpTip();
				}
			}
			dojo.stopEvent(e);
		},	
		
		
		//显示操作指引目录
		showCases:function(){
			this.helpTipNode = new unieap.HelptipNode({
				title:"操作指引教程",
				isCase:true,
				widget:this,
				width:"300px"
			});
			var size = this.cases.length;
			for(var i=0;i<size;i++){
				var link = this._createCaseLink(this.cases[i]);
				this.helpTipNode.contentNode.appendChild(link);
			}
			this.showTooltip(this.helpTipNode.domNode);
		},
		
		_createCaseLink:function(caseTip){
			var link = dojo.create("a",{
							onclick:dojo.hitch(this,this._clickCase,caseTip.id),
							href:"#",
							classname:"u-helptip-index-link",
							name:caseTip.id
						});
			link.innerHTML = caseTip.title;
			return link;
		},
		
		_clickCase:function(caseId){
			this.hideTooltip();
			var win = unieap.getCurrentTabWin();
			if(!win.unieap.helpTipWidget){
				win.unieap.helpTipWidget = new win.unieap.Helptip();
			}
			win.unieap.helpTipWidget.showHelpTipByCaseId(caseId);
		},
		
		
		showHelpTipByCaseId:function(caseId){
			var _self = this;
			var url=unieap.WEB_APP_NAME+ "/techcomp/ria/commonProcessor!commonMethod.action?t=" + new Date().getTime();
		    var dc=new unieap.ds.DataCenter();
			dc.setParameter("_boId", "ria_helptipBO_bo");
			dc.setParameter("_methodName", "getAllTipsByCaseId");
			dc.setParameter("_methodParameterTypes", "java.lang.String");
			dc.setParameter("caseId", caseId);
		    dc.setParameter("_parameters", "caseId");
		    dc.setParameter("_parameterTypes", "string");
		    unieap.Action.requestData({
		    	url:url,
		    	sync:true,
		    	load:function(dc){
		    		if (dc && dc.declaredClass == "unieap.ds.DataCenter"&& dc.getCode() >= 0) {
			    		var ds = dc.getSingleDataStore();
			    		if(ds && ds.declaredClass == "unieap.ds.DataStore"){
				    		tips = ds.getRowSet().getData(unieap.ds.Buffer.PRIMARY);
				    		_self._initTips(tips);
			    		}
					}
		    		_self.showHelpTip();
		    	},
		       error:function(){
		       		unieap.publish("_helpConsoleCloseHelptip",null);
		       }
		    },dc,true);
		},
		
		getAllCaseByMenuId:function(menuId,_load){
			var _self = this;
			var url=unieap.WEB_APP_NAME+ "/techcomp/ria/commonProcessor!commonMethod.action?t=" + new Date().getTime();
		    var dc=new unieap.ds.DataCenter();
			dc.setParameter("_boId", "ria_helptipCaseBO_bo");
			dc.setParameter("_methodName", "queryMenuAllHelptipCase");
			dc.setParameter("_methodParameterTypes", "java.lang.String");
			dc.setParameter("menuId", menuId);
		    dc.setParameter("_parameters", "menuId");
		    dc.setParameter("_parameterTypes", "string");
		    unieap.Action.requestData({
		    	url:url,
		    	sync:false,
		    	load:function(dc){
		    		if (dc && dc.declaredClass == "unieap.ds.DataCenter"&& dc.getCode() >= 0) {
			    		var ds = dc.getSingleDataStore();
			    		if(ds && ds.declaredClass == "unieap.ds.DataStore"){
		    				var cases = ds.getRowSet().getData(unieap.ds.Buffer.PRIMARY);
		    				if(cases.length==0){
		    					cases = null;
		    				}
			    		}
					}
					_load(cases);
					_self.cases = cases;
					_self.setDisabled(cases?false:true);
		    	}
		    },dc,true);
		}
	}
);


		


dojo.declare("unieap.HelptipNode",[dijit._Widget, dijit._Templated],{
		id:"",
		title:"",
		content:"",
		image:"",
		index:"",
		controlType:"",
		position:"above",
		pageNum:"",
		pageCount:"",
		width:"375px",
		upBtn :"上一步",
		downBtn : "继续",
		endBtn : "结束",
		startBtn : "开始教程",
		replayBtn : "重放",
		widget:null,
		isStart:false,
		isEnd:false,
		isData:false,
		isCase:false,
		isSkip:false,
		isDialog:false,
		isCloseDialog:false,
		isTab:false,
		helpData:null,
		pageSep:" of ",
		templateString:
			"<table class=\"helpTipBg\" dojoAttachPoint=\"bgNode\">" +
				"<tr>" +
					"<td colspan=\"2\">" +
						"<div class=\"helpTipTittle\" dojoAttachPoint=\"titleNode\"></div>" +
						"<a class=\"helpTipClose\" dojoAttachPoint=\"closeNode\" dojoAttachEvent=\"onclick:_onClose\"></a>" +
					"</td>" +
				"</tr>" +
				"<tr>" +
					"<td valign=\"top\">" +
						"<div class=\"helpTipContent\" dojoAttachPoint=\"contentNode\"></div>" +
					"</td>" +
					"<td align=\"right\" valign=\"center\">" +
						"<img class=\"helpTipImg\" dojoAttachPoint=\"imageNode\"></img>" +
					"</td>" +
				"</tr>" +
				"<tr>" +
					"<td colspan=\"2\">" +
						"<div class=\"helpTipPage\" dojoAttachPoint=\"pageNode\"></div>" +
						"<div class=\"helpTipBtnContent\" dojoAttachPoint=\"btnContentNode\">" +
							"<a href='javascript:void(0);' class='u-helptip-bbtn-outer' dojoAttachPoint=\"proBtnNode\" tabindex='-1' style=\"text-decoration:none;vertical-align:middle;\">" +
								"<button type=\"button\" class=\"u-helptip-btn-back u-helptip-btn-txt\" dojoAttachPoint=\"proButtonNode\"  dojoAttachEvent=\"onclick:_onProTip\" onfocus=\"unieap.fep&&unieap.fep(this)\">" +
									"<table style=\"display:inline-block\">"+
										"<tr>" +
											"<td dojoAttachPoint=\"proIconNode\"></td>" +
											"<td class=\"helpTipBtnBText\" dojoAttachPoint=\"proNode\"></td>" +
										"</tr>" +
									"</table>"+
								"</button>"+
							"</a>" +
							"<a href='javascript:void(0);' class='u-helptip-nbtn-outer u-helptip-nbtn' dojoAttachPoint=\"nextBtnNode\" tabindex='-1' style=\"text-decoration:none;vertical-align:middle;\">" +
								"<button type=\"button\"  class=\"u-helptip-btn-back\"  dojoAttachEvent=\"onclick:_onNextTip\" onfocus=\"unieap.fep&&unieap.fep(this)\">" +
									"<table style=\"display:inline-block\">"+
										"<tr>" +
											"<td class=\"helpTipBtnNText\" dojoAttachPoint=\"nextNode\"></td>" +
											"<td dojoAttachPoint=\"nextIconNode\"></td>" +
										"</tr>" +
									"</table>"+
								"</button>"+
							"</a>" +
						"</div>" +
					"</td>" +
				"</tr>"+
			"</table>",
		postCreate:function(){
			this.inherited(arguments);
			dojo.style(this.bgNode,"width",this.width);
			this.title&&this.setTitle(this.title);
			if(this.isCase){
				dojo.style(this.btnContentNode,"display","none");
				dojo.style(this.pageNode,"display","none");
			}else{
				this.content&&this.setContent(this.content);
				this.image&&this.setImage(this.image);
				var tipCount = this.widget.tipCount;
				if(!this.widget.endTip && this.pageNum == this.pageCount){
					this.pageNode.innerHTML=this.pageNum+this.pageSep + this.pageCount;
					this.nextNode.innerHTML=this.endBtn;
					if(this.pageCount == 1){
						dojo.style(this.proBtnNode,"display","none");
					}else{
						this.proNode.innerHTML=this.upBtn;
						dojo.addClass(this.proIconNode,"helpTipBtnBImg");
					}
				}else if(!this.widget.startTip && this.pageNum == 1){
					dojo.style(this.proBtnNode,"display","none");
					dojo.addClass(this.nextIconNode,"helpTipBtnNImg");
					this.pageNode.innerHTML=this.pageNum+this.pageSep + this.pageCount;
					this.nextNode.innerHTML=this.downBtn;
				}else if(this.isStart){
					dojo.style(this.proBtnNode,"display","none");
					dojo.addClass(this.nextIconNode,"helpTipBtnNImg");
					this.pageNode.innerHTML = "";
					if(this.pageCount == 0){
						this.nextNode.innerHTML=this.endBtn;
					}else{
						this.nextNode.innerHTML=this.startBtn;
						dojo.addClass(this.nextNode,"helpTipBtnSText");
					}
				}else if(this.isEnd){
					this.pageNode.innerHTML = "";
					this.nextNode.innerHTML=this.endBtn;
					this.proNode.innerHTML=this.replayBtn;
					dojo.addClass(this.proBtnNode,"u-helptip-nbtn");
					dojo.removeClass(this.proButtonNode,"u-helptip-btn-txt");
					dojo.addClass(this.proNode,"helpTipBtnBReplay");
					dojo.style(this.proBtnNode,"marginRight","6px");
				}else{
					this.pageNode.innerHTML=this.pageNum+this.pageSep + this.pageCount;
					this.proNode.innerHTML=this.upBtn;
					this.nextNode.innerHTML=this.downBtn;
					dojo.addClass(this.proIconNode,"helpTipBtnBImg");
					dojo.addClass(this.nextIconNode,"helpTipBtnNImg");
				}
			}
		},
		setTitle:function(title){
			this.title=title;
			this.titleNode.innerHTML=title;
		},
		setImage:function(image){
			this.image=image;
			if(image.hasImage){
				this.imageNode.src= unieap.WEB_APP_NAME + "/techcomp/ria/getHelpTipImageById.action?id=" + this.id;
				var imgWidth = this.image["width"]?this.image["width"] + "px" : "120px";
				var imgHeight= this.image["height"]?this.image["height"] + "px" : "80px";
				dojo.style(this.imageNode,{
					'width':imgWidth,
					'height':imgHeight,
					'display':"block"
				});
			}
		},
		setContent:function(content){
			this.content=content;
			this.contentNode.innerHTML=content;
		},
		_onProTip:function(e){
			unieap.fireEvent(this,this.onProTip,[this]);
			dojo.stopEvent(e);
		},
		_onNextTip:function(e){
			unieap.fireEvent(this,this.onNextTip,[this]);
			dojo.stopEvent(e);
		},
		_onClose:function(e){
			this.widget.refresh(this.isCase);
			dojo.stopEvent(e);
		},
		onProTip:function(widget){
			
		},
		onNextTip:function(widget){
			
		}
	}
);



dojo.declare("unieap._MasterHelptip",unieap._MasterTooltip,{
		
		templateString: "<div class=\"dijitTooltip dijitTooltipLeft\" id=\"dojoTooltip\">"+
	                         "<div class=\"dijitTooltipContainer dijitTooltipContents dijitHelptipContents\" dojoAttachPoint=\"containerNode\"></div>"+
	                         "<div class=\"dijitTooltipConnector\" dojoAttachPoint=\"ConnectorNode\"></div>"+
                        "</div>",
		
		
		show: function(/*String|object*/ config, /*DomNode*/ aroundNode, /*String[]?*/ position){
			if(this.aroundNode && this.aroundNode === aroundNode){
				return;
			}
			if(this.isShowingNow){
			   this.hide();
			}
			//支持通过domNode和事件两种方式确定tooltip显示位置
			if(aroundNode){
				if(aroundNode.tagName){
					this.aroundNode = aroundNode;
					this.isAroundnode = true;
				}
			}
			var inner=config;
			this.setAutoClose(false);
			if(inner){
			  if (typeof(inner) == "object") {
			  	 this.isDomNode = true;
                 this.inner = inner;
                 this.parenetNode = inner.parentNode;
                 this.containerNode.innerHTML="";
			  	 this.containerNode.appendChild(inner);
			  } else {
			    this.containerNode.innerHTML=inner;
		      }
                this._show(position);
			}
		},
		
		orientHelp: function(/* DomNode */ node, /* String */ aroundCorner, /* String */ tooltipCorner){
			node.className = "dijitTooltip " +
				{
					"TM-BM": "dijitHelpTipTop",
					"BM-TM": "dijitHelpTipBottom",
					"ML-MR": "dijitHelpTipLeft",
					"MR-ML": "dijitHelpTipRight",
					"TL-TR": "dijitHelpTipTopLeft",
					"BL-BR": "dijitHelpTipBottomLeft",
					"TR-TL": "dijitHelpTipTopRight",
					"BR-BL": "dijitHelpTipBottomRight"
				}[aroundCorner + "-" + tooltipCorner];
		},
		
		orientHelpMid: function(/* DomNode */ node, /* String */ aroundCorner, /* String */ tooltipCorner){
			node.className = "dijitTooltip " + "dijitHelpTipMid";
		},
		

         _show : function(position){
			this.domNode.style.top = (this.domNode.offsetTop + 1) + "px";
			var align = {};
			var ltr = this.isLeftToRight();
			switch(position){
				case "TR":				
					align["TR"] = "TL";
					break;
				case "BR":				
					align["BR"] = "BL";
					break;
				case "TL":
					align["TL"] = "TR";
					break;
				case "BL":
					align["BL"] = "BR";
					break;
				case "TM":
					align["TM"] = "BM";
					break;
				case "BM":
					align["BM"] = "TM";
					break;
				case "MR":
					align["BR"] = "BL";
					break;
				case "ML":
					align["ML"] = "MR";
					break;
				default:
					align[ltr ? "BL" : "BR"] = ltr ? "TL" : "TR";
					align[ltr ? "BR" : "BL"] = ltr ? "TR" : "TL";
					break;
			}
			if (this.isAroundnode) {
				var width = dojo.coords(this.containerNode).w;
				var aroundNodeW = null;
			    var aroundNodeH = null;
			    var aroundNodePos = null;
				if(this.aroundNode){
					aroundNodeW = this.aroundNode.offsetWidth; 
		            aroundNodeH = this.aroundNode.offsetHeight; 
				}
            	if(!this.aroundNode || position == "MM"){
            		aroundNodePos = dojo.coords(dojo.body(), true);
            		var containerNodePos = dojo.coords(this.containerNode)
            		var pos =  dijit._placeOnScreenAroundRect(this.domNode, 
	                    aroundNodePos.w/2-containerNodePos.w/2, aroundNodePos.h/2-containerNodePos.h/2, aroundNodeW, aroundNodeH,	// rectangle
	                    align, dojo.hitch(this, "orientHelpMid"));
            	}else if(position == "TM"){
		            aroundNodePos = dojo.coords(this.aroundNode, true);
		            var bodyPos = dojo.coords(dojo.body(), true);
					var containerNodeWidth = dojo.style(this.domNode,"width");
					var containerNodeHeight = dojo.style(this.domNode,"height");
					if(containerNodeHeight-aroundNodeH/2 - aroundNodePos.y < 0 && containerNodeWidth/2  - aroundNodeW/2 - aroundNodePos.x < 0 && containerNodeWidth/2  + aroundNodeW/2 - (bodyPos.w -aroundNodePos.x) < 0){
	            		var pos =  dijit._placeOnScreenAroundRect(this.domNode, 
			                    aroundNodePos.x-aroundNodeW/2+containerNodeWidth/2, aroundNodePos.y, aroundNodeW, aroundNodeH,	// rectangle
			                    align, dojo.hitch(this, "orientHelp"));
					}else if(containerNodeWidth - aroundNodeW/2 - aroundNodePos.x < 0){
						position = "TL";
						align = {};
						align["TL"] = "TR";
						var pos =  dijit._placeOnScreenAroundRect(this.domNode, 
		                    aroundNodePos.x, aroundNodePos.y-15, aroundNodeW, aroundNodeH,	// rectangle
		                    align, dojo.hitch(this, "orientHelp"));
					}else if(containerNodeWidth + aroundNodeW/2 - (bodyPos.w - aroundNodePos.x)  < 0){
						position = "TR";
						align = {};
						align["TR"] = "TL";
						var pos =  dijit._placeOnScreenAroundRect(this.domNode, 
		                    aroundNodePos.x, aroundNodePos.y-15, aroundNodeW, aroundNodeH,	// rectangle
		                    align, dojo.hitch(this, "orientHelp"));
					}else{
						var pos =  dijit._placeOnScreenAroundRect(this.domNode, 
			                    aroundNodePos.x-aroundNodeW/2+containerNodeWidth/2, aroundNodePos.y, aroundNodeW, aroundNodeH,	// rectangle
			                    align, dojo.hitch(this, "orientHelp"));
					}
            	}else if( position == "BM"){
		            aroundNodePos = dojo.coords(this.aroundNode, true);
		            var bodyPos = dojo.coords(dojo.body(), true);
					var containerNodeWidth = dojo.style(this.domNode,"width");
					var containerNodeHeight = dojo.style(this.domNode,"height");
					if(containerNodeWidth/2  - aroundNodeW/2 - aroundNodePos.x < 0 && containerNodeWidth/2  + aroundNodeW/2 - (bodyPos.w -aroundNodePos.x) < 0){
	            		var pos =  dijit._placeOnScreenAroundRect(this.domNode, 
			                    aroundNodePos.x-aroundNodeW/2+containerNodeWidth/2, aroundNodePos.y, aroundNodeW, aroundNodeH,	// rectangle
			                    align, dojo.hitch(this, "orientHelp"));
					}else if(containerNodeWidth - aroundNodePos.x < 0){
						position = "BL";
						align = {};
						align["BL"] = "BR";
						var pos =  dijit._placeOnScreenAroundRect(this.domNode, 
		                    aroundNodePos.x, aroundNodePos.y +containerNodeHeight -15, aroundNodeW, aroundNodeH,	// rectangle
		                    align, dojo.hitch(this, "orientHelp"));
					}else if(containerNodeWidth  - (bodyPos.w -aroundNodePos.x) < 0){
						position = "BR";
						align = {};
						align["BR"] = "BL";
						var pos =  dijit._placeOnScreenAroundRect(this.domNode, 
		                    aroundNodePos.x, aroundNodePos.y +containerNodeHeight -15, aroundNodeW, aroundNodeH,	// rectangle
		                    align, dojo.hitch(this, "orientHelp"));
					}else{
						var pos =  dijit._placeOnScreenAroundRect(this.domNode, 
			                    aroundNodePos.x-aroundNodeW/2+containerNodeWidth/2, aroundNodePos.y, aroundNodeW, aroundNodeH,	// rectangle
			                    align, dojo.hitch(this, "orientHelp"));
					}
            	}else if(position == "MR" || position == "ML"){
		            aroundNodePos = dojo.coords(this.aroundNode, true);
					var containerNodeHeight = dojo.style(this.domNode,"height");
            		var pos =  dijit._placeOnScreenAroundRect(this.domNode, 
		                    aroundNodePos.x, aroundNodePos.y-aroundNodeH/2+containerNodeHeight/2, aroundNodeW, aroundNodeH,	// rectangle
		                    align, dojo.hitch(this, "orientHelp"));
            	}else if(position == "TR" || position == "TL"){
            		aroundNodePos = dojo.coords(this.aroundNode, true);
            		var pos =  dijit._placeOnScreenAroundRect(this.domNode, 
		                    aroundNodePos.x, aroundNodePos.y-15, aroundNodeW, aroundNodeH,	// rectangle
		                    align, dojo.hitch(this, "orientHelp"));
            	}else if(position == "BR" || position == "BL"){
            		var containerNodeWidth = dojo.style(this.domNode,"width");
					var containerNodeHeight = dojo.style(this.domNode,"height");
            		aroundNodePos = dojo.coords(this.aroundNode, true);
            		var pos =  dijit._placeOnScreenAroundRect(this.domNode, 
		                    aroundNodePos.x, aroundNodePos.y +containerNodeHeight -15, aroundNodeW, aroundNodeH,	// rectangle
		                    align, dojo.hitch(this, "orientHelp"));
            	}
            	this._setConnectorNodeStyle(position);
				this._onShow();
			}
		 },
		 
		 _setConnectorNodeStyle:function(position){
		 	var connectorStyle = {top:"auto",bottom:"auto",left:"auto",right:"auto"};
		 	var containerNodeWidth = dojo.style(this.domNode,"width");
		 	var containerNodeHeight = dojo.style(this.domNode,"height");
		 	if(position == "TM"){
		 		connectorStyle.left = (containerNodeWidth/2-19)+"px";
		 		connectorStyle.bottom = "-35px";
		 	}else if(position == "BM"){
		 		connectorStyle.left = (containerNodeWidth/2-19)+"px";
		 		connectorStyle.top = "-35px";
		 	}else if(position == "MR"){
		 		connectorStyle.left = "0px";
		 		connectorStyle.bottom = (containerNodeHeight/2-19)+"px";
		 	}else if(position == "ML"){
		 		connectorStyle.right = "-27px";
		 		connectorStyle.bottom = (containerNodeHeight/2-19)+"px";
		 	}else if(position == "BR"){
		 		connectorStyle.top = "0px";
		 		connectorStyle.left = "0px";
		 	}else if(position == "BL"){
		 		connectorStyle.top = "0px";
		 		connectorStyle.right = "-27px";
		 	}else if(position == "TR"){
//		 		connectorStyle.bottom = "0px";
//		 		connectorStyle.left = "0px";
				connectorStyle.top = "0px";
		 		connectorStyle.left = "0px";
		 	}else if(position == "TL"){
//		 		connectorStyle.bottom = "0px";
//		 		connectorStyle.right = "-27px";
				connectorStyle.top = "0px";
		 		connectorStyle.right = "-27px";
		 	}
		 	dojo.style(this.ConnectorNode,connectorStyle);
		 },
		 
		 _onShow:function(){
		 	this._createModelDiv();
			if(dojo.isIE){
				this.domNode.style.filter="";
			}
			this.isShowingNow = true;
		 },
		 
 		_createModelDiv:function(){
 			if(dojo.isIE<9){
				var _modalDiv = dojo.byId("_helptipModalDiv"); 
				if(!_modalDiv){
					_modalDiv =dojo.create("div",{
						id:'_helptipModalDiv',
						className:'u-helpTip-modalDivIE'
					});
				}
				document.body.appendChild(_modalDiv);
				var helpPos = dojo.coords(this.containerNode,true);
				dojo.style(_modalDiv,{
					 left:  helpPos.x-10?((helpPos.x-10)+"px"):(helpPos.x+"px"),
					 top: helpPos.y-10?((helpPos.y-10)+"px"):(helpPos.y+"px"),
					 width:(helpPos.w + 10)+"px",
					 height:(helpPos.h + 10)+"px",
					 zIndex:dojo.style(this.domNode,"zIndex")-1,
					 display:'block'
				 });
 			}
 			var _bgMark = dojo.byId("_helptipBgMark"); 
			if(!_bgMark){
				_bgMark =dojo.create("div",{
					id:'_helptipBgMark',
					className:'u-helpTip-bgMarkIE'
				});
			}
			dojo.body().appendChild(_bgMark); 
			dojo.style(_bgMark,{
				 zIndex:dojo.style(this.domNode,"zIndex")-2,
				 display:'block'
			 });
		}
	}
);
dojo.provide("unieap.xdialog.XDialogUtil");
/*
dojo.declare("unieap.xdialog.XDialogUtil",[dijit._Widget, dijit._Templated],{
/**
 * @summary:
 * 		对话框组件的辅助工具类
 * @classDescription:
 * 		提供了对对话框组件的辅助方法类
 * 		在页面引入该文件后，会创建一个XDialogUtil对象，以后的对话框操作可以借用该类进行实现
 * 		在主页面引用该文件且主框架非frameset结构的话，若页面内容通过链接确定，能够实现对话框在最外层的页面进行显示
 * @declaredClass:
 *		unieap.xdialog.XDialogUtil
 */

(function(){
	if(typeof this["XDialogUtil"] == "undefined") {
		//在页面引入该文件后，会创建的一个对象
		this.XDialogUtil = {};
		//存储对话框引用的数组
	    //this.XDialogUtil.dialogs = [];
	}
	
	XDialogUtil = {
		//存放打开的dialog堆栈，dialog可以一层一层地弹出
		dialogs : [],
		//社保需求，可以同时打开多个dialog，相互之间没有调用关系，自己控制dialog
		//在hndlDlgs中的dialog不会放入dialogs中
		hndlDlgs: [],
		
		/**
		 * @summary:
		 *        创建并显示一个对话框
		 * @param 
		 *         {object} config  对话框的配置信息
		 * @param 
		 *         {domNode} srcElement  渐入渐出效果的起始终结元素
		 * @param 
		 *         {object} handle  任意形式的对象，标识用户控制的dialog，由用户自己维护
		 * @return 
		 *         {unieap.dialog.Dialog}
		 * @description:
		 *         创建对话框并显示
		 *         如对话框的内容不是通过inner确定的，而是指向一个url并且最外层框架不是frameset，将会试图在最外层上创建此对话框
		 *         如果对话框的内容是通过inner方式确定的，只能在当前帧上创建对话框，此时拖拽时只能限于当前帧的区域
		 *         会将产生的对话框组件作为返回值
		 * @example:
		 * |var dialog = XDialogUtil.showDialog({
		 * |	inner: "Hello World!",
		 * |	title:"Hello World!",
		 * |	height:"200",
		 * |	width:"200"
		 * |}, document.getElementById("sourceNode"));
		 *         
		 */
		showDialog: function(config,srcElement,handle) {
			/*
			 * 为事业部扩展提供切入点，不要删除
			 */
			config = this._config_show_ex(config,srcElement);
			
			var dialog = null,
				topWin = unieap.getTopWin();
			if (topWin.XDialogUtil&&config["inner"]==null&&topWin.document.getElementsByTagName("frameset").length==0&& !window.opener) {
				dialog = topWin.XDialogUtil.createDialog(config,handle);
			} else {
				dialog = this.createDialog(config,handle);
			}
			if (srcElement) {
				dialog.show(srcElement);
			} else {
				dialog.show();
			}
			return dialog;
		},
		   
		_config_show_ex: function(config, srcElement) {
			return config;
		},
	 
		/**
	     * @summary:
	     *     创建一个对话框
	     * @param 
	     *       {object} config  该对话框的配置参数
	     * @param 
	     *       {object} handle  任意形式的对象，标识用户控制的dialog，由用户自己维护
	     *  @return
	     *       {unieap.xdialog.Dialog}
	     * @description:
	     *      创建一个对话框，不进行显示，需要用户手动调用Dialog的show方法进行显示
	     *      如对话框的内容不是通过inner确定的，而是指向一个url并且最外层框架不是frameset，将会试图在最外层上创建此对话框
		 *      如果对话框的内容是通过inner方式确定的，只能在当前帧上创建对话框，此时拖拽时只能限于当前帧的区域
		 *      会将产生的对话框组件作为返回值
		 * 	@example:
		 * |var dialog = XDialogUtil.createDialog({
		 * |	inner: "Hello World!",
		 * |	title:"Hello World!",
		 * |	height:"200",
		 * |	width:"200"
		 * |});
		 * |dialog.show();
	     */
		createDialog: function(config,handle) {
			/*
			 * 为事业部扩展提供切入点，不要删除
			 */
			config = this._config_create_ex(config);
				
			var context = null,
				topWin = unieap.getTopWin();
			if(topWin.XDialogUtil&&topWin.document.getElementsByTagName("frameset").length==0&& !window.opener){
				context = topWin;
			}else{
				context  = window;
			}
			var dialog=	new context.unieap.xdialog.Dialog(config);
			if (handle) {
				context.XDialogUtil.hndlDlgs.push({hnd:handle,dlg:dialog});
				var idx = -1;
				for (i in context.XDialogUtil.dialogs) {
					if (context.XDialogUtil.dialogs[i]==dialog) {
						idx=i;
						break;
					}
				}
				if (idx!=-1)
					context.XDialogUtil.removeDialog(idx);
			}
			return dialog;
		},
		
		_config_create_ex: function(config) {
			return config;
		},
		
		//在dialog数组中，添加某一对象，在对话框新建的时候会调用
		addDialog: function(dialog) {
			if (unieap.getXDialog(dialog))
				return;
			if (this.dialogs) {
				this.dialogs.push(dialog);
			}
		},
		
		//得到对话框数组
		getDialogs: function() {
			return this.dialogs;
		},
	
		//在dialog数组中，移除某一对象，在对话框关闭的时候会调用
		removeDialog: function(idx) {
			if (typeof idx=="number") {
				this.dialogs.splice(idx,1);
			} else {
				var handle = idx,i=-1;
				for(el in this.hndlDlgs) {
					if (this.hndlDlgs[el].hnd==handle||this.hndlDlgs[el].dlg==handle) {
						i = el;
						break;
					}
				}
				if (i!=-1) {
					this.hndlDlgs.splice(Number(i), 1);
				}
			}	
		},
	
		//得到最上层的对话框
		getDialog: function(handle){
			if (handle) {
				for(el in this.hndlDlgs) {
					if (this.hndlDlgs[el].hnd==handle||this.hndlDlgs[el].dlg==handle)
						return this.hndlDlgs[el].dlg;
				}
				return null;
			}
			var dialogDom = XDialogUtil.getDialogs();
		    if (dialogDom == null) {
				return null;
			}
			var l = dialogDom.length - 1;
			if (l >= 0) {
				for(var i=l;i>=0 ;i--) {
					var diaObj = dialogDom[i];
					if(diaObj != null) {
						return diaObj;
					}
				}
			}
		}
	}
})();

dojo.provide("unieap.xdialog.Dialog");
dojo.require("dojo.fx");
dojo.require("dijit._Widget");
dojo.require("dijit._Templated");
dojo.require("unieap.xdialog.XDialogUtil");

dojo.declare("unieap.xdialog.Dialog", [dijit._Widget, dijit._Templated], {
	/**
	 * @declaredClass:
	 * 		unieap.xdialog.Dialog
	 * @summary:
	 * 		模态对话框实现类
	 * @classDescription:
	 *     	可以自定义显示内容，样式。
	 *     	可以通过脚本或标签创建Dialog。
	 *     	支持动画效果。
	 *     	支持拖拽位置，拖拽边框改变大小。
	 * @example:
	 * |var dialog = new unieap.xdialog.Dialog({
	 * |	inner: "Hello World!",
	 * |	title:"Hello World!",
	 * |	height:"200",
	 * |	width:"200"
	 * |});
	 * |dialog.show();
	 * @example:
	 * |var dialog = XDialogUtil.showDialog({
	 * |	inner: "Hello World!",
	 * |	title:"Hello World!",
	 * |	height:"200",
	 * |	width:"200"
	 * |});
	 * 		初始化一个Dialog,并显示出来
	 * @img:
	 *      images/dialog/dialog.png
	 */

	/**
	 * @summary:
	 *      	回调函数的上下文，用户一般较少用到
	 * @type:
	 *   	{object}
	 * @default:
	 *     	null
	 * @description:
	 *     	对话框关闭的时候，调用的回调函数的上下文，也就是函数的this。
	 * @example:
	 * |<div dojoType="unieap.form.TextBox" id='text' value="initText"></div>
	 * |var dialog = new unieap.xdialog.Dialog(
	 * |		{${1}src:unieap.byId("text"),
	 * |     iconCloseComplete: true,
	 * |		onComplete:test,
	 * |		url:"<%=appPath%>/pages/samples/dialog/inner.jsp"}
	 * |);
	 * |function test(){
	 * |		alert(${2}this.getValue())
	 * |}
	 * ${1}src配置的对象
	 * ${2}将会成为回调函数的this
	 */
	src: null,

	/**
	 * @summary:
	 *      对话框的宽度
	 * @type:
	 *   	{number}
	 * @description:
	 *     	对话框的默认宽度，单位为"px"。如果不设置将会根据内容自动撑开。
	 */
	width: "",

	/**
	 * @summary:
	 * 		对话框的高度
	 * @type:
	 * 		{number}
	 * @description:
	 * 		对话框的默认高度，单位为"px"。如果不设置将会根据内容自动撑开。
	 */
	height: "",

	/**
	 * @summary:
	 * 		对话框的标题
	 * @type:
	 * 		{string}
	 * @default:
	 * 		对话框
	 */
	title: RIA_I18N.dialog.dialog.title,

	/**
	 * @summary:
	 * 		对话框关闭的回调函数
	 * @type:
	 * 		{function}
	 * @default:
	 * 		null
	 * @description:
	 * 		对话框关闭时，会执行的回调函数
	 * 		当通过关闭按钮关闭对话框时，需要将iconCloseComplete设置为true才能执行回调函数
	 * 		如果通过脚本关闭对话框不需要设置iconCloseComplete 其参数通过setReturn方法进行设置
	 */
	onComplete: null,

	/**
	 * @summary:
	 *      对话框内的显示内容
	 * @type:
	 *   	{string|domNode}
	 * @default:
	 *     	null
	 * @description:
	 *     	通过指定html代码片段或domNode确定对话框内的显示内容
	 *     	若同时配置了url，以url属性优先
	 * @example:
	 * |var inner = "对话框显示的内容是预先定义，该对话框可以最大化和拖拽改变位置。"
	 * |var dialog = new unieap.xdialog.Dialog({inner:inner});
	 * |dialog.show(document.getElementById("btn1"));
	 */
	inner: "",

	/**
	 * @summary:
	 * 		是否显示渐入渐出效果
	 * @type:
	 * 		{boolean}
	 * @default:
	 * 		读取unieap.animate的值
	 * @description:
	 *      在对话框生成和关闭的时候，会有渐入渐出的效果
	 */
	animate: (typeof (unieap.animate) == 'undefined') ? true : unieap.animate,

	/**
	 * @summary:
	 *      对话框内容的链接地址
	 * @type:
	 *   	{string}
	 * @default:
	 *     	null
	 * @description:
	 *    	指定一个链接地址，作为对话框的显示内容
	 * @example:
	 * |var dialog = new unieap.xdialog.Dialog({url:"<%=appPath%>/pages/samples/dialog/inner.jsp"});
	 * |dialog.show(document.getElementById("btn2"));
	 */
	url: "",

	/**
	 * @summary:
	 *      是否支持最大化功能
	 * @type:
	 *   	{boolean}
	 * @default:
	 *    	true
	 * @description:
	 *    	设置是否显示最大化按钮，若显示的话，点击会将对话框扩大至整个页面
	 */
	isExpand: true,

	/**
	 * @summary:
	 *      是否按照显示器窗口大小最大化显示
	 * @type:
	 *   	{boolean}
	 * @default:
	 *     	false
	 * @description:
	 *    	设置是否按照显示器窗口大小最大化显示
	 */
	isMax: false,

	/**
	 * @summary:
	 *      是否支持图标关闭功能
	 * @type:
	 *   	{boolean}
	 * @default:
	 *     	true
	 * @description:
	 * 		设置是否显示关闭按钮，若不显示的话，只能通过程序控制进行对话框的关闭
	 * 		适用于用户必须作出一定输入的情况
	 */
	isClose: true,

	/**
	 * @summary:
	 *      是否可以通过拖拽重设对话框大小
	 * @type:
	 *   	{boolean}
	 * @default:
	 *     	true
	 */
	resizable: true,

	/**
	 * @summary:
	 *      是否支持打开表单设计器
	 * @type:
	 *   	{boolean}
	 * @default:
	 *     	true
	 */
	isDesign: true,

	/**
	 * @summary:
	 *      是否支持打开新增按钮权限菜单
	 * @type:
	 *   	{boolean}
	 * @default:
	 *     	true
	 */
	isShowModal: true,

	/**
	 * @summary:
	 *      对话框的最小宽度
	 * @type:
	 *   	{number}
	 * @default:
	 *     	185
	 * @description:
	 *      为了保证对话框的显示效果，可设置本属性的值
	 *      若指定的width小于最小宽度，将以最小宽度的值进行显示
	 *      在允许拖拽调整大小的情况下，调整后对话框的宽度不会小于此值
	 */
	minWidth: "185",

	/**
	 * @summary:
	 *      对话框的最小高度
	 * @type:
	 *   	{number}
	 * @default:
	 *     	80
	 * @description:
	 *      为了保证对话框的显示效果，可设置本属性的值
	 *      若指定的height小于最小高度，将以最小宽度的值进行显示
	 *      在允许拖拽调整大小的情况下，调整后对话框的高度不会小于此值
	 */
	minHeight: "80",

	/**
	 * @summary:
	 *      父窗口传递到弹出窗口的对象
	 * @type:
	 *   	{object}
	 * @default:
	 *     	null
	 * @description:
	 *     	父窗口传递到对话框的数据
	 *     	对话框组件可以使用getObject方法得到该对象
	 * @example:
	 * |XDialogUtil.showDialog({
	 * |		url:"<%=appPath%>/pages/samples/dialog/target.jsp",
	 * |		onComplete:bindDataToForm,
	 * |		dialogData:{name:"param1",value:"param2"}
	 * |		width:"500",
	 * |		height:"400"},
	 * |	toSelect.domNode);
	 */
	dialogData: null,

	/**
	 * @summary:
	 *      点击右上角的关闭按钮时，是否调用回调函数
	 * @type:
	 *   	{boolean}
	 * @default:
	 * 		false
	 * @description:
	 * 		通过点击右上角的关闭按钮，将对话框关闭的时候，是否会调用回调函数
	 * 		默认值为false，即点击按钮关闭对话框，将不会调用指定的回调函数
	 */
	iconCloseComplete: false,

	/**
	 * @summary:
	 *      设置载入超时
	 * @type:
	 *   	{boolean}
	 * @default:
	 * 		10
	 * @description:
	 * 		在使用url方式载入时，可设置载入超时，单位为秒
	 * 		对话框载入期间，不允许用户关闭，当超过这个时间后，若对话框还未载入成功，则允许关闭
	 */
	timeout: 10,

	/**
	 * @summary:
	 * 		和dialogData类似，但是它配置一个函数来供用户使用
	 * @type:
	 * 		{function}
	 * @description:
	 *     	该对象可以通过getObject方法执行配置的function
	 * @example:
	 * |<div dojoType="unieap.xdialog.Dialog" id="dialog" url="/demo.do" getDialogData="fn"></div>
	 * |function fn(){
	 * |	//用户自己处理、获取数据
	 * |	var obj=someMethod.getObj();
	 * |	return obj;
	 * |}
	 * |
	 * |var dialog = unieap.byId("dialog");
	 * |alert(dialog.getObject());
	 */
	getDialogData: null,

	// 按纽列表，内部属性，供信息提示框使用，记录按钮的引用
	buttons: null,

	// 移动和拖拽调整大小时显示的层
	_moveDiv: null,

	// 返回数据对象
	returnObj: null,

	// 临时的事件，当对话框进行拖动时会用到
	tempEvents: null,

	// 渐入渐出时开始的x坐标，在渐入渐出时都会用到
	startx: null,

	// 渐入渐出时开始的y坐标，在渐入渐出时都会用到
	starty: null,

	// 渐入渐出时开始的宽度，在渐入渐出时都会用到
	startWidth: null,

	// 渐入渐出时开始的高度，在渐入渐出时都会用到
	startHeight: null,

	// 开始时对话框顶部所在x的位置，用于对话框的拖拽位置
	startHeadx: 0,

	// 开始时对话框顶部所在y的位置，用于对话框的拖拽位置
	startHeady: 0,

	// 拖拽前对话框的x位置
	winStartx: 0, // 窗口的最初位置。

	// 拖拽前对话框的y位置
	winStarty: 0, // 窗口的最初位置。

	// 是否在移动
	isHeadmove: false,

	// 是否正在进行resize操作
	isResizing: false,

	// 要调整大小的方式
	resizeType: '',

	// 按钮是否获得焦点，用于信息提示框组件，对于除输入型的信息提示框外，需要在生成的时候，进行焦点聚焦
	buttonFocus: null,

	_iconClose: false,

	// 在已经有弹出对话框的情况下，再次弹出对话框 此属性指前一对话框
	preDialog: null,

	// 对话框已弹出且再次弹出别的对话框时，用于遮挡本对话框的层
	_modalDiv: null,

	// 是否处于最大化状态
	_isExpanded: false,

	// 对话框初始应该显示的位置
	_initX: null,

	// 对话框初始应该显示的位置
	_initY: null,

	// 记录对话框在最大化时的参数，以确定当恢复原状时的位置和大小
	_beforeExpandPara: null,

	_isReady: false,

	_isShow: false,

	// 是否根据显示的内容确定对话框高宽
	_autoWidth: false,

	_autoHeight: false,

	_buttonArea: null,

	_publishDialog: true,

	_afterPageLoad: null,

	//是否要有蒙版，xtree的定位和筛选可能会关闭蒙版（true）
	noBgMask: false,

	hideTitle: false,
	//是否从右侧弹出
	dia_Right: false,

	templateString: "<div class='u-xdlg' dojoAttachPoint='mainNode' style='display:none'>" +
		"<div class='u-xdlg-mt' dojoAttachPoint='topNode'>" +
		"<div class='u-xdlg-mtl'></div>" +
		"<div class='u-xdlg-mtr'></div>" +
		"<div class='u-xdlg-mtc' dojoAttachPoint='topContentNode'>" +
		"<div class='u-xdlg-mtt' dojoAttachPoint='dialogTitleNode'></div>" +
		"<div class='u-xdlg-mtb' dojoAttachPoint='topButtonNode'>" +
		"<span class='u-xdlg-bc' dojoAttachPoint='closeNode'>&nbsp;&nbsp;&nbsp;&nbsp;</span>" +
		"<span class='u-xdlg-be' dojoAttachPoint='enlargeNode'>&nbsp;&nbsp;&nbsp;&nbsp;</span>" +
		"<span class='u-xdlg-bo iconfont icon-setrule' dojoAttachPoint='openNode'></span>" +
		"<span class='u-xdlg-bo iconfont icon-add' dojoAttachPoint='addNode'></span>" +
		"</div>" +
		"</div>" +
		"</div>" +
		"<div class='u-xdlg-mm' dojoAttachPoint='dialogMiddle'>" +
		"<div class='u-xdlg-ml' dojoAttachPoint='dialogLeftBorder'></div>" +
		"<div class='u-xdlg-mr' dojoAttachPoint='dialogRightBorder'></div>" +
		"<div class='u-xdlg-mmm' dojoAttachPoint='dialogMiddleMain'>" +
		"<div class='u-xdlg-mmf' dojoAttachPoint='dialogMain' style='height:100%'>" +
		"<div class='u-xdlg-mmc' dojoAttachPoint='dialogMainContent'></div>" +
		"</div>" +
		"<div class='u-xdlg-mmb' style='display:block;' align='center'" +
		"dojoAttachPoint='dialogMiddleButton'></div>" +
		"</div>" +
		"</div>" +
		"<div class='u-xdlg-mb'  dojoAttachPoint='dialogBottom'>" +
		"<div class='u-xdlg-mbl' dojoAttachPoint='dialogBottomLeft'></div>" +
		"<div class='u-xdlg-mbr' dojoAttachPoint='dialogBottomRight'></div>" +
		"</div>" +
		"<div dojoAttachPoint='containerNode' style='display:none'></div>" +
		"</div>",

	postCreate: function () {
		var thisDome, thisDomeWidth, thisDomeHeight;
		// _createDlgWithTag用来判断dialog是否通过标签来创建
		this.enlargeNode.title = RIA_I18N.dialog.dialog.maximinze;
		this.closeNode.title = RIA_I18N.dialog.dialog.close;
		this.openNode.title = RIA_I18N.dialog.dialog.openUrl;
		this.addNode.title = RIA_I18N.dialog.dialog.showMenuModal;
		this.srcNodeRef && (this._createDlgWithTag = true);
		if (!this._createDlgWithTag) {
			// 如果当前dialog弹出之前已经存在dialog,创建一个蒙层挡住之前的dialog
			this.updatePreDlg();
			// 注册该对话框
			this.addDialog(this);
			// 创建当前对话框的iframe
			this.initModal();
			// 创建移动对象。
			this._createMoveDiv();
		}
		// 让已经聚焦的其他控件失去焦点
		unieap.blurWidget();
		this.buttons = [];
		this.tempEvents = [];
		// 若当前对话框的前面已经有一个模态对话框，则再次弹出模态对话框时，将前一对话框遮挡住
		if (this.inner && typeof (this.inner) == "object" &&
			this.inner.parentNode && this.inner.parentNode.nodeType != 11) {
			this.innerParentNode = this.inner.parentNode;
		}
		document.body.appendChild(this.domNode);
		this._dealDialogSize();
		// 保存原始的url
		this.originUrl = this.url;
		/*
		 * 为事业部扩展提供切入点，不要删除
		 */
		this._postCreate_ex();
		//单帧下关闭页面时销毁对应的dialog
		//有可能该xDialog是在另一个xDialog中打开的
		if (this._rootID != "") {
			var rootWidget = dijit.byId(this._rootID);
			if (rootWidget instanceof unieap.xdialog.Dialog) {
				if (!rootWidget._dialogs) {
					rootWidget._dialogs = [];
				}
				rootWidget._dialogs.push(this);
			} else if (rootWidget instanceof unieap.layout.ContentPane) {
				if (rootWidget.xhref) {
					var container4Dialog = rootWidget;
					if (!container4Dialog.dialog) container4Dialog.dialog = {};
					container4Dialog.dialog[this.id] = 1;
				}
			} else {
				var framePageContainer = unieap.byId("framePageContainer");
				if (typeof framePageContainer != 'undefined' && framePageContainer.getSelectedTab()) {
					var currentTab = framePageContainer.getSelectedTab().NavigatorContainer ? framePageContainer.getSelectedTab().NavigatorContainer.getSelectedTab() : framePageContainer.getSelectedTab();
				}
				if (currentTab) {
					var container4Dialog = currentTab;
					if (!container4Dialog.dialog) container4Dialog.dialog = {};
					container4Dialog.dialog[this.id] = 1;
				}
			}
		}
	},

	// 处理dialog的高度和宽度
	_dealDialogSize: function () {
		this.minWidth = parseInt(this.minWidth, 10);
		this.minHeight = parseInt(this.minHeight, 10);
		if (this.isMax) {
			var vs = dojo.window.getBox();
			this.width = vs.w;
			this.height = vs.h;
			this._isExpanded = true;
			this.enlargeNode.className = "u-xdlg-bs";
		} else {
			// 宽度处理
			if (this.width && this.width != "auto") {
				this.width = parseInt(this.width, 10);
				if (this.width < this.minWidth) {
					this.width = this.minWidth;
				}
			} else {
				this.width = 428;
				this._autoWidth = true;
			}
			// 高度处理
			if (this.height && this.height != "auto") {
				this.height = parseInt(this.height, 10);
				if (this.height < this.minHeight) {
					this.height = this.minHeight;
				}
			} else {
				this.height = 80;
				this._autoHeight = true;
			}
		}
	},

	_postCreate_ex: function () {

	},

	// 如果当前的dialog之前已经存在dialog，在之前的dialog上加一个蒙层
	updatePreDlg: function () {
		var aDlg = this.getUtil().getDialogs(),
			preDlg = aDlg && aDlg[aDlg.length - 1];
		if (preDlg) {
			this.preDialog = preDlg;
			preDlg._isShow && this._createModalDiv();
			this.mainNode.style.zIndex = Number(preDlg.mainNode.style.zIndex) + 2;
		} else {
			this.mainNode.style.zIndex = 2000;
		}
	},

	innerShow: function () {
		this.domNode.style.visibility = "visible";
		// 真正显示对话框
		this.initShowContent();
		// 用div标签创建的dialog不用多次进行数据绑定
		!this._dlgClosed && this.initEvent();
		this.domNode.style.display = "block";
		if (this._isUseButton() && this.buttonFocus) {
			this.buttons[0].focusNode.focus();
		}
		// this._moveDiv.style.display="none" //添加这句话会导致动画渐入效果无法展现
		this._isShow = true;
		if (this.isMax) {
			this.enlargeNode.className = "u-xdlg-bs";
			this._isExpanded = true;
			this.enlargeNode.title = RIA_I18N.dialog.dialog.restore;
		} else { //U_EAP00028429
			this.enlargeNode.className = "u-xdlg-be";
			this._isExpanded = false;
			this.enlargeNode.title = RIA_I18N.dialog.dialog.maximinze;
		}
		dojo.attr(this.domNode, 'title', '');
		unieap.fireContainerResize(this.domNode);
	},

	startup: function () {
		var nodes = dojo.query("*", this.containerNode);
		// nodes.length>0&&!this.url&&(this.inner=this.containerNode);
		if (nodes.length > 0 && !this.url) {
			this.inner = this.containerNode;
			this.innerParentNode = this.domNode;
		}
	},

	/**
	 * @summary：
	 *         显示本对话框
	 *  @param
	 *         {domNode}  渐入渐出效果起始和终止的dom对象
	 *  @param:
	 *  		{object} parameters 参数对象仅在url属性设置了才有效
	 *  @description:
	 *         显示本对话框
	 *         通过new方法或者调用XDialogUtil.createDialog生成的对话框默认会处于不可见状态，调用此方法能够使得对话框可见
	 *  @example:
	 *  |var dialog = new unieap.xdialog.Dialog(args);
	 *  |dialog.show(document.getElementById("sourceNode"));
	 *  @example:
	 *  |var dialog = XDialogUtil.createDialog(args);
	 *  |dialog.show(document.getElementById("sourceNode"));
	 *  @example:
	 *  |var dialog=new unieap.xdialog.Dialog({url:'/hello.action'});
	 *  |//载入页面的url为/hello.action?name=jack
	 *  |dialog.show(null,{'name':'jack'});
	 */
	show: function (refNode, parameters) {
		if (window.app && !app.isShowDocedit()) { //判断是否是管理员
			dojo.addClass(dojo.byId(this.id), "dialogNoDesign");
		}
		if (unieap.byId(this.id) || window.top.unieap.byId(this.id)) {
			this._show(refNode, parameters);
		} else {
			var xdialog = {
				id: this.id,
				dialogData: this.dialogData,
				height: Number(this.height) === 80 ? 'auto' : this.height + "px",
				width: this.width + "px",
				minWidth: this.minWidth + "px",
				minHeight: this.minHeight + "px",
				title: this.title,
				isExpand: this.isExpand,
				isMax: this.isMax,
				isClose: this.isClose,
				resizable: this.resizable,
				isDesign: (this.isDesign && window.app && app.isShowDocedit()),
				isShowModal:(this.isShowModal && window.app && app.isShowDocedit()),
				timeout: this.timeout,
				getDialogData: this.getDialogData,
				iconCloseComplete: this.iconCloseComplete,
				onComplete: this.onComplete
			};

			if (this.url) {
				xdialog.url = this.url;
			} else {
				xdialog.inner = this.inner;
			}
			var context = null,
				topWin = unieap.getTopWin();
			if (topWin.XDialogUtil && topWin.document.getElementsByTagName("frameset").length == 0 && !window.opener) {
				context = topWin;
			} else {
				context = window;
			}
			xdialog = new context.unieap.xdialog.Dialog(xdialog);
			xdialog._show(refNode, parameters);
		}
	},
	_show: function (refNode, parameters) {
		if (window.app && !app.isShowDocedit()) { //判断是否是管理员
			dojo.addClass(dojo.byId(this.id), "dialogNoDesign");
		}
		var framePageContainer = unieap.byId("framePageContainer"); //U_EAP00028323
		var unieapMenuId = null;
		if (typeof framePageContainer != 'undefined' && framePageContainer.getSelectedTab() && framePageContainer.getSelectedTab().NavigatorContainer) {
			unieapMenuId = framePageContainer.getSelectedTab().NavigatorContainer.id.substring("navigatorContainer".length);
		}
		if (unieapMenuId && this.url) {
			// 如果通过标签创建的dialog关闭后再重新显示,需要更新自己的preDialog属性
			if (typeof (parameters) == 'object' && this.url) {
				parameters["unieapMenuId"] = unieapMenuId;
				parameters["menuId"] = unieapMenuId;
				this.url = unieap.buildRequestPath(this.originUrl, parameters);
			} else {
				this.url = this.originUrl.indexOf("?") == -1 ? this.originUrl + "?unieapMenuId=" + unieapMenuId : this.originUrl + "&unieapMenuId=" + unieapMenuId;
				this.url = this.url + '&menuId=' + unieapMenuId;
			}
		} else {
			// 如果通过标签创建的dialog关闭后再重新显示,需要更新自己的preDialog属性
			if (typeof (parameters) == 'object' && this.url) {
				this.url = unieap.buildRequestPath(this.originUrl, parameters);
			} else {
				this.url = this.originUrl;
			}
		}
		if (this._createDlgWithTag) {
			this.updatePreDlg();
			this.addDialog(this);
			this.initModal();
			this._createMoveDiv();
			this._iconClose = false;
			!this.url && dojo.style(this.containerNode, "display", "block");
		}
		var bgMask = dojo.byId("bgMask");
		(!this.noBgMask) && bgMask && dojo.style(bgMask, "display", "block");
		this.refNode = refNode;
		this.innerShow();
		/*
		 * 由于popup的z-index高于dialog， 需要在Dialog弹出时，关闭已经弹出的popup
		 */
		dojo.require("unieap.form.Popup");
		if (unieap.form.Popup.popwidget) {
			var id = unieap.form.Popup.popwidget;
			var popwidget = dijit.byId(id);
			popwidget && popwidget.getPopup().close();
		}
		if (this._publishDialog) {
			unieap.publish("_helpConsoleAddDialog", this);
		}
	},

	startAnim: function () {
		var viewport = dijit.getViewport();
		this._initX = Math.floor(viewport.l + (viewport.w - this.width) / 2) > 0 ?
			Math.floor(viewport.l + (viewport.w - this.width) / 2) : "0";
		this._initY = Math.floor(viewport.t + (viewport.h - this.height) / 2) > 0 ?
			Math.floor(viewport.t + (viewport.h - this.height) / 2) : "0";
		dojo.style(this.mainNode, {
			left: this._initX + "px",
			top: this._initY + "px"
		});
		if (this.animate) {
			var viewport = dijit.getViewport();
			this.starty = Math.floor(viewport.t + 10);
			this.startx = Math.floor(viewport.l + 800);
			this.startWidth = "50";
			this.startHeight = "30";
			var topWin = unieap.getTopWin();
			if (this.refNode && this.getWindow() == topWin) {
				var pos = dojo.coords(this.refNode, true);
				if (dojo.isIE) {
					this.starty = pos.y +
						dijit.getDocumentWindow(this.refNode.ownerDocument).screenTop -
						topWin.screenTop;
					this.startx = pos.x +
						dijit.getDocumentWindow(this.refNode.ownerDocument).screenLeft -
						topWin.screenLeft;
				} else {
					var position = this.getObjTopRect(this.refNode);
					this.starty = position.top;
					this.startx = position.left;
				}
				this.startWidth = pos.w;
				this.startHeight = pos.h;
			} else if (this.refNode) {
				var pos = dojo.coords(this.refNode, true);
				this.starty = pos.y;
				this.startx = pos.x;
				this.startWidth = pos.w;
				this.startHeight = pos.h;
			}
			dojo.style(this._moveDiv, {
				width: this.startWidth + "px",
				height: this.startHeight + "px",
				left: this.startx + "px",
				top: this.starty + "px",
				display: "block"
			});
			var anim = dojo.animateProperty({
				node: this._moveDiv,
				duration: 450,
				properties: {
					width: {
						end: this.width,
						unit: "px"
					},
					height: {
						end: this.height,
						unit: "px"
					},
					top: this._initY,
					left: this._initX,
					unit: "px"
				},
				onEnd: dojo.hitch(this, function () {
					this._moveDiv.style.display = "none";
					this.domNode.style.visibility = "visible";
					if (this.url) {
						this._loadUrl();
					}
				})
			});
			anim.play();
		} else {
			if (this.url) {
				this._loadUrl();
			}
			this.domNode.style.visibility = "visible";
		}
	},

	_loadUrl: function () {
		dojo.require("unieap.patch.loader");
		//2018.7.5注释下面缓存图片
		// dojo.addClass(this.dialogMainContent, "u-xdlg-loading");
		// 处理超时，防止载入出错一直等待
		//		this._setTimeout();
		//解决两个对话框中存在相同ID时的冲突
		this.dialogMainContent.id = this.id;
		unieap.loader.load({
			node: this.dialogMainContent,
			url: this.url,
			showLoading: false,
			_afterPageLoad: this._afterPageLoad,
			error: dojo.hitch(this, function (e) {
				this._isReady = true;
				//				this._clearTimeOut();
				dojo.removeClass(this.dialogMainContent, "u-xdlg-loading");
				//2018.7.13 sxf 出现按钮组时，增加内边距
				var fixed_buttons = $(".u-xdlg-mm  .fixed_buttons", this.domNode);
				if (fixed_buttons && fixed_buttons.length > 0 && fixed_buttons.parent().hasClass("u-xdlg-mmc")) {
					$(".u-xdlg-mm .u-xdlg-mmc", this.domNode).css("padding-bottom", "52px");
				} else {
					$(".u-xdlg-mm .u-xdlg-mmc", this.domNode).css("padding-bottom", "0px");
				}

			}),
			load: dojo.hitch(this, function () {
				this._isReady = true;
				//				this._clearTimeOut();
				dojo.removeClass(this.dialogMainContent, "u-xdlg-loading");
				//2018.7.13 sxf 出现按钮组时，增加内边距
				var fixed_buttons = $(".u-xdlg-mm  .fixed_buttons", this.domNode);
				if (fixed_buttons && fixed_buttons.length > 0 && fixed_buttons.parent().hasClass("u-xdlg-mmc")) {
					$(".u-xdlg-mm .u-xdlg-mmc", this.domNode).css("padding-bottom", "52px");
				} else {
					$(".u-xdlg-mm .u-xdlg-mmc", this.domNode).css("padding-bottom", "0px");
				}

			})
		});
	},

	_setTimeout: function () {
		setTimeout(dojo.hitch(this, function () {
			if (this._isReady) {
				return;
			}
			/*
			 * TODO
			 * 这里可以加入超时处理
			 * 也可以提供超时处理接口
			 */

			var sInfo =
				"<table  vlign='center' style='width:100%;height:100%' class='messageBg'>" +
				"<tr>" +
				"<td align='center'>" +
				"<table border=0>" +
				"<tr>" +
				"<td class='warnIcon'></td>" +
				"<td style='text-align:left;'> " + RIA_I18N.dialog.dialog.error + "</td>" +
				"</tr>" +
				"</table>" +
				"</td>" +
				"</tr>" +
				"</table>";
			dojo.removeClass(this.dialogMainContent, "u-xdlg-loading");
			this.dialogMainContent.innerHTML = sInfo;
			this._isReady = true;

			//2018.7.13 sxf 出现按钮组时，增加内边距
			var fixed_buttons = $(".u-xdlg-mm  .fixed_buttons", this.domNode);
			if (fixed_buttons && fixed_buttons.length > 0 && fixed_buttons.parent().hasClass("u-xdlg-mmc")) {
				$(".u-xdlg-mm .u-xdlg-mmc", this.domNode).css("padding-bottom", "52px");
			} else {
				$(".u-xdlg-mm .u-xdlg-mmc", this.domNode).css("padding-bottom", "0px");
			}

		}), this.timeout * 1000);
	},

	// 在top层次上弹出对话框时，得到渐入渐出效果的起始位置
	getObjTopRect: function (obj) {
		var rect = {
			top: 0,
			left: 0
		};
		var r = obj.getBoundingClientRect();
		rect.top += r.top;
		rect.left += r.left;
		var win = dijit.getDocumentWindow(obj.ownerDocument);
		while (win != window.top) {
			var element = win.frameElement;
			r = element.getBoundingClientRect();
			rect.top += r.top;
			rect.left += r.left;
			var doc = win.frameElement.ownerDocument;
			win = doc.parentWindow || doc.defaultView;
		}
		return rect;
	},

	// 初始化事件
	initEvent: function () {
		if (this.isExpand) {
			this.connect(this.enlargeNode, "onclick", "_enlarge");
			this.connect(this.enlargeNode, "onmouseover", "_enlargeOver");
			this.connect(this.enlargeNode, "onmouseout", "_enlargeOut");
		}
		if (this.isClose) {
			this.connect(this.closeNode, "onclick", "_imgClose");
			this.connect(this.closeNode, "onmouseover", "_closeOver");
			this.connect(this.closeNode, "onmouseout", "_closeOut");
		}
		if (this.resizable) {
			this.connect(this.dialogBottomRight, "onmousedown",
				"_onDialogBottomRightDown");
			this.connect(this.dialogBottomLeft, "onmousedown",
				"_onDialogBottomDown");
			this.connect(this.dialogBottom, "onmousedown",
				"_onDialogBottomDown");
			this.connect(this.dialogRightBorder, "onmousedown",
				"_onDialogRightDown");
		} else {
			this.dialogBottomRight.style.cursor = "default";
			this.dialogBottomLeft.style.cursor = "default";
			this.dialogBottom.style.cursor = "default";
			this.dialogRightBorder.style.cursor = "default";
		}
		if (this.isDesign) {
			this.connect(this.openNode, "onclick", "_openUrl");
		}
		if(this.isShowModal){
			this.connect(this.addNode,"onclick", "_showMenuModal");
		}
		this.connect(this.topContentNode, "onmousedown", "_onheadmousedown");
		// this.connect(this.topContentNode, "ondblclick", "_ondblclick");
		this.resizeHandle = dojo.connect(this.getWindow(), "onresize", this, "update");
	},

	// 初始化模态层
	initModal: function () {
		if (this.preDialog) {
			this.preDialog._isShow && (this.preDialog._modalDiv.style.display = "block");
			var bgMask = dojo.byId("bgMask");
			bgMask && this.removeNode(bgMask);
		}
		this._createModalIframe();
	},

	// 初始化显示内容
	initShowContent: function () {
		this.mainNode.style.top = "0px";
		this.mainNode.style.left = "0px";
		this.mainNode.style.width = this.width + "px";
		this.mainNode.style.height = this.height + "px";

		/*开始检查弹框尺寸是否超出屏幕尺寸*/
		thisDome = this.mainNode;
		thisDomeWidth = this.width;
		thisDomeHeight = this.height;
		var winWidth = $(window).width(); // 获取可视区域宽度
		var winHeight = $(window).height(); // 获取可视区域高度
		var this_width = parseInt(this.mainNode.style.width); // 获取当前层宽度
		var this_height = parseInt(this.mainNode.style.height); // 获取当前层高度
		// 判断弹层宽度大于可视区域宽度重新赋值宽度
		if (this_width > winWidth) {
			$(this.mainNode).css('width', winWidth);
		} else if (this_height > winHeight) {
			$(this.mainNode).css({
				height: winHeight,
				overflow: "auto"
			});
		} else if (this_width > winWidth && this_height > winHeight) {
			$(this.mainNode).css({
				width: winWidth,
				height: winHeight,
				overflow: "auto"
			});
		}
		/*结束检查弹框尺寸*/

		if (dojo.isIE == 6) { //只有IE6的情况下才创建iframe
			this.baseIframe = dojo.create('iframe', null, this.mainNode);
			dojo.addClass(this.baseIframe, 'u-dlg-backgroundIframe');
			dojo.style(this.baseIframe, {
				width: "100%",
				height: "100%",
				top: "0px",
				left: "0px"
			});
		}
		if (this.isMax) {
			this._beforeExpandPara = {};
			var initHeight = 0;
			var initWidth = 0;
			if (this.params.height == undefined) {
				this._beforeExpandPara.h = 428;
				initHeight = 428;
			} else {
				var heightIndex = this.params.height.indexOf("px");
				if (heightIndex > 0) {
					initHeight = Math.max(Number(this.params.height.substring(0, heightIndex)), this.minHeight);
				} else {
					initHeight = Math.max(Number(this.params.height), this.minHeight);
				}
				this._beforeExpandPara.h = initHeight;
			}
			if (this.params.width == undefined) {
				this._beforeExpandPara.w = 420;
				initWidth = 420;
			} else {
				var widthIndex = this.params.width.indexOf("px");
				if (widthIndex > 0) {
					initWidth = Math.max(Number(this.params.width.substring(0, widthIndex)), this.minWidth);
				} else {
					initWidth = Math.max(Number(this.params.width), this.minWidth);
				}
				this._beforeExpandPara.w = initWidth;
			}
			this._beforeExpandPara.l = (this.width - initWidth) / 2;
			this._beforeExpandPara.t = (this.height - initHeight) / 2;
			this._beforeExpandPara.x = 0;
			this._beforeExpandPara.y = 0;
		}

		this.initHeader();
		this.initBody();
		this.initFooter();
	},

	// 初始化头部区域
	initHeader: function () {
		if (this.hideTitle) {
			dojo.addClass(this.domNode, "hideTitle");
			dojo.style(this.topNode, "height", "12px");
			dojo.style(this.topNode, "border", "none");
		}
		this.dialogTitleNode.innerHTML = this.title;
		if (!this.isExpand) {
			this.enlargeNode.style.display = "none";
		}
		if (!this.isClose) {
			this.closeNode.style.display = "none";
		}
		if (!this.isDesign) {
			this.openNode.style.display = "none";
		}
		if(!this.isShowModal){
			this.addNode.style.display = "none";
		}
	},

	// 初始化主显示区
	initBody: function () {
		var topAndBottomHeight = this._getTopAndBottomHeight();
		this.dialogMiddle.style.height = (this.height - topAndBottomHeight) + "px";
		if (this._isUseButton()) {
			this.dialogMain.style.height = (this.height - topAndBottomHeight - 34) + "px";
		}
		this.domNode.style.visibility = "hidden";
		this.domNode.style.display = "block";
		if (this.url) {
			if (this._autoHeight) {
				this.setHeight(420);
			}
			if (this._autoWidth) {
				this.setWidth(428);
			}
		} else if (this.inner) {
			this._isReady = true;
			if (typeof (this.inner) == "object") {

				// 得到的是对象，要提取里面css为dialogButtonArea的区域，将其放在按钮区域
				var buttonArea = dojo.query(".dialogButtonArea", this.inner);
				if (buttonArea.length > 0) {
					this._buttonArea = buttonArea[0];
					this.dialogMain.style.height = (this.height - topAndBottomHeight - 34) + "px";
				}

				this.dialogMainContent.appendChild(this.inner);
			} else {
				this.dialogMainContent.innerHTML = this.inner;
			}
			if (this._autoHeight || this._autoWidth) {
				var position = dojo.position(this.dialogMainContent);
				var width = position.w;
				var height = position.h;
				if (this._autoHeight) {
					if (height <= 80) {
						this.setHeight(420);
					} else {
						this.setHeight(height + 30);
					}
				}
				if (this._autoWidth) {
					if (width <= 50) {
						this.setWidth(428);
					} else {
						this.setWidth(width + 20);
					}
				}
			}
		} else {
			this._isReady = true;
		}
		this.startAnim();
	},

	/**
	 * @summary：
	 *         自适应对话框的高宽
	 *  @description:
	 *         若对话框没有指定高宽，调用此方法可以根据对话框的内容自适应对话框的大小
	 *  @example:
	 *  |var dialog = new unieap.xdialog.Dialog(args);
	 *  |dialog.adaptiveDialog();
	 */
	adaptiveDialog: function () {
		if (!this._isReady)
			return;
		if (this.url) {
			if (this.dialogFrame.contentWindow &&
				this.dialogFrame.contentWindow.dojo) {
				this._adaptiveDialog(true);
			} else {
				var position = dojo.position(this.dialogMainContent)
				if (this._autoHeight) {
					this.setHeight(position.h + 30);
				}
				if (this._autoWidth) {
					this.setWidth(position.w + 20);
				}
			}
		} else {
			if (this._autoHeight || this._autoHeight) {
				var position = dojo.position(this.dialogMainContent)
				var width = position.w;
				var height = position.h;
				if (this._autoHeight) {
					if (height <= 80) {
						this.setHeight(420);
					} else {
						this.setHeight(height);
					}
				}
				if (this._autoWidth) {
					if (width <= 50) {
						this.setWidth(428);
					} else {
						this.setWidth(width);
					}
				}
			}
		}
	},
	_adaptiveDialog: function (afterLoad) {
		var _dojo = this.dialogFrame.contentWindow.dojo;
		var width = _dojo.doc.body.scrollWidth;
		var height = _dojo.doc.body.scrollHeight
		// 得到第一层容器组件
		var containers = this.dialogFrame.contentWindow.unieap
			.getChildrenContainer(this.dialogFrame.contentWindow.document.body);
		for (var i = 0; i < containers.length; i++) {
			_dojo.require("unieap.grid.Grid");
			if (containers[i] instanceof this.dialogFrame.contentWindow.unieap.grid.Grid)
				continue;
			var childWidth = containers[i].containerNode.scrollWidth;
			var childHeight = containers[i].containerNode.scrollHeight;
			if (childWidth > width)
				width = childWidth;
			if (childHeight > height)
				height = childHeight;
		}
		if (this._autoHeight) {
			if (height <= 52) {
				this.setHeight(420);
			} else {
				this.setHeight(height + 30);
			}
		}
		if (this._autoWidth) {
			if (width <= 50) {
				this.setWidth(428);
			} else {
				this.setWidth(width + 20);
			}
		}
	},

	// 初始化底部内容
	initFooter: function () {
		if (this._isUseButton()) {
			var _span = document.createElement("span");
			_span.innerHTML = "&nbsp;";
			for (var i = 0, len = this.buttons.length; i < len; i++) {
				if (i > 0) {
					this.dialogMiddleButton.appendChild(_span.cloneNode(true));
				}
				this.dialogMiddleButton.appendChild(this.buttons[i].domNode);
			}
		} else if (this._buttonArea) {
			this.dialogMiddleButton.appendChild(this._buttonArea);
		} else {
			this.dialogMiddleButton.style.display = "none";
		}
	},

	/**
	 * @summary：
	 *       为对话框增加按钮
	 * @param
	 *       {String}  config 设置按钮的label
	 * @param:
	 * 		{object} fn 设置按钮的回调函数
	 * @param:
	 * 		{object} scope 设置回调函数的this指针
	 * @example:
	 * | var dialog = XDialogUtil.createDialog({
	 * |		url: "xxx.html",
	 * |		title:"Hello World!",
	 * |		height:"100",
	 * |		width:"500"
	 * |	});
	 * | dialog.addButton("自定义按钮1",myfunc1,dialog);
	 * | dialog.addButton("自定义按钮2",myfunc2);
	 * | dialog.addButton("自定义按钮3",myfunc3,dialog);
	 * | dialog.show();
	 * |
	 * | function myfunc1(){
	 * |	this.setReturn("myfunc1");
	 * |	this.close();
	 * | }
	 */
	addButton: function (config, fn, scope) {
		dojo.require("unieap.form.Button");
		var btn = new unieap.form.Button({
			label: config
		});
		var handler = function (event) {
			fn.call(scope || window, event);
		}
		var _newHandle = dojo.hitch(this, handler);

		// this.connect(btn, "onClick", _newHandle);

		if (!this.connects) {
			this.connects = [];
		}
		this.connects.push(dojo.connect(btn, "onClick", _newHandle));
		// this.connect(btn, "onKeyDown",dojo.hitch(this, "keydown", btn));
		this.buttons.push(btn);
		return btn;
	},

	/**
	 * @summary：
	 *        获取通过inner方式传递进来的dom或html代码片段
	 *  @description:
	 *        通过inner传递dom或html代码片段的Dialog，调用此方法能够得到传递进来的dom对象或html字符串
	 *  @example:
	 *  |var dialog = XDialogUtil.showDialog({inner:dojo.byId("sss"),height:300,width:420});
	 *  |unieap.getXDialog().getInner();
	 */
	getInner: function () {
		if (this.inner) {
			return this.inner;
		} else {
			return null;
		}
	},

	destroy: function () {
		if (this.connects) {
			for (var i = 0, l = this.connects.length; i < l; i++) {
				dojo.disconnect(this.connects[i]);
			}
		}
		//		this._clearTimeOut();
		this.inherited(arguments);
	},

	// 注册本对话框
	addDialog: function (obj) {
		this.getUtil().addDialog(obj);
		if (this._createDlgWithTag) {
			var frm = this.getTopFrm();
			!frm.dialogs && (frm.dialogs = []);
			var dialog_arr = JSON.parse(JSON.stringify(frm.dialogs));
			frm.dialogs = undefined;
			frm.dialogs = dialog_arr;
			frm.dialogs.push(this.id);
		}
	},

	// 移除对话框
	removeDialog: function (index) {
		this.getUtil().removeDialog(index);
		if (this._createDlgWithTag) {
			var frm = this.getTopFrm();
			frm.dialogs.pop();
		}

	},

	getTopFrm: function () {
		var win = window,
			frameEle;
		try {
			do {
				if (win == win.parent) return win;
				frameEle = win.frameElement;
				if (frameEle) {
					var parentNode = frameEle.parentNode;
					if (parentNode && parentNode.getAttribute('id') == "unieap_pages") {
						return frameEle;
					}
				}
				win = win.parent;
			} while (win)
		} catch (e) {
			return unieap.getTopWin();
		}
		return win;
	},

	// 得到工具类
	getUtil: function () {
		return window.XDialogUtil;
	},
	/**
	 * @summary：
	 *         为对话框设置高度
	 *  @param
	 *         {number} 对话框的高度值
	 *  @description:
	 *         为对话框设置高度
	 *  @example:
	 *  |dialog.setHeight(100);
	 */
	setHeight: function (height) {
		var topAndBottomHeight = this._getTopAndBottomHeight();
		this.height = isNaN(height) ? parseInt(height, 10) : height;
		if (this.height < this.minHeight)
			this.height = this.minHeight;

		var viewport = dijit.getViewport();
		if (this.height >= viewport.h)
			this.height = 428;
		dojo.style(this.domNode, "height", this.height + "px");
		if (this._isUseButton() || this._buttonArea) {
			this.dialogMain.style.height = (this.height - topAndBottomHeight - 34) + "px";
		}
		var height = (this.height - topAndBottomHeight) + "px";
		dojo.style(this.dialogMiddle, "height", height);
		dojo.style(this.dialogMainContent, "height", height);
		if(this.url==''){
			dojo.style(this.dialogMainContent, "overflowY", 'hidden');
		}
		// ie6 baseiframe计算不对，不能自适应
		dojo.isIE < 7 && dojo.style(this.baseIframe, "height", this.height + "px");
	},
	/**
	 * @summary：
	 *         为对话框设置宽度
	 *  @param
	 *         {number} 对话框的宽度值
	 *  @description:
	 *         为对话框设置宽度
	 *  @example:
	 *  |dialog.setWidth(100);
	 */
	setWidth: function (width) {
		this.width = isNaN(width) ? parseInt(width, 10) : width;
		if (this.width < this.minWidth)
			this.width = this.minWidth;
		var viewport = dijit.getViewport();
		if (this.width >= viewport.w)
			this.width = 420;
		dojo.style(this.domNode, "width", this.width + "px");
	},

	// 判断是否使用按钮，内部函数，用来确定显示区域的高度
	_isUseButton: function () {
		if (this.buttons.length == 0)
			return false;
		else
			return true;
	},

	// 在已有对话框弹出的情况下，对前一对话框进行遮挡的div
	_createModalDiv: function () {
		this.preDialog._modalDiv = dojo.create("div");
		this.preDialog._modalDiv.className = "u-xdlg-modalDiv";
		this.preDialog._modalDiv.style.height = this.preDialog.domNode.style.height;
		this.preDialog._modalDiv.style.width = this.preDialog.domNode.style.width;
		this.preDialog._modalDiv.style.zIndex = Number(this.preDialog.domNode.style.zIndex) + 1;
		if (this.preDialog.mainNode.style.top) {
			this.preDialog._modalDiv.style.top = this.preDialog.domNode.style.top;
			this.preDialog._modalDiv.style.left = this.preDialog.domNode.style.left;
		} else {
			this.preDialog._modalDiv.style.top = this.preDialog.endy;
			this.preDialog._modalDiv.style.left = this.preDialog.endx;
		}
		this.preDialog._modalDiv.style.display = "none";
		document.body.appendChild(this.preDialog._modalDiv);
	},

	// 创建用于渐入渐出和拖拽调整大小的遮挡div
	_createMoveDiv: function () {
		this._moveDiv = dojo.create("div");
		this._moveDiv.className = "u-xdlg-moveDiv";
		document.body.appendChild(this._moveDiv);
		this._moveDiv.style.display = "none";
	},

	// dialog是否可以enlarge、close、resize
	canECR: function () {
		if (this._createDlgWithTag) {
			var frm = this.getTopFrm();
			if (frm.dialogs[frm.dialogs.length - 1] != this.id) {
				return false;
			}
		}
		return true;
	},

	// inner event
	_enlarge: function (evt) {
		if (!this.canECR())
			return;
		var topAndBottomHeight = this._getTopAndBottomHeight();
		if (this._isExpanded) {
			// 已经最大化，此时需要恢复原来的大小和位置
			if (this._beforeScroll)
				this.getWindow().document.body.scroll = this._beforeScroll;
			this.enlargeNode.className = "u-xdlg-be";
			this.enlargeNode.title = RIA_I18N.dialog.dialog.maximinze;
			this._isExpanded = false;
			var viewport = dijit.getViewport();
			if (!this._beforeExpandPara) {
				var viewport = dijit.getViewport();
				var left = Math.floor(viewport.l + (viewport.w - 420) / 2) > 0 ?
					Math.floor(viewport.l + (viewport.w - 420) / 2) :
					"0",
					top = Math.floor(viewport.t +
						(viewport.h - 428) / 2) > 0 ? Math
					.floor(viewport.t + (viewport.h - 428) / 2) : "0",
					width = 400,
					height = 428;
				dojo.style(this.mainNode, {
					left: left + "px",
					top: top + "px",
					width: width + "px",
					height: height + "px"
				});
				this.dialogMiddle.style.height = height + "px";

				if (this._isUseButton() || this._buttonArea) {
					this.dialogMain.style.height = (height - topAndBottomHeight - 34) + "px";
				}

			} else {
				dojo.style(this.mainNode, {
					left: Math.floor(this._beforeExpandPara.l) +
						"px",
					top: Math.floor(this._beforeExpandPara.t < 0 ? 2 : this._beforeExpandPara.t) +
						"px",
					width: dijit.getViewport().w > this._beforeExpandPara.w ? this._beforeExpandPara.w + "px" : (dijit.getViewport().w) + "px",
					height: dijit.getViewport().h > this._beforeExpandPara.h ? (this._beforeExpandPara.h) + "px" : (dijit.getViewport().h - 4) + "px"
				});
				//2019.2.20 sxf  判断可是高度是否大于设置高度
				if (dijit.getViewport().h < this._beforeExpandPara.h) {
					this.dialogMiddle.style.height = (dijit.getViewport().h - topAndBottomHeight - 4) +
						"px";
					if (this._isUseButton() || this._buttonArea) {
						this.dialogMain.style.height = (dijit.getViewport().h - topAndBottomHeight - 34) +
							"px";
					}
				} else {
					this.dialogMiddle.style.height = (this._beforeExpandPara.h - topAndBottomHeight) +
						"px";
					if (this._isUseButton() || this._buttonArea) {
						this.dialogMain.style.height = (this._beforeExpandPara.h - topAndBottomHeight - 34) +
							"px";
					}
				}

			}
			this.dialogMainContent.style.height = this.dialogMiddle.style.height;
		} else {
			this.enlargeNode.className = "u-xdlg-bs";
			this.enlargeNode.title = RIA_I18N.dialog.dialog.restore;
			this._isExpanded = true;
			this._beforeExpandPara = dojo.coords(this.mainNode, true);
			this._beforeScroll = this.getWindow().document.body.scroll;
			this.getWindow().document.body.scroll = "no";
			var viewport = dijit.getViewport();
			dojo.style(this.mainNode, {
				left: Math.floor(viewport.l) + "px",
				top: Math.floor(viewport.t) + "px",
				width: Math.floor(viewport.w) + "px",
				height: Math.floor(viewport.h) + "px"
			});
			this.dialogMiddle.style.height = (viewport.h - topAndBottomHeight) + "px";
			if (this._isUseButton() || this._buttonArea) {
				this.dialogMain.style.height = (viewport.h - topAndBottomHeight - 2) + "px";
			}
			this.dialogMainContent.style.height = this.dialogMiddle.style.height;
		}
		this._resizeContainer();
	},

	update: function () {
		if (thisDome) {
			var winWidth = $(window).width(); // 获取可视区域宽度
			var winHeight = $(window).height(); // 获取可视区域高度
			var doc_Width = $('body').width(); // 获取body宽度
			var doc_Height = $('body').height(); // 获取body高度
			var this_width = parseInt(thisDome.style.width); // 获取当前层宽度
			var this_height = parseInt(thisDome.style.height); // 获取当前层高度
			var this_top = parseInt(thisDome.style.top); // 获取当前层top值
			var this_left = parseInt(thisDome.style.left); // 获取当前层left值
			var this_right = parseInt(thisDome.style.right); // 获取当前层left值


			this_left = this_left < 0 ? 0 : this_left;

			if ((this_width + this_left) >= doc_Width) {
				_left = (doc_Width - this_width - 5);
				_top = (doc_Height - this_height - 5);
				if ((this_width + this_left) >= doc_Width && (this_height + this_top) >= doc_Height) {
					$(thisDome).css({
						"left": _left,
						"top": _top
					});
				}
				$(thisDome).css('left', _left);
			} else if ((this_height + this_top) >= doc_Height) {
				_top = (doc_Height - this_height - 5);
				$(thisDome).css('top', _top);
			}
			//普通下拉框始终居中
			if (this._isExpanded == false && !this.dia_Right) {
				$("html").css("min-width", this_width + "px");
				var _left = (winWidth / 2) - (this_width / 2);
				$(thisDome).css('left', _left + "px");
			}
			if (this.dia_Right && this._isExpanded == false) { //普通右出下拉框始终居右
				var p_left = winWidth - (this_width + 1);
				$(thisDome).css('left', p_left + "px");
			}

			if (this_height > winHeight) {
				$(thisDome).css({
					height: winHeight,
					top: 0,
					overflow: "auto"
				});
			} else if (this_top == 0) { //lht 修改xdialog 侧滑弹框改变窗体大小，变成弹窗形式
				$(thisDome).css({
					height: doc_Height,
					right: 0,
					top: 0,
					left: 'auto'
				});

			} else if (this_top == 2) { //zhaos 修改xdialog 侧滑IE9位置改变,弹层上移
				$(thisDome).css({
					height: this_height,
					top: 2
				});

			} else {
				var _top = (winHeight / 2) - (this_height / 2);
				$(thisDome).css({
					height: this_height,
					top: _top
				});
			}
		}


		var viewport = dijit.getViewport();
		var topAndBottomHeight = this._getTopAndBottomHeight();
		if (this._isExpanded) {
			var top = viewport.t;
			var left = viewport.l;
			var width = viewport.w;
			var height = viewport.h;
			if (viewport.w < this.minWidth) {
				width = this.minWidth;
				left = 0;
			}
			if (viewport.h < this.minHeight) {
				height = this.minHeight;
				top = 0;
			}
			dojo.style(this.mainNode, {
				left: Math.floor(left) + "px",
				top: Math.floor(top) + "px",
				width: Math.floor(width) + "px",
				height: Math.floor(height) + "px"
			});
			this.dialogMiddle.style.height = (height - topAndBottomHeight) + "px";
			if (this._isUseButton() || this._buttonArea) {
				this.dialogMain.style.height = (height - topAndBottomHeight - 34) + "px";
			}
			this.dialogMainContent.style.height = this.dialogMiddle.style.height;
		}
		var bgMask = dojo.byId("bgMask");
		if (bgMask) {
			var pos = dojo.coords(this.getWindow().document.body, true);
			// 解决dojo.coords方法resize整个window时未生成bgmask会报脚本错误问题
			dojo.style(bgMask, {
				left: "0px",
				top: "0px",
				width: Math.floor(pos.w) + "px",
				height: Math.floor(pos.h) + "px"
			});
		}
	},

	//2018.12.28  sxf
	_openUrl: function () {
		//2019.1.8 by wanglei  添加表单设计器功能
		var that = this;
		try {
			//console.log(this);
			//console.log("---------------------")
			//console.log(unieapViewContextHolder);
			var pageView = unieapViewContextHolder[this.domNode.id][0].declaredClass;
			//console.log(pageView)
			var pageViews = pageView.split(".");
			var xhrArgs = {
				url: window.REACT_APP_CONFIG.contextPath + '/api/admin/user/currentUser',
				handleAs: "text",
				sync: true,
				load: function (data) {
					var requestData = JSON.parse(data);
					if (requestData.code == 200 && requestData.user && requestData.user.id) {
						var pageStr = "";
						for (var i = 0, j = pageViews.length; i < j; i++) {
							var tempStr = pageViews[i];
							if (i == 0) {
								if (tempStr.indexOf("_") != -1) {
									tempStr = tempStr.replace("_", "");
								}
								pageStr += tempStr + "/view/";
							} else {
								pageStr += tempStr + "/";
							}
						}
						//console.log(pageStr);
						pageStr = pageStr.substring(0, pageStr.length - 1);
						//console.log(pageStr);
						pageStr = pageStr.substring(0, pageStr.lastIndexOf("/"));
						//console.log(pageStr)
						pageStr = "/" + pageStr + ".view";
						//console.log(pageStr);
						//console.log(this.domNode.id)

						var width = "" || that.width;
						var height = "" || that.height;
						window.open(contextPath + "/api/dv/index#/FormView?path=" + pageStr + "&width=" + width + "&height=" + height, "_blank")
					} else {
						var app = window.app || top.window.app;
						app.logout();
					}
				},
				error: function (err) {
					var app = window.app || top.window.app;
						app.logout();
					console.log(err);
				}
			}
			dojo.xhrGet(xhrArgs);

			//处理字符串 形如  _acctBank.business.acctTellCollInput.View  -->  /acctBank/view/business/acctTellCollInput.view
			//console.log(pageViews)

		} catch (e) {
			console.log("程序错误,   参见xDialog.js的_openUrl方法")
			console.log(e)
		}
	},

	_showMenuModal:function(){

		var page='';
		if (this.url && this.params && this.params.url) {
			var pageList = this.params.url.split('page=');
			page = pageList[pageList.length-1];
			page = page.indexOf('&')>-1?page.split('&')[0]:page;
		}
		if((window.app || window.top.app).showMenuModal) (window.app || window.top.app).showMenuModal({
			title:this.params && this.params.title||'',
			page:page
		});
		this.close();
	},

	// 将最大化的图标更改样式
	_enlargeOver: function () {

	},
	// 将最大化的图标更改样式
	_enlargeOut: function () {

	},

	// 点击关闭按钮的监听函数
	_imgClose: function () {
		if (!this.canECR())
			return;
		//2019/12/27 小东总说要注掉 
		// MessageBox.confirm({
		// 	title: "confirm",
		// 	message: '是否确认关闭?',
		// 	type: 'warn',
		// 	onComplete: confirmReturn,
		// 	iconCloseComplete: true
		// });
		// var that = this;
		// function confirmReturn(value) {
		// 	if (value) {
		// 		// 点击右上角上的"X"时执行
		// 		that.onImgClose && that.onImgClose();
		// 		that.close();
		// 	} 
		// }
		this.onImgClose && this.onImgClose();
		this.close();
		this._iconClose = true;
	},

	_closeOver: function () {

	},

	_closeOut: function () {

	},

	// 对右下角拖拽的监听
	_onDialogBottomRightDown: function (event) {
		if (!this.canECR())
			return;
		if (this.resizeType != '' || this._isExpanded) {
			return;
		}
		this.isResizing = true;
		this.resizeType = "se";
		this.onStartResize(event);
		// dojo.stopEvent(event);
	},

	// 对下方拖拽的监听
	_onDialogBottomDown: function (event) {
		if (!this.canECR())
			return;
		if (this.resizeType != '' || this._isExpanded) {
			return;
		}
		var e = dojo.fixEvent(event);
		var target = e.srcElement;
		if (target != this.dialogBottomRight &&
			target != this.dialogBottomLeft) {
			this.isResizing = true;
			this.resizeType = "s";
			this.onStartResize(event);
		}
	},

	// 对右侧拖拽的监听
	_onDialogRightDown: function (event) {
		if (!this.canECR())
			return;
		if (this.resizeType != '' || this._isExpanded) {
			return;
		}
		this.isResizing = true;
		this.resizeType = "e";
		this.onStartResize(event);
	},

	// 开始通过拖拽调整大小
	onStartResize: function (event) {
		this.startHeadx = event.clientX;
		this.startHeady = event.clientY;
		this._moveDiv.style.height = this.domNode.style.height;
		this._moveDiv.style.width = this.domNode.style.width;
		this._moveDiv.style.left = this.domNode.style.left;
		this._moveDiv.style.top = this.domNode.style.top;
		this._moveDiv.style.display = 'block';
		if (this._moveDiv.setCapture) {
			this.tempEvents.push(dojo.connect(this._moveDiv, "onmousemove",
				this, dojo.hitch(this, this.onResizeMouseMove)));
			this.tempEvents.push(dojo.connect(this._moveDiv, "onmouseup",
				this, dojo.hitch(this, this.onResizeMouseUp)));
			this._moveDiv.setCapture();
		} else {
			this.resizeMove = dojo.hitch(this, this.onResizeMouseMove);
			this.resizeUp = dojo.hitch(this, this.onResizeMouseUp);
			document.addEventListener("mousemove", this.resizeMove, true);
			document.addEventListener("mouseup", this.resizeUp, true);
		}
	},

	// resize时对鼠标事件的监听
	onResizeMouseMove: function (event) {
		var x = event.clientX;
		var y = event.clientY;
		var pos = dojo.coords(this.domNode);
		if (this.resizeType == "e") {
			if (Math.floor(x - pos.x) > this.minWidth)
				this._moveDiv.style.width = Math.floor(x - pos.x) + "px";
			return;
		}
		if (this.resizeType == "s") {
			if (Math.floor(y - pos.y) > this.minHeight)
				this._moveDiv.style.height = Math.floor(y - pos.y) + "px";
			return;
		}
		if (this.resizeType == "se") {
			if (Math.floor(x - pos.x) > this.minWidth)
				this._moveDiv.style.width = Math.floor(x - pos.x) + "px";
			if (Math.floor(y - pos.y) > this.minHeight)
				this._moveDiv.style.height = Math.floor(y - pos.y) + "px";
		}
	},
	// resize时对鼠标事件的监听
	onResizeMouseUp: function (event) {
		this._resizeContainer();
		dojo.stopEvent(dojo.fixEvent(event));
		this.isResizing = false;
		this.startHeadx = 0;
		this.startHeady = 0;
		var topAndBottomHeight = this._getTopAndBottomHeight();
		if (this._moveDiv != null) {
			dojo.forEach(this.tempEvents, dojo.disconnect);
			this.tempEvents = [];
			this.mainNode.style.width = this._moveDiv.style.width;
			this.mainNode.style.height = this._moveDiv.style.height;
			this.dialogMiddle.style.height = Math
				.floor(parseInt(this.mainNode.style.height) - topAndBottomHeight) +
				"px";
			if (this._isUseButton() || this._buttonArea) {
				this.dialogMain.style.height = Math
					.floor(parseInt(this.mainNode.style.height) - topAndBottomHeight - 34) +
					"px";
			}
			this.dialogMainContent.style.height = this.dialogMiddle.style.height;

			this._moveDiv.style.display = "none";
			if (this._moveDiv.releaseCapture) {
				this._moveDiv.releaseCapture();
			} else {
				document
					.removeEventListener("mouseup", this.resizeUp, true);
				document.removeEventListener("mousemove", this.resizeMove,
					true);
			}
			if (this.baseIframe) {
				if (this.baseIframe.style.width == "100%") {
					dojo.style(this.baseIframe, {
						width: "99%"
					});
				} else {
					dojo.style(this.baseIframe, {
						width: "100%"
					});
				}
				if (this.baseIframe.style.height == "100%") {
					dojo.style(this.baseIframe, {
						height: "99%"
					});
				} else {
					dojo.style(this.baseIframe, {
						height: "100%"
					});
				}
			}
		}
		this.resizeType = '';
	},

	_onheadmousedown: function (event) {
		if (this._isExpanded) {
			return;
		}
		var e = dojo.fixEvent(event);
		var target = e.srcElement || e.target; // 兼容火狐;
		if (target != this.topButtonNode && target != this.enlargeNode &&
			target != this.closeNode && target != this.openNode && target !=this.addNode) {
			this.isHeadmove = true;
			this.startHeadx = event.clientX;
			this.startHeady = event.clientY;
			this.winStartx = parseInt(this.domNode.style.left);
			this.winStarty = parseInt(this.domNode.style.top);
			this.onheadStartmove();
		}
	},

	// 对标题栏双击事件的监听，在允许最大化的情况下，实现最大化和恢复原状的功能
	// _ondblclick : function(){
	// if(!this.isExpand){
	// return ;
	// }else{
	// this._enlarge();
	// }
	// },

	// 开始拖拽移动位置
	onheadStartmove: function () {
		if (dojo.isWebKit) {
			this.mainNode.onselectstart = function () { //U_EAP00029468
				return false;
			}
		}
		this._moveDiv.style.height = this.domNode.style.height;
		this._moveDiv.style.width = this.domNode.style.width;
		this._moveDiv.style.left = this.winStartx + "px";
		this._moveDiv.style.top = this.winStarty + "px";
		this._moveDiv.style.display = 'block';
		if (this._moveDiv.setCapture)
			this._moveDiv.setCapture();
		else {
			this.moveMove = dojo.hitch(this, this.onheadmousemove);
			this.moveUp = dojo.hitch(this, this.onheadmouseup);
			document.addEventListener("mousemove", this.moveMove, true);
			document.addEventListener("mouseup", this.moveUp, true);
		}
		this.tempEvents.push(dojo.connect(this._moveDiv, "onmousemove",
			this, dojo.hitch(this, this.onheadmousemove)));
		this.tempEvents.push(dojo.connect(this._moveDiv, "onmouseup", this,
			dojo.hitch(this, this.onheadmouseup)));
	},

	// 鼠标移动时的事件
	onheadmousemove: function (event) {
		if (this.isHeadmove) {
			var x = event.clientX;
			var y = event.clientY;
			var _left = Math.floor(this.winStartx + x - this.startHeadx);
			var _top = Math.floor(this.winStarty + y - this.startHeady);
			var _width = parseInt(this.mainNode.style.width);
			var _height = parseInt(this.mainNode.style.height);
			if (this.winStartx + x - this.startHeadx > 0) {

				// 判断超出body宽度重新赋left值
				if ((_width + _left) >= $('body').width()) {
					this._moveDiv.style.left = ($('body').width() - _width - 5);
				} else {
					this._moveDiv.style.left = _left + "px";
				}

			}
			if (this.winStarty + y - this.startHeady > 0) {

				// 判断超出body高度重新赋top值
				if ((_height + _top) >= $('body').height()) {
					this._moveDiv.style.top = ($('body').height() - _height - 5);
				} else {
					this._moveDiv.style.top = _top + "px";
				}
			}
		}
	},

	// 拖拽时鼠标弹起时的事件
	onheadmouseup: function () {
		if (dojo.isWebKit) {
			this.mainNode.onselectstart = function () { //U_EAP00029468
				return true;
			}
		}
		if (this.isHeadmove) {
			this.isHeadmove = false;
			this.startHeadx = 0;
			this.startHeady = 0;
			if (this._moveDiv != null) {
				dojo.forEach(this.tempEvents, dojo.disconnect);
				this.tempEvents = [];
				this.mainNode.style.top = this._moveDiv.style.top;
				this.mainNode.style.left = this._moveDiv.style.left;
				this._moveDiv.style.display = "none";
				if (this._moveDiv.releaseCapture) {
					this._moveDiv.releaseCapture();
				} else {
					document.removeEventListener("mouseup", this.moveUp,
						true);
					document.removeEventListener("mousemove",
						this.moveMove, true);
				}
			}
		}
	},

	/**
	 * @summary:
	 *     关闭对话框
	 * @description:
	 *     将当前的对话框关闭并将对应的对象进行销毁
	 * @param:
	 *     {boolean}  isComplete
	 *     在关闭对话框的时候，是不是要调用回调函数，默认通过脚本关闭对话框会调用回调函数
	 * @example:
	 * |unieap.getXDialog().close();   
	 */
	close: function (isComplete) {
		this.isComplete = isComplete;
		this._close();
	},

	// 关闭对话框并将相关对象销毁
	_close: function () {
		// 如果指定的url还没有加载完毕就点右上角的关闭按钮,直接返回
		//		if (!this._isReady) {
		//			this._iconClose = false;
		//			return;
		//		}
		//		this._clearTimeOut();

		if (this._publishDialog) {
			unieap.publish("_helpConsoleCloseDialog", this);
		}

		this.dialogFrame &&
			(this.dialogFrame.onreadystatechange = this.dialogFrame.onload = null);

		if (!this._createDlgWithTag) {
			dojo.disconnect(this.resizeHandle)
		}
		if (this.inner && this.innerParentNode) {
			this.innerParentNode.appendChild(this.inner);
		}
		var dialogDom = this.getUtil().getDialogs();
		if (dialogDom == null)
			return;
		for (var i = dialogDom.length - 1; i >= 0; i--) {
			if (dialogDom[i] == this) {
				this.removeDialog(i);
				break;
			}
		}
		// 如果此对话框是使用handle方式打开的
		if (this.getUtil().getDialog(this))
			this.getUtil().removeDialog(this);

		this.domNode.style.display = "none";
		if (this.animate) {
			dojo.style(this._moveDiv, {
				width: this.domNode.style.width,
				height: this.domNode.style.height,
				left: this.domNode.style.left,
				top: this.domNode.style.top,
				display: "block"
			})
			var anim = dojo.animateProperty({
				node: this._moveDiv,
				duration: 450,
				properties: {
					width: {
						end: this.startWidth,
						unit: "px"
					},
					height: {
						end: this.startHeight,
						unit: "px"
					},
					top: Math.floor(this.starty),
					left: Math.floor(this.startx),
					unit: "px"
				},
				onEnd: dojo.hitch(this, this._clear)
			});
			anim.play()
		} else {
			this._clear();
		}
		this._isShow = false;
		if (dialogDom.length == 0) {
			var bgMask = dojo.byId("bgMask");
			(!this.noBgMask) && bgMask && dojo.style(bgMask, "display", "none");
		}
	},
	_innerDisappear: function () {

	},

	_clear: function () {
		this._moveDiv.style.display = "none";
		this.removeNode(this._moveDiv);
		this.destroyModal();
		this.preDialog = null;
		var me = this;
		// 判断通过标签的创建的Dialog控件是否关闭过
		this._createDlgWithTag && (this._dlgClosed = true) && (this._isReady = false);
		window.setTimeout(function () {
			var frame = me.dialogFrame;
			if (me.dialogFrame) {
				dojo.withDoc(me.dialogFrame.contentWindow.document,
					function () {
						var children = me.dialogFrame.contentWindow.dijit ?
							me.dialogFrame.contentWindow.dijit
							.findWidgets(dojo.body()) : [];
						dojo.forEach(children, function (widget) {
							widget && widget.destroy &&
								widget.destroy();
						});
					}, me);
				frame.src = "";
				frame.contentWindow.document.write("");
				dojo.destroy(frame);
				frame = null;
				delete me.dialogFrame;
			}
			me.url && unieap.destroyWidgets(me.dialogMainContent);
			if (me.inner && typeof (me.inner) == "object" &&
				!me.innerParentNode) {
				// inner方式创建，且传入的不是html片段而是dom，且没有父节点
				unieap.destroyWidgets(me.inner);
				unieap.destroyWidgets(me.dialogMiddleButton);
			}
			// 执行回调函数
			if (me.onComplete && ((me._iconClose && me.iconCloseComplete) || (!me._iconClose && me.isComplete != false))) {
				me.onComplete.call(me.src, me.returnObj);
			}
			if (me.baseIframe != null) {
				me.removeNode(me.baseIframe);
			}!me._createDlgWithTag && me.destroy();
		}, 0);
	},

	/**
	 * @summary:
	 *     设置对话框组件的返回值
	 * @param: 
	 *     {object} obj
	 * @description:
	 *     在对话框关闭前可以设置对话框的返回值，并将在对话框关闭的时候，作为回调函数的参数
	 * @example:
	 * |unieap.getXDialog().setReturn(theReturnObject);  
	 */
	setReturn: function (Obj) {
		this.returnObj = Obj;
	},

	// 创建模态对话框的遮挡iframe
	_createModalIframe: function () {
		var bgMask;
		var pos = dojo.coords(this.getWindow().document.body, true);
		if (dojo.isIE == 6) {
			var burl = dojo.moduleUrl("dojo",
					"../unieap/dialog/_bgLayer.html") +
				"";
			bgMask = dojo.create("iframe", {
				id: "bgMask",
				src: burl
				//						style : {
				//							position : "absolute",
				//							zIndex : "998",
				//							filter : "Alpha(Opacity=\"0\")",
				//							opacity : 0
				//						}
			});
			dojo.addClass(bgMask, "u-xdlg-bgMaskDialog-IE6");
			dojo.style(bgMask, {
				left: "0px",
				top: "0px",
				width: Math.floor(pos.w) + "px",
				height: Math.floor(pos.h) + "px",
				display: 'none'
			});
			dojo.body().appendChild(bgMask);
			bgMask.contentWindow.focus();
		} else {
			bgMask = dojo.create("div", {
				//						style : {
				//							position : "absolute",
				//							background : "#FFF",
				//							zIndex : 998,
				//							filter : "Alpha(Opacity=\"0\")",
				//							opacity : 0
				//						},
				id: "bgMask"
			});
			dojo.addClass(bgMask, "u-xdlg-bgMaskDialog-notIE");
			dojo.style(bgMask, {
				left: "0px",
				top: "0px",
				// width : Math.floor(pos.w) + "px",
				// height : Math.floor(pos.h) + "px",
				width: "100%",
				height: "100%",
				display: 'none'
			});
			dojo.body().appendChild(bgMask);
			// bgMask.focus();
		}
		return bgMask;
	},

	// 删除模态相关的div和iframe
	destroyModal: function () {
		if (this.preDialog && this.preDialog._modalDiv) {
			this.removeNode(this.preDialog._modalDiv);
			this.preDialog._modalDiv = null;
			delete this.preDialog._modalDiv;
		} else {
			var bgMask = dojo.byId("bgMask");
			bgMask && this.removeNode(bgMask);
		}
		// if($('.u-xdlg-modalDiv').length){$('.u-xdlg-modalDiv').remove()}//防止在ifram外层生成出_modalDiv 删除不了
	},

	// 自定义移除domNode的方法
	removeNode: function (node) {
		dojo.destroy(node);
	},

	getWindow: function () {
		return window;
	},

	//获得top和bottom的dom高度，包括边框等
	_getTopAndBottomHeight: function () {
		var borderWidth = 0;
		if (dojo.isFF) { //FF下 border属性会被解析成4个子属性 必须用这种方式进行处理！
			borderWidth = Number(dojo.style(this.mainNode, 'borderTopWidth'));
		} else {
			borderWidth = Number(dojo.style(this.mainNode, 'borderWidth'));
		}
		var topAndBottomHeight = Number(dojo.style(this.topNode, 'height')) +
			Number(dojo.style(this.dialogBottom, 'height')) +
			borderWidth * 2;
		return topAndBottomHeight;
	},

	_resizeContainer: function () {
		dojo.forEach(unieap.getChildrenContainer(this.mainNode), function (widget) {
			setTimeout(function () {
				unieap.notify(widget, "resizeContainer");
			}, 0);
		});
	},

	/**
	 * @summary:
	 *		得到从父窗口传递的参数
	 * @return
	 *		{object}
	 * @description:
	 *		得到父窗口传递到对话框的参数，可以为任何类型的数据，
	 *		当同时配置dialogData和getDialogData时，执行getDialogData的函数，并返回函数的返回值
	 * @example:
	 * |var param = unieap.getXDialog().getObject();
	 */
	getObject: function () {
		var fn = this.getDialogData;
		return dojo.isFunction(fn) ? fn() : this.dialogData;
	},
	_clearTimeOut: function () {
		if (this._setTimeOut) {
			clearTimeout(this._setTimeOut);
		}
	},

	showRight: function (showType) {
		if (unieap.byId(this.id) || window.top.unieap.byId(this.id)) {
			this._showRight(showType);
		} else {
			var xdialog = {
				id: this.id,
				dialogData: this.dialogData,
				height: Number(this.height) === 80 ? 'auto' : this.height + "px",
				width: this.width + "px",
				minWidth: this.minWidth + "px",
				minHeight: this.minHeight + "px",
				title: this.title,
				isExpand: this.isExpand,
				isMax: this.isMax,
				isClose: this.isClose,
				resizable: this.resizable,
				isDesign: (this.isDesign && window.app && app.isShowDocedit()),
				isShowModal:(this.isShowModal && window.app && app.isShowDocedit()),
				timeout: this.timeout,
				getDialogData: this.getDialogData,
				iconCloseComplete: this.iconCloseComplete,
				onComplete: this.onComplete
			};
			if (this.url) {
				xdialog.url = this.url;
			} else {
				xdialog.inner = this.inner;
			}
			var context = null,
				topWin = unieap.getTopWin();
			if (topWin.XDialogUtil && topWin.document.getElementsByTagName("frameset").length == 0 && !window.opener) {
				context = topWin;
			} else {
				context = window;
			}
			xdialog = new context.unieap.xdialog.Dialog(xdialog);
			xdialog._showRight(showType);
		}
	},
	//2018.7.10 兼容OES showRight/showPosition方法
	_showRight: function (showType) {
		this.noBgMask = false;
		this.dia_Right = true;
		this._show();
		/* 添加白色透明背景 屏蔽多次打开滑动效果以及滑动层不能关闭的bug */
		var xDlgMask = dojo.byId("bgMask");
		var otherMask = $('.u-xdlg-modalDiv');
		//if(otherMask.length==0){
		if (xDlgMask) {
			dojo.addClass(xDlgMask, 'maskWhite');
		}
		/**
		 * 必须监听window的scroll事件否则页面会滚动到右边
		 */
		$(window).scroll(function (e) {
			$('#leftmenu-trigger').focus();
			$(window).unbind('scroll');
		});
		var winWidth = $(window).width();
		var diaOffsetLeft = winWidth - $(this.domNode).outerWidth() - 1;

		var showRightTop = 114;
		if (showType == 'TOP') {
			showRightTop = 2;
		}

		this.setHeight($(window).height() - showRightTop - 2);
		var switchDialog = true;
		if (switchDialog) {
			switchDialog = false;
			$(this.domNode).css({
				left: winWidth,
				top: showRightTop
			}).animate({
				left: diaOffsetLeft
			});
			unieap.nowShowDia = this;
		}
		// 防止多次快速点击
		/*
		var xDlgMaskTime = setTimeout(function(){
		    $(xDlgMask).one('click',function(){
		        clearTimeout(xDlgMaskTime);
		        if(unieap.nowShowDia){
		            unieap.nowShowDia.close(false);
		            $('.u-xdlg-modalDiv').remove();
		        }
		    })
		},2500);*/
	},
	showPosition: function (setX, setY) {
		this.show();
	}
});

// if(top.window.creatPortalDia){
//     unieap.xdialog.Dialog.prototype._showBack = unieap.xdialog.Dialog.prototype.show;
//     unieap.xdialog.Dialog.prototype.show = function(refNode, parameters){
//         top.window.creatPortalDia({
//             height:this.height,
//             width:this.width,
//             url:this.url,
//             title:this.title,
//             dialogData:this.dialogData,
//             WEB_APP_NAME:unieap.WEB_APP_NAME,
//             isMax:this.isMax,
//             iconCloseComplete:this.iconCloseComplete,
//             onComplete:this.onComplete
//         });
//     };
//     unieap._getXDialogBack = unieap.getXDialog;
//     unieap.getXDialog = function(){
//         if(unieap.page.params.portalDiaId && unieap.page.params.portalDiaId.length > 0){
//             return top.window.getPortalDia(unieap.page.params.portalDiaId);
//         }else{
//         	unieap._getXDialogBack();
//         }
//     }
// }
dojo.provide("unieap.layout.ContentPane");
dojo.require("unieap.layout.Container");
dojo.declare("unieap.layout.ContentPane", [unieap.layout.Container], {
	/**
	 * @declaredClass:
	 * 		unieap.layout.ContentPane
	 * @superClass:
	 * 		unieap.layout.Container
	 * @summary:
	 * 		容器类
	 * @classDescription:
	 * 		在TabContainer或StackContainer中使用
	 * @example:
	 * |<div dojoType="unieap.layout.TabContainer" style="width:400px;height:400px;">
	 * |	<div dojoType="unieap.layout.ContentPane" title="tab1">ContentPane,这是一个ContentPane!</div>
	 * |	<div dojoType="unieap.layout.ContentPane" title="tab二"></div>
	 * |	<div dojoType="unieap.layout.ContentPane" title="容器三"></div>
	 * |</div>
	 * 		包含三个ContentPane的TabContainer
	 * @img：
	 * 		images/layout/contentpane.png
	 */
	
	//配置属性接口
	UserInterfaces : dojo.mixin({
		href : "string",
		xhref : "string",
		showLoading : "boolean",
		refreshOnShow : "boolean",
		selected : "boolean",
		closable : "boolean",
		hidden : "boolean",
		type : "string",
		title : "string",
		onClose : "function",
		onShow : "function",
		onInit : "function",
		onHide : "function",
		enabled	: "boolean"
	},
	unieap.layout.Container.prototype.UserInterfaces),
	
	/**
	 * @summary:
	 * 		使用iframe的src路径
	 * @description：
	 * 		当配置href时，会将href链接的内容放入iframe中显示出来。
	 * @type：
	 * 		{string}		
	 */
	href: "",
	/**
	 * @summary:
	 * 		使用单帧的src路径
	 * @description：
	 * 		当配置xhref时，会将链接的内容放入单帧中显示出来。
	 * @type：
	 * 		{string}		
	 */
	xhref:null,

	//是否已经初始化内容
	_hasInit:false,
	
	//是否在TabContainer中
	_inTabContainer:false,
	
	/**
	 * @summary:
	 * 		是否显示登录进度条
	 * @type:
	 * 		{boolean}
	 * @default:
	 * 		false
	 */
	showLoading:false,
	
	/**
	 * @summary:
	 * 		页面显示时是否需要刷新页面
	 * @type:
	 * 		{boolean}
	 * @default：
	 * 		false
	 */
	refreshOnShow:false,
	
	
	/**
	 * @summary:
	 * 		是否默认选中
	 * @type：
	 * 		{boolean}
	 * @default：
	 * 		false
	 * @description：
	 * 		当所有的ContentPane都未设置selected时，选中第一个ContentPane。
	 * 		否则选中配置selected的ContentPane。
	 * 		当多个ContentPane都设置selected时，选中第一个配置selected的ContentPane。
	 */
	selected:false,
	
	/**
	 * @summary:
	 * 		设置Tab页在Tab容器中是否可关闭,不适合StackContainer
	 * @type：
	 * 		{boolean}
	 * @default：
	 * 		false
	 */
	closable:false,
	
	/**
	 * @summary:
	 * 		设置Tab页在Tab容器中是否隐藏
	 * @description:
	 * 		在StackContainer容器中无效
	 * @type：
	 * 		{boolean}
	 * @default：
	 * 		false
	 * @example:
	 * |<div dojoType="unieap.layout.TabContainer" style="width:400px;height:400px;">
	 * |	<div dojoType="unieap.layout.ContentPane" title="测试一"></div>
	 * |	<div dojoType="unieap.layout.ContentPane" title="测试二" hidden="true"></div>
	 * |</div>
	 */
    hidden:false,
	
	
	/**
	 * @summary:
	 * 		设置ContentPane在Tab容器中的显示标签
	 * @type:
	 * 		{string}
	 * @example:
	 * |<div dojoType="unieap.layout.TabContainer" style="width:400px;height:400px;">
	 * |	<div dojoType="unieap.layout.ContentPane" title="测试一"></div>
	 * |	<div dojoType="unieap.layout.ContentPane" title="测试二" hidden="true"></div>
	 * |</div>
	 */
	title:'',
    
	/*
	 * @summary:
	 * 		装载页面内容的提示语
	 * @type：
	 * 		{string}
	 * @default:
	 * 		"正在装入..."
	 */
	loadingMessage: RIA_I18N.layout.contentPane.loading,
	
	/**
	 * @summary:
	 * 		设置Tab页在Tab容器中是否可编辑
	 * @type:
	 * 		{boolean}
	 * @default:
	 * 		true
	 */
	enabled:true,
	
	type: 'Tab',
	
	startup: function(){
	   this.inherited(arguments);
	   if(this._started){ return; }
	   //判断父容器类型，如果在tabcontainer中不执行onShow操作
	   var parent = this.getParentContainer();
	   if(!parent || parent.declaredClass != "unieap.layout.TabContainer"){
	   	 this._onShow();
	   }
	   
    },
	
	/**
	 * @summary:
	 * 		重新设置容器的显示内容，将会把原有内容清空。
	 * @param 
	 * 		{String|DomNode|Nodelist} data
	 * @example:
	 * |var content = "<div dojoType='unieap.form.Button' label='取消'></div>";
	 * |unieap.byId("container").setContent(content);
	 */
    setContent:function(data){
    	this.href = "";
		this._setContent(data || "");
		this._createSubWidgets();
		unieap.fireContainerResize(this.domNode);
    },
    
	_setContent: function(cont){
		this.destroyDescendants();
		var node = this.containerNode || this.domNode;
		try{
			while(node.firstChild){
				dojo._destroyElement(node.firstChild);
			}
			if(typeof cont == "string"){
				node.innerHTML = cont;
			}else{
				if(cont.nodeType){
					node.appendChild(cont);
				}else{
					dojo.forEach(cont, function(n){
						node.appendChild(n.cloneNode(true));
					});
				}
			}
		}catch(e){
			
		}
	},
	
	_createSubWidgets: function(){
		var rootNode = this.containerNode || this.domNode;
		try{
			dojo.parser.parse(rootNode, true);
		}catch(e){
			
		}
	},
    
//	resizeContainer : function(size){
//		dojo.marginBox(this.domNode, size);
//		var node = this.containerNode||this.domNode,
//			mb = dojo.mixin(dojo.marginBox(node), size||{});
//		var cb = (this._contentBox = dijit.layout.marginBox2contentBox(node, mb));
//		this.resizeChildrenContainer();
//	},
	_getMenuId:function(){
		if(!this._rootID){return ''}
		var params= this._rootID.split('_');
		var menuId ='';
		if (params.length==2){
			menuId = params[1];
		}
		return menuId;
	},
	/**
	 * @summary:
	 * 		设置容器的链接地址
	 * @param 
	 * 		{string} href
	 * @example:
	 * |unieap.byId("container").setHref("http://www.google.com");
	 */
	setHref: function(/*String|Uri*/ href){
		var inFrame = href.indexOf('iframe=1')>0;
		var isVhwsp = href.indexOf('vhwsp?page=')>0;
		var ext = "";
		if (isVhwsp){
			if(!inFrame){
				ext = '&iframe=1';
			}
		}
		var menuId = this._getMenuId();
		var menu = '';
		var s = href.indexOf('?') >0? '&' : '?';
		if (href.indexOf('menuId=')==-1){
			menu = s + 'menuId='+menuId;
		}
		this.href=href+menu+ext;
		this.refresh();
	},
	
	setXHref: function(/*String|Uri*/ xhref){
		if(this.xhref){
			unieap.destroyDialogAndMenu(this);
			unieap.destroyWidgets(this.domNode);
		}
		var menuId = this._getMenuId();
		var menu = '';
		var s = xhref.indexOf('?') >0? '&' : '?';
		if (xhref.indexOf('menuId=')==-1){
			menu = s +'menuId='+menuId;
		}
		this.xhref=xhref + menu;
		var node = this.containerNode;
		if(dojo.isWebKit || dojo.isFF){
			if(dojo._loaders && dojo._loaders.length == 0){
				unieap.loader.load({
					node : node,
					url : xhref + menu
				});
			}else{
				dojo.addOnLoad(function(){
					unieap.loader.load({
						node : node,
						url : xhref + menu
					});
				});
			}
		}else{
			dojo.addOnLoad(function(){
				unieap.loader.load({
					node : node,
					url : xhref + menu
				});
			});
		}
	},
	
	_createForm:function(params){
		dojo.byId(this.id+"_form")&&dojo.destroy(this.id+"_form");
		var form = dojo.create("form",{
			name : this.id+"_form",
		    method : "post",
		    target:this.id+"_frame" //将返回的页面显示iframe中
		},dojo.body());
		
		for(var key in params){
			var input=dojo.create('input',{
				type:'hidden',
				value:this._formatParams(params[key]),
				name:key
			},form);
		}
		form.action=this.href;

		return form;
	},
	
	_formatParams:function(param){
		if(param&&(param.declaredClass=='unieap.ds.DataCenter'||param.declaredClass=='unieap.ds.DataStore')){
			return param.toJson();
		}else if(dojo.isObject(param)){
			return dojo.toJson(param);
		}
		return param;
	},
	
	/**
	 * @summary:
	 * 		刷新ContentPane中iframe的src
	 * @example:
	 * |unieap.byId("contentPane").refresh();
	 */
	refresh:function(params){
		if(this.href){
			this.onDownloadStart();
			if(dojo.isObject(params)){
				var form=this._createForm(params);
				form.submit();
			}else{
				if(dojo.isIE){
					this._if.src="javascript:false;";
					this._if.src=this.href;
				}else{
					//在火狐下若主页面尚未加载完成，不添加延时的话，子页面的addOnload不会执行
					//setTimeout会导致FF的history多记录HTML信息 导致后退有问题 暂时屏蔽 U_EAP00027576
//					var self = this;
//				    setTimeout(function(){
					  this._if.src=this.href;
//				    },1000);
				}
			}
		}
	},
	
	/**
	 * @summary:
	 * 		在Tab容器中,点击关闭按钮的回调方法
	 * @description:
	 * 		当返回false时,不关闭Tab页。
	 * 		当返回true时,关闭Tab页。
	 * 		默认返回true。
	 * 		不适合StackContainer
	 * @return:
	 * 		{boolean}
	 * @example:
	 * |<div dojoType="unieap.layout.TabContainer" style="width:400px;height:400px;">
	 * |	<div dojoType="unieap.layout.ContentPane" title="测试一" onClose="testOnClose" closable="true"></div>
	 * |	<div dojoType="unieap.layout.ContentPane" title="测试二"></div>
	 * |</div>
	 * |<script>
	 * |	function testOnClose(pane){
	 * |		//自定义逻辑判断
	 * |	}
	 * |</script>
	 *      
	 */
	onClose:function(){
		return true;
	},

	/**
	 * @summary:
	 * 		当内容显示时触发的事件，每次显示的时候均会触发
	 * @param: 
	 * 		{unieap.layout.ContentPane} pane
	 * @example:
	 * |<div dojoType="unieap.layout.TabContainer" style="width:400px;height:400px;">
	 * |	<div dojoType="unieap.layout.ContentPane" title="测试一" onShow="testOnShow"></div>
	 * |	<div dojoType="unieap.layout.ContentPane" title="测试二"></div>
	 * |</div>
	 * |<script>
	 * |	function testOnShow(pane){
	 * |		alert("showing");
	 * |	}
	 * |</script>
	 */
	onShow:function(pane){
		
	},
	
	/**
	 * @summary:
	 * 		当内容初始化时触发的事件，仅在初始化的时候执行一次
	 * @param: 
	 * 		{unieap.layout.ContentPane} pane
	 * @example:
	 * |<div dojoType="unieap.layout.TabContainer" style="width:400px;height:400px;">
	 * |	<div dojoType="unieap.layout.ContentPane" title="测试一" onInit="testOnInit"></div>
	 * |	<div dojoType="unieap.layout.ContentPane" title="测试二"></div>
	 * |</div>
	 * |<script>
	 * |	function testOnInit(pane){
	 * |		alert("init the pane");
	 * |	}
	 * |</script>
	 */
	onInit:function(pane){
		
	},
	
	/**
	 * @summary:
	 * 		当页面内容被隐藏时触发的事件
	 * @description:
	 * 		在tabContainer或stackContainer中打开多个页面时，在切换页面时，会回调此方法
	 * @example:
	 * |<div dojoType="unieap.layout.TabContainer" style="width:400px;height:400px;">
	 * |	<div dojoType="unieap.layout.ContentPane" title="测试一" onHide="testOnHide"></div>
	 * |	<div dojoType="unieap.layout.ContentPane" title="测试二"></div>
	 * |</div>
	 * |<script>
	 * |	function testOnHide(pane){
	 * |		alert("hide the pane");
	 * |	}
	 * |</script>
	 */
	onHide:function(){
		
	},
	
	_onShow: function(params){
		if(this.postponeRender){
			this.postponeRender = false;
			dojo.parser.parse(this.containerNode);
		}
        if (this.refreshOnShow||!this._hasInit) {
			//refreshOnShow为true或第一次载入 时刷新pane
            this.refresh(params);
        }
		!this._hasInit&&(this._hasInit=true)&&this._onInit();
		unieap.fireEvent(this,this.onShow,[this]);
    },
	
	_onInit:function(){
    	var xhref = this.xhref
		if(xhref){
			this.setXHref(xhref);
		}
		this.resizeContainer();
		unieap.fireEvent(this,this.onInit,[this]);
	},
	
	//创建一个iframe，用于加载设置了href属性的页面
	_createIframe:function(){
		var iframe=null;
		//创建一个带name属性的iframe,在ie下需要显示地设置name属性,不能动态修改
		//不然form的target属性无效
	 	if(dojo.isIE<9){
	 		iframe=dojo.create("<iframe class='u-contentpane-iframe' name='"+this.id+"_frame'></iframe>");
	 	}else{
	 		iframe=dojo.create('iframe',{name:this.id+'_frame','class':'u-contentpane-iframe'});
	 	}
		dojo.style(iframe,{width:0,border:0,height:0});
		dojo.place(iframe,this.containerNode||this.domNode);
		return iframe;
	},
		
	//刷新contentpane的的href前的动作
	onDownloadStart: function(){
		//FIXME:
		//    StackContainer嵌套ContentPane时,loading的效果好像有问题
		//	  
		if(this.showLoading){
			this._loadingNode&&dojo.destroy(this._loadingNode);
			this._loadingNode=dojo.create("div",{'class':'loading','innerHTML':this.loadingMessage},
					this.containerNode||this.domNode,'first');
		}
		if(!this._if){
			this._if=this._createIframe();
			this._if.frameBorder="no";
			var self = this;
			this._if.onreadystatechange = this._if.onload = function(evt){
				if (!this.readyState || 
					this.readyState == "loaded" || 
					this.readyState == "complete") {
					self.onDownloadEnd();
				}
			};
			this._if.onactivate = function(evt){
				dojo.stopEvent(evt);
			}
		}
	},
	
	//成功设置href后的动作
	onDownloadEnd: function(){
		this._loadingNode&&dojo.destroy(this._loadingNode);
		dojo.style(this._if,{
			height:"100%",
			width:"100%"
		});
		//firefox下iframe加载只显示一部分

		(dojo.isFF||dojo.isIE>=8)&&this.height=='auto'&&dojo.style(this.domNode,"height","100%");
	},
	destroy : function(){
		if(this._if){
			this._if.onreadystatechange = null;
			this._if.onload = null;
			this._if.onactivate = null;
		}
		this.inherited(arguments);
	},
	/**
	 * @summary:
	 * 		获取iframe的window对象
	 * @return:
	 * 		{object}
	 * @example:
	 * |var container = unieap.byId("container");
	 * |var win = container.getContentWindow();
	 * |alert(win);
	 */
	getContentWindow : function(){
		if(this._if){
			return this._if.contentWindow;
		}	
		return window;
	}
});

dojo.provide("unieap.layout.TitlePane");
dojo.require("dijit._Templated");
dojo.require("dojo.fx");
dojo.require("unieap.layout.ContentPane");
dojo.declare("unieap.layout.TitlePane", [unieap.layout.ContentPane,dijit._Templated], {
    /**
     * @declaredClass:
     * 		unieap.layout.TitlePane
	 * @superClass:
	 * 		unieap.layout.Container
     * @summary:
     * 		TitlePane组件
     * @classDescription:
     *		可伸缩的一个容器,支持动画效果,可自定义右上角区域
     * @example:
     * |<div dojoType="unieap.layout.TitlePane"   title="hello">
     * |	<div style="height:300px">Hello TitlePane!</div>
     * |</div>
     *		标题为hello,内容为"Hello TitlePane!"的一个TitlePane
     * @example:
     * |<div dojoType="unieap.layout.TitlePane"   title="hello">
     * |	<div type="buttons">
     * |		<button>按钮1</button>
     * |		<button>按钮2</button>
     * |	</div>
     * |</div>
     * 		右上角会有两个button按钮
     * 		当配置type="buttons"时，这部分内容将会出现在TitlePane的右上角
     * 		只能设置一组type="buttons"，如果设置多组，只有第一组能够显示，其余作为titlepane内容显示
     * @superClass:
     * 		unieap.layout.ContentPane
     * @img:
     * 		images/layout/titlepane.png
     */
	
	//配置属性接口
	UserInterfaces : dojo.mixin({
		title : "string",
		href : "string",
		xhref : "string",
		open : "boolean",
		duration : "number",
		animate : "boolean",
		flexible : "boolean",
		onCollapse : "function",
		onBeforeCollapse : "function",
		onBeforeExpand : "function",
		onExpand : "function",
		onShow : "function"		
	},
	unieap.layout.Container.prototype.UserInterfaces),	
	
    /**
     * @summary:
     * 		TitlePane的标题
     * @type：
     * 		{string}
     * @example：
     * |<div open="false" dojoType="unieap.layout.TitlePane"  title="hello TitlePane">
     * |</div>
     */
    title: "",
	
    /**
	 * @summary:
	 * 		设置TitlePane内容的链接地址
	 * @description：
	 * 		 当配置该属性时，TitlePane需要设置高度，并不应该在TitlePane内部添写其他元素
	 * @type：
	 * 		{string}
	 * @example:
	 * |<div dojoType="unieap.layout.TitlePane" ${1}href="form_textarea.do" id="titlepane2" ${2}height="100px" title="加载url">
	 * |	${3}
	 * |</div>		
	 * ${1}设置TitlePane内容显示区域的链接地址
	 * ${2}设置高度
	 * ${3}内部不嵌套其他元素
	 */
	href: "",
    
    /**
     * @summary:
     * 		TitlePane的open状态
     * @description：
     * 		true表示open状态，false表示关闭状态
     * @type：
     * 		{boolean}
     * @default:
     * 		true
     * @example：
     * |<div open="false" dojoType="unieap.layout.TitlePane"  title="hello">
     * |</div>
     * 		此时TitlePane初始状态为关闭着的
     */
    open: true,
    
    
    /**
     * @summary:
     * 		指定展开关闭下拉框的持续时间
     * @description：
     * 		当有动画效果时有效
     * @type：
     * 		{number}
     * @default：
     * 		300
     */
    duration: 300,
    
	/**
	 * @summary:
	 * 		是否使用动画收缩TitlePane
	 * @description：
     * 		当没有动画统一开关unieap.animate时，animate默认为true，否则animate为unieap.animate的值
	 * @type：
	 * 		{boolean}
	 * @default：
	 * 		true
	 */
	animate:(typeof(unieap.animate) == 'undefined')?true:unieap.animate,
	
    /**
     * @summary:
     * 		是否支持展开关闭
     * @type：
     * 		{boolean}
     * @default：
     * 		true
     * @example：
     * |<div dojoType="unieap.layout.TitlePane" flexible="false">
     * |</div>
     * 点击TitlePane控件，此时不可关闭
     */
    flexible: true,
    
	
    templateString: "<div class='u-titlepane-widget' >" +
					    "<div  class='u-titlepane-title' dojoAttachPoint='titleBarNode,focusNode'>" +
							"<span dojoAttachPoint='arrowNode' class='u-titlepane-arrownode'>-</span>" +
						    "<div class='u-titlepane-buttonfield' dojoAttachPoint='buttonContainerNode'></div>" +
							"<span dojoAttachPoint='titleNode' class='u-titlepane-titlenode'></span>" +
						"</div>" +
						"<div class='u-titlepane-content-outer' dojoAttachPoint='hideNode'>" +
						    "<div dojoAttachPoint='wipeNode' class='u-titlepane-content-wipe'>" +
						   		 "<div class='u-titlepane-content-inner' dojoAttachPoint='containerNode'></div>" +
						    "</div>" +
					    "</div>" +
    				"</div>",
      
    postCreate: function(){

		this.inherited(arguments);
		this.flexible?this.connect(this.titleBarNode, 'onclick', 'toggle'):(this.arrowNode.innerHTML='');
        this.createButtonContainer(this.buttonContainerNode);
        this.animate&&this._initWipe();
        if (!this.open) {
            this.hideNode.style.display  = "none";
            this.arrowNode.innerHTML = "+";
			this.domNode.style.height='26px';
        }
		this._setOpenCss();
		if(this.href){
			this.setHref(this.href);
		}
		
		this.title && this.setTitle(this.title);
    },
	
    resizeContainer: function(){
        this.containerNode && dojo.style(this.containerNode, "overflow", "hidden");//U_EAP00028419
    	//隐藏的时候不显示
    	if(null==this.domNode|| 0 == this.domNode.offsetHeight) return;
    	//根据设定高度设置ContainerNode的高度

    	if(this.height!="auto"){
			dojo.style(this.domNode, "overflow", "hidden");
    		var height = dojo.contentBox(this.domNode).h || dojo.style(this.domNode,'height');
	        var nh = 0;
	        //处理title高度变化后，下边线无法显示的问题
	        var titleHeight = this.titleBarNode.offsetHeight;
	        if (height > titleHeight) {
	            nh = (height - titleHeight);
	        }
			if(dojo.boxModel=="content-box"){
				var _h=dojo.marginBox(this.hideNode).h-dojo.contentBox(this.hideNode).h;
				if (nh > _h) {
					nh=nh-_h;
				}
			}
			if(nh<=0) return;
			dojo.style(this.containerNode, "height", nh + "px");
    	}    
        this.resizeChildrenContainer();
	//U_EAP00028419
	setTimeout(dojo.hitch(this,function(){
		this.containerNode && dojo.style(this.containerNode, "overflow", "auto");
	}),0);
    },
    
	_setOpenCss:function(){
		if(this.open){
			dojo.removeClass(this.domNode,"u-titlepane-widget-close");
			dojo.addClass(this.domNode,"u-titlepane-widget-open");
		}else{
			dojo.removeClass(this.domNode,"u-titlepane-widget-open");
			dojo.addClass(this.domNode,"u-titlepane-widget-close");
		}
	},
    
    //初始化展开关闭动作
    _initWipe: function(){
        this._wipeIn = dojo.fx.wipeIn({
            node: this.wipeNode,
            duration: this.duration,
            beforeBegin: dojo.hitch(this, function(){
                this.hideNode.style.display = "";
				if(dojo.isIE==6){
					this.hideNode.style.visibility  = "hidden";
				}
            }),
            onEnd: dojo.hitch(this, function(){
				if (dojo.isIE) {
           			//解决在ie下组件隐藏后再显示消失的bug
           			this.hideNode.style.display = "none";
           			this.hideNode.style.display = "";
					if(dojo.isIE==6){
						//ie 解除了fx.jd实现的onend 须手动设置高度为"auto"
						this.wipeNode.style.height="auto";
						this.hideNode.style.visibility  = "visible";
					}
        		}
                this._onExpand();
            })
        });
		if(dojo.isIE==6){
			//ie 6下 fx.js绑定的onend事件导致展开后form组件错乱 see---U_EAP00006760
			dojo.disconnect([this._wipeIn,'onEnd',1,0]);
		}
		
        this._wipeOut = dojo.fx.wipeOut({
            node: this.wipeNode,
            duration: this.duration,
            onEnd: dojo.hitch(this, function(){
                this.hideNode.style.display = "none";
                this._onCollapse();
            })
        });
    },
    
	//	创建按钮区域，默认将渲染type='buttons'的节点
    createButtonContainer: function(buttonContainer){
        //添加扩展按钮
    	var node = this.containerNode.firstChild;
    	//遍历containerNode下面节点，查找含有type为buttons的节点，找到赋值给n
    	while(node){
    		if(node.getAttribute && "buttons" == node.getAttribute("type")){
    			dojo.place(node,buttonContainer,0);
	    		return;
    		}
    		node = node.nextSibling;
    	}
    },
	

	//销毁titlePane
	destroy:function(){
		if(this.buttonContainerNode){
			dojo.query('[widgetId]', this.buttonContainerNode).forEach(function(n){
				var w=dijit.byNode(n);
				w&&w.destroy&&w.destroy();
			});
		};
		this.inherited(arguments);
	},
	
    /**
     * @summary
     * 		打开或关闭TitlePane,改变open/close状态
     * @param
     * 		{evt} evt 鼠标点击Titlebar事件，程序调用此方法可以不传参数
     * @example:
     * |<div dojoType="unieap.layout.TitlePane" id="titlepane">
	 * |</div>
	 * |<script type="text/javascript">
     * |	unieap.byId("titlepane").toggle();
	 * |</script>
     */
    toggle: function(evt){
        //点击titleBarNode  titleNode arrowNode时触发 点击其它的不触发
        if (evt && dojo.indexOf([this.titleBarNode, this.titleNode, this.arrowNode], evt.target) == -1) {
            return;
        }
        //终止正在进行的活动
        dojo.forEach([this._wipeIn, this._wipeOut], function(animation){
            if (animation && animation.status() == "playing") {
                animation.stop();
            }
        });
		if(this.open){
			if(false===this._onBeforeCollapse()){
				return;
			}
		}else{
			if(false===this._onBeforeExpand()){
				return;
			}
		}
		
        var anim = this[this.open ? "_wipeOut" : "_wipeIn"]
        if (anim) {
            anim.play();
        }else {
            this.hideNode.style.display = this.open ? "none" : "";
			this.open?this._onCollapse():this._onExpand();
        }
        this.open = !this.open;
        //改变arrowNode的innerHTML
        this.arrowNode.innerHTML = this.open ? "-" : "+";
		this._setOpenCss();
    },
    
	/**
	 * @summary:
	 * 		合拢TitlePane的回调事件
	 * @example:
	 * |<div dojoType="unieap.layout.TitlePane" onCollapse="onCollapse">
	 * |</div>
	 * |<script>
	 * |	function onCollapse(){
	 * |		alert('onCollapse');
	 * |	}
	 * |</script>
	 * 		当TitlePane合拢时的回调方法。
	 */
	onCollapse:function(){
		
	},
	
	/**
	 * @summary:
	 * 		关闭TitlePane前的回调事件
	 * @description：
	 * 		返回false时将阻止TitlePane关闭
	 * @example:
	 * |<div dojoType="unieap.layout.TitlePane" onBeforeCollapse="onBeforeCollapse">
	 * |</div>
	 * |<script>
	 * |	function onBeforeCollapse(){
	 * |		return false;
	 * |	}
	 * |</script>
	 * 		此时TitlePane将不可关闭
	 * @return：
	 * 		{boolean}
	 */
	onBeforeCollapse:function(){
		return true;
	},
	
	/**
	 * @summary:
	 * 		打开TitlePane前的回调事件
	 * @description：
	 * 		返回false将阻止TitlePane打开
	 * @example:
	 * |<div dojoType="unieap.layout.TitlePane" onBeforeExpand="onBeforeExpand">
	 * |</div>
	 * |<script>
	 * |	function onBeforeExpand(){
	 * |		return false;
	 * |	}
	 * |</script>
	 * 		此时TitlePane将不可展开
	 * @return：
	 * 		{boolean}
	 */
	onBeforeExpand:function(){
		return true;
	},
	
	/**
	 * @summary:
	 * 		打开TitlePane的回调事件
	 * @example:
	 * |<div dojoType="unieap.layout.TitlePane" onExpand="onExpand">
	 * |</div>
	 * |<script>
	 * |	function onExpand(){
	 * |		alert('onExpand');
	 * |	}
	 * |</script>
	 * 		当TitlePane展开时的回调方法。
	 */
    onExpand:function(){
		
	},
    
    /**
     * @summary:
     * 		显示TitlePane的回调事件
     * @param: 
	 * 		{unieap.layout.TitlePane} pane 当前要展开的TitlePane
     * @example:
     * |<div dojoType="unieap.layout.TitlePane" onShow="onShow">
	 * |</div>
	 * |<script>
	 * |	function onShow(){
	 * |		alert('onShowing');
	 * |	}
	 * |</script>
     */
    onShow: function(pane){
		
    },
    
    /**
     * @summary:
     * 		设置标题
     * @param：
     * 		 {string} title
	 * @example:
	 * |<div id="titlePane" dojoType="unieap.layout.TitlePane">
	 * |</div>
	 * |<script>
	 * |	titlePane.setTitle("你好");
	 * |</script>
	 * 		设置TitlePane的标题为 '你好'	
     */
    setTitle: function(title){
		this.title=title;
		//解决bug U_EAP00021354
		dojo.attr(this.domNode,'title','');
		if(dojo.isFF) {
			 this.titleNode.textContent = title;
		}else{
			this.titleNode.innerText = title;
		}
    },
    
    /**
     * @summary:
     * 		取得TitlePane标题
     * @return：
     * 		{string} title
     * @example:
     * |var title = unieap.byId("titlePane").getTitle();
     */
    getTitle: function(){
        return this.title;
    },
	
	_onCollapse:function(){
		this.domNode.style.height = (this.titleBarNode.offsetHeight)+'px';
		this.notifyResize();
		unieap.fireEvent(this,this.onCollapse,[]);
	},
	
	_onExpand:function(){
		dojo.style(this.domNode,"height",this.height);
		this.notifyResize();
		unieap.fireEvent(this,this.onExpand,[]);
	},
	
	_onBeforeCollapse : function(){
		return unieap.fireEvent(this,this.onBeforeCollapse,[]);		
	},
	
	_onBeforeExpand : function(){
		return unieap.fireEvent(this,this.onBeforeExpand,[]);
	}
});
dojo.provide("unieap.layout.AdaptivePane");
dojo.require("unieap.layout.Container");
dojo.declare("unieap.layout.AdaptivePane", [unieap.layout.Container], {
	/**
     * @declaredClass:
     * 		unieap.layout.AdaptivePane
	 * @superClass:
	 * 		unieap.layout.Container
     * @summary:
     * 		自适应组件的内容面板
     * 		AdaptivePane如果设置autoHeight=true，则此面板的height只能设置为百分比形式。
     * 		如果没有设置autoHeight，此面板高度的height可以设置为任意格式
     * @classDescription:
     *		位于自适应容器内部，用作某一显示区域内容的展示
	 */
	
	//配置属性接口
	UserInterfaces : dojo.mixin({
		autoHeight : "boolean",
		marginTop : "number",
		marginBottom : "number",
		getHeight : "function",
		setHeight : "function",
		isAutoHeight : "function"
	},
	unieap.layout.Container.prototype.UserInterfaces),
	
	/**
	 * @summary：
	 * 		是否是自适应的容器
	 * @description：
	 * 		自适应容器可以自动撑满父容器剩下的高度空间，同时可以存在多个自适应容器根据规则自动分配高度
	 * @type：
	 * 		{boolean}
	 * @default：
	 * 		false
	 */
	autoHeight : false,
	
	/**
	 * @description:
	 * 		容器的上边距（不能和前一个容器的marginBottom同时使用）
	 * @type:
	 * 		{number}
	 * @default:
	 * 		0
	 */
	marginTop : 0,
	
	/**
	 * @description:
	 * 		容器的下边距（不能和下一个容器的marginTop同时使用）
	 * @type:
	 * 		{number}
	 * @default:
	 * 		0
	 */
	marginBottom : 0,
	
	postCreate:function(){
		dojo.addClass(this.containerNode,"adaptivepane");
		dojo.style(this.containerNode,{
			'marginTop': this.marginTop +"px",
			'marginBottom':this.marginBottom + "px"
		});
		this.initContainer();
	},
	
	/**
	 * @summary:
	 * 		获取容器的高度
	 * @return:
	 * 		{number}
	 * @example:
	 * |var height = unieap.byId('adaptivePane1').getHeight();
	 */
	getHeight : function(){
		if(this.isAutoHeight()){
		    var x = isNaN(this.height) || this.height <=0 ? "auto": this.height;

			return x == "auto" ? 100 : Number.parseInt(x);
		}
		var h = 0;
		if(this.height == "auto"){
			for(var i=0,n;(n=this.containerNode.childNodes[i]);i++){
				//不是注释、script、style 节点 ，在IE7里这些节点的offsetHeight不为0  
				//for 社保
				 if(n.nodeType && n.nodeType != 8 && n.tagName!='SCRIPT'&&n.tagName!='STYLE'){
				 	if(n.className && n.className.indexOf("fold-form-query")>=0){
				 	//	折叠筐不占高度
					}else{
                        //2018.7.4 为查询块增加上下间距
                        if(n.className && n.className.indexOf("limit_buttons")>=0){
                            $(".limit_buttons").css("padding-bottom","4px");
                        }
                        h+=(n.offsetHeight || 0);
                        if(n.className && n.className.indexOf("query_buttons")>=0 && n.offsetHeight>0){
                        	h=h-28;
                        	/*没有limit_buttons 情况下增加高度*/
                        	if($(this.domNode).find(".limit_buttons").length===0){
								h= h+6;
							}
                        }
					}
	              }
			}
			
			dojo.style(this.containerNode,"height",h+"px");
		}
		else{
			// 2020/2/12 by majian1
			if(this.height == '311px'){
				this.height = '132px';
			}
			if(this.height == '132px' ){
				dojo.style(this.containerNode,"height","auto");
			}
			h = this.containerNode.offsetHeight;
		}
		
		return h;
	},
	
	/**
	 * @summary:
	 * 		设置容器的高度
	 * @param:
	 * 		{String} height 面板高度
	 * @description:
	 * 		设置AdaptivePane的高度前，请确认此面板是否为autoHeight的，如果是，则只接受百分比形式的高度
	 * 		如果不是，可以设置任意形式的高度
	 * @example:
	 * |unieap.byId('adaptivePane1').setHeight("500px");
	 * @example:
	 * |var pane = unieap.byId('adaptivePane1');
	 * |if(pane.isAutoHeight()){
	 * |	pane.setHeight("50%");
	 * |} else {
	 * |	pane.setHeight(200);
	 * |}
	 */
	setHeight : function(height){
		this.height = height;
		dojo.style(this.domNode,"height",this._convertNumber(this.height));
	},
	
	/**
	 * @summary:
	 * 		判断本自适应面板是否为自适应的
	 * @return:
	 * 		{boolean} true表示本面板是自适应的，false表示本面板不是自适应的
	 * @example:
	 * |unieap.byId('adaptivePane1').isAutoHeight()
	 */
	isAutoHeight : function(){
		return this.autoHeight;
	}
});
dojo.provide("unieap.layout.AdaptiveContainer");
dojo.require("unieap.layout.Container");
dojo.require("unieap.layout.AdaptivePane");
dojo.declare("unieap.layout.AdaptiveContainer", [unieap.layout.Container], {
	/**
     * @declaredClass:
     * 		unieap.layout.AdaptiveContainer
     * @summary:
     * 		自适应组件
     * 		自适应容器中，可以放入多个AdaptivePane，每个AdaptivePane都可以设置autoHeight，
     * 		对于没有设置autoHeight的AdaptivePane，其中的内容必须放在一个容器中（例如：ContentPane、TitlePane等）。
     * 		自适应容器高度分配的原则是：不能自适应的AdaptivePane占有固定高度，剩余页面高度按比例分配给自适应面板
     * 		例如：页面中有2个自适应面板，一个设置为100%，令一个设置为50%，
     * 		则页面高度除去不能自适应高度的面板后，将按照2:1的比例分配剩余高度
     * @classDescription:
     *		自适应容器自动撑满高度
     * @superClass:
	 * 		unieap.layout.Container
     * @example:
	 * |<div id="AdaptiveContainer" dojoType="unieap.layout.AdaptiveContainer">
	 * |	<div dojoType="unieap.layout.AdaptivePane">
	 * |		<div dojoType="unieap.layout.TitlePane" title="titlepane" >
	 * |			固定高度1
	 * |		</div>	
	 * |	</div>
	 * |	<div dojoType="unieap.layout.AdaptivePane">
	 * |		<div dojoType="unieap.layout.TitlePane" title="titlepane" >
	 * |			固定高度2
	 * |		</div>	
	 * |	</div>
	 * |	<div dojoType="unieap.layout.AdaptivePane" autoHeight="true">
	 * |		自适应内容
	 * |	</div>
	 * |	<div dojoType="unieap.layout.AdaptivePane">
	 * |		<div dojoType="unieap.layout.TitlePane" title="titlepane" >
	 * |			固定高度3
	 * |		</div>	
	 * |	</div>
	 * | </div>	
     */

	/**
	 * @summary：
	 * 		设置容器的高度
	 * @type：
	 * 		{string}
	 * @default：
	 * 		"100%"
	 */
	height : "100%",
	
    postCreate:function(){
		dojo.addClass(this.containerNode,"adaptivecontainer");
		this.initContainer();
	},
    //重写父类设置容器大小的方法
	resizeContainer : function(){
		if(null == this.domNode) return;
		this._resizeChildren();
	},
	
	//通知执行自适应容器大小变化的方法，一般由某一子项发起
	notifyParentResize : function(child){
		this._resizeChildren(child);
	},
	
	//重新设置各个子项的大小
	_resizeChildren : function(c){
		
		/*iframe下body高度渲染不对时重置*/
		if(document.body.clientHeight < $(document).height()){
			document.body.style.height=$(document).height()+"px";
		}
		var children = this.getChildrenContainer(),
			leftHeight = this.containerNode.clientHeight,
			fixed = [], 
			nofixed = [],
			percent = 0;
		if(leftHeight <= 0)	return ;
		for(var i=0,child;i < children.length;i++){
			child=children[i];
			if(child.isHidden()) continue;
			if(child.isAutoHeight && child.isAutoHeight()){
				nofixed.push(child);
				percent += child.getHeight();
			}
			else{
				fixed.push(child);
			}
			leftHeight = leftHeight -  (child.marginTop || 0) - (child.marginBottom || 0);
		}
		//处理非自适应部分容器
		for(var i=0,child;i<fixed.length;i++){
			child = fixed[i];
			if (c != child) {
				child.resizeContainer();
			}
			leftHeight = leftHeight - child.getHeight();
			if(leftHeight<0) {
				for (var n=1;i+n<fixed.length;n++) {
					fixed[i+n].getHeight();//更新高度
				}
				return;
			}
		}
		//处理自适应部分容器
		for(var i=0,child;i<nofixed.length;i++){
			child = nofixed[i];
			var height =  Math.floor(leftHeight*child.getHeight()/percent);
			child.setHeight(height);
			child.resizeContainer();
		}
	}
});
dojo.provide('unieap.layout.TabScrollProvider');
/*
 * 为Tab容器提供滚动条按钮和菜单按钮
 */
dojo.declare('unieap.layout.TabScrollProvider',null,{
	
	isShowing: false,
	
	constructor: function(params) {
		dojo.mixin(this,params);
		this.connects = [];
	},
	
	//计算是否出现滚动按钮和菜单按钮
	calculateScroll : function() {
		if(this.widget.tabPosition == "top" || this.widget.tabPosition == "bottom"){
			//横向滚动条
			var contentWidth = this.widget.containerNode.offsetWidth;
			var tabsWidth = this.widget._getTabWidth();
			if (contentWidth<tabsWidth||contentWidth==0) {
				this.showScroll();
			} else {
				this.hideScroll();
			}
		}else{
			//纵向滚动条
			var contentHeight = this.widget.containerNode.offsetHeight;
			var tabsHeight = this.widget._getTabHeight();
			if (contentHeight<tabsHeight||contentHeight==0) {
				this.showScroll();
			} else {
				this.hideScroll();
			}
		}
	},
	
	showScroll: function() {
		var pos = this.widget.tabPosition.charAt(0).toUpperCase() + this.widget.tabPosition.substr(1).replace(/-.*/, "");
		if(this.widget.tabPosition == "top" || this.widget.tabPosition == "bottom"){
			if (!this.leftNode) {
				this.leftNode=dojo.create('div',{'class':'tabward iconfont icon-zuojiantou'},this.widget.tablistContainer,'first');
				dojo.addClass(this.leftNode,'eapLeft'+pos);
				this.connects.push(dojo.connect(this.leftNode,'onclick',this,'leftward'));
			}
			if(!this.rightNode){
				this.rightNode=dojo.create('div',{'class':'tabward iconfont icon-youjiantou'},this.widget.tablistContainer,'first');
				dojo.addClass(this.rightNode,'eapRight'+pos);
				this.connects.push(dojo.connect(this.rightNode,'onclick',this,'rightward'));
			}
			dojo.style(this.leftNode,'display','block');
			dojo.style(this.rightNode,'display','block');
			var l=dojo.style(this.widget.scrollingNode,'left');
			if(l==0){
				this.widget.scrollingNode.style.left="0px";
			}
		}else{
			if (!this.upNode) {
				this.upNode=dojo.create('div',{'class':'tabward'},this.widget.tablistContainer,'first');
				dojo.addClass(this.upNode,'eapUp'+pos);
				this.connects.push(dojo.connect(this.upNode,'onclick',this,'upward'));
			}
			if(!this.downNode){
				this.downNode=dojo.create('div',{'class':'tabward'},this.widget.tablistContainer,'first');
				dojo.addClass(this.downNode,'eapDown'+pos);
				this.connects.push(dojo.connect(this.downNode,'onclick',this,'downward'));
			}
			dojo.style(this.upNode,'display','block');
			dojo.style(this.downNode,'display','block');
			var t=dojo.style(this.widget.scrollingNode,'top');
			if(t==0){
				this.widget.scrollingNode.style.top="10px"
			}
		}
		if(!this.menuNode){
			this.menuNode=dojo.create('div',{'class':'tabward'},this.widget.tablistContainer,'first');
			console.log(pos);
			if(pos == 'Top'){ //如果是top就换一个icon
				dojo.addClass(this.menuNode,'iconfont icon-pulldown');
			}else{
				dojo.addClass(this.menuNode,'eapMenu'+pos);
			}
			this.connects.push(dojo.connect(this.menuNode,'onclick',this,'menuward'));
		}
		dojo.style(this.menuNode,'display','block');
		
		this.isShowing=true;
	},
	
	hideScroll: function() {
		if(this.leftNode){
			dojo.style(this.leftNode,'display','none');
		}
		if(this.rightNode){
			dojo.style(this.rightNode,'display','none');
		}
		if(this.upNode){
			dojo.style(this.upNode,'display','none');
		}
		if(this.downNode){
			dojo.style(this.downNode,'display','none');
		}
		if(this.menuNode){
			dojo.style(this.menuNode,'display','none');
		}
		this.widget.scrollingNode.style.left="0px";
		this.widget.scrollingNode.style.top="0px";
		this.isShowing=false;
	},
	
	//向左滚动
	leftward:function(){
		var l=dojo.style(this.widget.scrollingNode,'left');
		l=l+100;
		if(l>0){
			l=10;
		}
		this.scrollLeft(l);
	},
	
	//向右滚动
	rightward:function(){
		var l=dojo.style(this.widget.scrollingNode,'left');
		l=(l-100);
		var t=this.widget._getTabWidth();
		if((l+t)<=0){
			l=10;
		}
		this.scrollLeft(l);
	},
	
	//向上滚动
	upward : function(){
		var t=dojo.style(this.widget.scrollingNode,'top');
		t=t+100;
		if(t>0){
			t=10;
		}
		this.scrollTop(t);
		
	},
	//向下滚动
	downward : function(){
		var t=dojo.style(this.widget.scrollingNode,'top');
		t=(t-100);
		var h=this.widget._getTabHeight();
		if((h+t)<=0){
			t=10;
		}
		this.scrollTop(t);
	},

	needScroll:function(tab){
		if(this.widget.tabPosition == "top" || this.widget.tabPosition == "bottom"){
			var width=0,_tabwidth,tabwidth_,l=dojo.style(this.widget.scrollingNode,'left'),contentWidth = this.widget.containerNode.offsetWidth;
			dojo.some(this.widget.tablist.getChildren(), function(p) {
				if(tab.controlButton==p){
					_tabwidth=width;
				}
				width += p.getWidth();
				if(tab.controlButton==p){
					tabwidth_=width;
					return true;
				}
				return false;
			}, this);
			if( (_tabwidth+l) < 0 || (tabwidth_+l+37) > contentWidth ){
				this.scrollLeft((10 - _tabwidth));
			}
		}else{
			var height=0,_tabheight,tabheight_,t=dojo.style(this.widget.scrollingNode,'top'),contentHeight = this.widget.containerNode.offsetHeight;
			dojo.some(this.widget.tablist.getChildren(), function(p) {
				if(tab.controlButton==p){
					_tabheight=height;
				}
				height += p.getHeight();
				if(tab.controlButton==p){
					tabheight_=height;
					return true;
				}
				return false;
			}, this);
			if( (_tabheight+t) < 0 || (tabheight_+t+37) > contentHeight ){
				this.scrollTop((10 - _tabheight));
			}	
		}
	},
	
	
	scrollLeft : function(left) {
        this.widget.scrollingNode.style.left = left + 'px';
		// var anim =  dojo.animateProperty({
		// 		node: this.widget.scrollingNode,
		// 		duration: 700,
		// 		properties: {
		// 			left: left,
		// 			unit: "px"
		// 		}
		// 	});
		// anim.play();
	},
	
	scrollTop : function(top) {
		var anim =  dojo.animateProperty({
			node: this.widget.scrollingNode,
			duration: 700,
			properties: {
				top: top,
				unit: "px"
			}
		});
		anim.play();
	},
	//============================弹出菜单=============================
	menuward:function(e){
		dojo.require("unieap.menu.Menu");
	
		this.updateMenu();
		this.menu._openMyself(e);	
	},
	
	updateMenu:function(){
		if(!this.menu){
			this.menu=new unieap.menu.Menu({});
		}
		this.menu.destroy();
		this.menu=new unieap.menu.Menu({});
		var children=this.widget.getChildrenNotHidden();
		var widget=this.widget;
		var getFun=function (child){
			return function(){
				widget.selectChild(child);
			}	
		}
		
		var item,childMenu;
		for(var l=children.length,i=0;i<l;i++){
			if((i)%5==0){
				var itemLabel="Items "+(i+1)+"--"+(i+5);
				if(i+5>=l){
					itemLabel="Items "+(i+1)+"--"+(l)
				}
				childMenu=new unieap.menu.Menu();
				item=new  unieap.menu.PopupMenuItem({
					popup:childMenu,
					label:itemLabel
				});
				this.menu.addChild(item);
			}
			var child=children[i];
			var t=child.title;
			var f=getFun(child);
			childMenu.addChild(new unieap.menu.MenuItem({
				label:t,
				onClick:f
			}));
		}
		this.menu.startup();
	},
	
	destory: function() {
		if(this.menu){
			this.menu.destroy();
		}
		while(this.connects.length){
			dojo.disconnect(this.connects.pop());
		}
	}
});
dojo.provide("unieap.layout.TabController");

dojo.require("unieap.menu.Menu");
dojo.require("unieap.layout.Container");
dojo.require("dijit._Templated");
dojo.declare("unieap.layout.TabController", [unieap.layout.Container,dijit._Templated], {
	/*
     * @declaredClass:
     * 		unieap.layout.TabController
     * @summary:
     * 		控制Tab页控制类，增加TabButton、控制Tab页切换等
     */

	templateString: "<div wairole='tablist' dojoAttachEvent='onkeypress:onkeypress' dojoAttachPoint='containerNode'></div>",

	//tab标签的位置
	//	{"top"|"bottom"|"left-h"|"right-h"}	
	tabPosition: "top",
	
	buttonWidget: "unieap.layout._TabButton",
	//控制Tab页是否鼠标移动其上，能够自动切换到相应的页
	autoSwitchTab: "false",
	
	//关联的TabContainer
	container: null,
	
	
	postCreate: function(){
		dijit.setWaiRole(this.domNode, "tablist");
        if(!$(this.container.domNode).hasClass('step-style')){
            if(this.tabPosition == 'left-h' || this.tabPosition == 'right-h') {
                this.domNode.style.height="99999px"
            } else {
                this.domNode.style.width="99999px"
            }
		}

		this.pane2button = {};		// mapping from panes to buttons

		this._subscriptions=[
			dojo.subscribe(this.container.id+"-startup", this, "onStartup"),
			dojo.subscribe(this.container.id+"-addChild", this, "onAddChild"),
			dojo.subscribe(this.container.id+"-removeChild", this, "onRemoveChild"),
			dojo.subscribe(this.container.id+"-selectChild", this, "onSelectChild"),
			dojo.subscribe(this.container.id+"-hideTabButton", this, "hideTabButton"),
			dojo.subscribe(this.container.id+"-showTabButton", this, "showTabButton"),
			dojo.subscribe(this.container.id+"-setTabButtonTitle", this, "setTabButtonTitle"),
			dojo.subscribe(this.container.id+"-disableTabButton",this,"disableTabButton"),
			dojo.subscribe(this.container.id+"-enableTabButton",this,"enableTabButton"),
			dojo.subscribe(this.container.id+"-setTabButtonState",this,"setTabButtonState")
		];
	},
	/*
	 * container的addChild方法发布-addChild事件
	 * TabController订阅事件后执行该方法：创建对应的TabButton,绑定相应的事件
	 */
	onAddChild: function(/*Widget*/ page, /*Integer?*/ insertIndex){
		// summary:
		//		Called whenever a page is added to the container.
		//		Create button corresponding to the page.
		// tags:
		//		private

		// add a node that will be promoted to the button widget
		var refNode = dojo.doc.createElement("span");
		this.domNode.appendChild(refNode);
		// create an instance of the button widget
		var cls = dojo.getObject(this.buttonWidget);
		var button = new cls({tablist: this, page:page, autoSwitchTab: this.autoSwitchTab}, refNode);
		this.addChild(button, insertIndex);
		this.pane2button[page] = button;
		
		page.controlButton = button;	// this value might be overwritten if two tabs point to same container

		if(!this._currentChild){ // put the first child into the tab order
			this._currentChild = page;
		}
		//make sure all tabs have the same length
		if(!this.isLeftToRight() && dojo.isIE && this._rectifyRtlTabList){
			this._rectifyRtlTabList();
		}
	},

	_rectifyRtlTabList: function(){
		//summary: Rectify the width of all tabs in rtl, otherwise the tab widths are different in IE
		if(0 >= this.tabPosition.indexOf('-h')){ return; }
		if(!this.pane2button){ return; }

		var maxWidth = 0;
		for(var pane in this.pane2button){
			var ow = this.pane2button[pane].innerDiv.scrollWidth;
			maxWidth = Math.max(maxWidth, ow);
		}
		//unify the length of all the tabs
		for(pane in this.pane2button){
			this.pane2button[pane].innerDiv.style.width = maxWidth + 'px';
		}	
	}, 
	/*
	 * container.startup方法发布-startup事件
	 * TabController订阅事件后执行该方法 
	 * info {children:孩子节点数组，seleted:选中某节点}
	 */
	onStartup: function(/*Object*/ info){
		dojo.forEach(info.children, this.onAddChild, this);
		this.onSelectChild(info.selected);
	},
	
	/*
	 * container.removeChild方法发布-removeChild事件
	 * TabController订阅事件后执行该方法：移除container对应的TabButton
	 */
	onRemoveChild: function(/*Widget*/ page){
		if(this._currentChild === page){ this._currentChild = null; }
		
		var button = this.pane2button[page];
		if(button){
			button.destroy();
			delete this.pane2button[page];
		}
		if(page instanceof dijit._Widget)
			page.destroy();
	},
	
	/*
	 * container.selectChild(page)发布-selectChild事件，
	 * TabController订阅事件后执行该方法,处理TabButton的选中状态
	 */
	onSelectChild: function(/*Widget*/ page){

		if(!page){ return; }
		
		if(this._currentChild){
			//原TabButton取消选中状态
			var oldButton=this.pane2button[this._currentChild];
			
			oldButton.setSeleted(false);
		}
		//设置TabButton选中状态
		var newButton=this.pane2button[page];
		newButton.setSeleted(true);
		this._currentChild = page;
		dijit.setWaiState(this.container.containerNode, "labelledby", newButton.id);
		this._handleFocus(newButton);
	},
	//隐藏TabButton
	hideTabButton: function(page) {
		var button = this.pane2button[page];
		button.hide();
	},
	
	//显示TabButton
	showTabButton: function(page) {
		var button = this.pane2button[page];
		button.show();
	},
	
	//修改TabButton的title
	setTabButtonTitle: function(page,title) {
		var button = this.pane2button[page];
		button.label = title;
		button.containerNode.innerText = title;
	},
	
	//设置tab页Button不可编辑，标识本页不是当前页
	disableTabButton: function(page){
		var button = this.pane2button[page];
		button.disabled();
	},
	
	//设置tab页Button能够编辑，标识本页是当前页
	enableTabButton: function(page){
		var button = this.pane2button[page];
		button.enabled();
	},
	
	//设置tab页Button是否能够编辑
	setTabButtonState:function(page,state){
		var button = this.pane2button[page];
		button.setButtonState(state);
	},
	/*
	 * 处理焦点
	 */
	_handleFocus: function(button) {
		unieap.blurWidget();
	},
	
	//选中page
	onButtonClick: function(/*Widget*/ page){
		var flag = unieap.fireEvent(this, this.container.onBeforeSelectTab, [page]);
		if(false == flag){
			return;
		}
		var tabHelpData = {};
		if(page){
			tabHelpData.showTabId = page.id;
			tabHelpData.showTabTitle = page.title;
		}
		if(this.container.selectedChildWidget){
			tabHelpData.curTabId = this.container.selectedChildWidget.id;
			tabHelpData.curTabTitle = this.container.selectedChildWidget.title;
		}
		unieap.publish("_helpConsoleAddTabPane",tabHelpData);
		this.container.selectChild(page); 
	},
	
	//关闭page
	onCloseButtonClick: function(/*Widget*/ page){
		if(page.xhref){
			unieap.destroyDialogAndMenu(page);
			unieap.destroyWidgets(page.domNode);
		}
		this.container.closeChild(page);
//		var b = this.pane2button[this._currentChild];
//		if(b){
//			dijit.focus(b.focusNode || b.domNode);
//		}
	},
	
	// TODO: this is a bit redundant with forward, back api in StackContainer
	adjacent: function(/*Boolean*/ forward){
		// summary:
		//		Helper for onkeypress to find next/previous button
		// tags:
		//		private

		if(!this.isLeftToRight() && (!this.tabPosition || /top|bottom/.test(this.tabPosition))){ forward = !forward; }
		// find currently focused button in children array
		var children = this.getChildren();
		var current = dojo.indexOf(children, this.pane2button[this._currentChild]);
		// pick next button to focus on
		var offset = forward ? 1 : children.length - 1;
		return children[ (current + offset) % children.length ]; // dijit._Widget
	},

	onkeypress: function(/*Event*/ e){
		// summary:
		//		Handle keystrokes on the page list, for advancing to next/previous button
		//		and closing the current page if the page is closable.
		// tags:
		//		private
		if(this.disabled || e.altKey ){ return; }
		var forward = null;
		if(e.ctrlKey || !e._djpage){
			var k = dojo.keys;
			switch(e.charOrCode){
				case k.LEFT_ARROW:
				case k.UP_ARROW:
					if(!e._djpage){ forward = false; }
					break;
				case k.PAGE_UP:
					if(e.ctrlKey){ forward = false; }
					break;
				case k.RIGHT_ARROW:
				case k.DOWN_ARROW:
					if(!e._djpage){ forward = true; }
					break;
				case k.PAGE_DOWN:
					if(e.ctrlKey){ forward = true; }
					break;
				case k.DELETE:
					if(this._currentChild.closable){
						this.onCloseButtonClick(this._currentChild);
					}
					dojo.stopEvent(e);
					break;
				default:
					if(e.ctrlKey){
						if(e.charOrCode === k.TAB){
							this.adjacent(!e.shiftKey).onClick();
							dojo.stopEvent(e);
						}else if(e.charOrCode == "w"){
							if(this._currentChild.closable){
								this.onCloseButtonClick(this._currentChild);
							}
							dojo.stopEvent(e); // avoid browser tab closing.
						}
					}
			}
			// handle page navigation
			if(forward !== null){
				this.adjacent(forward).onClick();
				dojo.stopEvent(e);
			}
		}
	},
	
	destroy: function(){
		for(var pane in this.pane2button){
			this.onRemoveChild(pane);
		}
		dojo.forEach(this._subscriptions, dojo.unsubscribe);
		this.inherited(arguments);
	}

//	onContainerKeyPress: function(/*Object*/ info){
//		info.e._djpage = info.page;
//		this.onkeypress(info.e);
//	},
});

/*
 * TabButton实现类
 */
dojo.declare("unieap.layout._TabButton",[dijit._Widget, dijit._Templated],{

	baseClass: "tab",
	
	tabPosition:"top",
	
	//TabButton关联的container
	container: null,
	
	//标记tab页当前的选中状态
	selected: false,

	//标记tab页是否可关闭，对应CSS样式：tab页按钮上会有'X'
	closable: false,
	
	templateString: "<a href='javascript:void(0);' tabindex='-1' class='tab u-a-tab' dojoAttachPoint='focusNode' dojoAttachEvent='onclick:onButtonClick'>"+
						"<div  class='tabInnerDiv' dojoAttachPoint='innerDiv'>"+
							"<span dojoAttachPoint='containerNode' class='tabLabel'></span>"+
							"<span class='closeImage' dojoAttachPoint='closeNode' "+
								"dojoAttachEvent='onclick: onClickCloseButton'>"+
							"</span>"+
						"</div>"+
					"</a>",
								
	tabIndex: "-1",

	postCreate: function(){
		
		this.label = this.page.title;
		this.tabPosition = this.tablist.tabPosition;
		this.closable = this.page.closable;
		this.type=this.page.type;
		var aLabelClass = 'u-a-tab'+this.tabPosition.charAt(0).toUpperCase() + this.tabPosition.substr(1).replace(/-.*/, "");
		dojo.addClass(this.domNode,aLabelClass);
		
		if(this.closable){
			dojo.addClass(this.innerDiv, "unieapClosable");
			dojo.attr(this.closeNode,"title", RIA_I18N.layout.tabController.close);
		}else{
			this.closeNode.style.display="none";
		}
		
		this.inherited(arguments); 

		if(this.label){
			//存在-h需要字体纵向显示
			if(-1 != this.tabPosition.indexOf('-h')&&!dojo.isIE){
				//this.containerNode.innerHTML="<marquee scrollAmount='2'>"+this.label+"</marquee>";
				var labelArray = this.label.split("");
				var e;
				for(var i=0; i<labelArray.length; i++) {
					e = dojo.create('div',null,this.containerNode);
					e.textContent = labelArray[i];
				}
			}else{
				if(dojo.isIE) {
					this.containerNode.innerText = this.label;
				} else {
					this.containerNode.textContent = this.label;
				}
			}
		}
		dojo.setSelectable(this.containerNode, false);
		if(this.autoSwitchTab){
			this._handleSwitch = this.connect(this.focusNode, "mouseover", this.onMouseOver);
		}
		for(var i = 0; i < $(this.domNode).parents('.tabContainer:first').length; i++){
			if(this.type==('Step')){
				$(this.domNode).parents('.tabContainerTop:first').addClass("step-style");
				var newTabPaneIndex = parseInt($(this.domNode).index()) + 1;
				var newSpanLine = "<span class='numberListLine'></span>"; //步骤前加灰横线
				var newSapn = "<span class='numberList newTabPaneList"+newTabPaneIndex+"'>"+newTabPaneIndex+"</span>";
				$(this.domNode.firstChild).prepend(newSapn);
				if(newTabPaneIndex>1){ //第一个步骤不加灰横线
					$(this.domNode).append(newSpanLine);
				}
				if($(this.domNode).hasClass('tabPageSelected')){ //在tabpane上添加class为tabPageSelected，添加tab完成（打对勾）按钮
					var newSpanSelected = "<span class='tabPageSelected'></span>"; //添加 tab已完成按钮
					$(this.domNode).append(newSpanSelected);
				}
			}
		}
	},
	
	onMouseOver : function(evt){
		this.onButtonClick(evt);
	},
	
	/*
	 * 设置TabButon选中
	 */
	setSeleted: function(/*Boolean*/ bool){
		this.selected = bool;
		var cls=this.baseClass+"Checked";
		//设置选中样式
		if(bool) {
			dojo.addClass(this.domNode,cls);
			//ie6下不显示Tab按钮边框
			dojo.isIE==6&&dojo.style(this.domNode,"height",dojo.style(this.domNode,"height")+2);
			if(this.page.type==('Step')){
				$(this.domNode).parents('.step-style').find('.numberList').removeClass('cur');
				$(this.domNode).find('.numberList').addClass('cur');
			}
		}else {
			if(dojo.isIE==6&&dojo.hasClass(this.domNode,cls)){
				dojo.style(this.domNode,"height",dojo.style(this.domNode,"height")-2);
				dojo.style(this.domNode,'backgroundColor','white')
			}
			dojo.removeClass(this.domNode,cls);
		}	
	},

	/*
	 * 在TabController onAddChild方法里把onClick方法绑定了onButtonClick
	 */
	onButtonClick: function(/*Event*/ evt){
		if(dojo.attr(this.domNode,'disabled')){    
	        return false;//阻止点击事件  
	    }     
//		if(dojo.isIE&&this.domNode.setActive){
//			try{
//				this.domNode.setActive();
//			}catch(e){
//				
//			}
//		}
		//调用 TabController 方法里的
		this.tablist.onButtonClick(this.page);
	},
	//当closable=true时，点击'X'触发该方法，方法不应该被覆盖，可以connect
	//Note that you shouldn't override this method, but you can connect to it.
	onClickCloseButton: function(/*Event*/ evt){
		
		if(dojo.hasClass(this.closeNode,"loadingtab-img")){
			dojo.stopEvent(evt);
			return;
		}
		
		//禁止事件传播
		evt.stopPropagation();
		if(this._handleSwitch){
			this.disconnect(this._handleSwitch);
		}
		this.tablist.onCloseButtonClick(this.page);
	},
	
	//tab页关闭前触发的事件，return true tab页关闭
	onClose: function(){
		return true;		// Boolean
	},
	
	getWidth:function(){
		var size=dojo.marginBox(this.domNode);
		if(dojo.isWebKit){
			//margin;
			if(unieap.bootstrapMenu){
				if(dojo.hasClass(this.tablist.container.domNode,'menuTab')){
					return size.w+24;
				}else{
					return size.w+4;
				}
			}else{
				return size.w+4;
			}
		}
		return size.w;
	},
	
	getHeight : function(){
		var size=dojo.marginBox(this.domNode);
		return size.h;
	},
	
	hide: function() {
		dojo.style(this.domNode,'display','none');
	},
	
	show: function() {
		dojo.style(this.domNode,'display','inline-block');
	},
	disabled: function(){
		dojo.style(this.domNode,'color','gray');
		dojo.attr(this.domNode,'disabled',"disabled");
	},
	enabled: function(){
		dojo.style(this.domNode,'color','');
		dojo.removeAttr(this.domNode,'disabled');
	},
	setButtonState: function(state){
		if(state){
			dojo.style(this.domNode,'color','');
			dojo.removeAttr(this.domNode,'disabled');
			
		}else{
			dojo.style(this.domNode,'color','gray');
			dojo.attr(this.domNode,'disabled',"true");
		}
	}
});
dojo.provide("unieap.layout.TabContainer");
dojo.require("unieap.layout.TabController");
dojo.require("unieap.layout.Container");
dojo.require("dijit._Templated");

dojo.declare("unieap.layout.TabContainer", [unieap.layout.Container,dijit._Templated], {
    /**
     * @declaredClass:
     * 		unieap.layout.TabContainer
     * @superClass:
     * 		unieap.layout.Container
     * @summary:
     * 		Tab容器
     * @classDescription：
     * 		Tab容器，以ContentPane作为其子容器。
     * 		可以指定Tab的显示位置。
     * @example:
     * |<div dojoType="unieap.layout.TabContainer"   tabPosition="left-h">
     * |	<div dojoType="unieap.layout.ContentPane" title="Tab1">
     * |		Hello Tab1!
     * |	</div>
     * |	<div dojoType="unieap.layout.ContentPane" title="Tab2">
     * |		Hello Tab2!
     * |	</div>
     * |</div>
     *
     */
	
	//配置属性接口
	UserInterfaces : dojo.mixin({
		tabPosition : "string",
		hideTitle : "boolean",
		baseClass : "string",
		autoSwitchTab: "boolean",
		onBeforeSelectTab: "function",
		onAfterCloseChild: "function"
	},
	unieap.layout.Container.prototype.UserInterfaces),	
	
    templateString: "<div class='tabContainer'>" +
						"<div dojoAttachPoint='tabNest' class=\"tabContainer-nest\">" +
						"<div dojoAttachPoint='tablistContainer' class='tab-scrolling-container'>"+
							"<div class='tab-scrollingDiv'>"+
							"<div class='tab-scrolling' dojoAttachPoint='scrollingNode'>"+
								"<div dojoAttachPoint='tablistNode'></div>"+
							"</div></div>"+
						"</div>" +
    					"<div dojoAttachPoint='tablistSpacer' class='tabSpacer' style='dispaly:none;'></div>" +
    					"<div class='tabPaneWrapper'  dojoAttachPoint='containerNode' style='overflow:hidden;'></div>" +
						"</div>" +
    				"</div>",
	
	/**
	 * @summary:
	 * 		Tab标签的位置
	 * @description:
	 * 		控制Tab标签的位置,默认为上
	 * @default：
	 * 		"top"
	 * @type:
	 * 		{string}
	 * @enum:
	 * 		{"top"|"bottom"|"left-h"|"right-h"}		
	 */
    tabPosition: "top",
    //是否隐藏tab的title部分 默认为false（不隐藏）
    hideTitle: false,
    
    /**
	 * @summary:
	 * 		自动切换到鼠标移动到的tab页
	 * @description:
	 * 		控制Tab页是否鼠标移动其上，能够自动切换到相应的页
	 * @default：
	 * 		false
	 * @type:
	 * 		{boolean}
	 */
    autoSwitchTab : false,
	
    baseClass: "tabContainer",
	
	//_Widget里的startup()方法维护了此属性
//	_started: false,
	
	/**
	 * @summary:
	 * 		Tab的默认高度
	 * @default：
	 * 		"400px"
	 * @type:
	 * 		{string}		
	 */
	height:'400px',
	
	scroll:null,
	
	tablistsize:23+1 , //tab butotn的高度 + 1px tabSpacer
	
	getScroll: function() {
		return unieap.getModuleInstance(this,"scroll","unieap.layout.TabScrollProvider");
	},
    
	postCreate: function(){
		this.inherited(arguments);
		
		var pos = this.tabPosition.charAt(0).toUpperCase() + this.tabPosition.substr(1).replace(/-.*/, "");
		this.baseClass += pos;
		dojo.addClass(this.domNode, this.baseClass); 	//tabContainerTop
		dojo.addClass(this.tablistContainer,'tab-scrolling-container'+pos);
		dojo.isIE!=6&&dojo.addClass(this.tablistSpacer,'tabSpacer'+pos);
		dojo.addClass(this.containerNode,'tabPaneWrapper'+pos);
		
        //创建TabController
        var TabController = dojo.getObject("unieap.layout.TabController");
        this.tablist = new TabController({
            id: this.id + "_tablist",
            tabPosition: this.tabPosition,
            container: this,
            autoSwitchTab : this.autoSwitchTab,
			style:"height:'100%'",
            "class": this.baseClass + "-tabs" ,//tabContainerTop-tabs
            onBeforeSelectTab: this.onBeforeSelectTab
        }, this.tablistNode);
        /*
         * 解决第一次展现页面时多个tab页面的信息瞬间显示在同一个页面的问题
         * U_EAP00019316
         */
        dojo.forEach(this.containerNode.children,function(child){
        	dojo.style(child,"display","none");
        },this);
        
        
        if(this.hideTitle){
        	dojo.style(this.tablistContainer,'display','none');
        } 
    },
    
    _setHideTitle:function(hide){
    	this.hideTitle = hide;
    	if(hide){
    		dojo.style(this.tablistContainer,'display','none');
//    		dojo.style(this.domNode,'paddingTop','0px');
    	}else{
    		dojo.style(this.tablistContainer,'display','block');
//    		dojo.style(this.domNode,'paddingTop','10px');
    	}
    	this.resizeContainer();
    },
    
	/**
	 * @summary:
	 * 		点击Tab页前触发的事件
	 * @param:
	 * 		{object} contentPane Tab页,目前只接收unieap.layout.ContentPane对象
	 * @return
	 * 		Boolean 返回false则不加载点击的Tab页
	 * @example:
	 * |<div dojoType="unieap.layout.TabContainer" id="tabcontainer" style="height:200px;" onBeforeSelectTab="fn">
	 * |function fn(contentPane){
	 * |	unieap.debug(contentPane);
	 * |    return false;
	 * |}
	 */
	onBeforeSelectTab: function(contentPane){
	},
	
	_setupChild: function(/* Widget */child){
        dojo.addClass(child.domNode, "tabPane");
		dojo.style(child.domNode, "overflow","auto");
		dojo.style(child.domNode, "position","relative");
		
		//去掉鼠标悬停时的title显示
		child.domNode.title = "";
		//add 修改孩子widget的_inTabContainer属性
		if("_inTabContainer" in child) {
			child._inTabContainer=true;
			child.tabContainer = this;
		} 
    },
    
   startup: function(){
		if(!this._started) {
			//目前此方法是空实现（wire up the tablist and its tabs ）
	        this.tablist.startup();	
			
			var children = this.getChildren();
			// 每个孩子page的初始化
			dojo.forEach(children, this._setupChild, this);
			dojo.some(children, function(child){
				if(child.selected){
					this.selectedChildWidget = child;
				}
				return child.selected;
			}, this);
			
			var selected = this.selectedChildWidget;
			if(!selected && children[0]){
				selected = this.selectedChildWidget = children[0];
				selected.selected = true;
			}
	
			//发布startup()事件
			dojo.publish(this.id+"-startup", [{children: children, selected: selected}]);
			
			this.layout();
			//执行选中某节点时会进行resizeContainer
			if(selected) {
				this._showChild(selected);
			}
			this._started = true;
			for(var i=0; i<children.length; i++){
				if(children[i].hidden){
					this.hideTabButton(children[i]);
				}
				/*
				 * @author
				 * 		zhengh
				 * @sumarry
				 * 		初始化Tab容器时，将enabled属性为false的Tab页设置为不可编辑
				 */
				if(!children[i].enabled){
					this._disableTabButton(children[i]);
				}
			}
		}
		this.inherited(arguments);
    },
	
	resizeContainer: function() {
		if(null == this.domNode) return;
		this.resize();
		this.resizeChildrenContainer();
	},
	
	notifyParentResize: function() {
	},
	
	resize: function() {
		this.layout();
	},
	
	layout: function() {
		var paddingTop = dojo.style(this.domNode,'paddingTop')+1;
		this.tablistsize = (this.hideTitle ? paddingTop : (dojo.style(this.tablistContainer,'height')+ dojo.style(this.tablistContainer,'marginBottom') +paddingTop));
		if(this.domNode.offsetHeight == 0) { return;}
		this._calculaBorder();
		var pos = this.tabPosition.replace(/-.*/, "");
		if(pos == 'left' || pos == 'right') {
//			this.containerNode.style.width = this.domNode.clientWidth - this.tablistsize + 'px';
			var h = this._adjustSize(this.domNode.clientHeight - 2*this.borderSize);
			this.containerNode.style.height = h;
			this.tablistContainer.style.height = h;
		} else if(pos == 'bottom') {
			dojo.place(this.tablistContainer,this.tabNest,'last');
			dojo.place(this.tablistSpacer,this.tablistContainer,'before');
			if(this.height!="auto"){
				this.containerNode.style.height = this._adjustSize(this.domNode.clientHeight - this.tablistsize);
			}
		} else { // top
			if(this.height!="auto"){
				this.containerNode.style.height = this._adjustSize(this.domNode.clientHeight - this.tablistsize - this.borderSize);
			}
		}
		
		//如果contentPane没设置高度，则高度为100%
		if(this.height!="auto"&&this.selectedChildWidget && this.selectedChildWidget instanceof unieap.layout.Container) {
			this.selectedChildWidget.setHeight('100%');
		} 
		
		this.getScroll().calculateScroll();
	},
	
	
	// 校正计算值
	_adjustSize: function(size) {
		if(size < 0) {
			return '0px';
		} else {
			return size + 'px';
		}
	},
	
	_calculaBorder: function() {
		//CSS1Compat  引DOCTYPE
		//BackCompat  未引DOCTYPE
		if(dojo.isIE && dojo.doc.compatMode == "BackCompat") {//IE下，在不引DOCTYPE的情况下，border不占宽度
			this.borderSize = 0;
		} else {
			this.borderSize = 1;
		}
	},
	
	/**
	 * @summary:
	 * 		增加一个Tab页
	 * @param:
	 * 		{object} page Tab页,目前只接收unieap.layout.ContentPane对象
	 * @param:
	 * 		{object} insertIndex 插入的位置
	 * @param:
	 * 		{boolean} needselected 是否增加一个Tab页后就选择该Tab页，默认选中
	 * @example:
	 * |unieap.byId('createTab').addChild(new unieap.layout.ContentPane({
	 * |	title: "新增的Tab页"
	 * |}));
	 */
	addChild:function(page,insertIndex,needSelected){
		//目前只接受ContentPane作为Tab页的Child
		if (!page instanceof unieap.layout.ContentPane) {
			return;
		}
		typeof(needSelected)=='undefined'&&(needSelected=true);
		needSelected=!!needSelected
		page._inTabContainer=true;
		if(this.getIndexOfChild(page)!=-1){
			this.selectChild(page)
		}else{
			this.inherited(arguments);
			if(this._started){
				dojo.publish(this.id+"-addChild", [page, insertIndex]);
				this.layout();
				//选中新增page
				if(needSelected){
					this.selectChild(page);
				}else{
					dojo.removeClass(page.domNode, "unieapVisible");
					dojo.addClass(page.domNode, "unieapHidden");
				}
			}
		}
	},
	/**
	 * @summary:
	 * 		删除一个Tab页
	 * @param:
	 * 		{object} page Tab页,目前只接收unieap.layout.ContentPane对象
	 * @example:
	 * |var pane = unieap.byId('aContentPane');
	 * |unieap.byId('aTabContainer').removeChild(pane);
	 */
	removeChild: function(/*Widget*/ page){
		if(page.xhref){
			unieap.destroyDialogAndMenu(page);
			unieap.destroyWidgets(page.domNode);
		}
		// Overrides Container.removeChild() to do layout and publish events
		this.inherited(arguments);
		
		// If we are being destroyed than don't run the code below (to select another page), because we are deleting
		// every page one by one
		if(this._beingDestroyed){ return; }

		if(this._started){
			// this will notify any tablists to remove a button; do this first because it may affect sizing
			dojo.publish(this.id+"-removeChild", [page]);

			this.getScroll().calculateScroll();
		}
		//如果被删除节点是当前选中节点，在删除后将TabContainer第一个子节点选中
		if(this.selectedChildWidget === page){
			this.selectedChildWidget = undefined;
			if(this._started){
				var children = this.getChildrenNotHidden();
				if(children.length){
					this.selectChild(children[0]);
				}
			}
		}
	},
	
	/**
	 * @summary:
	 * 		选择某个Tab页
	 * @description
	 * 		注意参数不是index,而是contentPane对象
	 * @param: 
	 * 		{object} page contentPane对象
	 * @example:
	 * |var contentPane = unieap.byId("contentpane1");
	 * |unieap.byId("tabContainer").selectChild(contentPane);
	 */
	selectChild:function(page){
		//可以接受id或JS对象
		if(dojo.isString(page))
			page = unieap.byId((this._rootID||"")+page);
		else
			page = unieap.byId(page);
		//隐藏的page，不能选中
		if(page.hidden == true) {
			return;
		}
		if(this.selectedChildWidget != page){
			var oldpage = this.selectedChildWidget;
			this.selectedChildWidget = page;
			this._transition(page, oldpage);
			dojo.publish(this.id+"-selectChild", [page]);
		}
		this.getScroll().isShowing&&this.getScroll().needScroll(page);
	},
	
	/**
	 * @summary:
	 * 		得到当前选中的Tab页
	 * @return:
	 * 		{Object} 当前选中的Tab页，如果没有tab页，则返回null
	 * @example:
	 * |var contentPane = unieap.byId("contentpane1");
	 * |unieap.byId("tabContainer").selectChild(contentPane);
	 * |var selectPane = unieap.byId("tabContainer").getSelectedTab();
	 */
	getSelectedTab:function(){
		return this.selectedChildWidget||null;
	},
	
	_transition: function(/*Widget*/newWidget, /*Widget*/oldWidget){
		if(oldWidget){
			this._hideChild(oldWidget);
		}
		this._showChild(newWidget);
	},
	
	_showChild : function(page){
		var children = this.getChildren();
		page.selected = true;

		dojo.removeClass(page.domNode, "unieapHidden");
		dojo.addClass(page.domNode, "unieapVisible");
		if(page.pageId){
			var helptipBtn = unieap.byId("unieap_helptip_button");
			var helptip = dojo.byId("__UNIEAP_HELP__");
			if(helptipBtn && helptip){
				if(page.cases){
					helptipBtn.cases = this.cases;
					var size = page.cases.length;
					helptip.innerHTML = size;
					helptipBtn.setDisabled(false);
				}else{
					helptip.innerHTML = "0";
					helptipBtn.setDisabled(true);
				}
//				if(this.hasInit){
//					if(this.cases){
//						helptipBtn.cases = this.cases;
//						helptipBtn.setDisabled(false);
//					}else{
//						helptipBtn.setDisabled(true);
//					}
//				}else{
//					helptipBtn.getAllCaseByMenuId(page.pageId.substring(5),function(cases){
//						page.hasInit = true;
//						if(cases){
//							page.cases = cases;
//							helptipBtn.setDisabled(false);
//						}else{
//							helptipBtn.setDisabled(true);
//						}
//					});
//				}
			}
		}
		
		//在显示后计算
		this.resizeContainer();
		dojo.attr(page.domNode,'title','');
		if(page._onShow){
			page._onShow(); // trigger load in ContentPane
		}else if(page.onShow){
			page.onShow();
		}
	},
    
	_hideChild: function(/*Widget*/ page){
		page.selected = false;
		dojo.removeClass(page.domNode, "unieapVisible");
		dojo.addClass(page.domNode, "unieapHidden");

		if(page.onHide){
			page.onHide();
		}
	},
	
	closeChild: function(/*Widget*/ page){
		if(page.pageId && this.getSelectedTab() == page){
			var helptipBtn = unieap.byId("unieap_helptip_button");
			if(helptipBtn){
				helptipBtn.cases = null;
				var helptip = dojo.byId("__UNIEAP_HELP__");
//				var helptipNum = dojo.byId("__UNIEAP_HELP_NUM__");
				if(helptip){
					helptip.innerHTML = "0";
				}
//				helptipNum.innerHTML = "0";
				helptipBtn.setDisabled(true);
			}
		}
		var remove = page.onClose(this, page);
		if(remove){
			this.removeChild(page);
			// makes sure we can clean up executeScripts in ContentPane onUnLoad
			page.destroyRecursive();
		}
		this.onAfterCloseChild(this);
	},
	
	//这个时机才能判断关闭pane以后还有多少个孩子存在
	onAfterCloseChild: function(container){
		
	},
	
	//隐藏
	hideTabButton: function(page) {
		if(this._started){
			dojo.publish(this.id+"-hideTabButton", [page]);
			
			this.getScroll().calculateScroll();
			
			//如果被删除节点是当前选中节点，在删除后将TabContainer第一个子节点选中
			if(this.selectedChildWidget === page){
				var children = this.getChildrenNotHidden();
				if(children.length){
					this.selectChild(children[0]);
				}
			}
		}
	},
	
	//设置Tab页不可编辑
	_disableTabButton: function(page){
		if(this._started){
			dojo.publish(this.id+"-disableTabButton",[page]);
			this.getScroll().calculateScroll();
			//如果被设置不可编辑的节点是当前选中节点，在删除后将TabContainer第一个子节点选中
			if(this.selectedChildWidget === page){
				var children = this.getChildrenEnabled();
				if(children.length){
					this.selectChild(children[0]);
				}
			}
		}
	},
	
	/**
	 * @summary:
	 * 		设置某个Tab页可编辑
	 * @param: 
	 * 		{string} contentPane ID
	 * @example:
	 * |unieap.byId("tabContainer").enableTabButton(contentpane1);
	 */
	enableTabButton: function(contentPaneId){
		var page = unieap.byId((this._rootID||"")+contentPaneId);
		if(this._started){
			dojo.publish(this.id+"-enableTabButton",[page]);
			this.getScroll().calculateScroll();
		}
	},
	/**
	 * @summary:
	 * 		设置某个Tab按钮编辑状态
	 * @param: 
	 * 		{string} contentPane ID
	 * @param: 
	 * 		{boolean} 是否可编辑
	 * @example:
	 * |unieap.byId("tabContainer").setTabButtonState(contentpane1,false);
	 */
	setTabButtonState:function(contentPaneId,state){
		var page = unieap.byId((this._rootID||"")+contentPaneId);
		if(this._started){
			dojo.publish(this.id+"-setTabButtonState",[page,state]);
			this.getScroll().calculateScroll();
		}
	},
	
	showTabButton: function(page) {
		if(this._started){
			dojo.publish(this.id+"-showTabButton", [page]);
			this.getScroll().calculateScroll();
		}
	},
	
	setTabButtonTitle: function(page,title) {
		if(this._started){
			dojo.publish(this.id+"-setTabButtonTitle", [page,title]);
			this.getScroll().calculateScroll();
		}
	},
	
	/**
	 * @summary:
	 * 		动态设置ContentPane在Tab页中的隐藏
	 * @description：
	 * 		如果该Tab正在被选中，隐藏后会自动选中TabContainer中第一个Tab页
	 * @example:
	 * |<div dojoType="unieap.layout.TabContainer" id="containerId" style="width:400px;height:400px;">
	 * |	<div id="test1" dojoType="unieap.layout.ContentPane" title="测试一"></div>
	 * |	<div id="test2" dojoType="unieap.layout.ContentPane" title="测试二"></div>
	 * |</div>
	 * |<script>
	 * |	//设置Tab页隐藏
	 * |	function hideTab(){
	 * |		var tabContainer = unieap.byId('containerId');
	 * |		tabContainer.hideTab('test2');
	 * |	}
	 * |</script>
	 */
	hideTab: function(id){
		var contentPane = unieap.byId((this._rootID||"")+id);
		if(contentPane && contentPane._inTabContainer){
			contentPane.hidden = true;
			this.hideTabButton(contentPane);
		}
	},
	/**
	 * @summary:
	 * 		动态设置ContentPane在Tab页中的显示
	 * @param: 
	 * 		{string} Tab容器内的ContentPane Id
	 * 		{boolean} 显示后是否默认选中，默认为false，不选中
	 * @example:
	 * |<div dojoType="unieap.layout.TabContainer" id="containerId" style="width:400px;height:400px;">
	 * |	<div id="test1" dojoType="unieap.layout.ContentPane" title="测试一"></div>
	 * |	<div id="test2" dojoType="unieap.layout.ContentPane" title="测试二" hiden="true"></div>
	 * |</div>
	 * |<script>
	 * |	//显示测试二Tab页并选中
	 * |	function showTab(){
	 * |		var tabContainer = unieap.byId('containerId');
	 * |		tabContainer.showTab('test2',true);
	 * |	}
	 * |</script>
	 */
	showTab: function(id,select) {
		var contentPane = unieap.byId(this._rootID+id) ||unieap.byId(("")+id);
		if(contentPane._inTabContainer){
			contentPane.hidden = false;
			this.showTabButton(contentPane);
			if(select){
				this.selectChild(contentPane);
			}
		}
	},
	
	
	/**
	 * @summary:
	 * 		动态设置ContentPane在Tab页中的title
	 * @param: 
	 * 		{string} Tab所对应ContentPane Id
	 * 		{string} title
	 * @example:
	 * |<div dojoType="unieap.layout.TabContainer" id="containerId" style="width:400px;height:400px;">
	 * |	<div id="test1" dojoType="unieap.layout.ContentPane" title="测试1"></div>
	 * |	<div id="test2" dojoType="unieap.layout.ContentPane" title="测试2" hiden="true"></div>
	 * |</div>
	 * |<script>
	 * |	//修改测试二Tab页title
	 * |	function setTitle(){
	 * |		var tabContainer = unieap.byId('containerId');
	 * |		tabContainer.setTabTitle('test2',"修改");
	 * |	}
	 * |</script>
	 */
	setTabTitle: function(id,title) {
		var contentPane = unieap.byId((this._rootID||"")+id);
		if(contentPane._inTabContainer){
			contentPane.hidden = false;
			this.setTabButtonTitle(contentPane,title);
		}
	},
	
	getChildrenNotHidden: function() {
		var allChildren = this.getChildren();
		var children = [];
		for(var i=0; i<allChildren.length; i++){
			if(allChildren[i].hidden == false) {
				children.push(allChildren[i]);
			}
		}
		return children;
	},
	
	getChildrenEnabled: function(){
		var allChildren = this.getChildren();
		var children = [];
		for(var i = 0; i < allChildren.length; i++){
			if(allChildren[i].enabled){
				children.push(allChildren[i]);
			}
		}
		return children;
	},
	
	_adjacent: function(/*Boolean*/ forward){
		// summary:
		//		Gets the next/previous child widget in this container from the current selection.
		var children = this.getChildren();
		var index = dojo.indexOf(children, this.selectedChildWidget);
		index += forward ? 1 : children.length - 1;
		return children[ index % children.length ]; // dunieap_Widget
	},

	forward: function(){
		// summary:
		//		Advance to next page.
		this.selectChild(this._adjacent(true));
	},

	back: function(){
		// summary:
		//		Go back to previous page.
		this.selectChild(this._adjacent(false));
	},
	
	_getTabWidth : function() {
		var width = 0;
		dojo.forEach(this.tablist.getChildren(), function(p) {
			width += p.getWidth();
		}, this);
		return width;
	},
	
	
	_getTabHeight : function(){
		var height = 0;
		dojo.forEach(this.tablist.getChildren(), function(p) {
			height += p.getHeight();
		}, this);
		return height;				
	},
	
	
    destroy: function(){
        if (this.tablist) {
            this.tablist.destroy();
        }
		if(this.scroll) {
			this.scroll.destory();
		}
		this._beingDestroyed = true;
        this.inherited(arguments);
    }
});


dojo.provide("unieap.layout.StackContainer");
dojo.require("unieap.layout.Container");
dojo.require("dijit._Templated");
dojo.declare("unieap.layout.StackContainer",[unieap.layout.Container,dijit._Templated],{

	/**
	 * @declaredClass:
	 * 		unieap.layout.StackContainer
	 * @superClass:
	 * 		unieap.layout.Container
	 * @summary:
	 * 		类似于TabContainer,每次只显示一个Tab页，但是没有Tab标签
	 * 		StackContainer只接受ContentPane作为其子容器。
	 * @example:
	 * |<div dojoTYpe="unieap.layout.StackContainer">
	 * |	<div dojoType="unieap.layout.ContentPane">Yes</div>
	 * |	<div dojoType="unieap.layout.ContentPane">NO</div>
	 * |</div>
	 */
	
	templateString:'<div dojoAttachPoint="containerNode" class="stackcontainer"></div>',
	
	/**
	 * @summary:
	 * 		设置容器的高度
	 * @type:
	 * 		{string}
	 * @default:
	 * 		"400px"
	 * @example:
	 * |<div dojoTYpe="unieap.layout.StackContainer" style="border"1px solid #9b9b9b" height="450px">
	 * |	<div dojoType="unieap.layout.ContentPane">第一个页面</div>
	 * |	<div dojoType="unieap.layout.ContentPane">第二个页面</div>
	 * |</div>
	 */
	height:'400px',
	
	//获得临近的兄弟页面
	//forward为-1或者1,-1表示向前(左)，1表示向后(右)
	_adjacent: function(forward){
		var children = this.getChildren();
		var index = dojo.indexOf(children, this.selectedChildWidget);
		if(index==0&&forward==-1){ //如果当前页为第一页并且向前翻页
			return children[0]
		}else if(index==children.length-1&&forward==1){ //如果当前页为最后一页并且向后翻页
			return children[children.length - 1];
		}
		index += forward;
		return children[index];
	},
	
	/**
	 * @summary:
	 * 		隐藏当前显示的页面,显示下一个页面
	 * @description:
	 * 		如果达到最后一个页面,不执行任何操作
	 * @param:
	 * 		{object} params 如果下一个页面设置了href属性,控件会通过post提交params到该页面
	 * @example:
	 * |<script type="text/javascript">
	 * |	var stackContainer=unieap.byId('stackContainer');
	 * |	stackContainer.forward();
	 * |</script>
	 * @example:
	 * |<script type="text/javascript">
	 * |	var stackContainer=unieap.byId('stackContainer'),
	 * |		params={name:'psd',address:'unieap'};
	 * |	stackContainer.forward(params);
	 * |</script>
	 * |//在Action中获得name值为psd,address为neusoft
	 * |<% 
	 * |	String name=request.getParameter("name");
	 * |	String address=request.getParameter("address");
	 * |%>
	 */
	forward:function(params){
		this.selectChild(this._adjacent(1),params);
	},
	
	/**
	 * @summary:
	 * 		隐藏当前显示的页面,显示上一个页面
	 * @description:
	 * 		如果达到第一个页面,不执行任何操作
	 * @param:
	 * 		{object} params 如果上一个页面设置了href属性,控件会通过post提交params到该页面
	 * @example:
	 * |<script type="text/javascript">
	 * |	var stackContainer=unieap.byId('stackContainer');
	 * |	stackContainer.back();
	 * |</script>
	 * @example:
	 * |<script type="text/javascript">
	 * |	var stackContainer=unieap.byId('stackContainer'),
	 * |		params={name:'psd',address:'neusoft'};
	 * |	stackContainer.back(params);
	 * |</script>
	 * |//在Action中获得name值为psd,address为neusoft
	 * |<% String name=request.getParameter("name");
	 * |   String address=request.getParameter("address");
	 * |%>
	 */
	back:function(params){
		this.selectChild(this._adjacent(-1),params);
	},
	
	/**
	 * @summary:
	 * 		隐藏当前页面，显示指定的页面
	 * @param:
	 * 		{unieap.layout.ContentPane | string | number} child ContentPane对象或者id或者序号
	 * @param:
	 * 		{object} params 如果要显示的页设置了href属性,控件会通过post提交params到该页面
	 * @example:
	 * |<script type="text/javascript">
	 * |	var stackContainer=unieap.byId('stackContainer');
	 * |	stackContainer.selectChild("page2");
	 * |</script>
	 * @example:
	 * |<script type="text/javascript">
	 * |	var stackContainer=unieap.byId('stackContainer');
	 * |	stackContainer.selectChild("page2",{name:'psd'});
	 * |</script>
	 * |//在Action中获得name值为psd
	 * |<% String name=request.getParameter("name");%>
	 */
	selectChild: function(child,params){
		typeof(child)=='string'?(child=unieap.byId((this._rootID||"")+child)):
			(typeof(child)=='number'?(child=this.getChildren()[child]):(child=child));
		
		//如果child已经删除，直接返回
		if(this.getIndexOfChild(child)==-1) return;
		if(child instanceof unieap.layout.ContentPane && this.selectedChildWidget!=child){
			var oldPage = this.selectedChildWidget;
			this.selectedChildWidget=child;
			this._transition(oldPage,child,params);
		}
	},
	
	//转换页面,即隐藏旧的页面，显示新的页面
	_transition:function(oldWidget,newWidget,params){
		oldWidget&&this._hideChild(oldWidget);
		this._showChild(newWidget,params);
		//调整孩子节点的大小
		newWidget.resizeContainer();
	},
	
	//显示孩子页面
	_showChild:function(page,params){
		var children = this.getChildren();
//		page.isFirstChild = (page == children[0]);
//		page.isLastChild = (page == children[children.length-1]);
		page.selected = true;
		dojo.removeClass(page.domNode, "stackpage-hidden");
		dojo.addClass(page.domNode, "stackpage-visible");
		page._onShow(params);
	},
	
	//隐藏孩子页面
	_hideChild: function(page){
		page.selected=false;
		dojo.removeClass(page.domNode, "stackpage-visible");
		dojo.addClass(page.domNode, "stackpage-hidden");
		page.onHide&&page.onHide();
	},
	
	/**
	 * @summary:
	 * 		往StackContainer中增加一个页面
	 * @param:
	 * 		{unieap.layout.ContentPane} child 要增加的ContentPane对象
	 * @param:
	 * 		{boolean} needSelected 是否需要选中新增加的页面
	 * @example:
	 * |<script type="text/javascript">
	 * |	var stackContainer=unieap.byId('stackContainer');
	 * |	stackContainer.addChild(new unieap.layout.ContentPane({id:'newPage',href:'demo.jsp'}));
	 * |</script>
	 */
	addChild:function(child,needSelected){
		typeof(needSelected)=='undefined'&&(needSelected=true);
		if(!(child instanceof unieap.layout.ContentPane)) return
		needSelected=!!needSelected;
		//防止执行ContentPane的_onShow方法
		child._inTabContainer=true;
		this.inherited(arguments);
		var children=this.getChildren();
		if (this._started) {
			if(needSelected||children.length==1){
				this.selectChild(child);
			}else{
				dojo.addClass(child.domNode,'stackpage-hidden');
			}
		}
	},
	
	
	/**
	 * @summary:
	 * 		删除StackContainer中的一个页面
	 * @param:
	 * 		{unieap.layout.ContentPane|string|number} child ContentPane对象或者id或者序号
	 * @example:
	 * |<script type="text/javascript">
	 * |	var stackContainer=unieap.byId('stackContainer');
	 * |	stackContainer.removeChild('page1');
	 * |</script>
	 */
	removeChild:function(child){
		var children=this.getChildren();
		typeof(child)=='string'?(child=unieap.byId((this._rootID||"")+child)):
			(typeof(child)=='number'?(child=children[child]):(child=child));
			
			
		if(!(child instanceof unieap.layout.ContentPane)) return;
		this.inherited(arguments);
		
		//如果文件正在删除中……
		if(this._beingDestroyed){ return; }
		//如果被删除节点是当前选中节点，在删除后将第一个子节点选中
		
		if(this.selectedChildWidget === child){
			this.selectedChildWidget = null;
			this._started&&(children=this.getChildren())&&children[0]&&this.selectChild(children[0]);
		}
	},
	
	/**
	 * @summary:
	 * 		获得当前显示的页面对象
	 * @return:
	 * 		{unieap.layout.ContentPane|null}
	 * @example:
	 * |<script type="text/javascript">
	 * |	var stackContainer=unieap.byId('stackContainer'),
	 * |		activeChild=stackContainer.getSelectedChild();
	 * |	alert(activeChild.id); //获得当前显示的ContentPane的id
	 * |</script>
	 */
	getSelectedChild:function(){
		return this.selectedChildWidget;
	},
	
	//当前选中的孩子节点
	selectedChildWidget:null,
	
	
	postCreate:function(){
		this.initContainer();
	},
	
	//等待孩子执行结束
	startup:function(){
		if(this._started) return;
		var children=this.getChildren();
		this._started = true;
//		if(children.length==0) return;
		//显示某一个页面，隐藏其他页面
		dojo.forEach(children,function(child){
			if(child.selected&&!this.selectedChildWidget){
				this.selectedChildWidget=child;
			}else{
				dojo.removeClass(child.domNode,'stackpage-visible');
				dojo.addClass(child.domNode,'stackpage-hidden');
			}
			//在孩子页面的startup方法中不执行onShow方法
			child._inTabContainer=true;
		},this);
		
		//如果没有一个页面设置selected属性
		!this.selectedChildWidget&&children[0]&&(this.selectedChildWidget=children[0])&&(children[0].selected=true);
		
		//调用父类的startup方法
		this.inherited(arguments);
	},
	
	
	//通知本容器的子容器调整大小
	resizeContainer:function(){
		var selected = this.selectedChildWidget;
		if(selected && !this._hasBeenShown){
			this._hasBeenShown = true;
			this._showChild(selected);
		}
		this.inherited(arguments);
	},
	
	//如果用户调用本控件的notifyResize,将执行该方法
	notifyParentResize:function(){
		
	}
	
});


dojo.provide("unieap.layout.BorderPane");
dojo.require('unieap.layout.Container');

dojo.declare("unieap.layout.BorderPane",[unieap.layout.Container,dijit._Templated],{ 
	/**
     * @declaredClass:
     * 		unieap.layout.BorderPane
     * @summary:
     * 		方位布局组件内的方位面板
     * @description:
     * 		可以通过region属性，配置面板在BorderContainer中的方位，
     * 		当region="center"时，此面板为宽高自适应面板，不支持height,width,splitLine,fixed,minSize,maxSize,wrap属性
     * 		
	 */
	 
	//配置属性接口
	UserInterfaces : dojo.mixin({
		region : "string",
		title : "string",
		showTitleBar : "boolean",
		splitLine : "boolean",
		wrap : "boolean",
		reportStyle : "boolean",
		fixed : "boolean",
		scroll: "boolean",
		minSize : "string",
		maxSize : "string",
		onOpen : "function",
		onClose : "function"
	},
	unieap.layout.Container.prototype.UserInterfaces),
	 
	templateString:"<div class=\"borderPaneOuter\">"+
						"<div dojoAttachPoint='wrapNode' style=\"display:none\">"+
							"<a href='javascript:void(0);' dojoAttachPoint='wrapButton' class=\"u-border-wrapButton u-border-a\"></a>"+
						"</div>"+
						"<div dojoAttachPoint='splitNode'></div>"+
						"<div dojoAttachPoint='paneNode' class=\"borderPane\">"+
							"<div dojoAttachPoint='titleNode' class=\"titleNode\">" +
								"<a href='javascript:void(0);' dojoAttachPoint='titleButton' class=\"u-border-titleButton u-border-a\"></a>" +
								"<div class=\"u-border-titleText\" dojoAttachPoint='titleTextContainer' ><div dojoAttachPoint='titleText' class=\"u-border-titleText-Inner\"></div></div>" +
							"</div>"+
							"<div dojoAttachPoint='containerNode' style=\"width:100%;position:relative;\">"+
							"</div>"+
						"</div>"+
					"</div>",

	/**
	 * @summary:
	 * 		设置面板在方位布局容器内的方位
	 * @description:
	 * 		此属性必须配置
	 * @type:
	 * 		{string}
	 * @enum:
	 * 		{'top','bottom','center','left','right'}
     * @example:
	 * |<div id="bc" dojoType="unieap.layout.BorderContainer">
	 * |	<div dojoType="unieap.layout.BorderPane" region="top" height="20%">
	 * |		top面板内容
	 * | 	</div>
	 * |	<div dojoType="unieap.layout.BorderPane" region="center">
	 * |		center面板内容
	 * | 	</div>
	 * |</div>
	 */
	region:'',
	
	/**
	 * @summary:
	 * 		面板标题
	 * @type:
	 * 		{string}
	 * @example:
	 * |<div id="bc" dojoType="unieap.layout.BorderContainer">
	 * |	<div dojoType="unieap.layout.BorderPane" region="top" title="top" height="20%">
	 * |		top面板内容
	 * | 	</div>
	 * |	<div dojoType="unieap.layout.BorderPane" region="center" title="center">
	 * |		center面板内容
	 * | 	</div>
	 * |</div>
	 * 配置top面板标题为top,center面板标题为center
	 */
	title:'',
	
	/**
	 * @summary:
	 * 		面板是否显示标题条
	 * @description:
	 * 		false：不显示，true：显示，默认为true
	 * @type:
	 * 		{boolean}
	 * @example:
	 * |<div id="bc" dojoType="unieap.layout.BorderContainer">
	 * |	<div dojoType="unieap.layout.BorderPane" region="top" showTitleBar="false" height="20%">
	 * |		top面板内容
	 * | 	</div>
	 * |	<div dojoType="unieap.layout.BorderPane" region="center">
	 * |		center面板内容
	 * | 	</div>
	 * |</div>
	 * 配置top面板不显示标题条
	 */
	showTitleBar:true,
	
	/**
	 * @summary:
	 * 		面板是否显示分割条
	 * @description:
	 * 		false：不显示，true：显示，默认为true
	 * @type:
	 * 		{boolean}
	 * @example:
	 * |<div id="bc" dojoType="unieap.layout.BorderContainer">
	 * |	<div dojoType="unieap.layout.BorderPane" region="top" splitLine="false" height="20%">
	 * |		top面板内容
	 * | 	</div>
	 * |	<div dojoType="unieap.layout.BorderPane" region="center">
	 * |		center面板内容
	 * | 	</div>
	 * |</div>
	 * 配置top面板不显示分割条
	 */
	splitLine:true,
	
	/**
	 * @summary:
	 * 		面板是否可收缩
	 * @description:
	 * 		false：不可收缩，true：可收缩，默认为true
	 * 		收缩按钮显示在标题条上，wrap=true,需要showTitleBar=true为前提才能保证收缩功能可用
	 * 		此二属性默认均为true。
	 * @type:
	 * 		{boolean}
	 * @example:
	 * |<div id="bc" dojoType="unieap.layout.BorderContainer">
	 * |	<div dojoType="unieap.layout.BorderPane" region="top" wrap="false" height="20%">
	 * |		top面板内容
	 * | 	</div>
	 * |	<div dojoType="unieap.layout.BorderPane" region="center">
	 * |		center面板内容
	 * | 	</div>
	 * |</div>
	 * 配置top面板不可收缩
	 */
	wrap:true, 
	
	paneSize_h: -1,
	paneSize_w: -1,//记录pane的宽/高（收缩、展开时记录收缩前的宽，高）
	
	/**
	 * @summary:
	 * 		配置面板分割条是否可拖动
	 * @description:
	 * 		true:不可拖动，false：可拖动，默认可拖动，在显示分割条（splitLine=true）情况下生效。
	 * @type：
	 * 		{boolean}
	 * 
	 * @example:
	 * |<div id="bc" dojoType="unieap.layout.BorderContainer">
	 * |	<div dojoType="unieap.layout.BorderPane" region="top" fixed="true" height="20%">
	 * |		top面板内容
	 * | 	</div>
	 * |	<div dojoType="unieap.layout.BorderPane" region="center">
	 * |		center面板内容
	 * | 	</div>
	 * |</div>
	 * 配置top面板分割条不可拖动
	 */
	fixed:false,
	
	/**
	 * @summary:
	 * 		设置面板可拖动范围的最小边界
	 * @description:
	 * 		在面板可拖动情况下生效,只支持像素值，不支持百分比
	 * @type:
	 * 		{number|string}
	 * @example:
	 * |<div id="bc" dojoType="unieap.layout.BorderContainer">
	 * |	<div dojoType="unieap.layout.BorderPane" region="top" height="150px" minSize="100px" maxSize="200px">
	 * |		top面板内容
	 * | 	</div>
	 * |	<div dojoType="unieap.layout.BorderPane" region="center">
	 * |		center面板内容
	 * | 	</div>
	 * |</div>
	 * 配置top面板在拖动时，最小宽度100px，最大宽度200px		
	 */
	minSize:'23px',
	/**
	 * @summary:
	 * 		设置面板可拖动范围的最大边
	 * @description:
	 * 		在面板可拖动情况下生效，只支持像素值，不支持百分比
	 * @type:
	 * 		{number|string}
	 * @example:
	 * |<div id="bc" dojoType="unieap.layout.BorderContainer">
	 * |	<div dojoType="unieap.layout.BorderPane" region="left" width="150px" minSize="100px" maxSize="200px">
	 * |		left面板内容
	 * | 	</div>
	 * |	<div dojoType="unieap.layout.BorderPane" region="center">
	 * |		center面板内容
	 * | 	</div>
	 * |</div>
	 * 配置left面板在拖动时，最小宽度100px，最大宽度200px		
	 */
	maxSize:'10000px',
	
	/**
	 * @summary:
	 * 		面板默认宽度
	 * @description:
	 * 		
	 * @type:
	 * 		{string|number}	
	 */
	width:'100px',
	
	/**
	 * @summary:
	 * 		面板默认高度
	 * @description:
	 * 		
	 * @type:
	 * 		{string|number}	
	 */
	height:'100px',
	
	isShowing:true,
	
//	容器是否自动出现滚动条 

	scroll : true,
	
	borderSize: 1,
	splitLineSize: 5,
	wrapBarSize: 23+2,
	titleSize:23-1, //ff 下 margin-top:-1
	centerMinSize:50,
	
	//是否为报表定义的title样式 U_EAP00028721
	reportStyle: (typeof(unieap.widget.layout.borderPaneReportStyle)=="undefined") ? false : unieap.widget.layout.borderPaneReportStyle, 
	//父容器，BorderContainer
	borderContainer: null,
	
	_reverseRegion: function(region) {
		switch(region) {
			case 'left':
				return 'right';
			case 'right':
				return 'left';
			case 'top':
				return 'bottom';
			case 'bottom':
				return 'top';
			default:
				return region;
		}
	},
	
	_setDivBorder: function() {
		//CSS1Compat  引DOCTYPE
		//BackCompat  未引DOCTYPE
		if(dojo.isIE && dojo.doc.compatMode == "BackCompat") {//IE下，在不引DOCTYPE的情况下，border不占宽度
			this.borderSize = 0;
		} else {
			this.borderSize = 2 * this.borderSize;
		}
	},
	
	postCreate: function() {
		this.borderContainer = this.getParentContainer();
		if(this.borderContainer && this.borderContainer.noBorder){
			dojo.style(this.paneNode,"border","none");
			this.borderSize = 0;
			this.titleSize = 25;
		}
		this.addRegionStyle();
		
		this.inherited(arguments);
		
		if(this.borderContainer.wrap && this.wrap && this.region != 'center') {
			this.connects.push(dojo.connect(this.titleButton,'onclick',this,'_clickTitleButton'));
			this.connects.push(dojo.connect(this.wrapButton,'onclick',this,'_clickWrapButton'));
		}
		
		!this.borderContainer.fixed && !this.fixed && this.connects.push(dojo.connect(this.splitNode, 'onmousedown', this, '_startMove'));
		
		//将自己注册到Border容器
		
		this.borderContainer[this.region+'Pane'] = this;
		
		if(this.scroll){
			dojo.style(this.containerNode,'overflow','auto');
		}else{
			dojo.style(this.containerNode,'overflow','hidden');
		}
		//增加报表样式 U_EAP00028721
		if(this.reportStyle){
			dojo.removeClass(this.titleNode,'titleNode');
			dojo.addClass(this.titleNode,'titleNode-report');
			dojo.removeClass(this.titleTextContainer,'u-border-titleText');
			dojo.addClass(this.titleTextContainer,'u-border-titleText-report');
			dojo.style(this.titleText,'margin','0px');
		} 
	},
	
	layoutInner: function() {
		if(this.domNode.clientHeight == 0 || this.domNode.clientWidth == 0) {
			return;
		}
		
		if(this.region == 'top') {
			this.paneNode.style.height = this._adjustSize(this.domNode.clientHeight - this.splitLineSize - this.borderSize);//splitLine width:5px  paneNode border:2px
			dojo.place(this.splitNode,this.domNode,'last');
		} else if(this.region == 'bottom'){
			this.paneNode.style.height = this._adjustSize(this.domNode.clientHeight - this.splitLineSize - this.borderSize);
			dojo.place(this.splitNode,this.domNode,'first');
		} else if(this.region == 'left' || this.region == 'right') {	//left和right处理相同
			dojo.style(this.splitNode,'styleFloat',this._reverseRegion(this.region));
			this.paneNode.style.height = this._adjustSize(this.domNode.clientHeight - this.borderSize);
			this.wrapNode.style.height = this._adjustSize(this.domNode.clientHeight - this.borderSize);//如果收缩条显示，需要设置收缩条高度
		} else if(this.region == 'center') {
			this.paneNode.style.height = this._adjustSize(this.domNode.clientHeight - this.borderSize);
		}
		this.containerNode.style.height = this._adjustSize(this.paneNode.clientHeight - this.titleSize);
		
	},
	
	_adjustSize: function(size) {
		if(size < 0) {
			return '0px';
		} else {
			return size + 'px';
		}
	},
	
	resizeContainer: function() {
		if(null == this.domNode) return;
		this.resize();
		this.resizeChildrenContainer();
	},
	
	resize: function() {
		this.layoutInner();
	},
	
	//依据region为面板添加样式
	addRegionStyle: function() {
		
		this._setDivBorder();
		
		dojo.addClass(this.domNode,this.region+'BorderPane');
		
		this.title && this.setTitle(this.title);
		this.domNode.title = "";
		
		if(this.region != 'center' && this.wrap) {
			dojo.addClass(this.titleButton,'u-border-titleButton-' + this.region);
			dojo.addClass(this.wrapButton,'u-border-wrapButton-' + this.region);
		} else {
			dojo.style(this.titleButton,'display','none');
			dojo.style(this.wrapButton,'display','none');
		}
		
		if(this.region == 'top' || this.region == 'bottom') {
			dojo.addClass(this.splitNode,'u-border-splitterH');
			//先检查父容器是否是fixed，再检查自身是否是fixed
			!this.parentContainer.connects[0][0].fixed&&!this.fixed && dojo.style(this.splitNode,'cursor','n-resize');
			dojo.addClass(this.wrapNode,'u-border-wrapNodeH');
		} else if(this.region == 'left' || this.region == 'right') {
			dojo.addClass(this.splitNode,'u-border-splitterV');
			dojo.addClass(this.splitNode,'u-border-splitterV-'+this.region);//解决IE6下，垂直分割条白边的缺陷
			//先检查父容器是否是fixed，再检查自身是否是fixed
			!this.parentContainer.connects[0][0].fixed&&!this.fixed && dojo.style(this.splitNode,'cursor','w-resize');
			dojo.addClass(this.wrapNode,'u-border-wrapNodeV');
		}
		
		if(!this.borderContainer.splitLine || !this.splitLine) {//不显示面板分割条情况
			dojo.style(this.splitNode,'display','none');
			this.splitLineSize = 0
		}; 
		if(!this.borderContainer.showTitleBar || !this.showTitleBar) {//不显示标题条
			dojo.style(this.titleNode,'display','none');
			this.titleSize = 0;
		}
	},
	
	/**
	 * @summary:
	 * 		设置面板标题
	 * @param:
	 * 		{string}
	 * @example:
	 * |var pane = unieap.byId('leftPane');
	 * |pane.setTitle('面板');
	 */
	setTitle: function(title) {
		this.title = title;
		dojo.attr(this.domNode,'title','');
		if(dojo.isFF) {
			this.titleText.textContent = title;
		} else {
			this.titleText.innerText = title;
		}
	},
	
	//收缩 =========================================================
	_savePaneSize: function() {
		if( this.domNode.offsetHeight > 0) {
			this.paneSize_h = this.domNode.offsetHeight;
			this.paneSize_w = this.domNode.offsetWidth;
		} else {//如果在隐藏状态执行close,那么记录pane的配置宽高
			this.paneSize_h = this.domNode.style.height || this.height;
			this.paneSize_w = this.domNode.style.width || this.width;
		}
	},
	
	_clickTitleButton: function() {
		this.close();
	},
	
	_clickWrapButton: function() {
		this.open();
	},
	
	/**
	 * @summary:
	 * 		设置打开面板，即面板展开
	 * @example:
	 * |var pane = unieap.byId('leftPane');
	 * |pane.open();
	 */
	open: function() {
		if(!this.isShowing && unieap.fireEvent(this,this.onOpen,[])!= false) {
			dojo.style(this.paneNode,'display','block');
			dojo.style(this.wrapNode,'display','none');
			//计算恢复domNode的高度和宽度
			this._calculateOpenHW();
			this.isShowing = true;
			if(!this.fixed&&!this.parentContainer.connects[0][0].fixed) {//如果可拖动，加上cursor样式
				if(this.region == 'top' || this.region == 'bottom') {
					dojo.style(this.splitNode,'cursor','n-resize');
				} else if(this.region == 'left' || this.region == 'right') {
					 dojo.style(this.splitNode,'cursor','w-resize');
				}
			}
			this.notifyParentResize();
		}
	},
	
	//如果展开后的面板宽（高）+中间面板宽（高）+对面面板宽（高） < 当前容器宽（高） 则恢复展开前宽（高）
	//否则展开成收缩条大小
	_calculateOpenHW: function() {
		var _w = this.toRealValue(this.paneSize_w,this.borderContainer.domNode.offsetWidth);
		var _h = this.toRealValue(this.paneSize_h,this.borderContainer.domNode.offsetHeight);
		
		if(this.region == 'left' || this.region == 'right') {
			//对面面板的宽度
			var oppositeWidth =  this.borderContainer[this._reverseRegion(this.region)+'Pane'] ? 
								this.borderContainer[this._reverseRegion(this.region)+'Pane'].domNode.offsetWidth : 0;
			var afterOpenWidth = oppositeWidth + this.centerMinSize + _w;

			if(afterOpenWidth > this.borderContainer.domNode.offsetWidth) {
				dojo.style(this.domNode,'width',this.wrapBarSize + this.splitLineSize + 'px');
			} else {
				dojo.style(this.domNode,'width',_w + 'px');
			}
		} else if(this.region == 'top' || this.region == 'bottom') {
			
			var oppositeHeight = this.borderContainer[this._reverseRegion(this.region)+'Pane'] ?
								this.borderContainer[this._reverseRegion(this.region)+'Pane'].domNode.offsetHeight : 0;
			var afterOpenHeight = oppositeHeight + this.centerMinSize + _h;
			
			if(afterOpenHeight > this.borderContainer.domNode.offsetHeight) {
				dojo.style(this.domNode,'height',this.wrapBarSize + this.splitLineSize + 'px');
			} else {
				dojo.style(this.domNode,'height',_h + 'px');
			}
		}
	},
	
	//解决U_EAP00008299
	toRealValue: function(inValue,containerSize) {
		if(isNaN(inValue)) {
			if(inValue.indexOf('%') != -1) {
				return inValue = Math.floor(containerSize *  parseInt(inValue) / 100);
			}
			if(inValue.indexOf('px') != -1){
				return parseInt(inValue);
			}
		}
		return inValue;
	},
	
	/**
	 * @summary:
	 * 		设置关闭面板，即面板收缩
	 * @example:
	 * |var pane = unieap.byId('leftPane');
	 * |pane.close();
	 */
	close: function() {
		if(this.isShowing && unieap.fireEvent(this,this.onClose,[])!= false) {
			this._savePaneSize(); //记录收缩前的domNode宽高
			dojo.style(this.paneNode,'display','none');
			dojo.style(this.wrapNode,'display','block');
			if(this.region == 'top' || this.region == 'bottom') {
				dojo.style(this.domNode,'height',this.wrapBarSize+this.splitLineSize+'px'); //wrapNode 21px border 2px; splitLine 5px
			} else if(this.region == 'left' || this.region == 'right'){
				dojo.style(this.domNode,'width',this.wrapBarSize+this.splitLineSize+'px');
				dojo.style(this.wrapNode,'float',this.region);
			}
			this.isShowing = false;
			dojo.style(this.splitNode,'cursor','default');//收缩情况下不可拖动，去掉cursor样式
			this.notifyParentResize();
		}
	},
	
	/**
	 * @summary:
	 * 		面板打开事件
	 * @description:
	 * 		在面板打开时触发,用户可覆盖此方法，如方法主动返回false则不执行面板打开操作
	 * @example:
	 * |<script type="text/javascript">
	 * |	function openEvent() {
	 * |		alert('打开事件');
	 * |	}
	 * |</script>
	 * |<div id="bc" dojoType="unieap.layout.BorderContainer">
	 * |	<div dojoType="unieap.layout.BorderPane" region="top" onOpen="openEvent" height="20%">
	 * |		top面板内容
	 * | 	</div>
	 * |	<div dojoType="unieap.layout.BorderPane" region="center">
	 * |		center面板内容
	 * | 	</div>
	 * |</div>;
	 */
	onOpen: function() {
		return true;
	},
	
	/**
	 * @summary:
	 * 		面板关闭事件
	 * @description:
	 * 		在面板关闭时触发,用户可覆盖此方法，如方法主动返回false则不执行面板关闭操作
	 * @example:
	 * |<script type="text/javascript">
	 * |	function closeEvent() {
	 * |		alert('关闭事件');
	 * |	}
	 * |</script>
	 * |<div id="bc" dojoType="unieap.layout.BorderContainer">
	 * |	<div dojoType="unieap.layout.BorderPane" region="top" onClose="closeEvent" height="20%">
	 * |		top面板内容
	 * | 	</div>
	 * |	<div dojoType="unieap.layout.BorderPane" region="center">
	 * |		center面板内容
	 * | 	</div>
	 * |</div>;
	 */
	onClose: function() {
		return true;
	},
	
	//splitLine拖动=========================================================
	
	_showMoveLine : function(){
		
		this._moveLine.style.display = 'block';
		
		this._moveLine.style.height = this.splitNode.offsetHeight + 'px';
		this._moveLine.style.width = this.splitNode.offsetWidth + 'px';
		
		//设置top/left
		this._setMoveLineTL();
		
		//绑定事件
		this._moveEvents = [];
		if(this._moveLine.setCapture) { //锁定鼠标事件
			this._moveLine.setCapture();	
			this._moveEvents.push(dojo.connect(this._moveLine,'onmousemove',this,'_doMoveLine'));
			this._moveEvents.push(dojo.connect(this._moveLine,'onmouseup',this,'_endMoveLine'));
		}else { //FF 绑定全局事件
			this._moveEvents.push(dojo.connect(document,'onmousemove',this,'_doMoveLine'));
			this._moveEvents.push(dojo.connect(document,'onmouseup',this,'_endMoveLine'));
		}
	},
	
	_setMoveLineTL: function() {
		if(this.borderContainer.design == 'sidebar') {
			if(this.region == 'left') {
				this._moveLine.style.top = '0px';
				this._moveLine.style.left = this.paneNode.offsetWidth + 'px';
			} else if (this.region == 'right') {
				this._moveLine.style.top = '0px';
				this._moveLine.style.left = this.borderContainer.domNode.clientWidth - this.domNode.offsetWidth + 'px';
			} else if (this.region == 'top') {
				this._moveLine.style.top = this.paneNode.offsetHeight + 'px';
				if(this.borderContainer.leftPane) { //left  pane存在
					this._moveLine.style.left = this.borderContainer.leftPane.domNode.offsetWidth + 'px';
				} else {
					this._moveLine.style.left = '0px';
				}
			} else if (this.region == 'bottom') {
				this._moveLine.style.top = this.borderContainer.domNode.clientHeight - this.domNode.offsetHeight + 'px';
				if(this.borderContainer.leftPane) { //left  pane存在
					this._moveLine.style.left = this.borderContainer.leftPane.domNode.offsetWidth + 'px';
				} else {
					this._moveLine.style.left = '0px';
				}
			}
		}else{
			if(this.region == 'left') {
				if(this.borderContainer.topPane) {
					this._moveLine.style.top = this.borderContainer.topPane.domNode.offsetHeight + 'px';
				} else {
					this._moveLine.style.top = '0px';
				}
				this._moveLine.style.left = this.paneNode.offsetWidth + 'px';
			} else if (this.region == 'right') {
				if(this.borderContainer.topPane) {
					this._moveLine.style.top = this.borderContainer.topPane.domNode.offsetHeight + 'px';
				} else {
					this._moveLine.style.top = '0px';
				}
				this._moveLine.style.left = this.borderContainer.domNode.clientWidth - this.domNode.offsetWidth + 'px';
			} else if (this.region == 'top') {
				this._moveLine.style.top = this.paneNode.offsetHeight + 'px';
				this._moveLine.style.left = '0px';
			} else if (this.region == 'bottom') {
				this._moveLine.style.top = this.borderContainer.domNode.clientHeight - this.domNode.offsetHeight + 'px';
				this._moveLine.style.left = '0px';
			}
		}		
	},
		
	_startMove: function(evt) {
		//收缩情况下，不可拖动
		if(!this.isShowing) {
			return;
		}
		
		dojo.disconnect(this.startMoveEvent);
		
		this._showMoveLine();
		
		//记录拖拽前
		this.splitMouse_x = evt.clientX;
		this.splitMouse_y = evt.clientY;
		this.splitLine_t = this._moveLine.offsetTop;
		this.splitLine_l = this._moveLine.offsetLeft;
	},
	
	_doMoveLine: function(evt) {
		
		var offset;
		//移动Line
		if(this.region == 'left') {
			offset = evt.clientX - this.splitMouse_x;
			this._isValid(offset) && (this._moveLine.style.left  =   Math.floor(this.splitLine_l + offset)  + 'px');
		} else if (this.region == 'right') {
			offset = this.splitMouse_x - evt.clientX
			this._isValid(offset) && (this._moveLine.style.left  =   Math.floor(this.splitLine_l - offset)  + 'px');
		} else if (this.region == 'top') {
			offset = evt.clientY - this.splitMouse_y;
			this._isValid(offset) && (this._moveLine.style.top  =   Math.floor(this.splitLine_t + offset)  + 'px');
		} else if (this.region == 'bottom') {
			offset = this.splitMouse_y - evt.clientY;
			this._isValid(offset) && (this._moveLine.style.top  =   Math.floor(this.splitLine_t - offset)  + 'px');
		}
	},
	
	//计算是否在偏移允许范围
	_isValid: function(offset) {
		var maxlimit,minlimit,value;
		if(this.region == 'left' || this.region == 'right')  {
			minlimit = parseInt(this.minSize,10);
			maxlimit =  Math.min(parseInt(this.maxSize),
				(this.domNode.offsetWidth + this.borderContainer.centerPane.domNode.offsetWidth - this.centerMinSize));//保持center的50宽、高
			value = this.domNode.offsetWidth + offset;
		} else if(this.region == 'top' || this.region == 'bottom') {
			minlimit = parseInt(this.minSize,10);
			maxlimit =  Math.min(parseInt(this.maxSize),
				(this.domNode.offsetHeight + this.borderContainer.centerPane.domNode.offsetHeight - this.centerMinSize));
			value = this.domNode.offsetHeight + offset;
		}
		maxlimit = Math.min(maxlimit,parseInt(this.maxSize));
		if(value >= minlimit && value <= maxlimit) {
			return true;
		}else {
			return false;
		}
	},
	
	_endMoveLine: function(evt) {
		//位移(offset)：用moveLine当前的top,left 减去 moveLine出现时的原始位置 的 差值
		//依据“正值扩大、负值缩小”，不同region pane计算时的减数和被减数不一样
		var offset = 0;
		if(this.region == 'left') {
			offset = Math.floor(this._moveLine.offsetLeft - this.splitLine_l); 
			//如果可以收缩
			if(this.wrap && this.domNode.offsetWidth + offset <= this.wrapBarSize+this.splitLineSize) {
				this.close();
			} else {
				dojo.style(this.domNode,'width',this.domNode.offsetWidth + offset + 'px');
			}
		} else if(this.region == 'right') {
			offset = Math.floor(this.splitLine_l - this._moveLine.offsetLeft);
			if(this.wrap && this.domNode.offsetWidth + offset <= this.wrapBarSize+this.splitLineSize) {
				this.close()
			} else {
				dojo.style(this.domNode,'width',this.domNode.offsetWidth + offset + 'px');
			}
		} else if (this.region == 'top') {
			offset = Math.floor(this._moveLine.offsetTop - this.splitLine_t);
			if(this.wrap && this.domNode.offsetHeight + offset <= this.wrapBarSize+this.splitLineSize) {
				this.close();
			} else {
				dojo.style(this.domNode,'height',this.domNode.offsetHeight + offset + 'px');
			}
		} else if (this.region == 'bottom'){
			offset = Math.floor(this.splitLine_t - this._moveLine.offsetTop);
			if(this.wrap && this.domNode.offsetHeight + offset <= this.wrapBarSize+this.splitLineSize) {
				this.close();
			} else {
				dojo.style(this.domNode,'height',this.domNode.offsetHeight + offset + 'px');
			}
		}
//		dojo.hitch(this,this._destoryAfterMove);
		this._destoryAfterMove();
		this.notifyParentResize(); 
	},
	
	
	_destoryAfterMove: function() {
		if(this._moveLine.releaseCapture) {
			this._moveLine.releaseCapture();
		}
		
		dojo.forEach(this._moveEvents, dojo.disconnect);
		
		this._moveLine.style.top = '0px';
		this._moveLine.style.left = '0px';
		this._moveLine.style.display = 'none';

		delete this.splitMouse_x;
		delete this.splitMouse_y;
		delete this.splitLine_t;
		delete this.splitLine_l;
	},
	
	/**
	 * @summary:
	 * 		设置面板的高度
	 * @description:
	 *		支持像素值和百分比,只对top和bottom面板有效，且设置高度不能超过高度限制
	 *		即：top(bottom)面板高度 应在BorderContainer容器高度和bottom(top)面板高度不变的情况下 保证center面板的可见 
	 * @param:
	 * 		{string|number} height
	 * @example:
	 * |var topPane = unieap.byId('topPane');
	 * |topPane.setPaneHeight("200px");
	 */
	setPaneHeight: function(height) {
		if(this.region == 'left' || this.region == 'right' || this.region == 'center') {
			return;
		}
		if(this.isShowing) {
			this.setHeight(height);
		} else {			//关闭状态下，改变this.paneSize_h记录值
			this.paneSize_h = height;
		}		
	},
	
	/**
	 * @summary:
	 * 		设置面板的宽度
	 * @description:
	 *		支持像素值和百分比,只对left和right面板有效，且设置宽度不能超过宽度限制
	 *		即：left(right)面板宽度 应在BorderContainer容器宽度和right(left)面板宽度不变的情况下 保证center面板的可见
	 * @param:
	 * 		{string|number} width
	 * @example:
	 * |var leftPane = unieap.byId('leftPane');
	 * |topPane.setPaneWidth("200px");
	 */
	setPaneWidth: function(width) {
		if(this.region == 'top' || this.region == 'bottom' || this.region == 'center') {
			return;
		}
		if(this.isShowing) {
			this.setWidth(width);
		} else {
			this.paneSize_w = width;
		}		
	}
});
dojo.provide("unieap.layout.BorderContainer");
dojo.require('unieap.layout.Container');

dojo.declare("unieap.layout.BorderContainer", [unieap.layout.Container], {
	/**
     * @declaredClass:
     * 		unieap.layout.BorderContainer
     * @summary:
     * 		方位布局组件
     * @classDescription:
     * 		提供对页面的方位布局，将页面分为上、下、左、右、中五个面板，中面板是自适应面板且必须配置，其他面板可选
     * 		注意：BorderContainer和BorderPane中都提供了splitLine,showTitleBar,fixed,wrap属性的配置，
     * 			  对于同一属性，BorderContainer的优先级要高于BorderPane
     * @example:
	 * |<div id="bc" dojoType="unieap.layout.BorderContainer">
	 * |	<div dojoType="unieap.layout.BorderPane" region="top" title="top" height="20%">
	 * |		top面板内容
	 * |	</div>
	 * |	<div dojoType="unieap.layout.BorderPane" region="bottom" title="bottom" height="30%">
	 * |		bottom面板内容
	 * |	</div>
	 * |	<div dojoType="unieap.layout.BorderPane" region="center" title="center">
	 * |		center面板内容,center面板必须有
	 * |	</div>
	 * |	<div dojoType="unieap.layout.BorderPane" region="left" title="left" width="20%">
	 * |		left面板内容
	 * |	</div>
	 * |	<div dojoType="unieap.layout.BorderPane" region="right" title="right" width="30%">
	 * |		right面板内容
	 * |	</div>
	 * | </div>	
	 * @img:
	 * 		images/layout/bordercontainer-headline.png
	 */
	
	//配置属性接口
	UserInterfaces : dojo.mixin({
		design : "string",
		showTitleBar : "boolean",
		splitLine : "boolean",
		wrap : "boolean",
		fixed : "boolean",
		noBorder:"boolean"
	},
	unieap.layout.Container.prototype.UserInterfaces),
	
	/**
	 * @summary:
	 * 		方位布局方式
	 * @description:
	 * 		标题布局(headline):top和bottom面板宽度100%、高度需设置；left和right高度自适应、宽度需设置
	 * 		边栏布局(sidebar)：top和bottom面板宽度自适应、高度需设置；left和right高度100%、宽度需设置
	 * @default:
	 * 		headline
	 * @type:
	 * 		{string}
	 * @enum:
	 * 		{'headline','sidebar'}
	 * @example:
	 * |//默认是标题布局，如下展示边栏布局
	 * |<div id="bc" dojoType="unieap.layout.BorderContainer" design="sidebar">
	 * |    ...  //嵌套方位面板
	 * | </div>	
	 * @img:
	 * 		images/layout/bordercontainer-sidebar.png
	 */
	design:'headline',
	
	/**
	 * @summary
	 * 		配置是否显示面板之间的分割条
	 * @description:
	 * 		true:显示，false:不显示，默认显示
	 * 		如果在此配置了spliteLine=false，则所有分割条都不显示，在BorderPane中即使配置了spliteLine=true也不能显示
	 * 		如果在此配置了spliteLine=true，在BorderPane中可以配置了spliteLine=false隐藏指定分割条
	 * @default:
	 * 		true
	 * @type:
	 * 		{boolean}
	 * @example:
	 * |<div id="bc" dojoType="unieap.layout.BorderContainer" splitLine="false">
	 * |    ...  //嵌套方位面板
	 * | </div>	
	 * 配置不显示分割条
	 * @img:
	 * 		images/layout/bordercontainer-nosplitline.png
	 */
	splitLine:true,
	
	/**
	 * @summary:
	 * 		是否显示标题条
	 * @description:
	 * 		false：不显示，true：显示，默认为true
	 * 		如果在此配置了showTitleBar=false，则所有标题都不显示，在BorderPane中即使配置了showTitleBar=true也不能显示
	 * 		如果在此配置了showTitleBar=true，在BorderPane中可以配置了showTitleBar=false隐藏指定面板的标题
	 * @default:
	 * 		true
	 * @type:
	 * 		{boolean}
	 * @example:
	 * |<div id="bc" dojoType="unieap.layout.BorderContainer" showTitleBar="false">
	 * |    ...  //嵌套方位面板
	 * | </div>	
	 * 配置不显示标题条
	 * @img:
	 * 		images/layout/bordercontainer-notitle.png
	 */
	showTitleBar:true,
	
	/**
	 * @summary:
	 * 		配置内部方位面板分割条是否可拖动
	 * @description:
	 * 		true:不可拖动，false：可拖动,默认可拖动，在显示分割条（splitLine=true）情况下生效。
	 * 		如果在此配置了fixed=true，则所有面板均不可拖动，在BorderPane中即使配置了fixed=false也不能拖动
	 * 		如果在此配置了fixed=false，在BorderPane中可以配置了fixed=true使指定面板的不可拖动
	 * @default:
	 * 		false
	 * @type：
	 * 		{boolean}
	 * @example:
	 * |<div id="bc" dojoType="unieap.layout.BorderContainer" fixed="true">
	 * |    ...  //嵌套方位面板
	 * | </div>	
	 * 配置分割条不可拖动
	 */
	fixed:false,
	
	/**
	 * @summary:
	 * 		面板是否可收缩
	 * @description:
	 * 		false：不可收缩，true：可收缩，默认为true。
	 * 		收缩按钮显示在标题条上，wrap=true,需要showTitleBar=true为前提才能保证收缩功能可用
	 * 		此二属性默认均为true。
	 * 		如果在此配置了wrap=false，则所有面板均不可收缩，在BorderPane中即使配置了wrap=true也不能收缩
	 * 		如果在此配置了wrap=true，在BorderPane中可以配置了wrap=false使指定面板的不可收缩
	 * @default:
	 * 		true
	 * @type:
	 * 		{boolean}
	 * @example:
	 * |<div id="bc" dojoType="unieap.layout.BorderContainer" wrap="true">
	 * |    ...  //嵌套方位面板
	 * | </div>	
	 * 配置面板可收缩,默认可收缩，如图下图所示，收缩按钮用黑框标出，当不可收缩时，没有此按钮
	 * @img:
	 * 		images/layout/bordercontainer-wrap.png
	 */
	wrap:true,
	
	/**
	 * @summary：
	 * 		配置BorderContainer容器的宽度
	 * @type：
	 * 		{string}
	 * @default：
	 * 		100%
	 */
	width:'100%',
	
	/**
	 * @summary：
	 * 		配置BorderContainer容器的高度
	 * @type：
	 * 		{string}
	 * @default：
	 * 		100%
	 */
	height:'100%', 
	
	// 左侧面板
	leftPane:null,
	
	rightPane:null,
	
	centerPane:null,
	
	topPane:null,
	
	bottomPane:null,
	//U_EAP00028721
	noBorder:(typeof(unieap.widget.layout.borderContainerNoBorder)=="undefined") ? true : unieap.widget.layout.borderContainerNoBorder, 
	
	postCreate: function() {
		dojo.addClass(this.domNode,'borderContainer');
		this.inherited(arguments);
		//为子面板赋属性
		var panes = this.containerNode.childNodes;
		var attrs = ['showTitleBar','fixed','splitLine','wrap'];
		for(var j=0; j<attrs.length; j++ ){
			var attrName = attrs[j];
			var attrValue = this.containerNode.getAttribute(attrName);
			if(attrValue != undefined) {
				for (var i = 0; i < panes.length; i++) {
					if(panes&&panes.nodeType==1){
						dojo.attr(panes[i], attrName)==null && dojo.attr(panes[i], attrName, attrValue);
					}
				}
			} 
		}
	},
	
	startup: function() {
		this.resizeContainer();
		if(this.design == 'sidebar') {
			this.panes = [this.leftPane,this.rightPane,this.topPane,this.centerPane,this.bottomPane];
		} else {
			this.panes = [this.topPane,this.leftPane,this.rightPane,this.centerPane,this.bottomPane];
		}
		//对面板布局
		this.sortPanes();
		
		this.inherited(arguments);	//resizeContainer();
		
		//创建拖动条,拖动条是在BorderContainer内，对于各个面板来说是全局共用的，每次显示时调整位置
		this._moveLine = dojo.create('div',{
			'id':'moveLine',
			'class':'u-border-moveSplitLine'
		},this.domNode,'last');
		dojo.style(this._moveLine,'display','none');
		
		//设置方位面板属性
		for(var i=0; i<this.panes.length; i++) {
			if(this.panes[i]) {
				this.panes[i]._moveLine = this._moveLine;
			}
		}
	},
	
	
	sortPanes: function() {
		var preNode = dojo.create('div',null,this.domNode,'first');
		
		for(var i=0; i<this.panes.length; i++) {
			if(this.panes[i]) {
				dojo.place(this.panes[i].domNode,preNode,'after');
				preNode = this.panes[i].domNode;
			}
		}
		this.domNode.removeChild(this.domNode.firstChild);
	},
	//设置pane的宽、高:	top,bottom的高度由用户设置，left,right的宽度由用户设置，其他自动计算
	
	resize: function() {
		this.resizePanesHW();
	},
	
	resizeContainer: function() {
		if(null == this.domNode) return;
		this.resize();
		this.resizeChildrenContainer();
	},
	
	notifyParentResize: function() {
		this.resizeContainer();
	},
	
	resizePanesHW: function() {
		this.topPane && (this.topPane.domNode.style.width = 'auto');
		this.bottomPane && (this.bottomPane.domNode.style.width = 'auto');
		this.centerPane.domNode.style.width = 'auto';
		if(this.centerPane.domNode.offsetWidth < this.centerPane.centerMinSize) {
			this.centerPane.domNode.style.width = this.centerPane.centerMinSize + 'px';
		}
		
		//计算centerPane的高度
		var topHeight = this.topPane ? parseInt(this.topPane.domNode.offsetHeight) : 0;
		var bottomHeight = this.bottomPane ? parseInt(this.bottomPane.domNode.offsetHeight) : 0;
		var containerHeight = this.domNode.clientHeight;
		var finalHeight = (containerHeight - topHeight - bottomHeight);
		
	    finalHeight = this._adjustCenterSize(finalHeight);
		this.centerPane.domNode.style.height = finalHeight;
		if(this.design == 'sidebar') {
			this.leftPane && (this.leftPane.domNode.style.height = '100%');
			this.rightPane && (this.rightPane.domNode.style.height = '100%');
		} else {
			this.leftPane && (this.leftPane.domNode.style.height = finalHeight);
			this.rightPane && (this.rightPane.domNode.style.height = finalHeight);
			this.bottomPane && (this.bottomPane.domNode.style.clear = 'both');
		}
		this.handleFloatLayout();
	},
	
	//处理浏览器窗口缩小时，流式布局串位问题
	handleFloatLayout: function() {
		var lw = this.leftPane ? dojo.style(this.leftPane.domNode,"width") : 0;
		var rw = this.rightPane ? dojo.style(this.rightPane.domNode,"width") : 0;
		var cw = dojo.style(this.domNode,"width");
		if(cw == 0) {
			return;
		}
		var offset = lw + rw + this.centerPane.centerMinSize - cw;
		if(offset > 0) {
			if(this.leftPane && this.rightPane) { //左右面板都有
				var rightOffset = Math.floor(offset/2);
				var leftOffset = offset - rightOffset;
				if(rw-rightOffset >= 30 && lw-leftOffset >= 30) {
					dojo.style(this.rightPane.domNode,'width',(rw-rightOffset)+'px');
					dojo.style(this.leftPane.domNode,'width',(lw-leftOffset)+'px');
				} else if(rw-rightOffset >= 30 && lw-leftOffset <= 30){
					dojo.style(this.leftPane.domNode,'width','30px');
					rightOffset = offset - (lw - 30);
					if(rw - rightOffset >= 30){
						dojo.style(this.rightPane.domNode,'width',(rw - rightOffset)+'px');
					}else{
						dojo.style(this.rightPane.domNode,'width','30px');
					}
				} else if(rw-rightOffset <= 30 && lw-leftOffset >= 30) {
					// dojo.style(this.rightPane.domNode,'width','30px');
					leftOffset = offset - (rw - 30);
					if(lw - leftOffset >= 30) {
						dojo.style(this.leftPane.domNode,'width',(lw - leftOffset)+'px');
					}else{
						// dojo.style(this.leftPane.domNode,'width','30px');
					}
				}
			} else if(this.rightPane) { //只有左面板
				if(rw-offset >= 30) {
					dojo.style(this.rightPane.domNode,'width',(rw-offset)+'px');
				} else {
					dojo.style(this.rightPane.domNode,'width','30px');
				}
			} else if(this.leftPane) {
				if(lw-offset >= 30) {
					// dojo.style(this.leftPane.domNode,'width',(lw-offset)+'px'); 暂时注销 避免多个tab里面产生多个borderpane 计算宽度 由原值变成50的问题  2018-12-17  LD
					dojo.style(this.leftPane.domNode,'width',(this.leftPane.width)+'px');
        }  else if (lw-offset===0 && this.leftPane.width.indexOf("%")){//leftPane百分比情况zhaos
          dojo.style(this.leftPane.domNode,'width',this.leftPane.width);
        }  else {
					dojo.style(this.leftPane.domNode,'width','30px');
				}
			}
			dojo.style(this.centerPane.domNode,'width',this.centerPane.centerMinSize + 'px');
		}
	},
	
	_adjustCenterSize: function(size){
		if(size < this.centerPane.centerMinSize){
			return this.centerPane.centerMinSize + 'px'
		} else {
			return  size+ 'px'
		}
	},
	
	/**
	 * @summary:
	 * 		获取指定方位的面板
	 * @param:
	 * 		{String} region 需要获取面板的方位
	 * @description:
	 *		如果没有输入参数，则返回null。
	 * @return:
	 * 		{unieap.layout.BorderPane}
	 * @enum:
	 * 		{'left'|'right'|'center'|'top'|'bottom'}
	 * @example:
	 * |var bc = unieap.byId('borderContainer');
	 * |var left = bc.getPaneByRegion('left');			
	 */
	getPaneByRegion: function(region) {
		switch (region) {
			case 'left':
				return this.leftPane;
			case 'right':
				return this.rightPane;
			case 'top':
				return this.topPane;
			case 'bottom':
				return this.bottomPane;
			case 'center':
				return this.centerPane;
			default:
				return null;
		}
	}
});
dojo.provide("unieap.layout.AccordionPane");
dojo.require("unieap.layout.ContentPane");
dojo.declare("unieap.layout.AccordionPane", [unieap.layout.ContentPane], {
	/**
     * @declaredClass:
     * 		unieap.layout.AccordionPane
     * @summary:
     * 		手风琴
     * @classDescription:
     *		“手风琴”容器中的面板
     * @superClass:
	 * 		unieap.layout.ContentPane
     * @example:
	 * |<div id="AccordionContainer" dojoType="unieap.layout.AccordionContainer">
	 * |	<div dojoType="unieap.layout.AccordionPane"	title="1">
	 * |		
	 * |	</div>
	 * |	<div dojoType="unieap.layout.AccordionPane" title="2">
	 * |		
	 * |	</div>
	 * |	<div dojoType="unieap.layout.ContentPane" title="3">
	 * |		
	 * |	</div>
	 * | </div>	
     */
	
	//配置属性接口
	UserInterfaces : dojo.mixin({
		iconClass	:	"string",
		onSelected : "function"
	},
	unieap.layout.ContentPane.prototype.UserInterfaces),
	
	/**
	 * @summary:
	 * 		AccordionPane的图标样式
	 * @type：
	 * 		{string}
	 * @example：
	 * | .heart{
	 * |	background: url("heart.png") no-repeat;
	 * | }
	 * |
	 * | <div	dojoType="unieap.layout.AccordionPane"	title="自定义图标" iconClass="heart">
	 * | </div>
	 */
	iconClass:"",
	
	/**
	 * @summary:
	 * 		AccordionPane的是否被默认选中
	 * @type：
	 * 		{boolean}
	 * @default
	 * 		false
	 */
	selected:false,
	
	setIcon: function(icon){
		dojo.style(this._buttonWidget.iconNode, "backgroundImage", "url('"+icon+"')");
	},
	
	resize : function (changeSize){
		if(changeSize){
			var style = this.domNode.style;
			this.height=Math.max(0,changeSize.h);
			this.width=Math.max(0,changeSize.w);
			style.width=this.width+"px";
			style.height=this.height+"px";
		}
		this.resizeChildrenContainer();
	},

	/**
	 * @summary:
	 * 		AccordionPane的选中事件
	 * @type：
	 * 		{function}
	 * @example：
	 * | function fun{
	 * |	alert("你选中了我")
	 * | }
	 * |
	 * | <div	dojoType="unieap.layout.AccordionPane"	onSelected="fun">
	 * | </div>
	 */
	onSelected: function(){
		// summary:
		//		called when this pane is selected
	}
	
});
dojo.provide("unieap.layout.AccordionContainer");
dojo.require("unieap.layout.Container");
dojo.require("dijit._Templated");
dojo.require("unieap.layout.ContentPane");
dojo.require("dijit._CssStateMixin");
dojo.declare("unieap.layout.AccordionContainer", [unieap.layout.Container], {
	/**
     * @declaredClass:
     * 		unieap.layout.AccordionContainer
     * @summary:
     * 		手风琴
     * @classDescription:
     *		俗称“手风琴”容器
     * @superClass:
	 * 		unieap.layout.Container
     * @example:
	 * |<div id="AccordionContainer" dojoType="unieap.layout.AccordionContainer">
	 * |	<div dojoType="unieap.layout.AccordionPane"	title="1">
	 * |		
	 * |	</div>
	 * |	<div dojoType="unieap.layout.AccordionPane" title="2">
	 * |		
	 * |	</div>
	 * |	<div dojoType="unieap.layout.AccordionPane" title="3">
	 * |		
	 * |	</div>
	 * | </div>	
     */
	
	//配置属性接口
	UserInterfaces : dojo.mixin({
		duration : "number",
		showDefaultPane : "boolean",
		animate : "boolean"
	},
	unieap.layout.Container.prototype.UserInterfaces),	
	
    /**
     * @summary:
     * 		指定展开某个板块的持续时间，单位ms
     * @type：
     * 		{number}
	 * @description：
     * 		当有动画效果时有效
     * @default：
     * 		300
     */
	duration: 300,
	
	/**
	 * @summary:
	 * 		是否使用动画收缩
	 * @description:
	 * 		可以在global.js中修改全局默认值unieap.animate。
	 * 		在IE6 IE7中强制关闭动画效果
	 * @type：
	 * 		{boolean}
	 * @default：
	 * 		true
	 */
	animate:(typeof(unieap.animate) == 'undefined')?true:unieap.animate,

	doLayout:true,
	
	showDefaultPane: true,

	buttonWidget: "unieap.layout._AccordionButton",
	
	baseClass: "accordionContainer",

	buildRendering: function(){
		this.inherited(arguments);
		this.domNode.style.overflow = "hidden";		// TODO: put this in dijit.css
	},

	startup: function(){
		if(this._started){ return; }
		var children = this.getChildren();
		dojo.forEach(children, this._setupChild, this);
		dojo.some(children, function(child){
			if(child.selected){
				this.selectedChildWidget = child;
			}
			return child.selected;
		}, this);
		var selected = this.selectedChildWidget;
		if(this.showDefaultPane && !selected && children[0]){
			selected = this.selectedChildWidget = children[0];
			selected.selected = true;
		}
		this.inherited(arguments);
		if(this.selectedChildWidget){
			var style = this.selectedChildWidget.containerNode.style;
			style.display = "";
			style.overflow = "auto";
			this.selectedChildWidget._wrapperWidget.set("selected", true);
		}
		this._started = true;
	},

	/**
	 * @summary:
	 * 		选择某个板块
	 * @param:
	 * 		{unieap.layout.AccordionPane}
     * @example:
	 * |<div id="AccordionContainer" id="container"	dojoType="unieap.layout.AccordionContainer">
	 * |	<div dojoType="unieap.layout.AccordionPane"	title="1">
	 * |		
	 * |	</div>
	 * |	<div dojoType="unieap.layout.AccordionPane" id="pane2" title="2">
	 * |		
	 * |	</div>
	 * |	<div dojoType="unieap.layout.AccordionPane" title="3">
	 * |		
	 * |	</div>
	 * | </div>
	 * |
	 * | <script>
	 * |	var accordionContainer = unieap.byId("container");
	 * |	var accordionPane2 = unieap.byId("pane2");
	 * |		accordionContainer.selectChild(accordionPane2);
	 * | </script>
	 */
	selectChild: function(page){
		if(dojo.isString(page))
			page = dijit.byId((this._rootID||"")+page);
		else
			page = dijit.byId(page);
		if(this.selectedChildWidget != page){
			// Deselect old page and select new one
			var d = this._transition(page, this.selectedChildWidget);
			this._set("selectedChildWidget", page);
		}else if(!this.showDefaultPane){
			if(page && page._wrapperWidget){ 
				if('block' == dojo.style(page._wrapperWidget.containerNode,"display")){
					page._wrapperWidget.set("selected", false);
					this._hideChild(page);
				}else{
					this._showChild(page);
					page._wrapperWidget.set("selected", true);
					this._set("selectedChildWidget", page);
				}
			}
		}
		return d;		
	},
		
	resize: function(changeSize, resultSize){
		var selected = this.selectedChildWidget;
		if(selected && !this._hasBeenShown){
			this._hasBeenShown = true;
			this._showChild(selected);
		}
		var node = this.domNode;

		// set margin box size, unless it wasn't specified, in which case use current size
		if(changeSize){
			dojo.marginBox(node, changeSize);
			// set offset of the node
			if(changeSize.t){ node.style.top = changeSize.t + "px"; }
			if(changeSize.l){ node.style.left = changeSize.l + "px"; }
		}

		// If either height or width wasn't specified by the user, then query node for it.
		// But note that setting the margin box and then immediately querying dimensions may return
		// inaccurate results, so try not to depend on it.
		var mb = resultSize || {};
		dojo.mixin(mb, changeSize || {});	// changeSize overrides resultSize
		if( !("h" in mb) || !("w" in mb) ){
			mb = dojo.mixin(dojo.marginBox(node), mb);	// just use dojo.marginBox() to fill in missing values
		}

		// Compute and save the size of my border box and content box
		// (w/out calling dojo.contentBox() since that may fail if size was recently set)
		var cs = dojo.getComputedStyle(node);
		var me = dojo._getMarginExtents(node, cs);
		var be = dojo._getBorderExtents(node, cs);
		var bb = (this._borderBox = {
			w: mb.w - (me.w + be.w),
			h: mb.h - (me.h + be.h)
		});
		var pe = dojo._getPadExtents(node, cs);
		this._contentBox = {
			l: dojo._toPixelValue(node, cs.paddingLeft),
			t: dojo._toPixelValue(node, cs.paddingTop),
			w: bb.w - pe.w,
			h: bb.h - pe.h
		};

		// Callback for widget to adjust size of its children
		this.layout();
	},
		
		
	resizeContainer: function() {
		if(null==this.domNode) return;
		this.resize();
	},
		
	layout: function(openWidget){
		// Implement _LayoutWidget.layout() virtual method.
		// Set the height of the open pane based on what room remains.
		var openPane = this.selectedChildWidget || openWidget;
		
		if(!openPane){ return;}

		// space taken up by title, plus wrapper div (with border/margin) for open pane
		if(!this._contentBox){
			var node = this.domNode;
			var mb = {};
			dojo.mixin(mb, {});	// changeSize overrides resultSize
			if( !("h" in mb) || !("w" in mb) ){
				mb = dojo.mixin(dojo.marginBox(node), mb);	// just use dojo.marginBox() to fill in missing values
			}
			var cs = dojo.getComputedStyle(node);
			var me = dojo._getMarginExtents(node, cs);
			var be = dojo._getBorderExtents(node, cs);
			var bb = (this._borderBox = {
				w: mb.w - (me.w + be.w),
				h: mb.h - (me.h + be.h)
			});
			var pe = dojo._getPadExtents(node, cs);
			this._contentBox = {
					l: dojo._toPixelValue(node, cs.paddingLeft),
					t: dojo._toPixelValue(node, cs.paddingTop),
					w: bb.w - pe.w,
					h: bb.h - pe.h
				};
		}
		var wrapperDomNode = openPane._wrapperWidget.domNode,
			wrapperDomNodeMargin = dojo._getMarginExtents(wrapperDomNode),
			wrapperDomNodePadBorder = dojo._getPadBorderExtents(wrapperDomNode),
			wrapperContainerNode = openPane._wrapperWidget.containerNode,
			wrapperContainerNodeMargin = dojo._getMarginExtents(wrapperContainerNode),
			wrapperContainerNodePadBorder = dojo._getPadBorderExtents(wrapperContainerNode),
			mySize = this._contentBox;

		// get cumulative height of all the unselected title bars
		var totalCollapsedHeight = 0;
		dojo.forEach(this.getChildren(), function(child){
            if(child != openPane && child._wrapperWidget){
				totalCollapsedHeight += dojo._getMarginSize(child._wrapperWidget.domNode).h;
			}
		});
		this._verticalSpace = mySize.h - totalCollapsedHeight - wrapperDomNodeMargin.h
		 	- wrapperDomNodePadBorder.h - wrapperContainerNodeMargin.h - wrapperContainerNodePadBorder.h
			- openPane._buttonWidget.getTitleHeight();

		// Memo size to make displayed child
		this._containerContentBox = {
			h: this._verticalSpace,
			w: this._contentBox.w - wrapperDomNodeMargin.w - wrapperDomNodePadBorder.w
				- wrapperContainerNodeMargin.w - wrapperContainerNodePadBorder.w
		};

		if(openPane){
			openPane.resize(this._containerContentBox);
		}
	},

	_setupChild: function(child){
		// Overrides _LayoutWidget._setupChild().
		// Put wrapper widget around the child widget, showing title

		child._wrapperWidget = new unieap.layout._AccordionInnerContainer({
			contentWidget: child,
			buttonWidget: this.buttonWidget,
			id: child.id + "_wrapper",
			dir: child.dir,
			lang: child.lang,
			parent: this
		});
		dojo.attr(child.domNode,'title','');
		this.inherited(arguments);
	},

	/**
	 * @summary:
	 * 		增加一个板块
	 * @param:
	 * 		{unieap.layout.AccordionPane}
	 * @param:
	 * 		{number} insertIndex
	 * 		插入的位置
	 * @param:
	 * 		{boolean} needselected 是否增加一个Tab页后就选择该Tab页，默认选中
	 * @example:
	 * |unieap.byId('accordionContainer').addChild(new unieap.layout.AccordionPane({
	 * |	title: "新增的板块"
	 * |}));
	 */
	addChild: function(/*dijit._Widget*/ child, /*Integer?*/ insertIndex){
		if(this._started){
			// Adding a child to a started Accordion is complicated because children have
			// wrapper widgets.  Default code path (calling this.inherited()) would add
			// the new child inside another child's wrapper.

			// First add in child as a direct child of this AccordionContainer
			dojo.place(child.domNode, this.containerNode, insertIndex);

			if(!child._started){
				child.startup();
			}
			
			// Then stick the wrapper widget around the child widget
			this._setupChild(child);

			// Code below copied from StackContainer
			dojo.publish(this.id+"-addChild", [child, insertIndex]);
			if(!this.selectedChildWidget && this.showDefaultPane){
				this.selectChild(child);
			}
			this.layout();
		}else{
			// We haven't been started yet so just add in the child widget directly,
			// and the wrapper will be created on startup()
			this.inherited(arguments);
		}
	},

	/**
	 * @summary:
	 * 		删除一个板块
	 * @param:
	 * 		{unieap.layout.AccordionPane}
	 */
	removeChild: function(child){
		if(child == this.selectedChildWidget && this.getChildren().length>1){
			this.forward();
		}
		if (1 == this.getChildren().length) {
			this.selectedChildWidget = null;
		}
		if(child._wrapperWidget){
			dojo.place(child.domNode, child._wrapperWidget.domNode, "after");
			child._wrapperWidget.destroy();
			delete child._wrapperWidget;
		}
		this.inherited(arguments);
		this.layout();
	},

	getChildren: function(){
		// Overrides _Container.getChildren() to return content panes rather than internal AccordionInnerContainer panes
		return dojo.map(this.inherited(arguments), function(child){
			return child.declaredClass == "unieap.layout._AccordionInnerContainer" ? child.contentWidget : child;
		}, this);
	},

	destroy: function(){
		if(this._animation){
			this._animation.stop();
		}
		dojo.forEach(this.getChildren(), function(child){
			// If AccordionContainer has been started, then each child has a wrapper widget which
			// also needs to be destroyed.
			if(child._wrapperWidget){
				child._wrapperWidget.destroy();
			}else{
				child.destroyRecursive();
			}
		});
		this.inherited(arguments);
	},

	_showChild: function(child){
		// Override StackContainer._showChild() to set visibility of _wrapperWidget.containerNode
		child._wrapperWidget.containerNode.style.display="block";
		return this.inherited(arguments);
	},

	_hideChild: function(child){
		// Override StackContainer._showChild() to set visibility of _wrapperWidget.containerNode
		child._wrapperWidget.containerNode.style.display="none";
		this.inherited(arguments);
	},

	_transition: function(/*dijit._Widget?*/ newWidget, /*dijit._Widget?*/ oldWidget){
		// Overrides StackContainer._transition() to provide sliding of title bars etc.
		var	animate = this.animate;
		
		if(dojo.isIE < 8){
			// workaround animation bugs by not animating; not worth supporting animation for IE6 & 7
			animate = false;
		}

		if(this._animation){
			// there's an in-progress animation.  speedily end it so we can do the newly requested one
			this._animation.stop(true);
			delete this._animation;
		}

		var self = this;
		if(newWidget){
			newWidget._wrapperWidget.set("selected", true);

			if('undefined' == typeof this._containerContentBox) this.layout(newWidget);
			var d = this._showChild(newWidget);	// prepare widget to be slid in

			// Size the new widget, in case this is the first time it's being shown,
			// or I have been resized since the last time it was shown.
			// Note that page must be visible for resizing to work.
			if(this.doLayout && newWidget.resize){
				newWidget.resize(this._containerContentBox);
			}
		}

		if(oldWidget && oldWidget._wrapperWidget){
			oldWidget._wrapperWidget.set("selected", false);
			if(!animate){
				this._hideChild(oldWidget);
			}
		}

		if(animate&&oldWidget){
			var newContents = newWidget._wrapperWidget.containerNode,
				oldContents = oldWidget._wrapperWidget.containerNode;

			// During the animation we will be showing two dijitAccordionChildWrapper nodes at once,
			// which on claro takes up 4px extra space (compared to stable AccordionContainer).
			// Have to compensate for that by immediately shrinking the pane being closed.
			var wrapperContainerNode = newWidget._wrapperWidget.containerNode,
				wrapperContainerNodeMargin = dojo._getMarginExtents(wrapperContainerNode),
				wrapperContainerNodePadBorder = dojo._getPadBorderExtents(wrapperContainerNode),
				animationHeightOverhead = wrapperContainerNodeMargin.h + wrapperContainerNodePadBorder.h;

			oldContents.style.height = (self._verticalSpace - animationHeightOverhead) + "px";
			var self=this;
			this._animation = new dojo.Animation({
				node: newContents,
				duration: this.duration,
				curve: [1, this._verticalSpace - animationHeightOverhead - 1],
				onAnimate: function(value){
					value = Math.floor(value);	// avoid fractional values
					newContents.style.height = value + "px";
					oldContents.style.height = (self._verticalSpace - animationHeightOverhead - value) + "px";
				},
				onEnd: function(){
					delete self._animation;
					newContents.style.height = "auto";
					if(oldWidget&&oldWidget._wrapperWidget){
						oldWidget._wrapperWidget.containerNode.style.display = "none";
						oldContents.style.height = "auto";
						self._hideChild(oldWidget);
					}
				}
			});
			this._animation.onStop = this._animation.onEnd;
			this._animation.play();
		}

		return d;	// If child has an href, promise that fires when the widget has finished loading
	},
	// note: we are treating the container as controller here
	_onKeyPress: function(/*Event*/ e, /*dijit._Widget*/ fromTitle){
		// summary:
		//		Handle keypress events
		// description:
		//		This is called from a handler on AccordionContainer.domNode
		//		(setup in StackContainer), and is also called directly from
		//		the click handler for accordion labels
		if(this.disabled || e.altKey || !(fromTitle || e.ctrlKey)){
			return;
		}
		var k = dojo.keys,
			c = e.charOrCode;
		if((fromTitle && (c == k.LEFT_ARROW || c == k.UP_ARROW)) ||
				(e.ctrlKey && c == k.PAGE_UP)){
			this._adjacent(false)._buttonWidget._onTitleClick();
			dojo.stopEvent(e);
		}else if((fromTitle && (c == k.RIGHT_ARROW || c == k.DOWN_ARROW)) ||
				(e.ctrlKey && (c == k.PAGE_DOWN || c == k.TAB))){
			this._adjacent(true)._buttonWidget._onTitleClick();
			dojo.stopEvent(e);
		}
	},
	_adjacent: function(/*Boolean*/ forward){
		// summary:
		//		Gets the next/previous child widget in this container from the current selection.
		var children = this.getChildren();
		var index = dojo.indexOf(children, this.selectedChildWidget);
		index += forward ? 1 : children.length - 1;
		return children[ index % children.length ]; // dijit._Widget
	},

	forward: function(){
		return this.selectChild(this._adjacent(true));
	},

	back: function(){
		return this.selectChild(this._adjacent(false));
	}
});


dojo.declare("unieap.layout._AccordionInnerContainer",[dijit._Widget, dijit._CssStateMixin], {

	baseClass: "accordioninnerContainer",
	
	// tell nested layout widget that we will take care of sizing
	isContainer: true,
	isLayoutContainer: true,
	
	buildRendering: function(){
		// Builds a template like:
		//	<div class=dijitAccordionInnerContainer>
		//		Button
		//		<div class=dijitAccordionChildWrapper>
		//			ContentPane
		//		</div>
		//	</div>
	
		// Create wrapper div, placed where the child is now
		this.domNode = dojo.place("<div class='" + this.baseClass + "'>", this.contentWidget.domNode, "after");
		
		// wrapper div's first child is the button widget (ie, the title bar)
		var child = this.contentWidget,
			cls = dojo.getObject(this.buttonWidget);
		this.button = child._buttonWidget = (new cls({
			contentWidget: child,
			label: child.title,
			title: child.tooltip,
			dir: child.dir,
			lang: child.lang,
			iconClass: child.iconClass,
			id: child.id + "_button",
			parent: this.parent
		})).placeAt(this.domNode);
		
		// and then the actual content widget (changing it from prior-sibling to last-child),
		// wrapped by a <div class=dijitAccordionChildWrapper>
		this.containerNode = dojo.place("<div class='accordionChildWrapper' style='display:none'>", this.domNode);
		dojo.place(this.contentWidget.domNode, this.containerNode);
	},
	
	
	_setSelectedAttr: function(/*Boolean*/ isSelected){
		this._set("selected", isSelected);
		this.button.set("selected", isSelected);
		if(isSelected){
			var cw = this.contentWidget;
			if(cw.onSelected){ cw.onSelected(); }
		}
	},
	
	startup: function(){
		// Called by _Container.addChild()
		this.contentWidget.startup();
	},
	
	destroy: function(){
		this.button.destroyRecursive();
	
		dojo.forEach(this._contentWidgetWatches || [], function(w){ w.unwatch(); });
	
		delete this.contentWidget._buttonWidget;
		delete this.contentWidget._wrapperWidget;
	
		this.inherited(arguments);
	},
	
	destroyDescendants: function(){
		// since getChildren isn't working for me, have to code this manually
		this.contentWidget.destroyRecursive();
			}
});


dojo.declare("unieap.layout._AccordionButton",
	[dijit._Widget, dijit._Templated, dijit._CssStateMixin],
	{
	// summary:
	//		The title bar to click to open up an accordion pane.
	//		Internal widget used by AccordionContainer.
	// tags:
	//		private

	templateString:
	"<div dojoAttachEvent='onclick:_onTitleClick' class='accordionTitle'>" +
		"<div dojoAttachPoint='titleNode,focusNode' dojoAttachEvent='onkeypress:_onTitleKeyPress' " +
				"class='accordionTitleFocus' role='tab' aria-expanded='false'>" +
			"<span class='accordionArrow' role='presentation'></span>" +
			"<span class='arrowTextUp' role='presentation'>+</span>" +
			"<span class='arrowTextDown' role='presentation'>-</span>" +
			"<img src='${_blankGif}' alt='' class='accordionIcon' dojoAttachPoint='iconNode' style='vertical-align: middle' role='presentation'/>" +
			"<span role='presentation' dojoAttachPoint='titleTextNode' class='dijitAccordionText'></span>" +
		"</div>" +
	"</div>",
	
	attributeMap: dojo.mixin(dojo.clone(unieap.layout.ContentPane.prototype.attributeMap), {
		label: {node: "titleTextNode", type: "innerHTML" },
		title: {node: "titleTextNode", type: "attribute", attribute: "title"},
		iconClass: { node: "iconNode", type: "class" }
	}),

	baseClass: "accordionTitle",

	getParent: function(){
		// summary:
		//		Returns the AccordionContainer parent.
		// tags:
		//		private
		return this.parent;
	},

	buildRendering: function(){
		this.inherited(arguments);
		var titleTextNodeId = this.id.replace(' ','_');
		dojo.attr(this.titleTextNode, "id", titleTextNodeId+"_title");
		dijit.setWaiState(this.focusNode, "labelledby", dojo.attr(this.titleTextNode, "id"));
		dojo.setSelectable(this.domNode, false);
	},

	getTitleHeight: function(){
		// summary:
		//		Returns the height of the title dom node.
		return dojo._getMarginSize(this.domNode).h;	// Integer
	},

	// TODO: maybe the parent should set these methods directly rather than forcing the code
	// into the button widget?
	_onTitleClick: function(){
		var parent = this.getParent();
			parent.selectChild(this.contentWidget);
			dijit.focus(this.focusNode);
	},

	_onTitleKeyPress: function(/*Event*/ evt){
		return this.getParent()._onKeyPress(evt, this.contentWidget);
	},

	_setSelectedAttr: function(/*Boolean*/ isSelected){
		this._set("selected", isSelected);
		dijit.setWaiState(this.focusNode, "expanded", isSelected);
		dijit.setWaiState(this.focusNode, "selected", isSelected);
		this.focusNode.setAttribute("tabIndex", isSelected ? "0" : "-1");
	}
});
dojo.provide("unieap.layout.HBoxContainer");
dojo.require("unieap.layout.Container");
dojo.require("dijit._Templated");
dojo.declare("unieap.layout.HBoxContainer",[unieap.layout.Container,dijit._Templated],{
	/**
	 * @declaredClass:
	 * 		unieap.layout.HBoxContainer
	 * @superClass:
	 * 		unieap.layout.Container
	 * @summary:
	 * 		水平容器，在容器中的组件会显示在一行中，如果长度超出，不会出现滚动条
	 * @example:
	 * |<div dojoType="unieap.layout.HBoxContainer" margins="5" paddings="5" width="80%"  height="40px">
	 * |	<div dojoType="unieap.form.Button" label="绝对" width="200px"></div>
	 * |	<div dojoType="unieap.form.TextBox" width="50%"></div>
	 * |	<div dojoType="unieap.form.TextBox" width="50%"></div>
	 * |	<span>文本显示</span>
	 * |</div>
	 */
	 
	//配置属性接口
	UserInterfaces : dojo.mixin({
		align : "string",
		pack : "string",
		margins : "string"
	},
	unieap.layout.Container.prototype.UserInterfaces),
	 
	templateString:'<div class="hbox-outer"><div class="hbox-inner" dojoAttachPoint="containerNode"></div></div>',
	
	/**
	 * @summary:
	 * 		设置HBoxContainer容器所嵌套的组件在其垂直方向的布局
	 * @description:
	 * 		"top"表示子容器居上显示
	 * 		"middle"表示子容器居中显示
	 * 		"bottom"表示子容器居下显示
	 * @type:
	 * 		{string}
	 * @enum:
	 * 		{"top"|"middle"|"bottom"}
	 * @default:
	 * 		"middle"
	 * @example:
	 * |<!-- 内容居上显示,与父容器上方有5px的间距 -->
	 * |<div dojoType="unieap.layout.HBoxContainer" align="top" width="80%" paddings="5 0 0 0" height="40px">
	 * |	<div dojoType="unieap.form.Button" label="绝对" width="200px"></div>
	 * |	<div dojoType="unieap.form.Button" label="百分比" width="50%"></div>
	 * |	<div dojoType="unieap.form.Button" label="百分比" width="50%"></div>
	 * |</div>
	 * @example:
	 * |<!-- 内容居下显示,与父容器下方有5px的间距 -->
	 * |<div dojoType="unieap.layout.HBoxContainer" align="bottom" width="80%" paddings="0 0 5 0" height="40px">
	 * |	<div dojoType="unieap.form.Button" label="绝对" width="200px"></div>
	 * |	<div dojoType="unieap.form.Button" label="百分比" width="50%"></div>
	 * |	<div dojoType="unieap.form.Button" label="百分比" width="50%"></div>
	 * |</div>
	 */
	align:'middle',
	
	
	postMixInProperties:function(){
		//在ie6、7xia，dojo无法获得align属性,总是返回默认值middle
		dojo.isIE<8&&(this.align=this.srcNodeRef.getAttribute('align')||this.align);
		this.inherited(arguments);
	},
	
	
	/**
	 * @summary:
	 * 		设置HBoxContainer容器所嵌套的组件在其水平方向上的布局
	 * @description:
	 * 		"start"表示从父容器内左侧开始定位
	 * 		"center"表示从父容器内中间开始定位
	 * 		"end"表示从父容器内右侧开始定位
	 * @type:
	 * 		{string}
	 * @default:
	 * 		"start"
	 * @enum:
	 * 		{"start"|"center"|"end"}
	 * 		
	 */
	pack:'start',
	
	
	/**
	 * @summary:
	 * 		设置HBoxContainer容器所嵌套的各个组件之间的间距
	 * @description:
	 * 		默认为"0 0 0 0",即{top:0, right:0, bottom:0, left:0}
	 * 		margins会按照如下策略(即浏览器解析css策略)进行解析:
	 *      (1)如果margins中只有一个数字,则top、right、bottom、left均为此值;
	 *      (2)如果margins中只有二个数字,则top、bottom为第一个数字,right和left为第二个数字;
	 *      (3)如果margins中只有三个数字，则top为第一个数字,left和right为第二个数字,bottom为第三个数字
	 *      (4)如果margins中有四个数字,按照top、right、bottom、left的方式分配数字
	 * @type:
	 * 		{string}
	 * @default:
	 * 		"0"
	 * @example:
	 * |<div dojoType="unieap.layout.HBoxContainer" margins="0 5 0 0" width="80%" align="bottom" height="40px">
	 * |	<div dojoType="unieap.form.Button" label="绝对" width="200px"></div>
	 * |	<div dojoType="unieap.form.Button" label="百分比" width="50%"></div>
	 * |	<div dojoType="unieap.form.Button" label="百分比" width="50%"></div>
	 * |</div>
	 */
	margins:'0',
	
	
	/**
	 * @summary:
	 * 		将HBoxContainer容器所嵌套的组件当成一个整体,设置其与HBoxContainer之间的间隔
	 * @description:
	 * 		可以参考margins属性进行设置
	 * @type:
	 * 		{string}
	 * @default:
	 * 		"0"
	 * @example:
	 * |<div dojoType="unieap.layout.HBoxContainer" padding="5 0 0 5" height="40px" width="80%">
	 * |	<div dojoType="unieap.form.Button" label="绝对宽度" width="150px"></div>
	 * |	<div dojoType="unieap.form.Button" label="百分比1" width="30%"></div>
	 * |	<div dojoType="unieap.form.Button" label="百分比2" width="70%"></div>
	 * |</div>
	 */
	paddings:'0',
	
	
	/**
	 * @summary：
	 * 		设置容器的高度
	 * @type：
	 * 		{string}
	 * @default：
	 * 		"100%"
	 */
	height:'100%',
	
	/**
	 * @summary：
	 * 		设置容器的宽度
	 * @type：
	 * 		{string}
	 * @default：
	 * 		"auto"
	 */
	width:'auto',
	
	
	postCreate:function(){
		this.margins=this.margins||{top:0,right:0,bottom:0,left:0};
		this.paddings=this.paddings||{top:0,right:0,bottom:0,left:0};
		dojo.isString(this.margins)&&(this.margins=this.parseMargins(this.margins));
		dojo.isString(this.paddings)&&(this.paddings=this.parseMargins(this.paddings));
		//调用父类的initContainer方法,监听控件大小的变化
		this.initContainer();
		
	},
	
	
	//等待容器嵌套的组件渲染完毕后执行
	startup:function(){
		this.doLayout();
		this.inherited(arguments);
	},
	
	//覆盖父类方法,该方法用来调整其嵌套的组件大小
	resizeContainer:function(){
		if(null == this.domNode) return;
		this.doLayout();
	},
	
	//开始布局
	doLayout:function(){
		var nodes=this.containerNode.childNodes,
			fixed=[],//设置绝对宽度的节点
			noFixed=[],//设置百分比宽度的节点
			percent=0,//总百分比
			availableWidth=dojo.contentBox(this.containerNode).w; //设置百分比宽度的节点可用的总宽度
		this.pureWidth=0;//HBox嵌套的子节点的实际宽度(offsetWidth)

		//遍历容器下嵌套的所有DomNode节点
		for(var l=nodes.length,i=l-1,node;i>=0;i--){
			node=nodes[i];
			//清除可能嵌套的文本,不允许直接嵌套文本
			if(node.nodeType==3){
				this.containerNode.removeChild(node);
				continue;
			}
			if(node.offsetHeight==0) continue;
			var obj=this._getWidth(node);
			if(obj['isPercent']){
				percent+=obj['width'];
				noFixed.unshift(node);
			}else{
				fixed.unshift(node);
			}
		}
		
		//可用的宽度为容器的实际宽度-paddings.left-嵌套的组件个数*(this.margins.left+this.margins.right)
		availableWidth=availableWidth-this.paddings.left-(this.margins.left+this.margins.right)*(nodes.length)-this.paddings.right;
		
		//处理非百分比的DomNode节点
		for (var i = 0, l = fixed.length, node; i < l; i++) {
			node = fixed[i];
			var width=this._getWidth(node)['width'];
			this.pureWidth+=width;
			availableWidth -= width;
		}
		
		//处理百分比的DomNode节点
		for(var i=0,l=noFixed.length,node;i<l;i++){
			node=noFixed[i];
			var width=0;
			//检查剩余的长度是否大于0
			if(availableWidth>0){
				width=Math.floor((availableWidth+0.0)*this._getWidth(node)['width']/percent);
				//检查node是否存在borderLeft和borderRight,因为在w3c标准下border是占宽度的
				var offset=dojo.marginBox(node).w-dojo.contentBox(node).w;
				dojo.style(node,'width',(width-offset)+"px");
			}else{
				width=node.offsetWidth;
			}
			this.pureWidth+=width;
		}
		
		//对控件进行绝对定位
		for (var i = 0, l = nodes.length; i < l; i++) {
			node = nodes[i];
			if (i == 0) {
				node.style.position = "absolute";
				//处理pack属性
				node.style.left = this._getPackLeft() + "px";
			}
			else {
				var prevNode = nodes[i - 1];
				node.style.position = "absolute";
				//前一个节点的left+前一个节点的width+this.margins.right+this.margins.left
				node.style.left =(dojo.style(prevNode, 'left') + dojo.marginBox(prevNode).w+ this.margins.right + this.margins.left) + "px";
			}
			//处理align处理
			this._doVeticalLayout(node);
		}
		
		//定位好子容器后，调整子容器的大小
		unieap.fireContainerResize(this.containerNode);
	},
	
	//获得DomNode的宽度
	_getWidth:function(node){
		var widget=dijit.byNode(node),
			width=(widget||0).width||node.style.width;
		if(width&&this.isPercent(width)){
			return {
				width: parseInt(width,10)||100,
				isPercent: true
			}
		}
		
		return {width:dojo.marginBox(node).w};
	},
	
	//处理align属性
	_doVeticalLayout:function(node){
		switch(this.align){
			case 'top':
				//默认居上显示时,top值为this.padding.top+this.margins.top
				var distance=this.paddings.top+this.margins.top;
				node.style.top=distance+"px";
				break;
				
			//居下显示
			case "bottom":
				var distance=this.containerNode.offsetHeight-dojo.marginBox(node).h-this.margins.bottom-this.paddings.bottom;
				if(distance<=0) {
					node.style.top=this.paddings.top+"px";
					return;
				}
				node.style.top=distance+"px";
				break;

			//默认居中显示
			default:
				var distance=(this.containerNode.offsetHeight-dojo.marginBox(node).h)/2.0;
				if(distance<=0){
					node.style.top=this.paddings.top+"px";
					return;
				}
				distance>=this.paddings.top?(distance=distance):(distance=this.paddings.top);
				distance+=this.margins.top;
				node.style.top=distance+"px";
				break;
		}
	},
	
	//处理pack属性
	_getPackLeft:function(){
		switch(this.pack){
			case 'center':
				var width=dojo.contentBox(this.containerNode).w,
					pureWidth=this.pureWidth;
				if(pureWidth>width) return this.paddings.left;
				pureWidth+=(this.margins.left+this.margins.right)*this.containerNode.childNodes.length;
				var distance=(width-pureWidth)/2.0;
				distance>this.paddings.left?(distance=distance):(distance=this.paddings.left);
				return distance;
			case 'end':
				var width=dojo.contentBox(this.containerNode).w,
					pureWidth=this.pureWidth;
				if(pureWidth>width) return this.paddings.left;
				pureWidth+=(this.margins.left+this.margins.right)*this.containerNode.childNodes.length;
				var distance=width-pureWidth-this.paddings.right;
				distance>this.paddings.left?(distance=distance):(distance=this.paddings.left);
				return distance;
			//默认pack为start
			default:
				return this.paddings.left+this.margins.left;
		}
	},
	
	//判断字符串str是否比百分比结尾
	isPercent:function(str){
		str=String(str);
		return (str.indexOf("%")==str.length-1)||(str=='auto');
	},

	//解析margins或者paddings属性
    parseMargins : function(margins){
		margins=dojo.trim(String(margins));
        var ms = margins.split(/\s+/),
			len = ms.length;
        if(len == 1){
            ms[1] = ms[2] = ms[3] = ms[0];
        } else if(len == 2){
            ms[2] = ms[0];
            ms[3] = ms[1];
        } else if(len == 3){
            ms[3] = ms[1];
        }
        return {
            top:parseInt(ms[0], 10) || 0,
            right:parseInt(ms[1], 10) || 0,
            bottom:parseInt(ms[2], 10) || 0,
            left:parseInt(ms[3], 10) || 0
        };
    }
	
})

dojo.provide("unieap.layout.VBoxContainer");
dojo.require("unieap.layout.Container");
dojo.require("dijit._Templated");
dojo.declare("unieap.layout.VBoxContainer",[unieap.layout.Container,dijit._Templated],{
	/**
	 * @declaredClass:
	 * 		unieap.layout.VBoxContainer
	 * @superClass:
	 * 		unieap.layout.Container
	 * @summary:
	 * 		垂直容器，在容器中的组件会显示在一列中
	 * @example:
	 * |<div dojoType="unieap.layout.VBoxContainer" margins="5" paddings="5" width="20%" height="90%">
	 * |	<div dojoType="unieap.form.Button" label="绝对"></div>
	 * |	<div dojoType="unieap.form.TextBox"></div>
	 * |	<div dojoType="unieap.form.TextBox"></div>
	 * |	<span>文本显示</span>
	 * |</div>
	 */
	 
	//配置属性接口
	UserInterfaces : dojo.mixin({
		align : "string",
		pack : "string",
		margins : "string",
		paddings : "string"
	},
	unieap.layout.Container.prototype.UserInterfaces), 
	 
	templateString:'<div class="vbox-outer"><div class="vbox-inner" dojoAttachPoint="containerNode"></div></div>',

	/**
	 * @summary:
	 * 		设置VBoxContainer容器所嵌套的组件在其水平方向的布局
	 * @description:
	 * 		"left"表示子容器居左显示
	 * 		"middle"表示子容器居中显示
	 * 		"right"表示子容器居右显示
	 * @type:
	 * 		{string}
	 * @enum:
	 * 		{"left"|"middle"|"right"}
	 * @default:
	 * 		"middle"
	 * @example:
	 * |<!-- 内容居左显示,与父容器上方有5px的间距 -->
	 * |<div dojoType="unieap.layout.VBoxContainer" align="left" width="20%" paddings="5 0 0 0" height="90%">
	 * |	<div dojoType="unieap.form.Button" label="绝对"></div>
	 * |	<div dojoType="unieap.form.Button" label="百分比"></div>
	 * |	<div dojoType="unieap.form.Button" label="百分比"></div>
	 * |</div>
	 * @example:
	 * |<!-- 内容居右显示,与父容器上方有5px的间距 -->
	 * |<div dojoType="unieap.layout.VBoxContainer" align="right" width="20%" paddings="5 0 0 0" height="90%">
	 * |	<div dojoType="unieap.form.Button" label="绝对"></div>
	 * |	<div dojoType="unieap.form.Button" label="百分比"></div>
	 * |	<div dojoType="unieap.form.Button" label="百分比"></div>
	 * |</div>
	 */
	align:'left',


	postMixInProperties:function(){
		//在ie6、7xia，dojo无法获得align属性,总是返回默认值middle
		dojo.isIE<8&&(this.align=this.srcNodeRef.getAttribute('align')||this.align);
		this.inherited(arguments);
	},


	/**
	 * @summary:
	 * 		设置VBoxContainer容器所嵌套的组件在其垂直方向上的布局
	 * @description:
	 * 		"start"表示从父容器内顶端开始定位
	 * 		"center"表示从父容器内中间开始定位
	 * 		"end"表示从父容器内底部开始定位
	 * @type:
	 * 		{string}
	 * @default:
	 * 		"start"
	 * @enum:
	 * 		{"start"|"center"|"end"}
	 *
	 */
	pack:'center',


	/**
	 * @summary:
	 * 		设置VBoxContainer容器所嵌套的各个组件之间的间距
	 * @description:
	 * 		默认为"0 0 0 0",即{top:0, right:0, bottom:0, left:0}
	 * 		margins会按照如下策略(即浏览器解析css策略)进行解析:
	 *      (1)如果margins中只有一个数字,则top、right、bottom、left均为此值;
	 *      (2)如果margins中只有二个数字,则top、bottom为第一个数字,right和left为第二个数字;
	 *      (3)如果margins中只有三个数字，则top为第一个数字,left和right为第二个数字,bottom为第三个数字
	 *      (4)如果margins中有四个数字,按照top、right、bottom、left的方式分配数字
	 * @type:
	 * 		{string}
	 * @default:
	 * 		"0"
	 * @example:
	 * |<div dojoType="unieap.layout.VBoxContainer" margins="5 0 0 0" width="20%" align="left" height="90%">
	 * |	<div dojoType="unieap.form.Button" label="绝对"></div>
	 * |	<div dojoType="unieap.form.Button" label="百分比"></div>
	 * |	<div dojoType="unieap.form.Button" label="百分比"></div>
	 * |</div>
	 */
	margins:'0',


	/**
	 * @summary:
	 * 		将VBoxContainer容器所嵌套的组件当成一个整体,设置其与VBoxContainer之间的间隔
	 * @description:
	 * 		可以参考margins属性进行设置
	 * @type:
	 * 		{string}
	 * @default:
	 * 		"0"
	 * @example:
	 * |<div dojoType="unieap.layout.VBoxContainer" padding="5 0 0 5" height="90%" width="20%">
	 * |	<div dojoType="unieap.form.Button" label="绝对"></div>
	 * |	<div dojoType="unieap.form.Button" label="百分比1"></div>
	 * |	<div dojoType="unieap.form.Button" label="百分比2"></div>
	 * |</div>
	 */
	paddings:'0',


	/**
	 * @summary：
	 * 		设置容器的高度
	 * @type：
	 * 		{string}
	 * @default：
	 * 		'100%'
	 */
	height:'100%',

	/**
	 * @summary：
	 * 		设置容器的宽度
	 * @type：
	 * 		{string}
	 * @default：
	 * 		'auto'
	 */
	width:'auto',


	postCreate:function(){
		this.margins=this.margins||{top:0,right:0,bottom:0,left:0};
		this.paddings=this.paddings||{top:0,right:0,bottom:0,left:0};
		dojo.isString(this.margins)&&(this.margins=this.parseMargins(this.margins));
		dojo.isString(this.paddings)&&(this.paddings=this.parseMargins(this.paddings));
		//调用父类的initContainer方法,监听控件大小的变化
		this.initContainer();

	},


	//等待容器嵌套的组件渲染完毕后执行
	startup:function(){
		this.doLayout();
	},

	//覆盖父类方法,该方法用来调整其嵌套的组件大小
	resizeContainer:function(){
		if(null == this.domNode) return;
		this.doLayout();
	},


	//开始布局
	doLayout:function(){
		var nodes=this.containerNode.childNodes,
			fixed=[],//设置绝对高度的节点
			noFixed=[],//设置百分比高度的节点
			percent=0,//总百分比
			availableHeight=dojo.contentBox(this.containerNode).h; //设置百分比高度的节点可用的总高度
		this.pureHeight=0;//VBox嵌套的子节点的实际高度(offsetHeight)

		//遍历容器下嵌套的所有DomNode节点
		for(var l=nodes.length,i=l-1,node;i>=0;i--){
			node=nodes[i];
			//清除可能嵌套的文本,不允许直接嵌套文本
			if(node.nodeType==3){
				this.containerNode.removeChild(node);
				continue;
			}
			var widget=dijit.byNode(node),
				height=(widget||0).height||node.style.height;
			if(node.offsetHeight==0&&height!="auto") continue;

			//将所有节点宽度为auto转换为100%
			var width=(widget||0).width||node.style.width;
			if(width=='auto'){node.style.width='100%';}

			var obj=this._getHeight(node);
			if(obj['isPercent']){
				percent+=obj['height'];
				noFixed.unshift(node);
			}else{
				fixed.unshift(node);
			}
		}
		//可用的高度为容器的实际高度-paddings.top-paddings.bottom-嵌套的组件个数*(this.margins.top+this.margins.bottom)
		availableHeight=availableHeight-this.paddings.top-this.paddings.bottom-(this.margins.top+this.margins.bottom)*(nodes.length);

		//处理非百分比的DomNode节点
		for (var i = 0, l = fixed.length, node; i < l; i++) {
			node = fixed[i];
			var height=this._getHeight(node)['height'];
			this.pureHeight +=height;
			availableHeight -=height;
		}

		//处理百分比的DomNode节点
		for(var i=0,l=noFixed.length,node;i<l;i++){
			node=noFixed[i];
			var height=0;
			//检查剩余的长度是否大于0
			if(availableHeight>0){
				height=Math.floor((availableHeight+0.0)*this._getHeight(node)['height']/percent);
				//检查node是否存在borderLeft和borderRight,因为在w3c标准下border是占高度的
				var offset=dojo.marginBox(node).h-dojo.contentBox(node).h;
				(dijit.byNode(node||0)||0).setHeight?dijit.byNode(node).setHeight((height-offset)+"px"):dojo.style(node,'height',(height-offset)+"px");
			}else{
				height=node.offsetHeight;
			}
			this.pureHeight+=height;
		}

		//对控件进行绝对定位
		for (var i = 0, l = nodes.length; i < l; i++) {
			node = nodes[i];
			if (i == 0) {
				node.style.position = "absolute";
				//处理pack属性
				node.style.top = this._getPack() + "px";
			}
			else {
				var prevNode = nodes[i - 1];
				node.style.position = "absolute";
				//前一个节点的top+前一个节点的height+this.margins.bottom+this.margins.top
				node.style.top =(dojo.style(prevNode, 'top') + dojo.marginBox(prevNode).h+ this.margins.bottom + this.margins.top) + "px";
			}
			//处理align处理
			this._doVeticalLayout(node);
		}

		unieap.fireContainerResize(this.domNode);

	},

	//获得DomNode的高度
	_getHeight:function(node){
		var widget=dijit.byNode(node),
			height=(widget||0).height||node.style.height;
		if(height&&this.isPercent(height)){
			return {
				height: parseInt(height,10)||100,
				isPercent: true
			}
		}

		return {height:dojo.marginBox(node).h};
	},

	//处理align属性
	_doVeticalLayout:function(node){
		switch(this.align){
			case 'middle':
				var distance=(this.containerNode.offsetWidth-node.offsetWidth)/2.0;
				if(distance<=0){
					node.style.left=this.paddings.left+"px";
					return;
				}
				distance>=this.paddings.left?(distance=distance):(distance=this.paddings.left);
				distance+=this.margins.left;
				node.style.left=distance+"px";
				break;

			//居右显示
			case "right":
				var distance=this.containerNode.offsetWidth-dojo.marginBox(node).w-this.margins.right-this.paddings.right;
				if(distance<=0) {
					node.style.left=this.paddings.left+"px";
					return;
				}

				node.style.left=distance+"px";
				break;

			//默认align为居左显示
			default:
				//left值为this.padding.left+this.margins.left
				var distance=this.paddings.left+this.margins.left;
				node.style.left=distance+"px";
				break;
		}
	},

	//处理pack属性
	_getPack:function(){
		switch(this.pack){
			case 'start':
				return this.paddings.top+this.margins.top;
			case 'end':
				var height=dojo.contentBox(this.containerNode).h,
					pureHeight=this.pureHeight;
				if(pureHeight>height) return this.paddings.top;
				pureHeight+=(this.margins.top+this.margins.bottom)*this.containerNode.childNodes.length;
				var distance=height-pureHeight-this.paddings.bottom;

				distance>this.paddings.top?(distance=distance):(distance=this.paddings.top);
				return distance;
			// 默认pack为center
			default:
				var height=dojo.contentBox(this.containerNode).h,
				pureHeight=this.pureHeight;
				if(pureHeight>height) return this.paddings.top;
				pureHeight+=(this.margins.top+this.margins.bottom)*this.containerNode.childNodes.length;
				var distance=(height-pureHeight)/2.0;
				distance>this.paddings.top?(distance=distance):(distance=this.paddings.top);
				return distance;
		}
	},

	//判断字符串str是否比百分比结尾
	isPercent:function(str){
		str=String(str);
		return (str.indexOf("%")==str.length-1)||(str=='auto');
	},

	//解析margins或者paddings属性
    parseMargins : function(margins){
		margins=dojo.trim(String(margins));
        var ms = margins.split(/\s+/),
			len = ms.length;
        if(len == 1){
            ms[1] = ms[2] = ms[3] = ms[0];
        } else if(len == 2){
            ms[2] = ms[0];
            ms[3] = ms[1];
        } else if(len == 3){
            ms[3] = ms[1];
        }
        return {
            top:parseInt(ms[0], 10) || 0,
            right:parseInt(ms[1], 10) || 0,
            bottom:parseInt(ms[2], 10) || 0,
            left:parseInt(ms[3], 10) || 0
        };
    }
})

dojo.provide("unieap.wizard.Wizard");
dojo.require("unieap.layout.StackContainer");
dojo.require("dijit._Templated");
dojo.require("unieap.form.Button");

dojo.declare("unieap.wizard.Wizard", [unieap.layout.StackContainer, dijit._Templated], {
	
	/**
	 * @declaredClass:
	 * 		unieap.wizard.Wizard
	 * @superClass:
	 * 		unieap.layout.StackContainer
	 * @summary:
	 * 		下一步和上一步按钮在不同页面之间切换，完成按钮完成向导，取消按钮取消向导。
	 * @example:
	 * |<div dojoTYpe="unieap.wizard.Wizard">
	 * |	<div dojoType="unieap.layout.ContentPane">Yes</div>
	 * |	<div dojoType="unieap.layout.ContentPane">NO</div>
	 * |</div>
	 */
	
	_previousButton: null,
	_nextButton: null,
	_doneButton: null,
	_cancelButton: null,
	
	_buttonManager: null,
	
	UserInterfaces: dojo.mixin({
		onBeforeBack: "function",
		onBack: "function",
		onAfterBack: "function",
		onBeforeNext: "function",
		onNext: "function",
		onAfterNext: "function",
		onDone: "function",
		onCancel: "function",
		setBackDisabled: "function",
		setNextDisabled: "function",
		setDoneDisabled: "function",
		setCancelDisabled: "function",
		step:"boolean",
		"class":"string",
		buttons: "object",
		buttonAlign: "string",
	}, 
	unieap.layout.Container.prototype.UserInterfaces),
	
	templateString: 
		'<div dojoAttachPoint="domNode" class="wizard-wrapper">' +
			'<div dojoAttachPoint="wizardTopNode" class="wizardTopNode"></div>' + 
			'<div dojoAttachPoint="containerNode" class="stackcontainer wizard-container"></div>' + 
			'<div class="wizard-nav">' +
			'<div dojoAttachPoint="navNode"></div>' + 
			'</div>' +
    	'</div>',
	
	/**
	 * @summary:
	 * 		是否显示向导步骤的导航栏
	 * @type:
	 * 		{boolean}
	 * @default:
	 * 		false
	 */
	step:false,
	
	/**
	 * @summary:
	 * 		自定义按钮
	 * @type:
	 * 		{object}
	 * @description
	 *  	自定义页面按钮。
	 *  	配置项以JSON数组的形式进行配置，数组的子项代表相应向导页所显示的按钮。
	 *  	支持预设按钮（next：下一页；prev：上一页；finish：完成；cancel：取消）和自定义按钮（属性请参考 unieap.form.Button）。
	 *  	示例中，第一页显示下一页按钮，第二页显示上一页按钮、自定义按钮和取消按钮。
	 * @example:
	 * |<div dojoTYpe="unieap.layout.StackContainer" buttons="['next', ['prev', {id: 'customButton', label: '自定义'}, 'cancel']]" height="450px">
	 * |	<div dojoType="unieap.layout.ContentPane">第一个页面</div>
	 * |	<div dojoType="unieap.layout.ContentPane">第二个页面</div>
	 * |</div>
	 * |<script type="text/javascript">
	 * |	var customButton = unieap.byId('customButton');
	 * |	customButton.onClick = function() { doSomething(); }
	 * |</script>
	 */
	buttons: null,
	
	/**
	 * @summary:
	 * 		按钮位置
	 * @type:
	 * 		{string}
	 * @default:
	 * 		"center"
	 * @example:
	 * |<div dojoTYpe="unieap.layout.StackContainer" height="450px" buttonAlign="left">
	 * |	<div dojoType="unieap.layout.ContentPane">第一个页面</div>
	 * |	<div dojoType="unieap.layout.ContentPane">第二个页面</div>
	 * |</div>
	 */
	buttonAlign: "center",
	
    postCreate: function() {
    	this.inherited(arguments);
    	
    	// 初始化
    	this._init();
    },
    
    resizeContainer:function(){
		this.inherited(arguments);
		this._setPerStepWidth();
		
	},
	
	_init: function() {
		if("left" == this.buttonAlign) {
			dojo.style(this.navNode, {"float": "left"});
		} else if("right" == this.buttonAlign) {
			dojo.style(this.navNode, {"float": "right"});
		} else if("center" == this.buttonAlign) {
			dojo.style(this.navNode, {"margin": "0 auto", "width": "300px","text-align":"center"});
		}
		
    	this._initManager();  // 初始化管理器
	},
	
	_initManager: function() {
		var params = {wizard: this};
		
		dojo.require("unieap.wizard.ButtonManager");
		this._buttonManager = new unieap.wizard.ButtonManager(dojo.mixin(params, {
			buttons: this.buttons,
			buttonAlign: this.buttonAlign
		}));
	},
	
	 _getChildrenSize: function() {
		var size = 0;
		var children = this.getChildren();
    	for(var i=0;i<children.length;i++){
    		if(children[i].title) size++;
    	}
    	return size;
    },
    
	_setPerStepWidth: function(){
		var perWidth = this._calPerStepWidth();
		var links = dojo.query("dd",this.wizardTopNode);
		dojo.forEach(links,function(link){
			dojo.style(link,"width",perWidth + "px");
		});
	},
	
	_calPerStepWidth: function(){
		var size =  this._getChildrenSize();
    	var children = this.getChildren();
    	var navSize =size>4?size:4;
    	var navWidth = dojo.style(this.wizardTopNode,"width");
    	navWidth = navWidth - (navSize-1) * 20;
    	var perWidth = navWidth/navSize;
    	return perWidth;
	},
    
    _createTopNav: function(){
		if(this.step){
//			var size =  this._getChildrenSize();
			var children = this.getChildren();
			var perWidth = this._calPerStepWidth();
			var str = "<dl class=\"steps\">"
				for(var i=0;i<children.length;i++){
					if(children)
						str+="<dd class=\"step-gray\">" + children[i].title + "</dd>"
				}
			str+= "</dl>";
			this.wizardTopNode.innerHTML = str;
			this._setPerStepWidth();
			this.selectStep(0);
		}
    },
    
    _removeAllClass: function(node){
    	dojo.removeClass(node,"step-gray");
    	dojo.removeClass(node,"first-selected");
    	dojo.removeClass(node,"step-color-gray");
    	dojo.removeClass(node,"step-selected");
    	dojo.removeClass(node,"step-done");
    },
    
    selectStep: function(index){
    	if(this.step){
    		var links = dojo.query("dd",this.wizardTopNode);
    		for(var i=0;i<links.length;i++){
    			if(i == index){
    				this._removeAllClass(links[i]);
    				if(i==0){
    					dojo.addClass(links[i],"first-selected");
    				}else{
    					dojo.addClass(links[i],"step-selected");
    				}
    			}else if(i == index + 1){
    				this._removeAllClass(links[i]);
    				dojo.addClass(links[i],"step-color-gray");
    			}else{
    				this._removeAllClass(links[i]);
    				if(i == 0){
    					dojo.addClass(links[i],"step-done");
    				}else{
    					dojo.addClass(links[i],"step-gray");
    				}
    			}
    		}
    	}
	},
    
    startup: function() {
    	this.inherited(arguments);
    	this._createTopNav();
    	
    	this._buttonManager.refresh();
    },
    
    back: function(params) {
    	var child = this.getSelectedChild();
    	var index = this.getIndexOfChild(child);
    	if(!unieap.fireEvent(this, this.onBeforeBack, [event, index, child])) {
			if(!unieap.fireEvent(this, this.onBack, [event])) {
				// 调用父类back方法
				this.inherited(arguments);
				
				this._buttonManager.refresh();
				
				child = this.getSelectedChild();
				index = this.getIndexOfChild(child);
				//this.selectStep(index);
				
				unieap.fireEvent(this, this.onAfterBack, [event, index, child]);
			}
    	}
    },
    
	
	// 事件处理
	_handleBackEvent: function(event) {
		this.back();
	},
	
	forward: function(params) {
		var child = this.getSelectedChild();
    	var index = this.getIndexOfChild(child);
    	if(!unieap.fireEvent(this, this.onBeforeNext, [event, index, child])) {
			if(!unieap.fireEvent(this, this.onNext, [event])) {
				// 调用父类forword方法
				this.inherited(arguments);
				
				this._buttonManager.refresh();
				
				child = this.getSelectedChild();
				index = this.getIndexOfChild(child);
				//this.selectStep(index);
				
				unieap.fireEvent(this, this.onAfterNext, [event, index, child]);
			}
    	}
	},
	
	
	_handleNextEvent: function(event) {
		this.forward();
	},
	
	_handleDoneEvent: function(event) {
		if(!unieap.fireEvent(this, this.onDone, [event])) {
			//
		}
	},
	
	_handleCancelEvent: function(event) {
		if(!unieap.fireEvent(this, this.onCancel, [event])) {
			//
		}
	},
	
	// 事件处理
	/**
	 * @summary:
	 * 		上一步前事件
	 * @description:
	 * 		在触发上一步之前，会调用该事件；
	 * 		该事件要求有boolean型的返回值，当返回值为false时将阻止向导的上一步的操作。
	 * @example:
	 * |<script type="text/javascript">
	 * |	var wizard=unieap.byId('myWizard');
	 * |	wizard.onBeforeBack = function() { 
	 * | 		var result = validatePage();
	 * |		return result;
	 * |	}
	 * |</script>
	 */
	onBeforeBack: function() {},
	/**
	 * @summary:
	 * 		上一步事件
	 * @description:
	 * 		在点击上一步按钮时，回调该方法
	 * @example:
	 * |<script type="text/javascript">
	 * |	var wizard=unieap.byId('myWizard');
	 * |	wizard.onBack = function() { doSomething(); }
	 * |</script>
	 */
	onBack: function() {},
	/**
	 * @summary:
	 * 		上一步后事件
	 * @description:
	 * 		在触发上一步之后，回调该方法
	 * @example:
	 * |<script type="text/javascript">
	 * |	var wizard=unieap.byId('myWizard');
	 * |	wizard.onAfterBack = function() { doSomething(); }
	 * |</script>
	 */
	onAfterBack: function() {},
	
	/**
	 * @summary:
	 * 		下一步前事件
	 * @description:
	 * 		在触发下一步之前，会调用该事件；
	 * 		该事件要求有boolean型的返回值，当返回值为false时将阻止向导的下一步的操作。
	 * @example:
	 * |<script type="text/javascript">
	 * |	var wizard=unieap.byId('myWizard');
	 * |	wizard.onBeforeNext = function() { 
	 * | 		var result = validatePage();
	 * |		return result;
	 * |	}
	 * |</script>
	 */
	onBeforeNext: function() {},
	/**
	 * @summary:
	 * 		下一步事件
	 * @description:
	 * 		在点击下一步按钮时，回调该方法
	 * @example:
	 * |<script type="text/javascript">
	 * |	var wizard=unieap.byId('myWizard');
	 * |	wizard.onNext = function() { doSomething(); }
	 * |</script>
	 */
	onNext: function(event) {},
	/**
	 * @summary:
	 * 		下一步后事件
	 * @description:
	 * 		在触发下一步之后，回调该方法
	 * @example:
	 * |<script type="text/javascript">
	 * |	var wizard=unieap.byId('myWizard');
	 * |	wizard.onAfterNext = function() { doSomething(); }
	 * |</script>
	 */
	onAfterNext: function() {},
	
	/**
	 * @summary:
	 * 		完成事件
	 * @description:
	 * 		在点击完成按钮时，回调该方法
	 * @example:
	 * |<script type="text/javascript">
	 * |	var wizard=unieap.byId('myWizard');
	 * |	wizard.onDone = function() { doSomething(); }
	 * |</script>
	 */
	onDone: function(event) {},
	
	/**
	 * @summary:
	 * 		取消事件
	 * @description:
	 * 		在点击取消按钮时，回调该方法
	 * @example:
	 * |<script type="text/javascript">
	 * |	var wizard=unieap.byId('myWizard');
	 * |	wizard.onCancel = function() { doSomething(); }
	 * |</script>
	 */
	onCancel: function(event) {},
	
	/**
	 * @summary:
	 * 		是否禁用上一页按钮
	 * @description:
	 * 		禁用的上一页按钮灰显且无法点击
	 * @example:
	 * |<script type="text/javascript">
	 * |	var wizard=unieap.byId('myWizard');
	 * |	wizard.setBackDisabled(true);
	 * |</script>
	 */
	setBackDisabled: function(state) {
		this._buttonManager._backButton.setDisabled(state);
	},
	
	/**
	 * @summary:
	 * 		是否禁用下一页按钮
	 * @description:
	 * 		禁用的下一页按钮灰显且无法点击
	 * @example:
	 * |<script type="text/javascript">
	 * |	var wizard=unieap.byId('myWizard');
	 * |	wizard.setNextDisabled(true);
	 * |</script>
	 */
	setNextDisabled: function(state) {
		this._buttonManager._nextButton.setDisabled(state);
	},
	
	/**
	 * @summary:
	 * 		是否禁用完成按钮
	 * @description:
	 * 		禁用的完成按钮灰显且无法点击
	 * @example:
	 * |<script type="text/javascript">
	 * |	var wizard=unieap.byId('myWizard');
	 * |	wizard.setDoneDisabled(true);
	 * |</script>
	 */
	setDoneDisabled: function(state) {
		this._buttonManager._doneButton.setDisabled(state);
	},
	
	/**
	 * @summary:
	 * 		禁用取消按钮
	 * @description:
	 * 		禁用的取消按钮灰显且无法点击
	 * @example:
	 * |<script type="text/javascript">
	 * |	var wizard=unieap.byId('myWizard');
	 * |	wizard.setCancelDisabled(true);
	 * |</script>
	 */
	setCancelDisabled: function(state) {
		this._buttonManager._cancelButton.setDisabled(state);
	}
	
});
dojo.provide("unieap.ImageViewer");
dojo.require("unieap.form.Button");
dojo.require("unieap.form.NumberSpinner");
dojo.declare("unieap.ImageViewer", [dijit._Widget, dijit._Templated], {
	/**
	 * @declaredClass:
	 * 		unieap.ImageViewer
	 * @summary:
	 * 		图片浏览功能，并可对照片进行缩放和旋转
	 * @example:
	 * |<div dojoType="unieap.widget.ImageViewer" src="img.png"></div>
	 * 		显示路径为“img.png”的图片
	 * @img:
	 * 		images/imageViewer/imageViewer.png
	 */
	 
	//配置属性接口 
	UserInterfaces : dojo.mixin({
		src : "string",
		width : "string",
		height : "string",
		zoom: "string",
		setSrc : "function",
		setWidth : "function",
		setHeight : "function",
		setZoom: "function"
	}),
	
	/**
	 * @summary:
	 * 		图片的路径
	 * @type:
	 * 		{string}
	 */
	src: '',
	
	/**
	 * @summary:
	 * 		组件宽度，默认为“400px”
	 * @type:
	 * 		{string}
	 */
	width: '400px',
	
	/**
	 * @summary:
	 * 		组件的高度，默认为“500px”
	 * @type:
	 * 		{string}
	 */
	height: '500px',
	
	/**
	 * @summary:
	 * 		缩放相关信息
	 * @type:
	 * 		{string}
	 * @example:
	 *     | {"maxZoom":"200%", "minZoom": "10%", "delta": "20", "multiple":"1.6"}
	 */
	zoom: '',
	
	// 全局相关
	_multiple: 2,
	_delta: 10,
	_maxZoom: 200,
	_minZoom: 20,
	_isInitialized: false,
	_isFit: false,
	
	// 缩放相关
	_isImageLoaded: false,
	_currentZoomRate: 1,
	_zoomRateNumberSpinner: null,
	_originalWidth: 0,
	_originalHeight: 0,
	
	// 拖拽图片相关
	_isDragEnable: true,
	_isDragging: false,
	_oldX: 0,
	_oldY: 0,
	
	// 旋转图片相关
	_currentRotateAngle: 0,
	
	templateString:
			'<div dojoAttachPoint="domNode">' + 
				'<div dojoAttachPoint="wrapperNode">' +
					'<img dojoAttachPoint="imgNode"></img>' +
					'<div dojoAttachPoint="toobarNode"></div>' +
				'</div>' +
			'</div>',
			
	postCreate:function(){
		this.inherited(arguments);
		
		dojo.addClass(this.wrapperNode, 'imageviewer-wrapper');
		dojo.addClass(this.imgNode, 'imageviewer-image');
		dojo.addClass(this.toobarNode, 'imageviewer-toolbar');
		this.width&&this.setWidth(this.width);
		this.height&&this.setHeight(this.height);
		this.zoom&&this.setZoom(this.zoom);
		
		this.connect(this.imgNode, 'onload', this._handleImageLoadEvent);
		
		this.src&&this.setSrc(this.src);
	},
	
	// 绑定事件
	_bind:function(){
		this.connect(this.imgNode, 'mousedown', this._handleMouseDownEvent);
		this.connect(this.imgNode, 'mousemove', this._handleMouseMoveEvent);
		this.connect(this.imgNode, 'mouseup', this._handleMouseUpEvent);
		this.connect(this.imgNode, 'mouseout', this._handleMouseUpEvent);
		
		var browser = this._browser();
		if(browser.firefox) {
			this.connect(this.imgNode, 'DOMMouseScroll', this._handleMouseWheelEvent);
		} else {
			this.connect(this.imgNode, 'mousewheel', this._handleMouseWheelEvent);
		}
		
		this.connect(this.toobarNode, 'mouseout', this._handleToolbarOutEvent);
	},
	
	// 创建工具栏
	_createToolbar:function() {
		this._createLeftRotateButton();
		this._createRightRotateButton();
		this._createFitButton();
		this._createZoomOutButton();
		this._createZoomInButton();
		this._createZoomPercentDIV();
		this._createZoomRateInput();
	},
	_createLeftRotateButton:function(){
		var leftRotateButton = new unieap.form.Button({
			iconClass: 'imageviewer-toolbar-icon-rotate-left',
			width: '50px',
			height: '40px'
		});
		dojo.addClass(leftRotateButton.domNode, 'imageviewer-toolbar-common');
		dojo.addClass(leftRotateButton.domNode, 'imageviewer-toolbar-btn-rotate-left');
		this.toobarNode.appendChild(leftRotateButton.domNode);
		this.connect(leftRotateButton, 'onClick', this._handleLeftRotateEvent);
	},
	_createRightRotateButton:function(){
		var rightRotateButton = new unieap.form.Button({
			iconClass: 'imageviewer-toolbar-icon-rotate-right',
			width: '50px',
			height: '40px'
		});
		dojo.addClass(rightRotateButton.domNode, 'imageviewer-toolbar-common');
		dojo.addClass(rightRotateButton.domNode, 'imageviewer-toolbar-btn-rotate-right');
		this.toobarNode.appendChild(rightRotateButton.domNode);
		this.connect(rightRotateButton, 'onClick', this._handleRightRotateEvent);
	},
	_createFitButton:function(){
		var rightRotateButton = new unieap.form.Button({
			iconClass: 'imageviewer-toolbar-icon-fit',
			width: '50px',
			height: '40px'
		});
		dojo.addClass(rightRotateButton.domNode, 'imageviewer-toolbar-common');
		dojo.addClass(rightRotateButton.domNode, 'imageviewer-toolbar-btn-fit');
		this.toobarNode.appendChild(rightRotateButton.domNode);
		this.connect(rightRotateButton, 'onClick', this._handleFitEvent);
	},
	_createZoomRateInput:function(){
		var zoomRateNumberSpinner = this._zoomRateNumberSpinner = new unieap.form.NumberSpinner({
			smallDelta: this._delta,
			constraints: {max: this._maxZoom, min: this._minZoom}
		});
		zoomRateNumberSpinner.setValue(100);
		dojo.addClass(zoomRateNumberSpinner.domNode, 'imageviewer-toolbar-common');
		dojo.addClass(zoomRateNumberSpinner.domNode, 'imageviewer-toolbar-input-zoom-rate');
		this.toobarNode.appendChild(zoomRateNumberSpinner.domNode);
		this.connect(zoomRateNumberSpinner.iconUpNode, 'mouseup', this._handleAdaptZoomRateEvent);
		this.connect(zoomRateNumberSpinner.iconDownNode, 'mouseup', this._handleAdaptZoomRateEvent);
		this.connect(zoomRateNumberSpinner.inputNode, 'onchange', this._handleAdaptZoomRateEvent);
	},
	_createZoomPercentDIV:function() {
		var zoomPercentDiv = dojo.create("div", {innerHTML: "%"});
		dojo.style(zoomPercentDiv, {"float": "right", "marginTop": "15px"});
		dojo.addClass(zoomPercentDiv, 'imageviewer-toolbar-common');
		dojo.addClass(zoomPercentDiv, 'imageviewer-toolbar-zoom-percent');
		this.toobarNode.appendChild(zoomPercentDiv);
	},
	_createZoomOutButton:function(){
		var zoomOutButton = new unieap.form.Button({
			iconClass: 'imageviewer-toolbar-icon-zoom-out',
			width: '50px',
			height: '40px'
		});
		dojo.addClass(zoomOutButton.domNode, 'imageviewer-toolbar-common');
		dojo.addClass(zoomOutButton.domNode, 'imageviewer-toolbar-btn-zoom-out');
		this.toobarNode.appendChild(zoomOutButton.domNode);
		this.connect(zoomOutButton, 'onClick', this._handleZoomOutEvent);
	},
	_createZoomInButton:function(){
		var zoomInButton = new unieap.form.Button({
			iconClass: 'imageviewer-toolbar-icon-zoom-in',
			width: '50px',
			height: '40px'
		});
		dojo.addClass(zoomInButton.domNode, 'imageviewer-toolbar-common');
		dojo.addClass(zoomInButton.domNode, 'imageviewer-toolbar-btn-zoom-in');
		this.toobarNode.appendChild(zoomInButton.domNode);
		this.connect(zoomInButton, 'onClick', this._handleZoomInEvent);
	},
	
	// 工具方法
	_browser: function () {
		var t = true

		function detect(ua) {

			function getFirstMatch(regex) {
				var match = ua.match(regex);
				return (match && match.length > 1 && match[1]) || '';
			}

			if (/opera|opr/i.test(ua)) {
				result = {
					name: 'Opera'
					, opera: t
					, version: versionIdentifier || getFirstMatch(/(?:opera|opr)[\s\/](\d+(\.\d+)?)/i)
				}
			} else if (/msie|trident/i.test(ua)) {
				result = {
					name: 'Internet Explorer'
					, msie: t
					, version: getFirstMatch(/(?:msie |rv:)(\d+(\.\d+)?)/i)
				}
			} else if (/chrome|crios|crmo/i.test(ua)) {
				result = {
					name: 'Chrome'
					, chrome: t
					, version: getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)
				}
			} else if (/firefox|iceweasel/i.test(ua)) {
				result = {
					name: 'Firefox'
					, firefox: t
					, version: getFirstMatch(/(?:firefox|iceweasel)[ \/](\d+(\.\d+)?)/i)
				}
				if (/\((mobile|tablet);[^\)]*rv:[\d\.]+\)/i.test(ua)) {
					result.firefoxos = t
				}
			} else if (/safari/i.test(ua)) {
				result = {
					name: 'Safari'
					, safari: t
					, version: versionIdentifier
				}
			} else result = {}

			return result
		}

		var bowser = detect(typeof navigator !== 'undefined' ? navigator.userAgent : '')

		bowser._detect = detect;

		return bowser
	},
	
	_waitingImageLoaded:function() {
		if(!this._isImageLoaded) {
			var THIS = this;
			setTimeout(function(){THIS._waitingImageLoaded.apply(THIS);}, 500);
		} else {
			// 初始化图片大小信息
			var imageSize = this._getImageSize();
			this._originalWidth = imageSize['width'];
			this._originalHeight = imageSize['height'];
			
			if(!this._isIniliazed) {
				// 创建工具栏
				this._createToolbar();
				
				// 绑定图片事件
				this._bind();
				
				this._isIniliazed = true;
			}

			// 自动适配并居中
			this._fit();
			this._center();
		}
	},
	
	_getContainerSize:function() {
		var containnerPosition = dojo.position(this.domNode);
		return {
			'width': containnerPosition.w,
			 'height': containnerPosition.h
		};
	},
	_getImageSize:function() {
		var containnerPosition = dojo.position(this.imgNode);
		return {
			'width': containnerPosition.w,
			 'height': containnerPosition.h
		};
	},
	
	_getImagePosition:function() {
		var x = dojo.style(this.imgNode, 'left');
		var y = dojo.style(this.imgNode, 'top');
		return {
			'x': x,
			'y': y
		};
	},
	
	_center:function(){
		var containerSize = this._getContainerSize();
		var imageSize = this._getImageSize();
		
		var fitX = Math.round((containerSize['width'] - imageSize['width']) / 2);
		var fitY = Math.round((containerSize['height'] - imageSize['height']) / 2);
		
		this._setImagePosition(fitX, fitY);
	},
	
	_fit:function(){
		var containerSize = this._getContainerSize();
		
		var widthZoomRate = containerSize['width'] / this._originalWidth;
		var heightZoomRage = containerSize['height'] / this._originalHeight;
		
		var zoomRate = widthZoomRate < heightZoomRage ? widthZoomRate : heightZoomRage;
		this._setZoom(this._preprocessZoomRate(zoomRate));
		
		this._isFit = true;
	},
	
	_preprocessZoomRate:function(zoomRate) {
		var zoom = Math.round(zoomRate * 100);
		zoom = zoom > this._maxZoom ? this._maxZoom : (zoom < this._minZoom ? this._minZoom : zoom);
		this._zoomRateNumberSpinner.inputNode.value = zoom;
		return zoom / 100;
	},
	
	_getXFromEvent:function(event){
		var x = event.x; // IE
		if(typeof x === 'undefined' || x === null) {
			x = event.clientX; // FF
		}
		return x;
	},
	
	_getYFromEvent:function(event){
		var y = event.y; // IE
		if(typeof y === 'undefined' || y === null) {
			y = event.clientY; // FF
		}
		return y;
	},
	
	// 缩放相关方法
	_setZoom:function(zoomRate){
		this._currentZoomRate = zoomRate;
		
		var newWidth = Math.round(this._originalWidth * zoomRate);
		var newHeight = Math.round(this._originalHeight * zoomRate);
		
		var containerSize = this._getContainerSize();
		this._isDragEnable = newHeight > containerSize['height'] || newWidth > containerSize['width'];
		
		dojo.style(this.imgNode, 'width', newWidth+'px');
		dojo.style(this.imgNode, 'height', newHeight+'px');
		
		if(!this._isDragEnable) this._center();
		
		this._isFit = false;
	},
	
	_moveImage:function(oldX, oldY, newX, newY) {
		var browser = this._browser();
		
		var offsetX = newX - oldX;
		var offsetY = newY - oldY;
		
		var imagePosition = this._getImagePosition();
		var imageSize = this._getImageSize();
		var containnerSize = this._getContainerSize();
		
		var x = imagePosition['x'] + offsetX;
		var minX = containnerSize['width'] - imageSize['width'];
		
		//修复在Firefox和chrome下，旋转90度后位置偏移的问题
		var xFix = 0;
		if(browser.firefox || browser.chrome) {
			if(!(this._currentRotateAngle / 90 % 2 == 0)) {
				xFix = (imageSize['width'] - imageSize['height']) / 2;
			}
		}
		
		var y = imagePosition['y'] + offsetY;
		var minY = containnerSize['height'] - imageSize['height'];
		
		//修复在Firefox和chrome下，旋转90度后位置偏移的问题
		var yFix = 0;
		if(browser.firefox || browser.chrome) {
			if(!(this._currentRotateAngle / 90 % 2 == 0)) {
				yFix = -((imageSize['width'] - imageSize['height']) / 2);
			}
		}
		
		if(x > (0 + xFix)) {
			x = 0 + xFix;
		} else if(x < (minX + xFix)) {
			x = minX + xFix;
		}
		
		if(y > (0 + yFix)) {
			y = 0 + yFix;
		} else if(y < (minY + yFix)) {
			y = minY + yFix;
		}
		
		if(imagePosition['x'] > 0) {
			var fitX = Math.round((containnerSize['width'] - imageSize['width']) / 2);
			this._setImagePosition(fitX, y);
		} else if(imagePosition['y'] > 0) {
			var fitY = Math.round((containnerSize['height'] - imageSize['height']) / 2);
			this._setImagePosition(x, fitY);
		} else this._setImagePosition(x, y);
		
		this._isFit = false;
	},
	
	_setImagePosition:function(x, y){
		dojo.style(this.imgNode, 'left', Math.round(x)+'px');
		dojo.style(this.imgNode, 'top', Math.round(y)+'px');
	},
	
	//旋转相关方法
	_rotate:function(angle) {
		while(angle < 0) angle += 360;
		while(angle > 360) angle -= 360;
		
		// 清理所有旋转 class 属性
		dojo.removeClass(this.imgNode, 'imageviewer-image-rotate90');
		dojo.removeClass(this.imgNode, 'imageviewer-image-rotate180');
		dojo.removeClass(this.imgNode, 'imageviewer-image-rotate270');
		
		switch (angle) {
			case 0:
				// do nothing
				break;
				
			case 90:
				dojo.addClass(this.imgNode, 'imageviewer-image-rotate90');
				break;
				
			case 180:
				dojo.addClass(this.imgNode, 'imageviewer-image-rotate180');
				break;
				
			case 270:
				dojo.addClass(this.imgNode, 'imageviewer-image-rotate270');
				break;

			default:
				break;
		}
	},
	
	// 响应事件回调方法
	_handleImageLoadEvent:function(event){
		this._isImageLoaded = true;
		return true;
	},
	
	_handleMouseDownEvent:function(event){
		if(!this._isDragEnable) return true; 
		
		if(!this._isDragging) {
			this._isDragging = true;
			
			dojo.addClass(this.imgNode, "imageviewer-drag-start");
			
			this._oldX = this._getXFromEvent(event);
			this._oldY = this._getYFromEvent(event);
			
			dojo.stopEvent(event);
			
			return false;
		}
		return true;
	},
	
	_handleMouseMoveEvent:function(event){
		if(!this._isDragEnable) return true;
		
		if(this._isDragging) {
			this._moveImage(this._oldX, this._oldY, this._getXFromEvent(event), this._getYFromEvent(event));
			
			this._oldX = this._getXFromEvent(event);
			this._oldY = this._getYFromEvent(event);
			
			dojo.stopEvent(event);
			return false;
		}
		
		return true;
	},
	
	_handleMouseUpEvent:function(event){
		
		if(!this._isDragEnable) return true;
		
		if(this._isDragging) {
			this._isDragging = false;
			
			dojo.removeClass(this.imgNode, "imageviewer-drag-start");
			
			this._oldX = 0;
			this._oldY = 0;
			
			
			dojo.stopEvent(event);
			
			return false;
		}
		
		return true;
	},
	
	_handleLeftRotateEvent:function(event){
		var angle = this._currentRotateAngle - 90;
		this._rotate(angle);
		this._center();
		this._currentRotateAngle = angle;
	},
	
	_handleRightRotateEvent:function(event){
		var angle = this._currentRotateAngle + 90;
		this._rotate(angle);
		this._center();
		this._currentRotateAngle = angle;
	},
	
	_handleFitEvent:function(event){
		if(!this._isFit) {
			this._fit();
			this._center();
		} else {
			this._setZoom(this._preprocessZoomRate(1));
			this._center();
		}
	},
	
	_handleZoomOutEvent:function(event){
		var zoomRate = this._currentZoomRate / this._multiple;
		zoomRate = this._preprocessZoomRate(zoomRate);
		this._setZoom(zoomRate);
		this._center();
	},
	
	_handleZoomInEvent:function(event){
		var zoomRate = this._currentZoomRate * this._multiple;
		zoomRate = this._preprocessZoomRate(zoomRate);
		this._setZoom(zoomRate);
	},
	
	_handleAdaptZoomRateEvent:function(event){
		var input = this._zoomRateNumberSpinner.inputNode;
		var zoom = parseInt(input.value);
		this._setZoom(zoomRate = this._preprocessZoomRate(zoom / 100));
	},
	
	_handleMouseWheelEvent:function(event){
		var scroll = 0;
		scroll = this._browser().firefox ? event.detail : event.wheelDelta;
		
		if(this._isIniliazed) {
			if(scroll > 0) {
				var zoomRate = this._currentZoomRate * this._multiple;
				zoomRate = this._preprocessZoomRate(zoomRate);
				this._setZoom(zoomRate);
				this._center();
			} else {
				var zoomRate = this._currentZoomRate / this._multiple;
				zoomRate = this._preprocessZoomRate(zoomRate);
				this._setZoom(zoomRate);
				this._center();
			}
		}
		
		dojo.stopEvent(event);
		return false;
	},
	
	_handleToolbarOutEvent: function(event) {
		this._zoomRateNumberSpinner.inputNode.blur();
		return true;
	},
	
	/**
	 * @summary:
	 * 		设置图片路径
	 * @param:
	 * 		{string} src 图片的路径
	 * @example:
	 * |var img=unieap.byId('img');
	 * |btn.setSrc('img.png');
	 * 		设置路径在'img.png'下的图片
	 */
	setSrc:function(src){
		this._isImageLoaded = false;
		
		this.src=src;
		this.imgNode.src=src;
		
		// 等待图片加载结束
		this._waitingImageLoaded();
	},
	
	/**
	 * @summary:
	 * 		设置控件宽度
	 * @param:
	 * 		{string} width 控件宽度
	 */
	setWidth:function(width){
		if(typeof width !== 'undefined' && width !== null) {
			if(typeof width === 'number') {
				width = Math.round(width)+"px";
			}
			dojo.style(this.domNode, 'width', width);
			dojo.style(this.wrapperNode, 'width', width);
			
			if(this._isIniliazed) {
				this._fit();
				this._center();
			}
		}
	},
	
	/**
	 * @summary:
	 * 		设置控件高度
	 * @param:
	 * 		{string} height 控件高度
	 */
	setHeight:function(height){
		if(typeof height !== 'undefined' && height !== null) {
			if(typeof height === 'number') {
				height = Math.round(height)+"px";
			}
			dojo.style(this.domNode, 'height', height);
			dojo.style(this.wrapperNode, 'height', height);
			
			if(this._isIniliazed) {
				this._fit();
				this._center();
			}
		}
	},
	
	/**
	 * @summary:
	 * 		设置缩放相关信息
	 * @type:
	 * 		{string}
	 * @example:
	 *      | var zoom = {"maxZoom":"200%", "minZoom": "10%", "delta": "20", "multiple":"1.6"}
	 *      | imageviewer.setZoom(zoom);
	 */
	setZoom:function(zoom){
		if(typeof zoom !== 'undefined' && zoom !== null){
			var zoomObject;
			
			if(typeof zoom === 'object') {
				zoomObject = zoom;
			} else if (typeof zoom === 'string') {
				zoom = zoom.replace("'", "\"");
				try {
					zoomObject = JSON.parse(zoom);
				} catch(e) {
					return;
				}
			}
			
			if(zoomObject.maxZoom) {
				var maxZoom = zoomObject.maxZoom;
				if(typeof maxZoom === 'string' && maxZoom.indexOf('%') > 0) {
					this._maxZoom = parseInt(maxZoom.substring(0, maxZoom.indexOf('%')));
				} else if(typeof maxZoom === 'number') {
					this._maxZoom = maxZoom;
				}
			}
			
			if(zoomObject.minZoom) {
				var minZoom = zoomObject.minZoom;
				if(typeof minZoom === 'string' && minZoom.indexOf('%') > 0) {
					this._minZoom = parseInt(minZoom.substring(0, minZoom.indexOf('%')));
				} else if(typeof minZoom == 'number') {
					this._minZoom = minZoom;
				}
			}
			
			if(zoomObject.delta) {
				var delta = zoomObject.delta;
				if(typeof delta === 'string') this._delta = parseInt(delta);
				else if(typeof delta === 'number') this._delta = delta;
			}
			
			if(zoomObject.multiple) {
				var multiple = zoomObject.multiple;
				if(typeof multiple === 'string') this._multiple = parseFloat(multiple);
				else if(typeof multiple === 'number') this._multiple = multiple;
			}
		}
	}
	
});
dojo.provide("unieap.grid._grid.lib");

dojo.mixin(unieap.grid, {
	na: '...',
	nop: function() {
	},
	getTdIndex: function(td){
		return td.cellIndex >=0 ? td.cellIndex : dojo.indexOf(td.parentNode.cells, td);
	},
	getTrIndex: function(tr){
		return tr.rowIndex >=0 ? tr.rowIndex : dojo.indexOf(tr.parentNode.childNodes, tr);
	},
	getTr: function(rowOwner, index){
		return rowOwner && ((rowOwner.rows||0)[index]);
	},
	getTd: function(rowOwner, rowIndex, cellIndex){
		return (unieap.grid.getTr(inTable, rowIndex)||0)[cellIndex];
	},
	findTable: function(node){
		for (var n=node; n && n.tagName!='TABLE'; n=n.parentNode);
		return n;
	},
	ascendDom: function(inNode, inWhile){
		for (var n=inNode; n && inWhile(n); n=n.parentNode);
		return n;
	},
	makeNotTagName: function(inTagName){
		var name = inTagName.toUpperCase();
		return function(node){ return node.tagName != name; };
	},
	fire: function(ob, ev, args){
		var fn = ob && ev && ob[ev];
		return fn && (args ? fn.apply(ob, args) : ob[ev]());
	},
	// from lib.js
	setStyleText: function(inNode, inStyleText){
		if(inNode.style.cssText == undefined){
			inNode.setAttribute("style", inStyleText);
		}else{
			inNode.style.cssText = inStyleText;
		}
	},
	getStyleText: function(inNode, inStyleText){
		return (inNode.style.cssText == undefined ? inNode.getAttribute("style") : inNode.style.cssText);
	},
	setStyle: function(inElement, inStyle, inValue){
		if(inElement && inElement.style[inStyle] != inValue){
			inElement.style[inStyle] = inValue;
		}
	},
	setStyleHeightPx: function(inElement, inHeight){
		if(inHeight >= 0){
			unieap.grid.setStyle(inElement, 'height', inHeight + 'px');
		}
	},
	mouseEvents: [ 'mouseover', 'mouseout', /*'mousemove', */'mousedown', 'mouseup', 'click', 'dblclick', 'contextmenu' ],
	keyEvents: [ 'keyup', 'keydown', 'keypress' ],
	funnelEvents: function(inNode, inObject, inMethod, inEvents) {
		var evts = (inEvents ? inEvents : unieap.grid.mouseEvents.concat(unieap.grid.keyEvents));
		for (var i=0, l=evts.length; i<l; i++){
			inObject["connect"](inNode,'on' + evts[i],  inMethod);
//			dojo.connect(inNode, 'on' + evts[i], inObject, inMethod);
		}
	},
	removeNode: function(inNode){
		inNode = dojo.byId(inNode);
		inNode && inNode.parentNode && inNode.parentNode.removeChild(inNode);
		return inNode;
	},
	getScrollbarWidth: function(){
		if(this._scrollBarWidth){
			return this._scrollBarWidth;
		}
		this._scrollBarWidth = 18;
		try{
			var e = document.createElement("div");
			e.style.cssText = "top:0;left:0;width:100px;height:100px;overflow:scroll;position:absolute;visibility:hidden;";
			document.body.appendChild(e);
			this._scrollBarWidth = e.offsetWidth - e.clientWidth;
			document.body.removeChild(e);
			delete e;
		}catch (ex){}
		return this._scrollBarWidth;
	},
	// needed? dojo has _getProp
	getRef: function(name, create, context){
		var obj=context||dojo.global, parts=name.split("."), prop=parts.pop();
		for(var i=0, p; obj&&(p=parts[i]); i++){
			obj = (p in obj ? obj[p] : (create ? obj[p]={} : undefined));
		}
		return { obj: obj, prop: prop }; 
	},
	getProp: function(name, create, context){
		with(unieap.grid.getRef(name, create, context)){
			return (obj)&&(prop)&&(prop in obj ? obj[prop] : (create ? obj[prop]={} : undefined));
		}
	},
	indexInParent: function(inNode){
		var i=0, n, p=inNode.parentNode;
		while(n = p.childNodes[i++]){
			if(n == inNode){
				return i - 1;
			}
		}
		return -1;
	},
	cleanNode: function(inNode){
		if(!inNode){
			return;
		}
		var filter = function(inW){
			return inW.domNode && dojo.isDescendant(inW.domNode, inNode, true);
		}
		var ws = dijit.registry.filter(filter);
		for(var i=0, w; (w=ws[i]); i++){
			w.destroy();
		}
		delete ws;
	},
	getTagName: function(inNodeOrId){
		var node = dojo.byId(inNodeOrId);
		return (node && node.tagName ? node.tagName.toLowerCase() : '');
	},
	nodeKids: function(inNode, inTag){
		var result = [];
		var i=0, n;
		while(n = inNode.childNodes[i++]){
			if(unieap.grid.getTagName(n) == inTag){
				result.push(n);
			}
		}
		return result;
	},
	divkids: function(inNode){
		return unieap.grid.nodeKids(inNode, 'div');
	},
	focusSelectNode: function(inNode){
		try{
			unieap.grid.fire(inNode, "focus");
			unieap.grid.fire(inNode, "select");
		}catch(e){// IE sux bad
		}
	},
	whenIdle: function(/*inContext, inMethod, args ...*/){
		setTimeout(dojo.hitch.apply(dojo, arguments), 0);
	},
	arrayCompare: function(inA, inB){
		for(var i=0,l=inA.length; i<l; i++){
			if(inA[i] != inB[i]){return false;}
		}
		return (inA.length == inB.length);
	},
	arrayInsert: function(inArray, inIndex, inValue){
		if(inArray.length <= inIndex){
			inArray[inIndex] = inValue;
		}else{
			inArray.splice(inIndex, 0, inValue);
		}
	},
	arrayRemove: function(inArray, inIndex){
		inArray.splice(inIndex, 1);
	},
	arraySwap: function(inArray, inI, inJ){
		var cache = inArray[inI];
		inArray[inI] = inArray[inJ];
		inArray[inJ] = cache;
	},
	initTextSizePoll: function(inInterval) {
		var f = document.createElement("div");
		with (f.style) {
			top = "0px";
			left = "0px";
			position = "absolute";
			visibility = "hidden";
		}
		f.innerHTML = "TheQuickBrownFoxJumpedOverTheLazyDog";
		document.body.appendChild(f);
		var fw = f.offsetWidth;
		var job = function() {
			if (f.offsetWidth != fw) {
				fw = f.offsetWidth;
				unieap.grid.textSizeChanged();
			}
		}
		window.setInterval(job, inInterval||200);
		unieap.grid.initTextSizePoll = unieap.grid.nop;
	},
	textSizeChanged: function() {
	},
	addObserver: function(target, ob) {
		if (!target.observers) {
			target.observers = [];
		}
		target.observers.push(ob);
	},
	notify: function(host, method, inArgs) {
		var a = inArgs || [];
		for(var i=0, m, o; (o=host.observers[i]); i++){
			(method in o)&&(o[method].apply(o, a));
		}
	}
});

unieap.grid.jobs = {
	cancel: function(inHandle){
		if(inHandle){
			window.clearTimeout(inHandle);
		}
	},
	jobs: {},
	job: function(inName, inDelay, inJob){
		unieap.grid.jobs.cancelJob(inName);
		var job = function(){
			delete unieap.grid.jobs.jobs[inName];
			inJob();
		}
		unieap.grid.jobs.jobs[inName] = setTimeout(job, inDelay);
	},
	cancelJob: function(inName){
		unieap.grid.jobs.cancel(unieap.grid.jobs.jobs[inName]);
	}
}
dojo.provide('unieap.grid._grid.binding');

dojo.declare("unieap.grid.Binding", null, {
	/**
	 * @declaredClass:
	 * 		unieap.grid.Binding
	 * @summary:
	 * 		Grid数据绑定
	 * @description:
	 * 		Grid控件的数据绑定模块(binding)，用来和DataCenter的数据进行绑定
	 * @example:
	 * |<div id="grid" id="grid" dojoType="unieap.grid.Grid" width="500px" height="300px"
	 * |	binding="{store:'empDataStore'}"
	 * |	views="{rowNumber:true,orderType:'client'}">
     * |	<fixed>
     * |		<cell label="员工编号" width="150" name="attr_empno"></cell>
     * |	</fixed>
     * |	<header>
     * |		<cell width="100px" label="姓名" name="NAME"></cell>
     * |		<cell width="150px" label="职位" name="attr_job"></cell>
     * |		<cell width="150px" label="工资" name="attr_sal" dataType="number"></cell>
     * |	</header>
	 * |</div>
	 */
	
	grid: null,
	
	/**
	 * @summary:
	 * 		设置Grid控件所绑定的DataStore对象
	 * @description:
	 * 		如果类型是DataStore对象，则不需要配置dataCenter属性
	 * 		如果类型是字符串，则表示DataCenter中的DataStore名，还需要配置dataCenter属性
	 * 		若不配置默认为全局的DataCenter对象(即dataCenter)
	 * @type:
	 * 		{unieap.ds.DataStore|string}
	 * @example:
	 * |<div dojoType="unieap.grid.Grid" binding="{store:'empDs'}">
	 * |	...
	 * |</div>
	 */
	store: null,
	
	/**
	 * @summary:
	 * 		设置Grid控件所绑定的DataStore对象来源于哪个DataCenter
	 * @description:
	 * 		设置Grid控件所绑定的DataStore对象来源于哪个DataCenter，仅在store属性为DataStore名称时生效
	 * 		若没有指明,将会在全局的DataCenter对象(即dataCenter)中获取
	 * @type:
	 * 		{unieap.ds.DataCenter}
	 * @example:
	 * |<div dojoType="unieap.grid.Grid" binding="{store:'empDs',datacenter:dc}">
	 * |	...
	 * |</div>
	 */
	dataCenter: null,
	//配置前台翻页后，分割原始datastore后新生成的datastore的名字
	_pagingStoreName: '_client_paging_ds' +new Date().getTime(),
	
	constructor: function(param, inGrid) {
		dojo.mixin(this, param);
		this.connects = [];
		this.grid = inGrid;
		if (param && param.store) {
			if(!this.dataCenter){
				this.dataCenter = this.grid.dataCenter || (unieap.Action.getViewContext(this.grid) || window).dataCenter;
			}
			dojo.isString(param.store)?
					(this.originStore=unieap.getDataStore(param.store, this.dataCenter, false)):(this.originStore= param.store);
			//如果支持客户端翻页，构建一个新的datastore
			
			if(this._supportClientPaging()){
				
				this.store=this.getDataStoreByPageNumber(this.originStore.getPageNumber());
			}else{
				this.store=this.originStore;
			}
			
		}
		!this.store&&(this.store = new unieap.ds.DataStore(param.store || "temp"));
		this.setData(this.store);
	},
	
	/**
	 * @summary:
	 * 		取得Grid绑定的DataStore
	 * @return:
	 * 		{unieap.ds.DataStore}
	 */
	getDataStore: function() {
		return this.store;
	},
	
	/**
	 * @summary:
	 * 		设置表格的数据源
	 * @param:
	 * 		{unieap.ds.DataStore} store
	 */
	setDataStore: function(store) {
		if(!store){
			var isNull = true;
		}
		!store && (store=new unieap.ds.DataStore("temp"));
		var dsName=store.getName();
		//判断是否支持前台翻页
		//if(this._supportClientPaging()&& dsName.indexOf(this._pagingStoreName)==-1){
		if(this._supportClientPaging()){
			var storeArr;
			if(!this.grid.storeArr){
				this.grid.storeArr = $.extend(true,storeArr,store)
			}
			this.originStore=store;
			this.store=isNull?this.originStore:this.getDataStoreByPageNumber(this.originStore.getPageNumber());
			this.setData(this.store);
		}else{
			this.setData(store);
		}
		this.grid.onStoreChanged();
		if(this.grid.showLoading){
			dojo.style(this.grid.contentLoading,'display','none');	
		}
	},
	
	//通过pageNumber属性从原始datastore中来读取数据
	getDataStoreByPageNumber:function(pageNumber){
//		pageNumber=pageNumber||1;
//		var store=this.originStore,
//			rows = store.getRowSet().getData(),
//			pageSize=store.getPageSize(),
//			recordCount=store.getRecordCount();
//		//构建datastore
//		var start = (pageNumber-1)*pageSize,
//			rowData = rows.slice(start, start+pageSize),
//			dsObj = {
//				pageSize: pageSize,
//				pageNumber: pageNumber,
//				recordCount: recordCount,
//				rowSet:rowData,
//				name:'_client_paging_ds',
//				metaData:(store.getMetaData())
//			};
//		return  new unieap.ds.DataStore(dsObj);
		pageNumber=pageNumber||1;
		var originStore;
		var store=$.extend(true,originStore,this.originStore),
			pageSize=store.getPageSize(),
			recordCount=store.getRecordCount();
		//构建datastore
		var initRow ;
		if(this.grid.storeArr){
			var arr=this.grid.storeArr.getRowSet();
			for(var i=0;i<arr.primary.length;i++){
				if(arr.primary[i]['_s']){
					delete arr.primary[i]['_s'];
				}
			}
			var arrRows= $.extend(true,initRow,this.grid.storeArr.getRowSet());
		}else{
			var arrRows =store.getRowSet()
		}
		var start = (pageNumber-1)*pageSize,
			rows = arrRows.getRows(null,start, start+pageSize),
			rowset = new unieap.ds.RowSet();
		for(var i=0,len = rows.length;i<len;i++){
			rowset.insertRow(rows[i].getData(),i);
			rowset.resetUpdate(i);
		}
		var tempStore = new unieap.ds.DataStore();
		tempStore.setRowSet(rowset);
		tempStore.setPageSize(pageSize);
		tempStore.setPageNumber(pageNumber);
		tempStore.setRecordCount(recordCount);
		tempStore.setName(this._pagingStoreName);
		tempStore.setMetaData(store.getMetaData());
        tempStore.setRowSetName(store.getRowSetName());
//		tempStore.getRowSet().resetUpdate();
		return  tempStore;
		
	},
	
	//是否支持客户端翻页
	_supportClientPaging:function(){
		var pagingManager=this.grid.managers.get('PagingManager');
		if(pagingManager){
			return pagingManager.supportClientPaging();
		}
		return false;
	},
	

	/**
	 * @summary:
	 * 		当有客户端翻页时，返回grid初始绑定的DataStore
	 * @return:
	 * 		{unieap.ds.DataStore}
	 */
	getOriginStore:function(){
		return this.originStore;
	},
	
	
	//删除当前grid绑定的datastore时，同步原始的主datastore
	syncOriginStore:function(indexs){
		if(this._supportClientPaging()){
			var pagingManager=this.grid.managers.get('PagingManager'),
				pageInfo=pagingManager.getPageInfo(),
				totalCount=pageInfo['totalCount'],
				pageNumber=pageInfo['pageNumber'],
				pageSize=pageInfo['pageSize'],
				startNumber=(pageNumber-1)*pageSize;
			indexs=dojo.map(indexs,function(index){
				return startNumber+index;
			});
			
			if (totalCount > 0){
				this.originStore.getRowSet().deleteRows(indexs);
				//更新主datastore的总记录数
				this.originStore.setRecordCount(totalCount-indexs.length);
				//让当前页面总是显示为pageSize条记录
				this.setDataStore(this.getDataStoreByPageNumber(pageNumber));
			}
		}
	},
	
	
	/**
	 * @summary:
	 * 		清空表格的数据
	 * @description：
	 * 		清空表格的数据，相当于getBinding().setDataStore(null)
	 */
	clear : function(){
		this.setDataStore(null);
	},
	
	
	
	setData: function(inData) {
		this.disconnect();
		this.store = (inData ||  new unieap.ds.DataStore(this.store.getName()));
		var data = this.getRowSet().getData();
		this.setRowData(data);
		this.setInternalRowSet();
		this.grid.trigger && this.bindDataSetTrigger();
	},
	
	setRowData: function(data) {
		this.rowData = data;
	},
	
	//基于数据构建一个Grid组件内部使用的RowSet对象，避免触发原来RowSet绑定的事件
	setInternalRowSet:function(){
		this.internalRowSet = this.store.getRowSet().collect("all");
	},
	
	getInternalRowSet:function(){
		return this.internalRowSet;
	},
	
	//DataStore rowData同步更新this.rowData
	updateRowData: function() {
	    //重新设置数据后清空原有的排序状态
		this.grid.sortInfo = [];
		this.setRowData(this.getRowSet().getData());
		this.setInternalRowSet();
	},
	//selection
	selectedData : function(inRowIndex){
//		var row = this.getRowData()[inRowIndex];
//		row["_s"] = true;
		var row = new unieap.ds.Row(this.getRowSet(),this.getRow(inRowIndex));
		row.setRowSelected(true);
	},
	unSelectedData : function(inRowIndex){
//		var row = this.getRowData()[inRowIndex];
//		row["_s"] = false;
		var row = new unieap.ds.Row(this.getRowSet(),this.getRow(inRowIndex));
		row.setRowSelected(false);
	},
	
	/**
	 * @summary:
	 * 		取得Grid绑定的RowSet
	 * @return:
	 * 		{unieap.ds.RowSet}
	 */
	getRowSet: function() {
		return this.store.getRowSet();
	},
	
	/**
	 * @summary:
	 * 		取得当前Grid的数据行数
	 * @return:
	 * 		{number}
	 */
	getRowCount: function() {
		//return this.getRowData().length;
		return this.getInternalRowSet().getRowCount();
	},
	
	/**
	 * @summary:
	 * 		取得Grid的指定行数据
	 * @param:
	 * 		{number} inRowIndex
	 * @return:
	 * 		{object}
	 */
	getRow: function(inRowIndex) {
		var row = this.getInternalRowSet().getRow(inRowIndex);
		if(row){
			return row.getData();
		}
		//return this.getRowData()[inRowIndex];
	},
	
	getRowData: function() {
		return this.rowData;
	},
	
	getDatum: function(inRowIndex, colName) {
//		var row=this.getRowData()[inRowIndex];
//		if(!row)return "";
//		var value = this.getRowData()[inRowIndex][colName];
//		if(value==null) return "";
//		//对Grid单元格中的数据进行转义
//		return String(value).replace(/&/g,"&amp;").
//							 replace(/</g,"&lt;").
//							 replace(/>/g,"&gt;").
//							 replace(/\s/g,"&nbsp;");
	
		var row = this.getInternalRowSet().getRow(inRowIndex);
		if(!row)return "";
		var value = row.getItemValue(colName);
		if(value==null) return "";
		//对Grid单元格中的数据进行转义
		return String(value).replace(/&/g,"&amp;").
							 replace(/</g,"&lt;").
							 replace(/>/g,"&gt;").
							 replace(/\s/g,"&nbsp;");					 
	},
	
	/**
	 * @summary:
	 * 		往Grid绑定的RowSet中插入一行数据
	 * @description:
	 * 		往RowSet中插入一行数据后，Grid会自动刷新并且显示该行数据
	 * 		如果不传入任何参数或者传入的第一个参数不为对象,将在控件的最前面增加一条空记录。
	 * @param:
	 * 		{object} inData 要插入的数据对象
	 * @param:
	 * 		{number} inRowIndex 设置在哪个位置插入数据
	 * @example:
	 * |var binding=unieap.byId('grid').getBinding();
	 * |binding.insertRow({deptno:10},0);	//在第一行插入一条记录
	 * |binding.insertRow({deptno:10});		//在第一行插入一条记录
	 * |binding.insertRow({deptno:10},1);	//在第二行插入一条记录
	 * |binding.insertRow();				//在第一行插入一条空记录
	 * |binding.insertRow({}, 1); 			//在第二插入一条空记录
	 */
	insertRow: function(inData, inRowIndex){
		var len=arguments.length;
		if(len>=2){
			this.getRowSet().insertRow(inData,inRowIndex);
		}else if(len==1){
			typeof(inData)!='object'&&(inData={});
			this.getRowSet().insertRow(inData,0);
		}else{
			this.getRowSet().insertRow({},0);
		}
		
	},
	
	/**
	 * @summary:
	 * 		删除Grid绑定的RowSet中的某一行数据
	 * @description:
	 * 		删除RowSet中的一行记录后,Grid会自动刷新表格数据
	 * @param:
	 * 		{number} inRowIndex
	 * @example:
	 * |var binding=unieap.byId('grid').getBinding();
	 * |binding.deleteRow(0) //删除第一条数据
	 */
	deleteRow: function(inRowIndex) {
		this.getRowSet().deleteRow(inRowIndex);
		this.syncOriginStore([inRowIndex]);
	},
	
	/**
	 * @summary:
	 * 		删除Grid绑定的RowSet中的多行数据
	 * @description:
	 * 		删除RowSet中的多行记录后,Grid会自动刷新表格数据
	 * @param:
	 * 		{array} rowsIndexArray
	 * @example:
	 * |var binding=unieap.byId('grid').getBinding();
	 * |binding.deleteRows([0,1]) //删除Grid中的第一条和第二个数据
	 */
	deleteRows: function(rowsIndexArray) {
		this.getRowSet().deleteRows(rowsIndexArray);
		this.syncOriginStore(rowsIndexArray);
	},
	
	
	//暂停对rowset的监听
	disabledEvent: function() {
		this.getRowSet().disabledEvent();
	},

	//恢复对rowset的监听
	enabledEvent: function() {
		this.getRowSet().enabledEvent();
	},
	
	//触发事件监听
	bindDataSetTrigger: function() {
		var grid = this.grid,
			rowset=this.getRowSet(),
			self=this;
		if(grid){
			this.connects.push(dojo.connect(
				rowset,
				"discardUpdate",
				function(){
					grid.getManager('ViewManager').refresh();
				}
			));
			this.connects.push(dojo.connect(
				rowset,
				"onItemChanged",
				function(thisRow, itemName, value, index){
					if(grid){
						grid.onItemChanged(index,itemName);
					}
					return true;
				}
			));
			
			/*监听RowSet的postAddRow事件*/
			this.connects.push(dojo.connect(
				rowset,
				"onAfterAddRow",
				function(){
					grid.onRowSetChanged();	
					return true;
				}
			));
			/*监听RowSet的postAddRows事件*/
			this.connects.push(dojo.connect(
				rowset,
				"onAfterAddRows",
				function(){
					grid.onRowSetChanged();
					return true;
				}
			));
			/*监听RowSet的postDeleteRow事件*/
			this.connects.push(dojo.connect(
				rowset,
				"onAfterDeleteRow",
				function(){
					grid.onRowSetChanged();
					return true;
				}
			));
			/*监听RowSet的postDeleteRows事件*/
			this.connects.push(dojo.connect(
				rowset,
				"onAfterDeleteRows",
				function(){
					grid.onRowSetChanged();
					return true;
				}
			));
			
			/*监听RowSet的postDeleteAllRows事件*/
			this.connects.push(dojo.connect(
				rowset,
				"onAfterDeleteAllRows",
				function(){
					grid.onStoreChanged();
					return true;
				}
			));
			
			this.connects.push(dojo.connect(
				rowset,
				"onFilter",function(){
					grid.onRowSetFilter();
			}));
			
			this.connects.push(dojo.connect(
				rowset,
				"onResetUpdate",function(inRowIndex){
					if(inRowIndex!=null){
						grid.getManager("ViewManager").refreshRow(inRowIndex);
						return;
					}
					grid.onStoreChanged();
			}));
			
			//监听rowset的discardUpdate事件
			this.connects.push(dojo.connect(rowset,"onBeforeDiscardUpdate",function(){
				//获得Grid控件的选择类型
				var type=self.grid.managers.get('SelectionManager').getSelectType();

				if(type=='s'||type=='single'){
					//this此时指向RowSet对象
					this.forEach(function(row){
						//delete row.getData()["_s"];
						row.setRowSelected(false);
					},null,null,unieap.ds.Buffer.DELETE);
					
					this.forEach(function(row){
						//delete row.getData()["_s"];
						row.setRowSelected(false);
					},null,null,unieap.ds.Buffer.FILTER);
				}
				
			}));
			
			
			this.connects.push(dojo.connect(
				rowset,
				"onSort",function(){
					grid.onSorted();
			}));
			
			//datastore的数据被替换时触发
			this.connects.push(dojo.connect(
				this.store,
				"onRowSetChanged",
				this,
				function(){
					grid.setDataStore(this.store);
				}
			));
			
			//统计信息发生改变
			this.connects.push(dojo.connect(
				this.store,
				"onPropsChanged",
				this,
				function(){
					grid.onStatisticChanged();
				}
			));
			/*监听RowSet的onAfterDeleteSelectedRows事件*/
            this.connects.push(dojo.connect(
                this.getRowSet(),
                "onAfterDeleteSelectedRows",
                function(){
                    grid.onRowSetChanged();
                    return true;
                }
            ));
		}
	},
	
	//销毁绑定
	disconnect: function() {
		while(this.connects.length>0){
			dojo.disconnect(this.connects.pop());	
		}
	},
	
	//销毁绑定
	destroy: function() {
		this.disconnect();
	},
	
	/**
	 * @summary:
	 * 		判断Grid绑定的RowSet是否被修改
	 * @return:
	 * 		{boolean}
	 * @example:
	 * |var binding=unieap.byId('grid').getBinding();
	 * |var modified=binding.isModified();
	 */
	isModified: function() {
		var xtree = this.grid.getManager("XTreeManager");
		if(xtree){
			return xtree.getDataStore().getRowSet().isModified();			
		}
		return this.getDataStore().getRowSet().isModified();
	},
	
	//已经废弃,建议使用validate方法
	isValid: function(inRowIndex,indication,needFocus) {
		return this.validate(inRowIndex,indication,needFocus)
	},
	
	/**
	 * @summary:
	 * 		校验Grid中的数据是否合法
	 * @description:
	 * 		如果校验不通过的单元格可以编辑,当errorPrompt参数为true时会自动提示错误信息，并置光标到单元格中
	 * @param:
	 * 		{number} inRowIndex 对某一行的数据进行校验
	 * @param:
	 * 		{boolean} errorPrompt 校验不通过后是否自动提示错误信息,如果不设置就为global.js中的unieap.widget.errorPrompt
	 * @param:
	 * 		{boolean} needFocus  当校验不通过时，是否设置光标到出错的单元格，默认为true
	 * @return:
	 * 		{boolean}
	 * @description:
	 * 		如果用户使用了编辑模块，并且配置了onBeforeEdit事件，建议用户不要在onBeforeEdit方法中调用validate方法。
	 * 		因为使用不当，可能会使得页面出现死循环。如果您的确需要这么做，请确保needFocus值参数为false
	 * @example:
	 * |<script type="text/javascript">
	 * |	var grid=unieap.byId("grid");
	 * |	//只校验第1行,是否提示错误信息依赖于unieap.widget.errorPrompt
	 * |	grid.getBinding().validate(0); 
	 * |	//校验第一行并提示错误信息
	 * |	grid.getBinding().validate(0,true);
	 * |	//校验所有的单元格并提示错误信息
	 * |	grid.getBinding().validate(null,true);
	 * |	//或者简写成grid.getBinding().validate(true);
	 * |</script>
	 */
	validate:function(inRowIndex,errorPrompt,needFocus){
		if(arguments.length==1){
			typeof(inRowIndex)=="boolean"&&(errorPrompt=inRowIndex);
		}
		
		if(arguments.length==2){
			if(typeof(inRowIndex)=='boolean'&&typeof(errorPrompt)=='boolean'){
				needFocus=errorPrompt;
				errorPrompt=inRowIndex;
			}
		}
		
		typeof(errorPrompt)=="undefined"&&(errorPrompt=unieap.widget.errorPrompt);
		
		typeof(needFocus)=="undefined"&&(needFocus=true);
		
		var cells = this.grid.managers.get("LayoutManager").getCells(),
			rowSet = this.getRowSet();
		
		//只对某一行进行校验
		if(typeof(inRowIndex)=="number"){
			var row = rowSet.getRow(inRowIndex);
			if(!row) return true;
			for (var i=0,cell; (cell=cells[i]); i++) {
				if (!cell.isValid(row)) {
					errorPrompt?this._showErrorPrompt(inRowIndex,cell,needFocus):this._setEdit(inRowIndex,cell,needFocus);
					return false;
				}
			}
			return true;
		}
		
		var result=true;
		
		
		//对primary缓冲区中的数据进行校验
		result=!rowSet.some(function(row) {//对每个row校验，有不合法的值返回true
			for (var i=0,cell; (cell=cells[i]); i++) {
				if (!cell.isValid(row)) {
					errorPrompt?this._showErrorPrompt(row.getIndex(),cell,needFocus):this._setEdit(row.getIndex(),cell,needFocus);
					return true;
				}
			}
			return false;
		},null,null,unieap.ds.Buffer.PRIMARY,this);
		
		//如果primary缓冲区中有不合法数据,直接返回false
		if(!result) return false;
		
		

		
		//对filter缓冲区中的数据进行校验
		result=!rowSet.some(function(row) {
			for (var i=0,cell; (cell=cells[i]); i++) {
				if (!cell.isValid(row)) {
					cell.setEditable(false);
					//过滤缓冲区，不需要focus
					errorPrompt?this._showErrorPrompt(row.getIndex(),cell,false):this._setEdit(row.getIndex(),cell,needFocus);
					return true;
				}
			}
			return false;
		},null,null,unieap.ds.Buffer.FILTER,this);	
		
		
		return result;
		
	},
	
	_showErrorPrompt:function(rowIndex,cell,needFocus){
		var me=this;
		MessageBox.alert({
			title:cell.label+RIA_I18N.grid.group.columnCheckInfo, 
			type:'warn',
			message:cell.label+': '+cell.getErrorMsg(),
			onComplete:function(){
				me._setEdit(rowIndex,cell,needFocus);
			}
		});
	},
	
	_setEdit:function(rowIndex,cell,needFocus){
		if(needFocus&&cell.isEditable()){
			this.grid.managers.get("EditManager").setEdit(rowIndex,cell.index);
			//光标置入出错的单元格中后，马上进行校验
			setTimeout(function(){
				cell.getEditor()&&cell.getEditor().getValidator().validate();
			},0);
		}
	
	},
	
	
	/**
	 * @summary:
	 * 		表格排序
	 * @param:
	 * 		{unieap.grid.Cell} inCell
	 * @param:
	 * 		{number} asc 可选值为-1和1,-1表示降序，1表示升序
	 */
	sort: function(inCell, asc) {
		this.grid.publish("onBeforeSort");
		if (unieap.fireEvent4Widget(this,this.grid,this.onBeforeSort,[inCell, asc])==false || !inCell.name) return;
		asc && (inCell.asc = asc);
		this.grid.setSortInfo(inCell);
		var sortInfo = this.grid.getSortInfo();
		//client sort	
		if(this.grid.managers.get("ViewManager").orderType=="client") {
			//this.getRowSet().sorts(sortInfo);
			this.getRowSet().sort(inCell.name,inCell.asc,inCell.dataType);
			unieap.fireEvent4Widget(this,this.grid,this.onAfterSort,[inCell, asc]);
		} else { //server sort
			var store = this.getDataStore(),
				    result = [];
			for(var i=0;i<sortInfo.length;i++){
				var order = sortInfo[i].name; 
				if(!store.getStatementName()){
					if(unieap.dbDialect&&unieap.dbDialect=='drm'){
						order = "[".concat(order).concat("]");
					}
					
				}
				order = order.concat(" ").concat(sortInfo[i].asc>0?"asc":"desc");
				result.push(order);
			}
			if(this.isModified()&&confirm(RIA_I18N.grid.paging.saveChanges)) {
					this.save();
			}
			 store.setOrder(result.join(","));
			 //请求处理，调用回调刷新表格，清除所有状态翻到第一页
			 store=store.collect('none');
			 store.setPageNumber(1);
			 var self=this,
			 	 callback=function(a,b){
				 	var ds,dc;
					if(arguments.length==2){
						ds=a;
						dc=b;
					}else if(arguments.length==1){
						dc=a;
					}else{
						return;
					}
					!ds&&(ds=dc.getSingleDataStore());
					self.setDataStore(ds);
					self.onAfterSort(inCell, asc);
			 	 };

			 if(dojo.isFunction(this.rpc)){
			 	this.rpc(this.getDataStore().collect("none"),callback,this.grid,'sort');
			 }else{
				unieap.Action.doQuery(store,{
				 	load:function(ds,dc){
						callback(ds,dc);
					},
					sync:false
				 });
			 }
		}
		
	},
	
	/**
	 * @summary:
	 * 		求某一列的最小值
	 * @param:
	 * 		{string} name 列名
	 * @return:
	 * 		{number}
	 * @example:
	 * |var binding=unieap.byId('grid').getBinding();
	 * |var min=binding.min('attr_sal'); //获得RowSet中列为attr_sal的最小值
	 */
	min : function(name){
		return this.getRowSet().min(name);
	},
	
	/**
	 * @summary:
	 * 		求某一列的最大值
	 * @param:
	 * 		{string} name 列名
	 * @return:
	 * 		{number}
	 * @example:
	 * |var binding=unieap.byId('grid').getBinding();
	 * |var max=binding.max('attr_sal'); //获得RowSet中列为attr_sal的最大值
	 */
	max : function(name){
		return this.getRowSet().max(name);
	},
	
	/**
	 * @summary:
	 * 		求某一列的平均值
	 * @param:
	 * 		{string} name 列名
	 * @param:
	 * 		{string} pattern 格式化字符串
	 * @return:
	 * 		{number}
	 * @example:
	 * |var binding=unieap.byId('grid').getBinding();
	 * |var avg=binding.avg('attr_sal'); //获得RowSet中列为attr_sal的平均值
	 * |var avg1=binding.avg('attr_sal','###,###.000'); //avg1值形如123.25
	 */
	avg : function(name,pattern){
		return this.getRowSet().avg(name,pattern);
	},
	
	/**
	 * @summary:
	 * 		求某一列的总和
	 * @param:
	 * 		{string} name 列名
	 * @param:
	 * 		{string} pattern 格式化字符串
	 * @return:
	 * 		{number}
	 * @example:
	 * |var binding=unieap.byId('grid').getBinding();
	 * |var sum=binding.sum('attr_sal'); //获得RowSet中列为attr_sal的总和
	 * |var sum1=binding.sum('attr_sal','###,###.000'); //sum1值形如123.25
	 */
	sum : function(name,pattern){
		return this.getRowSet().sum(name,pattern);
	},
	
	/*
	 * @summary:
	 * 		用户自定义获得datastore，给V4模型提供接口实现
	 * @param:
	 * 		{unieap.ds.DataStore} ds Grid控件绑定的datastore
	 * @param:
	 * 		{function} load 回调成功后执行
	 */
	rpc:null,
	
	//取得锁定行数据
	getLockedRowData : function(){
		var d=[];
		if(this.grid.lockedRow){
			var statistics=this.grid.lockedRow.statistics;
			var getLockedRow=this.grid.lockedRow.getLockedRow;
			var setLockedRowData=this.grid.lockedRow.setLockedRowData;
			if(setLockedRowData){
				return setLockedRowData;
			}
			if(getLockedRow){
				if(typeof(getLockedRow)=='function'){
					var data=getLockedRow.apply(this.grid);
					if(data){
						d=d.concat(data);
					}
				}
			}
			if(statistics){
				var datas = this.store.getStatistics();
				
				if(datas){
					if (!dojo.isArray(statistics)) {
						statistics=[statistics];
					}
					dojo.forEach(statistics,function(statistic){
						var data={};
						for(var name in statistic){
							if(datas[name]&&datas[name][statistic[name]]){
								dojo.require('unieap.util.util')
								var statisticName=unieap.translate(statistic[name])||RIA_I18N.grid.group.count;
								data[name]=statisticName+": "+datas[name][statistic[name]]
							}
						}
						d.push(data);
					})
				}
			}
		}
		return d;
	},
	
	setLockedRowData : function(data){
		if (this.grid.lockedRow) {
			this.grid.lockedRow.setLockedRowData=data;			
		}
		var viewManager=this.grid.managers.get('ViewManager');
		viewManager.renderLockedRow(true);
	},

	//Grid列过滤
	doFilter:function(){
		var self=this;
		var layoutmanager=this.grid.managers.get('LayoutManager');
		var cells=layoutmanager.cells;
		this.getRowSet().doFilter();
		var filter={condition:{},pattern:""},hasfilter=false;
		dojo.forEach(cells,function(cell,index){
			if(cell.filter){
				dojo.mixin(filter.condition,cell.filter.condition);
				filter.pattern+=(filter.pattern==""?'  ':' && ')+"("+cell.filter.pattern+")";
				hasfilter=true;
			}
		});
		if(hasfilter){
			self.getRowSet().doFilter(dojo.clone(filter));
		}else{
			self.getRowSet().doFilter();
		}
		
		//如果有toolbar，就更新toolbar状态
		this.grid.getToolBar()&&this.grid.getToolBar().update();
	},
	
	/**
	 * @summary:
	 * 		持久化表格中的数据
	 * @param:
	 * 		{object} inData 额外的提交参数
	 * @example:
	 * |var grid=unieap.byId('grid')
	 * |grid.getBinding().save()
	 * |grid.getBinding().save({url:'/demo.do?method=update'});
	 */
	save:function(inData){
		if(false == unieap.fireEvent4Widget(this,this.grid,this.onBeforeSave,[])){
			return;
		}
		var _store=this.store,inData=inData||{};
		if(_store){
			if(inData['load']){
				dojo.connect(inData,'load',dojo.hitch(this,this._onAfterSave))
			}else{
				dojo.mixin(inData,{'load':dojo.hitch(this,this._onAfterSave)})
			}
			unieap.Action.doUpdate(_store,inData);
		}

	},
	
	_onAfterSave:function(){
		this.grid.managers.get('ViewManager').refresh();
		unieap.fireEvent4Widget(this,this.grid,this.onAfterSave,[]);
	},
	
	/**
	 * @summary:
	 * 		表格保存前事件
	 * @description:
	 * 		此方法返回false时，保存操作将取消。
	 * @return:
	 * 		{boolean}
	 * @example:
	 * |<div dojoType="unieap.grid.Grid" id="grid" binding="{onBeforeSave:fn}">
	 * |</div>
	 * |function fn(){
	 * |	var isValid=unieap.byId("grid").getBinding().validate();
	 * |    return isValid; //如果校验不成功,就不执行保存操作
	 * |}
	 * |unieap.byId("grid").getBinding().save(); //save执行之前会执行fn
	 */
	onBeforeSave: function() {
		return true;
	},
	
	/**
	 * @summary:
	 * 		表格持久化后回调事件
	 * @description:
	 * 		此方法会刷新表格的视图
	 * @example:
	 * |<div dojoType="unieap.grid.Grid" id="grid" binding="{onAfterSave:fn}">
	 * |</div>
	 * |function fn(){
	 * |	unieap.byId('grid').refresh();
	 * |}
	 * |unieap.byId("grid").getBinding().save(); //save执行完毕后会执行fn
	 * |
	 */
	onAfterSave: function() {
	},
	
	/**
	 * @summary:
	 * 		表格列排序前事件
	 * @description:
	 * 		此方法返回false时，排序操作将取消。
	 * @param:
	 * 		{unieap.grid.Cell} inCell
	 * @param:
	 * 		{number} asc 可选值为-1和1,-1表示降序，1表示升序
	 * @return:
	 * 		{boolean}
	 * @example:
	 *|<div dojoType="unieap.grid.Grid" id="grid" width="80%" height="250px" 
	 *| 	binding="{store:'empDataStore',onBeforeSort:fn}">
     *|</div>
     *|function fn(inCell,asc){
     *|}
	 */
	onBeforeSort: function(inCell, asc) {
		return;
	},
	
	/**
	 * @summary:
	 * 		表格列排序后回调事件
	 * @param:
	 * 		{unieap.grid.Cell} inCell
	 * @param:
	 * 		{number} asc 可选值为-1和1,-1表示降序，1表示升序
	 * @example:
	 *|<div dojoType="unieap.grid.Grid" id="grid" height="250px"
	 *| 	binding="{store:'empDataStore',onAfterSort:fn}">
	 *|</div>
     *|function fn(inCell,asc){
     *|}
	 */
	onAfterSort: function(inCell, asc) {
		
	}
});
dojo.provide('unieap.grid._grid.cell');

dojo.declare("unieap.grid.Cell", null, {
	/**
	 * @declaredClass:
	 * 		unieap.grid.Cell
	 * @summary:
	 * 		单元格定义对象
	 * @description:
	 * 		可认为是表格单元格的模型，记录单元格定义和一些数据处理/显示的方法。
	 * @example:
	 * |<div dojoType="unieap.grid.Grid" id="grid" binding="{store:'empDataStore'}">
	 * |	<header>
	 * |		<cell name="attr_empno" label="编号" width="200"></cell>
	 * |		<cell name="attr_deptno" label="部门" width="300" decoder="{store:"deptStore"}></cell>
	 * |	</header>
	 * |</div>
	 * @example:
	 * |var layoutMan=unieap.byId("grid").getManager("LayoutManager");
	 * |var empnoCell=layoutMan.getCell("attr_empno");
	 * |//也可以简单得写成: var empnoCell=unieap.byId("grid").getCell("attr_empno");
	 * |var empnoName=empnoCell.name; //获得列绑定名为"attr_empno"
	 * |var empnoLabel=empnoCell.label; //获得列标题名为"编号"
	 * |
	 */


	width: 200,

	/*
	 * @summary:
	 * 		排序方式，1：升序，-1：降序
	 * @type:
	 * 		{1|-1}
	 * @default:
	 * 		1
	 */
	asc: 1,


	//编辑属性
	_cellProps: {
		/**
		 * @summary:
		 *	指定列是或否可调整宽度
		 * @type:
		 * 	{boolean}
		 * @default:
		 *	false
		 * @example:
		 * | <cell label="姓名" name="attr_name" width="200" noresize="true"></cell>
		 */
		noresize: "boolean",

		/**
		 * @summary:
		 * 		列绑定名
		 * @description:
		 * 		用于指定单元格绑定datastore中的哪个字段
		 * 		注意:如果多列绑定了同一字段，请给这些列分别设置唯一的id值
		 * @type:
		 * 		{string}
		 * @default:
		 * 		""
		 * @example:
		 * |var ds=new unieap.ds.DataStore("demo",[
		 * |	{attr_name:'基础软件',attr_address:'黄浦路901号'}
		 * |]);
		 * |dataCenter.addDataStore(ds);
		 * |<div dojoType="unieap.grid.Grid" binding="{store:'demo'}">
		 * |	<header>
		 * |		<cell label="姓名" name="attr_name"></cell>
		 * |		<cell label="姓名" name="attr_address"></cell>
		 * |	</header>
		 * |</div>
		 */
		name: 'string',


		/**
		 * @summary:
		 * 		列跨越,类似于HTML中table的colspan属性
		 * @description:
		 * 		一般用于多标题和复杂表头
		 * @type:
		 * 		{number}
		 * @default:
		 * 		1
		 * @example:
		 * |<div dojoType="unieap.grid.Grid" binding="{store:'empDataStore'}">
		 * |	<header>
		 * |		<row>
		 * |			<cell colSpan="2" label="标题一" isMulTitle="true"></cell>
		 * |		</row>
		 * |		<row>
		 * |			<cell label="工资" name="attr_sal"></cell>
		 * |			<cell label="职位" name="attr_job"></cell>
		 * |		</row>
		 * |	</header>
		 * |</div>
		 * @img:
		 * 		images/grid/grid-cell-colSpan.jpg
		 */
		colSpan: "number",

		/**
		 * @summary:
		 * 		行跨越,类似于HTML中table的rowspan属性
		 * @type:
		 * 		{number}
		 * @description:
		 * 		一般用于多标题和复杂表头
		 * @default:
		 * 		1
		 * @example:
		 * |<div dojoType="unieap.grid.Grid" binding="{store:'empDataStore'}">
		 * |	<header>
		 * |		<row>
		 * |			<cell rowSpan="2" label="编号"></cell>
		 * |			<cell colSpan="2" label="标题一" isMulTitle="true"></cell>
		 * |		</row>
		 * |		<row>
		 * |			<cell label="工资" name="attr_sal"></cell>
		 * |			<cell label="职位" name="attr_job"></cell>
		 * |		</row>
		 * |	</header>
		 * |</div>
		 * @img:
		 * 		images/grid/grid-cell-rowSpan.jpg
		 */
		rowSpan: "number",


		/**
		 * @summary:
		 * 		标识列,表示该列是唯一的
		 * @type:
		 * 		{string}
		 * @default:
		 * 		""
		 * @example:
		 * |<div dojoType="unieap.grid.Grid" id="grid" binding="{store:'empDataStore'}">
		 * |	<header>
		 * |		<cell id="salary" name="attr_sal" label="工资"></cell>
		 * |		<cell id="job" name="attr_job" label="职位"></cell>
		 * |	</header>
		 * |</div>
		 * |<script type="text/javascript">
		 * |	var layoutMan=unieap.byId("grid").getManager("LayoutManager");
		 * |	layoutMan.hideCell(["salary"]); //隐藏工资列
		 * |</script>
		 */
		id: 'string',


		/**
		 * @summary:
		 * 		列数据类型
		 * @type:
		 * 		{string}
		 * @enum:
		 * 		{"number"|"string"|"date"}
		 * @default:
		 * 		"string"
		 * @example:
		 * |//设置此列排序方式为客户端排序，并且按数字类型排序。
		 * |<cell label="工资" name="attr_salary" width="150px"  dataType="number"></cell>
		 */
		dataType: "string",

		/**
		 * @summary:
		 * 		设置列是否能排序
		 * @type:
		 * 		{boolean}
		 * @default:
		 * 		true
		 * @example:
		 * |//工资列不可排序 
		 * |<cell label="工资" name="attr_salary" width="20%" canSort="false"></cell>
		 */
		canSort: "boolean",

		/**
		 * @summary:
		 * 		列格式化方法 【注】用户自定义的函数必须要有返回值
		 * @type:
		 * 		{function}
		 * @default:
		 * 		null
		 * @example:
		 * |//formatter指定的方法拥有两个参数，单元格数据值和行号。
		 * |<cell label="操作"  width="40px" formatter="fn"></cell>
		 * |function fn(inValue,inRowIndex){
		 * |	if ((inRowIndex-1)%2==0){
		 * |		inValue = "<label style='color:red'>" + inValue + "</label>";
		 * |	}
		 * |	return inValue;
		 * |} 
		 * @img:
		 * 		images/grid/grid-cell-formatter.jpg
		 */
		formatter: "object",

		/**
		 * @summary:
		 * 		列取值方法
		 * @type:
		 * 		{function}
		 * @default:
		 * 		null
		 * @example:
		 * |//设置cell标签的get属性,get属性指定生成列值方法，参数为行号。
		 * |<cell name="操作" width="40px" get="fn"></cell>
		 * |function fn(inRowIndex){
		 * |	return "第"+ (inRowIndex+1) + "行"; 
		 * |}
		 * @img:
		 * 		images/grid/grid-cell-get.jpg
		 */
		get: "object",

		/**
		 * @summary:
		 * 		列头样式
		 * @type:
		 * 		{string}
		 * @default:
		 * 		""
		 * @example:
		 *|<div id="grid" id="grid" dojoType="unieap.grid.Grid" width="80%" height="180px" binding="{store:'empDataStore'}" views="{rowNumber:true}">
		 *|	<header>
		 *|		<cell name="attr_empno" label="员工编号(红色字体)" width="10%"  headerStyles="color:red;"></cell>
		 *|		<cell name="NAME" label="姓名(居左)" width="20%" headerStyles="text-align:left;"></cell>
		 *|		<cell name="NAME" label="姓名(居中)" width="20%" headerStyles="text-align:center;"></cell>
		 *|		<cell name="NAME" label="姓名(居右)" width="20%" headerStyles="text-align:right;"></cell>
		 *|		<cell name="attr_job" label="职位" width="20%"></cell>
		 *|		<cell name="attr_sal" label="工资(正常列)" width="10%"></cell>
		 *|	</header>
		 *|</div>
		 * @img:
		 * 		images/grid/headerstyle.png
		 */
		headerStyles: "string",

		/**
		 * @summary:
		 * 		列样式
		 * @type:
		 * 		{string}
		 * @default:
		 * 		""
		 * @example:
		 *|<div id="grid" id="grid" dojoType="unieap.grid.Grid" width="80%" height="180px" binding="{store:'empDataStore'}" views="{rowNumber:true}">
		 *|		<header>
		 *|			<cell name="attr_empno" label="员工编号" width="10%" 1styles="color:red;" ></cell>
		 *|			<cell name="NAME" label="姓名" width="20%" styles="text-align:left;" ></cell>
		 *|   		<cell name="NAME" label="姓名" width="20%" styles="text-align:center;" ></cell>
		 *|			<cell name="NAME" label="姓名" width="20%" styles="text-align:right;" ></cell>
		 *|			<cell name="attr_job" label="职位(黄色背景)" width="20%" styles="background-color:yellow;"></cell>
		 *|			<cell name="attr_sal" label="工资(正常列)" width="10%"></cell>
		 *|		</header>
		 *|</div>
		 * @img:
		 * 		images/grid/styles.png
		 */
		styles: "string",


		/**
		 * @summary:
		 * 		是否为多标题列
		 * @description:
		 * 		设置isMulTitle="true"的列不可绑定字段
		 * @default:
		 * 		false
		 * @type:
		 * 		{boolean}
		 * @example:
		 *|<row>
		 *|   <cell rowSpan="2" name="attr_empno" width="20%" label="编号"></cell>
		 *|   <cell label="标题一" isMulTitle="true" width="40%" colSpan="2"></cell>
		 *|</row>
		 *|<row>
		 *|   <cell name="attr_sal" label="工资" width="20%"></cell>
		 *|   <cell name="attr_job" label="职位" width="20%"></cell>
		 *|</row>
		 * 设置多标题
		 * @img:
		 *	images/grid/views/multitle.png
		 */
		isMulTitle: "boolean",

		/**
		 * @summary:
		 * 		列标题名
		 * @type:
		 * 		{string}
		 * @default:
		 * 		""
		 * @example:
		 * |<cell label="测试" name="attr_job"></cell>
		 */
		label: "string",

		/**
		 * @summary:
		 * 		权限id,用于页面权限
		 * @type:
		 * 		{string}
		 * @default:
		 * 		""
		 * @example:
		 * |<cell label="测试" name="attr_job" securityId="attr_job"></cell>
		 */
		securityId: "string",

		/**
		 * @summary:
		 * 		设置单元格的宽度
		 * @description:
		 * 		单元格的宽度也可以设置成百分比
		 * 		注意:锁定列单元格宽度不支持百分比，如果设置了百分比，它们的宽度会变为"200px"
		 * @type:
		 * 		{number|string}
		 * @default:
		 * 		200
		 * @example:
		 * |<div dojoType="unieap.grid.Grid" width="800" binding="{store:'empDs'}">
		 * |	<header>
		 * |		<cell name="attr_empno" label="编号" width="200" ></cell>
		 * |		<cell name="attr_sal" label="工资" ${1}width="20%"></cell>
		 * |		<cell name="attr_deptno" label="部门" width="80%"></cell>
		 * |	</header>
		 * |</div>
		 * 		${1}由于"工资"列和"部门"列的宽度为百分比,它们的实际宽度为:
		 * 			工资列宽:(20%/(20%+80%))*(800-200)=120
		 * 			部门列宽:(80%/(20%+80%))*(800-200)=480
		 */
		width: "string",

		/**
		 * @summary:
		 * 		定义值转义的依据
		 * @type:
		 * 		{object}
		 * @default:
		 * 		null
		 * @example:
		 * |//设置转义
		 * |<cell label="姓名" name="attr_name" decoder="{store:'ds',valueAttr:'value',displayAttr:'display'}"></cell>
		 */
		decoder: "object",

		/**
		 * @summary:
		 * 		处理级联值转义
		 * @type:
		 * 		{object}
		 * @default:
		 * 		null
		 * @example:
		 * |<script type="text/javascript">
		 * |	var ds1=new unieap.ds.DataStore('ds1',[
		 * |		{province:1,city:11},
		 * |		{province:2,city:12}
		 * |	]);
		 * |	dataCenter.addDataStore(ds1);
		 * |	var provinceDs=new unieap.ds.DataStore("province",[
		 * |		{CODEVALUE:1,CODENAME:'湖北'},
		 * |		{CODEVALUE:2,CODENAME:'辽宁'}
		 * |	]);
		 * |	dataCenter.addDataStore(provinceDs);
		 * |	var city1=new unieap.ds.DataStore("city1",[
		 * |		{CODEVALUE:11,CODENAME:'仙桃'},
		 * |		{CODEVALUE:12,CODENAME:'荆州'}
		 * |	])
		 * |	dataCenter.addDataStore(city1);
		 * |	var city2=new unieap.ds.DataStore('city2',[
		 * |		{CODEVALUE:11,CODENAME:'大连'},
		 * |		{CODEVALUE:12,CODENAME:'锦州'}
		 * |	]);
		 * |	dataCenter.addDataStore(city2);
		 * |	function fn(value){
		 * |		if(value=="1"){
		 * |			return "city1";
		 * |		}else if(value=="2"){
		 * |			return "city2";
		 * |		}
		 * |}
		 * |</script>
		 * |<div dojoType="unieap.grid.Grid" binding="{store:'ds1'}" edit="{editType:'rowEdit'}" >
		 * |	<header>
		 * |		<cell label="省份" name="province" editor="{editorClass:'unieap.form.ComboBox',editorProps:{id:'province',dataProvider:{store:'province'}}}"></cell>
		 * |		<cell label="城市" name="city" decoder="{}" cascade="{primary:'province',getCascadeStore:fn}" ></cell>
		 * |	</header>
		 * |</div>
		 */
		cascade: "object",

		/**
		 * @summary:
		 * 		值格式化属性
		 * @type:
		 * 		{object}
		 * @default:
		 * 		null
		 * @example:
		 * |假设单元格绑定的值为2009/01/01,要显示成2009年01月01日,需要先设置valueFormatter属性
		 * |<cell label="日期" name="attr_hiredate" valueFormatter="{declaredClass:'unieap.form.DateValueFormatter',dataFormat:'yyyy/MM/dd'}"></cell>
		 */
		valueFormatter: "object",

		/**
		 * @summary:
		 * 		显示格式化方法
		 * @description:
		 * 		如果用户自定义一个格式化类,格式化类的format方法会接受到两个参数,一个是要格式化的值,另外一个是当前单元格所在的索引号(rowIndex)
		 * @type:
		 * 		{object}
		 * @default:
		 * 		null
		 * @example:
		 *|<div id="grid" id="grid" dojoType="unieap.grid.Grid" width="80%" height="200px" binding="{store:'empDataStore'}" views="{rowNumber:true,orderType:'client'}">
		 *|		<header>
		 *|			<cell width="150px" label="部门(真实值)" name="attr_deptno" headerStyles="color:red;" width="15%"></cell>
		 *|			<cell width="150px" label="部门(转义值)" name="attr_deptno" headerStyles="color:red;" width="15%" 
		 *|     			decoder="{store:'DEPT',valueAttr:'CODEVALUE',displayAttr:'CODENAME'}"></cell>
		 *|			<cell width="150px" label="入职日期(未格式化的列)" name="attr_hiredate" headerStyles="color:green;" width="20%"></cell>
		 *|			<cell width="150px" label="入职日期(已格式化的列)" name="attr_hiredate" headerStyles="color:green;" width="20%"
		 *|				     displayFormatter="{declaredClass:'unieap.form.DateDisplayFormatter',dataFormat:'yyyy-MM-dd'}"></cell> //日期格式化
		 *|			<cell width="150px" label="工资(未格式化的列)" name="attr_sal" headerStyles="color:red;" width="15%"></cell>
		 *|			<cell width="150px" label="工资(已格式化的列)" name="attr_sal" headerStyles="color:red;" width="15%" 
		 *|				     displayFormatter="{declaredClass:'unieap.form.NumberDisplayFormatter',dataFormat:'###,###'}"></cell>  //数字格式化
		 *|		</header>
		 *|</div>
		 * @img:
		 * 		images/grid/displayformatter.png	
		 */
		displayFormatter: "object",

		/**
		 * @summary:
		 * 		编辑器配置
		 * @description:
		 * 		editor中必须配置editorClass，用来指定编辑器类型；
		 * 		可选的配置为editorProps，相当于一般在普通editor标签上配置的各个属性，事件及方法等。
		 * 		editorClass和editorProps之外，editor不可以配置其他属性。
		 * @type:
		 * 		{object}
		 * @default:
		 * 		null
		 * @example:
		 * |<cell name="attr_job" width="150px" label="职位" editor="{editorClass:'unieap.form.TextBox',editorProps:{textAlign:'left'}}"></cell>
		 * @example:
		 * |<cell name="attr_deptno" width="150px" label="部门" 
		 * |	editor="{editorClass:'unieap.form.ComboBox',editorProps:{dataProvider:{store: 'DEPT'},decoder:{valueAttr:'CODEVALUE',displayAttr:'CODENAME'}}}"></cell>
		 */
		editor: "object",

		/**
		 * @type:
		 * 		{boolean}
		 * @summary:
		 * 		编辑器可用标志
		 * @default:
		 * 		true
		 * @example:
		 * |<div dojoType="unieap.grid.Grid" edit="{editType:'rowEdit'}">
		 * |	<header>
		 * |		${1}<cell name="attr_ename" editor="{editorClass:'unieap.form.TextBox'}" enable="false"></cell>
		 * |	</header>
		 * |</div>
		 * ${1}虽然该列配置了editor属性，但是enable为false,该列依然不可编辑
		 */
		enable: "boolean",

		/**
		 * @summary:
		 * 		cell编辑前事件
		 * @description:
		 * 		编辑前事件，此事件指定的方法返回false时，此列的编辑器将不会被打开。
		 * 		接受事件的方法提供两个入参：inRowIndex，inCell
		 * @type:
		 * 		{function}
		 * @default:
		 * 		null
		 * @example:
		 * |<div dojoType="unieap.grid.Grid" edit="{editType:'rowEdit'}">
		 * |	<header>
		 * |		<cell name="attr_ename" label="姓名" editor="{editorClass:'unieap.form.TextBox'}" onBeforeEdit="fn"></cell>
		 * |	</header>
		 * |</div>
		 * |function fn(inRowIndex, inCell){
		 * |	return false;
		 * |}
		 * |
		 */
		onBeforeEdit: "object"

	},

	classes: null,

	constructor: function (param) {
		this.enable = true;
		dojo.mixin(this, param);
		this.setWidth(this.width);
		unieap.setLabelFormatProps(this);
		this.classes = ['u-grid-cell'];
		this._isNumberStyle() && this.classes.push('u-grid-text2-number');
		this.width < 3 && this.classes.push('dynamicGridCell'); //判断是否有隐藏列  增加 class  防止表格线条多出来

	},
	// 判断当前cell否应用数字类型样式
	_isNumberStyle: function () {
		if (this.dataType == "number") return true;
		if (this.dataType) return false;
		var ds = this.grid.getBinding().getDataStore();
		var datatype;
		if (this.name && ds.getMetaData(this.name)) {
			datatype = ds.getMetaData(this.name).dataType;
		} else {
			return false;
		}
		if (unieap.getDataType(datatype) == "number") {
			return true;
		}
		return false;
	},

	//对日期进行格式化用得到
	getValueFormatter: function () {
		return unieap.getModuleInstance(this, "valueFormatter", "unieap.form.SimpleFormatter");
	},
	//用户可以自己定义自己的formatter,例如
	//displayFormatter="{declaredClass:'unieap.form.NumberDisplayFormatter',dataFormat:'###,###.00'}"
	getDisplayFormatter: function () {
		return unieap.getModuleInstance(this, "displayFormatter", "unieap.form.SimpleFormatter");
	},


	_get: function (inRowIndex) {
		//		this._defaultCell=true;
		var value = this.value || this.grid.getBinding().getDatum(inRowIndex, this.name);
		return value;
	},

	//isUnitedCell 是否是合并单元格调用
	//合并单元格调用是,合并的单元格不需要line-height样式，不然会出现bug #U_EAP00008691 
	format: function (inRowIndex, data, isUnitedCell) {
		if (data) {
			//如果有数据 则不需要通过inRowIndex去取,用于锁定行
			value = (this.name in data) ? data[this.name] : '';
		} else {
			var value = this.get ? unieap.fireEvent4Widget(this, this.grid, this.get, [inRowIndex]) : this._get(inRowIndex);
		}
		value = this._format(value, inRowIndex);
		var uniteName = this.name;
		var isBorder = true;
		if (this.grid.unitedCell) { //jols add condition			
			for (var i = 0; i < this.grid.unitedCell.unite.length; i++) {
				if (this.name == this.grid.unitedCell.unite[i]) {
					if (!this.grid.uniteText) {
						this.grid.uniteText = {};
					}
					//注释这些判断  否则影响判断出合并航  2019-2-28  LD
					// if(this.grid.uniteText[uniteName] != null || this.grid.uniteText[uniteName] != undefined){ //majz 添加this.grid.binding.store.recordCount> 1判断，当一条数据时，合并单元格内容为空了
					// if(this.grid.binding.store.recordCount == 0){
					if (this.grid.binding.getDataStore().getRowSet().getRowCount() > 1 && (this.grid.uniteText[uniteName] != null || this.grid.uniteText[uniteName] != undefined) && inRowIndex !==0) {
						//正好屏幕显示截至到下一个合并行的开始，导致this.grid.uniteText这个获取的还是上一个合并行的信息，isBorder判断有问题会是true渲染出错
						if (value == this.grid.uniteText[uniteName] || value == this.grid.uniteTextNew[uniteName]) {
							// value = ""; //防止出现空行的情况
							isBorder = false;
							
							// this.grid.uniteText = this.grid.uniteTextNew[uniteName] != this.grid.uniteText[uniteName] ?this.grid.uniteTextNew : this.grid.uniteText;
							this.grid.uniteText = JSON.parse(JSON.stringify(this.grid.uniteTextNew));
						} else {
							this.grid.uniteText[uniteName] = value;
						}
					} else {
						this.grid.uniteText[uniteName] = value;
					}
					// }else{
					// 	if(this.grid.binding.store.recordCount> 1 && (this.grid.uniteText[uniteName] != null || this.grid.uniteText[uniteName] != undefined)){
					// 		if(value == this.grid.uniteText[uniteName]){
					// 			value = "";
					// 			isBorder = false;
					// 		}else{
					// 			this.grid.uniteText[uniteName] = value;
					// 		}
					// 	}else{
					// 		this.grid.uniteText[uniteName] = value;
					// 	}
					// }
					// }
				}
			}
		}


		var gclass = "";
		if (value.cls) {
			gclass = value.cls;
		}
		if (value.value) {
			value = value.value;
		}

		//value值为空时，ie下单元格显示没有边框
		value === "" ? (value = "&nbsp;") : value;
		//判断金额为0.00的时候，数据是否显示

		if ($(this.grid.domNode).hasClass('grid-summoney')) {
			if (this.dataType == "number") {
				if (value == 0.00) {
					value = "";
				}
			}
		}


		var lineHeight = this.grid.managers.get('RowManager').defaultRowHeight,
			css = "";
		//		lineHeight=lineHeight-1;
		/*zhaos窄行表头不对齐*/

		!isUnitedCell && (css = "line-height:" + lineHeight + "px" + ";height:" + lineHeight + "px");

		if (gclass) {
			value = "<div  class='" + gclass + "' style='" + css + "'>" + value + "</div>";
		} else if (dojo.isIE < 7 && this.formatter) {
			value = "<div class='u-grid-text2'>" + value + "</div>";
		} else {
			if (isBorder == true) {
				value = "<div  class=' u-grid-text' style='" + css + "'><div class='u-grid-text2'>" + value + "</div></div>";
			} else {
				value = "<div  class=' u-grid-text' style='" + css + "'><div class='gridBorderNone'></div><div class='u-grid-text2'>" + '' + "</div></div>";
			}
			// value = "<div  class=' u-grid-text' style='"+css+"'><div class='u-grid-text2'>" + value + "</div></div>";
		}
		
		return value;
	},


	_format: function (inValue, inRowIndex) {

		var value = inValue;
		if (this.decoder) { //对于后台 date类型做防护  时间戳和日期格式都可以
			//处理级联
			if (!this.cascade && this.editor && this.editor.editorProps.cascade) {
				this.cascade = this.editor.editorProps.cascade;
			}
			if (this.cascade && this.cascade.getCascadeStore) {
				this.decoder.store = this._getCascadeStore(this.cascade, inRowIndex);
			}
			if (this.decoder.store && typeof (this.decoder.store) == 'string') {
				//如果没有找到value对应的值,应该返回原始的value值
				//				var dc = this.grid.dataCenter || (unieap.Action.getViewContext(this.grid) || window).dataCenter;
				//				value = unieap.transcode(value,this.decoder,dc)||value;
				var bindingDataCenter = this.grid.getBinding().dataCenter;
				var decodeDC = ((bindingDataCenter == undefined) ?
					(this.grid.dataCenter || (unieap.Action.getViewContext(this.grid) || window).dataCenter) :
					bindingDataCenter);

				/*2020-03-12 增加懒加载匹配XG*/
				if(this.editor && this.editor.editorClass == "unieap.form.ComboBox" && this.editor.editorProps
					&& this.editor.editorProps.autoCompleter && this.editor.editorProps.autoCompleter.url){
					if(value != null && value != ""){
						var isMatchVal = false;
						var dsStore = bindingDataCenter.getDataStore(this.decoder.store);
						if(dsStore){
							$.each(dsStore.getRowSet().getData(),function(rowData){
								if(rowData.id == value){
									isMatchVal = true;
									return false;
								}
							});
						}
						if(!isMatchVal){
							dojo.require("unieap.form.AutoCompleter");
							var autoCompleter = new unieap.form.AutoCompleter(this.editor.editorProps.autoCompleter);
							autoCompleter.dataCenter = bindingDataCenter;
							autoCompleter.storeName = this.decoder.store;
							autoCompleter.decoder = this.decoder;
							autoCompleter._sendQueryByValue(value);
						}
					}
					
				}
				
				
				value = unieap.transcode(value, this.decoder, decodeDC) || value;
			}
		}
		if (this.displayFormatter || this.valueFormatter) {
			value = this._formatValue(value, inRowIndex);
		}
		if (dojo.isFunction(this.formatter)) {
			try {
				value = unieap.fireEvent4Widget(this, this.grid, this.formatter, [value, inRowIndex]);
			} catch (e) {
				if (!this.grid._hasCellFormatterError) {
					this.grid._hasCellFormatterError = true;
					MessageBox.alert({
						type: 'warn',
						message: "	" + this.label + " -- " + RIA_I18N.grid.cell.formatterErrorMessage
					});
				}
			}
			if (typeof (value) == "undefined" && !this.grid._hasCellFormatterError) {
				this.grid._hasCellFormatterError = true;
				MessageBox.alert({
					type: 'warn',
					message: "	" + this.label + " -- " + RIA_I18N.grid.cell.formatterNoReturnValue
				});
			}
			//			this._userDefinedCell=true;
		}
		var isTreeGridLable = false;
		var xTreeMgr = this.grid.managers.get('XTreeManager');
		if (xTreeMgr) { //新版本treeGrid
			isTreeGridLable = (this.name == xTreeMgr.label);
			isTreeGridLable && (value = this._extraFormat(inRowIndex, value));
		} else { //老版本treeGrid
			value = this.extraFormat(inRowIndex, value);
		}
		return value;
	},

	_formatValue: function (value, inRowIndex) {
		//value值格式化操作
		if (this.valueFormatter) {
			value = this.getValueFormatter().format(value, inRowIndex);
		}
		//显示值格式化操作
		var valFormat = /^(\d{4})-(\d{2})-(\d{2})$/;
		if (typeof (value) === 'string' && valFormat.test(value)) { //方法如果传值进来直接是yyyy-mm-dd的格式 就不走格式化 否则会格式化出空
			return value
		}
		if (this.displayFormatter) {
			value = this.getDisplayFormatter().format(value, inRowIndex);
		}
		return value;
	},

	extraFormat: function (inRowIndex, inValue) {
		return inValue;
	},

	_extraFormat: function (inRowIndex, inValue) {
		var tree = this.grid.managers.get("XTreeManager");
		if (tree && tree._formatNode) {
			var value = tree._formatNode(inValue, inRowIndex);
			return value;
		} else {
			return inValue;
		}
	},

	_getCascadeStore: function (cascade, inRowIndex) {
		if (isNaN(inRowIndex)) {
			return null;
		}
		if (!cascade.primaryCell) {
			this.grid.managers.get("LayoutManager").forEachCell(function (cell, index) {
				if ((cell.editor && cell.editor.editorProps &&
						cell.editor.editorProps.id == cascade.primary) ||
					(cell.name == cascade.primary)) {
					cascade.primaryCell = cell;
				}
			});
		}
		return cascade.getCascadeStore(cascade.primaryCell._get(inRowIndex));
	},

	isPercent: function () {
		return this.percent == true;
	},

	/**
	 * @summary:
	 * 		设置单元格的列宽
	 * @return:
	 * 		{string}
	 * @example:
	 * unieap.byId("grid").getLayoutManager().getCell("attr_name").setWidth("300px");
	 * unieap.byId("grid").refresh();
	 */
	setWidth: function (width, drag) {
		if (drag) this.percent = false;
		width = String(width || 200);
		this.width = parseInt(width, 10);
		if (width.indexOf("%") > 0 || this.percent) {
			this.percent = true;
		} else {
			this.percent = false;
		}
	},

	/**
	 * @summary:
	 * 		获得单元格的列宽
	 * @return:
	 * 		{string}
	 * @example:
	 * |var cell=grid.getCell("attr_name");
	 * |var cellWidth=cell.getWidth(); 
	 */
	getWidth: function () {
		return this.isPercent() ? String(this.width).concat("%") : String(this.width).concat("px");
	},

	getPixelWidth: function () {
		return this.width;
	},

	getRealWidth: function () {
		var viewmanager = this.grid.managers.get("ViewManager");
		var view = viewmanager.getViewByCell(this);
		var node = view ? view.getCellNode(0, this.index) : null;
		if (node) {
			return node.offsetWidth;
		} else {
			return this.getPixelWidth();
		}
	},

	getEdit: function () {
		if(this.edit){
		// console.log(this.edit.editors['unieap.form.ComboBox'].values);
		}
		
		if (!this.edit) {
			dojo.require("unieap.grid._grid.cellEdit");
			this.edit = new unieap.grid.cellEdit(this);
		}
		return this.edit;
	},

	/**
	 * @summary:
	 * 		设置单元格上的编辑器
	 * @param:
	 * 		{string}editorClass
	 * @param:
	 * 		{object} editorProps
	 * @example:
	 * |<cell editor="{editorClass:'unieap.form.TextBox'}" label="姓名" name="attr_sal"></cell>
	 * |//将姓名列的编辑器改为NumberTextBox,并设置编辑器能输入的最大长度为10
	 * |var cell=grid.getCell("attr_sal").setEditor("unieap.form.NumberTextBox",{maxLength:10});
	 */
	setEditor: function (editorClass, editorProps) {
		this.getEdit().setEditor(editorClass, editorProps);
		if (!this.editor) {
			this.editor = {};
			this.editor.editorClass = editorClass;
			this.editor.editorProps = editorProps;
		}
	},

	/**
	 * @summary:
	 * 		获得Cell上配置的编辑器
	 * @return:
	 * 		{unieap.form.FormWidget}
	 * @example:
	 * |<cell editor="{editorClass:'unieap.form.TextBox'}" name="attr_sal"></cell>
	 * |var editor=unieap.byId("grid").getCell("attr_sal").getEditor();
	 * |alert(editor.declaredClass); //弹出unieap.form.TextBox
	 */
	getEditor: function (which) {
		return this.getEdit().getEditor(which);
	},


	isValid: function (inRow) {
		if (!this.name) return true;
		var value = inRow.getItemValue(this.name),
			editor = this.getEditor();

		//首先校验编辑器
		if (editor) {
			editor.getBinding().bind(inRow);
			editor.setValue(value);
			result = editor.getValidator().validate();
			editor.getBinding().unbind(inRow);
			if (!result) {
				this._canEdit = true;
				this._errorMsg = editor.getValidator().getErrorMsg();
				return false;
			}
		}

		//元数据校验
		var meta = inRow.getRowSet().getMetaData(this.name);
		if (meta) {
			return this._isMetaValid(meta, value);
		}
		return true;
	},

	_isMetaValid: function (meta, value) {
		// 非空校验
		if (!meta.isNullable() && (value == null || (typeof value == 'string' && dojo.trim(value) === ""))) {
			this._errorMsg = meta.getPrompt("nullable") || RIA_I18N.form.formWidgetValidator.nullError;
			this._canEdit = false;
			return false;
		}
		// 长度校验
		if (typeof (meta.getMaxLength()) != "undefined" && value && unieap.bitLength(value) > meta.getMaxLength()) {
			this._errorMsg = meta.getPrompt("maxLength") || (RIA_I18N.form.formWidgetValidator.maxLengthError + meta.getMaxLength());
			this._canEdit = false;
			return false;
		}
		if (typeof (meta.getMinLength()) != "undefined" && value && unieap.bitLength(value) < meta.getMinLength()) {
			this._errorMsg = meta.getPrompt("minLength") || (RIA_I18N.form.formWidgetValidator.minLengthError + meta.getMaxLength());
			this._canEdit = false;
			return false;
		}
		// 正则校验
		if (typeof (meta.getPattern()) != "undefined" && value && !new RegExp(meta.getPattern()).test(value)) {
			this._errorMsg = meta.getPrompt("pattern") || RIA_I18N.form.formWidgetValidator.errorMsg;
			this._canEdit = false;
			return false;
		}
		// 数值校验（范围、最大值、最小值、精度）
		if (typeof (meta.getRange()) != "undefined" && value && typeof (value) == "number" && (value > meta.getRange().max || value < meta.getRange().min)) {
			this._errorMsg = meta.getPrompt("range") || RIA_I18N.form.formWidgetValidator.errorMsg;
			this._canEdit = false;
			return false;
		}
		if (typeof (meta.getMax()) != "undefined" && value && typeof (value) == "number" && value > meta.getMax()) {
			this._errorMsg = meta.getPrompt("max") || RIA_I18N.form.formWidgetValidator.errorMsg;
			this._canEdit = false;
			return false;
		}
		if (typeof (meta.getMin()) != "undefined" && value && typeof (value) == "number" && value < meta.getMin()) {
			this._errorMsg = meta.getPrompt("min") || RIA_I18N.form.formWidgetValidator.errorMsg;
			this._canEdit = false;
			return false;
		}
		if (typeof (meta.getPrecision()) != "undefined" && value && typeof (value) == "number") {
			value = value + "";
			var len = meta.getPrecision() - meta.getScale(),
				re;
			if (len <= 0) return true;
			if (value.indexOf(".") > -1 && meta.getScale() > 0) {
				re = new RegExp("^(-)?\\d{1," + len + "}.\\d{1," + meta.getScale() + "}$");
			} else {
				re = new RegExp("^(-)?\\d{1," + len + "}$");
			}
			//校验精度
			if (!re.test(value)) {
				if (meta.getScale() > 0) {
					this._errorMsg = meta.getPrompt("scale") || RIA_I18N.form.formWidgetValidator.errorMsg;
					this._canEdit = false;
					return false;
				} else {
					this._errorMsg = meta.getPrompt("precision") || RIA_I18N.form.formWidgetValidator.errorMsg;
					this._canEdit = false;
					return false;
				}
			}
		}
		// 日期校验
		if (typeof (meta.getPast()) != "undefined" && value && value > meta.getPast()) {
			this._errorMsg = meta.getPrompt("past") || RIA_I18N.form.formWidgetValidator.errorMsg;
			this._canEdit = false;
			return false;
		}
		if (typeof (meta.getFuture()) != "undefined" && value && value < meta.getFuture()) {
			this._errorMsg = meta.getPrompt("future") || RIA_I18N.form.formWidgetValidator.errorMsg;
			this._canEdit = false;
			return false;
		}
		return true;
	},

	//获得校验错误提示信息
	getErrorMsg: function () {
		return this._errorMsg;
	},

	//判断单元格是否可编辑
	isEditable: function () {
		return !!this._canEdit;
	},

	//设置是否可编辑
	setEditable: function (canEdit) {
		this._canEdit = !!canEdit;
	},



	destroy: function () {
		if (this.edit) {
			this.edit.destroy();
		}
	}

});
dojo.provide('unieap.grid._grid.cellEdit');

dojo.declare("unieap.grid.cellEdit", null, {
	
	constructor: function(inCell) {
		this.editors = {
			current: null
		};
		this.connects = [];
		this.cell = inCell;
		this.edit = inCell.grid.managers.get("EditManager");
		var editor = inCell.editor;
	
		if (editor) {
			this.setEditor(editor.editorClass, editor.editorProps);
		}
	},
	
	//创建编辑器并且给编辑器绑定上事件
	_createEditor: function(editorClass, editorProps) {
		dojo.require(editorClass);
		var clazz = dojo.getObject(editorClass),
			editor,
			rootID = this.cell.grid._rootID || '';
		if(rootID){
			editorProps._rootID = rootID;
		} 
		editor = new clazz(dojo.mixin(editorProps, {width:"auto",style:"display:block;",binding:{name:this.cell.name},dataCenter:this.cell.grid.dataCenter}));
		 
		this.funnelEvents(editor);
		return editor;
	},
	
//	//给编辑器绑定上事件
	funnelEvents: function(editor) {
		//控件Tab键事件
		this.connects.push(dojo.connect(editor, "onTab", this,function(evt) {
			this.edit.onEditorTab(this.cell, evt);
		}));
		//控件Blur事件
		this.connects.push(dojo.connect(editor, "onBlur", this,function(evt) {
			this.edit.onEditorBlur(this.cell, evt);
		}));
		//控件上下键事件
		if(editor.declaredClass	=="unieap.form.TextBox" || editor.declaredClass	== "unieap.form.NumberTextBox"){
			dojo.connect(editor.focusNode,"onkeydown",this,function(evt){	
				if(evt.keyCode != dojo.keys.UP_ARROW && evt.keyCode != dojo.keys.DOWN_ARROW) return;
				var rowIndex;
				if(evt.keyCode == dojo.keys.DOWN_ARROW)
					rowIndex= this.edit.grid.getManager("EditManager").getCurrentRowIndex()+1;
				else
					rowIndex= this.edit.grid.getManager("EditManager").getCurrentRowIndex()-1;
				if(-1<rowIndex && rowIndex<this.edit.grid.getRowManager().getRowCount()){	
					var editManager =this.edit.grid.managers.managers["EditManager"];
					if(editManager._getEnabledEditor(rowIndex,this.cell)){
						editManager.setEdit(rowIndex,this.cell.name,true); 
					}else{
						editManager.gerNextEditorCell(rowIndex,evt.keyCode == dojo.keys.DOWN_ARROW?"down":"up"); 
					}
				}
				dojo.stopEvent(evt);
			});
		}
		
		
		//cascad事件绑定,监听主ComboBox的onChange事件，刷新从combobox或者配置了cascade属性的单元格
		var cells=this.cell.grid.getManager("LayoutManager").getCells(),
			cellEditor,childCells=[];
		if(editor.declaredClass=="unieap.form.ComboBox"){
			dojo.forEach(cells,function(cell){
				if(this._checkCell(editor,cell)){
					childCells.push(cell);
				}
	
			},this);
		}
		
		if(childCells.length>0){
			this.connects.push(dojo.connect(editor,"onChange",this,function(){
				setTimeout(dojo.hitch(this,function(){
					var row = editor.getBinding().getRow();
					dojo.forEach(childCells,function(cell){
						//modified by zhengh 2011-05-27 解决Grid级联编辑中级联combo数据不正确。U_EAP00019773
						//取得主combobox值
						var index = row.getIndex();
						var primaryValue = editor.getBinding().getValue();
						//调用子combobox的getCascadeStore对应的方法 
						var cascadeStoreFun = cell.getEditor().getCascade().getCascadeStore;
						//获得第index行，子combobox的dataStore名字
						if(cascadeStoreFun){
							var cascadeStoreName = cascadeStoreFun(primaryValue);
							//给子combobox绑定store
							cell.getEditor().getDataProvider().setDataStore(cascadeStoreName);
						}
						this.cell.grid.getManager("ViewManager").refreshCell(row.getIndex(),cell);
					},this)
					
				}),0);
			}));
		}

	},
	
	_checkCell:function(primaryEditor,cascadeCell){
		var cascadeEditor=cascadeCell.editor,
			primaryId=primaryEditor.id,
			cascadeId=(cascadeEditor&&cascadeEditor.cascade&&cascadeEditor.cascade.primary)||
					  (cascadeCell.cascade&&cascadeCell.cascade.primary);
		if(primaryId==cascadeId){
			return true;
		}
		var context = unieap.Action.getViewContext(this.cell.grid);
		try {  //避免 context.rootNode.id 报错的问题  LD
            if(context && primaryId==context.rootNode.id+cascadeId){
                return true;
            }
        }catch (e) {
            return false;
        }

		return false;
	},
	
	//获得编辑器对象,如果传入which,比如'unieap.form.TextBox'就返回一个TextBox对象
	//否则返回当前编辑器对象
	getEditor: function(which) {
		if (!this.editors) return null;
		if(this.cell.editor && this.cell.editor.editorClass == "unieap.form.ComboBoxTree"){
			var newBing =this.cell.editor.editorProps.treeJson.binding;
			if(typeof(newBing.store)=="string"){
				newBing._store=newBing.store;
			}else{
				delete newBing.store;
				newBing.store=newBing._store;
			}
		}
		return which && this.editors[which] || this.editors[this.editors.current];
	},
	//设置编辑器,将编辑器对象保存为Map,其中key为decleredClass,value为控件对象
	//例如{'unieap.form.TextBox':obj
	setEditor: function(editorClass, editorProps) {
		this.editors.current = editorClass;
		if (!(editorClass in this.editors)){
			this.editors[editorClass] = this._createEditor(editorClass, editorProps);
		} else {
			var editor = this.editors[editorClass];
			editor && editor.destroy && editor.destroy();
			delete editor;
			this.editors[editorClass] = this._createEditor(editorClass, editorProps);
		}
	},
	//修改控件的值后更新Grid绑定的datastore中的值,同时销毁控件的domNode,但不销毁控件内存对象
	//在整个编辑中,只存在一个编辑器副本
	applyEdit: function(inRowIndex) {
		var editor = this.getEditor();
		if (!editor) return;
		if(editor.domNode && editor.domNode.parentNode){
			var node = editor.domNode.parentNode;
			node && node.removeChild(editor.domNode);
		}
		//刷新单元格的内容，显示成静态文本
		this.cell.grid.getManager("ViewManager").refreshCell(inRowIndex,this.cell);
	},
	//解除绑定
	unbind : function(){
		var editor = this.getEditor();
		if (!editor) return;
		editor.binding && editor.getBinding().unbind();
	},
	//销毁控件及其事件
	destroy: function() {
		while(this.connects.length>0) {
			dojo.disconnect(this.connects.pop());
		}
		editors = this.editors;
		//销毁控件内存对象
		for (var which in editors) {
			editors[which] && editors[which].destroy && editors[which].destroy();
		}
		delete this.editors;
	}
	
});
dojo.provide('unieap.grid.manager.LayoutManager');
dojo.require('unieap.grid._grid.cell');

dojo.declare("unieap.grid.manager.LayoutManager", null, {
	/**
	 * @declaredClass:
	 * 		unieap.grid.manager.LayoutManager
	 * @summary:
	 * 		布局控制器
	 * @description:
	 * 		布局控制器提供一些布局相关的方法，如：setStructure，getCell，getCells，sortCell等.
	 */
	
	ui: {
		getCell:true,
		sortCell:true,
		hideCell:true,
		showCell:true,
		lockCell:true,
		isHidden:true,
		getStructure:true,
		setStructure:true,
		getCells:true,
		getOriginCells:true
	},
	
	/**
	 * @summary:
	 * 		表格的结构信息
	 * @description
	 * 		在使用new创建Grid时需要使用此参数来指定表格的结构信息，其结构见下例。
	 * @type:
	 * 		{array}
	 * @example:
	 * |//锁定列数据
	 * |var fixedColumns=[
	 * |	{label: "员工编号",name: "attr_empno",width: "150px"}
	 * |]
	 * |//非锁定列数据
	 * |var columns=[
	 * |	{label: "姓名",name: "NAME",width: "100px"},
	 * |	{label: "职位",name: "attr_job",width: "150px"},
	 * |	{label: "工资",name : "attr_sal",width : "150px"}
	 * |]
	 * |var fixed={noscroll: true,rows:[fixedColumns]};
	 * |var header={rows:[columns]}
	 * |var layout = [fixed, header]; //注意这里的顺序，要将锁定列放在前面
	 * |var grid = new unieap.grid.Grid({
	 * |		binding: {store:'empDataStore'},
	 * |		views: {rowNumber: true},
	 * |		layout: {structure: layout},
	 * |		width: 600,
	 * |		height: 250
	 * |});
	 */
	structure: null,
	
	constructor: function(param) {
		dojo.mixin(this, param);
		this.isMulTitle = this.isMulTitle=="true" ? true : false;
		this._parseFoot();
		this._parseToolBar();
		this.structure || this._setLayout(this.grid.srcNodeRef);
	},
	
	_parseFoot: function() {
		if(!this.grid.srcNodeRef){
			return;
		}
		var footNode = dojo.query("div[tagName='foot']",this.grid.srcNodeRef);
		if(footNode.length>0){
			footNode=footNode[0]
			dojo.require("unieap.grid.view.foot");
			//引用foot
			this.grid.foot=new  unieap.grid.view.foot(this.grid,footNode);
		}
	},
	_parseToolBar: function() {
		if(!this.grid.srcNodeRef){
			//增加了一个自定表格的分页
			if(this.grid.zhfPage){
				this.grid.srcNodeRef = this.grid.domNode;
				$(this.grid.domNode).append($('<div tagname="toolbar" paging="{userPageSize:true}"></div>')[0]);
			}else{
				return;
			}
		}
		
		// if(!this.grid.srcNodeRef){
		// 	return;
		// }
		var toolBar=dojo.query("div[tagName='toolbar']",this.grid.srcNodeRef);
		if(toolBar.length>0) {
			//引用toolbar
			dojo.require("unieap.grid.view.toolbar");
			dojo.attr(toolBar[0],'dojoType','unieap.grid.view.toolbar');
			var toolBars=dojo.parser.instantiate(toolBar,{grid:this.grid});
			if(toolBars.length>0){
				this.grid.toolBar=toolBars[0];
			}
		}
	},
	_setLayout: function(node) {
		var layout = [];
		var fixedNode =dojo.query("div[tagName='fixed']",node);
		if(fixedNode.length>0){
			var fixed={noscroll: true};
			fixed["rows"] = this._parseRows(fixedNode[0]);
			layout.push(fixed);
		}
		var headerNode =dojo.query("div[tagName='header']",node);
		if(headerNode.length>0){
			var header={};
			header["rows"] = this._parseRows(headerNode[0]);
			layout.push(header);
		}
		
		this.structure = layout;
		

		
		//for individual
		this.origin = {
			fixed: 0,
			columns: [],
			sequence:[]
		};
		for(var i=0;i<this.structure.length;i++) {
			for(var j=0;this.structure[i]["rows"]&&j<this.structure[i]["rows"].length;j++) {
				for(var k=0;k<this.structure[i]["rows"][j].length;k++) {
					//排除复杂表头和多标题
					if (this.structure[i]["rows"] && this.structure[i]["rows"].length != 1) {
						this.origin = null;
					} else if (this.origin != null) {
						if (this.structure[i].noscroll)	 {
							this.origin.fixed = this.structure[i]["rows"][j].length;
						}
						this.origin.columns.push(this.structure[i]["rows"][j][k]);
					}
				}
			}
		}

		if(this.origin){
			for(var i=0,l=this.origin.columns.length;i<l;i++){
				this.origin.sequence.push(i);
			}
		}


		//load individual
		var individual = this.grid.managers.get("Individual");
		if (this.origin && individual) {
			var customSet = this.getManagerIndividual(this.grid.getOriId());
			if (customSet) {
				if(this._compareIndividualCells(customSet)){
				var cs = {};
				cs.sequence = [];
				cs.fixedNum = 0;
				for (var i = 0; i < customSet.length; i++) {
					var data = customSet[i];
						var currentIndex = this._getCurrentIndex(data);
						(currentIndex == null) && (currentIndex.data.index);
						cs.sequence.push(currentIndex);
					if (data.lock) cs.fixedNum++;
				}
				if(cs.sequence.length==this.origin.sequence.length){
					this._newSequence=dojo.clone(cs.sequence);
				}				
				this.structure = this._customStructure(cs.sequence, cs.fixedNum); 
			} else {
				this.structure = this._customStructure();
					individual.deleteIndividual();
				}
			} else {
				this.structure = this._customStructure();
			}
		} else if (this.origin) {

			this.structure = this._customStructure();
		}
	},
    //表格个性化去前台本地缓存，检测本地是否有缓存，如果有就返回
    getManagerIndividual:function(id){
        if(unieap.WEB_APP_NAME==null) return null;
        if(window.localStorage.getItem(unieap.WEB_PAGE_NAME+id) && JSON.parse(window.localStorage.getItem(unieap.WEB_PAGE_NAME+id)).length > 0  ){ //判斷本地是否有存儲
            return JSON.parse(window.localStorage.getItem(unieap.WEB_PAGE_NAME+id));
        }else{
            return null
        }
    },
	//获得当前cell的index 因为后加入的cell可能会导致之前的顺序混乱
	_getCurrentIndex: function(data){
		var gridCells = this.origin.columns;
		var result = null;
		for(var i=0,len=gridCells.length; i<len; i++){
			if(data.name && data.name == gridCells[i].name){
				result = i;
				break;
			}
		}
		return result;
	},
	//对比grid现有cell的信息和个性化数据中的信息 如果cell都能匹配返回true 反之false
	_compareIndividualCells: function(individualCells){
		var gridCells = this.origin.columns;
//		if(gridCells.length != individualCells.length){
//			return false;
//		}
		var result = true; //最终结果
		var isCellExist = false; //记录indi的某个cell是否还在grid的cells中
		var indiCell = null;
		for(var i=0,indiLen=individualCells.length; i<indiLen; i++){
			isCellExist = false;
			indiCell = individualCells[i];
			for(var j=0,gridLen=gridCells.length; j<gridLen; j++){
				if(gridCells[j].name && gridCells[j].name == indiCell.name){
					isCellExist = true;
					break;
				}
			}
			if(!isCellExist){
				result = false;
				break;
			}	
		}
//		var gridCell = null;
//		for(var i=0,gridLen=gridCells.length; i<gridLen; i++){
//			isCellExist = false;
//			gridCell = gridCells[i];
//			for(var j=0,indivLen=individualCells.length; j<indivLen; j++){
//				if(individualCells[j].name && individualCells[j].name == gridCell.name){
//					isCellExist = true;
//					break;
//				}
//			}
//			if(!isCellExist){
//				result = false;
//				break;
//			}	
//		}
		return result;
	},
	
	_parseRows: function(node) { 
		var row = [];
		var rowNode = dojo.query("div[tagName='row']",node);		
		if(rowNode.length==0){
			row.push(this._parseCells(dojo.query("div[tagName='cell']",node)));			
		}
		for(var i=0;i<rowNode.length;i++){
			row.push(this._parseCells(dojo.query("div[tagName='cell']",rowNode[i])));
		}
		return row;
	},
	
	_parseCells: function(node) {
		var row = [],name,value;
		var _cellProps = unieap.grid.Cell.prototype._cellProps;
		
		for(var i=0,len = node.length;i<len;i++){
				var col = node[i];
				var cell = {};
				for(var prop in _cellProps){
					var value = node[i].getAttribute(prop);					
					if(value!=null){					
						var convertor = this._dataConvertor[_cellProps[prop]];
						cell[prop] = convertor(value);
					}					
				}				
				if(dojo.trim(col.innerHTML)!=""){
					//need to deal with editor !!! 
//					cell["value"] = col.innerHTML;
				}
				row.push(cell);
		}
		return row;
	},
	_dataConvertor : {
		"string" : function(inValue){ return inValue;},
		"number" : function(inValue){return Number(inValue);},
		"boolean" : function(inValue){return inValue=="true";},
		"object" : function(inValue){return dojo.getObject(inValue) || dojo.fromJson(inValue);}
	},
	_postLayout: function() {
		if (this.grid.managers.get("ViewManager").hasRowBar()||this.structure.length==0) {
			dojo.require("unieap.grid.view.rowbar");
			this.structure.unshift({type: 'unieap.grid.RowView', width: 20});
		}
	},
	_structureChanged: function() {
		unieap.grid.notify(this, "structureChanged");
	},
	/**
	 * @summary:
	 * 		取得表格的结构信息
	 * @return:
	 * 		{array}
	 */
	getStructure: function() {
		return this.structure;
	},
	/**
	 * @summary:
	 * 		设置表格结构
	 * @param：
	 * 		{array} inStructure
	 */
	setStructure: function(inStructure) {
		if (!dojo.isArray(inStructure)) return;
		if (inStructure) {
			if (inStructure.length>0) {
				var last = inStructure[inStructure.length-1];
				last.noscroll && delete last.noscroll;
			}
			this.structure = inStructure;
		}
		this._postLayout();
		this.fieldIndex = 0;
		if(this.cells){
			//重新设置结构时，需要先销毁之前创建的对象 否则当有可编辑列时会重复创建编辑器对象
			//chenxujie 2011/03/07
			for(var i=0, c; c=this.cells[i]; i++) {
				c.destroy();
			}
		}
		
		this.cells = [];
		var s = [];
		for(var i=0, viewDef, rows; (viewDef=this.structure[i]); i++){
			s.push(this.addViewDef(viewDef));
		}
		
		//处理单元格是是否有过滤条件
		var customeSeq=this.customStructure&&this.customStructure.seq,
			filterSeq=this._filterSeq;
		if(customeSeq&&filterSeq){
			for(var seqIndex in filterSeq){
				var index=dojo.indexOf(customeSeq,seqIndex);
				index!=-1&&(this.cells[index].filter=filterSeq[seqIndex]);
			}
		}
		this.structure = s;
		this.cellCount = this.cells.length;
		/*重新设置结构时,前面销毁编辑器，这里设置新的编辑器 zhaos 2019/10/21*/
		dojo.forEach(this.cells,function(cell){
			if(typeof(cell.editors)=="undefined" && cell.edit){
				dojo.require("unieap.grid._grid.cellEdit");
				cell.edit = new unieap.grid.cellEdit(cell);
			}
		});
		
		this._structureChanged();
	},
	
	addViewDef: function(inDef){
		this._defaultCellProps = inDef.defaultCell || {};
		return dojo.mixin({}, inDef, {rows: this.addRowsDef(inDef.rows || inDef.cells)});
	},
	addRowsDef: function(inDef){
		var result = [];
		for(var i=0, row; inDef && (row=inDef[i]); i++){
			result.push(this.addRowDef(i, row));
		}
		return result;
	},
	addRowDef: function(inRowIndex, inDef){
		var result = [];
		for(var i=0, def, cell; (def=inDef[i]); i++){
			cell = this.addCellDef(inRowIndex, i, def);
			this.onAfterAddCell(cell);
			result.push(cell);
			this.cells.push(cell);
		}
		return result;
	},
	addCellDef: function(inRowIndex, inCellIndex, inDef){
		var w;
		if(inDef.colSpan > 1){
			w = 0;
		}else{
			w = inDef.width;
		}
		// fieldIndex progresses linearly from the last indexed field
		// FIXME: support generating fieldIndex based a text field name (probably in Grid)
		var fieldIndex = inDef.field != undefined ? inDef.field : (inDef.get ? -1 : this.fieldIndex);
		if((inDef.field != undefined) || !inDef.get){
			this.fieldIndex = (inDef.field > -1 ? inDef.field : this.fieldIndex) + 1; 
		}
		var param = dojo.mixin({}, this._defaultCellProps, inDef, {
			grid: this.grid,
			subrow: inRowIndex,
			layoutIndex: inCellIndex,
			index: this.cells.length,
			fieldIndex: fieldIndex
		});
		w && dojo.mixin(param, {width:w});
		return new unieap.grid.Cell(param);
	},
	onAfterAddCell: function(inCell) {
	},
	
	/**
	 * @summary:
	 * 		获取cell对象
	 * @param:
	 * 		{number|string} inData
	 * @return:
	 * 		{unieap.grid.Cell}
	 * @description:
	 * 		获取某个cell对象，inData可为cell的序号，也可以是cell的name属性值
	 */
	getCell: function(inData) {
		if (typeof(inData)=="number") {
			return this.cells[inData];
		} else {
			for(var i =0;i<this.cells.length;i++){
				if(this.cells[i]["name"]==inData)
					return this.cells[i];
			}
		}
	},
	
	getCells: function() {
		return this.cells;
	},
	
	getOriginCells: function() {
		return this.origin.columns;
	},
	getLayoutInfo:function(type){
	
		var structure=this.getStructure(),
			layoutInfo=[],
			view;
		
		for(var i=0,l=structure.length;i<l;i++){
			view=structure[i];
			//不处理rowbar
			if(view.type&&view.type=="unieap.grid.RowView"){
				continue;
			}
			if(view.rows && view.rows.length>0 && type){
				var newViews = view.rows[0];
				var  exportInfo = function(_self,arg){
					var views = arg;
					var newArr = [],newObj={};
					dojo.forEach(views,function(view2){
							newObj = _self._getCellInfo(view2);
							if(view2['childs']&& view2['childs'].length >0){
								newObj.childs = exportInfo(_self,view2.childs);
								}
							newArr.push(newObj);
						
					})
					return newArr;
				};
				return(exportInfo(this,newViews));
			}
			if(view.rows && view.rows.length>0 && !type){
				layoutInfo.push(this._getViewInfo(view));
			}
			
		}
		return layoutInfo;
	},
	
	_getViewInfo:function(view){
		var rows=view.rows,viewInfo=[];
		for(var i=0,l=rows.length;i<l;i++){
			var row=rows[i],rowInfo=[];
			for(var j=0,k=row.length;j<k;j++){
				var cell=row[j],cellInfo;
				cellInfo=this._getCellInfo(cell);
				cellInfo['width'] != 1 && rowInfo.push(cellInfo);
			}
			viewInfo.push(rowInfo);
		}
		return viewInfo;
	},
	
	_getCellInfo:function(cell){

		var cellInfo={};

		if(cell.name){
			cellInfo.name=cell.name
		}
		var width=null;
		try{width = cell.getWidth()}catch(e){width=cell.width}
		if(width){
			cellInfo.width=width;
		}
		var delHtmlTag = function (str){ //删除表头html标签 和替换E标签
			if(!str){return "&nbsp;"}
		　　return str.replace(/<[^>]+>/g,"").replace("(E)","").replace("*","");
		}
		cellInfo.label = cell.label ? delHtmlTag(cell.label) : '';

		if(cell.rowSpan){
			cellInfo.rowSpan=cell.rowSpan
		}
		if(cell.colSpan){
			cellInfo.colSpan=cell.colSpan
		}
		if(cell.isMulTitle){
			cellInfo.isMulTitle=cell.isMulTitle
		}
		if(cell.grid && cell.grid['group'] && (cell.grid['group'].statistic).hasOwnProperty(cell.name) ){
			cellInfo.totalSum = cellInfo.groupSum = {
				funcExp : cell.grid['group'].statistic[cell.name],
				groupField : cell.grid['group'].name
			 }
		}
		if(cell.displayFormatter &&  cell.displayFormatter.dataFormat){
			cellInfo.dataFormat=cell.displayFormatter.dataFormat;
			cellInfo['displayFormatter'] = {};
			var cellStr = cell.displayFormatter.dataFormat;
			cellInfo['displayFormatter']['dataFormat'] = cellStr.indexOf('.00') >0  ? cellStr.replace(/#.00/g, "0.00"):cellStr;//导出的格式变为###,##0.00
			if(!cell.totalSum&&cellStr.indexOf('.00') >0  && this._checkTotal()){
                cellInfo['totalSum'] = {funcExp:'sum',dataFormat:cellStr.indexOf('.00') >0  ? cellStr.replace(/#.00/g, "0.00"):cellStr}
            }
		}
		
		if(cell.valueFormatter && cell.valueFormatter.dataFormat){
			cellInfo.dataFormat=cell.valueFormatter.dataFormat;
			cellInfo['displayFormatter'] = {};
			var cellStr =  cell.valueFormatter.dataFormat;
			cellInfo['displayFormatter']['dataFormat'] = cellStr.indexOf('.00') >0  ? cellStr.replace(/#.00/g, "0.00"):cellStr;//导出的格式变为###,##0.00
			if(cellStr.indexOf('.00') >0){
				cellInfo.dataType = 'number';
			}
			if(!cell.totalSum&&cellStr.indexOf('.00') >0  && this._checkTotal()){
                cellInfo['totalSum'] = {funcExp:'sum',dataFormat:cellStr.indexOf('.00') >0  ? cellStr.replace(/#.00/g, "0.00"):cellStr}
            }
		}
		if(cell.dataType){
			cellInfo.dataType = cell.dataType;
		}
		if(cell.decoder){
			var decoder=cell.decoder,decoderInfo={};
			var valueAttr=decoder.valueAttr||"CODEVALUE",displayAttr=decoder.displayAttr||"CODENAME";
			var dc = this.grid.getBinding().dataCenter || this.grid.dataCenter || (unieap.Action.getViewContext(this.grid) || window).dataCenter;
			var store=unieap.getDataStore(decoder.store,dc)
			//U_EAP00028693
			if(!store){
				store = unieap.getDataStore(decoder.store, unieap.getTopWin().dataCenter);
			}
			if(store){
				var k,v;
				store.getRowSet().forEach(function(row){
					k=row.getItemValue(valueAttr);
					v=row.getItemValue(displayAttr);
					decoderInfo[k]=v;
				},null,null,null,this)
			}	
			cellInfo.decoder=decoderInfo;
		}
		return cellInfo;
	},
	_checkTotal:function(){//检查是否有合计
        if(this.grid.getBinding().getDataStore() && this.grid.getBinding().getDataStore().getRowSet().getRows()[0]&&this.grid.getBinding().getDataStore().getRowSet().getRows()[0].data.IS_SUM_ROW){
            return true
        }else if(this.grid.class.indexOf('total')>-1){
            return true
        }else{
            return false
        }

    },
	
	destroy: function() {
		for(var i=0, c; c=this.cells[i]; i++) {
			c.destroy();
		}
	},
	
	/**
	 * @summary:
	 * 		判断一列是否被隐藏
	 * @description:
	 * 		参数为unieap.grid.Cell对象的name属性。
	 * 		注意，若表格中不存在此inName值的列，方法也将返回true。
	 * @example:
	 * |	var layout = grid.getManager("LayoutManager");
	 * |	layout.isHidden("attr_salary");
	 * @param:
	 * 		{string} inName
	 * @return:
	 * 		{boolean}
	 */
	isHidden: function(inName) {
		var _structure = this.structure;
	 	var isHidden = true ;
	 	dojo.forEach(_structure,function(view){
	 	   if(view["rows"]){
	 	   	  dojo.forEach(view["rows"],function(rows) {
	 	   	      dojo.forEach(rows,function(cell) {
	 	   	           if(cell.name&&cell.name===inName) {
	 	   	           	  isHidden = false;
	 	   	           	  return isHidden;
	 	   	           }
	 	   	      });
	 	   	  });
	 	   	  }   	
	 	   }
	 	);
	 	return isHidden;
	},
	
	/*
	 * @param {Array} sequence 原始列个性化顺序的数组,元素为数字
	 * @param {Number} fixed 锁定的列数(从左向右按序锁定)
	 */
	_customStructure: function(sequence, fixedNum) {
//		var columns = this.origin.columns; 
// 		U_EAP00029510
		var columns = dojo.clone(this.origin.columns); 
		if (!sequence) {
			sequence = [];
			for (var i = 0; columns[i]; i++) {
				sequence.push(i);
			}
			//记录origin中有多少列被锁定
			fixedNum = this.origin.fixed;
		}
		fixedNum = fixedNum?fixedNum:0;
		
	  	var structure = [];
	  	var fixed = {noscroll: true};
	  	var header = {};
	  	fixed["rows"] = [];
	  	header["rows"] = [];
	  	
		var fixrow = []; //锁定的列数据
		var freerow = []; //非锁定列的数据
		var column = null, cell = null;
		var _cellProps = unieap.grid.Cell.prototype._cellProps;
		for (var i = 0; i < sequence.length; i++) {
			column = columns[sequence[i]];
			if (column&&column["name"] && this.cells) {
				//当有两列的name相同时，会返回同一个cell
				//见bug U_EAP00008081
				var index=-2;
				if(this.customStructure){
					index=dojo.indexOf(this.customStructure.seq,sequence[i]);
				}
				if(index>-1){
					cell=this.cells[index];
					for(var prop in _cellProps) {
						if (prop!="width") {
							if(cell && typeof(cell[prop]) != 'undefined'){ //清除无关属性 U_EAP00029510
								column[prop] = cell[prop];
							}
						}
					}
				}
				
			}
			if (fixedNum && i < fixedNum) {
				fixrow.push(column);
			} else {
				freerow.push(column);
			}
		}
		fixed["rows"].push(fixrow);
		header["rows"].push(freerow);
		
		if (fixrow.length > 0 && freerow.length > 0) {
			structure.push(fixed);
			structure.push(header);
		} else if (fixrow.length > 0) {
			structure.push(fixed);
		} else if (freerow.length > 0) {
			structure.push(header);
		}
		
	    this.customStructure&&this._preserveFilteredCells(this.customStructure.seq,sequence);
		this.customStructure = {
			fixed: fixedNum,
			seq: []
		}
		for (var i = 0; i < sequence.length; i++) {
			this.customStructure.seq.push(sequence[i]);
		}
		return structure;
	 },
	
	//保留设置了过滤的条件的单元格的原始序号
	_preserveFilteredCells:function(prevSeq){
		!this._filterSeq&&(this._filterSeq={});
		dojo.forEach(this.cells,function(cell,index){
			cell.filter&&(this._filterSeq[prevSeq[index]]=cell.filter);
		},this);
	},
	
	//清除过滤信息
	clearFilterInfo:function(cell){
		var seq=this.customStructure;
		if(!seq||!this._filterSeq) return;
		if(cell){
			var index=-2,
				seq=seq.seq;
			for(var i=0,l=this.cells.length;i<l;i++){
				if(cell.id==this.cells[i].id||cell.name==this.cells[i].name){
					index=i;
					break;
				}
			}
			index>-1&&(delete this._filterSeq[seq[index]]);
		}else{
			this._filterSeq&&(delete this._filterSeq);
		}
		
	},
	 
	 /**
	  * @summary:
	  * 	调整Grid各列的次序
	  * @param:
	  * 	{array} sequence 
	  * @param:
	  * 	{number} fixedNum
	  * @description:
	  * 	参数sequence为列顺序数组, 
	  * 	形如:[4,2,3,1,0](数字为列的原始序号),["col1", "col3", "col2"](字符串为列的id)
	  * 	没有出现在sequence数组中的列将被隐藏
	  * 	参数fixedNum为锁定列数
	  * 	如：sortCell([4,2,1,0,3],2)
	  * @example:
	  * |	var layout = grid.getManager("LayoutManager");
	  * |	layout.sortCell(["col1", "col3", "col2"], ${1}2);
	  * ${1}表示锁定前两列
	  */
	 sortCell: function(sequence, fixedNum) {
	 	var se = sequence;
		if(!dojo.isArray(se)||se.length==0||!this.customStructure) return;
		
		//单帧情况下cell的ID带有前缀，在for循环中判断时需要处理
		var rootId = this.grid._rootID==undefined?"":this.grid._rootID;
		se=unieap.array_unique(se);
	 	for (var i = 0; i < se.length; i++) {
			!isNaN(se[i])&&(se[i]=parseInt(se[i],10));
	 		if (dojo.isString(se[i])) {
	 			for (var j = 0; this.origin.columns[j]; j++) {
	 				if (this.origin.columns[j].id ==(rootId+se[i])||this.origin.columns[j].securityId==se[i]) {
	 					se[i] = j;
	 					break;
	 				}
	 			}
	 			if (dojo.isString(se[i])) return;
	 		} else if (isNaN(se[i]))	{
	 			return;
	 		}
	 	}
		if(se.length==this.origin.sequence.length){
			var caller=arguments.callee.caller;
			caller.nom!='applyIndividual'&&(this._newSequence=se);
		}
		
	 	var s = this._customStructure(se, fixedNum);
	 	if (s) {
	 		this.structure = s;
	 		this.setStructure(this.structure);
	 	} 
	 	
	 },
	 
	 /**
	  * @summary: 
	  * 	隐藏列
	  * @param：
	  * 	{array} cols
	  * @description:
	  * 	参数cols为隐藏列的数组,
	  * 	形如:[2,4](数字为列的原始序号,表示隐藏原始列号为2,4的两列),["col1", "col3", "col2"](字符串为列的id)
	  * @example:
	  * |	var layout = this.grid.getManager("LayoutManager");
	  * |	layout.hideCell(["col1", "col3", "col2"]);
	  */
	 hideCell: function(cols) {
		var seq=this.customStructure;
		if(!dojo.isArray(cols)||cols.length==0||!seq) return;
		
		//单帧情况下cell的ID带有前缀，在for循环中判断时需要处理
		var rootId = this.grid._rootID==undefined?"":this.grid._rootID;
		cols=unieap.array_unique(cols);		
	 	for (var i = 0; i < cols.length; i++) {
			!isNaN(cols[i])&&(cols[i]=parseInt(cols[i],10));
	 		if (dojo.isString(cols[i])) {
	 			for (var j = 0; this.origin.columns[j]; j++) {
	 				if (this.origin.columns[j].id == (rootId+cols[i])||this.origin.columns[j].securityId==cols[i]) {
	 					cols[i] = j;
	 					break;
	 				}
	 			}
	 			if (dojo.isString(cols[i])) return;
	 		} else if (isNaN(cols[i]))	{
	 			return;
	 		}
	 	}
		
	 	var fixed =seq.fixed,
			seq=dojo.clone(seq.seq);
		
		for(var i=0,l=cols.length;i<l;i++){
			if((index=dojo.indexOf(seq,cols[i]))>-1){
				index<fixed&&fixed--;
				seq.splice(index,1);
			}
		}
	 	var s = this._customStructure(seq, fixed);
	 	if (s) {
	 		this.structure = s;
	 		this.setStructure(this.structure);
	 	} 
	 },
	 
	 /**
	  * @summary:
	  * 	显示列
	  * @param:
	  * 	{array} cols
	  * @description:
	  * 	参数cols为显示列的数组，
	  * 	形如:[2,4](数字为列的原始序号,表示显示原始列号为2,4的两列),["col1", "col3", "col2"](字符串为列的id)
	  * @example:
	  * |	var layout = grid.getManager("LayoutManager");
	  * |	layout.showCell(["col1", "col3", "col2"]);
	  */
	 showCell: function(cols) {
		var seq=this.customStructure;
		if(!dojo.isArray(cols)||cols.length==0||!seq) return;

		//单帧情况下cell的ID带有前缀，在for循环中判断时需要处理
		var rootId = this.grid._rootID==undefined?"":this.grid._rootID;
	 	cols=unieap.array_unique(cols);
	 	for (var i = 0; i < cols.length; i++) {
			!isNaN(cols[i])&&(cols[i]=parseInt(cols[i],10));
	 		if (dojo.isString(cols[i])) {
	 			for (var j = 0; this.origin.columns[j]; j++) {
	 				if (this.origin.columns[j].id ==(rootId+cols[i])||this.origin.columns[j].securityId==cols[i]) {
	 					cols[i] = j;
	 					break;
	 				}
	 			}
	 			if (dojo.isString(cols[i])) return;
	 		} else if (isNaN(cols[i]))	{
	 			return;
	 		}
	 	}
	 	
	 	var fixed = seq.fixed,
			seq=dojo.clone(seq.seq),
			newSeq=this._newSequence,
			hide=[],
			_seq;

		if(newSeq&&newSeq.length>0){
			_seq=newSeq;
		}else{
			_seq=this.origin.sequence;
		}
		
		//获得所有隐藏的元素
		
		for(var i=0,l=_seq.length;i<l;i++){
			var show=false;
			for(var j=0,k=seq.length;j<k;j++){
				if(_seq[i]==seq[j]){
					show=true;
					break;
				}
			}
			show || hide.push(_seq[i]);
		}

		//如果不存在隐藏的列,直接返回
		if(hide.length==0) return;
		
		for(var i=0,l=cols.length;i<l;i++){
			var tempIndex=-1;
			if((index=dojo.indexOf(hide,cols[i]))>-1){
				if(newSeq){
					tempIndex=dojo.indexOf(newSeq,hide[index])
				}
				tempIndex==-1?(tempIndex=hide[index]):(tempIndex=tempIndex);
				tempIndex>fixed?(tempIndex=tempIndex):(tempIndex=fixed);
				seq.splice(tempIndex,0,hide[index]);
			}
		}
	 	var s = this._customStructure(seq, fixed);
		
	 	if (s) {
	 		this.structure = s;
	 		this.setStructure(this.structure);
	 	} 
	 },
	 
	 
	 /**
	  * @summary:
	  * 	列锁定/解锁
	  * @param:
	  * 	{array} cols
	  * @param:
	  * 	{boolean} isLock
	  * @description:
	  * 	参数cols代表被锁定列的数组,
	  * 	形如:[4,2](数字为列的原始序号,第2列和4列将被锁定),["col1", "col3", "col2"](字符串为列的id或者securityId)
	  * 	参数isLock设置操作类型为锁定还是解锁,可不写,默认为锁定。
	  * @example:
	  * |	var layout = grid.getManager("LayoutManager");
	  * |	layout.lockCell(["col1", "col3", "col2"], true);
	  */
	 lockCell: function(cols, isLock) {
	 	var seq=this.customStructure;
	 	if (!dojo.isArray(cols)||cols.length==0||!seq) {
	 		return;
	 	}
	 	
		//单帧情况下cell的ID带有前缀，在for循环中判断时需要处理
		var rootId = this.grid._rootID==undefined?"":this.grid._rootID;
		cols=unieap.array_unique(cols);
		
		typeof(isLock)=='undefined'&&(isLock=true);

	 	for (var i = 0; i < cols.length; i++) {
			!isNaN(cols[i])&&(cols[i]=parseInt(cols[i],10));
	 		if (dojo.isString(cols[i])) {
	 			for (var j = 0; this.origin.columns[j]; j++) {
	 				if (this.origin.columns[j].id == (rootId+cols[i])) {
	 					cols[i] = j;
	 					break;
	 				}
	 			}
	 			if (dojo.isString(cols[i])) return;
	 		} else if (isNaN(cols[i]))	{
	 			return;
	 		}
	 	}
		
	 	var fixed=seq.fixed,
			seq=dojo.clone(seq.seq),
			newSeq=this._newSequence,
			lockedSeq=[], //当前序列中被锁定的列序号
			expectedSeq=[]; //能执行锁定或者解锁操作的序列
			
		for(var i=0,l=seq.length;i<l;i++){
			if(i<fixed){
				lockedSeq.push(seq[i]);
			}
		}
		
		//如果当前序列没有锁定列并且要执行列解锁操作,直接返回
		if(lockedSeq.length==0&&!isLock) return;
		
		for(var i=0,l=cols.length;i<l;i++){
			//要执行锁定操作的列都必须可见
			if(dojo.indexOf(seq,cols[i])>-1){
				if(isLock){ //如果想执行锁定列操作,cols[i]必须处于未锁定状态
					dojo.indexOf(lockedSeq,cols[i])==-1&&expectedSeq.push(cols[i]);
				}else{ //如果想执行解锁操作,cols[i]必须处于锁定状态
					dojo.indexOf(lockedSeq,cols[i])>-1&&expectedSeq.push(cols[i]);
				}
			}
		}
		
		
		if(expectedSeq.length==0) return;
		
		for(var i=0,l=expectedSeq.length;i<l;i++){
			var index=dojo.indexOf(seq,expectedSeq[i]);
			seq.splice(index,1);//删除原有的序列
			if(isLock){
				seq.splice(fixed,0,expectedSeq[i]);//插入新的序列
				fixed++;
			}
		}
		
		//如果是解锁操作,将expectedSeq重新放到seq中
		if(!isLock){
			fixed-=expectedSeq.length;
			var _count=fixed;
			for (var i = 0, l = expectedSeq.length; i < l; i++) {
				seq.splice(_count,0,expectedSeq[i]);
				_count++;
			}
		}

	 	var s = this._customStructure(seq, fixed);
	 	if (s) {
	 		this.structure = s;
	 		this.setStructure(this.structure);
	 	} 
	 },
	 
	forEachCell: function(inCallback) {
		for(var i=0, c; c=this.cells[i]; i++) {
			inCallback(c, i);
		}
	}
});

dojo.provide('unieap.grid.view.view');
dojo.require("dijit._Widget");
dojo.require("dijit._Templated");

dojo.declare('unieap.grid.View', [dijit._Widget, dijit._Templated], {
	
	rowClassTag: 'u-grid-row',
	headerNode: null,
	headerBuilder: null,
	contentBuilder: null,
	lastTop: null,
	viewWidth: "",    
	
	templateString: '<td class="u-grid-view-cell" valign="top">' +
						'<div class="u-grid-header-scrollbox" dojoAttachPoint="headerScrollNode">' +
							'<div dojoAttachPoint="headerContentNode" class="u-grid-header-content"></div>' +							
						'</div>' +
						'<div dojoAttachPoint="contentboxNode" class="u-grid-contentbox">'+
							'<div class="u-grid-scrollbox" dojoAttachPoint="scrollboxNode">' +
								'<div class="u-grid-content" dojoAttachPoint="contentNode"></div>' +
							'</div>' +
						'</div>'+
					'</td>',
					
	postCreate: function() { 

		this.rowNodes = [];
		this.headerBuilder = new unieap.grid.view.HeaderBuilder(this);
		this.contentBuilder = new unieap.grid.view.ContentBuilder(this);
		//IE11
		if(dojo.isIE && dojo.isIE>10){
			dojo.removeClass(this.scrollboxNode,'u-grid-scrollbox');
			dojo.addClass(this.scrollboxNode,'u-grid-scrollbox-IE11');
		}
	},
	destroy: function() {
		dojo.destroy(this.domNode);
		dojo.destroy(this.headerNode);
		this.inherited(arguments);
	},
	resizeContentWidth: function() {
		var width = 0;
		for(var c = this.rowTable["cols"],i=c.length-1;i>=0;i--) {
			if(!c[i].resized && c[i].isPercent()) {
				dojo.style(this.contentNode,"width","auto");				
				return ;
			}
			width+=c[i].getPixelWidth();
		}
		dojo.style(this.contentNode,"width",(width)+"px");
		if(!this.noscroll){
			dojo.style(this.headerContentNode.firstChild.firstChild,"width",width+"px");
		}
	},
	
	setStructure: function(inStructure) {
		this.structure = inStructure;

		this.noscroll = inStructure.noscroll;
		if (this.noscroll) {
			dojo.style(this.scrollboxNode,"overflow", "hidden");			
		}else{
			this.connect(this.scrollboxNode, "onscroll", "doscroll");
		}
		this.updateStructure();
	},
	
	updateStructure: function() {
		this.updateLayout();
		this.headerBuilder.update();
		this.contentBuilder.update();
	},
	
	getHeaderNode: function() {
		if (!this.headerNode) {
			var header = document.createElement('td');
			dojo.addClass(header, 'u-grid-header');
			header.appendChild(this.headerScrollNode);
			this.headerNode = header;
		}
		return this.headerNode;
	},
	
	getRowNode: function(inRowIndex) {
		return this.rowNodes[inRowIndex];
	},
	
	getCellNode: function(inRowIndex, inCellIndex) {
		var row = this.getRowNode(inRowIndex);
		if (row) {
			return this.contentBuilder.getCellNode(row, inCellIndex);
		} else {
			return null;
		}
	},
	
	getCurrentRows: function() {
		var rows = [];
		for(i in this.rowNodes) {
			if (isNaN(i)) {continue;}
			rows.push(Number(i));
		}
		return rows;
	},
	
	getScrollbarWidth: function() {
		return (this.noscroll ? 0 : unieap.grid.getScrollbarWidth());
	},
	updateLayout: function() {
		this._prepareTable();
		this._generateTableColGroup();
		this._buildContentStructure();
		if (this.noscroll) {
			var vw = 0;
			for (var i=0, l=this.rowTable["cols"].length; i<l; i++) {
				var cell = this.rowTable["cols"][i] ;
				vw += cell.isPercent() ? 200 : cell.getPixelWidth();
			}

			dojo.style(this.domNode, 'width', vw+"px");
			dojo.style(this.headerNode, 'width', vw+"px");
		}
	},
	_prepareTable: function() {
		this.rowTable = {content : ""};
		var rows = this.structure.rows,wa=[],layout=[];
//		if (rows.length < 2) return;
		for(var j=0; j<rows.length; j++) {
			wa[j] = [];
		}
		for(var j=0, index, cell, row; (row=rows[j]); j++) {
			index = 0;
			wa[j] = wa[j] || [];
			layout[j] = layout[j] || [];
			for (var i=0, l; (cell=row[i]); i++) {
				if((l=Number(cell.colSpan))>1) {
					for (var k=0;k<l;k++) {
						while(wa[j][index]!=null) {
							index++;
						};
						for(var k1=1,ll=Number(cell.rowSpan);k1<ll;k1++) {
							wa[j+k1] = wa[j+k1] || [];
							wa[j+k1][index] = -1;
							layout[j+k1] = layout[j+k1] || [];
							layout[j+k1][index] = cell.index;
						}
						wa[j][index] = -1;
						layout[j][index] = cell.index;
						index++;
					}
				} else {
					while(wa[j][index]!=null) {
						index++;
					};
					wa[j][index] = cell.index;
					layout[j][index] = cell.index;
					for(var k=1,l=Number(cell.rowSpan);k<l;k++) {
						wa[j+k] = wa[j+k] || [];
						wa[j+k][index] = wa[j][index];
						layout[j+k] = layout[j+k] || [];
						layout[j+k][index] = layout[j][index];
					}
					index++;
				}
			}
		}

		this.rowTable["layout"] = layout;
		this.rowTable["cache"]  = wa;
	},
	_generateTableColGroup: function() {
		var wa = this.rowTable["cache"],t = [], w = [];
		t.push("<colgroup>");
		var layout = this.grid.managers.get("LayoutManager");
		for (var k=0,l = wa[0].length; k< l;k++) {
			for(var i=0;i<wa.length;i++) {
				if (wa[i][k] != -1) {
					var cell = layout.getCell(wa[i][k]);
					if (this.noscroll && cell.isPercent() && !cell.isRowBar) {
						cell.setWidth("200px");
					}
					t.push("<col style='width:"+cell.getWidth()+"'>");
					w.push(cell);
					break;
				}
			}
		}
		t.push("</colgroup>");
		this.rowTable["colgroup"] = t.join("");
		this.rowTable["cols"] = w;
	},
	_buildContentStructure: function() {
		var _t = this.rowTable["layout"];
		this.contentStructure = {};
		var layout = this.grid.managers.get("LayoutManager");
		if (_t.length == 0) {
			return;
		}
		//映射多标题表结构,升级法
		for (var i,j=0,cursor,cell; j<_t[0].length; j++,i=_t.length-1) {
			i=_t.length-1;
			cursor = _t[i][j];
			i--;
			while(i>=0) {
				cell = layout.getCell(_t[i][j]);
				if (cell.isMulTitle) {
					_t[i][j] = cursor;
				} else {
					cursor = _t[i][j];
				}
				i--;
			}
		}
		var d = [];
		for (var i=0; i<_t.length-1; i++) {
			var same = true;
			for (var j=0; j<_t[i].length; j++) {
				if (_t[i][j] != _t[i+1][j]) {
					same = false;
					break;
				}
			}
			if (same) {
				d.push(i);
			}
		}
		//删除重复行
		for (i in d) {
			delete _t[i];
		}
		//生成contentStructure
		var rows = [], cs=[];
		for (i in _t) {
			if (typeof(_t[i]) == "function") {
				continue;
			} else {
				rows.push(_t[i]);
			}
		}
		for (var i=0; i<rows.length; i++) {
			var row = [];
			for (var j=0,cell; j< rows[i].length;) {
				if (rows[i][j] == -1) {
					j++;
					continue;
				}
				cell = layout.getCell(rows[i][j]);
				//compute rowSpan
				var n = i + 1;
				while(rows[n] && rows[n][j] == rows[i][j]) {
					rows[n][j] = -1;
					n++;
				}
				var rowSpan = n-i;
				if (rowSpan && rowSpan>1) {
					cell.contentRowSpan = rowSpan;
				}
				//compute colSpan
				n = j+1;
				while(rows[i][j] == rows[i][n]) {
					n++;
				}
				var colSpan = n-j;
				if (colSpan && colSpan>1) {
					cell.contentColSpan=colSpan;
				}
				
				row.push(cell);
				j = n;
			}
			cs.push(row);

		}

		this.contentStructure.rows = cs;
	},
	hasCell: function(inCell) {
		var rows = this.structure.rows;
		for (var row=0; row<rows.length; row++) {
			for (var c=0; c<rows[row].length; c++) {
				if (inCell == rows[row][c])
					return true;
			}
		}
		return false;
	},
	prerender: function(inRowHeight, inHeaderHeight) {
		this.rowHeight = inRowHeight;
        // this.rowHeight = 50;
		this.headerHeight = inHeaderHeight;
		this.renderHeader();
	},
	renderHeader: function() {
		this.headerContentNode.innerHTML = this.headerBuilder.generateHtml();
		this.resizeContentWidth();
		unieap.grid.notify(this, "onHeaderRender",[this.headerContentNode,this]);
	},
	
	renderRow: function(inRowNode, inRowIndex) {
		if (inRowNode) {
			this.grid.managers.get("RowManager").onRowRemoved(inRowNode, inRowIndex);
			inRowNode.innerHTML = this.contentBuilder.generateHtml(inRowIndex);
		}
		unieap.grid.notify(this, "onRowRender", [inRowNode, inRowIndex,this]);
	},
	
	//销毁锁定行
	destroyLockedRow:function(){
		if(this.lockedNode){
			dojo.empty(this.lockedNode)
		}
	},
	//渲染锁定行
	renderLockedRow:function(data){
		if(!data || data.length==0){
			return;
		}
		if(!this.lockedNode){
			var _tem =	"<div class='u-grid-locked'>"+
							"<div class='u-grid-locked-content'>"+
								"<div class='u-grid-inner'>"+
									"<div class='u-grid-locked-content-rows'>"+
									"</div>"+
								"</div>"+
							"</div>"+
						"</div>"
			var node=dojo._toDom(_tem);
			this.lockedContentNode = node;
			this.lockedNode=node.childNodes[0].childNodes[0].childNodes[0];
//			dojo.query(".u-grid-locked-content-rows",node)[0];
			this.lockedScrollNode=this.lockedNode.parentNode;
//			if(!this.noscroll){
//				//解决挡住滚动条 使下拉失效的bug U_EAP00005982
//				dojo.style(node.childNodes[0],'marginRight','17px');
//			}
			this.generateLockedRow(this.lockedNode,data)
			dojo.place(node,this.scrollboxNode,'after');
		}else{
			this.generateLockedRow(this.lockedNode,data)
		}
	},
	generateLockedRow:function(lockedNode,data){
		var inner="";

		dojo.forEach(data,function(d,index){
			inner+="<div class='u-grid-row";
			inner+=(index==0)?' u-grid-toplockedrow':'';
			inner+=(Boolean(index&1)?'':' u-grid-row-odd');
			inner+="'>"
			inner+=this.contentBuilder.generateHtml(index,d,true);
			inner+="</div>";
		},this)
		lockedNode.innerHTML=inner;
		this.resizeLocked(data);
	},
	resizeLocked:function(data){
		dojo.style(this.lockedScrollNode,'height',(data.length*this.rowHeight) + "px");
		var width =0;
		if(!this.noscroll){
			for(var c = this.rowTable["cols"],i=c.length-1;i>=0;i--) {
				if(c[i].isPercent()) {
					dojo.style(this.lockedNode,'width','100%');
					return ;
				}
			}
		}

		dojo.style(this.lockedNode,'width',dojo.style(this.contentNode,'width')+'px');
	},
	setScrollTop: function(inTop) {
		if(this.lastTop==null){
			this.lastTop = inTop;
			return;
		}
		this.lastTop = inTop;
		this.scrollboxNode.scrollTop = inTop;
		var left = this.scrollboxNode.scrollLeft;
		this.headerContentNode.firstChild.scrollLeft = left
		this.lockedScrollNode&&(this.lockedScrollNode.scrollLeft = left);
	},
	doscroll: function(inEvent) {
		//如果有过滤菜单并且菜单处于显示状态,滚动滚动条时应该关闭菜单.
		var menuManager=this.grid.managers.managers['MenuManager'],
			scrollLeft=this.scrollboxNode.scrollLeft
		if(menuManager){
			var menu=menuManager.getMenu();		 
	 		menu.isShowingNow&&dijit.popup.close(menu);	   
		}
		//滚动表格内容,标题也应该跟着滚动
		this.headerContentNode.firstChild.scrollLeft =scrollLeft ;
		var top = this.scrollboxNode.scrollTop;
		if (top != this.lastTop) {
			unieap.grid.notify(this, "scrollTo", [top]);
		}
		if(this.lockedScrollNode){
			this.lockedScrollNode.scrollLeft=scrollLeft
		}


	},
	
	doContentEvent: function(e) {
		if(this.contentBuilder.decorateEvent(e)) {
			this.grid.onContentEvent(e);
		}
	},
	doHeaderEvent: function(e) {
		if(this.headerBuilder.decorateEvent(e)) {
			//防止快速点击表头多次排序,当数据量过大时会使得浏览器假死
			typeof(this._flag)=='undefined'&&(this._flag=true)
			var target = e.srcElement || e.target;
			if(this._flag&&e.type=='click'&&target.type!="checkbox"){
				this._flag=false;
				this.grid.onHeaderEvent(e);
				setTimeout(dojo.hitch(this,function(){
					this._flag=true;
				}),250)
				
			}else if((e.type=='click'&&target.type=="checkbox")||e.type!='click'){
				this.grid.onHeaderEvent(e);
			}
			
		}
	},
	// event dispatch(from Grid)
	dispatchContentEvent: function(e) {
		return this.contentBuilder.dispatchEvent(e);
	},
	dispatchHeaderEvent: function(e) {
		return this.headerBuilder.dispatchEvent(e);
	},
	onMouseOver: function(e) {
		unieap.grid.notify(this, "onMouseOver", [e]);
	},
	onMouseOut: function(e) {
		unieap.grid.notify(this, "onMouseOut", [e]);
	},
	
	//鼠标移过表头
	onMouseOverHeader: function(e) {
		unieap.grid.notify(this, "onHeaderMouseOver", [e]);
	},
	
	
	//鼠标移出表头
	onMouseOutHeader: function(e) {
		unieap.grid.notify(this, "onHeaderMouseOut", [e]);
	},
	
	onMouseOverRow: function(e) {
		unieap.grid.notify(this, "onMouseOverRow", [e]);
	},
	onMouseOutRow: function(e) {
		unieap.grid.notify(this, "onMouseOutRow", [e]);
	},
	//改变列宽方法
	updateCellWidth: function(inCell, inWidth) {
		inCell.setWidth(inWidth,true);		
		var colCells = this.rowTable["cols"],
			layout = this.grid.managers.get("LayoutManager"),
			w = 0, t = [], index = -1, isPercent = false;
			t.push("<colgroup>");
		for (var i=0,cell,vw,col; colCells[i]; i++) {
			cell = colCells[i];
			if (cell == inCell) {
				index = i;
			}
			if (cell.isPercent()) {
				isPercent = true;
			}
			t.push("<col style='width:"+cell.getWidth()+";'>");
			w += cell.getPixelWidth();
		}
		t.push("</colgroup>");
		this.rowTable["colgroup"] = t.join("");
		if (this.noscroll) {
			dojo.style(this.domNode,"width",w+"px");
			dojo.style(this.headerNode,"width",w+this.getScrollbarWidth()+"px");
			dojo.style(this.contentNode,"width",w+"px");
			dojo.style(this.headerContentNode,"width",w+this.getScrollbarWidth()+"px");
			dojo.style(this.headerContentNode.firstChild, "width", w+"px");
			this.lockedNode&&dojo.style(this.lockedNode,"width",w+"px");
		} else {
			if (!isPercent) {
				dojo.style(this.contentNode,"width",w+"px");
				dojo.style(this.headerContentNode.firstChild.firstChild, "width", w+"px");
				this.lockedNode&&dojo.style(this.lockedNode,"width",w+"px");
			}
		}
//		this.renderHeader();
		this._resizeWidth(this.headerContentNode, index, inCell.getWidth());
		this._resizeWidth(this.contentNode, index, inCell.getWidth());
		this.lockedNode&&this._resizeWidth(this.lockedNode,index,inCell.getWidth());
		
		//safari/chrome直接改变table的colgroup时，结构更新不及时
		//手动将结点隐藏再显示
		if (dojo.isSafari || dojo.isChrome) {
			dojo.style(this.headerContentNode, "display", "none");
			dojo.style(this.contentNode, "display", "none");
			unieap.grid.jobs.job("u-grid-cellresize", 0, dojo.hitch(this, function() {
				dojo.style(this.headerContentNode, "display", "block");
				dojo.style(this.contentNode, "display", "block");
			}));
		}
		//调整滚动条
		var viewManager = this.grid.managers.get("ViewManager");
		var _this = this;
		var timer = setTimeout(function(){ // U_EAP00029570 原因是grid在渲染过程中 无法判断是否会有滚动条 需要等待渲染结束
			viewManager.adjustScrollBar();
			_this.setScrollTop(_this.lastTop);
			_this.grid.scrollTop = _this.lastTop; // 记录拖拽表格最后一次的滚动条高度
			clearTimeout(timer)
		},0);
	},
	
	_resizeWidth : function(node,index,width) {
		var colgroups; 
		if(node){
			if(node==this.contentNode){
				colgroups=dojo.query('> div > div > .u-grid-row-table > colgroup',node);
			}else{
				//header lockedNode
				colgroups=dojo.query('> div > .u-grid-row-table > colgroup',node);
			}
		}
		for(var colgroup, i= 0;colgroup = colgroups[i]; i++) {
			dojo.style(colgroup.childNodes[index],"width",width);
		}
	},
	//调整滚动条的位置
	adjustScrollBar : function(port,b){
		//如果數據集大於0  除去class
		var gridId = this.grid.id;
        var defaultRowHeight =  this.grid.getRowManager().defaultRowHeight
		if(this.grid.binding && this.grid.binding.rowData && this.grid.binding.rowData.length > 0){
			dojo.removeClass(dojo.byId(gridId),'xgrid-contant-bjimg');
            dojo.style(this.contentNode,"height",(this.grid.binding.rowData.length*defaultRowHeight+this.grid.binding.rowData.length)+"px"); //重新计算contentNode的高度
            if($(this.contentNode).parents('.u-grid').hasClass('acct_slry_grid')){
            	  dojo.style(this.contentNode,"height",(this.grid.binding.rowData.length*38)+"px"); //如果是 acct_slry_grid 就重新计算高度
            }
        }
		if(this.grid.binding && this.grid.binding.rowData && this.grid.binding.rowData.length == 0){
            dojo.addClass(dojo.byId(gridId),'xgrid-contant-bjimg');
		}
        var browser={   //判断内核
            versions:function(){
                var u = navigator.userAgent, app = navigator.appVersion;
                return {
                    trident: u.indexOf('Trident') > -1, //IE内核
                    edge : u.indexOf('Edge') > -1,//Edge内核
                    presto: u.indexOf('Presto') > -1, //opera内核
                    webKit: u.indexOf('AppleWebKit') > -1, //苹果、谷歌内核
                    gecko: u.indexOf('Gecko') > -1 && u.indexOf('KHTML') == -1,//火狐内核
                    mobile: !!u.match(/AppleWebKit.*Mobile.*/), //是否为移动终端
                    ios: !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端
                    android: u.indexOf('Android') > -1 || u.indexOf('Adr') > -1, //android终端
                    iPhone: u.indexOf('iPhone') > -1 , //是否为iPhone或者QQHD浏览器
                    iPad: u.indexOf('iPad') > -1, //是否iPad
                    webApp: u.indexOf('Safari') == -1, //是否web应该程序，没有头部与底部
                    weixin: u.indexOf('MicroMessenger') > -1, //是否微信 （2015-01-22新增）
                    qq: u.match(/\sQQ/i) == " qq" //是否QQ
                };
            }(),
            language:(navigator.browserLanguage || navigator.language).toLowerCase()
        };
       
		var height = this.domNode.clientHeight;
    	//林栋   判断是否有滚动条  如果有滚动条 预留滚动条的位置  并且判断是否是webkit浏览器  是否支持自定义滚动条
        if(this.grid.binding && this.grid.binding.rowData&&this.grid.binding.rowData.length>0&&Number(this.grid.binding.rowData.length)* 44 > height){
            if(browser.versions.webKit && !browser.versions.edge){
				port.v = 5;
				port.h = 7;
            }
		}else {
            port.v = 0;
		}
        if(browser.versions.webKit && !browser.versions.edge){
			port.v = 5;
			port.h = 7;
        }
		//如果是隐藏的
		$('#'+gridId).removeClass('headerRight5').removeClass('headerRight17');
		if(!height) return;
		if(this.noscroll){
            dojo.style(this.scrollboxNode, "height", (height- port.h) + "px");
            $('#'+gridId).removeClass('headerRight5').removeClass('headerRight17');
			// dojo.style(this.scrollboxNode, "height", (height - port.h) + "px");
		}else{
			var viewManager = this.grid.managers.get("ViewManager");
			viewManager.scroller.windowHeight = height - port.h;
			// dojo.style(this.headerContentNode,"marginRight",port.v + "px"); //取消这个
			var defaultRowHeight = this.grid.managers.get('RowManager').defaultRowHeight;
			if(this.grid.binding && this.grid.binding.rowData&&this.grid.binding.rowData.length>0&&Number(this.grid.binding.rowData.length)* (defaultRowHeight+1) > height){  //判断数据高度是否超过表格高度   如果超过 出滚动条
				if(port.v == 5){ //如果是谷歌浏览器
					$('#'+gridId).addClass('headerRight5').removeClass('headerRight17');
				}else{
				//if(port.v >0 && port.v !== 5){ //如果不是谷歌浏览器
					$('#'+gridId).addClass('headerRight17').removeClass('headerRight5');
				}
			}
		

			this.lockedContentNode && dojo.style(this.lockedContentNode.childNodes[0],'marginRight',port.v + "px");
		}
		if(this.lockedContentNode){
			dojo.style(this.lockedContentNode,"bottom",port.h + "px");
			//IE6存在bug
			dojo.style(this.lockedContentNode,"display","none");
			dojo.style(this.lockedContentNode,"display","block");
		}
	},
	//获取scroll view的滚动条状态
	getScrollBarPort : function(){
		var n = this.scrollboxNode;
		return {
			v : n.clientWidth < n.offsetWidth ? 17 : 0,
			h : n.clientHeight < n.offsetHeight ? 17 : 0
		};	
	}
});

dojo.provide('unieap.grid.view.rowbar');
dojo.require('unieap.grid.view.view');

dojo.declare('unieap.grid.RowView', unieap.grid.View, {
	
	rowClassTag: 'u-grid-rowbar',
	
	noscroll: true,
	isRowBar: true,
	cellWidth: true,
	
	_keyEventHandle:{},
	_keyEventHeaderHandle:null,
	
	postCreate: function() {
		this.inherited(arguments);
		this.headerEvtHandler = [];
		this.contentEvtHandler = [];
		this._fs = parseInt(dojo.style(this.grid.domNode,"fontSize"))/2 || 6 ;
	},
	
	setStructure: function(inStructure) {
		
		this.structure = inStructure;
		this.cellWidth = this.structure.width || 20;
		dojo.style(this.scrollboxNode,"overflow", "hidden"); 
		//绑定自动扩展rowbar的事件
		if(this.rowNumber){
			var viewManager = this.grid.managers.get("ViewManager");			
			this.connect(viewManager, "render", "_resizeNumberWidth");
			this.connect(viewManager, "setScrollTop", "_resizeNumberWidth");
		}
	},
	_resizeNumberWidth : function() {
		if(!this.rowNumber) return ;	
		var viewManager = this.grid.managers.get("ViewManager");						
		var number = viewManager.scroller.lastVisibleRow;
		var store = this.grid.getBinding().getDataStore();
		number += (store.getPageNumber()-1) * store.getPageSize();	
		var	width = String(number).length*this._fs+6;	
		if(width<=20 || width == undefined) width = 30;

		this.resizeContentWidth(width);
		//调整滚动条
		var viewManager = this.grid.managers.get("ViewManager");
		viewManager.adjustScrollBar();
	},
	
	resizeContentWidth: function(inWidth) {
		// var width = (this.getRowBarWidth(inWidth) < 20) ? 25 : this.getRowBarWidth(inWidth)  ;
        var width = parseInt(this.getRowBarWidth(inWidth)) < 20 ? '25px' : this.getRowBarWidth(inWidth)  ;
		if(this.originWidth == width) return ;
		this.originWidth = width;
		dojo.style(this.headerNode,"width",(parseInt(width)-0.8)+'px');
		dojo.addClass(this.headerNode,'gridRowHeard');
		dojo.style(this.headerContentNode.firstChild,"width",width);
		dojo.style(this.domNode,"width",width);
		this.lockedNode&&dojo.style(this.lockedNode,"width",width);
	},
	
	prepareHtml: function() {
		var html = [];
		html.push('<table class="u-grid-rowbar-table " style="height:');
		//html[1]: rowHeight
		html.push('');
		html.push('px;" cellspacing=0 cellpadding=0>');
		
		html.push('<tr>');
		//html[4]: cells
		html.push('');
		html.push('</tr></table>')
		return html;
	},
	
	renderHeader: function() {
		var html = this.prepareHtml();
		html[1] = this.headerHeight;
		html[4] = this.generateRowCells(-1);

		this.headerContentNode.innerHTML = html.join('');
        if(this.grid.edit){
			dojo.disconnect(this._keyEventHeaderHandle);
			this._keyEventHeaderHandle= null;
			var widgets = dojo.query("input[type^=checkbox]", this.headerContentNode);
			if(widgets && widgets[0]){
				this._keyEventHeaderHandle=(dojo.connect(widgets[0],"onkeydown",this,function(evt){
					if(evt.keyCode == dojo.keys.DOWN_ARROW){
						if(this.grid.managers.managers.EditManager.focusRowBarByIndex(0))
							dojo.stopEvent(evt);
					}else if(evt.keyCode == dojo.keys.SPACE){
						unieap.fep(widgets[0]);
					}
				}));
			}
		}
		
		this.originWidth = 0;
		this.resizeContentWidth();
	},
	
	renderRow: function(inRowNode, inRowIndex,isFocus) {
		if (!inRowNode) return;
		var html = this.prepareHtml();
		html[1] = this.rowHeight;
		html[4] = this.generateRowCells(inRowIndex);
		inRowNode.innerHTML = html.join('');
		if(this.grid.edit && this.grid.edit.editType != "readonly"){
			this._editRowBarEvent(inRowNode, inRowIndex, isFocus);
		}
		unieap.grid.notify(this, "onRowRender", [inRowNode, inRowIndex,this]);
	},
	
	_editRowBarEvent:function(inRowNode, inRowIndex,isFocus){

		dojo.disconnect(this._keyEventHandle[inRowIndex]);
		this._keyEventHandle[inRowIndex]= null;
		var widgets = dojo.query("input", inRowNode);
		if(widgets && widgets[0]){
			if(isFocus){
				try{
					widgets[0].focus();
				}catch(e){}
			}
			this._keyEventHandle[inRowIndex]=(dojo.connect(widgets[0],"onkeydown",this,function(evt){
				if(evt.keyCode == dojo.keys.TAB&&!evt.shiftKey){
					var editManager = this.grid.managers.managers.EditManager;
					editManager.gerNextEditorCellWithRowBar(inRowIndex,"next");
					dojo.stopEvent(evt);
				}
				else if(evt.keyCode == dojo.keys.DOWN_ARROW){
					this.grid.managers.managers.EditManager.gerNextEditorCellWithRowBar(inRowIndex+1,"down");
					dojo.stopEvent(evt);
				}
				else if(evt.keyCode == dojo.keys.UP_ARROW){
					if(inRowIndex-1 > -1){
						this.grid.managers.managers.EditManager.gerNextEditorCellWithRowBar(inRowIndex-1,"up");
					}else{
						var widget = dojo.query("input", this.grid.headerNode)[0];
						if(widget){
							widget.focus();
						}
					}
					dojo.stopEvent(evt);
				}
				else if(evt.keyCode == dojo.keys.TAB&&evt.shiftKey){
					if(this.grid.managers.managers.EditManager.gerNextEditorCellWithRowBar(inRowIndex-1,"up")){
						dojo.stopEvent(evt);
					}
				}
				else if(evt.keyCode == dojo.keys.LEFT_ARROW || evt.keyCode == dojo.keys.RIGHT_ARROW){
					dojo.stopEvent(evt);
				}
			}));
		}
	},
	
	destroy: function() {

		dojo.destroy(this.domNode);
		dojo.destroy(this.headerNode);
		for(index in this._keyEventHandle){
			dojo.disconnect(this._keyEventHandle[index]);
		}
		this._keyEventHandle = null;
		dojo.disconnect(this._keyEventHeaderHandle);
		this._keyEventHeaderHandle = null;
		this.inherited(arguments);
	},
	
	generateLockedRow:function(node,data) {
		var _html = '<div class="u-grid-rowbar" style="height:' + this.rowHeight + 'px;"><table class="u-grid-rowbar-table " style="width:100%;"  cellspacing=0 cellpadding=0><tr>';
		var html_='</tr></table></div>';
		var cell,inner=[];
		 dojo.forEach(data,function(d,index){
	    
	       var value=d['_BAR']||'';
		    var gclass="";
		   
            if(value.cls){
		       gclass=value.cls;
		    }
		    if(value.value){
		     value=value.value;
		   }
		    cell = "<td class='u-grid-rowbar-cell'><nobr class='"+gclass+"'>"+value+"</nobr></td>";
			inner.push(_html,cell,html_);
	        
		},this)
		node.innerHTML=inner.join('');
	},
	
	generateRowNumberCell: function(inRowIndex) {
		if(inRowIndex<0){ 
			return this.generateBlankCell(false);
		}
		var result = [];
		var store = this.grid.getBinding().getDataStore();
		inRowIndex += (store.getPageNumber()-1) * store.getPageSize();
		result.push('<td class="u-grid-rowbar-cell">');
		result.push(inRowIndex+1);
		result.push('</td>');
		return result;
	},
	generateBlankCell : function(bool){
		var result = [];
		var text = this.rowNumber ? 'NO.' : '&nbsp;'
		if(!bool){
			result.push('<td class="u-grid-rowbar-cell">');
			result.push(text);
			result.push('</td>');
		}
		return result;
	},
	
	//may be override by selection module
//	generateColGroup: function() {
//		return '<colgroup><col style="width: ' + this.cellWidth + 'px"></col></colgroup>';
//	},
	//may be override by selection module
	generateRowCells: function(inRowIndex) {
		var viewManager = this.grid.managers.get("ViewManager");
		var plusCells=this.grid.managers.getPlus(viewManager,'generateRowBarCells');
		var cells= this.rowNumber ?  this.generateRowNumberCell(inRowIndex) : [];
//		var cells= this.rowNumber ?  this.generateRowNumberCell(inRowIndex) : this.generateBlankCell(plusCells && plusCells.length);

		if(plusCells){
			var td;
			dojo.forEach(plusCells,function(_g){
				td=_g.call(this,inRowIndex);
				td && cells.push(td);
//				cells.push(_g.call(this,inRowIndex));
			})
		}
		if (cells.length==0) {
			cells = this.generateBlankCell(false);
		}
        return cells.join('');
	},
	
	getRowBarWidth: function(inWidth) {	
		var width=inWidth   || (this.cellWidth);
		var viewManager = this.grid.managers.get("ViewManager");
		var widths=this.grid.managers.getPlus(viewManager,'getRowBarWidth');
		var _twidth=1;
		if(widths&&widths.length>0){
		 	for(var i=0;i<widths.length;i++){
				var _mw=widths[i];
				if(typeof _mw =="function"){
					_twidth+=_mw.call();
				}else if(typeof _mw =="number"){
					_twidth+=_m;
				}
			}
		 }
		 if(!this.rowNumber&&_twidth!=1){  //如果rowbar只是单独一个选框 计算宽度   否则 就用下面的宽度
		 	return 50+"px";
		 }

		 return (width+_twidth+5)+"px";
	},
	
	dispatchHeaderEvent: function(e) {
		if (this.headerEvtHandler.length>0) {
    		for (var i=0, p; p=this.headerEvtHandler[i]; i++) {
    			p.apply(this, [e]);
    		}
    	} else {
    		this.inherited(arguments);
    	}
	},
	
	dispatchContentEvent: function(e) {
		//this.contentEvtHandler的修改见SelectionPatch.js中的doPatch方法
		if (this.contentEvtHandler.length>0) {
			for (var i=0, p; p=this.contentEvtHandler[i]; i++) {
    			p.apply(this, [e]);
    		}
		}
		var index=Number(e.rowIndex);
		if(e.type == "mouseover" && typeof(index)!='undefined'){
			this.grid.managers.get('RowManager').setOverRow(index);
		}
		//返回为true,见Grid.js中的dispatchContentEvent方法
		//这样就只执行e.sourceView.dispatchContentEvent(e)不执行this._dispatch(e.dispatch, e);
		return true;
	}
});
dojo.provide('unieap.grid.view.scroller');

dojo.declare('unieap.grid.view.scroller.base', null, {
	
	rowCount: 0,
	keepRows: -1,
	defaultRowHeight: 21,
	
	constructor: function() {
		this.pageHeights = [];
		this.stack = [];
	},
	
	invalidate: function() {
		this.invalidateNodes();
		this.pageHeights = [];
		this.height = (this.pageCount ? (this.pageCount - 1)* this.pageHeight + this.calcLastPageHeight() : 1);
		this.resize();
	},
	// abstract interface
	pageExists: function(inPageIndex) {
	},
	measurePage: function(inPageIndex) {
	},
	//每行高度
	getRowHeight : function(node){
	},
	positionPage: function(inPageIndex, inPos) {
	},
	repositionPages: function(inPageIndex) {
	},
	installPage: function(inPageIndex) {
	},
	preparePage: function(inPageIndex, inPos, inReuseNode) {
	},
	renderPage: function(inPageIndex) {
	},
	removePage: function(inPageIndex) {
	},
	// sizing implementation
	calcLastPageHeight: function() {
		if(!this.pageCount){
			return 0;
		}
		var lastPage = this.pageCount - 1;
		var lastPageHeight = ((this.rowCount % this.rowsPerPage)||(this.rowsPerPage)) * this.defaultRowHeight;
		this.pageHeights[lastPage] = lastPageHeight;
		return lastPageHeight;
	},
	updateContentHeight: function(inDh){
		this.height += inDh;
		this.resize();
	},
	updatePageHeight: function(inPageIndex){
		if(this.pageExists(inPageIndex)){
			var oh = this.getPageHeight(inPageIndex);
			var h = (this.measurePage(inPageIndex))||(oh);
			this.pageHeights[inPageIndex] = h;
			if((h)&&(oh != h)){
				this.updateContentHeight(h - oh);
				this.repositionPages(inPageIndex);
			}
		}
	},
	rowHeightChanged: function(inRowIndex){
		this.updatePageHeight(Math.floor(inRowIndex / this.rowsPerPage));
	},
	// scroller core
	invalidateNodes: function(){
		while(this.stack.length){
			this.destroyPage(this.popPage());
		}
	},
	createPageNode: function(){
		var p = document.createElement('div');
		p.style.position = 'absolute';
		p.style.width = '100%';
		p.style.left = '0';
		return p;
	},
	getPageHeight: function(inPageIndex){
		var ph = this.pageHeights[inPageIndex];
		return (ph !== undefined ? ph : this.pageHeight);
	},
	// FIXME: this is not a stack, it's a FIFO list
	pushPage: function(inPageIndex){
		return this.stack.push(inPageIndex);
	},
	popPage: function(){
		return this.stack.shift();
	},
	findPage: function(inTop){
		var i = 0, h = 0;
		for(var ph = 0; i<this.pageCount; i++, h += ph){
			ph = this.getPageHeight(i);
			if(h + ph >= inTop){
				break;
			}
		}
		this.page = i;
		this.pageTop = h;
	
	},
	buildPage: function(inPageIndex, inReuseNode, inPos){
		this.preparePage(inPageIndex, inReuseNode);
		this.positionPage(inPageIndex, inPos);
		// order of operations is key below
		this.installPage(inPageIndex);
		this.renderPage(inPageIndex);
		// order of operations is key above
		this.pushPage(inPageIndex);
	},
	needPage: function(inPageIndex, inPos){
		
		var h = this.getPageHeight(inPageIndex), oh = h;
		if(!this.pageExists(inPageIndex)){
			
			this.buildPage(inPageIndex, (this.keepPages)&&(this.stack.length >= this.keepPages), inPos);
			h = this.measurePage(inPageIndex) || h;
			this.pageHeights[inPageIndex] = h;
			
			if(h && (oh != h)){
				this.updateContentHeight(h - oh)
			}
		}else{
			this.positionPage(inPageIndex, inPos);
		}
	//防止acct_slry_grid这种表格的时候  出现多个page的情况下高度计算错误
		if($(this.pageNodes[0][inPageIndex]).parents('.u-grid').hasClass('acct_slry_grid')){ 
			this.pageHeights.splice(inPageIndex,1,this.rowsPerPage * 38);
			return (this.rowsPerPage * 38)
		}
		return h;
	},
	scroll: function(inTop){
		this.findPage(inTop);
		var h = this.height;
		var b = this.getScrollBottom(inTop);
		for(var p=this.page, y=this.pageTop; (p<this.pageCount)&&((b<0)||(y<b)); p++){
			y += this.needPage(p, y);
		}
		this.firstVisibleRow = this.getFirstVisibleRow(this.page, this.pageTop, inTop);
		this.lastVisibleRow = this.getLastVisibleRow(p - 1, y, b);
		// indicates some page size has been updated
		if(h != this.height){
			this.repositionPages(p-1);
		}
		return inTop + this.windowHeight <= this.height ?  inTop : ((inTop = this.height - this.windowHeight) <= 0 ? 0 : inTop);
	},
	getScrollBottom: function(inTop) {
		return (this.windowHeight >= 0 ? inTop + this.windowHeight : -1);
	}
	
});

dojo.declare('unieap.grid.view.scroller', unieap.grid.view.scroller.base, {
	// virtual rendering interface
	renderRow: function(inRowIndex, inPageNode){
	},
	removeRow: function(inRowIndex){
	},
	// page node operations
	getDefaultNodes: function(){
		return this.pageNodes;
	},
	getDefaultPageNode: function(inPageIndex){
		return this.getDefaultNodes()[inPageIndex];
	},
	positionPageNode: function(inNode, inPos){
		inNode.style.top = inPos + 'px';
	},
	getPageNodePosition: function(inNode){
		return inNode.offsetTop;
	},
	repositionPageNodes: function(inPageIndex, inNodes){
		var last = 0;
		for(var i=0; i<this.stack.length; i++){
			last = Math.max(this.stack[i], last);
		}
		var n = inNodes[inPageIndex];
		var y = (n ? this.getPageNodePosition(n) + this.getPageHeight(inPageIndex) : 0);
		
		for(var p=inPageIndex+1; p<=last; p++){
			n = inNodes[p];
			if(n){
				if(this.getPageNodePosition(n) == y){
					return;
				}
				this.positionPage(p, y);
			}
			y += this.getPageHeight(p);
		}
	},
	invalidatePageNode: function(inPageIndex, inNodes){
		var p = inNodes[inPageIndex];
		if(p){
			delete inNodes[inPageIndex];
			this.removePage(inPageIndex, p);
			unieap.grid.cleanNode(p);
			p.innerHTML = '';
		}
		return p;
	},
	preparePageNode: function(inPageIndex, inReusePageIndex, inNodes){
		var p = (inReusePageIndex === null ? this.createPageNode() : this.invalidatePageNode(inReusePageIndex, inNodes));
		p.pageIndex = inPageIndex;
		p.id = 'page-' + inPageIndex;
		inNodes[inPageIndex] = p;
	},
	// implementation for page manager
	pageExists: function(inPageIndex){
		return Boolean(this.getDefaultPageNode(inPageIndex));
	},
	measurePage: function(inPageIndex){
		if (inPageIndex<this.pageCount-1) {
			return this.rowsPerPage*this.defaultRowHeight;
		} else {
			return (this.rowCount-this.rowsPerPage*(this.pageCount-1))*this.defaultRowHeight;
		}
		//	return this.getDefaultPageNode(inPageIndex).offsetHeight;
	},
	repositionPages: function(inPageIndex){
		this.repositionPageNodes(inPageIndex, this.getDefaultNodes());
	},
	// scroll control
	getPageRow: function(inPage){
		return inPage * this.rowsPerPage;
	},
	getLastPageRow: function(inPage){
		return Math.min(this.rowCount, this.getPageRow(inPage + 1)) - 1;
	},
	getFirstVisibleRowNodes: function(inPage, inPageTop, inScrollTop, inNodes){
		var row = this.getPageRow(inPage);
		var rows = unieap.grid.divkids(inNodes[inPage]);
		for(var i=0,l=rows.length; i<l && inPageTop<inScrollTop; i++, row++){
			inPageTop += this.getRowHeight(rows[i]);
		}
		return (row ? row - 1 : row);
	},
	getFirstVisibleRow: function(inPage, inPageTop, inScrollTop){
		if(!this.pageExists(inPage)){
			return 0;
		}
		return this.getFirstVisibleRowNodes(inPage, inPageTop, inScrollTop, this.getDefaultNodes());
	},
	getLastVisibleRowNodes: function(inPage, inBottom, inScrollBottom, inNodes){
		var row = this.getLastPageRow(inPage);
		var rows = unieap.grid.divkids(inNodes[inPage]);
		for(var i=rows.length-1; i>=0 && inBottom>inScrollBottom; i--, row--){
			inBottom -= this.getRowHeight(rows[i]);
		}
		return row + 1;
	},
	getLastVisibleRow: function(inPage, inBottom, inScrollBottom){
		if(!this.pageExists(inPage)){
			return 0;
		}
		return this.getLastVisibleRowNodes(inPage, inBottom, inScrollBottom, this.getDefaultNodes());
	},
	findTopRowForNodes: function(inScrollTop, inNodes){
		var rows = unieap.grid.divkids(inNodes[this.page]);
		for(var i=0,l=rows.length,t=this.pageTop,h; i<l; i++){
			h = this.getRowHeight(rows[i]);
			t += h;
			if(t >= inScrollTop){
				this.offset = h - (t - inScrollTop);
				return i + this.page * this.rowsPerPage;
			}
		}
		return -1;
	},
	findScrollTopForNodes: function(inRow, inNodes){
		var rowPage = Math.floor(inRow / this.rowsPerPage);
		var t = 0;
		for(var i=0; i<rowPage; i++){
			t += this.getPageHeight(i);
		}
		this.pageTop = t;
		this.needPage(rowPage, this.pageTop);
		if (inNodes[rowPage]) {
			var rows = unieap.grid.divkids(inNodes[rowPage]);
			var r = inRow - this.rowsPerPage * rowPage;
			for(var i=0,l=rows.length; i<l && i<r; i++){
				t += this.getRowHeight(rows[i]);
			}
			return t;
		} else {
			//means this row doesn't exist
			return -1;
		}
		
	},
	findTopRow: function(inScrollTop){
		return this.findTopRowForNodes(inScrollTop, this.getDefaultNodes());
	},
	findScrollTop: function(inRow){
		return this.findScrollTopForNodes(inRow, this.getDefaultNodes());
	}
});

dojo.declare('unieap.grid.view.scroller.columns', unieap.grid.view.scroller, {
	setContentNodes: function(inNodes) {
		this.contentNodes = inNodes;
		this.colCount = (this.contentNodes ? this.contentNodes.length : 0);
		this.pageNodes = [];
		for(var i=0; i<this.colCount; i++) {
			this.pageNodes[i] = [];
		}
	},
	
	init: function(inRowCount, inKeepRows, inRowsPerPage, inDefaultRowHeight) {
		var defaultRowheight = 0;
		if(inDefaultRowHeight < 35){//解决默认行高少计算1px的问题
            defaultRowheight = 29
		}else if(inDefaultRowHeight>60){
            defaultRowheight=54  //财务自定义表格 默认修改为54px
		} else{
            defaultRowheight = 43
		}
		switch(arguments.length){
			case 4: this.defaultRowHeight = defaultRowheight;
			case 3: this.rowsPerPage = inRowsPerPage;
			case 2: this.keepRows = inKeepRows;
			case 1: this.rowCount = inRowCount;
		}
		this.pageHeight = this.defaultRowHeight * this.rowsPerPage;
		//this.pageHeight = this.defaultRowHeight * Math.min(this.rowsPerPage, this.rowCount);
		this.pageCount = Math.ceil(this.rowCount / this.rowsPerPage);
		this.keepPages = Math.max(Math.ceil(this.keepRows / this.rowsPerPage), 2);
		this.invalidate();
	},
	
	updateRowCount: function(inRowCount) {
		this.invalidateNodes();
		this.rowCount = inRowCount;
		// update page count, adjust document height
		var oldPageCount = this.pageCount;
		this.pageCount = Math.ceil(this.rowCount / this.rowsPerPage);
		if(this.pageCount < oldPageCount){
			for(var i=oldPageCount-1; i>=this.pageCount; i--) {
				this.height -= this.getPageHeight(i);
				delete this.pageHeights[i]
			}
		}else if(this.pageCount > oldPageCount){
			this.height += this.pageHeight * (this.pageCount - oldPageCount - 1) + this.calcLastPageHeight();
		}
		this.resize();
	},
	
	getDefaultNodes: function() {
		//return this.pageNodes[0] || [];
		return this.pageNodes[this.pageNodes.length-1] || [];
	},
	
	scroll: function(inTop) {
		if(this.colCount){
			return unieap.grid.view.scroller.prototype.scroll.call(this, inTop);
		}
		return 0;
	},
	resize: function() {
		for(var i=0; i<this.colCount; i++) {
			unieap.grid.setStyleHeightPx(this.contentNodes[i], this.height);
		}
	},
	
	// implementation for page manager
	positionPage: function(inPageIndex, inPos) {
		for(var i=0; i<this.colCount; i++){
			this.positionPageNode(this.pageNodes[i][inPageIndex], inPos);
		}
	},
	preparePage: function(inPageIndex, inReuseNode) {
		var p = (inReuseNode ? this.popPage() : null);
		for(var i=0; i<this.colCount; i++){
			this.preparePageNode(inPageIndex, p, this.pageNodes[i]);
		}
	},
	installPage: function(inPageIndex) {
		for(var i=0; i<this.colCount; i++){
			this.contentNodes[i].appendChild(this.pageNodes[i][inPageIndex]);
		}
	},
	destroyPage: function(inPageIndex) {
		for(var i=0; i<this.colCount; i++){
			unieap.grid.removeNode(this.invalidatePageNode(inPageIndex, this.pageNodes[i]));
		}
	},
	removePage: function(inPageIndex) {
		for(var i=0, j=inPageIndex*this.rowsPerPage; i<this.rowsPerPage; i++, j++) {
			this.removeRow(j);
		}
	},
	renderPage: function(inPageIndex) {
		var nodes = [];
		for(var i=0; i<this.colCount; i++){
			nodes[i] = this.pageNodes[i][inPageIndex];
		}
		//this.renderRows(inPageIndex*this.rowsPerPage, this.rowsPerPage, nodes);
		for(var i=0, j=inPageIndex*this.rowsPerPage; (i<this.rowsPerPage)&&(j<this.rowCount); i++, j++) {
			this.renderRow(j, nodes);
		}
	},
	getRowHeight : function(node){
		return this.defaultRowHeight;
		//return node.offsetHeight;
	}
});
dojo.provide('unieap.grid.view.toolbar');
dojo.require("dijit._Widget");
dojo.require("dijit._Templated");
dojo.declare('unieap.grid.view.toolbar', [dijit._Widget, dijit._Templated], {
    /**
     * @summary:
     * 		Grid的工具条
     * @declaredClass:
     * 		unieap.grid.view.toolbar
     * @classDescription：
     * 		可进行翻页,打印,导出,个性化等操作的工具条
     * @example:
     * |<div dojoType="unieap.grid.Grid" id="grid">
     * |	<header>
     * |		<cell label="编号" name="attr_name"></cell>
     * |		<cell label="职位" name="attr_job"></cell>
     * |	</header>
     * |	${1}<toolbar ${2}print='{}' paging='{}' export='{}' individual='{}'>
     * |		<button>自定义按钮</button>
     * |	</toolbar>
     * |</div>
     * ${1}Grid中定义toolbar标签,通过grid.getToolBar()得到Grid的toolbar
     * ${2}print,paging,export,individual分别传递相关信息。
     * @img:
     * 		images/grid/toolbar.png
     */

    grid: null,

    /**
     * @summary：
     * 		翻页相关信息
     * @description:
     * 		toolbar默认初始化翻页信息
     * @type:
     * 		{object}
     * @see:
     * 		unieap.grid.manager.PagingManager
     */
    paging: null,

    /**
     * @summary:
     * 		打印相关信息
     * @description：
     * 		配置print属性才初始化打印相关的功能
     * @type：
     * 		{object}
     * @example：
     * |	<toolbar print='{...}'>
     * |	</toolbar>
     * 		toolbar上会出现一个打印按钮
     * @see:
     * 		unieap.grid.manager.PrintManager
     */
    print: null,



    /**
     * @summary:
     * 		导出相关信息
     * @description:
     * 		配置export属性才初始化导出相关的功能
     * @type:
     * 		{object}
     * @example：
     * |	<toolbar export='{defaultType:"client"}'>
     * |	</toolbar>
     * 		export的defaultType信息表示导出方式,可为client server
     * @see:
     * 		unieap.grid.manager.ExportManager
     */
    'export': 'client',
    	/**
	 * @summary:
	 * 		导出相关信息是否显示
	 * @description:
	 * 		配置页面导出是否显示出来 默认显示 个别页面可以不显示
	 * @type:
	 * 		{boolean}
	 * default:
	 * 		false
	 * @example:
	 * |<div dojoType="unieap.grid.Grid" id="grid">
	 * |	<headr>
	 * |		<cell label="编号" name="attr_name"></cell>
	 * |		<cell label="职位" name="attr_job"></cell>
	 * |	</header>
	 * |	<toolbar export="{enableExport:true}"></toolbar>
	 * |</div>
	 */
	enableExport:true,

    /**
     * @summary:
     * 		导入相关信息
     * @description:
     * 		配置import属性才初始化导出相关的功能
     * @type:
     * 		{object}
     * @example：
     * |	<toolbar import='{pageURL:"XXX"}'>
     * |	</toolbar>
     */
    'import': null,

    _destroyWidgets: null,

    /**
     * @summary:
     * 		个性化相关信息
     * @description
     * 		配置individual属性才初始化个性化相关的功能
     * 		通过个性化对话框可以配置列的显示、锁定、位置
     * @type:
     * 		{object}
     * @see:
     * 		unieap.grid.manager.Individual
     */
    individual: null,

    templateString: "<div class='u-grid-master-toolbar'>" +
    //翻页条
    "<div class='u-grid-page left '>" +
    "<table cellPadding='0' cellSpacing='0'><tbody><tr>" +
    "<td><span dojoAttachPoint='firstImageNode' class='ico u-grid-page-first'></span></td>" +
    "<td><span dojoAttachPoint='prevImageNode' class='ico u-grid-page-prev'></span></td>" +
    "<td><span dojoAttachPoint='pageNoStart' class='u-grid-page-totalPage'></span></td>" +
    "<td><input dojoAttachPoint='pageNoNode' class='u-grid-page-pageNo'></td>" +
    "<td><span dojoAttachPoint='totalPageNoNode' class='u-grid-page-totalPage'></span></td>" +
    "<td><span dojoAttachPoint='nextImageNode' class='ico u-grid-page-next'></span></td>" +
    "<td><span dojoAttachPoint='lastImageNode' class='ico u-grid-page-last'></span></td>" +
    "<td><div class='sep'></div></td>" +
//								    "<td><div class='sep'></div></td>" +
    "</tr></tbody></table>" +
    "</div>" +

     //导出、打印、个性化
     "<div  class='u-grid-page right  gird-liebiao' dojoAttachPoint='girdLiebiao'>" +
        //  "<i class='iconfont icon-liebiao-'></i>"+
        "<div class='u-gird-senior'>"+
        '<span>高级</span><a href="javascript:void(0);" tabindex="-1" class="u-form-textbox-icon u-a-common u-form-textbox-icon-normal u-form-combobox-icon-normal" dojoattachpoint="iconNode"></a>'+
        '</div>'+
         "<div class='liebiao-div'>"+
            "<table cellPadding='0' cellSpacing='0'><tbody><tr>" +
            "<td><span class='u-grid-individual' dojoAttachPoint='individualNode'></span></td>" +
            "<td><span class='u-grid-export' dojoAttachPoint='exportNode' ></span></td>" +
            "<td><span class='u-grid-import' dojoAttachPoint='importNode'></span></td>" +
            // "<td><div class='u-grid-print ' dojoAttachPoint='printNode'><i class='iconfont icon-pdfexport'></i><span >导出PDF</span></div></td>" +
            "</tr></tbody></table>" +
        "</div>"+
     "</div>" +

    //动态改变每页显示数据条数
    "<div class='u-grid-page right '>"+
    "<table cellPadding='0' cellSpacing='0'><tbody><tr>"+
    "<td><span class='u-grid-cpagesize-left  cpagesizeText' dojoAttachPoint='perPageNode'></span></td>"+
    "<td dojoAttachPoint='customPageSizeNode'></td>"+
    "<td><span class='u-grid-cpagesize-right cpagesizeText' dojoAttachPoint='rowsNode'></span></td>"+
    "<td><div class='sep'></div></td>" +
    "</tr></tbody></table>"+
    "</div>"+

    //用户在toolbar上自定义显示
    "<div  class='u-grid-page left' >" +
    // "<div  class='u-grid-page left' style='display:none'>" +
    "<table cellPadding='0' cellSpacing='0'><tbody><tr><td dojoAttachPoint='containerNode' height='100%'>" +
    "</td></tr></tbody></table>" +
    "</div>" +

    //翻页信息显示(本页多少条记录、共多少条记录)
    "<div class='u-grid-page right'>" +
    "<table cellPadding='0' cellSpacing='0'><tbody><tr><td>" +
    "<span dojoAttachPoint='pageInfoNode'></span>" +
    "</td></tr></tbody></table>" +
    "</div>" +
    "<div class='u-xgrid-title-row-operation u-grid-page right isBlock' dojoAttachPoint='rowOperation'>" +
                    "<span class='pagetotal'></span>" +
     "</div>" +
    "</div>",

    //本页共{0}条记录  共{1}条记录
    _pageInfoTemplate: RIA_I18N.grid.paging.template,

    _fillContent: function() {

        var source=this.grid.toolbarSrcNode;
        var dest = this.containerNode;
        if (source && dest) {
            while(source.hasChildNodes()) {
                dest.appendChild(source.firstChild);
            }
        }
    },

    postCreate: function() {

        this.grid.domNode.appendChild(this.domNode);
        // this.perPageNode.innerHTML = RIA_I18N.grid.toolbar.perPage;
        // this.rowsNode.innerHTML=RIA_I18N.grid.toolbar.items;
        dojo.attr(this.firstImageNode,'title',RIA_I18N.grid.paging.firstPage);
        dojo.attr(this.prevImageNode,'title',RIA_I18N.grid.paging.prevPage);
        dojo.attr(this.nextImageNode,'title',RIA_I18N.grid.paging.nextPage);
        dojo.attr(this.lastImageNode,'title',RIA_I18N.grid.paging.lastPage);

        dojo.attr(this.individualNode,'title',RIA_I18N.grid.toolbar.individual);
        // dojo.attr(this.printNode,'title',RIA_I18N.grid.toolbar.print);

        this._configPaging();

      
        //导入设置
        if (this['import'] && this['import'].enable) {
            this.domNode.childNodes[2].style.display = 'block';
            this.importNode.style.display = 'block';
            this._configImport();
//            var uniqueCell = this['import'].uniqueCell;
//            this.connect(this.importNode,"onclick",this.doImportOnClick);
        }
        if (this['enableExport'] ) {  //enableExport等后台传属性 工具设置属性 默认true
            dojo.addClass(this.girdLiebiao,"isBlock");
            //导出exl部分
            this.domNode.childNodes[2].style.display = 'block';
            this.exportNode.style.display = 'block';
            dojo.attr(this.exportNode,'title','全部导出');
            this._configExport();
            setTimeout(dojo.hitch(this,function(){
                var tooltipMessage = this.grid.managers.getManager("ExportManager").tooltipMessage;
                if(tooltipMessage!=null&&tooltipMessage!=''){
                    this.connect(this.domNode.childNodes[2],"onmouseover",this._onExportMouseOver);
                    this.connect(this.domNode.childNodes[2],"onmouseout",this._onExportMouseOut);
                }
            }),0);
            //导出PDF部分
            dojo.addClass(this.domNode.childNodes[2],"isBlock");
            this.domNode.childNodes[2].style.display = 'block';
            this._configPrint();
            // this.printNode.style.display = 'block';
        }
        if (this._userPageSize ) { //如果有print 就显示print
            dojo.addClass(this.domNode.childNodes[2],"isBlock");
            this.domNode.childNodes[2].style.display = 'block';
            this._configPrint();
        }
      
        if (this['individual']) {
            dojo.addClass(this.girdLiebiao,"isBlock");
            this.individualNode.style.display = 'block';
            this._configIndividual();
        }
        if(this['individual'] &&  this['enableExport']){ //如果有导出并且有个性化 增加class
			$(this.domNode.childNodes[1]).addClass('hasIndividual');
        }

        this.update();
    },

    /**
     * @summary:
     * 		更新toolbar的翻页信息
     * @description:
     * 		在数据发生变化时更新翻页相关的信息
     * @example：
     * |	grid.getToolBar().update();
     * 		更新toolbar上的信息
     */
    update: function() {

        this._displayPagingBar && this._updatePagingStatus();
        var combox=this._comboBox;
        //如果下拉框只有一条数据就清空下拉框的值，否则不清空
        //对应问题 U_EAP00021024
        combox && combox.getDataProvider().getItems().length ==1 && combox.setValue('');
        //majz 选择下拉框若有数据，设置下拉框可点状态
        var value = combox ? combox.getValue():null;
        if(value){
            dojo.removeClass(combox.fieldNode, "u-form-readOnly");
            dojo.removeClass(combox.inputNode, "u-form-textbox-input-readonly");
            combox.inputNode.readOnly = true;
            combox.setDisabled(false);
        }
    },


    //grid导出显示提示信息
    _onExportMouseOver: function(){
        unieap.showTooltip({inner:this.grid.managers.managers.ExportManager.tooltipMessage},this.exportNode);
    },
    //grid导出隐藏提示信息
    _onExportMouseOut: function(){
        unieap.showTooltip(this.exportNode);
    },

    //------------------------------------翻页-----------------------------------

    //	display可选值为"none"或者"block"
    _hideOrShowPagingBar: function(display) {

        var children=this.domNode.childNodes;
        dojo.style(children[0],'display',display);
        if (this._userPageSize) {
            dojo.style(children[1],'display',display);
        }
        dojo.style(children[4],'display',display);
    },


    //显示toolbar上的翻页条
    _showPagingBar: function() {

        if (!this._displayPagingBar) {
            this._displayPagingBar=true;
            this._hideOrShowPagingBar("block");
            //如果没有配置过翻页相关设置
            if (!this._haveConfigedPaging) {
                this._configPaging();
                this.update();
            }
            var ds = this.grid.getBinding().getDataStore(); //U_EAP00029537
            if(ds && ds.getRowSet().getRowCount()>0){
                this._comboBox && this._comboBox.setDisabled(false);
            }
        }
    },

    //隐藏toolbar上翻页条
    _hidePagingBar:function(){

        if (this._displayPagingBar) {
            this._displayPagingBar = false;
            this._hideOrShowPagingBar("none");
        }
    },

    //配置翻页相关
    _configPaging: function() {
        !this._displayPagingBar && (this._displayPagingBar = this.paging && this.paging['display']);
        //默认显示翻页条,如果用户不配置就为true

        if (this._displayPagingBar==null|this._displayPagingBar==undefined) {
            this._displayPagingBar=true;
        }

        var userPageSize=this.paging && this.paging['userPageSize'];
        if(userPageSize){
            userPageSize = JSON.parse(userPageSize);
        }
        //用户如果设置了userPageSize属性（无论是true还是false)，就用用户的设置，否则走系统统一的属性
        this._userPageSize=this.paging && (typeof(userPageSize) !="undefined" ? userPageSize : unieap.widget.grid.userPageSize);

        if (!this.grid.managers.params['PagingManager']) {
            this.grid.managers.params['PagingManager'] = this.paging || {};
        }
        if (!this._displayPagingBar) {

            this._hideOrShowPagingBar("none");
            return;
        }

        setTimeout(dojo.hitch(this, function() {
            this._configUserPageSize();
        }),0);
        //已经完成翻页的相关设置
        this._haveConfigedPaging=true;
        this.connect(this.firstImageNode, 'onclick', '_onFirstClick');
        this.connect(this.prevImageNode, 'onclick', '_onPrevClick');
        this.connect(this.nextImageNode, 'onclick', '_onNextClick');
        this.connect(this.lastImageNode, 'onclick', '_onLastClick');
        this.connect(this.pageNoNode, 'onkeyup', '_onPageNoClick');

        //以下非UI事件 需要使用dojo.connect
        this.connects = [];
        this.connects.push(dojo.connect(this.grid, 'onStoreChanged', this, 'update'));
        this.connects.push(dojo.connect(this.grid, 'onRowSetChanged', this, 'update'));
//        this.connects.push(dojo.connect(this.grid, 'onItemChanged', this, 'update'));

        this._buttonList = [this.firstImageNode, this.prevImageNode, this.nextImageNode, this.lastImageNode];

    },

    //更新翻页状态信息
    _updatePagingStatus: function(){
        var manager = this.grid.managers.get('PagingManager');
        var binding = this.grid.getBinding();
        if(manager && manager.asyncPageCount && manager.asyncPageCountFinish){
            var store = binding.store;
            binding.store.setRecordCount(manager.totalCount);
        }
        var info = manager.getPageInfo();
        var pageSize = info.pageSize;
        // if(!(binding._supportClientPaging() && binding.getDataStore().getName().indexOf(this._pagingStoreName)==-1)){
        //     info.totalCount += info.totalPageCount-info.initialPageCount;
        // }
        var	totalPage = pageSize==0?0:pageSize>0?Math.ceil(info.totalCount / pageSize):0;

        //更新buttons状态
        dojo.forEach(this._buttonList, function(node, index){
            var array = ['first', 'prev', 'next', 'last'];
            dojo.addClass(node, 'u-grid-page-' + array[index]);
            dojo.removeClass(node, 'u-grid-page-' + array[index] + '-disabled');
        }, this)
        if (info.pageNumber == 1) {
            if(!dojo.hasClass(this._buttonList[0],'u-grid-page-first-disabled')){
                dojo.addClass(this._buttonList[0], 'u-grid-page-first-disabled');
                dojo.removeClass(this._buttonList[0], 'u-grid-page-first');
            }
            if(!dojo.hasClass(this._buttonList[1],'u-grid-page-prev-disabled')){
                dojo.addClass(this._buttonList[1], 'u-grid-page-prev-disabled');
                dojo.removeClass(this._buttonList[1], 'u-grid-page-prev');
            }
        }
        if (info.pageNumber >= totalPage) {
            if(!dojo.hasClass(this._buttonList[2],'u-grid-page-next-disabled')){
                dojo.addClass(this._buttonList[2], 'u-grid-page-next-disabled');
                dojo.removeClass(this._buttonList[2], 'u-grid-page-next');
            }
            if(!dojo.hasClass(this._buttonList[3],'u-grid-page-last-disabled')){
                dojo.addClass(this._buttonList[3], 'u-grid-page-last-disabled');
                dojo.removeClass(this._buttonList[3], 'u-grid-page-last');
            }
        }
        if (totalPage < info.pageNumber) {
            totalPage = info.pageNumber;
        }

        if(info.totalCount < 0){
            info.totalCount = 0;
        }
        //更新信息
        this.pageNoNode.value = info.pageNumber;
//        this.pageInfoNode.innerHTML = this._pageInfoTemplate.replace('{0}', info.pageCount).replace('{1}', info.totalCount);
        var totalCount = info.totalCount?info.totalCount:info.pageCount;

        //zhaohf 修改总页数的显示位置
        // if(unieap.isUserStyle == true){
        //     if(unieap.currentStyle=='network'){

                var me = this;
                var str =  '共{1}条记录';
                var ds = this.grid.getBinding().getDataStore();
                var pages = ds.pageSize;
                if(ds.pageSize>20000000){
                    pages =1;
                    totalCount = 0;
                }
                //增加表格下方的控件
//	     		$(".u-grid-page.left:first",this.domNode).hide();
//	     		$(".u-grid-page.left:eq(1)",this.domNode).hide();

                // 新增每页显示多少条数
                $(".u-grid-page.left",this.domNode).hide();
                $(".u-grid-page.right",this.domNode).hide();
                $(".u-grid-page.left:eq(1)",this.domNode).addClass('numShow').show();
                // 去掉文案
                $(".u-grid-page.left:eq(1)",this.domNode).find('.u-grid-cpagesize-left').html("");
                $(".u-grid-page.left:eq(1)",this.domNode).find('.u-grid-cpagesize-right').html("");

                //在foot_toolbar上加上新的分页控件
                var pagebar = $(".u-grid-master-toolbar",this.domNode.parentNode);
                var operation = pagebar.find('.u-xgrid-title-row-operation');
                //pagebar.html("");
                pagebar.find('.page').remove();
                var ul = $('<ul class="page" ></ul>');
                operation.before(ul);
                me.pageUl = unieap.createPage1({
                    ul:ul,
                    pagelistcount:pages,
                    func:function(pagenum){
                        var manager = me.grid.managers.managers.PagingManager;
                        manager.setPageNumber(pagenum);
                    }
                });
                var node=$(".pagetotal",'#'+this.grid.id);
                if(manager && manager.asyncPageCount && !manager.asyncPageCountFinish){
                    node.html(str.replace('{1}', 0));
                }else{
                    node.html(str.replace('{1}', totalCount));
                }

                //设置显示的页数

                me.pageUl.setPageInfo(totalCount,ds.pageNumber,pages);

            // }else{
            //     //原系统代码
            //     if(manager && manager.asyncPageCount && !manager.asyncPageCountFinish){
            //         this.pageInfoNode.innerHTML = this._pageInfoTemplate.replace('{0}', "<span class=\"toolbarNum\">&nbsp;" +info.pageCount+ "&nbsp;</span>").replace('{1}', "<div class='grid-pagecount-wait-img'></div>");
            //         this.totalPageNoNode.innerHTML = "/" + "<div class='grid-pagecount-wait-img'></div>" + RIA_I18N.grid.paging.page;
            //     }
            //     else{
            //         this.pageInfoNode.innerHTML = this._pageInfoTemplate.replace('{0}', "<span class=\"toolbarNum\">&nbsp;" +info.pageCount+ "&nbsp;</span>").replace('{1}', "<span class=\"toolbarNum\">&nbsp;" +info.totalCount+ "&nbsp;</span>");
            //         this.totalPageNoNode.innerHTML = "/" + totalPage + RIA_I18N.grid.paging.page;
            //     }
            // }
        // }else{
        //     //原系统代码
        //     if(manager && manager.asyncPageCount && !manager.asyncPageCountFinish){
        //         this.pageInfoNode.innerHTML = this._pageInfoTemplate.replace('{0}', "<span class=\"toolbarNum\">&nbsp;" +info.pageCount+ "&nbsp;</span>").replace('{1}', "<div class='grid-pagecount-wait-img'></div>");
        //         this.totalPageNoNode.innerHTML = "/" + "<div class='grid-pagecount-wait-img'></div>" + RIA_I18N.grid.paging.page;
        //     }
        //     else{
        //         this.pageInfoNode.innerHTML = this._pageInfoTemplate.replace('{0}', "<span class=\"toolbarNum\">&nbsp;" +info.pageCount+ "&nbsp;</span>").replace('{1}', "<span class=\"toolbarNum\">&nbsp;" +info.totalCount+ "&nbsp;</span>");
        //         this.totalPageNoNode.innerHTML = "/" + totalPage + RIA_I18N.grid.paging.page;
        //     }
        // }


        //RIA_I18N.grid.paging.pagePrefix的值，中文为"第"，英文为"Page"
        this.pageNoStart.innerHTML = RIA_I18N.grid.paging.pagePrefix;
        //RIA_I18N.grid.paging.page的值，中文为"页"，英文为""
//        this.totalPageNoNode.innerHTML = "/" + totalPage + RIA_I18N.grid.paging.page;
    },

    //第一页
    _onFirstClick: function(){
        var manager = this.grid.managers.get('PagingManager');
        if (manager.getPageNumber() > 1) {
            manager.firstPage();
        }
    },
    //上一页
    _onPrevClick: function(){
        var manager = this.grid.managers.get('PagingManager');
        if (manager.getPageNumber() > 1) {
            manager.prevPage();
        }
    },
    //下一页
    _onNextClick: function(){
        var manager = this.grid.managers.get('PagingManager');
        if (manager.getPageNumber() < manager.getTotalPage()) {
            manager.nextPage();
        }
    },
    //最后一页
    _onLastClick: function(){
        var manager = this.grid.managers.get('PagingManager');
        if (manager.getPageNumber() < manager.getTotalPage()) {
            manager.lastPage();
        }
    },
    _onPageNoClick: function(e){
        var manager = this.grid.managers.get('PagingManager');
        if (e.keyCode == dojo.keys.ENTER) {
            var n = this.pageNoNode.value;
            n = n.replace(/[^0-9-]/g, '');
            n = Number(n);
            if (n > manager.getTotalPage()) {
                n = manager.getTotalPage();
            } else {
                n = Math.max(n, 1);
            }
            if (n > 0 && n <= manager.getTotalPage() && n != manager.getPageNumber()) {
                manager.setPageNumber(n);
            }
        }
    },


    //-------------------------自定义每页显示的数据条数--------------------------------

    _configUserPageSize:function(){
        //只有当翻页条显示时才显示
        if(this._userPageSize&&this._displayPagingBar){
            dojo.style(this.domNode.childNodes[1],'display','block');
            this._userPageSize=dojo.isArray(this._userPageSize)?this._userPageSize:unieap.defaultPageSize;//取消默认显示全部 全部值为-1
            var defaultValue,
                size=this.grid.managers.get('PagingManager').getPageInfo().pageSize;
            if(dojo.indexOf(this._userPageSize,size)>-1){
                defaultValue=size;
            }

            this._createComboBox(this._userPageSize,defaultValue);
//			if(unieap.isUserStyle == true){
//				if(unieap.currentStyle != 'network'){
//					this._createComboBox(this._userPageSize,defaultValue);
//				}
//			}else{
//				this._createComboBox(this._userPageSize,defaultValue);
//			}
        }
    },


    //构建下拉框
    _createComboBox: function(options,defaultValue) {
        if(!dojo.isArray(options)) return;
        dojo.require("unieap.form.ComboBox");
        this._comboBox&&this._comboBox.destroy();
        dojo.empty(this.customPageSizeNode);
        var html=[],_temp,_grid=this.grid,_gridId=_grid.id,_rootID=(_grid._rootID||""),_id = "customPageSizeComboBox";
        if(_rootID.length > 0){
            _gridId = _gridId.substring(_gridId.indexOf(_rootID) + _rootID.length);
        }
        _id = _gridId + "_" + _id;
        if(options.length > 0){
            var maxValue = options[0];
            for(var i=1,len=options.length;i<len;i++){
                if(maxValue < options[i])
                    maxValue = options[i];
            }
            var widthValue = (String(maxValue).length * 10 + 33) + "px";
        }else{
            var widthValue = '55px';
        }
        html.push("<select width='"+widthValue+"' id='" + _id + "' dojoType='unieap.form.ComboBox' popup='{displayStyle:\"list\"}' comboShowSelect='false' dataProvider='{staticData:true}'>");
        if(dojo.isArray(options)){
            var itemName = 'toolbar'
            html.push("<option value="+itemName+">"+itemName+"</option>");
        }

        dojo.isArray(options)&&dojo.forEach(options,function(item){
            item==-1?(_temp="全部"):(_temp=item+'条/页');
            html.push("<option value="+item+">"+_temp+"</option>");
        });
        html.push("</select>");

        this.customPageSizeNode.innerHTML=html.join('');
        dojo.parser.parse(this.customPageSizeNode);
        this._comboBox=dijit.byNode(this.customPageSizeNode.childNodes[0]);
		defaultValue&&this._comboBox.setValue(defaultValue);

        if(!defaultValue){
            dojo.addClass(this._comboBox.fieldNode, "u-form-readOnly");
            dojo.addClass(this._comboBox.inputNode, "u-form-textbox-input-readonly");
            this._comboBox.inputNode.readOnly = true;
            //2014-10-31 控制下拉分页的状态
            this._comboBox&&this._comboBox.setDisabled(true);
        }
        this.connect(this._comboBox,"onChange",function() {
            var value = this._comboBox.getValue();
            if(!value){return;}
            this._setPageSize(value);
        });
    },

    getComboBox: function() {
        return this._comboBox;
    },

    //触发onChange事件
    //lht 修改切换显示条数不起效果
    _setPageSize: function(pageSize) {
        var pagingMgr = this.grid.getManager('PagingManager');
        pagingMgr.clearPageData();
        var bindingMgr = this.grid.getBinding();
        var store=bindingMgr.getDataStore();
        store.getRowSet().reset();
        store.setPageSize(Number(pageSize));
        pagingMgr.clientPaging && (bindingMgr.originStore.setPageSize(Number(pageSize)));
        this.grid.getManager('PagingManager').setPageNumber(1,null,store);
        //majz toolbar中下拉框数据change时，设置下拉框点击状态
        if(pageSize){
            this._comboBox.inputNode.readOnly = true;
            this._comboBox.setDisabled(false);
        }
    },

    //导入
    _configImport: function() {
        this._createImportNode();
        if (!this.grid['ImportManager']) {
            var importParams = this['import'] || {};
            dojo.require("unieap.grid.manager.ImportManager");
            this.grid['ImportManager'] = new unieap.grid.manager.ImportManager(dojo.mixin(importParams,{grid:this.grid}));
            this.grid.managers.params['ImportManager'] = importParams;
        }
    },
    _createImportNode:function(){
        dojo.require('unieap.form.Button');
        var importButton = new unieap.form.Button({
            id: this.grid.id + "_unieapGridImportButton",
            iconClass:'u-grid-import-button'
        }).placeAt(this.importNode);
        dojo.style(importButton.btnNode, "padding", "0px");
        this.connect(importButton,"onClick",this.doImportOnClick);
    },

    //------------------------------------导出-----------------------------------

    //配置导出相关信息
    _configExport: function() {
        this._createExportNode();
        if (!this.grid.managers.params['ExportManager']) {
            this.grid.managers.params['ExportManager'] = this['export'] || {};
        }
    },
    _createExportNode: function(){
        dojo.require('unieap.menu.Menu');
        dojo.require('unieap.form.DropDownButton');
        var exportNode = this.exportNode, menu, ddbutton,
            options=this['export']['options']||['server','client','checked'],
            type=this['export']['defaultType']||'server';
        menu = new unieap.menu.Menu();
        options&&dojo.isArray(options)&&dojo.forEach(options,function(option){
            if(option=='server'){
                menu.addChild(new unieap.menu.MenuItem({
                    //服务端导出
                    label: RIA_I18N.grid['export'].serverExport,
                    iconClass: "export-s",
                    onClick: dojo.hitch(this, this.doServerExport)
                }));
            }else if(option=='client'){
                menu.addChild(new unieap.menu.MenuItem({
                    //客户端导出
                    label: RIA_I18N.grid['export'].clientExport,
                    iconClass: "export-c",
                    onClick: dojo.hitch(this, this.doClientExport)
                }));
            }else if(option=='checked'){
                menu.addChild(new unieap.menu.MenuItem({
                    //导出选中记录
                    label:RIA_I18N.grid['export'].selectedExport,
                    iconClass:'export-checked',
                    onClick:dojo.hitch(this,this.exportSelectedData)
                }));
            }
        },this);

        ddbutton = new unieap.form.DropDownButton({
            id: this.grid.id + "_unieapGridExportButton",
            dropDown: menu,
            width:'100px'
            
        }).placeAt(exportNode);
        ddbutton.setIconClass('default-export-c iconfont icon-daochu');
        this.connect(ddbutton,'onClick','doClientExport');
//        if (type == 'client') {
//            ddbutton.setIconClass('default-export-c');
//            this.connect(ddbutton,'onClick','doClientExport');
//        } else if(type=='checked') {
//            ddbutton.setIconClass('default-export-checked');
//            this.connect(ddbutton,'onClick','exportSelectedData');
//        } else if(type=='server') {
//            ddbutton.setIconClass('default-export-s');
//            this.connect(ddbutton,'onClick','doServerExport');
//        }
        if(!this._destroyWidgets) {
            this._destroyWidgets=[];
        }
        this._destroyWidgets.push(menu);
        this._destroyWidgets.push(ddbutton);
        $(exportNode).find('.u-form-btn-txt').html('导出&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;');
    },


    doServerExport: function() {
        this.grid.managers.get('ExportManager').doServerExport();
    },


    doClientExport: function() {
        this.grid.managers.get('ExportManager').doClientExport();
    },


    exportSelectedData: function() {
        this.grid.managers.get('ExportManager').exportSelectedData();
    },

    doImportOnClick:function(){
        this.grid.managers.get('ImportManager')._openImportXDialog();
    },

    //------------------------------------打印-----------------------------------
    _configPrint: function() {

        // if (!this.grid.managers.params['PrintManager']) {
        //     this.grid.managers.params['PrintManager'] = this['print'] || {};
        // }
        // this.connect(this.printNode,'onclick','doPrint');
    },


    doPrint:function(){
        // this.grid.managers.get('PrintManager').doPrint();
    	//打印 改导出pdf格式  改走导出的格式
        this.grid.managers.get('ExportManager').doClientExport(null,'pdf');
    },


    //------------------------------------个性化-----------------------------------
    _configIndividual: function(){
        if (!this.grid.managers.params['Individual']) {
            this.grid.managers.params['Individual'] = this.individual;
        }
        this.individual && this._updateIndividual();

    },
    _updateIndividual: function(){
        var manager = this.grid.managers.get("Individual");
        if (!manager) {
            return;
        }
        dojo.require('unieap.menu.Menu');
        dojo.require('unieap.form.DropDownButton');
        var individualNode = this.individualNode, menu, button;
        manager.setSource(individualNode);
        menu = new unieap.menu.Menu();
        //设置
        menu.addChild(new unieap.menu.MenuItem({
            label: RIA_I18N.grid.individual.settings,
            iconClass: "individual",
            onClick: dojo.hitch(manager, "showDialog")
        }));
        //重置
        menu.addChild(new unieap.menu.MenuItem({
            label: RIA_I18N.grid.individual.reset,
            iconClass: "individual-reset iconfont icon-zhongzhi",
            onClick: dojo.hitch(manager, "resetIndividual")
        }));
        //个性化
        button = new unieap.form.DropDownButton({
            title: RIA_I18N.grid.toolbar.individual,
            dropDown: menu,
            width:'100px',
            iconClass:'default-individual',
            onClick: dojo.hitch(manager, "showDialog")
        }).placeAt(individualNode);
        if (!this._destroyWidgets) {
            this._destroyWidgets = [];
        }
        this._destroyWidgets.push(menu);
        this._destroyWidgets.push(button);
        $(individualNode).find('.default-individual').html('个性化');
    },

    destroy:function(){
        if (this.connects) {
            while (this.connects.length) {
                dojo.disconnect(this.connects.pop());
            }
        }
        this.destroyDescendants();
        this._comboBox&&this._comboBox.destroy();
        this.inherited(arguments);
        this._destroyWidgets && this._destroyWidgets.length>0
        && dojo.forEach(this._destroyWidgets, function(w){
            //w&&w.destroyDescendants&&w.destroyDescendants();
            w&&w.destroy&&w.destroy();
        });
    },

    getHeight: function() {
        var height = dojo.style(this.domNode,"height");
        return height;
    }
});

unieap.createPage1=function(config){
    var page = function(config){

        $.extend(this,{
            maxshowpageitem:7,//最多显示的页码个数
            pagelistcount:5,//每一页显示的内容条数
            initWithUl:initWithUl,
            setPageListCount:setPageListCount,
            initPageEvent:initPageEvent,
            getPageListModel:getPageListModel,
            setPageInfo:setPageInfo
        });
        $.extend(this,config);
        /**
         * 初始化分页界面
         * @param listCount 列表总量
         */
        function initWithUl(listCount,currentPage){
            this.ul.html('')
            var pageCount = 1;
            if(listCount>=0){
                var pageCount = listCount % this.pagelistcount>0?
                    parseInt(listCount/this.pagelistcount)+1 :
                    parseInt(listCount/this.pagelistcount);
            }
            var appendStr = this.getPageListModel(pageCount,currentPage);
            this.ul.html(appendStr);
        }
        /**
         * 设置列表总量和当前页码
         * @param listCount 列表总量
         * @param currentPage 当前页码
         */
        function setPageListCount(listCount,currentPage){
            var me = this;
            me.rowsNumber=listCount = parseInt(listCount);
            currentPage = parseInt(currentPage);
            me.initWithUl(listCount,currentPage);
            me.initPageEvent(listCount);
        }
        function initPageEvent(listCount){
            // if(unieap.isUserStyle == true){
                var me = this;
                $(".pageItem",this.ul).on("click",function(){
                    var currentPage = parseInt($(this).attr("page-data"));
                    // me.setPageListCount(listCount,currentPage); //因为界面是全刷新的，所以这行没用上
                    me.func(currentPage);
                });
                $(".direct .pageInput",this.ul).on("keyup",function(e){
                    var key = e.which; //e.which是按键的值
                    if (key == 13) {
                        if(me.rowsNumber != 0){
                            var currentPage = parseInt(this.value);
                            var rowcount =  parseInt(me.rowsNumber/me.pagelistcount);
                            if(currentPage>rowcount){
                                if(me.rowsNumber % me.pagelistcount>0){
                                    currentPage=rowcount+1;
                                }else{
                                    currentPage=rowcount;
                                }
                            }
                            if(currentPage<1){
                                currentPage=1;
                            }
                            me.func(currentPage);
                        }else{
                            return;
                        }
                    }
                });
            // }
        }
        function getPageListModel(pageCount,currentPage){
            var prePage = currentPage-1;
            var nextPage = currentPage+1;
            var prePageClass ="pageItem";
            var nextPageClass = "pageItem";
            if(prePage<=0){
                prePageClass="pageItemDisable";
            }
            if(nextPage>pageCount){
                nextPageClass="pageItemDisable";
            }
            var appendStr ="";
//	        appendStr+="<li class='"+prePageClass+" fistImgNode' page-data='1' page-rel='firstpage'></li>";
            appendStr+="<li class='"+prePageClass+" prevImgNode iconfont icon-left' page-data='"+prePage+"' page-rel='prepage'></li>";
            var miniPageNumber = 1;
            if(currentPage-parseInt(this.maxshowpageitem/2)>0&&currentPage+parseInt(this.maxshowpageitem/2)<=pageCount){
                miniPageNumber = currentPage-parseInt(this.maxshowpageitem/2);
            }else if(currentPage-parseInt(this.maxshowpageitem/2)>0&&currentPage+parseInt(this.maxshowpageitem/2)>pageCount){
                miniPageNumber = pageCount-this.maxshowpageitem+1;
                if(miniPageNumber<=0){
                    miniPageNumber=1;
                }
            }
            var showPageNum = parseInt(this.maxshowpageitem);
            if(pageCount<showPageNum){
                showPageNum = pageCount
            }
            for(var i=0;i<showPageNum;i++){
                var pageNumber = miniPageNumber++;
                //JiaX 每次翻页都显示第一页和最后一页
                // if(unieap.isUserStyle == true){
                    // if(unieap.currentStyle == 'network'){
                        if(i == 0){
                            pageNumber = 1;
                        }
                        if(i == showPageNum-1){
                            pageNumber = pageCount;
                        }
                    // }
                // }
                var itemPageClass = "pageItem";

                if(pageNumber==currentPage){
                    itemPageClass = "pageItemActive";
                }
                if(pageNumber==currentPage){
	                itemPageClass = "pageItemActive";
				}
				if((pageCount - currentPage > 5 ||  currentPage > 3)&& showPageNum - 2  == i ){
					appendStr+= pageCount - currentPage < 4 ? "<li class='"+itemPageClass+"' page-data='"+pageNumber+"' page-rel='itempage'>"+pageNumber+"</li>" :  "<li ><span class='paginationEllipsis'>...</span></li>";
				}else if(currentPage - 3 > 1 && i == showPageNum - 6){
					appendStr += "<li ><span class='paginationEllipsis'>...</span></li>";
				}else{
					appendStr+="<li class='"+itemPageClass+"' page-data='"+pageNumber+"' page-rel='itempage'>"+pageNumber+"</li>";
				}
            }
            appendStr+="<li class='"+nextPageClass+" nextImgNode iconfont icon-right' page-data='"+nextPage+"' page-rel='nextpage'></li>";
//	        appendStr+="<li class='"+nextPageClass+" lastImgNode' page-data='"+pageCount+"' page-rel='lastpage'></li>";
            appendStr+="<li class='direct'><span class='pagetxt'>跳至</span><input type='text' class='pageInput' onkeyup=\"value=value.replace(/[^\\d{1,}\\.\\d{1,}|\\d{1,}]/g,'')\" ><span class='pagetxt'>页</span></li>";

            return appendStr;
        }

        function setPageInfo(listCount,currentPage,perOfPage){
            if(listCount<0){
                listCount = 0;
            }
            if(currentPage<=0){
                currentPage=1;
            }
            if(this.pagelistcount != perOfPage){
                this.pagelistcount = perOfPage;
            }
            this.setPageListCount(listCount,currentPage);

        }
    }
    return new page(config);
}



dojo.provide('unieap.grid.manager.ViewManager');
dojo.require('unieap.grid.view.view');
dojo.require("unieap.grid.view.scroller");

dojo.declare("unieap.grid.manager.ViewManager", null, {
	/**
	 * @declaredClass:
	 * 		unieap.grid.manager.ViewManager
	 * @summary:
	 * 		Grid视图管理
	 * @description:
	 * 		Grid控件的视图管理模块，用来对Grid的表头样式，滚动条，单元格及行列样式等Grid的外观视图进行管理。
	 */
	 
	ui: {
		autoRender: true,
		rowBar: true,
		rowNumber: true,
		maxHeight:true,
		orderType: true,
		hasRowBar: true,
		setAutoRender: true,
		setHeaderName: true,
		getHeaderName:true,
		setRowStyles: true,
		setCellStyles: true,
		getCellStyles: true,
		getItemText: true,
		setItemText: true,
		refresh: true,
		refreshRow: true,
		scrollToRow: true,
		getCellNode: true,
		refreshCell: true,
		refreshPage:true,
		distinguishDblclick:true,
		
		events: {
			onBeforeRender: true,
			onAfterRender: true,
			
			onCellMouseOver: true,
			onCellMouseOut: true,
			onCellMousedown: true,
			onCellMouseup: true,
			onCellClick: true,
			onCellDblClick: true,
			
			onRowMouseOver: true,
			onRowMouseOut: true,
			onRowMousedown: true,
			onRowMouseup:true,
			onRowClick: true,
			onRowDblClick: true,
			
			onHeaderMouseOver: true,
			onHeaderMouseOut: true,
			onHeaderCellMouseOver: true,
			onHeaderCellMouseOut: true,
			onHeaderCellClick: true,
			onHeaderClick: true,
			onHeaderRender :true,
			onHeaderCellMousedown: true,
			onHeaderMousedown: true
		}
	},
    
    /**
     * @type:
     * 		{boolean}
     * @summary:
     * 		是否在初始化时渲染
     * @default:
     * 		true
     * @example:
     * |<div dojoType="unieap.grid.Grid" binding="{store:'empDataStore'}" views="{autoRender:true}">
     * |	...
     * |</div>
     */
    autoRender: true,
    
    /**
     * @type:
     * 		{boolean}
     * @summary:
     * 		是否显示rowBar
     * @default:
     * 		false
     * @example:
     * |<div dojoType="unieap.grid.Grid" binding="{store:'empDataStore'}" views="{rowBar:true}">
     * |	...
     * |</div>
     * @img:
     * 		images/grid/views/rowbar.png
     */
    rowBar: false,
    
    /**
     * @type:
     * 		{boolean}
     * @summary:
     * 		是否显示行号
     * @default:
     * 		false
     * @example:
     * |<div dojoType="unieap.grid.Grid" binding="{store:'empDataStore'}" views="{rowNumber:true}">
     * |	...
     * |</div>
     * @img:
     * 		images/grid/rownumber.png
     */
    rowNumber: false,
    
    /**
     * @type:
     * 		{boolean}
     * @summary:
     * 		是否显示修改标记
     * @default:
     * 		true
     * @example:
     * |<div dojoType="unieap.grid.Grid" views="{markDirty:false}">
     * |	...
     * |</div>
     * @img:
     * 		images/grid/markdirty.png
     */
    markDirty: true,
    
    /**
     * @type:
     * 		{string}
     * @summary:
     * 		设置点击Grid表头的排序方式
     * @description:
     * 		当排序方式设置为'client'时，为客户端排序，只对当前页排序
     * 		当排序方式设置为'server'时，为服务端排序，对所有数据排序
     * 		当排序方式设置为'none'时，不排序
     * @enum:
     * 		{'client'|'server'|'none'}
     * @default:
     * 		'client'
     * @example:
     * |<div dojoType="unieap.grid.Grid" binding="{store:'empDataStore'}" views="{orderType:'none'}">
     * |	...
     * |</div>
     * |上述代码表明点击Grid表头时不排序
     */
    orderType: 'client',
	
	/**
	 * @summary:
	 * 		设置当鼠标移动单元格上时，是否以tooltip的形式来显示单元格内容
	 * @description:
	 * 		只有当拖动表头使得单元的内容显示不全时tooltip才展现出来
	 * @type:
	 * 		{boolean}
	 * @default:
	 * 		false
	 * @example:
	 * |<div dojoType="unieap.grid.Grid" id="grid" views="{enableTooltip:true}">
	 * |	<header>
	 * |		<cell name="attr_empno" label="编号"></cell>
	 * |		<cell name="attr_ename" label="姓名"></cell>
	 * |	</header>
	 * |</div>
	 */
	enableTooltip:true,
	    
    /**
     * @type:
     * 		{boolean}
     * @summary:
     * 		是否严格区分grid的行单双击事件
     * @default:
     * 		global.js中的unieap.widget.grid.distinguishDblclick属性
     * @example:
     * |<div dojoType="unieap.grid.Grid" views="{distinguishDblclick:true}">
     * |	...
     * |</div>
     */
    distinguishDblclick: unieap.widget.grid.distinguishDblclick,
    
    views: [],
    
    // fastScroll: boolean
    //	flag modifies vertical scrolling behavior. Defaults to true but set to false for slower 
    //	scroll performance but more immediate scrolling feedback
    fastScroll: true,
    delayScroll: false,
    
    maxHeight:null,
    
    scrollRedrawThreshold: (dojo.isIE ? 100 : 50),
    
    constructor: function(param) {
        dojo.mixin(this, param);
        this.createScroller();
    },
    
    structureChanged: function() {
		this.destroyViews();
		this.heightRelation = [];
		this.prerenderList = [];
		this.postrenderList = [];
		this.preaddViewList = [];
		this.buildViews();
        this.render();
    },
    
    doContentEvent : function(e){
    	var node = e.target;
    	while(node && node!=this.grid.viewsNode){
    		if(dojo.hasClass(node,"u-grid-view-cell")){
    			var view = this.grid.managers.get("ViewManager").views[dojo.query(">.u-grid-view-cell",this.grid.viewsNode).indexOf(node)];
    			view&&view.doContentEvent(e);
    			return;
    		}
    		node = node.parentNode;
    	}
    },
    
    doHeaderEvent : function(e){
    	var node = e.target;
    	while(node && node!=this.grid.headerNode){
    		if(dojo.hasClass(node,"u-grid-header")){
    			var view = this.grid.managers.get("ViewManager").views[dojo.query(">.u-grid-header",this.grid.headerNode).indexOf(node)];
    			view.doHeaderEvent(e);
    			return;
    		}
    		node = node.parentNode;
    	}
    },
    
    createScroller: function() {
        var rows = this.grid.managers.get("RowManager");
        this.scroller = new unieap.grid.view.scroller.columns();
        this.scroller.renderRow = dojo.hitch(rows, "renderRow");
        this.scroller.removeRow = dojo.hitch(rows, "rowRemoved");
    },
    
    destroyViews: function() {
  		this.scroller.invalidateNodes();
  		for (var i = 0, v; v = this.views[i]; i++) 
            v.destroy();
        this.views = [];
    },
    
    getContentNodes: function() {
        var nodes = [];
        for (var i = 0, v; v = this.views[i]; i++) {
            nodes.push(v.contentNode);
        }
        return nodes;
    },
    
    createView: function(inClass) {
        var c = eval(inClass);
        var view = new c({
            grid: this.grid
        });
        if (this.preaddViewList.length > 0) {
        	for (var i=0, p; p=this.preaddViewList[i]; i++) {
    			p.apply(this, [view]);
    		}
        }
        this.addView(view);
        unieap.grid.addObserver(view, this);
        return view;
    },
    
    addView: function(inView) {
        inView.idx = this.views.length;
        this.views.push(inView);
        this.grid.viewsNode.appendChild(inView.domNode);
        this.grid.headerNode.appendChild(inView.getHeaderNode());
    },
    
    buildViews: function() {
        var nodes = [], layout = this.grid.managers.get("LayoutManager");
        for (var i = 0, vs; (vs = layout.structure[i]); i++) {
            var v = this.createView(vs.type || "unieap.grid.View");
            v.isRowBar && (v.rowNumber = this.rowNumber);
            v.setStructure(vs);
            nodes.push(v.contentNode);
        }
        this.scroller.setContentNodes(nodes);
    },
    
    onEach: function(inMethod, inArgs) {
        inArgs = inArgs || [];
        for (var i = 0, v; v = this.views[i]; i++) {
            if (inMethod in v) {
                v[inMethod].apply(v, inArgs);
            }
        }
    },
    
    forEach: function(inCallback) {
        for (var i = 0, v; v = this.views[i]; i++) {
            inCallback(v, i);
        }
    },
    
    resize: function() {
        this.resizeHeight();
        this.finishScrollJob();
    },

    
	resizeHeight: function(gridHeight) {
		var rows = this.grid.managers.get("RowManager"), grid = this.grid;
		var rowCount = 1, headerRowCount = 1;
		this.forEach(dojo.hitch(function(inView, i) {
			if (inView.isRowBar) 
				return;
			rowCount = Math.max(inView.contentStructure.rows.length, rowCount);
			headerRowCount = Math.max(inView.structure.rows.length, headerRowCount);
		}));
		var heightType = function(inCell){ //判断是否是多表头,如果是多表头
			var heightRows = inCell;
			for(var i =0;i<heightRows.length;i++){
				for(var k=0;k<heightRows[i].length;k++){
                    if((heightRows[i][k].colSpan && heightRows[i][k].colSpan>1 )|| heightRows[i][k].subrow!==0 || (heightRows[i][k].rowSpan&&heightRows[i][k].rowSpan>1 ) ){
                        return true
                    }else{
                        return false
                    }
				}
			}
		}
		var defaultHeight;
        try {
            defaultHeight = heightType(this.views[1].contentStructure.rows) ? rows.defaultMulTitleHeight : rows.defaultHeaderHeight;
        }
        catch(err) {
            defaultHeight =  rows.defaultHeaderHeight;
        }


		var headerHeight = defaultHeight * headerRowCount, contentHeight = rows.defaultRowHeight * rowCount, h = typeof(gridHeight) == "number" ? gridHeight : (grid.domNode.clientHeight - 3);
        if(this.grid.class.indexOf("acct_slry_grid")>-1){
            contentHeight = contentHeight + rowCount*10 + 20;
        }
        if(this.maxHeight&&this.grid.height=="auto"){
			if(this.grid.getRowManager().getRowCount()>25)
			h = this.maxHeight;
		}
		var footHeight = 0;
		if (this.grid.footNode) {
			footHeight = this.grid.getFoot().getHeight();
		}
		var toolHeight = 0;
		if (this.grid.toolBar) {
			/* U_EAP00021367 Grid Toolbar丢失底边线*/
			toolHeight = this.grid.getToolBar().getHeight() + 1;
		}
		var windowHeight = this._reviseWindowHeight(h - (headerHeight + footHeight + toolHeight));
		this.forEach(function(inView, i) {
			inView.prerender(contentHeight, headerHeight);
//			var height = h - (headerHeight + footHeight + toolHeight);
			var height = windowHeight
			if (height < 18) 
				height = 18;
				//暂时修改grid合计方式
			var rowOperationHeight = $(inView.grid.domNode).find('.u-xgrid-title-row-operation').height() || 0;
			var sumRowHeight = $(inView.grid.domNode).find('.sum-row').height() || 0;
			var totalHeight = $(inView.grid.domNode).find('.u-grid-master-totals').height() || 0;
			var hasGridTotal = $(inView.grid.domNode).hasClass('grid-has-total');
			if(hasGridTotal){

				// height=height-rowOperationHeight - sumRowHeight - totalHeight-10; //防止计算错误
				height=height - sumRowHeight - totalHeight-10;
				$('#'+inView.grid.id).find('.grid-toolbar-sum').show();
			}else{
				// height=height-rowOperationHeight - sumRowHeight-10;

				height = height  - sumRowHeight;
				$('#'+inView.grid.id).find('.grid-toolbar-sum').hide();
			}
			if(isNaN(height)){
				dojo.style(inView.domNode, "height", "auto");
			}else{
				dojo.style(inView.domNode, "height", height + "px");
			}
			if ( inView.contentboxNode) {
				//在safari和chrome浏览器中,在出现滚动条的情况下,定义td的高度无效	
				dojo.style(inView.contentboxNode, "height", height + "px");
			}
//			if (inView.noscroll) {
//				dojo.style(inView.scrollboxNode, "height", (height - 17) + "px");
//			}
		});
		
		// 当grid出现横向滚动条时，高度需要修正，否则scrollToRow方法不正确
		var off = 0;
		this.forEach(dojo.hitch(function(inView, i) {
			var box = inView.scrollboxNode;
			if (box.clientHeight<box.offsetHeight) {
				off = (box.offsetHeight-box.clientHeight);
			}
		}));
		this.scroller.windowHeight = windowHeight-off > 0 ? windowHeight-off : 1;
		
		//调整滚动条
		this.adjustScrollBar();
		return contentHeight;
    },
    
    _reviseWindowHeight: function(h) {
    	var height = h;
    	if (this.heightRelation.length>0) {
	    	for (var i=0,r; r=this.heightRelation[i]; i++) {
	    		height = r.reviseWindowHeight(height);
	    	}
    	}
    	return height;
    },
    
    prerender: function() {
    	unieap.fireEvent4Widget(this,this.grid,this.onBeforeRender,[]);
    	if (this.prerenderList.length>0) {
    		for (var i=0, p; p=this.prerenderList[i]; i++) {
    			p.apply(this);
    		}
    	}
    },
    
    _prerender: function() {
    	this.prerender();
        var rows = this.grid.managers.get("RowManager"), h = String(this.grid.height);
        h = (h.indexOf("%") < 0 ? parseInt(h, 10) : (this.grid.domNode.clientHeight || 200)) - 3; //上下边框占位3象素
        this.scroller.init(0, rows.keepRows, rows.rowsPerPage, this.resizeHeight(h));
    },
    
    _postrender: function() {
    	//a ie6 bug patch
        if (dojo.isIE == 6) {
            for (var i = 0, v = this.views, l = v.length; i < l; i++) {
                if (v[i].noscroll) {
                    dojo.style(v[i].scrollboxNode, "position", "relative");
                }
            }
        }
        this.postrender();
    },
    
    postrender: function() {
    	unieap.fireEvent4Widget(this,this.grid,this.onAfterRender,[]);
    	if (this.postrenderList.length>0) {
    		for (var i=0, p; p=this.postrenderList[i]; i++) {
    			p.apply(this);
    		}
    	}
    },
    
    render: function(scrollTop) {
		//如果控件还没有渲染完毕，不执行
//		if(this.waitRender) return;
        if (!this.grid.domNode) {
            return;
        }
        //初始化scroller，渲染表格体
        this._prerender();
        if (!this.autoRender) {
        	return;
        }
        //渲染表格内容
        this.scroller.init(this.grid.managers.get("RowManager").getRowCount());
        var layout = this.grid.managers.get("LayoutManager"),
        	storeList = [];
        for (var i=0, c; c=layout.cells[i]; i++) {
        	if (c.decoder&&c.decoder.store) {
				//首先从dataCenter中取数据,取不到再从缓存中读取
        		unieap.getDataStore(c.decoder.store,this.grid.dataCenter,true) || (
        			storeList.push(c.decoder.store)
        		);
        	}
        }
        if (storeList.length==0) {
        	this.setScrollTop(scrollTop||0);
        } else {
//			this.waitRender=true;
        	unieap.Action.getMultiCodeList(storeList,
        		dojo.hitch(this,function() {
//					this.waitRender=false;
        			this.setScrollTop(scrollTop||0);
        		}));
        }
        //渲染锁定行
        this.renderLockedRow();
        this._postrender();
    },
    _mouseOnView: function(e, view) {
    
    },
    _clickOnView: function(e, view) {
    
    },
    doscroll: function(increase) {
        var top = this.scrollTop + increase;
        this.setScrollTop(top);
    },
	
    scrollTo: function(inTop) {
        if (!this.fastScroll) {
            this.setScrollTop(inTop);
            return;
        }
        var delta = Math.abs(this.lastScrollTop - inTop);
        this.lastScrollTop = inTop;
        this.scrollTop = inTop;
        if (delta > this.scrollRedrawThreshold || this.delayScroll) {
            this.delayScroll = true;
            unieap.grid.jobs.job('unieap-scroll', 50, dojo.hitch(this, "finishScrollJob"));
        }
        else {
            this.finishScrollJob();
        }
    },
	
	
    finishScrollJob: function() {
        this.delayScroll = false;
        setTimeout(dojo.hitch(this,function(){
			 var scrollTop = this.grid.scrollTop || this.scrollTop;
        	this.setScrollTop(scrollTop);
			this.grid.scrollTop ='';
        }),0);
    },
	
	
    setScrollTop: function(inTop) {
        var outTop = this.scroller.scroll(inTop);
    	this.scrollTop = outTop;
        for (var i = 0, v; v = this.views[i]; i++) {
            v.setScrollTop(outTop);
        }
    },
	

    getCurrentRows: function() {
        if (this.views[0]) {
            return this.views[0].getCurrentRows();
        }
        else {
            return [];
        }
    },
	
	//根据cell对象来获得该cell所在的view
    getViewByCell: function(inCell) {
        for (var i = 0, v; v = this.views[i]; i++) {
            if (v.hasCell(inCell)) 
                return v;
        }
        return null;
    },
    
    //渲染锁定行
    renderLockedRow: function(destroy) {
		if(destroy){
			var _h=[];
	        this.forEach(function(view) {
				if(view.lockedNode){
					_h.push(dojo.query('.u-grid-row',view.lockedNode).length);
				}
	            view.destroyLockedRow();
	        });
			if(_h.length>0){
				_h=Math.max.apply(this,_h)*this.scroller.defaultRowHeight;
			}else{
				_h=0;
			}
			this.scroller.updateContentHeight(-_h);
		}
		var data = this.grid.getBinding().getLockedRowData();
        if (!data || data.length == 0) {
            return;
        }
        this.forEach(function(view) {
            view.renderLockedRow(data);
        })
        this.scroller.updateContentHeight(this.getLockedRowHeight(data));
    },
    getLockedRowHeight: function(lockRowData) {
        var data = lockRowData || this.getLockedData();
        return data.length * this.scroller.defaultRowHeight;
    },
    //events
    _doHeaderClick: function(e) {
    	if (e.cell) {
    		if (this.canSort(e.cell)) {
                //				this.grid.setSortInfo(e.cell);
                this.grid.getBinding().sort(e.cell, -e.cell.asc);
            }
            unieap.fireEvent4Widget(this,this.grid,this.onHeaderCellClick,[e.cell]);
    	}
    	unieap.fireEvent4Widget(this,this.grid,this.onHeaderClick,[e]);
    },
    _doHeaderMousedown: function(e) {
    	if (e.cell) {
    		unieap.fireEvent4Widget(this,this.grid,this.onHeaderCellMousedown,[e.cell]);
    	}
    	unieap.fireEvent4Widget(this,this.grid,this.onHeaderMousedown,[e]);
    },
    
    //是否能排序
    canSort: function(inCell) {
        return this.orderType != "none" && inCell.canSort != false && inCell.isMulTitle != true && !this.grid.getManager("XTreeManager") && this.autoRender;
    },
    onMouseOverRow: function(e) {
        var rows = this.grid.managers.get("RowManager");
        if (!rows.isOver(e.rowIndex)) {
            rows.setOverRow(e.rowIndex);
             unieap.fireEvent4Widget(this,this.grid,(e.rowIndex == -1 ?this.onHeaderMouseOver:this.onRowMouseOver),[e]);
        }
    },
    onMouseOutRow: function(e) {
        var rows = this.grid.managers.get("RowManager");
        if (rows.isOver(-1)) {
        	unieap.fireEvent4Widget(this,this.grid,this.onHeaderMouseOut,[e]);
        } else if (!rows.isOver(-2)) {
			unieap.fireEvent4Widget(this,this.grid,this.onRowMouseOut,[e]);
        }
        this.enableTooltip&&this._disableTooltip(e);
    },
    onMouseOver: function(e) {
    	if (e.rowIndex==null || !e.cell) return;
    	if (e.rowIndex >= 0) {
			this.enableTooltip&&this._enableTooltip(e);
			unieap.fireEvent4Widget(this,this.grid,this.onCellMouseOver,[e.cell, e.rowIndex]);
    	}
    },
    onMouseOut: function(e) {
    	if (e.rowIndex==null || !e.cell) return;
    	if (e.rowIndex >= 0) {
			this.enableTooltip&&this._disableTooltip(e);
			unieap.fireEvent4Widget(this,this.grid,this.onCellMouseOut,[e.cell, e.rowIndex]);
    	}
		var rows = this.grid.managers.get("RowManager");
    	rows.setOverRow(-1);
    },
	
	_enableTooltip:function(e){
		this._toolTipTimer=setTimeout(dojo.hitch(this,function(){
			var editManager=this.grid.managers.managers["EditManager"];
			//有单元格在编辑时不显示tooltip
			if(editManager){
				var focusCell=editManager.getFocusCell(),
					isEditing=(editManager.getType()!=editManager.types.readonly && editManager.isEditing()),
					currentRowIndex=editManager.currentRowIndex,
					type=editManager.getType(),
					editor=e.cell.getEditor();
				//是否有单元格处于编辑状态
				if(isEditing){
					if(type=='rowEdit'){
						if(editor&&e.rowIndex==currentRowIndex) return;
					}else if(type=='cellEdit'){
						if(focusCell==e.cell&&e.rowIndex==currentRowIndex) return;
					}
				}
			};
			if(!this._globalSpan&&!dojo.byId('_globalSpan_')){
				this._globalSpan=dojo.create("span",{style: {
					visibility: 'hidden',
					position: 'absolute'
				},id:'_globalSpan_'},dojo.body(),"first");
			}
			this._globalSpan = dojo.byId('_globalSpan_');
			if(dojo.isIE == 6){
			 	dojo.style(this._globalSpan,'display','');
			};
			var cellNode,
				fontSize="12px",
				paddingRight=0;
			try{
				cellNode=e.cellNode;
				fontSize=dojo.style(cellNode,'fontSize');
			}catch(ex){
			}
			this._globalSpan.style.fontSize=fontSize;
			//在配置了filter的情况下不判断会报错
			if(!cellNode||!cellNode.childNodes[0]) return;
			var innerHTML,
				tooltipHTML = innerHTML = dojo.clone(cellNode.childNodes[0].childNodes[0].innerHTML);
			innerHTML = "<DIV class=\"u-grid-text\">" +innerHTML+ "</DIV>";
			if(innerHTML.indexOf("u-grid-treegrid-celltable")>-1){	//U_EAP00028687
				innerHTML = innerHTML.replace('u-grid-treegrid-celltable','empty');
			}	
			this._globalSpan.innerHTML = innerHTML;
		//	paddingRight=parseInt(dojo.getComputedStyle(cellNode.childNodes[0]).paddingRight);//火狐下tooltip报脚本错误问题 见U_EAP00008619
			var showToolTip = (dojo.contentBox(this._globalSpan).w > dojo.contentBox(cellNode).w-15) && (dojo.contentBox(cellNode).w > 0) ; //U_EAP00028687
			//解决IE6下显示tooltip出现滚动条的问题 见U_EAP00008377
			dojo.isIE==6&&dojo.style(this._globalSpan,"display","none");

			if(showToolTip){ //U_EAP00029087
				//整个window的宽度
                var windowWidth;
                try {
                    windowWidth = dojo.style(unieap.getTopWin().dojo.body(),'width');
                }
                catch(err) {
                    windowWidth = $(document.body).width();
                }
				//全文的tooltip长度
				var tooltipWidth = dojo.style(this._globalSpan,'width');
				var aroundNodePos = dojo.coords(cellNode, true);
				//cell的宽度
				var cellNodeWidth = aroundNodePos.w;
				var cellX = aroundNodePos.x;
				var rightPlaceWidth = windowWidth-cellX-cellNodeWidth;
				
				var isSetTooltipWidth = false;
				
				if(cellX > rightPlaceWidth){//tooltip出现在左侧
					if( (cellX < tooltipWidth) || (tooltipWidth > 600)){//tooltip如果太宽，需要制定大小 而且全屏也不美观
						tooltipWidth = Math.floor(Math.min((cellX-100),600));
						isSetTooltipWidth = true;
					}
				}else {
					if(tooltipWidth>600){//tooltip在右侧但太宽
						tooltipWidth = Math.floor(Math.min((rightPlaceWidth-100),600));
						isSetTooltipWidth = true;
					}
				}

				tooltipWidth = 400;
				// @yll 解决tooltip多余标签bug &合同下不过滤tooltip图片
				if((this.grid.class!='pact_grid') && (tooltipHTML != null || tooltipHTML != undefined)){
					tooltipHTML = tooltipHTML.replace(/<[^>]+>/g,"");
				}
				if(isSetTooltipWidth){
					tooltipHTML = "<DIV style='padding: 0 5px 0 5px;vertical-align: middle;word-wrap: break-word;overflow: hidden;" +
									  "height:100%;width:"+tooltipWidth+"px'>" +tooltipHTML+ "</DIV>";
				}else{
					tooltipHTML = "<DIV style='padding: 0 5px 0 5px;vertical-align: middle;word-wrap: break-word;overflow: hidden;" +
								  "height:100%;'>" +tooltipHTML+ "</DIV>";
				}
				
				unieap.showTooltip(tooltipHTML,cellNode);
			}
			
		}),0);
	},
	
	_disableTooltip:function(e){

		clearTimeout(this._toolTipTimer);
		this._globalSpan&&unieap.hideTooltip(e.cellNode);
	},
    
    destroy: function() {
        this.destroyViews();
    },
    
	onRowRefresh:function(index) {
		
	},
	
	onCellRefresh:function(index,cell) {
		
	},
	
	//鼠标按下事件
	_onMousedown: function(e) {
		if (e.cell) {
			unieap.fireEvent4Widget(this,this.grid,this.onCellMousedown,[e.cell, e.rowIndex]);
		}
		var rows = this.grid.managers.get("RowManager");
		if (e.rowIndex == null || isNaN(e.rowIndex)) {
			return;
		}
		unieap.fireEvent4Widget(this,this.grid,this.onRowMousedown,[e]);
		if(e.ctrlKey){
			rows.updateHighlightRow(Number(e.rowIndex),false,e);
		}else{
			rows.updateHighlightRow(Number(e.rowIndex),true,e);
		}
		rows.updateCurrnetRow(Number(e.rowIndex));
	},
	
	//鼠标释放事件
	_onMouseup: function(e) {
		if (e.cell) {
			unieap.fireEvent4Widget(this,this.grid,this.onCellMouseup,[e.cell, e.rowIndex]);
		}
		var rows = this.grid.managers.get("RowManager");
		if (e.rowIndex == null || isNaN(e.rowIndex)) {
			return;
		}
		unieap.fireEvent4Widget(this,this.grid,this.onRowMouseup,[e]);
	},
	
	//暂存单击事件，防止在双击时误入单击事件
	_intervalTimer : null,
	
	//单双击辨别时延，官方推荐值为300（毫秒）
	_doubleClickDelay : 300,
	
	//鼠标点击事件；注：为点击附加的事件请放在_onMousedown中
	_doClick: function(e) {
		if(this.distinguishDblclick){
			clearTimeout(this._intervalTimer); //取消上次延时未执行的方法 
			this._intervalTimer = setTimeout(dojo.hitch(this,function(){
				if (e.cell) {
					unieap.fireEvent4Widget(this,this.grid,this.onCellClick,[e.cell, e.rowIndex]);
				}
				var rows = this.grid.managers.get("RowManager");
				if (e.rowIndex == null || isNaN(e.rowIndex)) {
					return;
				}
				unieap.fireEvent4Widget(this,this.grid,this.onRowClick,[e]);
				rows.updateCurrnetRow(Number(e.rowIndex));
			}),this._doubleClickDelay);
		}else{
				if (e.cell) {
					unieap.fireEvent4Widget(this,this.grid,this.onCellClick,[e.cell, e.rowIndex]);
				}
				var rows = this.grid.managers.get("RowManager");
				if (e.rowIndex == null || isNaN(e.rowIndex)) {
					return;
				}
				unieap.fireEvent4Widget(this,this.grid,this.onRowClick,[e]);
				rows.updateCurrnetRow(Number(e.rowIndex));
		}
	},
	
	//鼠标双击事件
	_doDbClick: function(e) {
		if(this.distinguishDblclick){
			clearTimeout(this._intervalTimer); 
		}
		if (e.cell) {
			unieap.fireEvent4Widget(this,this.grid,this.onCellDblClick,[e.cell, e.rowIndex]);
		}
		if (e.rowIndex == null || isNaN(e.rowIndex)) {
			return;
		}
		unieap.fireEvent4Widget(this,this.grid,this.onRowDblClick,[e]);
	},
	
	_needPage: function(inRowIndex) {
		var rowPage = Math.floor(inRowIndex / this.scroller.rowsPerPage);
		var t = 0;
		for(var i=0; i<rowPage; i++){
			t += this.scroller.getPageHeight(i);
		}
		var pageTop = t;
		this.scroller.needPage(rowPage, pageTop);
	},
	
	//弹出菜单实现
	_doContextMenu:function(e){
		//U_EAP00028570
		if(isNaN(e.rowIndex)){
			 return false;
		}
		if(!e.cellNode){
			 return false;	 
		}
		this.onContextMenu(e.cell,e.cellNode,e.rowIndex);
		if(dojo.isIE){
			e.cellNode.oncontextmenu&&e.cellNode.fireEvent('oncontextmenu');
		}else{
			var evt=document.createEvent('HTMLEvents');
			evt.initEvent("contextmenu", false, false);
			e.cellNode.dispatchEvent(evt);
		}
		return true;
	},
	
    //user interface------------------------------------------------------
	
    /**
     * @summary:
     * 		判断表格是否有rowBar
     * @return:
     * 		{boolean}
     * @example:
     * |var viewMan=unieap.byId('grid').getManager('ViewManager');
     * |var rowBar=viewMan.hasRowBar();
     */
    hasRowBar: function() {
        var sm = this.grid.managers.SelectionManager;
        
        if (sm) {
            return this.rowBar || this.rowNumber || sm.getSelectType();
        }
        else {
            return this.rowBar || this.rowNumber;
        }
    },
    
    /**
     * @summary:
     * 		设置表格是否自动渲染
     * @param:
     * 		{boolean} render
     * @example:
     * |<div dojoType="unieap.grid.Grid" id="grid" views="{autoRender:false}">
     * |	...
     * |</div>
     * |var viewMan=unieap.byId("grid").getManager("ViewManager");
     * |viewMan.setAutoRender(true);
     */
    setAutoRender: function(render) {
        this.autoRender = render;
        this.refresh();
        this.grid.resizeContainer();
    },
    
    /**
     * @summary:
     * 		设置列标题值
     * @param:
     * 		{string|number} cell Cell的序号或者name属性
     * @param:
     * 		{string} customName 自定义列标题名称
	 * @example:
	 * |var viewMan=unieap.byId('grid').getManager('ViewManager');
	 * |var label=viewMan.setHeaderName('attr_sal','最新工资');//列标题值变为"最新工资"
     */
    setHeaderName: function(inCell, customName) {
		var cell = this.grid.managers.get("LayoutManager").getCell(inCell);
		if (!cell) {
			return;
		};
		var n = dojo.isString(customName)?customName:cell.name;
		var th = dojo.query("TH", this.getViewByCell(cell).headerNode)[cell.layoutIndex];
		if (dojo.isIE) {
			th.innerText = n;
		} else {
			th.textContent = n;
		}
		 cell.label = n;
    },
	
	/**
	 * @summary:
	 * 		获得列标题值
	 * @param:
	 * 		{string|number} inCell Cell的序号或者name属性
	 * @example:
	 * |var viewMan=unieap.byId('grid').getManager('ViewManager');
	 * |var label=viewMan.getHeaderName('attr_sal');//获得标签值为"工资"
	 */
	getHeaderName:function(inCell){
		var cell = this.grid.managers.get("LayoutManager").getCell(inCell);
		return cell?cell.label:null;
		
	},
    
    /**
     * @summary:
     * 		取得某个单元格的Dom结点
     * @param:
     * 		{string|number} inCell 列绑定名称或者列索引号
     * @param:
     * 		{number} inRowIndex 单元格所在的行索引
     * @return:
     * 		{domNode}
     * @example:
     * |var viewMan=unieap.byId('grid').getManager('ViewManager');
     * |//获得Grid中第一行列绑定名为attr_sal的单元格所在的domNode
     * |var cellNode=viewMan.getCellNode("attr_sal",0); 
     */
    getCellNode: function(inCell, inRowIndex) {
    	try {
    		var cell = this.grid.managers.get("LayoutManager").getCell(inCell);
    		var view = this.getViewByCell(cell);
    		var node = view?view.getCellNode(inRowIndex, cell.index):null;
    		return node;
    	} catch(e) {
    		
    	}
    },
    
	/**
	 * @summary:
	 * 		获得指定单元格的内容
	 * @param:
	 * 		{string|number} inCell 列绑定名称或者列索引号
	 * @param:
	 * 		{number} inRowIndex 单元格所在的行索引
	 * @param：
	 * 		{boolean} isOrigin 是否获得格式化前的值
	 * @example:
	 * |var grid=unieap.byId('grid');
	 * |//获得第一行、第一列单元格中的数据
	 * |var text=grid.getManager('ViewManager').getItemText(0,0);
	 * |//获得第一行行中列绑定名为attr_sal的单元格的值
	 * |var text1=grid.getManager('ViewManager').getItemText("attr_sal",0);
	 * @example:
	 * |var txt=manager.getItemText("attr_sal",0);
	 * |var txt1=manager.getItemText("attr_sal",0,true);
	 * |比如单元格的显示值格式化成'5,000.00',txt的值就为'5,000.00',而txt1为'5000'.
	 */
    getItemText: function(inCell, inRowIndex,isOrigin) {
		if(inCell.declaredClass!='unieap.grid.Cell'){
			inCell=this.grid.managers.get("LayoutManager").getCell(inCell);
		}
    	if (!inCell) {
    		return null;
    	};
    	var value = inCell.get ? unieap.fireEvent4Widget(inCell,this.grid,inCell.get,[inRowIndex]) : inCell._get(inRowIndex);
		isOrigin!=true&&(value=inCell._format(value,inRowIndex));
    	return value;
    },
	
	
	/**
	 * @summary:
	 * 		设置指定单元格的内容
	 * @param:
	 * 		{string|number} inCell 列绑定名称或者列索引号
	 * @param:
	 * 		{number} inRowIndex 单元格所在的行索引
	 * @param：
	 * 		text 被赋的值
	 * 			 注意：此值应为DataStore中的真实值，不是格式化后的显示值
	 * @example:
	 * |var grid=unieap.byId('grid');
	 * |//设置第一行列绑定名为attr_sal的单元格中的数据为5000
	 * |grid.getViewManager().setItemText("attr_sal",0,5000);
	 * |//设置第一行行中列绑定名为attr_hiredate的单元格的值为1326936277000
	 * |//显示值可能为"2012-01-19 09:24:37"
	 * |grid.getViewManager().setItemText("attr_hiredate",0,1326936277000);
	 */
	setItemText:function(inCell,inRowIndex,text){
		if(typeof(inRowIndex)!="number") return;
		var name=inCell,grid=this.grid;
		if(typeof(inCell)=="number"){
			var cell=grid.getManager("LayoutManager").getCell(inCell);
			cell&&(name=cell.name)
		}
		if(!name) return;
		grid.getBinding().getRowSet().setItemValue(inRowIndex,name,text);
	},
    
    /**
	 * @summary:
	 * 		设置指单元格样式(合并单元格暂不支持该方法设置样式)
	 * @param:
	 * 		{number} inRowIndex  单元格所在的行索引 
	 * @param:
	 * 		{string|number} inCell 列绑定名称或者列索引号
	 * @param:
	 * 		{object} styles 样式对象
	 * @example:
	 * |var viewMan=unieap.byId("grid").getManager("ViewManager");
	 * |//设置Grid中第一行中列绑定名为attr_sal的单元格的样式
	 * |viewMan.setCellStyles(0,"attr_sal",{"color":"red","textAlign":"left"});
	 */
	setCellStyles: function(inRowIndex, inCell, styles) {
		if(typeof(inRowIndex)!="number") return;
		var rowNodes = [],
			//rowDatas=this.grid.getBinding().getRowData(),
			cell = this.grid.managers.get("LayoutManager").getCell(inCell);
		
		if(inRowIndex>this.grid.getBinding().getInternalRowSet().getRowCount()||!cell) return;
		for (var i=0,view; view = this.views[i]; i++) {
			if (view.isRowBar) continue;
			var rowNode = view.getRowNode(inRowIndex);
			rowNode && rowNodes.push(rowNode);
		}
		if (rowNodes.length==0) return;
		var style, cellNode;
		for (var i=0, node; node = rowNodes[i]; i++) {
			cellNode = dojo.query("[idx="+cell.index+"]", node)[0];
			if (cellNode) {
				for(style in styles) {
					dojo.style(cellNode, style, styles[style]);
	
					
				}
				
				dojo.isIE<8&&(cellNode.style.cssText=cellNode.style.cssText);
				
			}
		}
		
		//
		
		//var row = new unieap.ds.Row(this.grid.getBinding().getRowSet(),rowDatas[inRowIndex]);
		var row = new unieap.ds.Row(this.grid.getBinding().getRowSet(),this.grid.getBinding().getRow(inRowIndex));
		var styleIdentifier = row.getIdentifier("_style");
		
		//保存cell上的样式
//		!rowDatas[inRowIndex]["_style"]&&(rowDatas[inRowIndex]["_style"]={});
//		!rowDatas[inRowIndex]["_style"]["cell"]&&(rowDatas[inRowIndex]["_style"]["cell"]={}); 
//		rowDatas[inRowIndex]["_style"]["cell"][this._getCellIndex(cell)]=dojo.toJson(styles);
		!styleIdentifier&&(styleIdentifier={});
		!styleIdentifier["cell"]&&(styleIdentifier["cell"]={}); 
		styleIdentifier["cell"][this._getCellIndex(cell)]=dojo.toJson(styles);
		
		//调用setRowStyles，再调用setCellStyles
		//setCellStyles优先级高
		styleIdentifier["cell"]["priority"]="cell";
		//rowDatas[inRowIndex]["_style"]["priority"]="cell";
		row.setIdentifier("_style",styleIdentifier);
	},
	
	
	/**
	 * @summary:
	 * 		获得单元格样式(合并单元格暂不支持该方法设置样式)
	 * @param:
	 * 		{number} inRowIndex  单元格所在的行索引 
	 * @param:
	 * 		{string|number} inCell 列绑定名称或者列索引号
	 * @example:
	 * |var viewMan=unieap.byId("grid").getManager("ViewManager");
	 * |//获得Grid中第一行中列绑定名为attr_sal的单元格的样式
	 * |var style = viewMan.getCellStyles(0,"attr_sal");
	 */
	getCellStyles: function(inRowIndex, inCell) {
		if(typeof(inRowIndex)!="number") return;
		var rowNodes = [],
			//rowDatas=this.grid.getBinding().getRowData(),
			cell = this.grid.managers.get("LayoutManager").getCell(inCell);
		
		if(inRowIndex>this.grid.getBinding().getInternalRowSet().getRowCount()||!cell) return;
		for (var i=0,view; view = this.views[i]; i++) {
			if (view.isRowBar) continue;
			var rowNode = view.getRowNode(inRowIndex);
			rowNode && rowNodes.push(rowNode);
		}
		if (rowNodes.length==0) return;
		var style, cellNode;
		for (var i=0, node; node = rowNodes[i]; i++) {
			cellNode = dojo.query("[idx="+cell.index+"]", node)[0];
			if (cellNode) {
				return dojo.attr(cellNode, "style");
			}
		}
		
	},
	
	//获得cell所在的原始位置
	_getCellIndex:function(cell){
		var layout=this.grid.managers.get("LayoutManager"),
			seq=layout.customStructure,
			cells=layout.cells,
			index;
		if(!seq) return cell.index;
		for(var i=0,l=cells.length;i<l;i++){
			if(cells[i]==cell){
				index=i;
				break;
			}
		}
		return seq.seq[index]
		
	},
	
	
	/**
	 * @summary:
	 * 		设置指定行样式(合并单元格暂不支持该方法设置样式)
	 * @param：
	 * 		{number} inRowIndex 行索引号
	 * @param:
	 * 		{object} styles 样式对象
	 * @example:
	 * |var viewMan=unieap.byId("grid").getManager("ViewManager");
	 * |//设置Grid中第一行的样式
	 * |viewMan.setRowStyles(0,{"color":"red","textAlign":"left"});
	 */

	setRowStyles: function(inRowIndex, styles) {
		if(typeof(inRowIndex)!="number") return;
		var rowNodes = [];
			//rowDatas=this.grid.getBinding().getRowData();
		if(inRowIndex>this.grid.getBinding().getInternalRowSet().getRowCount()) return;
		for (var i=0,view; view = this.views[i]; i++) {
			if (view.isRowBar) continue;
			var rowNode = view.getRowNode(inRowIndex);
			rowNode && rowNodes.push(rowNode);
		}
		
		var row = new unieap.ds.Row(this.grid.getBinding().getRowSet(),this.grid.getBinding().getRow(inRowIndex));
		var styleIdentifier = row.getIdentifier("_style");
		
		
		//保存row上的样式
		//!rowDatas[inRowIndex]["_style"]&&(rowDatas[inRowIndex]["_style"]={})
		!styleIdentifier&&(styleIdentifier={})
		//调用setCellStyles，再调用setRowStyles
		//setRowStyles优先级高
//		rowDatas[inRowIndex]["_style"]["priority"]="row";
//		rowDatas[inRowIndex]["_style"]["row"]=dojo.toJson(styles);
		styleIdentifier["priority"]="row";
		styleIdentifier["row"]=dojo.toJson(styles);
		row.setIdentifier("_style",styleIdentifier);
		
		if (rowNodes.length==0) return;
		dojo.forEach(rowNodes,function(node){
			dojo.query(".u-grid-text",node).forEach(function(cellNode){
				dojo.style(cellNode,styles);
				dojo.isIE<8&&(cellNode.style.cssText=cellNode.style.cssText);
			});
		});
		dojo.forEach(rowNodes,function(node){
			dojo.query(".u-grid-text2",node).forEach(function(cellNode){
				dojo.style(cellNode,styles);
				dojo.isIE<8&&(cellNode.style.cssText=cellNode.style.cssText);
			});
		});
	},

	
    /**
     * @summary:
     * 		刷新表格视图
     * @description:
     * 		本方法会重新渲染Grid控件
     * @example:
     * |var grid=dijit.byId('grid');
     * |grid.getManager('ViewManager').refresh()
     */
    refresh: function() {
    	this.onBeforeRefresh();
    	this.grid._hasCellFormatterError = false;
    	this.grid.managers.get("RowManager")._clearAllHighlight();
    	// clear rows tyle cache
//    	var binding = this.grid.getBinding();
// 		var rowDatas=binding.getRowData();
//		if (rowDatas!=null && rowDatas.length>0) {
//			for (var i=0,len=rowDatas.length; i<len; i++) {
//				var row = new unieap.ds.Row(binding.getRowSet(),rowDatas[i]);
//				row.removeIdentifier("_style");
//				rowDatas[i]["_style"] && delete rowDatas[i]["_style"];
//			}
//		}
        this.render();
    },
    
    /**
     * @summary:
     * 		刷新某一行
     * @description:
     * 		如果用户监听了onRowRefresh方法,调用本方法后会自动调用onRowRefresh
     * @param:
     * 		{number} inRowIndex 行索引号
     * @example:
     * |var grid=dijit.byId('grid');
     * |grid.getManager('ViewManager').refreshRow(0) //刷新grid中的第一行
     */
    refreshRow: function(inRowIndex) {
        this.forEach(function(inView, i) {
            inView.renderRow(inView.getRowNode(inRowIndex), inRowIndex);
        });
		this.onRowRefresh(inRowIndex);
    },
	
    
    /**
     * @summary:
     * 		刷新某个单元格
     * @description:
     * 		如果某个单元格正处于编辑状态,刷新无效
     * @param:
     * 		{number} inRowIndex 行索引号
     * @param:
     * 		{unieap.grid.Cell} inCell 注意此处inCell类型为Cell对象
     * @example:
     * |var grid=dijit.byId('grid');
     * |var cell=grid.getManager('LayoutManager').getCell(0); //获得第一列Cell
     * |grid.getManager('ViewManager').refreshCell(0,cell) //刷新第一列第一行的cell
     */
    refreshCell: function(inRowIndex, inCell) {
    	var view = this.getViewByCell(inCell);
    	var node = view?view.getCellNode(inRowIndex, inCell.index):null;
    	if (node==null) return;
    	if(dojo.query("[widgetId]",node).length>0) {return;}//当此单元格处于编辑状态时，不刷新
    	
//    	var rowData = this.grid.getBinding().getRowData(),
//    		value =  inCell.format(inRowIndex) ,
//			changedValue='',
//    		_o;
//    		
//    	if (this.markDirty) {//显示修改标记
//			if (inCell["name"]
//				&& rowData
//				&& rowData[inRowIndex]
//				&& (_o=rowData[inRowIndex]["_o"])
//				&& inCell["name"] in _o) {
//				changedValue= "<div class=\"u-grid-value-changed\"></div>";
//			}
//		}
		
    	var rowData = this.grid.getBinding().getRow(inRowIndex),
		value =  inCell.format(inRowIndex) ,
		changedValue='',
		$parent = $('#'+this.grid.domNode.id),
		row;
    	if(rowData){
			row = new unieap.ds.Row(this.grid.getBinding().getRowSet(),rowData);
			$parent.find('.gird-liebiaoRemoveHover').length>0&&$parent.find('.gird-liebiaoRemoveHover').addClass('gird-liebiao').removeClass('gird-liebiaoRemoveHover').attr("title","");
    	}
		if (this.markDirty) {//显示修改标记
			if (inCell["name"]
				&& row
				&& row.isItemChanged(inCell["name"])) {
				changedValue= "<div class=\"u-grid-value-changed\"></div>";
					// 判断如果该页面表格受到任何数据修改 就禁用导出
				$parent.find('.gird-liebiao').addClass('gird-liebiaoRemoveHover').removeClass('gird-liebiao').attr("title","请完成编辑后导出数据");
			}
		}
		//由于firefox下,当一个div的position为absolute时，它是从table左上角开始进行计算的
		//需要把<div class=\"u-grid-value-changed\"></div>放到<div class="u-grid-text"></div>下方
		dojo.empty(node);
		node.appendChild(dojo._toDom(value));
		changedValue&&(node.childNodes[0].appendChild(dojo._toDom(changedValue)));
		this.onCellRefresh(inRowIndex,inCell);
    },
    
    /**
     * @summary:
     * 		刷新当前表格的当前页
     * @example:
     * |var grid=dijit.byId('grid')
     * |grid.getManager('ViewManager').refreshPage(); 
     */
	refreshPage: function() {
		this.grid.managers.get("RowManager")._clearAllHighlight();
		this.scroller.init(this.grid.managers.get("RowManager").getRowCount());
		// clear rows tyle cache
		var binding = this.grid.getBinding();
// 		var rowDatas=binding.getRowData();
//		if (rowDatas!=null && rowDatas.length>0) {
//			for (var i=0,len=rowDatas.length; i<len; i++) {
//				var row = new unieap.ds.Row(binding.getRowSet(),rowDatas[i]);
//				row.removeIdentifier("_style");
//				//rowDatas[i]["_style"] && delete rowDatas[i]["_style"];
//			}
//		}
//		binding.getInternalRowSet().forEach(function(row){
//			row.removeIdentifier("_style");
//		})
		
		this.renderLockedRow();
		this.setScrollTop(this.scrollTop);
//		this.finishScrollJob();
    },
    
    /**
     * @summary:
     * 		将页面滚动到指定行
     * @param:
     * 		{number} inRowIndex 行索引号
     * @example:
     * |var grid=dijit.byId('grid');
     * |grid.getManager('ViewManager').scrollToRow(9); //滚动到第10行
     */
    scrollToRow: function(inRowIndex) {
    	if (isNaN(inRowIndex) || inRowIndex<0) return;
    	this._needPage(inRowIndex);
    	this.setScrollTop(this.scroller.findScrollTop(inRowIndex) + 1);
    },
    
	
    visualizeRow: function(inRowIndex) {
		var rows = this.grid.managers.get("RowManager");
		var nextRowTop = this.scroller.findScrollTop(inRowIndex+1);
		if (nextRowTop == -1) {
			this.doscroll(rows.defaultRowHeight);
			return;
		}
		var lockRowHeight = rows.getLockedRowHeight();
		var gridWindowBottom = this.scroller.getScrollBottom(this.scrollTop);
		var discrepancy = gridWindowBottom - lockRowHeight - nextRowTop;
		if (discrepancy < 1 || nextRowTop<this.scrollTop) {
			this.doscroll(-discrepancy);
			return ;
		}
		var rowTop = this.scroller.findScrollTop(inRowIndex);
		if(rowTop<this.scrollTop && nextRowTop>this.scrollTop){
			this.doscroll(rowTop-this.scrollTop);
		}
	},
	
	//调整横向或纵向滚动条是否显示及锁定行位置
	adjustScrollBar :function(){
		if(this.grid.domNode.offsetHeight==0) return;
		var scrollView = this.views[this.views.length-1];
		if (scrollView) {
			var port = scrollView.getScrollBarPort();
			for (var i=0,view; view = this.views[i]; i++) {
				view.adjustScrollBar(port);
			}
		}
	},
	
	
	/**
     * @summary:
     * 		grid视图刷新前事件
     * @example:
     * |function fn(){}
     * |<div dojoType='unieap.grid.Grid' views="{onBeforeRefresh:fn}"></div>
     */
	onBeforeRefresh: function() {
	},
	
    /**
     * @summary:
     * 		渲染前事件
     * @example:
     * |function fn(){}
     * |<div dojoType='unieap.grid.Grid' views="{onBeforeRender:fn}"></div>
     */
    onBeforeRender: function() {
    },
    
    /**
     * @summary:
     * 		渲染后事件
     * @example:
     * |function fn(){}
     * |<div dojoType='unieap.grid.Grid' views="{onAfterRender:fn}"></div>
     */
    onAfterRender: function() {
    },
    
    /**
     * @summary:
     * 		单元格上鼠标经过事件
     * @param:
     * 		{unieap.grid.Cell} inCell 单元格对象
     * @param:
     * 		{number} inRowIndex 行索引号
     * @example:
     * |function fn(cell,index){}
     * |<div dojoType='unieap.grid.Grid' views="{onCellMouseOver:fn}"></div>
     */
    onCellMouseOver: function(inCell,inRowIndex) {
    },
    
    /**
     * @summary:
     * 		单元格上鼠标移出事件
     * @param:
     * 		{unieap.grid.Cell} inCell 单元格对象
     * @param:
     * 		{number} inRowIndex 行索引号
     * @example:
     * |function fn(cell,index){}
     * |<div dojoType='unieap.grid.Grid' views="{onCellMouseOut:fn}"></div>
     */
    onCellMouseOut: function(inCell,inRowIndex) {
    },
    
    /**
     * @summary:
     * 		单元格上鼠标按下事件
     * @param:
     * 		{unieap.grid.Cell} inCell 单元格对象
     * @param:
     * 		{number} inRowIndex 行索引号
     * @example:
     * |function fn(cell,index){}
     * |<div dojoType='unieap.grid.Grid' views="{onCellMousedown:fn}"></div>
     */
    onCellMousedown: function(inCell, inRowIndex) {
    },
	
	
	/**
	 * @summary:
	 * 		在单元格上鼠标释放事件
	 * @param:
	 * 		{unieap.grid.Cell} inCell 单元格对象
	 * @param:
	 * 		{number} inRowIndex 行索引号
	 * @example:
	 * |function fn(cell,index){}
	 * |<div dojoType='unieap.grid.Grid' views="{onCellMouseup:fn}"></div>
	 */
    onCellMouseup: function(inCell, inRowIndex) {
    },
    

	/**
	 * @summary:
	 * 		在单元格上点击事件
	 * @description:
	 * 		对于合并单元格，请在unitedCell属性上设置onCellClick属性
	 * @param:
	 * 		{unieap.grid.Cell} inCell 单元格对象
	 * @param:
	 * 		{number} inRowIndex 行索引号
	 * @example:
	 * |function fn(cell,index){}
	 * |<div dojoType='unieap.grid.Grid' views="{onCellClick:fn}"></div>
	 */
    onCellClick: function(inCell, inRowIndex) {
    },
    
	/**
	 * @summary:
	 * 		在单元格上双击事件
	 * @description:
	 * 		对于合并单元格，请在unitedCell属性上设置onCellDblClick属性
	 * @param:
	 * 		{unieap.grid.Cell} inCell 单元格对象
	 * @param:
	 * 		{number} inRowIndex 行索引号
	 * @example:
	 * |function fn(cell,index){}
	 * |<div dojoType='unieap.grid.Grid' views="{onCellDblClick:fn}"></div>
	 */
    onCellDblClick: function(inCell, inRowIndex) {
    },
    
	/**
	 * @summary:
	 * 		鼠标滑过Grid表头事件
	 * @param:
	 * 		{event} evt
	 * @example:
	 * |function fn(evt){unieap.debug(evt)}
	 * |<div dojoType='unieap.grid.Grid' views="{onHeaderMouseOver:fn}"></div>
	 */
    onHeaderMouseOver: function(evt) {
    },
    
	/**
	 * @summary:
	 * 		鼠标移出Grid表头事件
	 * @param:
	 * 		{event} evt
	 * @example:
	 * |function fn(evt){unieap.debug(evt)}
	 * |<div dojoType='unieap.grid.Grid' views="{onHeaderMouseOut:fn}"></div>
	 */
    onHeaderMouseOut: function(evt) {
    },
    

	/**
	 * @summary:
	 * 		鼠标滑过Grid的某一行事件
	 * @param:
	 * 		{event} evt
	 * @example:
	 * |function fn(evt){unieap.debug(evt)}
	 * |<div dojoType='unieap.grid.Grid' views="{onRowMouseOver:fn}"></div>
	 */
    onRowMouseOver: function(evt) {
    },
    
	/**
	 * @summary:
	 * 		鼠标移出Grid的某一行事件
	 * @param:
	 * 		{event} evt
	 * @example:
	 * |function fn(evt){unieap.debug(evt)}
	 * |<div dojoType='unieap.grid.Grid' views="{onRowMouseOut:fn}"></div>
	 */
    onRowMouseOut: function(evt) {
    },
    
	/**
	 * @summary:
	 * 		在Grid的某一行上鼠标按下事件
	 * @param:
	 * 		{event} evt
	 * @example:
	 * |function fn(evt){unieap.debug(evt)}
	 * |<div dojoType='unieap.grid.Grid' views="{onRowMousedown:fn}"></div>
	 */
    onRowMousedown: function(evt) {
    },
	
	/**
	 * @summary:
	 * 		在Grid的某一行上鼠标释放事件
	 * @param:
	 * 		{event} evt
	 * @example:
	 * |function fn(evt){unieap.debug(evt)}
	 * |<div dojoType='unieap.grid.Grid' views="{onRowMouseup:fn}"></div>
	 */
    onRowMouseup: function(evt) {
    },
    
	/**
	 * @summary:
	 * 		在Grid的某一行上鼠标点击事件
	 * @param:
	 * 		{event} evt
	 * @example:
	 * |function fn(evt){unieap.debug(evt)}
	 * |<div dojoType='unieap.grid.Grid' views="{onRowClick:fn}"></div>
	 */
    onRowClick: function(evt) {
    },
    
	/**
	 * @summary:
	 * 		在Grid的某一行上鼠标双击事件
	 * @param:
	 * 		{event} evt
	 * @example:
	 * |function fn(evt){unieap.debug(evt)}
	 * |<div dojoType='unieap.grid.Grid' views="{onRowDblClick:fn}"></div>
	 */
    onRowDblClick: function(evt) {
    },
    
	/**
	 * @summary:
	 * 		列表头鼠标点击事件
	 * @param:
	 * 		{unieap.grid.Cell} inCell 列对象
	 * @example:
	 * |function fn(inCell){unieap.debug(inCell)}
	 * |<div dojoType='unieap.grid.Grid' views="{onHeaderCellClick:fn}"></div>
	 */
    onHeaderCellClick: function(inCell) {
    },
    
	/**
	 * @summary:
	 * 		表头鼠标点击事件
	 * @description:
	 * 		如果同时配置了onHeaderCellClick和onHeaderClick,会先执行前者再执行后者
	 * @param:
	 * 		{event} evt 
	 * @example:
	 * |function fn(inCell){unieap.debug(inCell)}
	 * |<div dojoType='unieap.grid.Grid' views="{onHeaderClick:fn}"></div>
	 */
    onHeaderClick: function(evt) {
    },
	
	/**
	 * @summary:
	 * 		列表头鼠标按下事件
	 * @param:
	 * 		{unieap.grid.Cell} inCell 列对象
	 * @example:
	 * |function fn(inCell){unieap.debug(inCell)}
	 * |<div dojoType='unieap.grid.Grid' views="{onHeaderCellMousedown:fn}"></div>
	 */
    onHeaderCellMousedown: function(inCell) {
    },
	
	/**
	 * @summary:
	 * 		表头鼠标按下事件
	 * @param:
	 * 		{event} evt 
	 * @example:
	 * |function fn(inCell){unieap.debug(inCell)}
	 * |<div dojoType='unieap.grid.Grid' views="{onHeaderMousedown:fn}"></div>
	 */
    onHeaderMousedown: function(e) {
    },
    
    /**
	 * @summary:
	 * 		渲染表头的回调方法
	 * @param:
	 * 		{HTMLDomNode} node 标头结点
	 * @param:
	 * 		{unieap.grid.View} inView 视图对象
	 * @example:
	 * |function fn(node ,view){unieap.debug(inCell)}
	 * |<div dojoType='unieap.grid.Grid' views="{onHeaderRender:fn}"></div>
	 */
    onHeaderRender : function(node ,inView){
    	
    },

    /**
     * @summary:
     * 		在单元格上点击右键时触发
     * @summary:
     * 		对于合并单元格，请在unitedCell属性上设置onContextMenu属性
     * @param:
     * 		{unieap.grid.Cell} cell
     * @param:
     * 		{domNode} cellNode
     * @param:
     * 		{number} inRowIndex 行索引号
     * @example:
     * |<div dojoType="unieap.grid.Grid" views="{onContextMenu:fn}">
     * |	...
     * |</div>
     * |<script type="text/javascript">
     * |	var menu;
     * |	function fn(cell,cellNode,inRowIndex){
     * |		if(!menu){
     * |			menu=new unieap.menu.Menu({style:'display:none'});
     * |			menu.addChild(new unieap.menu.MenuItem({label:'你好'});
     * |			menu.addChild(new unieap.menu.MenuItem({label:'基础软件'});
     * |			menu.startup();
     * |		}
     * |		menu.bindDomNode(cellNode);
     * |	}
     * |</script>
     * @img:
     * 		images/grid/views/contextmenu.png
     */
	onContextMenu:function(cell,cellNode,inRowIndex){}
	
	
});

dojo.provide("unieap.grid.view.drag");

// summary:
//	utility functions for dragging as used in grid.
// begin closure
(function() {

var ugdrag = unieap.grid.drag = {};

ugdrag.dragging = false;
ugdrag.hysteresis = 2;

ugdrag.capture = function(inElement) {
//	console.debug('unieap.grid.drag.capture');
	if (inElement.setCapture)
		inElement.setCapture();
	else {
		document.addEventListener("mousemove", inElement.onmousemove, true);
		document.addEventListener("mouseup", inElement.onmouseup, true);
		document.addEventListener("click", inElement.onclick, true);
	}
}

ugdrag.release = function(inElement) {
	//console.debug('unieap.grid.drag.release');
	if(inElement.releaseCapture) {
		inElement.releaseCapture();
	} else {
		document.removeEventListener("click", inElement.onclick, true);
		document.removeEventListener("mouseup", inElement.onmouseup, true);
		document.removeEventListener("mousemove", inElement.onmousemove, true);
	}
	ugdrag.events.release();
}

ugdrag.start = function(inElement, inOnDrag, inOnEnd, inOnRelease, inEvent, inOnStart) {
	if(/*ugdrag.elt ||*/ !inElement || ugdrag.dragging) {
//		console.debug('failed to start drag: bad input node or already dragging');
		return;
	}
	ugdrag.dragging = true;
	ugdrag.elt = inElement;
	ugdrag.events = {
		drag: inOnDrag || unieap.grid.nop, 
		end: inOnEnd || unieap.grid.nop, 
		release: inOnRelease || unieap.grid.nop, 
		start: inOnStart || unieap.grid.nop, 
		oldmove: inElement.onmousemove, 
		oldup: inElement.onmouseup, 
		oldclick: inElement.onclick 
	};
	ugdrag.positionX = (inEvent && ('screenX' in inEvent) ? inEvent.screenX : false);
	ugdrag.positionY = (inEvent && ('screenY' in inEvent) ? inEvent.screenY : false);
	ugdrag.started = (ugdrag.position === false);
	inElement.onmousemove = ugdrag.mousemove;
	inElement.onmouseup = ugdrag.mouseup;
	inElement.onclick = ugdrag.click;
	ugdrag.capture(ugdrag.elt);
}

ugdrag.end = function() {
//	console.debug("unieap.grid.drag.end");
	ugdrag.release(ugdrag.elt);
	ugdrag.elt.onmousemove = ugdrag.events.oldmove;
	ugdrag.elt.onmouseup = ugdrag.events.oldup;
	ugdrag.elt.onclick = ugdrag.events.oldclick;
	ugdrag.elt = null;
	try{
		if(ugdrag.started) {
			ugdrag.events.end();
		}
	}finally{
		ugdrag.dragging = false;
	}
}

ugdrag.calcDelta = function(inEvent) {
	inEvent.deltaX = inEvent.screenX - ugdrag.positionX;
	inEvent.deltaY = inEvent.screenY - ugdrag.positionY;
}

ugdrag.hasMoved = function(inEvent) {
	return Math.abs(inEvent.deltaX) + Math.abs(inEvent.deltaY) > ugdrag.hysteresis;
}

ugdrag.mousemove = function(inEvent) {
	inEvent = dojo.fixEvent(inEvent);
	dojo.stopEvent(inEvent);
	ugdrag.calcDelta(inEvent);
	if((!ugdrag.started)&&(ugdrag.hasMoved(inEvent))) {
		ugdrag.events.start(inEvent);
		ugdrag.started = true;
	}
	if(ugdrag.started){
		ugdrag.events.drag(inEvent);
	}
}

ugdrag.mouseup = function(inEvent) {
	dojo.stopEvent(dojo.fixEvent(inEvent));
	ugdrag.end();
}

ugdrag.click = function(inEvent) {
	dojo.stopEvent(dojo.fixEvent(inEvent));
	//ugdrag.end();
}

})();
// end closure

dojo.provide('unieap.grid.view.builder');
dojo.require("unieap.grid.view.drag");

unieap.grid.rowIndexTag = "gridRowIndex";

dojo.declare("unieap.grid.view.Builder", null, {
	
	view: null,
	
	_table: '<table class="u-grid-row-table" border="0" cellspacing="0" cellpadding="0"',
	
	constructor: function(inView) {
		this.view = inView;
	},
	
	generateCellMarkup: function(inCell, isHeader) {
		var result = [], html, cellTag, colSpan, rowSpan;
		if (isHeader) {
			cellTag = "th";
			colSpan = "colSpan";
			rowSpan = "rowSpan";
		} else {
			cellTag = "td";
			colSpan = "contentColSpan";
			rowSpan = "contentRowSpan";
		}
		html = [ "<" + cellTag + " tabIndex='-1'" ];
		
		inCell.colSpan && html.push(" colspan='", inCell.colSpan, "'");
		inCell.rowSpan && html.push(" rowspan='", inCell.rowSpan, "'");
		html.push(" class='");
		//修正MasterDetail中嵌套的Grid表头分隔线不明线的bug
		isHeader&&html.push("u-grid-hcell ");
		
		isHeader&&(inCell.colSpan >1)&&html.push("u-grid-hcell-mulTitle ");
		inCell.rowSpan>1&&html.push("u-grid-hcell-mulTitleRowSpan ");
		inCell.classes && html.push(inCell.classes.join(' '));
		html.push("");
	
		//result[0]-->"<td class='u-grid-cell"
		result.push(html.join(''));
		//result[1]-->""
		result.push("");
		var defaultMulTitleHeight =  this.view.grid.getManager("RowManager").defaultMulTitleHeight,
            defaultHeaderHeight =  this.view.grid.getManager("RowManager").defaultHeaderHeight,
            defaultRowHeight = this.view.grid.getManager("RowManager").defaultRowHeight,
            titleHeight = null;
		 //判断多表头是否有rowspan  默认高度填写多表头的默认高度和单一表头的默认高度

        if((isHeader && inCell.colSpan) || inCell.subrow!==0){
            titleHeight = inCell.rowSpan ?  'height:'+(inCell.rowSpan*defaultMulTitleHeight)+'px'+';line-height:'+(inCell.rowSpan*defaultMulTitleHeight)+'px;' : 'height:'+defaultMulTitleHeight+'px'+ ';line-height:'+ defaultMulTitleHeight+'px;';;
				$('#'+this.view.id).parents('.u-grid').removeClass('gridMulTitle').addClass('gridMulTitle'); //增加个多表头的class  防止多表头线
		}else if(isHeader){
			var defaultRowSpan = inCell.rowSpan?inCell.rowSpan:1
            titleHeight = 'height:'+defaultHeaderHeight*defaultRowSpan+'px'+ ';line-height:'+ defaultHeaderHeight*defaultRowSpan+'px;';
        }else{
            titleHeight = 'height:'+defaultRowHeight+'px'+ ';line-height:'+ defaultRowHeight +'px;';
        }
        html = ["' idx='", inCell.index, "' style='",titleHeight];
		html.push(isHeader?inCell.headerStyles:inCell.styles);
		
		//result[2]--->"' idx='1' style='background:#ccc;"
		result.push(html.join(''));

		//result[3]-->""
		result.push("");
		
		html = [ "'" ];
		
//		cell现在没有attrs属性
//		inCell.attrs && html.push(" ", inCell.attrs);
		
		html.push(">");
		
		//result[4]-->"'>"
		result.push(html.join(''));
		
		//result[5] -->""
		result.push("");
		
		//result[6]-->"</td>"
		result.push("</" + cellTag + ">");
		

		
		return result;
	},
	// cell finding
	isCellNode: function(inNode) {
		return Boolean(inNode && inNode.getAttribute && inNode.getAttribute("idx"));
	},
	getCellNodeIndex: function(inCellNode) {
		return inCellNode ? Number(inCellNode.getAttribute("idx")) : -1;
	},
	getCellNode: function(inRowNode, inCellIndex) {
		for(var i=0, row; row=unieap.grid.getTr(inRowNode.firstChild, i); i++) {
			for(var j=0, cell; cell=row.cells[j]; j++) {
				if(this.getCellNodeIndex(cell) == inCellIndex) {
					return cell;
				}
			}
		}
	},
	findCellTarget: function(inSourceNode, inTopNode) {
		var n = inSourceNode;
		while(n && !this.isCellNode(n) && (n!=inTopNode)) {
			n = n.parentNode;
		}
		return n!=inTopNode ? n : null 
	},
	// event decoration
	baseDecorateEvent: function(e) {
		e.dispatch = 'do' + e.type;
		e.grid = this.view.grid;
		e.sourceView = this.view;
		e.cellNode = this.findCellTarget(e.target, e.rowNode);
		e.cellIndex = this.getCellNodeIndex(e.cellNode);
		var layout = this.view.grid.managers.get("LayoutManager"); 
		e.cell = (e.cellIndex >= 0 ? layout.getCell(e.cellIndex) : null);
	},
	// event dispatch
	findTarget: function(inSource, inTag) {
		var n = inSource;
		while(n && !(inTag in n) && (n!=this.view.grid.domNode)) {
			n = n.parentNode;
		}
		return (n != this.view.domNode) ? n : null; 
	},
	findRowTarget: function(inSource) {
		var rowNode=this.findTarget(inSource, unieap.grid.rowIndexTag);
		var l=0,m=rowNode;
		while(m&&(m!=this.view.grid.domNode)){
			m = m.parentNode;
			l+=1;
			if(l>10)return null;
		}
		if (l > 10) {
			return null;
		}
		return rowNode;
	},
	isIntraNodeEvent: function(e) {
		try {
			return (e.cellNode && e.relatedTarget && dojo.isDescendant(e.relatedTarget, e.cellNode));
		} catch(x) {
			// e.relatedTarget has permission problem in FF if it's an input: https://bugzilla.mozilla.org/show_bug.cgi?id=208427
			return false;
		}
	},
	isIntraRowEvent: function(e) {
		try {
			var row = e.relatedTarget && this.findRowTarget(e.relatedTarget);
			return !row && (e.rowIndex==-1) || row && (e.rowIndex==row.gridRowIndex);			
		} catch(x) {
			// e.relatedTarget on INPUT has permission problem in FF: https://bugzilla.mozilla.org/show_bug.cgi?id=208427
			return false;
		}
	},
	dispatchEvent: function(e) {
		if(e.dispatch in this) {
			return this[e.dispatch](e);
		}
	},
	// dispatched event handlers
	domouseover: function(e) {
		
		if(e.cellNode && (e.cellNode!=this.lastOverCellNode)) {
			this.lastOverCellNode = e.cellNode;
			this.view.onMouseOver(e);
		}
		this.view.onMouseOverRow(e);
	},
	domouseout: function(e) {
		var relatedTarget = e.relatedTarget;
		if(relatedTarget && relatedTarget.className != 'u-grid-text2' && relatedTarget.className != 'u-grid-cell'){
			this.view.onMouseOut(e);
			this.lastOverCellNode = null;
		}else if(e.cellNode && (e.cellNode==this.lastOverCellNode) && !this.isIntraNodeEvent(e, this.lastOverCellNode)){
			this.lastOverCellNode = null;
			if(!this.isIntraRowEvent(e)) {
				this.view.onMouseOutRow(e);
			}
		}
	}
});

dojo.declare("unieap.grid.view.ContentBuilder", unieap.grid.view.Builder, {
	update: function() {
		this.prepareCells();
	},
	
	prepareCells: function() {
		var rows = this.view.contentStructure.rows;
		for(var j=0, row; (row=rows[j]); j++) {
			for(var i=0, cell; (cell=row[i]); i++) {
				cell.markup = this.generateCellMarkup(cell, false);
			}
		}
	},
	
	generateHtml: function(inRowIndex,data,isLockedRow) {

		var html = [this._table],
			v = this.view,
			rows = v.contentStructure.rows,
			rowData = this.view.grid.getBinding().getRowData(),
			markDirty = this.view.grid.managers.get("ViewManager").markDirty,
			defaultRowHeight=this.view.grid.managers.get("RowManager").defaultRowHeight,
			$gird = $('#'+v.grid.id);;
		//判断如果表格存在编辑状态 加上禁用导出状态，如果表格没有编辑状态 删除禁用状态
		if($gird.find('.u-grid-value-changed').length === 0 && $gird.find('.gird-liebiaoRemoveHover').length>0){
			$gird.find('.gird-liebiaoRemoveHover').addClass('gird-liebiao').removeClass('gird-liebiaoRemoveHover').attr("title","");
		}


		
		html.push(this.view.rowTable["colgroup"]);

		for(var j=0, row; (row=rows[j]); j++) {
			html.push(!row.invisible ? '<tr>' : '<tr class="u-grid-invisible">');
			for(var i=0, cell, m, cc; (cell=row[i]); i++) {
				//cell.markup是一个指针引用，会被其他代码调用，采用克隆的方式操作
				m = dojo.clone(cell.markup), cc = cell.customClasses = [];
			
				//如果是锁定行,不进行css渲染
				if(isLockedRow){
					var index=m[2].indexOf("style='");
					m[2]=m[2].substring(0,index+7);
				}
				
				//给每个td设置高度,高度为defaultRowHeight-1
				if(dojo.trim(m[2]).endWith(";")){
					m[3]="height:"+(defaultRowHeight)+"px";
				}else{
					m[3]="height:"+(defaultRowHeight)+"px";
				}
				

				//数据如果修改就显示红色小三角
				m[5] = this.formatCellNode(cell, inRowIndex, data, rowData, markDirty);
				

				html.push.apply(html, m);
			}
			html.push('</tr>');
			
		}
		
		html.push('</table>');
	
	
		return html.join('');
	},
	
	formatCellNode: function(inCell, inRowIndex, data, rowData, markDirty) {
//		var value = inCell.format(inRowIndex,data),
//			changedValue='',
//			_o;
//		if (markDirty&&!data) {//显示修改标记,锁定行不走该过程
//			if (inCell["name"]
//				&& rowData
//				&& rowData[inRowIndex]
//				&& (_o=rowData[inRowIndex]["_o"])
//				&& inCell["name"] in _o) {
//				changedValue += "<div class=\"u-grid-value-changed\"></div></div>";
//				var index=value.lastIndexOf("</div>");
//				value=value.substring(0,index)+changedValue;
//			}
//		}
//		
//
//		return value;
		
		var value = inCell.format(inRowIndex,data),
		rowData = this.view.grid.getBinding().getRow(inRowIndex),
		changedValue='',
	    $parent = $('#'+this.view.grid.id),
		row;
		var check_s = function(rows){ //判断_s是否是第一位的 补充修改缺少_o标记的bug  2018-11-21 林栋
			return Object.keys(rows.data)[0] == "_s" ? true : false ;
		}
		if(rowData){
    		row = new unieap.ds.Row(this.view.grid.getBinding().getRowSet(),rowData);
		}
		
		if (markDirty&&!data) {//显示修改标记,锁定行不走该过程
			if (inCell["name"]
			&& row
			&& (row.isItemChanged(inCell["name"]) || check_s(row) )) {
				changedValue += "<div class=\"u-grid-value-changed\"></div></div>";
				var index=value.lastIndexOf("</div>");
				value=value.substring(0,index)+changedValue;
				// 判断如果该页面表格受到任何数据修改 就禁用导出
				$parent.find('.gird-liebiao').addClass('gird-liebiaoRemoveHover').removeClass('gird-liebiao').attr("title","请完成编辑后导出数据");
			}
		}
		//记录首屏最后一条数据的
		//避免一瓶展示数据正好截至到第二合并行的第一行，导致合并行展示多出分割线
		if(this.view.grid.uniteText){
			this.view.grid.uniteTextNew = JSON.parse(JSON.stringify(this.view.grid.uniteText))
			this.view.grid.uniteTextNew.index =  inRowIndex
		}
		
		return value;
	},
	
	decorateEvent: function(e) {
		e.rowNode = this.findRowTarget(e.target);
		if(!e.rowNode) {return false};
		e.rowIndex = e.rowNode[unieap.grid.rowIndexTag];
		e.widget = this.view.grid;
		this.baseDecorateEvent(e);
		return true;
	}
});

dojo.declare("unieap.grid.view.HeaderBuilder", unieap.grid.view.Builder, {
	
	bogusClickTime: 0,
	overResizeWidth: 4,
	minColWidth: 10,
	oldWidth: -1,
	rawWidth: -1,
	
	update: function() {
		this.tableMap = new unieap.grid.tableMap(this.view.structure.rows);
	},
	
	generateHtml: function() {
		var html = [], rows = this.view.structure.rows;	  
		
		var sortInfo = this.view.grid.getSortInfo();
		if(sortInfo.length > 1){ //避免排序的时候出现两条排序显示的图标
			sortInfo.length = 1;
		}
		var isMulTitle = false;	
		for(var j=0, row; (row=rows[j]); j++) {
			html.push(!row.invisible ? '<tr>' : '<tr class="u-grid-invisible">');
			for(var i=0, cell,cc, markup; (cell=row[i]); i++) {
				markup = this.generateCellMarkup(cell, true);
				isMulTitle = isMulTitle || cell.isMulTitle || false;
				markup[5] = "<div class='u-grid-text'>" + (cell.label || '') + "</div>";
				//设置排序列样式，包括主排序列和次排序列
				for(var k=0;k<sortInfo.length;k++){
					if(sortInfo[k] == cell){
						cc = cell.customClasses = [];
						cc.push(k==0?" u-grid-sort-primary" : " u-grid-sort-secondary");
						markup[1] = cc.join(' ');
						// var result = ["<nobr class='u-grid-text'><span"];
						var result = ["<nobr><span"];
						result.push(">");
						result.push(cell.label || '');
						result.push("</span>");
						// result.push("<span class='"+(cell.asc >0? "u-grid-sort-up":"u-grid-sort-down")+"'>&nbsp</span>");
						
						result.push("</nobr>");
						result.push("<span class='u-grid-sortBox'> <i class='"+(cell.asc >0 ? "iconfont icon-color-picker up active":"iconfont icon-color-picker up")+"'></i>");
						result.push("<i class='"+(cell.asc >0 ? "iconfont icon-color-picker down":"iconfont icon-color-picker down active")+"'></i> </span>");
						markup[5] = result.join("");
						break;
					}
				}
				markup[5]="<div class='u-grid-header-cell'>"+markup[5]+"</div>"
				
				html.push(markup.join(''));
			}
			html.push('</tr>');
		}
		html.push('</table>');
		html.push('</div>');
		
		if (dojo.isIE && isMulTitle) {
			var s = ["<tr style='display:none;'>"];
			for(var i =this.view.rowTable["cols"].length;i>0;i--){
				s.push("<td class=\"u-grid-cell\"></td>");
			}
			s.push("</tr>");
			html.unshift(s.join(""));
		}
		html.unshift(this.view.rowTable["colgroup"]);
		html.unshift('height="' + this.view.headerHeight + 'px">');
		html.unshift(this._table);
		html.unshift("<div class='u-grid-inner'>");
		return html.join('');
	},
	
	getMousePosition: function(event,o) {
		var mousePosition={x:0,y:0};
		var top,left,obj=o;
		var ParentObj=obj;
		left=obj.offsetLeft;
		while(ParentObj=ParentObj.offsetParent){
			left+=ParentObj.offsetLeft;
		}
		mousePosition.x=event.clientX-left+document.body.scrollLeft;
		ParentObj=obj;
		top=obj.offsetTop;
		while(ParentObj=ParentObj.offsetParent){
			top+=ParentObj.offsetTop;
		}
		mousePosition.y=event.clientY-top+document.body.scrollTop;
		return mousePosition;
	},

	// event decoration
	decorateEvent: function(e) {
		this.baseDecorateEvent(e);
		e.rowIndex = -1;
		e.cellX = this.getCellX(e);
		return true;
	},
	
	// event helpers
	getCellX: function(e) {
		var x = e.layerX;
		if(dojo.isMoz) {
			var n = unieap.grid.ascendDom(e.target, unieap.grid.makeNotTagName("th"));
			x -= (n && n.offsetLeft) || 0;
			//x -= getProp(ascendDom(e.target, mkNotTagName("td")), "offsetLeft") || 0;
		}
		var n = unieap.grid.ascendDom(e.target, function() {
			if(!n || n == e.cellNode) {
				return false;
			}
			// Mozilla 1.8 (FF 1.5) has a bug that makes offsetLeft = -parent border width
			// when parent has border, overflow: hidden, and is positioned
			// handle this problem here ... not a general solution!
			x += (n.offsetLeft < 0 ? 0 : n.offsetLeft);
			return true;
		});
		return x;
	},
	
	// event handlers
	// resizing
	prepareLeftResize: function(e) {
		var i = unieap.grid.getTdIndex(e.cellNode);
		e.cellNode = (i ? e.cellNode.parentNode.cells[i-1] : null);
		e.cellIndex = (e.cellNode ? this.getCellNodeIndex(e.cellNode) : -1);
		return Boolean(e.cellNode);
	},
	canResize: function(e) {
		if(!e.cellNode || e.cellNode.colSpan > 1 || e.cell.noresize) {
			return false;
		}
		var layout = this.view.grid.managers.get("LayoutManager");
		var cell = layout.getCell(e.cellIndex);
//		return !cell.noresize && !cell.isFlex();
	
		return !cell.noresize;
	},
	overRightResizeArea: function(e) {
		if (dojo.isFF) {
			return e.cellNode && (e.cellX >= e.cellNode.offsetWidth - this.overResizeWidth);
		}		
		else if (e.cellNode) {
			var node = this.view.scrollboxNode,
				scrollLeft = 0;
			while(node){
				scrollLeft+=node.scrollLeft;
				node=node.offsetParent;
			}
			this.cellX = this.getMousePosition(e, e.cellNode).x + scrollLeft;
			return e.cellNode && (this.cellX >= e.cellNode.offsetWidth - this.overResizeWidth);
		} else {
			return false;
		}
	},
	domousemove: function(e) {
		var c = this.overRightResizeArea(e) ? 'e-resize'  : 'default';
	
		if(c && !this.canResize(e)) {
			//c = 'not-allowed';
			c = "default";
		}

		e.sourceView.headerNode.style.cursor = c || ''; //'default';
	},
	domousedown: function(e) {
		if(!unieap.grid.drag.dragging) {
			if(this.overRightResizeArea(e)  && this.canResize(e)) {
				this.beginColumnResize(e);
			}
			//else{
			//	this.beginMoveColumn(e);
			//}
		}
	},
	domouseup: function(e) {
		this.resizeHelper && this.resizeHelper.end();
	},
	
	domouseover: function(e) {
		this.view.onMouseOverHeader(e);
	},
	domouseout: function(e) {
		this.view.onMouseOutHeader(e);
	},
	
	doclick: function(e) {
		if (new Date().getTime() < this.bogusClickTime) {
			dojo.stopEvent(e);
			return true;
		}
	},
	getResizeHelper: function() {
		if (!this.resizeHelper) {
			this.resizeHelper = new unieap.grid.resizeHelper(this.view);
		}
		return this.resizeHelper;
	},
	// column resizing
	beginColumnResize: function(e) {
		dojo.stopEvent(e);
		var spanners = [], nodes = this.tableMap.findOverlappingNodes(e.cellNode);
		for(var i=0, cell; (cell=nodes[i]); i++) {
			spanners.push({ node: cell, index: this.getCellNodeIndex(cell), width: cell.offsetWidth });
		}
		var drag = {
			view: e.sourceView,
			node: e.cellNode,
			index: e.cellIndex,
			w: e.cellNode.clientWidth,
			spanners: spanners
		};
		this.oldWidth = e.cellNode.offsetWidth;
		if (dojo.isFF) {
			this.getResizeHelper().begin(e.cellX + e.cellNode.offsetLeft 
				+ this.view.domNode.offsetLeft - this.view.scrollboxNode.scrollLeft);
		} else {
			this.getResizeHelper().begin(this.cellX + e.cellNode.offsetLeft 
				+ this.view.domNode.offsetLeft - this.view.scrollboxNode.scrollLeft);
		}
		unieap.grid.drag.start(e.cellNode, 
			dojo.hitch(this, 'doResizeColumn', drag),  //drag
			dojo.hitch(this, 'endResizeColumn', drag), //end
			dojo.hitch(this, 'domouseup'), //release
			e
			);
	},
	doResizeColumn: function(inDrag, inEvent) {
		var w = inDrag.w + inEvent.deltaX,view=inDrag.view,grid=view.grid;
		var offsetParent = inEvent.target.parentNode.offsetParent;
		while(offsetParent){
			if(dojo.hasClass(offsetParent,"u-grid")){
				break;
			}else{
				offsetParent = offsetParent.offsetParent;
			}
		}
		
		if(null == offsetParent || inDrag.view.grid.id != offsetParent.id){
			return;
		}
		if(w >= this.minColWidth) {
			this.getResizeHelper().resize(inEvent.deltaX);
			this.rawWidth = w;
		}
		//放置锁定行拖到grid的边界外
		if(view.noscroll){
			var hasRowBar=grid.managers.get("ViewManager").hasRowBar(),
				gridWidth=grid.domNode.offsetWidth,
				queryRs=dojo.query(".u-grid-header",grid.header),
				fixeNode;
			//判断是否有rowbar,有则减去rowbar的宽度
			if(hasRowBar){
				var rowBarNode=queryRs[0];
				fixedNode=queryRs[1];
				gridWidth=gridWidth-rowBarNode.offsetWidth;
			}else{
				fixedNode=queryRs[0];
			}
			//减去当前单元格之前的单元格的宽度
			gridWidth=gridWidth-this._getFixedNodeWidth(inDrag.node,fixedNode);
			this.rawWidth>=gridWidth&&(this.rawWidth=gridWidth);
		}
	},
	
	_getFixedNodeWidth:function(cellNode,fixedNode){
		var rs=dojo.query(".u-grid-cell",fixedNode),width=0;
		for(var i=0,l=rs.length;i<l;i++){
			if(rs[i]===cellNode) break;
			width+=(rs[i].offsetWidth+1);
		}
		return width;
	},
	
	endResizeColumn: function(inDrag) {
		this.getResizeHelper().end();
		this.bogusClickTime = new Date().getTime() + 30;
		if (this.rawWidth > this.minColWidth && this.rawWidth != this.oldWidth) {
			var cellIndex = this.getCellNodeIndex(inDrag.node);
			var layout = this.view.grid.managers.get("LayoutManager"); 
			var cell = cellIndex >= 0 ? layout.getCell(cellIndex) : null;
			cell && setTimeout(dojo.hitch(inDrag.view, "updateCellWidth", cell,this.rawWidth), 50);
		}
	}
	
});

dojo.declare("unieap.grid.tableMap", null, {
	// summary:
	//	Maps an html table into a structure parsable for information about cell row and col spanning.
	//	Used by headerBuilder
	constructor: function(inRows) {
		this.mapRows(inRows);
	},
	map: null,
	// map table topography
	mapRows: function(inRows) {
		// # of rows
		var rowCount = inRows.length;
		if(!rowCount) {
			return;
		}
		// map which columns and rows fill which cells
		this.map = [ ];
		for(var j=0; (row=inRows[j]); j++) {
			this.map[j] = [];
		}
		for(var j=0, row; (row=inRows[j]); j++) {
			for(var i=0, x=0, cell, colSpan, rowSpan; (cell=row[i]); i++) {
				while (this.map[j][x]) {x++};
				this.map[j][x] = { c: i, r: j };
				rowSpan = cell.rowSpan || 1;
				colSpan = cell.colSpan || 1;
				for(var y=0; y<rowSpan; y++) {
					for(var s=0; s<colSpan; s++) {
						if(this.map[j+y] && this.map[j+y][x+s]){//多表头时如果在fix的cell中有rowSpan标签会报错
							this.map[j+y][x+s] = this.map[j][x];
						}
					}
				}
				x += colSpan;
			}
		}
	},
	// find node's map coords by it's structure coords
	getMapCoords: function(inRow, inCol) {
		for(var j=0, row; (row=this.map[j]); j++) {
			for(var i=0, cell; (cell=row[i]); i++) {
				if(cell.c==inCol && cell.r == inRow) {
					return { j: j, i: i };
				}
			}
		}
		return { j: -1, i: -1 };
	},
	// find a node in inNode's table with the given structure coords
	getNode: function(inTable, inRow, inCol) {
		var row = inTable && inTable.rows[inRow];
		return row && row.cells[inCol];
	},
	_findOverlappingNodes: function(inTable, inRow, inCol) {
		var nodes = [];
		var m = this.getMapCoords(inRow, inCol);
		var row = this.map[m.j];
		for(var j=0, row; (row=this.map[j]); j++) {
			if(j == m.j || !row[m.i]) { continue; }
			with(row[m.i]) {
				var n = this.getNode(inTable, r, c);
				if(n) { nodes.push(n); }
			}
		}
		return nodes;
	},
	findOverlappingNodes: function(inNode) {
		return this._findOverlappingNodes(unieap.grid.findTable(inNode), unieap.grid.getTrIndex(inNode.parentNode), unieap.grid.getTdIndex(inNode));
	}
});

//resize helper
dojo.declare("unieap.grid.resizeHelper", null, {
	view: null,
	helperNode: null,
	positionX: 5,
	
	constructor: function(inView) {
		this.view = inView;
		this.helperNode = dojo.create("div");
		dojo.addClass(this.helperNode,"u-grid-resize-proxy");
		dojo.style(this.helperNode, "display", "none");
	},
	
	begin: function(inPositionX) {
		this.positionX = inPositionX;
		dojo.place(this.helperNode,this.view.grid.domNode);
		dojo.style(this.helperNode, "display", "block");
		dojo.style(this.helperNode, "left", this.positionX + "px");
	},
	
	resize: function(deltaX) {
		dojo.style(this.helperNode, "left", (this.positionX + deltaX) + "px");
	},
	
	end: function() {
		dojo.style(this.helperNode, "display", "none");
		dojo.style(this.helperNode, "left", "5px");
	}
	
});

dojo.provide('unieap.grid.manager.RowManager');
dojo.require('unieap.grid.view.builder');

dojo.declare("unieap.grid.manager.RowManager", null, {
	/**
	 * @declaredClass:
	 * 		unieap.grid.manager.RowManager
	 * @summary:
	 * 		行控制器
	 * @description:
	 * 		行控制器，可配置每页面渲染的行数、表格缓存的总行数及每行的高度。
	 * 		默认状态下，表格行高为23px，每个页面渲染25行数据，共缓存75行（三个页面）。
	 * 		用户可通过设置相应的属性值，根据业务需求优化表格的渲染速度。
	 * 		行控制器还提供：
	 * 			取得表格的“当前行”行号（注意，当前行一般为鼠标最后点击的行，而不是选中行）的方法:getCurrentRowIndex；
	 * 			取得当前页总行数方法:getRowCount；
	 * 			每行渲染后回调事件:onAfterRenderRow。
	 */
	
	ui: {
		rowsPerPage:true,
		keepRows:true,
		defaultRowHeight:true,
		defaultHeaderHeight:true,
        defaultMulTitleHeight:true,
		getRowCount:true,
		updateCurrnetRow:true,
		updateCurrentRow:true,
		getCurrentRowIndex:true,
		mouseEffect:true,
		setCurrentRow:true,
		hasLockedRow:true,
		getLockedRowHeight:true,
		events: {
			onAfterRenderRow:true,
			onUpdateCurrentRow:true
		}
	},
	
	/**
	 * @summary:
	 * 		设置控件每次渲染的行数，设置大的时候会导致grid渲染的性能问题，谨慎使用
	 * @type:
	 * 		{number}
	 * @default:
	 * 		25
	 */
	rowsPerPage: 25,
	
	/**
	 * @summary:
	 * 		缓存总行数
	 * @type:
	 * 		{number}
	 * @default:
	 * 		75
	 */
	keepRows: 75,
	
	/**
	 * @summary:
	 * 		每行的默认高度
	 * @type:
	 * 		{number}
	 * @default:
	 * 		23
	 * @example:
	 *| <div id="grid" id="grid" dojoType="unieap.grid.Grid" width="80%" height="250px" binding="{store:'empDataStore'}" rows="{defaultRowHeight:40}" 
     *|		views="{rowBar:true}">  
     *|  ......   ......   ......  ......
	 *| </div> 
	 */
	defaultRowHeight: 28,  //grid-row每行的默认高度
	
	/**
	 * @summary:
	 * 		表头的默认高度
	 * @type:
	 * 		{number}
	 * @default:
	 * 		23
	 * @example:
	 *|  <div dojoType="unieap.grid.Grid" rows="{defaultHeaderHeight:30}"></div>
	 */
	defaultHeaderHeight : 29,

    /**
     * @summary:
     * 		多表头的默认高度
     * @type:
     * 		{number}
     * @default:
     * 		27
     */
	defaultMulTitleHeight : 22,
	/**
	 * @summary:
	 * 		设置鼠标滑过控件中的一行时是否给该行加上背景色
	 * @type:
	 * 		{boolean}
	 * @default:
	 * 		true
	 * @example:
	 *|<div dojoType="unieap.grid.Grid" rows="{mouseEffect:false}"></div>
	 */
	mouseEffect:true,
	
	overRow: -2,
	currentRowIndex: -1,
	
	//已高亮的行号
	highlightRowIndexs: [],
	
	managerRowBarWidth:null,
	
	constructor: function(param) {
		dojo.mixin(this, param);

	},
	
	forEachView: function(inFunc) {
		var vm = this.grid.managers.get("ViewManager");
		vm.forEach(dojo.hitch(this, inFunc));
	},
	
	renderRow: function(inRowIndex, inNodes) {
		this._renderRow(inRowIndex, inNodes);
	},
	
	_renderRow : function(inRowIndex,inNodes) {
		var vm = this.grid.managers.get("ViewManager"),
			layout=this.grid.managers.get("LayoutManager"),
			rowNodes=[],
			rowData=this.grid.getBinding().getRow(inRowIndex);
		for(var i=0, n, v, rowNode; (v=vm.views[i])&&(n=inNodes[i]); i++) {
			rowNode = this.createRowNode(inRowIndex, v);
			if (dojo.isIE && dojo.isIE < 7) {
				n.appendChild(rowNode);
				v.renderRow(rowNode, inRowIndex);
			
			} else {
				v.renderRow(rowNode, inRowIndex);
				n.appendChild(rowNode);
			}
			
			this.styleRowNode(inRowIndex, rowNode, v);
			
			var row = new unieap.ds.Row(this.grid.getBinding().getRowSet(),rowData);
			//!v.isRowBar&&this.styleCustomRowNode(rowNode,rowData[inRowIndex]&&rowData[inRowIndex]["_style"],layout);
			!v.isRowBar&&this.styleCustomRowNode(rowNode,rowData&&row.getIdentifier("_style"),layout);
			rowNodes.push(rowNode);
		}
		this.updateStyles(inRowIndex);
		unieap.fireEvent4Widget(this,this.grid,this.onAfterRenderRow,[inRowIndex]);
	},
	
	createRowNode: function(inRowIndex, inView) {
		var node = document.createElement("div");
		node.className = inView.rowClassTag;
		node.setAttribute(unieap.grid.rowIndexTag,inRowIndex);
		node[unieap.grid.rowIndexTag] = inRowIndex;
		inView.rowNodes[inRowIndex] = node;
		return node;
	},
	
	rowRemoved: function(inRowIndex) {
		this.forEachView(function(inView) {
			var node = inView.rowNodes[inRowIndex];
			this.onRowRemoved(node,inRowIndex);
			delete inView.rowNodes[inRowIndex];
		});
	},
	
	setOverRow: function(inRowIndex) {
		//如果设置了rows="{mouseEffect:false}"当鼠标滑过Grid中的某一行时,不给该行增加背景样式
		var highlight=this.mouseEffect;
		if(!highlight) return;
		var last = this.overRow;
		this.overRow = inRowIndex;
		if((last!=this.overRow)&&(last >=0)){
			this.updateStyles(last);
		}
		this.updateStyles(this.overRow);
	},
	isOver: function(inRowIndex) {
        return (this.overRow == inRowIndex);
    },
	

	updateCurrnetRow: function(inRowIndex) {
		this.updateCurrentRow(inRowIndex);
	},
	
	/**
	 * @summary:
	 * 		更新当前行
	 * @param:
	 * 		{number} inRowIndex 行索引号
	 */
	updateCurrentRow:function(inRowIndex){
		if (inRowIndex>=0) {
			var rowIndex = this.currentRowIndex;
			this.currentRowIndex = inRowIndex;
			this.updateStyles(rowIndex);
			this.updateStyles(this.currentRowIndex);
			unieap.fireEvent4Widget(this,this.grid,this.onUpdateCurrentRow,[inRowIndex]);
		}
	},
	
	//是否需要将当前行加入 highlightRowIndexs ，
	//防止用户不停点击同一行而照成 highlightRowIndexs 有大量冗余
	_isThisRowNeedHighlight: function(inRowIndex){
		var len = this.highlightRowIndexs.length;
		if(len>0){
			for(var i=0; i<len; i++){
				if(this.highlightRowIndexs[i]==inRowIndex){
					return false;
				}
				return true;
			}
		}else{
			return true;
		}
	},	
	
	//当前行是不是在 highlightRowIndexs 中
	_isThisRowHighlighted: function(inRowIndex){
		!this.highlightRowIndexs && (this.highlightRowIndexs = []);
		var l = this.highlightRowIndexs.length;
		for(var j=0;j<l;j++){
			if(inRowIndex==this.highlightRowIndexs[j])
				return true;
			}
		return false;
	},
	
	//重置所有高亮行
	_clearAllHighlight: function(){
		var highlightRowIndexs = this.highlightRowIndexs;
		this.highlightRowIndexs = [];
		var len = highlightRowIndexs.length;
		if(len>0){
			this.forEachView(function(inView) {
				for(var i=0;i<len;i++){
				var rowNode = inView.getRowNode(highlightRowIndexs[i]);
					if (rowNode) {
						this.styleRowNode(highlightRowIndexs[i], rowNode, inView);
					}
				}
			});
		}
	},
	
	/**
	 * @summary:
	 * 		更新高亮行信息
	 * @param:
	 * 		{number} inRowIndex 行索引号
	 * 		{boolean} reset 是否重置高亮行信息
	 */
	updateHighlightRow: function(inRowIndex,reset,event){
		!this.highlightRowIndexs && (this.highlightRowIndexs = []);
		if(reset){ 
			this._clearAllHighlight();
		}
		//2018.7.9访问过后颜色改变  石向锋
        event = event || window.event;
        if(event) {
            if (event.target.tagName == "A") {
                $(event.target).addClass("color_v");
            }
        }
		if(this._isThisRowNeedHighlight(inRowIndex))
			this.highlightRowIndexs.push(inRowIndex);
	},
	
	// styles
	updateStyles: function(inRowIndex){
		this.forEachView(function(inView) {
			var rowNode = inView.getRowNode(inRowIndex);
			if (rowNode) {
				this.styleRowNode(inRowIndex, rowNode, inView);
			}
		});
	},
	prepareStylingRow: function(inRowIndex, inRowNode, inView) {
		return {
			index: inRowIndex, 
			node: inRowNode,
			odd: Boolean(inRowIndex&1),
			over: this.isOver(inRowIndex),
//			customStyles: "",
			highlight: this._isThisRowHighlighted(inRowIndex),
			customClasses: inView.isRowBar? "u-grid-rowbar":"u-grid-row"
		};
	},
	styleRowNode: function(inRowIndex, inRowNode, inView,style) {
		var row = this.prepareStylingRow(inRowIndex, inRowNode, inView);
		this.onStyleRow(row);
		this.applyStyles(row);
	},
	
	//当拖动表格滚动条渲染数据时,重新应用样式
	styleCustomRowNode:function(rowNode,styleObj,layoutManager){
		if(!styleObj) return;
		var rowStyle=styleObj["row"]&&dojo.fromJson(styleObj["row"]),
			cellStyle=styleObj["cell"],
			priority=styleObj["priority"],
			//多标题情况下seq是不存在的，注意判断
			seq=layoutManager.customStructure;//解决个性化列次序发生变化后渲染问题
		if(priority=="row"){
			if(cellStyle){
				for(var item in cellStyle){
					var index = item,
					currentIndex=seq?dojo.indexOf(seq.seq,index):index;
					if(currentIndex==-1) return;
					var style = dojo.fromJson(cellStyle[item]);
					var node=dojo.query("[idx="+currentIndex+"]",rowNode);
					node&&node[0]&&dojo.style(node[0],style);				
				}					
			}			 
			dojo.query('.u-grid-text',rowNode).forEach(function(node){
				dojo.style(node,rowStyle);
				dojo.isIE<8&&(node.style.cssText=node.style.cssText);
			});
			dojo.query('.u-grid-text2',rowNode).forEach(function(node2){
				dojo.style(node2,rowStyle);
				dojo.isIE<8&&(node2.style.cssText=node2.style.cssText);
			});
			
		}else if(priority=="cell"){
			rowStyle&&dojo.query('.u-grid-text',rowNode).forEach(function(node){
				dojo.style(node,rowStyle);
				dojo.isIE<8&&(node.style.cssText=node.style.cssText);
			});
			dojo.query('.u-grid-text2',rowNode).forEach(function(node2){
				dojo.style(node2,rowStyle);
				dojo.isIE<8&&(node2.style.cssText=node2.style.cssText);
			});
			for(var item in cellStyle){
				var index = item,
				currentIndex=seq?dojo.indexOf(seq.seq,index):index;
				if(currentIndex==-1) return;
				var style = dojo.fromJson(cellStyle[item]);
				var node=dojo.query("[idx="+currentIndex+"]",rowNode);
				node&&node[0]&&dojo.style(node[0],style);				
			}
		}
	},
	
	
	applyStyles: function(inRow) {
		with(inRow){
			node.className = customClasses;
			var h = node.style.height;
//			unieap.grid.setStyleText(node, customStyles + ';' + (node._style||''));
			node.style.height = h;
		}
	},
	onStyleRow: function(inRow) {
		with(inRow){
			customClasses += (odd?" u-grid-row-odd":"")  
			+ (over?" u-grid-row-over":"")
			+((index==this.currentRowIndex)?" u-grid-row-current":"")
			+(highlight?" u-grid-row-highlight":"");
		}
	},
	onRowRemoved : function(node,inRowIndex){
		
	},
	//user interface------------------------------------------------------
	/**
	 * @summary:
	 * 		取得表格当前页总行数
	 * @return:
	 * 		{number}
	 */
	getRowCount: function() {
		//nfc
		return this.grid.getBinding().getRowCount();
	},
	
	/**
	 * @summary:
	 * 		设置当前行
	 * @param：
	 * 	{number} inRowIndex 行号
	 */
	setCurrentRow: function(inRowIndex) {
		if (isNaN(inRowIndex)) return;
		this.currentRowIndex = inRowIndex;
		this.grid.managers.get("ViewManager").refreshPage();
	},
	
	/**
	 * @summary:
	 * 		取得当前行号
	 * @return:
	 * 		{number}
	 * @example:
	 *|	grid.getRowManager().getCurrentRowIndex(); 
	 */
	getCurrentRowIndex: function() {
		var gridBinding = this.grid.getBinding();
		var rowCount = (gridBinding==undefined || gridBinding==null)?-2:gridBinding.getDataStore().getRowSet().getRowCount();
		if(rowCount<=this.currentRowIndex){
			this.currentRowIndex = -1;
		}
		return this.currentRowIndex;
	},
	
	/**
	 * @summary:
	 * 		判断表格是否有锁定行
	 * @return:
	 * 		{boolean}
	 */
	hasLockedRow: function() {
		var data = this.grid.getBinding().getLockedRowData();
		if (!data||data.length==0) {
			return false;
		} else {
			return true;
		}
	},
	
	/**
	 * @summary:
	 * 		取得锁定行高度
	 * @return:
	 * 		{number}
	 */
	getLockedRowHeight: function() {
		if (this.hasLockedRow()) {
			var data = this.grid.getBinding().getLockedRowData();
			return data.length*this.defaultRowHeight;
		} else {
			return 0;
		}
	},
	
	/**
	 * @summary:
	 * 		行渲染后事件
	 * @param:
	 * 		{number} inRowIndex
	 * @example:
	 *| <div id="grid" id="grid" dojoType="unieap.grid.Grid"
	 *|  rows="{onAfterRenderRow:test}" width="80%" height="180px" binding="{store:'empDataStore'}" >
   	 *| ......  ......  ......
	 *| </div>
	 *| <script>
	 *|		function test(rowIndex){
     *|		//令当前行的字体变成红色
     *|		grid.getViewManager().setRowStyles(rowIndex,{'color':'red'});
	 *|		}
 	 *| </script>
	 */
	onAfterRenderRow: function(inRowIndex) {
		
	},
	
	/**
	 * @summary:
	 * 		更新当前行回调方法
	 * @example:
	 *|<div dojoType="unieap.grid.Grid" id="grid" width="80%" height="250px" binding="{store:'empDataStore'}" views="{rowNumber:true}" rows="{onUpdateCurrentRow:test}">
     *|		<header>
     *|		   <cell label="姓名" name="NAME"></cell>
     *|		   <cell label="部门" name="attr_empno"></cell>
     *|		   <cell label="职位" name="attr_job"></cell>
     *|		   <cell label="工资" name="attr_sal"></cell>
     *|		</header>
	 *|</div>
	 *|<script>
	 *|		function test(rowIndex){
     *|		//令当前行的字体变成红色
     *|		grid.getViewManager().setRowStyles(rowIndex,{'color':'red'});
	 *|		}
 	 *|</script>
 	 * @img:
 	 * 		images/grid/onupdatecurrentrow.png
	 */
	onUpdateCurrentRow: function(inRowIndex) {
		
	}
});
dojo.provide("unieap.grid.manager.EditPatch");

dojo.declare("unieap.grid.manager.EditPatch", null, {
	constructor: function(inGrid) {
		this.grid = inGrid;
	},
	doPatch: function(inComponent) {
		dojo.mixin(inComponent, this.patches[inComponent.declaredClass]);
		var detailManager= this.grid.managers.managers['DetailManager'];
	    if(detailManager){
			this.grid.connect(this.grid, 'dispatchContentEvent', dojo.hitch(detailManager, detailManager.dispatchContentEvent));		
		}
	},
	
	patches: {
		/*
		 * principle:
		 * 		尽量只修改自身及表格的基本模块，以免多个可选模块之间“交叉感染”。
		 * 
		 * list:
		 * 		unieap.grid.Grid
		 * 		unieap.grid.manager.EditManager
		 * 		unieap.grid.manager.ViewManager
		 * 		unieap.grid.manager.RowManager
		 */
		
		"unieap.grid.manager.EditManager": {
			/*
			 * 变量说明
			 * 
			 * this.currentRowIndex: 当前编辑行的行号，非编辑状态下值为-1。
			 * 
			 * this.currentRowIndex: 当前编辑的cell；行编辑时为默认焦点所在cell，为null时焦点设为第一个配有编辑器的cell。
			 * 
			 * this.editCells: 已打开编辑器的cell数组，在apply时会被关闭，不必再次检查一遍。
			 * 
			 * this.autoApply: 是否阻止编辑器失去焦点自动apply。
			 */
			dispatchEvent: function(m, e) {
			
				if (this.getType()==this.types.readonly) {
					return;
				} if (!e.cellNode) {
					//console.log("edit: cellNode not found!");
					return;
				} else if (m in this) {
					this[m](e);
				}
			},
			//是否支持快捷键操作
			shiftCell : true,
			doclick: function(e) {
				if(this._isExistEditor() == false){
                    return false;
                }
				if (this.isSingleClickEdit()) {
					//单元格编辑
					var cell=e.cell;
					if(this.getType()==this.types.cellEdit&&!this.isEditingCell(e.rowIndex,cell)){
						this.setEdit(e.rowIndex, cell.index);
					}else if(this.getType()==this.types.rowEdit&&this.currentRowIndex!=e.rowIndex){
						this.setEdit(e.rowIndex, cell.index);
					}
				}
			},
			dodblclick: function(e) {
				if(this._isExistEditor() == false){
                    return false;
                }
				if (!this.isSingleClickEdit()) {
					//start edit
					this.setEdit(e.rowIndex, e.cell.index);
				}
			},
			
			//wnc add
			//chenxujie 2011/3/1 check 当不存在可编辑按钮时返回  
			_isExistEditor:function(){
                var grid = this.grid;
                var result = false;
                var cells = grid.getManager("LayoutManager").getCells();
                for(var i=0; i<cells.length; i++){
                    if(cells[i].editor){
                        result = true;
                        break;
                    }
                }
                return result;
            },
			
			/**
			 * @summary:
			 * 		打开编辑器，焦点设置在inCell对应得编辑器上，如果行编辑时inCell不可编辑则编辑时焦点设置在第一个单元格上。
			 * @param:
			 * 		{number} inRowIndex
			 * 		编辑的行号
			 * @param:
			 * 		{number|string} inCell
			 * 		编辑的列序号、或名称
			 * @example:
			 * | grid.setEdit(2,"salary");
			 * @example:
			 * | <cell width="150px" label="职位" editor="{editorClass:'unieap.form.TextBox',editorProps:{id:'geteditor',textAlign:'left',onBlur:blur}}" name="attr_job" headerStyles="text-align: left;"></cell>
			 * | function blur(evt){
			 * |   var value = unieap.byId("geteditor").getValue();
			 * |   var editManaer = grid.getManager("EditManager");
			 * |   //如果根据条件跳转到指定的行
			 * |   var rowIndex = parseInt(value,10);
		     * |   editManaer.setEdit(rowIndex,'attr_job');
			 * | }
			 * @example:
			 * | <cell width="150px" label="职位" editor="{editorClass:'unieap.form.TextBox',editorProps:{id:'geteditor',textAlign:'left',onBlur:blur}}" name="attr_job" headerStyles="text-align: left;"></cell>
			 * | function blur(evt){
			 * |   var value = unieap.byId("geteditor").getValue();
			 * |   var editManaer = grid.getManager("EditManager");
			 * |   //允许跳转，包括快捷键及点击其他地方让编辑器消失
			 * |   editManager.shift();
			 * |   //如果满足某条件不进行跳转
			 * |   if(value=="aaa"){
			 * |      //不允许允许跳转，包括快捷键及点击其他地方让编辑器消失
			 * |      editManager.unshift(this);
			 * |   }
			 * | }
			 */
			setEdit: function(/*number*/inRowIndex, /*number|name*/inCell,hasOnBerofeEdit) {
				//如果存在校验不通过的editor，则能进行其他的编辑操作。该编辑器始终处于编辑状态而且置焦
				if(!this.shiftCell) return;
				
				if (inRowIndex >= this.grid.getManager("RowManager").getRowCount() || inRowIndex < 0) {
					this.apply();
					return;
				}
				
				//Grid失去焦点
				unieap.blurWidget();
				//FF在编辑器在onblur事件回调中执行setEdit时，阻止快捷键操作（回车换行等）
				this.accesskeyHandle = false;
				//IE下停止Enter2Tab后的快捷键操作，以便用户在blur或enter事件中调用setEdit方法不再执行系统本身的快捷键操作
				clearTimeout(this.tabHandler);
				
				//确保编辑行可见
				var views = this.grid.managers.get("ViewManager").visualizeRow(inRowIndex);
				//获取单元格对象
				var cell = this.grid.managers.get("LayoutManager").getCell(inCell);
				
				//grid的EditManager中的onBeforeEdit方法
				if (!unieap.fireEvent4Widget(this,this.grid,this.onBeforeEdit,[inRowIndex, cell])) return;
				//确保之前的编辑关闭
				this.apply();
				this.start(inRowIndex, cell,hasOnBerofeEdit);
				//恢复快捷键操作
				setTimeout(dojo.hitch(this,function(){
					this.accesskeyHandle = true;
				}),0);
			},
			
			//是否正在编辑
			isEditing: function() {
				return this.currentRowIndex >= 0;
			},
			
			//是否在单元格编辑
			isEditingCell:function(inRowIndex,inCell){
				if(this.currentRowIndex==inRowIndex){
					if(inCell.edit){
						var editor = inCell.edit.getEditor();
						if(editor){
							return editor.domNode.offsetHeight > 0;
						}
					}
				}
				return false;
			},
			/**
			 * @summary:
			 * 	 获取当前编辑的行号
			 * @return:
			 * 	{number} 如果不处在编辑状态下，则返回-1
			 */
			getCurrentRowIndex:function(){
				return this.currentRowIndex;
			},
		
		    //单元格绑定datastore
			_editorBind : function(inCell){
				var editor = this._getEnabledEditor(this.currentRowIndex,inCell);
				if(!editor) return;
				//绑定数据
				
				this.editCells.push(inCell);

			},
			
			//获得可用的编辑器
			_getEnabledEditor : function(inRowIndex,inCell,hasOnBerofeEdit){
				//inCell上配置的onBeforeEdit只应该执行一次!
				if (!inCell.enable || !hasOnBerofeEdit && inCell.onBeforeEdit && !unieap.fireEvent4Widget(inCell,this.grid,inCell.onBeforeEdit,[inRowIndex,inCell])) return null;
				//获取当前编辑器对象
				var editor = inCell.getEditor();
			
				if (!editor || editor.disabled || !editor.binding) return null;
				//获得编辑器时,不显示校验的红圈,解决Bug U_EAP00011408
				editor.getValidator&&editor.getValidator().handleError(true);
				return editor;
			},
			
			//开始进入编辑
			start: function(inRowIndex,inCell,hasOnBerofeEdit) {
				this.editCells = [];
				if (this.currentRowIndex == inRowIndex && this.getType()==this.types.rowEdit) {
					return;
				}
//				if(this.getType()==this.types.cellEdit){
//					if(!this._getEnabledEditor(inRowIndex,inCell)) return;
//				}
				//给所有editor绑定Row对象
				this.bindRow = this.bindRow || new unieap.ds.Row(this.grid.getBinding().getRowSet());
				this.bindRow.data = this.grid.getBinding().getRow(inRowIndex);
				this.bindRow.index = inRowIndex;
				this.currentRowIndex = inRowIndex;	
				
				//绑定,同时操作this.editCells
//				layout.forEachCell(dojo.hitch(this,"_editorBind"));
				//指定焦点单元格
				var focusCell = null;
				//单元格编辑
				if(this.getType()==this.types.cellEdit){
//					this._setCellEditing(inCell) && this.editCells.push(inCell);
					if(this._setCellEditing(inCell,hasOnBerofeEdit)){
						this.editCells.push(inCell);
					}else{
						return;
					}
					focusCell = inCell;
					var layout = this.grid.managers.get("LayoutManager");
					layout.forEachCell(dojo.hitch(this, function(cell) {
						if (cell.getEditor()) {
							cell.getEditor().getBinding().bind(this.bindRow);
						}
					}));
				}
				//行编辑
				else if (this.getType()==this.types.rowEdit){
					var layout = this.grid.managers.get("LayoutManager");
					layout.forEachCell(dojo.hitch(this, function(cell) {
						this._setCellEditing(cell) && this.editCells.push(cell);
					}));
					var flag_focus0 = true;
					for(var i=0,cell;cell = this.editCells[i];i++){
						if(inCell == cell) {
							focusCell = cell;
							flag_focus0 = false;
							break;
						}
					}
					if(flag_focus0){
						focusCell = this.editCells[0];
					}
					//设置enter2tab跳转
					this._enter2Tab();

					//解决IE7下grid中的单选按钮组初始化不能被选中的问题
					//原理：IE7下由于dom没有被添加到Document流中，进行了数据绑定，导致初始化不能被选中
					//解决方法:把_editorBind方法中的数据绑定放到这里最后执行，保证dom被加入文档流再绑定数据。
					for(var i =0 ,cell;cell=this.editCells[i];i++){
						cell.getEditor().getBinding().bind(this.bindRow);
					}
				}
				
				//设置焦点
				this.focusEditor(focusCell);
				
			},
			//给单元格编辑器设置焦点
			focusEditor : function(focusCell){
				if(!focusCell) 
					return;
				this.focusCell = focusCell;
				//FF下设置焦点必须需要延时处理，否则会出现设置不上焦点的现象
				setTimeout(function(){
					focusCell.getEditor().focus();
				},0);
			},
			//设置某单元格编辑
			_setCellEditing: function(inCell,hasOnBerofeEdit) {
				var view = this.grid.managers.get("ViewManager").getViewByCell(inCell);
				if (view == null) return false;
				//锁定行点击会报错
				if(typeof(this.currentRowIndex) == 'undefined') return false;
				var rowNode = view.getRowNode(this.currentRowIndex);
				var cellNode = this.getCellNode(rowNode, inCell.index);
				var editor = this._getEnabledEditor(this.currentRowIndex, inCell,hasOnBerofeEdit);
				if (editor == null) return false;
				cellNode.innerHTML = "";
				cellNode.appendChild(editor.domNode);
				return true;
			},
//			_setCellEditing : function(inCell){
////				debugger;
//				var view = this.grid.managers.get("ViewManager").getViewByCell(inCell);
//				//获取当前DOM行对象
//				var rowNode = view.getRowNode(this.currentRowIndex);
//				var cellNode = this.getCellNode(rowNode, inCell.index);
//				cellNode.innerHTML = "";
//				cellNode.appendChild(this._getEnabledEditor(this.currentRowIndex,inCell).domNode);
////				unieap.debug(cellNode);
//			},
			//cell node
			getCellNodeIndex: function(inCellNode) {
				return inCellNode ? Number(inCellNode.getAttribute("idx")) : -1;
			},
			getCellNode: function(inRowNode, inCellIndex) {
				var table = inRowNode.firstChild;
				for(var i=0, row; row=unieap.grid.getTr(table, i); i++) {
					for(var j=0, cell; cell=row.cells[j]; j++) {
						if(this.getCellNodeIndex(cell) == inCellIndex) {
							return cell;
						}
					}
				}
			},
			
			gerNextEditorCell:function(rowIndex,direction,inCell){
				var layout = this.grid.managers.get("LayoutManager"),
					rowcount= this.grid.getManager("RowManager").getRowCount(),
					cells = layout.getCells(),
					focusCell = null,
					cursor=false;
				if(rowIndex>=rowcount) return;
				if(direction=="next"){
					for(var i=0,l= cells.length; i<l;i++){
						if(cells[i] == inCell){
							cursor=true;
							continue;
						}
						if (cursor&&this._getEnabledEditor(rowIndex,cells[i])) {
							focusCell = cells[i];
							return focusCell;
						}
					}
				}else if(direction=="forward"){
					for(var i=0,l= cells.length; i<l;i++){
						if(cells[i] == inCell){
							if (cells[i-1]&&this._getEnabledEditor(rowIndex,cells[i-1])) {
								focusCell = cells[i-1];
								return focusCell;
							}else if(cells[i-1]){
								return this.gerNextEditorCell(rowIndex,"forward",cells[i-1]);
							}else{
								return focusCell;
							}
						}
					}
				}else if(direction=="down"){
					for(var i=0,l= cells.length; i<l;i++){
						if (this._getEnabledEditor(rowIndex,cells[i])) {
							focusCell = cells[i];
							this.setEdit(rowIndex,focusCell.name,true);
							return;
						}
					}
					if(rowIndex<rowcount-1){
						return this.gerNextEditorCell(rowIndex+1,"down")
					}
				}else if(direction=="up"){
					for(var i=0,l= cells.length; i<l;i++){
						if (this._getEnabledEditor(rowIndex,cells[i])) {
							focusCell = cells[i];
							this.setEdit(rowIndex,focusCell.name,true);
							return true;
						}
					}
					if(rowIndex>0){
						return this.gerNextEditorCell(rowIndex-1,"up")
					}
				}else{
					for(var i=0,l= cells.length; i<l;i++){
						if (this._getEnabledEditor(rowIndex,cells[i])) {
							focusCell = cells[i];
							return focusCell;
						}
					}
				}
			},
			
			
			gerNextEditorCellWithRowBar:function(rowIndex,direction,inCell){
				var layout = this.grid.managers.get("LayoutManager"),
					rowcount= this.grid.getManager("RowManager").getRowCount(),
					cells = layout.getCells(),
					focusCell = null,
					cursor=false;
				if(rowIndex>=rowcount || rowIndex<0) return;
				if(direction=="next" && !inCell){
					for(var i=0,l= cells.length; i<l;i++){
						if(this._getEnabledEditor(rowIndex,cells[i])){
							this.setEdit(rowIndex,cells[i].index,true);
							focusCell = cells[i];
							return focusCell;
						}
					}
					if (!focusCell) {
						if(this.focusRowBarByIndex(rowIndex +1)){
							return true;
						}else{
							return this.gerNextEditorCellWithRowBar(rowIndex +1,"next");
						}
					}
				}
				else if(direction=="forward" && !inCell){
					if(this.focusRowBarByIndex(rowIndex)){
						return;
					}else{
						for(var i=0,l= cells.length; i<l;i++){
							if(this._getEnabledEditor(rowIndex,cells[i])){
								this.setEdit(rowIndex,cells[i].index,true);
								focusCell = cells[i];
								return focusCell;
							}
						}
						if (!focusCell) {
							return this.gerNextEditorCellWithRowBar(rowIndex-1,"forward");
						}
					}
				}
				else if(direction=="up" && !inCell){
					if(this.focusRowBarByIndex(rowIndex)){
						return true;
					}else if(rowIndex == 0){
						var widget = dojo.query("input", this.grid.headerNode)[0];
						if(widget){
							widget.focus();
							return true;
						}else{
							return false;
						}
					}else{
						return this.gerNextEditorCellWithRowBar(rowIndex-1,"up");
					}
				}
				else if(direction=="down" && !inCell){
					if(this.focusRowBarByIndex(rowIndex)){
						return;
					}else{
						return this.gerNextEditorCellWithRowBar(rowIndex+1,"down");
					}
				}
			},
			
			focusRowBarByIndex: function(index) {
				var viewName,
					viewManager = this.grid.managers.get("ViewManager"),
					selectionManager = this.grid.managers.managers["SelectionManager"],
					rowcount= this.grid.getManager("RowManager").getRowCount(),
					selection = this.grid.selection;
				if(selection&&selection.selectType!="none"&&index>-1&&index<rowcount&&!selectionManager.isCheckable(index)){
					for (var i = 0, v; v = viewManager.views[i]; i++) {
						if(v.isRowBar){
							viewName = v.id;
							var rowbar = dojo.query("tr",viewName);
							var checkBox = dojo.query("input", rowbar[index])[0];
							if(checkBox){
								viewManager.visualizeRow(index);
								checkBox.focus();
								return true;
							}
						}
					}
				}
				return false;
		    },
		    
		    
			
			//回车跳转和换行的快捷键处理
			//最后一个编辑器执行跳转（默认实现）
			//TODO： 允许用户自己定义回车跳转的编辑器
			//TODO： 如果是分组需要跳转到具体的数据行，而不是分组行而是下一行有效数据项（暂时不支持）
			onEditorTab : function(inCell, evt){
				var cells = this.editCells,
					cellIndex = 0;
				//查询是第几个编辑单元格
				for(var i=0,l= cells.length; i<l;i++){
					if(cells[i] == inCell){
						cellIndex = i;
						break;
					}
				}
				
				//ie和FF处理失去焦点的方式不一致
				//<input onkeydown='fn1()' onblur='fn2()'><input id='x'>
				//function fn1(){
				//	dojo.byId('x').focus();
				//  console.info('keydown');
				//}
				//function fn2(){
				//   console.info('blur')
				//}
				//在ie下输出的效果为 keydown blur
				//FF下输出的效果为  blur keydown
				
				//跳转到下一行
				if(!evt.shiftKey&&this.getType()==this.types.rowEdit && cellIndex==cells.length -1){
					var rowcount= this.grid.getManager("RowManager").getRowCount();
					if(this.currentRowIndex +1>=rowcount) return;
					//防止在onblur事件中调用setEdit方法，阻止后续的快捷键或编辑器消失处理继续执行，原因如下：					
					//在FF中onkeydown事件中触发blur事件，立即执行blur方法，然后继续执行keydown的后续处理
					//在IE中onkeydown事件中触发blur事件，等keydown处理完后，在执行blur方法
					this.accesskeyHandle = true;
					//先让Grid聚焦
					unieap.blurWidget();
					//防止FF 立即执行focus事件，执行clearTimeout快捷键操作失效问题
					if(this.accesskeyHandle==false){
						return;
					}
					dojo.stopEvent(evt);
					this.tabHandler= setTimeout(dojo.hitch(this,function(){
						//编辑下一行
						var selection = this.grid.selection;
						if(selection&&selection.selectType!="none"){
							if(!this.focusRowBarByIndex(this.currentRowIndex +1)){
								this.gerNextEditorCellWithRowBar(this.currentRowIndex +1,"next");
							}
						}else{
							this.gerNextEditorCell(this.currentRowIndex+1,"down");
						}
					}),0);
				}else if(evt.shiftKey&&this.getType()==this.types.rowEdit && cellIndex==0){
					var selection = this.grid.selection;
					if(selection&&selection.selectType!="none"){
						if(!this.focusRowBarByIndex(this.currentRowIndex) && this.currentRowIndex>0 ){
							this.gerNextEditorCellWithRowBar(this.currentRowIndex-1,"forward")
						}
						dojo.stopEvent(evt);
					}else{
						if(this.currentRowIndex>0){
							if(this.gerNextEditorCell(this.currentRowIndex-1,"up")){
								dojo.stopEvent(evt);
							}
						}
					}
				}else if (!evt.shiftKey&&this.getType() == this.types.cellEdit) {
					var focusCell = this.gerNextEditorCell(this.currentRowIndex,"next",inCell); 
					var rowcount= this.grid.getManager("RowManager").getRowCount();
					if(!focusCell&&this.currentRowIndex +1>=rowcount){
						return;
					}
					this.accesskeyHandle = true;
					//先让Grid聚焦
					unieap.blurWidget();
					//防止FF 立即执行focus事件，执行clearTimeout快捷键操作失效问题
					if(this.accesskeyHandle==false){
						return;
					}
					dojo.stopEvent(evt);
					this.tabHandler= setTimeout(dojo.hitch(this,function(){
						if (focusCell) {
							inCell.getEdit().applyEdit(this.currentRowIndex);
							this._setCellEditing(focusCell,true);
							this.focusEditor(focusCell);
						} else {
							//编辑下一行
							var selection = this.grid.selection;
							if(selection&&selection.selectType!="none"){
								if(!this.focusRowBarByIndex(this.currentRowIndex +1)){
									this.gerNextEditorCellWithRowBar(this.currentRowIndex+1,"next");
								}
							}else{
								inCell.getEdit().applyEdit(this.currentRowIndex);
								this.gerNextEditorCell(this.currentRowIndex+1,"down");
							}
						}
					}),0);
				}else if (evt.shiftKey&&this.getType() == this.types.cellEdit) {
					this.accesskeyHandle = true;
					//先让Grid聚焦
//					unieap.blurWidget();
					//防止FF 立即执行focus事件，执行clearTimeout快捷键操作失效问题
					if(this.accesskeyHandle==false){
						return;
					}
					var	selection = this.grid.selection;
					if(selection&&selection.selectType!="none"){
						unieap.blurWidget();
						dojo.stopEvent(evt);
						this.tabHandler= setTimeout(dojo.hitch(this,function(){
							var focusCell = this.gerNextEditorCell(this.currentRowIndex,"forward",inCell);
							if (focusCell) {
								inCell.getEdit().applyEdit(this.currentRowIndex);
								this._setCellEditing(focusCell,true);
								this.focusEditor(focusCell);
							} else {
								if(!this.focusRowBarByIndex(this.currentRowIndex)){
									this.gerNextEditorCellWithRowBar(this.currentRowIndex-1,"forward");
								}
							}
						}),0);
					}else{
						var focusCell = this.gerNextEditorCell(this.currentRowIndex,"forward",inCell);
						if(focusCell || this.currentRowIndex>0){
							unieap.blurWidget();
							dojo.stopEvent(evt);
							this.tabHandler= setTimeout(dojo.hitch(this,function(){
								if (focusCell) {
									inCell.getEdit().applyEdit(this.currentRowIndex);
									this.focusEditor(focusCell);
									this._setCellEditing(focusCell,true);
								}else{
									this.setEdit(this.currentRowIndex-1, inCell.name);
								}
							}),0);
						}
					}
					
				}
				
			},
			//焦点离开的验证判断，
			//如果校验不通过则不进行单元格编辑切换跳转，
			//并且该编辑器始终处于编辑和聚焦状态
			onEditorBlur : function(inCell, evt){
				//如果在onblur事件中已经调用了unshift操作，则不需要在进行验证操作
				var editor = inCell.getEditor();
				
				if(this._blockCell && this._blockCell!=inCell) return;
				if(this._blockCell ==inCell ){
					//阻止快捷键操作
					this.shiftCell = false;
					//先执行mousedown事件，然后再执行blur事件，
					//此时清除鼠标点击其他地方编辑器消失的处理
					clearTimeout(this.tabHandler);
					//设置焦点
					this.focusEditor(inCell);
				}
				else if(!this.focusShift && !editor.getValidator().validate()){
					if(!this._invalidatorCell || this._invalidatorCell == inCell){
						this._invalidatorCell = inCell;
						//阻止快捷键操作
						this.shiftCell = false;
						//先执行mousedown事件，然后再执行blur事件，
						//此时清除鼠标点击其他地方编辑器消失的处理
						clearTimeout(this.tabHandler);
						//设置焦点
						this.focusEditor(inCell);
					}
				}
				else{
					this._invalidatorCell = null;
					//验证成功
					this.shiftCell = true;
				}
			},
			/**
			 * @summary:
			 * 		可以进行快捷键操作（如回车换行等），或点击其他地方让编辑器消失
			 */
			shift : function(){
				this.shiftCell = true;
				this._blockCell = null;
			},
			/**
			 * @summary:
			 * 		不允许进行快捷键操作（如回车换行等），或点击其他地方让编辑器消失，编辑器始终存在不消失
			 * @param:
			 * 		{unieap.form.FormWidget} editor
			 * 		cell中配置的editor对象
			 */
			unshift : function(editor){
				this.shiftCell = false;
				for(var i = 0;i<this.editCells.length;i++){
					if(this.editCells[i].getEditor()==editor){
						this._blockCell = this.editCells[i];
						return;
					}
				}
			},
			//回车变成Tab切换焦点处理 
			//TODO： radio按钮及checkbox处理
			//TODO： 普通的编辑器（暂时不支持）
			_enter2Tab : function(){
				var cells = this.editCells, editPre ,editNext,lens= cells.length;
				if(lens == 0) return;
				for(var i=0,l=lens-1; i<l;i++){
					editPre =  cells[i].getEditor();
					editNext =  cells[i+1].getEditor();
					editPre.setNextFocusId && editPre.setNextFocusId(editNext.id);
				}
				if(!editNext){
					editNext = cells[0].getEditor();
				}
				editNext.setNextFocusId && editNext.setNextFocusId('unieap_for_focus');
			},
			
			//让编辑器消失，并且取消数据绑定
			applyEditors: function() {
//				for (var i=0, cell; cell=this.editCells[i]; i++) {
//					cell.getEdit().applyEdit(this.currentRowIndex);
//					cell.getEdit().unbind();
//				}
				var layout = this.grid.managers.get("LayoutManager");
				layout.forEachCell(dojo.hitch(this, function(cell) {
					cell.getEdit().applyEdit(this.currentRowIndex);
					cell.getEdit().unbind();
				}));
				this.editCells = [];
			},
			
			/**
			 * @summary:
			 * 		完成编辑，让编辑器消失处于非编辑状态
			 */
			apply: function() {
				if (this.getType()!=this.types.readonly && this.isEditing()) {
					this.applyEditors();
					this.currentRowIndex = -1; 
					this.focusCell = null;
					this.shiftCell = true;
				}
			}
		},
		
		"unieap.grid.Grid": {
			dispatchContentEvent: function(e) {
				e.sourceView.dispatchContentEvent(e) || this._dispatch(e.dispatch, e);
				var edit = this.managers.get("EditManager");
				(edit&&edit.dispatchEvent) && edit.dispatchEvent(e.dispatch, e);
//				safari&FF中会无法对打开的编辑器聚焦
//				dojo.stopEvent(e);
			}
		},
		
		"unieap.grid.manager.ViewManager": {
			refreshRow: function(inRowIndex) {
				var edit = this.grid.managers.get("EditManager");
				if (edit.getType()!=edit.types.readonly
					&& edit.isEditing() 
					&& edit.currentRowIndex==inRowIndex) {
					edit.applyEditors();
				}
				this.forEach(function(inView, i) {
					inView.renderRow(inView.getRowNode(inRowIndex), inRowIndex);
				});
			},
			
			refreshPage: function() {
				var edit = this.grid.managers.get("EditManager"),
					rows = this.getCurrentRows(),
					rowIndex;
				if (edit.getType()!=edit.types.readonly && edit.isEditing()) {
					edit.applyEditors();
				}
				this.scroller.init(this.grid.managers.get("RowManager").getRowCount());
				// clear rows tyle cache
//		 		var rowDatas=this.grid.getBinding().getRowData();
//				if (rowDatas!=null && rowDatas.length>0) {
//					for (var i=0,len=rowDatas.length; i<len; i++) {
//						rowDatas[i]["_style"] && delete rowDatas[i]["_style"];
//					}
//				}
				this.grid.getBinding().getInternalRowSet().forEach(function(row){
					row.removeIdentifier("_style");
				});
				
				this.renderLockedRow();
				this.setScrollTop(this.scrollTop);
				this.finishScrollJob();
//				for (rowIndex in rows) {
//					if (isNaN(rowIndex)) {
//						continue;
//					}
//					this.forEach(function(inView, i) {
//						inView.renderRow(inView.getRowNode(rows[rowIndex]), rows[rowIndex]);
//					});
//					this.grid.managers.get("RowManager").updateStyles(rowIndex);
//				}
			}
		},
		"unieap.grid.manager.RowManager": {
			rowRemoved: function(inRowIndex) {
				var edit = this.grid.managers.get("EditManager");
				if (edit.getType()!=edit.types.readonly 
					&& edit.isEditing() 
					&& edit.currentRowIndex==inRowIndex) {
					edit.apply();
				}
				this.forEachView(function(inView) {
					var node = inView.rowNodes[inRowIndex];
					this.onRowRemoved(node,inRowIndex);
					delete inView.rowNodes[inRowIndex];
				});
			}
		}
	}
});
dojo.provide('unieap.grid.manager.EditManager');
dojo.require("unieap.global");
dojo.declare("unieap.grid.manager.EditManager", null, {
	/**
	 * @declaredClass:
	 * 		unieap.grid.manager.EditManager
	 * @summary:
	 * 		编辑控制器
	 * @description:
	 * 		在Grid标签上配置编辑模块(edit)，启动表格的编辑功能。
	 * 		配置editType指定表格的编辑类型为行编辑或单元格编辑，默认编辑类型为只读；
	 * 		配置singleClickEdit指定编辑是否单击触发，默认为false。
	 * 		此编辑模块支持动态改变编辑类型，支持以编码方式打开指定编辑器。
	 * @example:
	 * |<div dojoType="unieap.grid.Grid" width="500px" height="300px"
	 * |	 binding="{store:'empDataStore'}"
	 * |	 views="{rowNumber:true}"
	 * |	 edit="{editType:'rowEdit',singleClickEdit:false}">
	 * |	 <fixed>
	 * |		 <cell label="员工编号" name="attr_empno" width="10%" editor="{editorClass:'unieap.form.TextBox',editorProps:{textAlign:'left'}}"></cell>
	 * |	 </fixed>
	 * |	 <header>
	 * |		<cell width="150px" label="姓名" name="NAME" editor="{editorClass:'unieap.form.TextBox',editorProps:{textAlign:'left'}}"></cell>
	 * |		<cell width="150px" label="部门" name="attr_deptno" editor="{editorClass:'unieap.form.ComboBox',editorProps:{dataProvider:{store: 'DEPT'},decoder:{valueAttr:'CODEVALUE',displayAttr:'CODENAME'}}}"></cell>
	 * |		<cell width="150px" label="工资" name="attr_sal" headerStyles="text-align: left;"></cell>
	 * |	 </header>
	 * |</div>
	 * @img:
	 * 		images/grid/grid_edit.png
	 */
	
	ui: {
		setType:true,
		getType:true,
		setEdit:true,
		insertRow:true,
		deleteRow:true,
		deleteRows:true,
		isSingleClickEdit:true,
		setSingleClickEdit:true,
		getCurrentRowIndex:true,
		getFocusCell:true,
		shift : true,
		unshift : true,
		validate : true,
		apply:true,
		events: {
			onBeforeEdit:true
		}
	},
	
	_patch: "unieap.grid.manager.EditPatch",
	
	types : {
		cellEdit: "cellEdit",
		rowEdit: "rowEdit",
		readonly: "readonly"
	},
	/**
	 * @summary:
	 * 		默认情况下输入域验证不合法焦点是否转移
	 * @type:
	 * 		{boolean}
	 * @example:
	 *|<div dojoType="unieap.grid.Grid"  binding="{store:'empDataStore'}" edit="{focusShift:false}">  
	 *|	...
	 *|</div> 
	 */
	focusShift: true,
	/**
	 * @summary:
	 * 		编辑类型
	 * @type:
	 * 		{string}
	 * @enum:
	 * 		{"rowEdit"|"cellEdit"|"readonly"}
	 * @description:
	 * 		编辑类型,可在global.js中全局配置默认值
	 * @default:
	 * 		"none"
	 * @example:
	 *|<div dojoType="unieap.grid.Grid"  binding="{store:'empDataStore'}" edit="{editType:'rowEdit'}">  
	 *|	...
	 *|</div> 		
	 */
	editType: null,
	
	/**
	 * @summary:
	 * 		设置是否单击触发编辑
	 * @type:
	 * 		{boolean}
	 * @description:
	 * 		设置是否单击触发编辑,可在global.js中全局配置默认值
	 * @default:
	 * 		false
	 * @example:
	 *|<div dojoType="unieap.grid.Grid"  binding="{store:'empDataStore'}"
     *|		edit="{editType:'cellEdit',singleClickEdit:true}">  
     *| 	 ......
	 *|</div>
	 */
	singleClickEdit: unieap.widget.grid.singleClickEdit,
	
	
	constructor: function(param) {
		dojo.mixin(this, param);
		this.editType = param.editType||unieap.widget.grid.editType;
		this.switchType(this);
		this.doPatch(this.grid);
		this.connects = [];
		this.connects.push(dojo.connect(dojo.body(),"onmousedown",this,"applyEditing"));
	},
	applyEditing : function(evt){
		if(this.getType()==this.types.readonly || !this.isEditing()) {
			return;
		}
		var target = evt.target,
			node = target,
			x = evt.x || evt.pageX,
			y = evt.y || evt.pageY,
			obj = null,targetInView = false, path = [];
		dojo.require("unieap.form.Popup");
		while(node){
			path.push(node);
			if(node == this.grid.viewsNode|| node.notApplyWidget){
				targetInView = true;
				break;
			}
			if(node.getAttribute && (obj =  dijit.byNode(node)) && obj instanceof unieap.form.Popup){
				node = obj.widget.domNode ;
				path = [];
			}
			node = node.parentNode;
		}
		//如果不在Grid编辑视图内消失
		if(!targetInView){
			this._apply();
			return;
		}
		
		var rowIndex,view,idx,cell;
		try{
			view = dijit.byNode(path[path.length-2]);
			var attachNode = path[path.length-4];
			if(attachNode==view.scrollboxNode){
				if(path.length < 5){
					if( attachNode.clientWidth> x &&
						attachNode.clientHeight > y 
						){
						this._apply(target);
					}
					return;
				}
			}
			else{
				//锁定行
				this._apply(target);
				return;
			}
			
			for(var i = path.length-1,obj;obj = path[i];i--){
				if((rowIndex = obj.getAttribute("gridRowIndex"))!=null){
					for(;path[i] && (idx = path[i].getAttribute("idx"))==null;i--);
					if(idx!=null){
						var layout = this.grid.managers.get("LayoutManager"); 
						cell = layout.getCell(Number(idx));
					}
					break;
				}
			}
		
			rowIndex = Number(rowIndex);
			
			//如果是双击编辑时
			if(!this.isSingleClickEdit()){
				//行编辑
				if(this.currentRowIndex != rowIndex){
					this._apply(target);
					return;
				}
				if(this.getType()==this.types.cellEdit ){
					if(this.focusCell != cell && cell!=null){
						this._apply(target);
						return;
					}
				}
			}
			else{
				if(this.currentRowIndex != rowIndex && cell==null){
					this._apply(target);
					return;
				}
			}
		}catch(e){
			
		}
	},
	_apply : function(target){
		//点击的节点不能聚焦，主动让其失去焦点
		target && !target.focus && unieap.blurWidget(); 
		if(this.accesskeyHandle==false) return;
		this.tabHandler= setTimeout(dojo.hitch(this,function(){
			if(this.shiftCell){ this.apply(); }
		}),50);
	},
	switchType: function(inComponent) {
		switch(this.editType) {
			case this.types.cellEdit:
			case this.types.rowEdit: {
				this.doPatch(inComponent);
				this.doPatch(this.grid.managers.get("ViewManager"));
				this.doPatch(this.grid.managers.get("RowManager"));
//				this.autoApply = true;
			}
		}
	},
	
	/**
	 * @summary:
	 * 		取得编辑类型
	 * @return:
	 * 		{"cellEdit"|"rowEdit"|"readonly"}
	 * @example:
	 * |<div dojoType="unieap.grid.Grid" id="grid" edit="{editType:'rowEdit'}">
	 * |</div>
	 * |unieap.byId("grid").getManager('EditManager').getType(); //得到的值为"rowEdit"
	 */
	getType: function() {
		return this.editType;
	},
	
	/**
	 * @summary:
	 * 		设置编辑类型
	 * @param:
	 * 		{"cellEdit"|"rowEdit"|"readonly"} inEditType
	 * @example:
	 * |//设置编辑类型为单元格编辑
	 * |unieap.byId("grid").getManager("EditManager").setType("cellEdit");
	 */
	setType: function(inEditType) {
		this.editType = inEditType;
//		this.switchType(this);
//		this.grid.managers.reloadManager("EditManager");
//		this.grid.refresh();
	},
	
	/**
	 * @summary:
	 * 		往Grid中插入一行数据并使该行处于编辑状态
	 * @description:
	 * 		在为单元格编辑的情况下,不传入inCell参数,Grid不会编辑单元格
	 * @param:
	 * 		{object} inRowData 行数据
	 * @param:
	 * 		{number} inRowIndex 插入行位置
	 * @param:
	 * 		{number|string} inCell 设置光标落于哪一列的编辑器上
	 * 		
	 * @example:
	 * |var rowData = {
	 * |	attr_name: "somebody",
	 * |	attr_deptno: "开发部",
	 * |	attr_empno: 20095724
	 * |};
	 * |//如果Grid控件为行编辑,编辑时光标位于第一行第一列上
	 * |grid.getManager("EditManager").insertRow(rowData,0);
	 * |//编辑时光标落在第二行、第二列的单元格上
	 * |grid.getManager("EditManager").insertRow(rowData,1,1);
	 */
	insertRow: function(inRowData,inRowIndex,inCell) {
		inRowIndex = parseInt(inRowIndex,10);
		this.apply && this.apply();//确保之前的编辑关闭
		var rowCount = this.grid.managers.get("RowManager").getRowCount();
		var rowIndex = inRowIndex||0;
		if (rowIndex<0 || rowIndex>=rowCount) {
			rowIndex = rowCount;
		}
		
		this.grid.getBinding().insertRow(inRowData, rowIndex);
		//scroll to inserted row
		
		//active editor or editors
		//this.setEdit && this.setEdit(rowIndex);
		if (rowIndex >= this.grid.getManager("RowManager").getRowCount() || rowIndex < 0) {
			this.apply();
			return;
		}
		//确保编辑行可见
       var views = this.grid.managers.get("ViewManager");
		views.visualizeRow(rowIndex);
		//grid的onBeforeEdit方法
		if (!unieap.fireEvent4Widget(this,this.grid,this.onBeforeEdit,[rowIndex])) return;
	    inCell=typeof(inCell)!='undefined'&&this.grid.getManager('LayoutManager').getCell(inCell);
		var type=this.getType();
		switch(type){
			case 'cellEdit':
				inCell&&this.start(rowIndex,inCell);
				break;
			case 'rowEdit':
				inCell?this.start(rowIndex,inCell):this.start(rowIndex);
				break;
		}
		return rowIndex;
	},
	
	/**
	 * @summary:
	 * 		打开编辑器，焦点设置在inCell对应的编辑器上。
	 * @description:
	 *		如果行编辑时inCell不可编辑则编辑时焦点设置在第一个单元格上。
	 * @param:
	 * 		{number} inRowIndex 编辑的行号
	 * @param:
	 * 		{number|string} inCell 编辑的列序号或列绑定名
	 * @example:
	 * |grid.setEdit(2,"salary"); //编辑第3行、单元格列名为salary的单元格
	 * @example:
	 * |<cell width="150px" label="职位" editor="{editorClass:'unieap.form.TextBox',editorProps:{id:'geteditor',onBlur:blur}}" name="attr_job"></cell>
	 * |function blur(evt){
	 * |  var value = unieap.byId("geteditor").getValue();
	 * |  var grid=unieap.byId("grid");
	 * |  var editManaer = grid.getManager("EditManager");
	 * |  //如果根据条件跳转到指定的行
	 * |  var rowIndex = parseInt(value,10);
     * |  editManaer.setEdit(rowIndex,'attr_job');
	 * |}
	 * @example:
	 * |<cell width="150px" label="职位" editor="{editorClass:'unieap.form.TextBox',editorProps:{id:'geteditor',onBlur:blur}}" name="attr_job"></cell>
	 * |function blur(evt){
	 * |   var value = unieap.byId("geteditor").getValue();
	 * |   var editManager = grid.getManager("EditManager");
	 * |   //允许跳转，包括快捷键及点击其他地方让编辑器消失
	 * |   editManager.shift();
	 * |   //如果满足某条件不进行跳转
	 * |   if(value=="aaa"){
	 * |      //不允许允许跳转，包括快捷键及点击其他地方让编辑器消失
	 * |      editManager.unshift(this);
	 * |   }
	 * |}
	 */
	setEdit: function(/*number*/inRowIndex, /*number|name*/inCell) {
	},
	
	
	/**
	 * @summary:
	 * 	 获取当前编辑的行号
	 * @return:
	 * 	{number} 如果不处在编辑状态下，则返回-1
	 * @example:
	 * |var grid=unieap.byId("grid");
	 * |var currentIndex=grid.getManager("EditManager").getCurrentRowIndex();
	 */
	getCurrentRowIndex:function(){
	},
	
	/**
	 * @summary:
	 * 		允许进行快捷键操作（如回车换行等），或点击其他地方让编辑器消失
	 * @example:
	 * |<cell label="姓名" editor="{editorClass:'unieap.form.TextBox',editorProps:{id:'geteditor',onBlur:doBlur}}" name="attr_name"></cell>
	 * |function doBlur(){
	 * |	var name = unieap.byId("geteditor").getValue(),
	 * |		editMan=grid.getManager("EditManager");
	 * |	//性能为非jackjones才可以编辑其他单元格
	 * |	editManager.shift();
	 * |	name=='jackjones'&&editMan.unshift(this);
	 * |}
	 */
	shift : function(){
	},
	/**
	 * @summary:
	 * 		不允许进行快捷键操作（如回车换行等），或点击其他地方时编辑器始终存在不消失
	 * @param:
	 * 		{unieap.form.FormWidget} editor cell中配置的editor对象
	 * @example:
	 * |<cell label="姓名" editor="{editorClass:'unieap.form.TextBox',editorProps:{id:'geteditor',onBlur:doBlur}}" name="attr_name"></cell>
	 * |function doBlur(){
	 * |	var name = unieap.byId("geteditor").getValue(),
	 * |		editMan=grid.getManager("EditManager");
	 * |	editManager.shift();
	 * |	//不允许输入姓名为jackjones
	 * |	name=='jackjones'&&editMan.unshift(this);
	 * |}
	 */
	unshift : function(editor){
	},
	
	/**
	 * @summary:
	 * 		完成编辑，让编辑器消失处于非编辑状态
	 * @example:
	 * |var editMan=grid.getManager("EditManager");
	 * |editMan.apply(); //如果有单元格处于编辑状态,让编辑器消失
	 */
	apply: function() {
	},
	
	
	/**
	 * @summary:
	 * 		删除一行
	 * @param:
	 * 		{number} inRowIndex 行索引,从0开始计算
	 * @example:
	 * |unieap.byId("grid").getManager("EditManager").deleteRow(1);
	 */
	deleteRow: function(inRowIndex) {
		this.apply && this.apply();
		return this.grid.getBinding().deleteRow(inRowIndex);
	},
	
	/**
	 * @summary:
	 * 		删除多行数据
	 * @param:
	 * 		{array} rows
	 * @example:
	 *|//获取选中行的行索引数组
	 *|var selectedRowIndexs = grid.getBinding().getRowSet().getSelectedRowIndexs();
	 *|//删除选中行
	 *|grid.getManager("EditManager").deleteRows(selectedRowIndexs);
	 */
	deleteRows: function(rows) {
		this.apply && this.apply();
		this.grid.getBinding().deleteRows(rows);
	},
	
	/**
	 * @summary:
	 * 		是否单击触发编辑
	 * @description:
	 * 		判断编辑的触发方式，默认情况下是false，即双击表格某处打开编辑器。
	 * @return:
	 * 		{boolean}
	 * @example:
	 *|var bool=grid.getManager("EditManager").isSingleClickEdit();
	 */
	isSingleClickEdit: function() {
		/**
		 * 行单击可编辑事件
		 * unieap.widget.grid.distinguishDblclick = true;
		 * 2017-8-8 15:24:03
		 */
		return this.singleClickEdit = true;
		
		//return this.singleClickEdit;
	},
	
	/**
	 * @summary:
	 * 		设置编辑触发方式
	 * @description:
	 * 		判断编辑的触发方式，默认情况下是false，即双击表格某处打开编辑器。
	 * @param:
	 * 		{boolean} isSingle
	 * @example:
	 * |grid.getManager("EditManager").setSingleClickEdit(true);
	 */
	setSingleClickEdit: function(isSingle) {
		this.singleClickEdit = isSingle==true;
	},
	
	/**
	 * @summary:
	 * 		编辑前触发事件
	 * @description:
	 * 		覆盖此方法，并返回false时，编辑操作将被取消
	 * @param:
	 * 		{number} inRowIndex
	 * 		将要触发编辑的行
	 * @param:
	 * 		{unieap.grid.Cell} inCell
	 * @return:
	 * 		{boolean}
	 * @example:
	 *|<div dojoType="unieap.grid.Grid" id="grid" width="80%" height="250px" binding="{store:'empDataStore'}" views="{rowNumber:true}" 
     *|     edit="{editType:'rowEdit',singleClickEdit:true,onBeforeEdit:test}">
	 *|</div>
	 */
	onBeforeEdit: function(inRowIndex, inCell) {
		return true;
	},
	
	doPatch: function(inComponent) {
		if (!this.patcher) {
			dojo.require(this._patch);
			var clazz = dojo.getObject(this._patch);
			this.patcher = new clazz(this.grid);
		}
		this.patcher.doPatch(inComponent);
	},
	destroy : function(){
		while(this.connects.length){
			dojo.disconnect(this.connects.pop());
		}
	},
	
	/**
	 * @summary:
	 * 		返回当前正在编辑的cell对象
	 * @return:
	 * 		{unieap.grid.Cell}
	 * @example:
	 * |var cell = grid.getManager("EditManager").getFocusCell();
	 */
	getFocusCell : function(){
		if(this.getType()!=this.types.readonly && this.isEditing()){
			var node = document.activeElement;
			var widget = dijit.getEnclosingWidget(node);
		    var cells = this.editCells;
			for(var i=0,l=cells.length;i<l;i++){
				if(cells[i].getEditor()==widget){
					return cells[i];
				}
			}
		}else{
			return null;
		}
	}
});
dojo.provide('unieap.grid.manager.ExportManager');
dojo.declare("unieap.grid.manager.ExportManager", null, {
	/**
	 * @summary:
	 * 		导出控制器
	 * @classDescription：
	 * 		控制Grid的导出功能
	 * @declaredClass:
	 * 		unieap.grid.manager.ExportManager
	 * @example:
	 * |var manager=grid.getManager('ExportManager');
	 * |//进行服务端导出
	 * |manager.doServerExport();
	 * |//进行客户端导出
	 * |manager.doClientExport();
	 * |//导出选中记录
	 * |manager.enableExport();
	 * |//手动禁用导出exl和pdf
	 * |manager.enableExport();
	 * @img:
	 * 		images/grid/export.png
	 */

	ui:{
		tooltipMessage:true,
		doServerExport:true,
		doClientExport:true,
		exportSelectedData:true,
		setInfo:true,
		enableExport:true
	},
	
	/**
	 * @summary:
	 * 		导出所需的url
	 * @description:
	 * 		默认导出url为"/rpc.do?method=doExport"
	 * @type:
	 * 		{string}
	 * @example:
	 * |<div dojoType='unieap.grid.Grid' binding="{store:'emp'}">
	 * |	<header>
	 * |		<cell name="attr_name" label="姓名"></cell>
	 * |	</header>
	 * |	<toolbar export="{url:'test.do'}" >
	 * |	</toolbar>
	 * |</div>
	 * 		用户可在toolbar标签上的export定义url
	 * @example:
	 * |var manager=grid.getManager('ExportManager');
	 * |//可以通过setInfo方法改变打印控制器的url
	 * |manager.setInfo({url:'test.do'});
	 */
    url: null,
        
	/**
	 * @summary:
	 * 		导出按钮的提示信息
	 * @description:
	 * 		默认提示信息为空（null）
	 * @type:
	 * 		{string}
	 * @example:
	 * |<div dojoType='unieap.xgrid.Grid' binding="{store:'emp'}">
	 * |	<header>
	 * |		<cell name="attr_name" label="姓名"></cell>
	 * |	</header>
	 * |	<toolbar export="{tooltipMessage:'导出EXCEL'}" >
	 * |	</toolbar>
	 * |</div>
	 *  		
	 */
    tooltipMessage:null,
    
	/**
	 * @summary:
	 * 		导出所需的parameters
	 * @type:
	 * 		{object}
	 * @example:
	 * |<div dojoType='unieap.grid.Grid'>
	 * |	<header>
	 * |		<cell name="attr_name" label="姓名"></cell>
	 * |	</header>
	 * |	<toolbar export="{parameters:{info:'我来自基础软件'}}" >
	 * |	</toolbar>
	 * |</div>
	 * 		可在toolbar标签上的export定义parameters
	 * @example:
	 * |var manager=grid.getManager('ExportManager');
	 * |//也可以通过setInfo方法设置打印控制器的parameters
	 * |manager.setInfo({parameters:{info:'我来自基础软件'}});
	 * 		
	 */
    parameters: null,
	
	
	/**
	 * @summary:
	 * 		设置导出选项
	 * @description:
	 * 		传入一个数组，控件会根据传入的数组自动生成下拉菜单。默认会生成"服务端导出"、"客户端导出"以及"导出选中数据"三个菜单项。
	 * @type:
	 * 		{array}
	 * @default:
	 * 		['server','client','checked']
	 * @example:
	 * |<div dojoType="unieap.grid.Grid">
	 * |	<header>
	 * |		<cell name="empno" label="编号"></cell>
	 * |	</header>
	 * |	<toolbar export="{options:['server','checked']}"></toolbar>
	 * |</div>
	 */
	options:null,
	
	
	/**
	 * @summary:
	 * 		设置当点击导出下拉按钮(非右侧下拉箭头)时，执行什么操作。默认为服务端导出
	 * @description:
	 * 		Grid控件导出功能会导出显示区、锁定行以及ToolBar上的数据信息，导出的结构可以参考rpc.js中unieap.Action.doExport方法。
	 * 		如果用户想自定义后台实现导出，可以参考com.neusoft.unieap.ria33demo.action.export.ExportPojoAction类的实现
	 * @type:
	 * 		{string}
	 * @enum:
	 * 		{"server"|"client"|"checked"}
	 * @default:
	 * 		"server"
	 * @example:
	 * |<div dojoType="unieap.grid.Grid">
	 * |	<header>
	 * |		<cell name="empno" label="编号"></cell>
	 * |	</header>
	 * |	<toolbar export="{defaultType:'client'}"></toolbar>
	 * |</div>
	 */
	defaultType:'',
	
	/**
	 * @summary:
	 * 		设置导出的文件类型
	 * @description:
	 * 		fileType属性为excel、csv或者all。,当display为all时，支持在界面上选择文件类型。
	 * 		
	 * @type:
	 * 		{string}
	 * @enum:
	 * 		{"csv"|"excel"|"all"}
	 * @default:
	 * 		""
	 * @example:
	 * |<div dojoType="unieap.xgrid.Grid">
	 * |	<header>
	 * |		<cell name="empno" label="编号"></cell>
	 * |	</header>
	 * |	<toolbar export="{fileType:'csv'}"></toolbar>
	 * |</div>
	 */
	fileType : '',
	
	/**
	 * @summary:
	 * 		导出配置页面
	 * @description:
	 * 		导出时以xDialog形式弹出pageURL关联的页面。
	 * 		
	 * @type:
	 * 		{string}
	 * @default:
	 * 		"XXXX.jsp"
	 * @example:
	 * |<div dojoType="unieap.xgrid.Grid">
	 * |	<header>
	 * |		<cell name="empno" label="编号"></cell>
	 * |	</header>
	 * |	<toolbar export="{pageURL:'XXXX.jsp'}"></toolbar>
	 * |</div>
	 */
	pageURL : '',

    
    constructor: function(param){
        dojo.mixin(this, param);
    },
	
	/**
	 * @summary:
	 * 		设置导出信息
	 * @param:
	 * 		{object} exportInfo 导出信息
	 * @example:
	 * |var manager=grid.getManager('ExportManager');
	 * |var exportInfo={
	 * |	url:'test',
	 * |	parameters:{user:'chen',password:'s'}
	 * |}
	 * |manager.setInfo(exportInfo);
	 */
	setInfo:function(exportInfo){
		 dojo.mixin(this, exportInfo||{});
	},
	/**
	 * @summary:
	 * 		手动禁用导出exl和pdf
	 * @param:
	 * 		{object} enableExport 导出信息
	 * @example:
	 * |var manager=grid.getManager('ExportManager');
	 * |manager.enableExport(false);
	 */


	enableExport:function(exportType){
		$('#'+this.grid.id).find('.u-grid-export').hide();
		$('#'+this.grid.id).find('.u-grid-print').hide();
		if(this.grid['IndividualManager']){
			$('#'+this.grid.id).find('.hasIndividual').removeClass('hasIndividual');
		}else{
			$('#'+this.grid.id).find('.gird-liebiao').removeClass('isBlock');
		}
	},
	
	/**
	 * @summary:
	 * 		服务端导出
	 * @param：
	 * 		{object|null} exportInfo 导出信息
	 * @example:
	 * |//通过ExportManager进行服务端导出操作
	 * |grid.getManager("ExportManager").doServerExport();
	 * @example:
	 * |var exportInfo={url:'exportInfo.do',parameters:'{}'}
	 * |grid.getManager("ExportManager").doServerExport(exportInfo);
	 */
	doServerExport:function(exportInfo){
		
		var exportData = this.grid.getGridData();
		//U_EAP00029282
		var type = "server";
		var binding = this.grid.getBinding();
		var dsName = binding.getDataStore().getName();
		if(binding._supportClientPaging() && dsName && dsName.indexOf("_client_paging_ds")!=-1){ 
			//前台分页的服务端导出
			type = "client";
			exportData.store = binding.getOriginStore();
		}
		if(exportData.store.getRowSet().getRowCount()>0){
			exportInfo=exportInfo||{};
			!exportInfo['url']&&this.url&&(exportInfo['url']=this.url);
			!exportInfo['parameters']&&this.parameters&&(exportInfo['parameters']=this.parameters);
	        exportData.type = type;
			dojo.mixin(exportData,exportInfo);
			this.fileType = this.fileType ? this.fileType : unieap.widget.grid.exportFileType;
			if(this.fileType == 'all'){
				this._openExportXDialog(exportData);
			}else{
				dojo.mixin(exportData, {
					'exportType' : this.fileType
				});
				unieap.Action.doExport(exportData);
			}
		}else{
			 MessageBox.alert({
//					title : "提示信息", // MODIFY BY TENGYF
					title : RIA_I18N.grid['export'].info,
//					message : '无可导出数据，请重新设置查询条件后再导出!'
					message : RIA_I18N.grid['export'].noDataByQuery 
				});
		}
	},
	
	/**
	 * @summary:
	 * 		客户端端导出
	 * @param：
	 * 		{object|null} exportInfo 导出信息
	 * @example:
	 * |//通过ExportManager进行客户端导出操作
	 * |grid.getManager("ExportManager").doClientExport();
	 * @example:
	 * |var exportInfo={url:'exportInfo.do',parameters:'{}'}
	 * |grid.getManager("ExportManager").doClientExport(exportInfo);
	 */
	doClientExport:function(exportInfo){
		var exportData = this.grid.getGridData();
		var exportType = arguments.length == 2 ? 'PDF': this.fileType;
		if(exportData.store.getRowSet().getRowCount()>0){
			exportInfo=exportInfo||{};
			!exportInfo['url']&&this.url&&(exportInfo['url']=this.url);
			!exportInfo['parameters']&&this.parameters&&(exportInfo['parameters']=this.parameters);
	        exportData.type = 'client';
			dojo.mixin(exportData,exportInfo);
			this.fileType = this.fileType ? this.fileType : unieap.widget.grid.exportFileType;
			if(this.fileType == 'all'){
				this._openExportXDialog(exportData);
			}else{
				dojo.mixin(exportData, {
					'exportType' : exportType
				});
				var pagingManage = this.grid.managers.managers.PagingManager;
				exportData.viewName = pagingManage.processor ? pagingManage.processor.view : null;
				exportData.processorNam = pagingManage.processor ? pagingManage.processor.name : null;
				exportData.gridId = this.grid.id;
				unieap.Action.doExport(exportData);
			}
		}else{
			 MessageBox.alert({
//					title : "提示信息",
					title : RIA_I18N.grid['export'].info,
//					message : '无可导出数据，请重新设置查询条件后再导出!'
					message : RIA_I18N.grid['export'].noDataByQuery 
				});
		}
	},
	
	
	/**
	 * @summary:
	 * 		导出所有选中的数据
	 * @description:
	 * 		如果用户在toolbar上设置了paging的pageCache为true,则导出缓存的所有选中数据。
	 * @param:
	 * 		{Object} exportInfo
	 * @example:
	 * |//通过ExportManager导出所有选中的数据
	 * |grid.getManager("ExportManager").exportSelectedData();
	 * @example:
	 * |var exportInfo={url:'exportInfo.do'};
	 * |grid.getManager("ExportManager").exportSelectedData(exportInfo);
	 */
	exportSelectedData:function(exportInfo){
		var pagingManager=this.grid.managers.managers["PagingManager"];
		exportInfo=exportInfo||{};
		!exportInfo['url']&&this.url&&(exportInfo['url']=this.url);
		!exportInfo['parameters']&&this.parameters&&(exportInfo['parameters']=this.parameters);
		if(pagingManager&&pagingManager.pageCache){
			pagingManager.exportSelectedData(exportInfo);
		}else{
			var gridData=this.grid.getGridData(),
				store=this.grid.getBinding().getDataStore(),
				data=this._getSelectedData(store),
				dsName=gridData['store'].getName();
			delete gridData['store'];
			if(data.length>0){
				var rowSet = new unieap.ds.RowSet();
				for(var i=0;i<data.length;i++){
					rowSet.insertRow(data[i],i);
				}
				var store = new unieap.ds.DataStore(dsName);
				store.setRowSet(rowSet);
	//			dojo.mixin(gridData,exportInfo,{type:'client'},{
	//				store:new unieap.ds.DataStore(dsName,data)
	//			});
				
				dojo.mixin(gridData,exportInfo,{type:'client'},{
					store:store
				});
				this.fileType = this.fileType ? this.fileType : unieap.widget.grid.exportFileType;
				if(this.fileType == 'all'){
					this._openExportXDialog(gridData);
				}else{
					dojo.mixin(gridData, {
						'exportType' : this.fileType
					});
					unieap.Action.doExport(gridData);
				}
			}else{
			     MessageBox.alert({
//						title : "提示信息",
						title : RIA_I18N.grid['export'].info,
//						message : '无可导出数据，请先选择数据再导出!'
						message : RIA_I18N.grid['export'].noDataByChoices
					});
			}
		}
	},
	
	// 弹出导出设置对话框
	_openExportXDialog: function(exportData){
		var _this = this;
		exportData["_this"] = this;
		var dialog = new unieap.xdialog.Dialog({
			url: unieap.WEB_APP_NAME + (this.pageURL ? this.pageURL : unieap.widget.grid.exportPageURL),
			title:RIA_I18N.xgrid['export'].exportSetting,
			height:"180",
			width:"563"
		});
		dialog.dialogData = exportData;
		dialog.show();
	},
	
	//获得选中的记录，包括primary和filter缓冲区中的数据
	_getSelectedData:function(store){
//		var data=[],rowset=store.getRowSet(),
//			totalData=rowset.getData(unieap.ds.Buffer.PRIMARY).concat(rowset.getData(unieap.ds.Buffer.FILTER));
//		dojo.forEach(totalData,function(item){
//			var row = new unieap.ds.Row(rowset,item);
//			row.isRowSelected() && data.push(item);
//			//item["_s"]==true&&data.push(item);
//		});
//		return data;

		var rowData=[],rowset=store.getRowSet();
		rowset.forEach(function(row){
				if(row.isRowSelected()){
					rowData.push(row.getData());
				}
			},null,null,unieap.ds.Buffer.PRIMARY);
		
		rowset.forEach(function(row){
				if(row.isRowSelected()){
					rowData.push(row.getData());
				}
			},null,null,unieap.ds.Buffer.FILTER);	
		return rowData;
	}
});

dojo.provide('unieap.grid.manager.FilterManager');
dojo.declare("unieap.grid.manager.FilterManager", null, {
	/**
	 * @summary:
	 * 		过滤控制器
	 * @classDescription：
	 * 		控制Grid的过滤功能
	 * @declaredClass:
	 * 		unieap.grid.manager.FilterManager
	 * @example:
	 * |//得到过滤控制器
	 * |var manager=grid.getManager('FilterManager');
	 * |var filter={
	 * |	condition:{
	 * |		A:{name:'attr_sal',relation:">",value:1000}
	 * |	},
	 * |	pattern:"${A}"
	 * |}
	 * |//设置过滤
	 * |manager.setFilter('attr_sal',filter);
	 * |//进行过滤
	 * |manager.doFilter();
	 * @img:
	 * 		images/grid/filter.png
	 */
	
	ui:{
		cancelFilter:true,
		doFilter:true,
		setFilter:true
	},
	
	
	constructor: function(param) {
		dojo.mixin(this,param);
	},

	/*-----------以下用于生成手册---平时要注释掉---------------------------*/
	/**
	 * @summary:
	 * 		设置在哪些列的表头上显示过滤菜单
	 * @type 
	 * 		{array} 列绑定名数组
	 * @example:
	 * |//只在列绑定名为attr_name的列才显示过滤菜单
	 * |<div dojoType="unieap.grid.Grid" filter="{include:['attr_name']}"></div>
	 */	
//	include: null,
	
		/**
	 * @summary:
	 * 		设置不在哪些列的表头上显示过滤菜单
	 * @type 
	 * 		{array} 列绑定名数组
	 * @example:
	 * |//除列绑定名为attr_name的列不显示过滤菜单外，其它列都显示过滤菜单
	 * |<div dojoType="unieap.grid.Grid" filter="{exclude:['attr_name']}"></div>
	 */	
//	exclude: null,
	/*-----------以上用于生成手册---平时要注释掉---------------------------*/

	
	/**
	 * @summary:
	 * 		取消过滤
	 * @description:
	 * 		取消某列的过滤或者取消Grid的过滤
	 * @param 
	 * 		{unieap.grid.Cell|string} cell 要取消过滤列的Cell对象或者列绑定名称，若不指定则取消Grid过滤
	 * @example:
	 * |var filterManager=grid.getManager('FilterManager');
	 * |//取消name值为"attr_ename"的列并清除其过滤条件
	 * |filterManager.cancelFilter('attr_ename');	
	 * @example:
	 * |var filterManager=grid.getManager('FilterManager');
	 * |//取消所有cell的过滤条件,即取消Grid的过滤		
	 * |filterManager.cancelFilter();
	 */
	cancelFilter:function(cell){
		var layoutManager=this.grid.managers.get('LayoutManager');
		if(dojo.isString(cell)){
			cell=layoutManager.getCell(cell);
		}
		if(cell){
			cell.filter=null;
			layoutManager.clearFilterInfo(cell);
		}else{
			var cells=layoutManager.cells;
			dojo.forEach(cells,function(cell){
				cell.filter=null;
			});
			layoutManager.clearFilterInfo();
		}
	
		this.doFilter();
	},
	
	
	/**
	 * @summary
	 * 		进行过滤
	 * @description:
	 * 		对某个cell通过setFilter设置的过滤条件进行过滤
	 * @example:
	 * |var layoutManager=grid.getManager('LayoutManager');
	 * |var filterManager=grid.getManager('FilterManager');
	 * |var filter={
	 * |	condition:{
	 * |		//对同一个单元格进行过滤时,name属性得相同!!
	 * |		A:{name:'attr_ename',relation:"=",value:'开发'},
	 * |		B:{name:'attr_ename',relation:"=",value:'test'}
	 * |	},
	 * |	pattern:" ${A} || ${B} " //注意条件之间有空格!!
	 * |}
	 * |filterManager.setFilter('attr_ename',filter);
	 * |filterManager.doFilter();	
	 */
	doFilter:function(){
		if(!dojo.getObject("unieap.grid.menu.filter")){
			this.grid.connect(this.grid,'onRowSetFilter',dojo.hitch(this,function(){
				this._updateCell();
			}));
		}
		this.grid.getBinding().doFilter();
	},
	
	_updateCell:function(){
		var layout = this.grid.managers.get("LayoutManager");
		dojo.query('.u-grid-cell',this.grid.headerNode).forEach(function(th){
			var index=th.getAttribute("idx");
			var cell=layout.getCell(Number(index));
			if(cell.filter){
				dojo.addClass(th,'u-grid-filter-cell');
			}else{
				dojo.removeClass(th,'u-grid-filter-cell');
			}
		});
	},
	
	/**
	 * @summary:
	 * 		设置某个cell的过滤条件，注意condition中的条件列名称定义不能重复
	 * @param
	 *		{unieap.grid.Cell|string} cell 过滤列的Cell对象或者列绑定名称
	 * @param 
	 * 		{object} filter 过滤条件
	 * @example:
	 * |var layoutManager=grid.getManager('LayoutManager');
	 * |var filterManager=grid.getManager('FilterManager');
	 * |//过滤出所有attr_ename为yangzz或者为fangzh的数据
	 * |var filter={
	 * |	condition:{
	 * |		A:{name:'attr_ename',relation:"=",value:'yangzz'},
	 * |		B:{name:'attr_ename',relation:"=",value:'fangzh'}
	 * |	},
	 * |	pattern:" ${A} || ${B} "
	 * |}
	 * |//取得cell,构造过滤条件,并进行过滤
	 * |var cell=layoutManager.getCell('attr_ename');
	 * |filterManager.setFilter(cell,filter);
	 * |filterManager.doFilter();
	 */
	setFilter:function(cell,filter){
		if(dojo.isString(cell)){
			cell=this.grid.getManager('LayoutManager').getCell(cell);
		}
		if(cell){
			cell.filter=filter;
		}
	}
	
});

dojo.provide("unieap.grid.manager.GroupPatch");
dojo.declare("unieap.grid.manager.GroupPatch", null, {
	constructor: function(inGrid) {
		this.grid = inGrid;
	},
	doPatch: function(inComponent) {
		if (inComponent.declaredClass=="unieap.grid.manager.ViewManager") {
			for (func in this.patches[inComponent.declaredClass]) {
				if (func=="refreshRow") {
					inComponent[func] = dojo.hitch(inComponent, this.patches[inComponent.declaredClass][func]);
				} else {
					inComponent[func+"List"].push(this.patches[inComponent.declaredClass][func]);
				}
			}
		} else {
			dojo.mixin(inComponent, this.patches[inComponent.declaredClass])
		}
		
	},
	
	patches: {
		"unieap.grid.manager.ViewManager": {
			prerender: function() {
				var group = this.grid.managers.get("GroupManager");
				group.validate();
				if (group.getName() && group.getName().length>0) {
					var rowData = group.root.toRowData();
					this.grid.getBinding().setRowData(rowData);
					this.grid.getBinding().getInternalRowSet().reset();
					this.grid.getBinding().getInternalRowSet().addRows(rowData);
				}
				
		    },
		    postrender: function() {
		        var group = this.grid.managers.get("GroupManager");
		        group.groupBar && group.groupBar.update(group.name);
		    },
		    refreshRow: function(inRowIndex) {
		    	var binding = this.grid.getBinding();
				var rowData = binding.getRow(inRowIndex);
				var row = new unieap.ds.Row(binding.getRowSet(),rowData);
				var groupIdentifier = row.getIdentifier("_g");
				
		    	if (groupIdentifier && groupIdentifier["gr"]) {
		    		return;
		    	} else {
		    		this.forEach(function(inView, i){
			            inView.renderRow(inView.getRowNode(inRowIndex), inRowIndex);
			        });
					this.onRowRefresh(inRowIndex);
		    	}
		    }
		},
		
		"unieap.grid.Cell": {
			extraFormat: function(inRowIndex, inValue) {
				var binding = this.grid.getBinding();
				var value = inValue,
					rowData = binding.getRow(inRowIndex),
					group = this.grid.managers.get("GroupManager"),groupIdentifier;
				if(rowData){
					var row = new unieap.ds.Row(binding.getRowSet(),rowData);
					groupIdentifier = row.getIdentifier("_g");
				}
				if (group && rowData && groupIdentifier && groupIdentifier["gsr"]) {
					return group.formatStatistic(this.name, value);
				} else {
					return value
				}
			}
		},
		
		"unieap.grid.manager.RowManager": {
			renderRow: function(inRowIndex, inNodes) {
				var binding = this.grid.getBinding();
				var rowData = binding.getRow(inRowIndex);
				var row = new unieap.ds.Row(binding.getRowSet(),rowData);
				var groupIdentifier = row.getIdentifier("_g");
				if (groupIdentifier && groupIdentifier["gr"]) {
					var vm = this.grid.managers.get("ViewManager");
					for(var i=0, n, v, rowNode; (v=vm.views[i])&&(n=inNodes[i]); i++) {
						rowNode = this.createRowNode(inRowIndex, v);
						if (v.isRowBar) {
							if (dojo.isIE && dojo.isIE < 7) {
								n.appendChild(rowNode);
								v.renderRow(rowNode, inRowIndex);
							} else {
								v.renderRow(rowNode, inRowIndex);
								n.appendChild(rowNode);
							}
						} else if ((vm.views[0].isRowBar && i==1) || i==0){
							n.appendChild(rowNode);
							this.renderGroupRow(rowNode, row);
						} else {
							n.appendChild(rowNode);
							rowNode.innerHTML = "<table cellpadding='0' cellspacing='0' style='width:100%;height:"+this.defaultRowHeight+"px;'><tr><td class='u-grid-group'>&nbsp;</td></tr></table>";
						}
						this.styleRowNode(inRowIndex, rowNode, v);
					}
				} else {
					this._renderRow(inRowIndex, inNodes);
				}
			},
			
			
			renderGroupRow: function(rowNode, groupRow) {
				var groupName = groupRow.getItemValue("name");
				var groupValue = groupRow.getItemValue("value");
				var isExpand = groupRow.getItemValue("isExpand");
				var formatter = groupRow.getItemValue("formatter");
				var groupHandle = groupRow.getItemValue("handle");
				
				var groupManager = this.grid.managers.get("GroupManager"),
					html = [];
				var name = groupManager.getName(),level=0;
				for (var n; n=name[level]; level++) {
					if (groupName==n) {
						break;
					}
				}
			
				html.push("<table cellpadding='0' cellspacing='0' style='width:100%;height:"+(this.defaultRowHeight+1)+"px;'><tr>");
				html.push("<td class='u-grid-group' width=");
				html.push((level+1)*16);
				html.push(" align='right'>");
				html.push("<div class='");
				html.push(isExpand?"u-grid-group-minus":"u-grid-group-plus");
				html.push("' style='margin-left:"+level*16+"px;'></div></td>");
				html.push("<td class='u-grid-group u-grid-group-font' align='left'>");
				html.push("");//html[8] : display label
				html.push("</td></tr></table>");
				var group = this.grid.managers.get("GroupManager").getGroup(groupHandle),
					cell = this.grid.managers.get("LayoutManager").getCell(groupName);;
				
				if (formatter) {
					html[8] = "<nobr>"+formatter.apply(cell, [groupName, groupValue, group.rows])+"</nobr>";
				} else {
					var value = cell._format(groupValue);
//					if (value==null) {
//						value = "空";
//					}
//					html[8] = "<nobr>"+cell.label + ": " +value+"(共"+group.rows.length+"条记录)"+"</nobr>"; // MODIFY BY TENGYF
					html[8] = "<nobr>"+cell.label + ": " +value+"("+RIA_I18N.grid.toolbar.total+group.rows.length+RIA_I18N.grid.toolbar.records+")"+"</nobr>";
				}
				
				rowNode.innerHTML = html.join("");
				dojo.query("div",rowNode)[0].onclick=dojo.hitch(this, function(e) {
					
					var handle=groupHandle;
					var group = groupManager.getGroup(handle);
					group.setExpand(!group.isExpand());
					group.isExpand()?groupManager.insertGroupList(handle):groupManager.removeGroupList(handle);
					groupManager.commit();
				});
//				rowNode.innerHTML = "<table cellpadding='0' cellspacing='0' style='width:100%;height:"+this.defaultRowHeight+"px;'><tr><td class='u-grid-group'>&nbsp;</td></tr></table>";
			}
		}
	}
});
dojo.provide('unieap.grid.view.groupbar');
dojo.require("dijit._Widget");
dojo.require("dijit._Templated");

dojo.declare('unieap.grid.GroupBar', [dijit._Widget, dijit._Templated], {
	
	nodeWidth: null,
	
	label: null,
	
	name: null,
	
	templateString: '<div dojoAttachPoint="groupNode" class="u-grid-group-node">' + 
						'<div></div>' + 
						'<div dojoAttachPoint="commitBtn" class="u-grid-group-btn u-grid-group-btnNormal"></div>' + 
					'</div>',
					
	postCreate: function() {
		//请选择进行分组的列
		this.label = RIA_I18N.grid.group.tip;
		//提交分组信息
		dojo.attr(this.commitBtn,'title',RIA_I18N.grid.group.sumbitGroup);
		this.nodeWidth = 100;
		this.name = [];
		this.groupNode.firstChild.innerHTML = "<div class=\"text\">"+this.label+"</div>";
		dojo.place(this.domNode, this.grid.domNode, "first");
		
		if (this.autoApply) {
			dojo.style(this.commitBtn, "display", "none");
		} else {
			this.connect(this.commitBtn, "onclick", "commit");
		}
		this.connect(this.grid, "doheadermousedown", "begin");
		this.connect(this.groupNode, "onclick", "removeName");
	},
	
	//begin drag
	begin: function(e) {
		if (dojo.style(e.sourceView.headerNode, "cursor")=="e-resize") return;
		if (!e.cellNode) return; 
		dojo.setSelectable(this.grid.domNode, false);
		this.createProxyNode(e);
		this.dragHandle = dojo.connect(this.grid.domNode, "onmousemove", dojo.hitch(this, "onDrag"));
		this.endHandle = dojo.connect(this.grid.domNode, "onmouseup", dojo.hitch(this, "end"));
		this.dragging = true;
	},
	
	onDrag: function(evt) {
		evt = dojo.fixEvent(evt);
		var node = this.proxy.node;
		dojo.style(node, "display", "block");
		dojo.style(node, "left", (evt.clientX- this.proxy.x )+"px");
		dojo.style(node, "top", (evt.clientY- this.proxy.y)+"px");
		var offsetY  = evt.clientY- this.proxy.y;
		if (-5<offsetY && offsetY<10) {
			this.groupReady(true);
		} else {
			this.groupReady(false);
		}
	},
	
	//end drag
	end: function(e) {
		dojo.style(this.proxy.node, "display", "none");
		dojo.style(this.arrowTopNode, "display", "none");
		dojo.style(this.arrowBottomNode, "display", "none");
		dojo.setSelectable(this.grid.domNode, true);
		dojo.disconnect(this.dragHandle);
		dojo.disconnect(this.endHandle);
		this.send();
		this.groupReady(false);
		this.dragHandle = null;
		this.endHandle = null;
		this.dragging = true;
	},
	
	groupReady: function(isReady) {
		this.prepared = isReady;
		var width = this.name.length*(this.nodeWidth);
		dojo.style(this.arrowTopNode, "left", width+"px");
		dojo.style(this.arrowBottomNode, "left", width+"px");
		dojo.style(this.arrowTopNode, "display", isReady?"block":"none");
		dojo.style(this.arrowBottomNode, "display", isReady?"block":"none");
	},
	
	createProxyNode: function(evt) {
		var proxy = this.proxy || {
			node: dojo.create('div', {'class':'u-grid-group-dragProxy'})
		};
		var posTarget = dojo.coords(evt.cellNode,true);
		var posGrid = dojo.coords(evt.grid.domNode,true);
		proxy.x =evt.clientX - posTarget.x + posGrid.x;
		proxy.y = evt.clientY - posTarget.y + posGrid.y ;
		proxy.cell = evt.cell;
		var node = proxy.node;
		
		dojo.style(node, "width", dojo.style(evt.cellNode, "width")+"px");
		dojo.style(node, "height", this.grid.managers.get("RowManager").defaultRowHeight-1+"px");
		dojo.style(node, "top",(posTarget.y - posGrid.y)+"px");
		dojo.style(node, "left",(posTarget.x - posGrid.x)+"px");
//		dojo.style(node, "display", "block");
		node.innerHTML = evt.cell.label || evt.cell.name;
		if (this.proxy == null) {
			this.proxy = proxy;
			this.grid.domNode.appendChild(node);
		}
		
		//
		this.arrowTopNode = this.arrowTopNode 
			|| dojo.create('div', {'class':'u-grid-group-arrow u-grid-group-arrow-top'});
		this.arrowBottomNode = this.arrowBottomNode 
			|| dojo.create('div', {'class':'u-grid-group-arrow u-grid-group-arrow-bottom'});
		this.groupNode.appendChild(this.arrowTopNode);
		this.groupNode.appendChild(this.arrowBottomNode);
	},
	
	removeName: function(e) {
		var target = e.target,
			cloneName = [],
			cellname = dojo.attr(target, "cellname");
			
		if(target && cellname){
			for(var i=0; n=this.name[i]; i++){
				if (n==cellname) {
					continue;
				}
				cloneName.push(n);
			}
			if (this.autoApply) {
				this.name = cloneName;
				this.commit();
			} else {
				this.update(cloneName);
			}
		}
	},
	
	send: function() {
		if (!this.prepared) {
			return;
		}
		var cell = this.proxy.cell;
		var name = this.name;
		for (var i=0,n; n=name[i]; i++) {
			if (n==cell.name) {
				this.prepared = false;
				return;
			}
		}
		name.push(cell.name);
		
		if (this.autoApply) {
			this.commit();
		} else {
			this.update(name);
		}
		this.prepared = false;
	},
	
	//update name and group bar display
	update: function(inName) {
		this.name = inName;
		if (dojo.isArray(inName) && inName.length>0) {
			var temp = null,
				label = null,
				html = [],
				layout = this.grid.managers.get("LayoutManager");
			for(var i=0; cellName=inName[i]; i++){
				label = layout.getCell(cellName)?layout.getCell(cellName).label:cellName;
		 		temp =["<div class=\"u-grid-group-cell\">"];
		 		temp.push(label);
		 		temp.push("<div class=\"u-grid-group-cellremove\"");
		 		temp.push(" cellName=\""+cellName+"\"title=\""+ RIA_I18N.grid.group.removeColumn + "\"></div>");
		 		temp.push("</div>");
				html.push(temp.join(""));
		 	}
	 		this.groupNode.firstChild.innerHTML = html.join("<div class=\"u-grid-group-sep\"></div>");
	 	} else {
	 		this.name = [];
	 		this.groupNode.firstChild.innerHTML = "<div class=\"text\">"+this.label+"</div>";
	 	}
	},
	
	commit: function() {
		var group = this.grid.managers.get("GroupManager");
		//清除groupList
		group.groupList=[];
		//修改标志位
		group._flag=true;
		group.setName(this.name);
		group.commit();
	},
	
	reviseWindowHeight: function(h) {
		return h-23;//23 is this group bar height
	},
	
	destroy: function() {
		this.inherited(arguments);
	}
});
dojo.provide('unieap.grid.manager.GroupManager');

dojo.declare("unieap.grid.manager.GroupManager", null, {
	/**
	 * @declaredClass:
	 * 		unieap.grid.manager.GroupManager
	 * @summary:
	 * 		分组控制器
	 * @example:
	 * |<div dojoType="unieap.grid.Grid" width="500px" height="250px"
	 * |	binding="{store:'empDataStore'}" views="{rowNumber:true}"
	 * |	${1}group="{name:['attr_deptno','attr_job'],autoApply:true,groupBar:true}">
	 * |	<header>
	 * |		<cell width="150px" label="部门" name="attr_deptno" decoder="{store:'DEPT',valueAttr:'CODEVALUE',displayAttr:'CODENAME'}"></cell>
	 * |		<cell width="150px" label="职位" name="attr_job" headerStyles="text-align: left;"></cell>
	 * |		<cell width="100px" label="姓名" name="NAME"></cell>
	 * |		<cell width="100px" label="员工编号" name="attr_empno"></cell>
	 * |	</header>
	 * |</div>
	 * ${1}开启分组，只需配置group属性即可
	 * @img:
	 * 		images/grid/grid_group.png
	 */
	
	ui: {
		autoApply:true,
		setName:true,
		getName:true,
		getGroup:true,
		commit:true,
		expandAll:true,
		setExpandAll:true,
		doExpandAll:true,
		isGrouped:true,
		clear:true,
		events: {
		}
	},
	
	_patch: "unieap.grid.manager.GroupPatch",
	
	/**
	 * @summary:
	 * 		分组是否立刻生效
	 * @type:
	 * 		{boolean}
	 * @default:
	 * 		true
	 * @example:
	 * |<div dojoType="unieap.grid.Grid" width="auto" height="380px" 
	 * |	 binding="{store:'empDataStore'}" group="{autoApply:false}">
	 * |		......
	 * |</div>
	 */
	autoApply: null,

	/*-----------以下用于生成手册---平时要注释掉---------------------------*/	
	/**
	 * @summary:
	 * 		是否显示分组工具条
	 * @description:
	 * 		若显示分组工具条，则可以通过拖拽表头到工具条的方式进行分组
	 * @type:
	 * 		{boolean}
	 * @default:
	 * 		false
	 * @example:
	 * |<div dojoType="unieap.grid.Grid" width="auto" height="380px" 
	 * |	 binding="{store:'empDataStore'}" group="{groupBar:true}">
	 * |		......
	 * |</div>
	 */
//	groupBar: null,

	/**
	 * @summary:
	 * 		分组统计
	 * @description:
	 * 		配置此选项可在表头菜单中显示分组统计菜单项，同时可以配置每列默认的统计方法，
	 * 		统计方法有：max、min、sum、avg
	 * 		分别为：最大值、最小值、合计值、平均值
	 * 		例如配置为statistic={attr_sal:'avg',attr_empno:'min'}，则在
	 * 		attr_sal列统计平均值，在attr_empno列统计最小值
	 * 		若配置为statistic={}，则默认不统计，只显示菜单项
	 * 		若不配置，或者配置为statistic=null，则不显示菜单项
	 * @type:
	 * 		{object}
	 * @default:
	 * 		null
	 * @example:
	 * |//只显示菜单项，默认不进行分组统计
	 * |<div dojoType="unieap.grid.Grid" width="auto" height="380px" 
	 * |	 binding="{store:'empDataStore'}" group="{groupBar:true, statistic:{}}">
	 * |		......
	 * |</div>
	 * |
	 * |//默认在attr_sal列统计平均值，在attr_empno列统计最小值
	 * |<div dojoType="unieap.grid.Grid" width="auto" height="380px" 
	 * |	 binding="{store:'empDataStore'}"
	 * |	 group="{statistic:{groupBar:true, attr_sal:'avg',attr_empno:'min'}}">
	 * |		......
	 * |</div> 
	 */
//	statistic: null,
	/*-----------以上用于生成手册---平时要注释掉---------------------------*/

	/**
	 * @summary:
	 * 		分组信息
	 * @description:
	 * 		分组信息为一个数组，其中每个元素为cell的name属性
	 * 		设置此属性可让表格默认按列在数组中的顺序进行分组
	 * @type:
	 * 		{array}
	 * @default:
	 * 		null
	 * @example:
	 * |// 表格将按列绑定名为'attr_deptno'的列进行分组
	 * |<div dojoType="unieap.grid.Grid" width="auto" height="380px" 
	 * |		binding="{store:'empDataStore'}" group="{name:['attr_deptno']}">
	 * |		......
	 * |</div>
	 */
	name: null,
	
	//root group
	root: null,
	
	/**
	 * @summary:
	 * 		分组自动全展开
	 * @description:
	 * 		设置此属性可让表格自动将分组结果以全展开的模式进行展示
	 * @type:
	 * 		{boolean}
	 * @default:
	 * 		false
	 * @example:
	 * |// 表格将按列绑定名为'attr_deptno'的列进行分组
	 * |<div dojoType="unieap.grid.Grid" width="auto" height="380px" 
	 * |		binding="{store:'empDataStore'}" group="{name:['attr_deptno'],expandAll:true}">
	 * |		......
	 * |</div>
	 */
	expandAll: false,
	
	groupList:null,
	
	constructor: function(param) {
		this.autoApply = true;
		dojo.mixin(this, param);
		if (this.name) {
			this.root = new unieap.grid.Group();
			this.root.expand = true; //U_EAP00028990
			this.expandAll && (this.root.expandAll=true);
			this.root.setFormatter(this.formatter);
			this.root.setName(this.name);
			this.root.setManager(this);
			this.setData();
		}
		
		if (this.statistic && this.grid.managers.managers['MenuManager']) {
			this.hookStatisticMenu();
		}
		
		this.connects = [];
		this.groupList=[];
		this.connects.push(dojo.connect(this.grid.managers.get("LayoutManager"), "onAfterAddCell", this, "onAddCell"));
		this.connects.push(dojo.connect(this.grid.managers.get("ViewManager"), "buildViews", this, "onBuildViews"));
		this.connects.push(dojo.connect(this.grid.managers.get("ViewManager"), "onBeforeRefresh", this,"_refreshGroup"));
		this.connects.push(dojo.connect(this.grid.getBinding(), "onAfterSort", this,"_sortGroup"));
	},
	
	/**
	 * @summary:
	 * 		Grid当前是否处于已经分组状态
	 * @description:
	 * 		如果当前的Grid处于已分组状态，返回为true；否则为false
	 * @example:
	 * 	|var result = grid.getManager("GroupManager").isGrouped(); 
	 *  |alert(result);
	 * 	
	 */
	isGrouped: function(){
		if(!this.root){
			return false;
		}else if((!this.root.children) || this.root.children.length == 0){
			return false;
		}else{
			return true;
		}
	},
	
	/**
	 * @summary:
	 * 		分组的当前结果全展开/全收起
	 * @description:
	 * 		调用该API后，如果入参为true，那么当前分组结果将会全展开；
	 * 		如果入参为false，那么当前分组结果将会全收起；
	 * 		调用该API不会影响下一次分组的展开/收起状态，即全展开/全收起为只作用于当前分组结果，不影响expandAll属性。
	 * @param：
	 * 		{boolean} exp
	 * @example:
	 * 	|grid.getManager("GroupManager").doExpandAll(true); 
	 * 
	 * 	
	 */
	doExpandAll: function(exp){
		if(!exp){
			exp = false;
		}
		var oldExp = this.expandAll;
		this.expandAll = exp;
		this._refreshGroup();
		this.expandAll = oldExp;
	},
	
	/**
	 * @summary:
	 * 		分组结果全展开/全收起
	 * @description:
	 * 		调用该API后，如果入参为true，那么当前及之后的分组结果将会全展开；
	 * 		如果入参为false，那么当前及之后的分组结果将会全收起；
	 * 		调用该API不会影响下一次分组的展开/收起状态，即全展开/全收起为只作用于当前分组结果，不影响expandAll属性。
	 * @param：
	 * 		{boolean} exp
	 * @example:
	 * 	|grid.getManager("GroupManager").setExpandAll(true); 
	 * 
	 * 	
	 */
	setExpandAll: function(exp){
		if(!exp){
			exp = false;
		}
		this.expandAll = exp;
		this.root && this.expandAll && (this.root.expandAll=true);
		this._refreshGroup();
	},
	
	//grid刷新时改变group
	_refreshGroup:function(){
		this._flag=true;
		var auto = this.autoApply;
		this.autoApply = true;
		this.setName(this.name);
		this.autoApply = auto;
//		dojo.forEach(this.groupList,function(handle){
//			var group=this.getGroup(handle);
//			group.setExpand(false)
//		},this)
		this.groupList=[];
	},
	
	//grid排序是改变group
	_sortGroup:function(){
		this._flag=true;
		var auto = this.autoApply;
		this.autoApply = true;
		this.setName(this.name);
		this.autoApply = auto;
		//展开分组状态
		dojo.forEach(this.groupList,function(handle){
			var group=this.getGroup(handle);
			group.setExpand(true);
		},this)
		this.commit();
	},
	
	//保存已经展开过的group列表
	insertGroupList:function(groupHandle){
		var flag;
		for(var i=0,l=this.groupList.length;i<l;i++){
			if(dojo.toJson(groupHandle)==dojo.toJson(this.groupList[i])){
				flag=true;
				break;
			}
		}
		!flag&&this.groupList.push(groupHandle)
		
	},
	
	//删除group列表
	removeGroupList:function(groupHandle){
		for(var i=0,l=this.groupList.length;i<l;i++){
			if(dojo.toJson(groupHandle)==dojo.toJson(this.groupList[i])){
				this.groupList.splice(i,1);
				break;
			}
		}
		
	},
	
	onAddCell: function(inCell) {
		this.doPatch(inCell);
	},
	
	onBuildViews: function() {
		if (this.groupBar==true) {
			dojo.require("unieap.grid.view.groupbar");
			this.groupBar = new unieap.grid.GroupBar({grid:this.grid,autoApply:this.autoApply});
			this.grid.managers.get("ViewManager").heightRelation.push(this.groupBar);
		} else if (this.groupBar){
			this.grid.managers.get("ViewManager").heightRelation.push(this.groupBar);
		}
		this.doPatch(this.grid.managers.get("ViewManager"));
		this.doPatch(this.grid.managers.get("RowManager"));
	},


	hookStatisticMenu: function() {
		var menuManager = this.grid.managers.get("MenuManager")
		menuManager.controlsNameList['unieap.grid.GroupStatistic']={};
	},
	
	doPatch: function(inComponent) {
		if (!this.patcher) {
			dojo.require(this._patch);
			var clazz = dojo.getObject(this._patch);
			this.patcher = new clazz();
		}
		this.patcher.doPatch(inComponent);
	},
	
	/**
	 * @summary:
	 * 		设置分组信息
	 * @description:
	 * 		分组信息为一个数组，其中每个元素为cell的name属性。
	 * 		分组信息中的列将被记录下来并进行预处理，若分组控制器的autoApply值为true,分组操作将被立即执行；
	 * 		否则将在用户调用commit方法时执行分组（若配置了groupBar,用户可点击右上角的执行按钮进行分组）。
	 * @param：
	 * 		{array} inName
	 * @example:
	 * |${1}grid.getManager("GroupManager").setName(['attr_empno','attr_empname']); 
	 * 	${1}对Grid的attr_empno,attr_empname两列进行分组，如果参数传入[](空数组)，相当于调用clear方法取消分组
	 * 	
	 */
	setName: function(inName) {
		if(!dojo.isArray(inName)) return;
		
		inName = unieap.array_unique(inName);
		
		//如果inName和this.name相同,表示是多次对同一组分组
		if(dojo.isArray(this.name)&&!this._flag){
			if(this.name.join(',')==inName.join(',')){
				return;
			}else{
				this.groupList=[]
			}
		}
		
		this._flag=false;
		//清除分组情况下，行展开状态
		if(inName.length == 0 || inName[0]=="") {
			this.groupList=[];
			this.name = null;
			this.root = null;
			var binding = this.grid.getBinding();
			binding.setRowData(binding.getRowSet().getData());
			binding.internalRowSet = binding.getRowSet().collect("all");
			this.commit();
		} else {
			//去除组中重复元素
			this.name = inName;
			this.root = new unieap.grid.Group();
			this.root.expand = true;
			this.expandAll && (this.root.expandAll=true);
			this.root.setFormatter(this.formatter);
			this.root.setName(this.name);
			this.root.setManager(this);
			this.setData();
			this.autoApply && this.commit();
		}
	},
	
	/**
	 * @summary:
	 * 		取得分组信息
	 * @return:
	 * 		{array}
	 */
	getName: function() {
		return this.name;
	},
	
	/**
	 * @summary:
	 * 		取得某一分组对象
	 * @param:
	 * 		{array} values 要取得的分组的value
	 * @return:
	 * 		{unieap.grid.Group}
	 * @see:
	 * 		unieap.grid.Group
	 * @example:
	 * |var gm = grid..getManager("GroupManager");
	 * |//按"部门"、"职位"分组
	 * |gm = setName(['attr_deptno','attr_job'])
	 * |//取得部门编码为10，职位为产品经理的分组
	 * |var group = gm.getGroup([10, "产品经理"]);
	 */
	getGroup: function(values) {
		var v = dojo.clone(values);
		return this.root.getGroup(v);
	},
	
	setData: function() {
//		var data = this.grid.getBinding().getRowSet().getData();
//		for (var i=0; i<data.length; i++) {
//			this.root.addRow(data[i]);
//		}
		this.grid.getBinding().getRowSet().forEach(dojo.hitch(this,function(row){
			this.root.addRow(row);
		}));
		
	},
	
	validate: function() {
		if (dojo.isArray(this.name) && this.name.length>0) {} else {
			return;
		}
		var name = [],
			layout = this.grid.managers.get("LayoutManager"),
			cell;
		for (var i=0, n; n=this.name[i]; i++) {
			cell = layout.getCell(n);
			if (cell && cell.name!=null) {
				name.push(cell.name);
			}
		}
		if (name.length!=this.name.length) {
			var auto = this.autoApply;
			this.autoApply = true;
			this.setName(name);
			this.autoApply = auto;
		}
	},
	
	/**
	 * @summary:
	 * 		执行分组
	 * @description:
	 * 		若分组控制器的autoApply值为false时，需要主动调用该方法执行分组
	 */
	commit: function() {
		var views = this.grid.managers.get("ViewManager");
		views.render(views.scrollTop);
//		this.grid.managers.get("ViewManager").render();
		this.groupBar && this.groupBar.update(this.name);
	},
	
	/**
	 * @summary:
	 * 		取消分组
	 * @example:
	 *|grid.getManager("GroupManager").clear(); 
	 */
	clear: function() {
		this.setName([]);
	},
	
	doStatistic: function(rows, name, operation) {
		if (this[operation]) {
			return this[operation].apply(this, [rows, name]);
		} else {
			return "";
		}
	},
	
	formatStatistic: function(name, value) {
		var nameMap = {
			max: RIA_I18N.grid.group.max+": ",
			min: RIA_I18N.grid.group.min+": ",
			sum: RIA_I18N.grid.group.sum+": ",
			avg: RIA_I18N.grid.group.avg+": "
		}
		return (nameMap[this.statistic[name]]||"") + value;
	},
	
	max: function(rows, name) {
		var result = Number.MIN_VALUE ; 
		dojo.forEach(rows,function(row) {
//			var rowObject = new unieap.ds.Row(row,self.grid.getBinding().getRowSet());
//			var value = rowObject.getItemValue(name); 
			var value = row[name];
			value!=null && (result = Math.max(value,result));
		});
		return (Number.MIN_VALUE==result?"":result);
	},
	
	min: function(rows, name) {
		var result = Number.MAX_VALUE ;
		dojo.forEach(rows,function(row) {
//			row[name]!=null && (result = Math.min(row[name],result));
//			var rowObject = new unieap.ds.Row(row,this.grid.getBinding().getRowSet());
//			var value = rowObject.getItemValue(name); 
			var value = row[name];
			value!=null && (result = Math.min(value,result));
		});
		return (Number.MAX_VALUE==result?"":result);
	},
	
	sum: function(rows, name) {
		var result = 0;
		dojo.forEach(rows,function(row) {
//			var rowObject = new unieap.ds.Row(row,this.grid.getBinding().getRowSet());
//			var value = rowObject.getItemValue(name);
			//result += Number(row[name] || 0);
			var value = row[name];
			result += Number(value || 0);
		});
		return result;
	},
	
	avg: function(rows, name) {
		if (!rows.length||rows.length==0) {
			return "";
		}
		var result = 0;
		dojo.forEach(rows,function(row) {
//			var rowObject = new unieap.ds.Row(row,this.grid.getBinding().getRowSet());
//			var value = rowObject.getItemValue(name);
//			result += Number(row[name] || 0);
			var value = row[name];
			result += Number(value || 0);
		});
		//wty -- format to #.## U_EAP00028990
		var oldValue = result/rows.length;
		var format = "#.##";
		dojo.require("dojo.number");
		dojo.require("unieap.patch.number");
		var newValue = dojo.number.format(oldValue,{'pattern': format});
		return newValue;
	},
	
	destroy: function() {
        for(var i=0,l=this.connects.length;i<l;i++){
            dojo.disconnect(this.connects[i]);
        }
		if(this.groupBar&&this.groupBar!=true){
			this.groupBar.destroy();
		}
	}
});

dojo.provide("unieap.grid.Group");
dojo.declare("unieap.grid.Group", null, {
	/**
	 * @declaredClass:
	 * 		unieap.grid.Group
	 * @summary:
	 * 		分组对象
	 * @description:
	 * 		每个分组对象对应一个分组。
	 * 		可通过此对象取得此分组的
	 */
	
	/**
	 * @summary:
	 * 		上层分组
	 * @type:
	 * 		unieap.grid.Group
	 */
	parent: null,
	
	name: null,
	
	value: null,
	
	expand: null,
	//是否全展开分组 U_EAP00028990
	expandAll: false,
	
	/**
	 * @summary:
	 * 		子分组
	 * @type:
	 * 		{array}
	 */
	children: null,
	
	/**
	 * @summary:
	 * 		本分组内的所有行数据
	 * @type:
	 * 		{array}
	 */
	rows: null,
	
	/**
	 * @summary:
	 * 		分组行格式化
	 * @example:
	 *|<div id="grid" id="grid" dojoType="unieap.grid.Grid" width="80%" height="400px" binding="{store:'empDataStore'}"
     *|		group="{name:['attr_province','NAME'],groupBar:true,formatter:groupFormatter}">
     *|		<fixed>
     *|		   <cell label="员工编号（attr_empno）" width="10%" name="attr_empno" headerStyles="text-align: left;"></cell>
     *|		</fixed>
     *|		<header>
     *|		   <cell width="10%" label="姓名" name="NAME" headerStyles="text-align: left;"></cell>
     *|		   <cell width="10%" label="部门" name="attr_deptno" decoder="{store:'DEPT',valueAttr:'CODEVALUE',displayAttr:'CODENAME'}"></cell>
     *|		   <cell width="20%" label="职位" name="attr_job" headerStyles="text-align: left;"></cell>
     *|		   <cell width="20%" label="所在省" editor="{editorClass:'unieap.form.ComboBox',editorProps:{id:'ed_province',dataProvider:{store: 'p'}}}" 
     *|         name="attr_province" decoder="{store:'p',valueAttr:'CODEVALUE',displayAttr:'CODENAME'}"></cell>
     *|		   <cell width="20%" label="所在市" name="attr_city" cascade="{primary:'ed_province',getCascadeStore:getCascade}" 
     *|         decoder="{store:'c1',valueAttr:'CODEVALUE',displayAttr:'CODENAME'}"></cell>
     *|		   <cell width="10%" label="工资" name="attr_sal"></cell>
     *|		</header>
	 *|</div>
	 *|<script>
	 *|		function groupFormatter(name, value) {
     *|		if (name=="attr_province") {
     *|			return "省份---"+ (value==12?"辽宁":"浙江");
     *|		} else {
     *|		   return name+"+++"+value;
     *|		}
	 *|}
	 *|</script>
	 * @img:
	 * 		images/grid/formatter.png
	 */
	formatter: null,
	
	constructor: function(parent) {
		this.parent = parent;
		this.children = {}; 
		this.rows = [];
	},
	
	//设置分组
	setManager: function(inManager) {
		this.manager = inManager;
	},
	/*
	 * @summary:
	 * 		设置本分组的名称
	 * @param:
	 * 		{string} inName
	 * @example:
	 *|function setGroup(){
     *|	var array = new Array();
     *|	array.push("attr_deptno");
     *|	array.push("attr_job");
     *|	grid.getManager("GroupManager").setName(array); 
	 *|}  
	 */
	setName: function(inName) {
		this.name = inName;
	},
	
	/**
	 * @summary:
	 * 		取得本分组的名称
	 * @return
	 * 		{string}
	 * @example:
	 * |var group = grid.getManager("GroupManager").getGroup([10]);
	 * |var groupName = group.getName();
	 */
	getName: function() {
		return this.name[0];
	},
	
	setValue: function(inValue) {
		this.value = inValue;
	},
	
	/**
	 * @summary:
	 * 		取得本分组的值
	 * @description:
	 * 		如，按省分组，此组是辽宁省，那么此分组的值即为“辽宁省”
	 * @return:
	 * 		{object}
	 */
	getValue: function() {
		return this.value;
	},
	
	/**
	 * @summary:
	 * 		设置本分组格式化方法
	 * @param:
	 * 		{function} inFormatter
	 */
	setFormatter: function(inFormatter) {
		this.formatter = inFormatter;
	},
	
	getFormatter: function() {
		return this.formatter;
	},
	
	/**
	 * @summary:
	 * 		判断此分组是否被展开
	 * @return:
	 * 		{boolean}
	 */
	isExpand: function() {
		return this.expand;
	},
	
	/**
	 * @summary:
	 * 		设置此分组是否被展开
	 * @param:
	 * 		{boolean} expand
	 * @example:
	 * |var gm = grid.getManager("GroupManager");
	 * |//按"部门"、"职位"分组
	 * |gm = setName(['attr_deptno','attr_job'])
	 * |//取得部门编码为10的分组
	 * |var group1 = gm.getGroup([10]);
	 * |group1.setExpand(true);
	 * |gm.commit();
	 */
	setExpand: function(expand) {
		this.expand = expand; //U_EAP00028990
	},
	
	
	addRow: function(inRow) {
//		this.rows.push(inRow);
//		if (this.name.length > 0) {
//			var child = this.getChild(inRow[this.getName()]);
//			child.addRow(inRow);
//		}
		this.rows.push(inRow.getData());
		if (this.name.length > 0) {
			var child = this.getChild(inRow.getItemValue(this.getName()));
			child.addRow(inRow);
		}
	},

	/**
	 * @summary:
	 * 		获得分组对象	
	 * @param:
	 * 		{array} values 要取得的分组的value
	 * @return:
	 * 		{unieap.grid.Group}
	 * @example:
	 * |var gm = grid.getManager("GroupManager");
	 * |//按"部门"、"职位"分组
	 * |gm = setName(['attr_deptno','attr_job'])
	 * |//取得部门编码为10的分组
	 * |var group1 = gm.getGroup([10]);
	 * |//取得group1下职位为产品经理的分组
	 * |var group2 = grou1.getGroup(["产品经理"]);
	 */
	getGroup: function(values) {
		if (!dojo.isArray(values)) return null;
		if (values.length == 0) {
			return this;
		} else {
			var value = values.shift();
			return this.getChild(value).getGroup(values);
		}
		
	},
	
	getChild: function(value) {
		value == null&&(value = RIA_I18N.grid.group.noValue);
		if (!this.children[value]) {
			var cname = [];
			for (var i=1; i<this.name.length; i++) {
				cname.push(this.name[i]);
			}
			this.children[value] = new unieap.grid.Group(this);
//			this.children[value].expand = true; U_EAP00028990
			this.manager.expandAll && (this.children[value].expand=true) && (this.children[value].expandAll=true);
			this.children[value].setManager(this.manager);
			this.children[value].setName(cname);
			this.children[value].setValue(value);
			this.children[value].setFormatter(this.formatter);
		}
		return this.children[value];
	},
	
	//构造渲染使用的rowData,均是Row对象的getData方法返回的结果所组成的数组
	toRowData: function() {
		var rowData = [];
		if (this.expand) {
			var count = 0;
			for (child in this.children) {
				count++;
				rowData = rowData.concat(this.getChild(child).toRowData());
			}
			if (count==0) {
				rowData = rowData.concat(this.rows);
			}
		}
		this.parent && rowData.unshift(this.getGroupRow());
		this.manager.statistic && rowData.push(this.getStatisticRow());
		return rowData;

	},
	
	getHandle: function() {
		if (this.parent==null) {
			return null;
		}
		var handle = [this.value];
			parentHandle = this.parent.getHandle();
		if (parentHandle) {
			handle = parentHandle.concat(handle);
		}
		return handle;
	},
	
	//分组标题行数据
	getGroupRow: function() {
//		var data = {};
//		data.name = this.parent.getName();
//		data.value = this.getValue();
//		data.isExpand = this.expand;
//		data.formatter = this.formatter;
//		data.handle = this.getHandle();
//		
//		data["_g"] = data["_g"]||{};
//		data["_g"]["gr"] = true;
//		
//		return data;

		var row = new unieap.ds.Row(this.manager.grid.getBinding().getRowSet(),{});
		row.setItemValue("name",this.parent.getName());
		row.setItemValue("value",this.getValue());
		row.setItemValue("isExpand",this.expand);
		row.setItemValue("formatter",this.formatter);
		row.setItemValue("handle",this.getHandle());
		row.setIdentifier("_g",{gr:true})
		
		return row.getData();
	},
	
	getStatisticRow: function() {
		dojo.require('unieap.util.util');
		var rs = this.manager.grid.getBinding().getRowSet(),
			statistic = this.manager.statistic,
			//data = {},
			dataType = null, meta = null;
		var row = new unieap.ds.Row(this.manager.grid.getBinding().getRowSet(),{});
		
		for (name in statistic) {
			meta = rs.getMetaData(name);
			if (meta) {
				dataType = unieap.getDataType(meta.getDataType());
			} else {
				dataType = this.manager.grid.managers.get("LayoutManager").getCell(name).dataType;
			}
			if (dataType=="number" || dataType=="date") {
				//data[name] = this.manager.doStatistic(this.rows, name, statistic[name]);
				row.setItemValue(name,this.manager.doStatistic(this.rows, name, statistic[name]));
			}
		}
//		data["_g"] = data["_g"]||{};
//		data["_g"]["gsr"] = true;
//		return data;
		row.setIdentifier("_g",{gsr:true})
		
		return row.getData();
	}
});

dojo.provide("unieap.grid.GroupStatistic");
dojo.declare("unieap.grid.GroupStatistic", null, {
	constructor: function(params) {
		dojo.mixin(this,params)
	},
	
	initMenu: function() {
		var statisticMenu = new unieap.menu.Menu({});
		var maxItem = new unieap.menu.MenuItem({
			//最大值
			label: RIA_I18N.grid.group.max,
			onClick: dojo.hitch(this, "updateStatistic", "max")
		});
		var minItem = new unieap.menu.MenuItem({
			//最小值
			label: RIA_I18N.grid.group.min,
			onClick: dojo.hitch(this, "updateStatistic", "min")
		});
		var sumItem = new unieap.menu.MenuItem({
			//合计值
			label: RIA_I18N.grid.group.sum,
			onClick: dojo.hitch(this, "updateStatistic", "sum")
		});
		var avgItem = new unieap.menu.MenuItem({
			//平均值
			label: RIA_I18N.grid.group.avg,
			onClick: dojo.hitch(this, "updateStatistic", "avg")
		});
		var clearItem = new unieap.menu.MenuItem({
			//清除统计
			label: RIA_I18N.grid.group.clear,
			onClick: dojo.hitch(this, "updateStatistic")
		});
		statisticMenu.addChild(maxItem);
		statisticMenu.addChild(minItem);
		statisticMenu.addChild(sumItem);
		statisticMenu.addChild(avgItem);
		statisticMenu.addChild(new unieap.menu.MenuSeparator());
		statisticMenu.addChild(clearItem);
		
		var m = this.menuManager.getMenu();
		var menu = new unieap.menu.Menu()
		
		this.statisticItem = new unieap.menu.PopupMenuItem({
			//分组统计
			label: RIA_I18N.grid.group.statistics,
			popup: statisticMenu
		});
		m.addChild(new unieap.menu.MenuSeparator());
		m.addChild(this.statisticItem);
	},
	
	updateMenu: function() {
		var cell = this.menuManager.getCell();
		if (cell.name) {
			var rs = this.grid.getBinding().getRowSet();
			meta = rs.getMetaData(cell.name);
			if (meta) {
				dataType = unieap.getDataType(meta.getDataType());
			} else {
				dataType = cell.dataType;
			}
			if (dataType=="number" || dataType=="date") {
				this.statisticItem.setDisabled(false);
			} else {
				this.statisticItem.setDisabled(true);
			}
		} else {
			this.statisticItem.setDisabled(true);
		}
		
	},
	
	updateStatistic: function(operation) {
		var name = this.menuManager.getCell().name,
			views = this.grid.managers.get("ViewManager"),
			groupManager = this.grid.managers.get("GroupManager");
		if (operation) {
			groupManager.statistic = groupManager.statistic||{};
			groupManager.statistic[name] = operation;
		} else {
			if (groupManager.statistic && groupManager.statistic[name]) {
				delete groupManager.statistic[name];
			}
		}
		views.refresh();
	}
});
dojo.provide('unieap.grid.manager.Individual');

dojo.declare("unieap.grid.manager.Individual", null, {
	/**
	 * @declaredClass:
	 * 		unieap.grid.manager.Individual
	 * @summary:
	 * 		个性化模块
	 * @description:
	 * 		此模块在数据表格的工具栏(toolbar)上增加一个按钮，点击按钮可弹出一个设置表格列布局的对话框。
	 * 		用户可在对话框中设置表格中每一列的隐藏/显示，锁定/解锁及各列的前后次序。
	 * 		对话框的上移下移按钮可以调整格列的前后次序，应用按钮可以将设置应用到当前页面，保存可以更新本地的缓存数据，保存用户的个性化设置。
	 * 		个性化功能不支持复杂表头和多标题表格。
	 * @example:
	 * |	<div dojoType="unieap.grid.Grid" width="500px" height="250px" style="left: 150px;top:200px;"
	 * |		binding="{store:'empDataStore'}" views="{rowNumber:true}">
	 * |		<fixed>
	 * |			<cell label="员工编号" name="attr_empno" width="100px"></cell>
	 * |		</fixed>
	 * |		<header>
	 * |			<cell width="100px"  name="attr_job" label="职位"></cell>
	 * |			<cell width="100px" name="NAME" label="姓名"></cell>
	 * |			<cell width="100px" name="attr_deptno" label="部门" decoder="{store:'DEPT',valueAttr:'CODEVALUE',displayAttr:'CODENAME'}"></cell>
	 * |			<cell width="100px" name="attr_sal" label="工资" headerStyles="text-align: left;"></cell>
	 * |		</header>
	 * |		<toolbar individual="true"></toolbar>
	 * |	</div>
	 * @img:
	 * 		images/grid/grid_individual.png
	 */
	
	
	ui: {
		events: {
			
		}
	},
	
	constructor: function(param) {
		dojo.mixin(this, param);
		this.connects = [];
		var div = dojo.create('div');
		var node = dojo.create('div',{
			'class':'u-grid-custom-div'
		},div);
		var upBtn = dojo.create('button',{
			'class':'u-grid-custom-up'
		},node);
		var downBtn = dojo.create('button',{
			'class':'u-grid-custom-down'
		},node);
		var saveBtn = dojo.create('button',{
			'class':'u-grid-custom-save'
		},node);
		var applyBtn = dojo.create('button',{
			'class':'u-grid-custom-apply'
		},node);
		upBtn.innerHTML=RIA_I18N.grid.individual.moveup;
		downBtn.innerHTML=RIA_I18N.grid.individual.movedown;
		saveBtn.innerHTML=RIA_I18N.grid.individual.save;
		applyBtn.innerHTML=RIA_I18N.grid.individual.apply;
		
		this.connects.push(dojo.connect(upBtn,"onclick",this, "rowUp"));
		this.connects.push(dojo.connect(downBtn,"onclick",this, "rowDown"));
		this.connects.push(dojo.connect(saveBtn,"onclick",this, "saveIndividual"));
		this.connects.push(dojo.connect(applyBtn,"onclick",this, "applyIndividual"));
		
		this.sequence = [];
		this.view = node;
	},
	
	destroy : function() {
		while(this.connects.length>0) {
			dojo.disconnect(this.connects.pop());
		}
		this.structureGrid && this.structureGrid.destroy();
	},
	
	updateView: function() {
		var cs = this.grid.managers.get("LayoutManager").customStructure;
		this.sequence = [];
		this.fixed = cs.fixed;
		for (var i = 0; i < cs.seq.length; i++) {
			this.sequence.push(cs.seq[i]);
		}
		this.structureGrid && this.structureGrid.destroy();
		var layout = this.grid.managers.get("LayoutManager");
		var ds = this.getStore();
		
		var layout = this.buildStructure();
		this.structureGrid =  new unieap.grid.Grid({layout: {structure: layout}, 
			binding: {store:ds}, width: "300px", height:"250px"});
		
		this.view.appendChild(this.structureGrid.domNode);
		
	},
	
	getStore: function() {
		//获得LayoutManager对象
		var layoutMan=this.grid.managers.get("LayoutManager"), 
			//最初是的列对象,为一个数组
			columns = layoutMan.origin.columns, 
			//原始列的序号,例如[0,1,2,3,4]
			orginSeq=layoutMan.origin.sequence, 
			//LayoutManager对象中的customStructure.seq,为当前的序号,比如[0,1,2],表示第4和5列隐藏
			seq=this.sequence,
			
			//用户重新排序后的顺序列表
			newSeq=layoutMan._newSequence; 
		
		//一些基本变量
		var _seq=(newSeq&&newSeq.length>0&&newSeq)||orginSeq,
			hide=[],
			fixedRows=[];
		
		//获得隐藏的列序号
		//如果用户重排过序号就从重排的序号中(_newSequence)查找,否则从原始序号中查找
		for(var i=0,l=_seq.length;i<l;i++){
			var show=false;
			for(var j=0,k=seq.length;j<k;j++){
				if(_seq[i]==seq[j]){
					show=true;
					break;
				}
			}
			show || hide.push(_seq[i]);
		}

		var rows = [];
		//处理显示的列,并将锁定的列序号放在最前面
		for(var index=0,l=seq.length;index<l;index++){
			if(index<this.fixed){
				fixedRows.push({"name": columns[seq[index]].label,
							"show": 1,
							"lock": 1,
							"index": seq[index]});	
			}else{
				rows.push({"name": columns[seq[index]].label,
							"show": 1,
							"lock": 0,
							"index": seq[index]});
			}
		}
		
		//将锁定列数据放到rows数组的最前面
		fixedRows.length>0&&Array.prototype.unshift.apply(rows,fixedRows);
		
		//处理隐藏的列,如果用户重排过序号就从重排的序号中(_newSequence)查找,否则从原始序号中查找
		for(var index=0,l=hide.length;index<l;index++){
			var tempIndex=-1;
			newSeq&&(tempIndex=dojo.indexOf(newSeq,hide[index]));
			if(this.fixed>0){
				if(hide[index]>=this.fixed){
					tempIndex==-1?(tempIndex=hide[index]):(tempIndex=tempIndex);
					rows.splice(tempIndex,0,{
						"name": columns[hide[index]].label,
						"show": 0,
						"lock": 0,
						"index": hide[index]
					});
				}else{
					tempIndex==-1?(tempIndex=this.fixed):(tempIndex=tempIndex);
					
					rows.splice(tempIndex,0,{
						"name": columns[hide[index]].label,
						"show": 0,
						"lock": 0,
						"index": hide[index]
					});
				}
			}else{
				tempIndex==-1?(tempIndex=hide[index]):(tempIndex=tempIndex);
				rows.splice(tempIndex,0,{
					"name": columns[hide[index]].label,
					"show": 0,
					"lock": 0,
					"index": hide[index]
				});
			}
		}
		var store = new unieap.ds.DataStore();
		//store.getRowSet().addRows(rows);
		var rowset = store.getRowSet();
		for(var i=0;i<rows.length;i++){
			var row = rowset.insertRow({},i);
			row.setItemValue("name",rows[i].name);
			row.setItemValue("show",rows[i].show);
			row.setItemValue("lock",rows[i].lock);
			row.setItemValue("index",rows[i].index);
		}
		store.getRowSet().resetUpdate();
		return store;
	},
	
	buildStructure: function() {
		var layout = [];
		var header={};
		header["rows"] = this.buildRows();
		layout.push(header);
		return layout;
	},
	
	buildRows: function() {
		var rows = [];
		rows.push(this.buildColumns());
		return rows;
	},
	
	buildColumns: function() {
		var row = [];
		var column = {
			name : "show",
			editor:{editorClass:"unieap.form.CheckBox",editorProps:{checkedValue:1,uncheckedValue:0}},
			label: RIA_I18N.grid.individual.visible,
			width: "50px",
			canSort: false,
			noResize : true
		};
		row.push(column);
		
		column = {
			name : "lock",
			editor:{editorClass:"unieap.form.CheckBox",editorProps:{checkedValue:1,uncheckedValue:0}},
			label: RIA_I18N.grid.individual.lock,
			width: "50px",
			canSort: false,
			noResize : true
		};
		row.push(column);
		
		column = {"editorProps":{},
			name : "name",
			label : RIA_I18N.grid.individual.column,
			width : "150px",
			canSort: false
		};
		row.push(column);
		return row;
	},
	
	rowUp: function() {
		var index = this.structureGrid.managers.get("RowManager").getCurrentRowIndex();
		if (index <= 0) {return;}
		
		var rs = this.structureGrid.getBinding().getRowSet();
		rs.rowsMove(index, index+1, null, rs,index-1,null);
		this.structureGrid.managers.get("RowManager").updateCurrnetRow(index-1);
		this.structureGrid.refresh();
		this._sortChanged=true;
	},
	
	rowDown: function() {
		var index = this.structureGrid.managers.get("RowManager").getCurrentRowIndex();
		if (index >= this.structureGrid.managers.get("RowManager").getRowCount()-1) {return;}
		
		var rs = this.structureGrid.getBinding().getRowSet();
		rs.rowsMove(index, index+1, null, rs,index+1,null);
		this.structureGrid.managers.get("RowManager").updateCurrnetRow(index+1);
		this.structureGrid.refresh();
		this._sortChanged=true;
		
	},
	
	configCustom: function() {
		//var rows = this.structureGrid.getBinding().getRowData();
		var rowset = this.structureGrid.getBinding().getRowSet();
		var seq = [];
		var header = [];
		var fixed = 0;
//		for (var i = 0; rows[i]; i++) {
//			if (rows[i].show) {
//				seq.push(rows[i].index);
//				if (rows[i].lock) {
//					 fixed++;
//					 header.push(rows[i].index);
//				}
//			}
//		}
		rowset.forEach(function(row){
			if (row.getItemValue("show")) {
				seq.push(row.getItemValue("index"));
				if (row.getItemValue("lock")) {
					 fixed++;
					 header.push(row.getItemValue("index"));
				}
			}
		})
	
		for (var i = 0; i < seq.length; i++) {
			var inHeader = false;
			for (var j = 0; j < header.length; j++) {
				if (seq[i] == header[j]) {
					inHeader = true;
					break;
				}
			}
			inHeader || header.push(seq[i]);
		}

		
		if (header.length <= 0) {
//			alert("必须设置至少一列可见"); // MODIFY BY TENGYF
			alert(RIA_I18N.grid.group.columnVisible);
			return;
		}
		
		this.sequence = header;
		this.fixed = fixed;
		this.buildCustomStore(header, fixed);
	},
	
	applyIndividual: function(e) {
		if(e){
			this.configCustom();
		}
		
		//发生了排序操作
		if(this._sortChanged){
			//var rows = this.structureGrid.getBinding().getRowData();
			var rowset = this.structureGrid.getBinding().getRowSet();
			var tempSequence=[];
//			for(var i=0,l=rows.length;i<l;i++){
//				this._newSequence.push(rows[i].index);
//			}
			rowset.forEach(function(row){
				tempSequence.push(row.getItemValue("index"));
			})
			this.grid.managers.get("LayoutManager")._newSequence=tempSequence;
			this._sortChanged=false;
		}
		
		this.grid.managers.get("LayoutManager").sortCell(this.sequence, this.fixed);
		
		
		
	
		//关闭对话框
		this.dialog && this.dialog.close();
		
	},
//保存个性化设置到本地的缓存数据
	buildCustomStore: function(header, fixed) {
		var cs = [];
		var cols = this.grid.managers.get("LayoutManager").origin.columns;
		var islocked = 0;
		for (var i = 0; i < header.length; i++) {
			if (i < fixed) {
				islocked = 1;
			} else {
				islocked = 0;
			}
			cs.push({lock: islocked, show: 1, name: cols[header[i]].name,index: header[i],width:cols[header[i]].width});
		}
		this.cs = cs
	},

	saveIndividual: function() {
		this.configCustom();
        var inData = {
            id:this.grid.getOriId(), data:this.cs
        };
        if(unieap.WEB_APP_NAME==null){
            inData.callback && inData.callback();
            return;
        }
        var value=inData['data'];
        if(!inData||!(value instanceof Array)){
            return;
        }

        var obj = window["unieap.individual"];
        if(obj&&(dojo.toJson(obj[inData["id"]])==dojo.toJson(value))){
            return;
        }
        var dc = new unieap.ds.DataCenter();
        dc.setParameter("individual",value);
        //儲存本地
        window.localStorage.setItem(unieap.WEB_PAGE_NAME+inData.id, JSON.stringify(value));
	},
	
	//删除个性化信息 MD在修改grid的layout后触发 之前的个性化信息失效
	//callback为提示用户grid构造变更
	deleteIndividual: function() {
		var callBackFunc = function(){
			MessageBox.alert({message:RIA_I18N.grid.individual.layoutChanged});
		}

        window.localStorage.setItem(unieap.WEB_PAGE_NAME+this.grid.getOriId(), []);
        callBackFunc();
	},
	resetIndividual: function() {
		// unieap.Action.setIndividual({id:this.grid.getOriId(), data:[]});
        window.localStorage.setItem(unieap.WEB_PAGE_NAME+this.grid.getOriId(), []);
		var layout = this.grid.managers.get("LayoutManager");
		//清除重排后的序号
		delete layout._newSequence;
		layout.sortCell(layout.origin.sequence);
		for (var i = 0; i < layout.customStructure.seq.length; i++) {
			this.sequence.push(layout.customStructure.seq[i]);
		}
		document.body.click();
	},
	
	showDialog: function() {
		this.updateView();
		dojo.require("unieap.dialog.DialogUtil");
		this.dialog = DialogUtil.showDialog({inner:this.view,resizable:false,isExpand:false,width:400,height:320,title:RIA_I18N.grid.individual.title});
	},
	
	setSource: function(source) {
		this.dialogSource = source;
	}
	
});
dojo.provide('unieap.grid.manager.MenuManager');
dojo.require('unieap.menu.Menu');
dojo.declare("unieap.grid.manager.MenuManager", null, {
	/**
	 * @summary:
	 * 		菜单控制器
	 * @description:
	 * 		Grid的菜单控制器。
	 * @declaredClass:
	 * 		unieap.grid.manager.MenuManager
	 * @example:
	 * |<div dojoType="unieap.grid.Grid" menu="{onBeforeMenuClick:fn}}"
	 * |	 width="100%" height="350px">
	 * |</div>
	 * |function fn(cell){
	 * |	console.info(cell.label);
	 * |	return true; //一定要有返回true,否则菜单项不会弹出来
	 * |}
	 * |此时点击标表头上的菜单按钮,会在控制台中打印出表所在的列名
	 */
	ui:{
		alwaysShowMenu:true,
		onBeforeMenuClick:true,
		addMenuControl:true,
		getMenu:true,
		getCell:true
	},
	
	//要加载的control对象的declaredClass
	controlsNameList:null,
	
	/*-----------以下用于生成手册---平时要注释掉---------------------------*/
	/**
     * @summary:
     * 		菜单点击前事件
     * @description:
     * 		菜单点击前将触发此事件，若返回true，则菜单会弹出来，返回false，将不弹出菜单
     * @param:
     * 		{unieap.grid.Cell} cell 菜单所在列的Cell对象
     * @example:
	 * |<div dojoType="unieap.grid.Grid" menu="{onBeforeMenuClick:fn}}">
	 * |......
	 * |</div>
	 * |function fn(cell){
	 * |	console.info(cell.label);
	 * |	return true; //一定要有返回true,否则菜单项不会弹出来
	 * |}
     */
//	onBeforeMenuClick: null,
	/*-----------以上用于生成手册---平时要注释掉---------------------------*/	
	
	/**
	 * @summary:
	 * 		是否总是在Grid表头上显示菜单按钮(点击该按钮会弹出菜单)
	 * @description:
	 * 		该属性有效的前提是要弹出的菜单必须有子节点或者用户自自定义了onBeforeMenuClick函数。
	 * 		用户可以修改global.js中的unieap.widget变量来全局设定是否在表头上显示菜单按钮
	 * @type:
	 * 		 {boolean}
	 * @example:
	 * |<div dojoType='unieap.grid.Grid' filter="{}" menu="{alwaysShowMenu:true}"></div>
	 * |<div dojoType="unieap.grid.Grid' menu="{alwaysShowMenu:true,onBeforeMenuClick:fn}">
	 * |下面的代码不会在Grid表头上显示菜单按钮
	 * |<div dojoType='unieap.grid.Grid' menu="{alwaysShowMenu:true}"></div>
	 * 
	 */
	alwaysShowMenu:unieap.widget.grid.alwaysShowMenu,
	
	/*
	 * Grid菜单的事件句柄
	 */
	_connectHandlers: null,
	
    constructor: function(param){
    	this._connectHandlers = [];
        dojo.mixin(this, param);
        this.menu = new unieap.menu.Menu({});
		this.initEvent();
		this.menuControls=[];

		//延时实例化MenuControls
		setTimeout(dojo.hitch(this,function(){
			this.initControls();
		}),0);
		
		
    },

	initEvent:function(){
		this._connectHandlers.push(dojo.connect(document, 'onclick', dojo.hitch(this, function(){
            dijit.popup.close(this.menu);
        })));
		var viewManager=this.grid.managers.get('ViewManager');
		var self=this;
		this._connectHandlers.push(dojo.connect(viewManager,'onHeaderRender',dojo.hitch(self,self.onHeaderRender)));
		this._connectHandlers.push(dojo.connect(viewManager,'onHeaderMouseOver',dojo.hitch(self,self.onHeaderMouseOver)));
		this._connectHandlers.push(dojo.connect(viewManager,'onHeaderMouseOut',dojo.hitch(self,self.onHeaderMouseOut)));
	},
	
	//初始化控制器
	initControls:function(){
		var list=this.controlsNameList;
		for(var item in list){
			dojo.require(item);
			var clazz=dojo.getObject(item);
			var controler=new clazz({
				grid:this.grid,
				menuManager:this,
				args:list&&list[item]||{}
			});
			this.addMenuControl(controler);
		}
	},
	
	/**
	 * @summary:
	 * 		增加菜单控制器
	 * @description:
	 * 		菜单控制器需实现以下方法
	 * 		initMenu:初始化方法
	 * 		updateMenu:更新菜单方法
	 * @param:
	 * 		{object} control 自定义的菜单控制对象
	 * @example:
	 * |	dojo.declare("unieap.grid.myMenu", null, {
	 * |		constructor:function(grid){
	 * |			this.grid=grid;
	 * |			this.menuManager=grid.getManager('MenuManager');
	 * |		},
	 * |		initMenu:function(){
	 * |			var m=this.menuManager.getMenu();
	 * |			this.myMenuItem=new unieap.menu.MenuItem({label:'自定义'});
	 * |			m.addChild(this.myMenuItem);
	 * |		},
	 * |		updateMenu:function(){
	 * |			var cell=this.menuManager.getCell();
	 * |			if(cell&&cell.name=='yangzz'){
	 * |				this.myMenuItem.setDisabled(true);
	 * |			}else{
	 * |				this.myMenuItem.setDisabled(false);
	 * |			}
	 * |		},
	 * |		validateMenu:function(){
	 * |			return true;
	 * |		}
	 * |	});
	 * |	var myMenuControl=new unieap.grid.myMenu(grid);
	 * |	menuManage.addMenuControl(myMenuControl);	
	 * 		添加一个自定义的MenuControl
	 */
	addMenuControl:function(control){
		this.menuControls.push(control);
		control&&control.initMenu&&control.initMenu();
	},
	
	/**
	 * @summary:
	 * 		获取Menu对象
	 * @description:
	 * 		通过这个menu可以增加菜单项
	 * @return:
	 * 		{unieap.menu.Menu}
	 * @example:
	 * |	var meneuManager=grid.getManager('MenuManager');
	 * |	var menu=meneuManager.getMenu();
	 * |	menu.addChild(new unieap.menu.MenuItem(...));
	 * 		获取Menu
	 */
	getMenu:function(){
		return this.menu;
	},
	
	//更新菜单
	updateMenu:function(){
		dojo.forEach(this.menuControls,function(control){
			control.updateMenu&&control.updateMenu();
		});
		this.menu.startup();
	},
	
	//销毁menu控制器    
	destroy:function(){
		while(this._connectHandlers.length>0) {
			dojo.disconnect(this._connectHandlers.pop());
		}
		dojo.forEach(this.menuControls,function(control){
			control.destroy&&control.destroy();
		});
		this.menu.destroy();
	},
	
	//调用controls的校验方法
	validate:function(cell){
		var result=true;
		dojo.forEach(this.menuControls,function(control){
			control.validateMenu&&(result=control.validateMenu(cell))
		})
		return result;
	},
	
	//以下两种情况不会显示菜单按钮:
	//1.当前单元格不允许出现菜单并且this.menuControls中只有一个控制器
	//2.或者当前的this.menuControls中不存在控制器并且没有配置onBeforeMenuClick
	validateMenu:function(cell){
		var condition1=!this.validate(cell)&&this.menuControls.length==1;
		var condition2=this.menuControls.length==0&&!dojo.isFunction(this.onBeforeMenuClick);
		if(condition1||condition2){
			return false;	
		}
		return true;
	},
	
/////////////////////////////////////////////////////////menu相关	
    //渲染Header
    onHeaderRender: function(node, view){
		 //确保initControls执行完毕后再执行,这样this.menuControls才正确
		  setTimeout(dojo.hitch(this,function(){
			  var layout=this.grid.managers.get("LayoutManager");
		          dojo.query(".u-grid-cell", node).forEach(function(th){
		          	if(th.childNodes[0] && th.childNodes[0].className){
				         var menu = dojo.create('div', {'class': 'u-grid-menu'},th.childNodes[0], 'last');
						 //是否需要总是显示菜单按钮
						 if(this.alwaysShowMenu){
							 var cell= layout.getCell(Number(dojo.attr(th,"idx")));
						        if(this.validateMenu(cell)){
						             this.showMenu(menu);
						     } 
						 }
				         this.grid.connect(menu, 'onclick', dojo.hitch(this, function(e){
				             this.onMenuCick(e);
				         }));
		          	}
		       }, this);		  	
			
//U_EAP00027167 有问题 但有没找到这段话存在的价值 暂时屏蔽 有问题再处理
//		    if (this.menu&&this.menu.isShowingNow) {
//	            dijit.popup.close(this.menu);
//	        }
			
			dojo.forEach(this.menuControls,function(control){
				control.onHeaderRender&&control.onHeaderRender(node, view);
			});
			
		  }),0)
    },
    
     //鼠标移入Header,显示menu按钮
    onHeaderMouseOver: function(e){
        if (e.cell) {
			this.cell=e.cell;
            var menu = dojo.query(".u-grid-menu", e.cellNode)[0],canShow=true;
			if(!this.validateMenu(e.cell)){
				canShow=false;
			}
            if(menu&&canShow){
				this.showMenu(menu);
			};
        }
    },
    
    //鼠标移出Header,删除menu按钮
    onHeaderMouseOut: function(e){
        if (e.cell) {
            if (this.menu.isShowingNow &&this.menu.cell==e.cell) {
            }else {
                var menu = dojo.query(".u-grid-menu", e.cellNode)[0];
				if(menu){
					this.hideMenu(menu);
				}
            }
        }
    },
	
	//显示menu
	showMenu:function(node){
		node.parentNode.style.position = 'relative';
		node.style.position = 'absolute';
		node.style.visibility = 'visible';
		node.style.display = 'block';
	},
	
	//隐藏menu
    hideMenu:function(node){
	    if(this.alwaysShowMenu) return;
        node.parentNode&&(node.parentNode.style.position = 'static');
		node.style.position = 'static';
		node.style.visibility = 'hidden';
		node.style.display = 'none';
	},
	
    //弹出菜单
    onMenuCick: function(e){
		dojo.stopEvent(e)
		//判断是否重复点击表头上的过滤小三角
		if(this.menu.isShowingNow&&e.target==this.menuParent){
			return;
		}
	    dijit.popup.close(this.menu);
		
        var parent = e.target;
        var menu = this.menu;
		this.menuParent=parent;
		//执行用户自己的onBeforeMenuClick函数
		var fn=this.onBeforeMenuClick;
		if (fn&&dojo.isFunction(fn)&&!fn.call(this,this.getCell())) {
			//判断用户自定义的函数onBeforeMenuClick的返回值是否为true,否则就不弹出菜单
			return;
		}
	   this.menu.cell=this.getCell();
		
	   this.updateMenu();
		//判断菜单是否有菜单项,没有就直接返回
		if(!this.menu.hasChildren()){
			return;
		}
        dijit.popup.open({
            parent: parent,
            popup: menu,
            around: parent,
            onClose: dojo.hitch(this,function(){
				this.hideMenu(parent);
                this.menuParent = null;
            }),
			orient:{BL:'TL', BR:'TR',TL:'BL',TR:'BR'}
        });
    },
    
	
	
	/**
	 * @summary:
	 * 		获取当前Menu所在的cell
	 * @description
	 * 		在有自定义按钮时,可以通过这个方法取得所在的列
	 * @return:
	 * 		{unieap.grid.Cell}
	 */
    getCell: function(){
		  return this.cell;
    }
});
dojo.provide('unieap.grid.manager.PagingManager');
dojo.require("unieap.global");
dojo.declare("unieap.grid.manager.PagingManager",null,{
	/**
	 * @summary:
	 * 		翻页控制器
	 * @classDescription：
	 * 		控制Grid的翻页功能。上一页,下一页,第一页,最后一页等操作。
	 * @declaredClass:
	 * 		unieap.grid.manager.PagingManager
	 * @example:
	 * |	<div dojoType="unieap.grid.Grid">
	 * |		<toolbar paging="{parameters:{name:'psd'},url:"/demo.do"}">
	 * |		</toolbar>
	 * |	</div>
	 * 		通过toolbar的标签定义初始化翻页信息
	 * @example
	 * |	var manager=grid.getManager('PagingManager');
	 * |	manager.firstPage();
	 * 		翻到第一页
	 * @example:
	 * |	var manager=grid.getManager('PagingManager');
	 * |	manager.prevPage();
	 * 		翻到上一页
	 * @example：
	 * |	var manager=grid.getManager('PagingManager');
	 * |	manager.nextPage();
	 * 		翻到下一页
	 * @example：
	 * |	var manager=grid.getManager('PagingManager');
	 * |	manager.lastPage();
	 * 		翻到最后一页
	 */
	
	ui:{
		getPageInfo:true,
		setPageNumber:true,
		getPageNumber:true,
		getTotalPage:true,
		nextPage:true,
		lastPage:true,
		prevPage:true,
		firstPage:true,
		setInfo:true,
		clientPaging:true,
		getSelectedCachedData:true,
		clearPageData:true,
		hidePagingBar:true,
		showPagingBar:true,
		exportSelectedData:true,
		onPagingModified:true,
		updateUserPageSize:true,
		setPageCount:true
	},
	
	/**
	 * @summary:
	 * 		是否进行翻页缓存
	 * @description:
	 * 		客户端缓存只缓存数据,不缓存用户动态设置的样式(比如调用setRowStyles等)
	 * @type：
	 * 		{boolean}
	 * @default：
	 * 		false
	 */
	pageCache:false,
	
	
	
	/**
	 * @summary:
	 * 		翻页使用的url
	 * @type:
	 * 		{string}
	 * @example:
	 * |	<div dojoType='unieap.grid.Grid'>
	 * |		<header></header>
	 * |		<toolbar paging="{url:'test.do'}" >
	 * |		</toolbar>
	 * |	</div>
	 * 		可在toolbar标签上定义url
	 * @example:
	 * |	var manager=grid.getManager('PagingManager');
	 * |	manager.setInfo({url:'test.do'});
	 * 		可以通过setInfo方法设置翻页控制器的url
	 */
	url:null,
	
	/**
	 * @summary:
	 * 		翻页使用的parameters
	 * @type:
	 * 		{object}
	 * @example:
	 * |	<div dojoType='unieap.grid.Grid'>
	 * |		<header></header>
	 * |		<toolbar paging="{parameters:{user:'y',password:'f'}}" >
	 * |		</toolbar>
	 * |	</div>
	 * 		可在toolbar标签上定义parameters
	 * @example:
	 * |	var manager=grid.getManager('PagingManager');
	 * |	manager.setInfo({parameters:{user:'y',password:'f'}});
	 * 		可以通过setInfo方法设置翻页控制器的parameters
	 */
	parameters:null,
	
	
	/**
	 * @summary:
	 * 		是否显示翻页条,默认显示
	 * @description:
	 * 		默认情况下,在Grid控件里书写<toolbar></toolbar>会显示翻页条信息
	 * @type:
	 * 		{boolean}
	 * @default:
	 * 		true
	 * @example:
	 * |<div dojoType="unieap.grid.Grid" id="grid">
	 * |	<headr>
	 * |		<cell label="编号" name="attr_name"></cell>
	 * |		<cell label="职位" name="attr_job"></cell>
	 * |	</header>
	 * |	<toolbar paging="{display:false}"></toolbar>
	 * |</div>
	 * @img:
	 * 		images/grid/grid_toolbar_displayPagingBar.png
	 */
	display:true,
	
	
	/**
	 * @summary:
	 * 		设置每页显示的数据条数
	 * @description:
	 * 		该属性会在toolbar上创建一个下拉框,用户可以选择下拉框控件的值来动态改变每页显示的数据条数.
	 * 		只有当display属性为true的情况下,该属性才有效
	 * @type:
	 * 		{boolean|array}
	 * @default:
	 * 		false
	 * @example:
	 * |<div dojoType="unieap.grid.Grid" id="grid">
	 * |	<headr>
	 * |		<cell label="编号" name="attr_name"></cell>
	 * |		<cell label="职位" name="attr_job"></cell>
	 * |	</header>
	 * |	<toolbar paging="{userPageSize:true}"></toolbar>
	 * |</div>
	 * @img:
	 * 		images/grid/grid_toolbar_customPageSize.png
	 * @example:
	 * |<div dojoType="unieap.grid.Grid" id="grid">
	 * |	<headr>
	 * |		<cell label="编号" name="attr_name"></cell>
	 * |		<cell label="职位" name="attr_job"></cell>
	 * |	</header>
	 * |	<toolbar paging="{userPageSize:[100,200,300,400]}"></toolbar>
	 * |</div>
	 * @img:
	 * 		images/grid/grid_toolbar_configCustomPageSize.png
	 */
	userPageSize:false,
	
	
	/**
	 * @summary:
	 * 		是否支持客户端翻页
	 * @description:
	 * 		用户可以修改DataStore的pageSize属性来让每页显示多少条数据,用户需保证DataStore的recordCount属性正确
	 * @type:
	 * 		{boolean}
	 * default:
	 * 		false
	 * @example:
	 * |<div dojoType="unieap.grid.Grid" id="grid">
	 * |	<headr>
	 * |		<cell label="编号" name="attr_name"></cell>
	 * |		<cell label="职位" name="attr_job"></cell>
	 * |	</header>
	 * |	<toolbar paging="{clientPaging:true}"></toolbar>
	 * |</div>
	 */
	clientPaging:false,
	
	/*
	 * @summary:
	 * 		grid翻页时，当本页发生变化时默认采取的操作
	 * @description:
	 * 		discard： 不提示，不保存，翻页
	 * 
	 * 		saveconfirm： 根据提示进行操作 “数据发生改变，是否保存修改?”
	 * 				  选择确定：保存，不翻页
	 * 				  选择取消：不保存，翻页
	 * 		discardconfirm：根据提示进行操作，“数据发生改变，是否放弃修改？”
	 * 				  选择确定：不保存，翻页
	 * 				  选择取消：	不保存，不翻页
	 * @type:
	 * 		{string}
	 * @enum:
	 * 		{"discard"|"saveconfirm"|"discardconfirm"}
	 * @default:
	 * 		"saveconfirm"
	 */
	pagingModifiedSave:unieap.widget.grid.pagingModifiedSave,
	
	asyncPageCount:false,
	asyncPageCountFinish:false,
	totalCount:0,
	
	
	constructor: function(param) {
		dojo.mixin(this,param);
		if(this.pageCache==true){
			if(this.grid.managers.get("ViewManager").orderType=="server"){
				this.grid.subscribe("onBeforeSort.clearPageData",this,function(){
					this.onServerSort();
				});
			}
		}
	},
	

	/**
	 * @summary:
	 * 		显示toolbar上的翻页条
	 * @example:
	 * |<div dojoType="unieap.grid.Grid" id="grid">
	 * |	<headr>
	 * |		<cell label="编号" name="attr_name"></cell>
	 * |		<cell label="职位" name="attr_job"></cell>
	 * |	</header>
	 * |	<toolbar paging="{display:false}"></toolbar>
	 * |</div>
	 * |<div dojoType="unieap.form.Button" label="显示翻页条" onClick="show"></div>
	 * |<script type="text/javascript">
	 * |	function show(){
	 * |		unieap.byId("grid").getManager("PagingManager").showPagingBar();
	 * |	}
	 * |</script>
	 */
	showPagingBar:function(){
		if(!this.display){
			this.display=true;
			this.grid.getToolBar()._showPagingBar();
		}
	},
	
	
	/**
	 * @summary:
	 * 		同步自定义显示每页条数的下拉框中的值
	 * @description:
	 * 		在某些情况下，用户修改了Grid控件绑定的DataStore的pageSize，但是自定义每页显示数据条数的下拉框的值却不同步。
	 * 		调用本方法可以同步下拉框中的值
	 * @example:
	 * |<script type="text/javascript">
	 * |	unieap.byId("grid").getManager("PagingManager").updateUserPageSize();
	 * |</script>
	 */
	updateUserPageSize:function(){
		var toolbar=this.grid.getToolBar(),
			combobox=toolbar&&toolbar.getComboBox();
		if(combobox){
			var info=this.grid.managers.get('PagingManager').getPageInfo();
			combobox.setValue(info.pageSize)
			
		}
	},
	
	/**
	 * @summary:
	 * 		隐藏toolbar上的翻页条
	 * @example:
	 * |<div dojoType="unieap.grid.Grid" id="grid">
	 * |	<headr>
	 * |		<cell label="编号" name="attr_name"></cell>
	 * |		<cell label="职位" name="attr_job"></cell>
	 * |	</header>
	 * |	<toolbar paging="{display:false}"></toolbar>
	 * |</div>
	 * |<div dojoType="unieap.form.Button" label="隐藏翻页条" onClick="hide"></div>
	 * |<script type="text/javascript">
	 * |	function hide(){
	 * |		unieap.byId("grid").getManager("PagingManager").hidePagingBar();
	 * |	}
	 * |</script>
	 */
	hidePagingBar:function(){
		if(this.display){
			this.display=false;
			this.grid.getToolBar()._hidePagingBar();
		}
	},



	
	/**
	 * @summary:
	 * 		设置翻页信息
	 * @param 
	 * 		{object} pageInfo
	 * @example:
	 * |	var manager=grid.getManager('PagingManager');
	 * |	var pageInfo={
	 * |		url:'test',
	 * |		parameters:{user:'chen',password:'s'}
	 * |	}
	 * |	manager.setInfo(pageInfo);
	 * 		设置翻页控制器的url与parameters属性。在翻页查询数据时用到。
	 */
	setInfo:function(pageInfo){
		dojo.mixin(this,pageInfo);
	},
	
	/**
	 * @summary:
	 * 		得到翻页信息
	 * @return
	 * 		{object}
	 */
	getPageInfo:function(){
		var model=this.grid.getBinding();
		var store=model.store;
		var info={};
		if(store){
			//总记录数
			info.totalCount=store.getRecordCount();
			
			//每页显示的记录数
			info.pageSize=store.getPageSize();
			
			//页码
			info.pageNumber=store.getPageNumber();
			
			//本页主缓冲区的记录区域
			info.pageCount=store.getRowSet().getRowCount();
			
			//本页当前有效记录数  主缓冲区过滤缓冲区
	 		info.totalPageCount=info.pageCount+store.getRowSet().getRowCount(unieap.ds.Buffer.FILTER);
			//本页初始有效记录树 主缓冲区过滤缓冲区
			info.initialPageCount=store.getRowSet().getInitialCount();
		}
		return info;
	},
	
	/**
	 * @summary:
	 * 		进行翻页
	 * @param
	 * 		{number} no 页码
	 * @param
	 * 		{object|null} pageInfo 翻页信息
	 * @example：
	 * |	var manager=grid.getManager('PagingManager');
	 * |	var pageInfo={
	 * |		url:'test',
	 * |		parameters:{user:'chen',password:'s'}
	 * |	}
	 * |	manager.setPageNumber(2,pageInfo);
	 * 		翻到第2页,使用特定的翻页信息,没有参数时使用默认的翻页信息
	 */
	setPageNumber:function(no,pageInfo){
		var model=this.grid.getBinding();
		var store=model.getDataStore();
		
		var _store=store.collect('auto');
		_store.setPageNumber(no);
		
		
		if(!this.pageCache){
			if(false == unieap.fireEvent4Widget(this,this.grid,this.onBeforePaging,[_store])){
				return;
			}
		}
		else{
			if(!this._pageCache||!this._pageCache[no]){
				if(false == unieap.fireEvent4Widget(this,this.grid,this.onBeforePaging,[_store])){
					return;
				}
			}
		}
//		if(false == unieap.fireEvent4Widget(this,this.grid,this.onBeforePaging,[_store])){
//			return;
//		}
		var indata={};
		if(this.url){
			indata.url=this.url;
		}
		if(this.parameters){
			indata.parameters=this.parameters;
		}
		if(pageInfo){
			if(pageInfo.url){
				indata.url=pageInfo.url;
			}
			if(pageInfo.parameters){
				indata.parameters=pageInfo.parameters;
			}
		}
		this._setPageNumber(no,indata,_store);
	},
	
	/**
	 * @summary:
	 * 		当翻页时，本页数据有变化时触发
	 * @param:
	 * 		{unieap.ds.DataStore} store
	 * @param:
	 * 		{unieap.grid.Binding} binding
	 * @description:
	 * 		默认实现为if(confirm("保存修改？")){binding.save();},
	 * 		可重新实现这个方法。
	 * 		在global.js中可以修改默认实现。
	 * @example:
	 * |<div dojoType="unieap.grid.Grid" id="grid">
	 * |	<header>
	 * |		<cell name="attr_empno" label="编号"></cell>
	 * |		<cell name="attr_ename" label="姓名"></cell>
	 * |	</header>
	 * |	<toolbar paging="{onPagingModified:onPM}">
	 * |	</toolbar>
	 * |</div>
	 * |<script type="text/javascript">
	 * |	//重新实现翻页时的保存信息
	 * |	function onPM(store,binding){
	 * |		var choice=confirm("保存修改?");
	 * |		if(choice){
	 * |			//由于save方法会延时执行,当配置pageCache为true时,不建议返回为false
	 * |			//即当有数据修改时,不翻页,只是保存数据
	 * |			binding.save({url:'/test.do'});
	 * |			return true; //保存不翻页
	 * |		}
	 * |		return false; //不保存翻页
	 * |	}
	 * |}
	 * 		
	 * @return:
	 * 	{boolean} 返回true不翻页 返回false进行翻页
	 */
	onPagingModified : function(store,binding){
		if(this.pagingModifiedSave=="saveconfirm"){
			if(confirm(RIA_I18N.grid.paging.saveModified)){
				binding.validate(true)&&binding.save();
				return true;
			}
		}else if(this.pagingModifiedSave=="discard"){
			//donothing
		}else if(this.pagingModifiedSave=="discardconfirm"){
			if(confirm(RIA_I18N.grid.paging.discardModified)){
				return false;
			}else{
				return true;
			}
		}
		return false;
	},
	
	//翻页操作,翻到第no页
	_setPageNumber:function(no,indata,_store){
		var model=this.grid.getBinding(),
			self=this,
			store=model.getDataStore();
		
		if(model.isModified()&&this.onPagingModified(store,model)){
			
		}else{
			if(this.pageCache){ 
				//缓存当前页
				this.cachePageData(store);
				var key = String(no);
				if(this._pageCache&&this._pageCache[key]){
					store.getRowSet()["primary"] = this._pageCache[key];
					//store.getRowSet()[unieap.ds.Buffer.PRIMARY] = this._pageCache[key];
					store.setPageNumber(no);
					var dsName = store.getName();
					model.setDataStore(store);
					unieap.fireEvent4Widget(this,this.grid,this.onAfterPaging,[]);
					return;
				}
			}else{
				this.clearPageData();
			}
			//客户端排序翻页时，去掉排序状态
			if(this.grid.managers.get('ViewManager').orderType=='client'){
				this.grid.sortInfo=[];
			}
			
			if(this.clientPaging){
				this.doClientPaging(no);
			}else{
				this.doServerPaging(no,indata,_store);
			}
			//U_EAP00027953 页码框自适应，达到3位数后自动扩展
			var toolbarPageNoNode = this.grid.getToolBar().pageNoNode;
			if(no>99){
				var newWidth = (String(no).length-2)*8 + 23;
				(dojo.isFF) && (newWidth = newWidth + 8);//FF下input偏正方 需要修正
				newWidth = newWidth + 'px';
				dojo.style(toolbarPageNoNode,'width',newWidth);
			}else{
				dojo.style(toolbarPageNoNode,'width','23px');
			}
		}
	},
	
	//客户端翻页
	doClientPaging:function(pageNumber){
		var model=this.grid.getBinding();
		// 客户端翻页，原选中数据第三行，翻页后页面重新渲染，无选中状态
		var grid_num=this.grid.getManager("SelectionManager").getSelectedRowIndexs();
		if(grid_num){
			this.grid.getManager("ViewManager").setRowStyles(grid_num[0],{'background':'#fff'})
			this.grid.getManager("SelectionManager").clearSelection();
		}
		
		
		
		model.setDataStore(model.getDataStoreByPageNumber(pageNumber));
		unieap.fireEvent4Widget(this,this.grid,this.onAfterPaging,[]);
	},
	
	//服务端翻页
	doServerPaging:function(no,indata,_store){
		var model=this.grid.getBinding(),
			rpc=model.rpc,
			self=this;
		var callback=function(a,b){
			var ds,dc;
			if(arguments.length==2){
				ds=a;
				dc=b;
			}else if(arguments.length==1){
				dc=a;
			}else{
				return;
			}
			!ds&&(ds=dc.getSingleDataStore());
			//判断Grid绑定的DataStore是否在DataCenter中,先查看局部的，在查看全局的。新loader下有问题 需要增加判决条件
			var _dataCenter = self.grid.dataCenter || (unieap.Action.getViewContext(self.grid) || window).dataCenter;
			if((model.getDataStore() == _dataCenter.getDataStore(ds.getName()))) {
				_dataCenter.append(dc,"replace");
			}else{
				model.setDataStore(ds);
			}
			unieap.fireEvent4Widget(self,self.grid,self.onAfterPaging,[]);
		}
		if(!this.processor &&  _store.parameters &&_store.parameters.processor){
			this.processor =  _store.parameters.processor
		}
		//rpc用于用户自己去发送请求，返回一个dc即可
		if(dojo.isFunction(rpc)){
			rpc(_store,callback,this.grid,'paging');
		}else if(typeof(this.processor) != "undefined" && this.processor){
			// 调用自定义action Start
			var _pageKey = _store.getParameter("_pageKey");
			if(_pageKey){
				    var viewName = this.processor.view;
				    var methodName = this.processor.name;
				    var _calcRecordCount = this.processor._calcRecordCount;
				    var _rootNodeId = this.grid._rootID;
				    var viewContextKey = (typeof(_rootNodeId) == "undefined" || _rootNodeId == "")?"viewContext":_rootNodeId,
				    	viewContext = unieapViewContextHolder[viewContextKey];
				    if(viewContext.length > 1){
				    	var mainViewName = "",
				    		isViewc = false;
				    	for(var index =0 ; index < viewContext.length; index++){
				    		var view = viewContext[index],
				    			name = view["name"],
				    			type = view["type"];
				    		if(name == viewName && type == "viewc"){
				    			isViewc = true;
				    		}else if(type == "view"){
				    			mainViewName = name;
				    		}
				    	}
				    	if(isViewc){
				    		viewName = mainViewName + "_" + viewName;
				    	}
				    }
				    var view = window[viewName] || window[viewContext[0].name] ;//防止页面同名 被修改了viewName
				    var dataCenter = view.dataCenter;
			        var dc = new unieap.ds.DataCenter();
			        dc.addDataStore(dataCenter.getDataStore("_advancedQueryConditionStore"));
			        dc.setParameter("_pageKey", _pageKey);
			        dc.setParameter("_pageSize", _store.getPageSize());
			        dc.setParameter("_pageNumber", _store.getPageNumber());
					if (view && view.dataCenter){
						menuId = view.dataCenter.getParameter('menuId') || view.dataCenter.getParameter('unieapMenuId');
						path += '&menuId=' + menuId;
					 }
			        var path = unieap.WEB_APP_NAME + unieap.global.gridServerPagingUrl+"?page="+unieap.WEB_PAGE_NAME;
			        var _self = this;
			        // 增加请求之前的切入点
			        if (doBeforeRequest(dc, view, "_pageQuery")) {
			            return unieap.Action.requestData({
			                url: path,
			                dc: dataCenter,
			                sync: false,
			                load: function (dc) {
			                    // 增加请求成功回调之前的切入点
			                    if (doBeforeSuccessResponse(dc, view, "_pageQuery")) {
//			                        var _ds = dc.getSingleDataStore();
									var _ds;
			                    	
			                    	if(dc.getDataStores()){
			                    		var dsList = dc.getDataStores();
			                    		for(var key in dsList){
			                    			var ds = dsList[key]
			                    			if(ds.getParameter("_pageKey")==_pageKey){
			                    				_ds = ds
			                    			}        
			                    		}
			                    	}
			                        var processorInfo = {};
		                            processorInfo['view'] = viewName;
		                            processorInfo['name'] = methodName;
									processorInfo['parameters'] = _self.processor.parameters;
									if(!_ds.rowSetName){
										_ds.rowSetName = _self.grid.getBinding().getDataStore().rowSetName;
									}
		                            //增加对服务端导出的支持
		                            if (dataCenter.getHeaderAttribute(methodName) == "serverExport"){
		                            	_ds.parameters = _store.parameters;
			            			}
		                            _self.grid.getBinding().setDataStore(_ds);
			            			_self.setInfo({processor:processorInfo});		
		                            unieap.fireEvent4Widget(_self, _self.grid,_self.onAfterPaging,[]);	
			                    }
			                    // 增加请求成功回调之后的切入点
			                    doAfterSuccessResponse(dc, view, "_pageQuery");
			                },
			                error: function (xhr) {
			                    // 增加请求失败回调之前的切入点
			                    if (doBeforeFailedResponse(dc, view, "_pageQuery")) {
//			                        _exceptionProcess(xhr);
			                    	var view = _self.processor.view;
			        				var name = _self.processor.name;
			        				var pars = _self.processor.parameters;
			        				var length = pars.length;
			        				var parNameString = '';
			        				var parNames = [];
			        				for(var p in pars){
			        					pars[p] = pars[p]===''?"":unieap.fromJson(pars[p]);
			        				}
			        				if(length >0){
			        					for(var i=0; i < length ; i++ ){
			        						parNames[i] = "pars["+i+"]";
			        					}
			        					parNameString = parNames.join(",");
			        				}
			        				var processorString = "" + view + ".processor." + name + "(" + parNameString+");";
			        				eval(processorString);
			                    }
			                    // 增加请求成功回调之后的切入点
			                    doAfterFailedResponse(dc, view, "_pageQuery");
			                }
			            }, dc);
			        }
			// 调用自定义Action End
			}else{
				//存在processor的信息，自动发processor请求。
				var view = this.processor.view;
				var name = this.processor.name;
				var paras = this.processor.parameters;
				var length = paras.length;
				var parNameString = '';
				var parNames = [];
				//如果paras  不是 string 再走转json程序 防止出现错误  2018-11-13  LD
				try{
					if(typeof paras[0] == 'string'){
						for(var p in paras){
							paras[p] = paras[p]===''?"":unieap.fromJson(paras[p]);
						};
					};
					}catch(e){
						
					}
					
				
					
				
				if(length >0){
					for(var i=0; i < length ; i++ ){
						parNames[i] = "paras["+i+"]";
					}
					parNameString = parNames.join(",");
				}
				var rpcString = "var rpc = function(store, load) {"
								+ view+ ".processor."+ name + "._pageNumber = store.getPageNumber();"
								+ view+ ".processor."+ name + "._pageSize = store.getPageSize();"
								+ "var dc = " + view+ ".processor."+ name + "("+parNameString+");if(dc){load(dataCenter,dc);}}";
				
				//rpcString 增加load方法 让他走回调，否则不渲染数据  2018-11-13  LD		
				eval(rpcString);
				rpc(_store,callback,this.grid,'paging');
			}
		}else{
			unieap.Action.doQuery(_store,dojo.mixin({
				load:function(ds,dc){
					callback(ds,dc);
				},
				dc: dataCenter,
				sync:false
			},indata));
		}
		
	},
	
	
	/**
	 * @summary:
	 * 		返回当前页码
	 * @return：
	 * 		{number}
	 */
	getPageNumber:function(){
		var	store=this.grid.getBinding().store;
		if(store){
			return store.getPageNumber()
		}else{
			return 1;
		}
	},
	
	/**
	 * @summary:
	 * 		得到总的页数。
	 * @description:
	 * 		由totalCount/pageSize计算得来。
	 * @return：
	 * 		{number}
	 */
	getTotalPage:function(){
		var	store=this.grid.getBinding().store;
		if(store){
			var totalCount=store.getRecordCount();
			var pageSize=store.getPageSize();
			return Math.ceil(totalCount/pageSize);
		}else{
			return 1;
		}
	},
	
	/**
	 * @summary:
	 * 		翻到第一页
	 * @param
	 * 		{object|null} pageInfo 翻页信息
	 * @example
	 * |	var manager=grid.getManager('PagingManager');
	 * |	var pageInfo={
	 * |		url:'test',
	 * |		parameters:{user:'chen',password:'s'}
	 * |	}
	 * |	manager.firstPage(pageInfo);
	 * 		翻到第一页,使用特定的翻页信息,没有参数时使用默认的翻页信息
	 */
	firstPage:function(pageInfo){
		this.setPageNumber(1,pageInfo);
	},
	
	/**
	 * @summary:
	 * 		翻到上一页
	 * @param
	 * 		{object|null} pageInfo 翻页信息
	 * @example
	 * |	var manager=grid.getManager('PagingManager');
	 * |	var pageInfo={
	 * |		url:'test',
	 * |		parameters:{user:'chen',password:'s'}
	 * |	}
	 * |	manager.prevPage(pageInfo);
	 * 		翻到上一页,使用特定的翻页信息,没有参数时使用默认的翻页信息
	 */
	prevPage:function(pageInfo){
		var no=this.getPageNumber();
		if(no>1){
			this.setPageNumber(no-1,pageInfo);
		}
	},

	/**
	 * @summary:
	 * 		翻到下一页
	 * @param
	 * 		{object|null} pageInfo 翻页信息
	 * @example
	 * |	var manager=grid.getManager('PagingManager');
	 * |	var pageInfo={
	 * |		url:'test',
	 * |		parameters:{user:'chen',password:'s'}
	 * |	}
	 * |	manager.nextPage(pageInfo);
	 * 		翻到下一页,使用特定的翻页信息,没有参数时使用默认的翻页信息
	 */
	nextPage:function(pageInfo){
		var totalPage=this.getTotalPage();
		var no=this.getPageNumber();
		if(no<totalPage){
			this.setPageNumber(no+1,pageInfo);
		}
	},
	
	/**
	 * @summary:
	 * 		翻到最后一页
	 * @param
	 * 		{object|null} pageInfo 翻页信息
	 * @example
	 * |	var manager=grid.getManager('PagingManager');
	 * |	var pageInfo={
	 * |		url:'test',
	 * |		parameters:{user:'chen',password:'s'}
	 * |	}
	 * |	manager.lastPage(pageInfo);
	 * 		翻到最后一页,使用特定的翻页信息,没有参数时使用默认的翻页信息
	 */
	lastPage:function(pageInfo){
		var totalPage=this.getTotalPage();
		this.setPageNumber(totalPage,pageInfo);
	},
	

	onServerSort:function(){
		this.clearPageData();
	},
	
	
	//缓存翻页数据	
	cachePageData : function(store){
		var rowset=store.getRowSet(),
			key = String(store.getPageNumber());
		if(rowset.getSelectedCount(unieap.ds.Buffer.PRIMARY)>0||rowset.getSelectedCount(unieap.ds.Buffer.FILTER)>0){
			var primaryData = rowset.getData(unieap.ds.Buffer.PRIMARY),
				filterData=rowset.getData(unieap.ds.Buffer.FILTER),
				data=primaryData.concat(filterData);
			this._pageCache = this._pageCache || {};
			this._pageCache[key] = data;
		}else{
			this._pageCache&&this._pageCache[key]&&(delete this._pageCache[key]);
		}
	},
	
	
	//是否支持客户端翻页
	supportClientPaging:function(){
		return this.clientPaging;
	},
	
	
	/**
	 * @summary:
	 * 		获得在设置翻页缓存后,Grid视图中被选中(复选框)的行数据
	 * @return:
	 * 		{array}
	 * @example:
	 * |	var pagingMan=unieap.byId("grid").getManager("PagingManager");
	 * |	var data=pagingMan.getSelectedCachedData();
	 * |	unieap.debug(data);
	 */
	getSelectedCachedData:function(){
		var data=[],_pageCache;
		if(this.pageCache&&this._pageCache){
			_pageCache=this._pageCache;
			for(var key in _pageCache ){
				_pageCache[key]&&this._getSelectedItems(data,_pageCache[key])
			}
		}
		//获取本页选中的数据,并判断是否在_pageCache中
		var store=this.grid.getBinding().getDataStore(),
			rowset=store.getRowSet(),
			totalData=rowset.getData(unieap.ds.Buffer.PRIMARY).concat(rowset.getData(unieap.ds.Buffer.FILTER));
			pageNumber=String(store.getPageNumber());
		if(this._pageCache&&this._pageCache[pageNumber]){
			return data;
		}
		dojo.forEach(totalData,function(item){
			var row = new unieap.ds.Row(store.getRowSet(),item);
			row.isRowSelected()&&data.push(item);
			//item["_s"]==true&&data.push(item);
		});
		return data;
	},
	
	_getSelectedItems:function(aArray,rowDatas){
		for(var key in rowDatas ){
			var row = new unieap.ds.Row(this.grid.getBinding().getRowSet(),rowDatas[key]);
			row.isRowSelected()&&aArray.push(rowDatas[key]);
			//rowDatas[key]["_s"]==true&&aArray.push(rowDatas[key]);
		}
	},
	
	
	/**
	 * @summary:
	 * 		当有翻页缓存时,导出选中的记录
	 * @param:
	 * 		{Object||null} exportInfo
	 * @example:
	 * |<div dojoType="unieap.form.Button" label="导出选中数据"></div>
	 * |<script type="text/javascript">
	 * |var info={
	 * |	url:'/user_export.do?method=export',
	 * |	parameters:{'id':'2.7182818284590451'}
	 * |}
	 * |function doExport(){
	 * |	unieap.byId("grid").getManager("PagingManager").exportSelectedData(info);
	 * |}
	 * |</script>
	 * 
	 */
	exportSelectedData:function(exportInfo){
		if(!this.pageCache) return;
		var gridData=this.grid.getGridData(),
			data=this.getSelectedCachedData(),
			dsName=gridData['store'].getName();
		delete gridData['store'];
		if(data.length>0){
			dojo.mixin(gridData,exportInfo||{},{type:'client'},{
				store:new unieap.ds.DataStore(dsName,data)
			});
			unieap.Action.doExport(gridData);
		}else{
		     MessageBox.alert({
//					title : "提示信息", // MODIFY BY TENGYF
					title : RIA_I18N.grid['export'].info,
//					message : '无可导出数据，请先选择数据再导出!'
					message : RIA_I18N.grid['export'].noDataByChoices
				});
		}
	},
	
	/**
	 * @summary:
	 * 		清空缓存的翻页数据
	 * @description:
	 * 		设置新的store后,如果不想使用之前的翻页缓存信息。
	 * 		需要调用clearPageData方法。
	 */
	clearPageData : function(){
		this._pageCache = null;
	},
	
     /**
	 * @summary:
	 * 		在Grid翻页前监听的事件，若返回false，将会阻止翻页进行
	 * @param
	 * 		{unieap.ds.DataStore} store 要翻页的store   
	 * @return
	 *    {boolean}  
	 * @example:
	 * |	<div dojoType="unieap.grid.Grid" binding="{...}">
	 * |		<header>
	 * |			...
	 * |		</header>
	 * |		<toolbar paging="{parameters:{...},onBeforePaging:beforePage}">
	 * |		</toolbar>
	 * |	</div>
	 * |	function beforePage(store){
	 * |		if(store.getPageNumber()==2){
	 * |			return false;//此时不允许翻至第二页
	 * |		}
	 * |		return true;
	 * |	}
	 */
	onBeforePaging:function(store){
		return true;
	},
	
	 /**
	 * @summary:
	 * 		在Grid翻页后监听的事件
	 * @example:
	 * |	<div dojoType="unieap.grid.Grid" binding="{...}">
	 * |		<header>
	 * |			...
	 * |		</header>
	 * |		<toolbar paging="{parameters:{...},onAfterPaging:afterPage}">
	 * |		</toolbar>
	 * |	</div>
	 * |	function afterPage(){
	 * |		alert("翻页完成");
	 * |	}
	 */
	onAfterPaging:function(){
		
	},
	
	setPageCount:function(totalCount){
		this.totalCount = totalCount;
		var info = this.getPageInfo();
		info.totalCount = totalCount;
		var totalPage = info.pageSize==0?0:Math.ceil(info.totalCount / info.pageSize);
		this.asyncPageCountFinish = true;
		var	store=this.grid.getBinding().store;
		store.setRecordCount(totalCount);
		this.grid.toolBar.pageInfoNode.innerHTML = this.grid.toolBar._pageInfoTemplate.replace('{0}', "<span class=\"toolbarNum\">&nbsp;"+info.pageCount+ "&nbsp;</span>").replace('{1}', "<span class=\"toolbarNum\">&nbsp;"+totalCount+ "&nbsp;</span>");
		this.grid.toolBar.totalPageNoNode.innerHTML = "/" + totalPage + RIA_I18N.grid.paging.page;
		 //更新buttons状态
        dojo.forEach(this.grid.toolBar._buttonList, function(node, index){
            var array = ['first', 'prev', 'next', 'last'];
            dojo.addClass(node, 'u-grid-page-' + array[index]);
            dojo.removeClass(node, 'u-grid-page-' + array[index] + '-disabled');
        }, this)
		if (1 == info.pageNumber) {
            dojo.removeClass(this.grid.toolBar._buttonList[0], 'u-grid-page-first');
            dojo.addClass(this.grid.toolBar._buttonList[0], 'u-grid-page-first-disabled');
            dojo.removeClass(this.grid.toolBar._buttonList[1], 'u-grid-page-prev');
            dojo.addClass(this.grid.toolBar._buttonList[1], 'u-grid-page-prev-disabled');
        }
        if (info.pageNumber >= totalPage) {
            dojo.removeClass(this.grid.toolBar._buttonList[2], 'u-grid-page-next');
            dojo.addClass(this.grid.toolBar._buttonList[2], 'u-grid-page-next-disabled');
            dojo.removeClass(this.grid.toolBar._buttonList[3], 'u-grid-page-last');
            dojo.addClass(this.grid.toolBar._buttonList[3], 'u-grid-page-last-disabled');
        }
	}
});
dojo.provide("unieap.grid.manager.SelectionPatch");

dojo.declare("unieap.grid.manager.SelectionPatch", null, {
	constructor: function(inGrid) {
		this.grid = inGrid;
	},
	doPatch: function(inComponent) {
		if (inComponent.declaredClass=="unieap.grid.RowView") {
			var func;
			for (func in this.patches[inComponent.declaredClass]) {
				inComponent[func].push(this.patches[inComponent.declaredClass][func]);
			}
		} else {
			dojo.mixin(inComponent, this.patches[inComponent.declaredClass]);
		}
	},
	
	patches: {
		/*
		 * principle:
		 * 		尽量只修改自身及表格的基本模块，以免多个可选模块之间“交叉感染”。
		 * 
		 * list:
		 * 		unieap.grid.manager.SelectionManager
		 * 		unieap.grid.manager.RowManager
		 * 		unieap.grid.RowView
		 */
		
		"unieap.grid.manager.SelectionManager": {
			addToSelection: function(inRowIndex) {
				this.grid.getBinding().selectedData(inRowIndex);
			},
			
			removeFromSelection: function(inRowIndex) {
				this.grid.getBinding().unSelectedData(Number(inRowIndex));
			},
			
			showCheckNode: function(inRowIndex){
				var binding = this.grid.getBinding();
				var rowData = binding.getRow(inRowIndex);
				var row = new unieap.ds.Row(binding.getRowSet(),rowData);
				var displayIdentifier = row.getIdentifier("_d");
				if (!displayIdentifier) {
					displayIdentifier = {};
				}
				displayIdentifier["displayed"] = true;
				row.setIdentifier("_d",displayIdentifier);
			},
			hideCheckNode: function(inRowIndex){
				var binding = this.grid.getBinding();
				var rowData = binding.getRow(inRowIndex);
				var row = new unieap.ds.Row(binding.getRowSet(),rowData);
				var displayIdentifier = row.getIdentifier("_d");
				if (!displayIdentifier) {
					displayIdentifier = {};
				}
				displayIdentifier["displayed"] = false;
				row.setIdentifier("_d",displayIdentifier);
			},
			enableCheckbox: function(inRowIndex) {
				var binding = this.grid.getBinding();
				var rowData = binding.getRow(inRowIndex);
				var row = new unieap.ds.Row(binding.getRowSet(),rowData);
				var groupIdentifier = row.getIdentifier("_g");
				if (!groupIdentifier) {
					groupIdentifier = {};
				}
				groupIdentifier["uncheckabled"] = false;
				row.setIdentifier("_g",groupIdentifier);
			},
			
			unableCheckbox: function(inRowIndex) {
				var binding = this.grid.getBinding();
				var rowData = binding.getRow(inRowIndex);
				var row = new unieap.ds.Row(binding.getRowSet(),rowData);
				var groupIdentifier = row.getIdentifier("_g");
				if (!groupIdentifier) {
					groupIdentifier = {};
				}
				groupIdentifier["uncheckabled"] = true;
				row.setIdentifier("_g",groupIdentifier);
			},
			/**
			 * @summary:
			 * 		判断某行是否可变更选择状态
			 * @param:
			 * 		{number} inRowIndex
			 * @return:
			 * 		{boolean}
			 */
			isCheckable: function(inRowIndex) {
				var binding = this.grid.getBinding();
				var rowData = binding.getRow(inRowIndex);
				var row = new unieap.ds.Row(binding.getRowSet(),rowData);
				var _g = row.getIdentifier("_g");
				var value = _g?_g['uncheckabled']:false;
				return value != true;
			},
			
			/**
			 * @summary:
			 * 		设置表格行数据的选中状态
			 * @param:
			 * 		{number} inRowIndex
			 * @param:
			 * 		{boolean} inSelect
			 */
			setSelect: function(inRowIndex, inSelect) {
				inRowIndex = parseInt(inRowIndex,10);
				if (inRowIndex<0 || inRowIndex >= this.grid.managers.get("RowManager").getRowCount()) {
					return;
				}
				//var row = this.grid.getBinding().getRow(inRowIndex);
//				if (!row["_g"]) {
//					row["_g"] = {};
//				}
//				if(row["_g"]["uncheckabled"]) return;
				
				var binding = this.grid.getBinding();
				var rowData = binding.getRow(inRowIndex);
				var row = new unieap.ds.Row(binding.getRowSet(),rowData);
				var groupIdentifier = row.getIdentifier("_g");
				var displayIdentifier = row.getIdentifier("_d");
				if ((groupIdentifier && (groupIdentifier["uncheckabled"]==true)) || ('undefined' != typeof displayIdentifier && (displayIdentifier["displayed"]==false))) return;
				
				var select = true, 
					views = this.grid.managers.get("ViewManager"),
					rowbar = views.views[0].isRowBar?views.views[0]:null;;
				
				if (arguments.length == 2) {
					select = inSelect==true;
				}
				if (select) {
					if (!unieap.fireEvent4Widget(this,this.grid,this.onBeforeSelect,[inRowIndex])) {
						if (rowbar) {
							rowbar && rowbar.renderRow(rowbar.getRowNode(inRowIndex), inRowIndex);
							var selected = this.getSelectedRowIndexs();
							if (dojo.isArray(selected) && selected.length>0) {
								for (var i=0,s; s=selected[i]; i++) {
									rowbar.renderRow(rowbar.getRowNode(s), s,true);
								}
							}
						}
						return;
					}
				} else {
					 if ( !unieap.fireEvent4Widget(this,this.grid,this.onBeforeDeselect,[inRowIndex])) {
					//if (false) {
						rowbar && rowbar.renderRow(rowbar.getRowNode(inRowIndex), inRowIndex);
						 return;
					}
				}
				switch (this.selectType) {
					case this.types.s :
					case this.types.single : {
						var selected = this.getSelectedRowIndexs();
						if (dojo.isArray(selected) && selected.length>0) {
							var rows = this.grid.managers.get("RowManager");
							for (var i=0,s,l=selected.length;i<l; i++) {
								s=selected[i];
								rows.updateStyles(s);
								rows.updateCurrnetRow(s);
							}
						}
						this.clearSelection();
						select?this.addToSelection(inRowIndex):this.removeFromSelection(inRowIndex);
						
						this._onSelect(inRowIndex, select);
						
						break;
					}
					case this.types.m :
					case this.types.multiple : {
						select?this.addToSelection(inRowIndex):this.removeFromSelection(inRowIndex);
						var xtreeMgr = this.grid.getManager("XTreeManager");
						if(xtreeMgr){
							xtreeMgr.setSelect(inRowIndex, select);							
						} 
						this._onSelect(inRowIndex, select);
						var checkNode=dojo.query("input[type^=checkbox]",this.grid.headerNode);
						if(checkNode&&checkNode[0]){
							if(!select){
								if(checkNode[0].checked)
									checkNode[0].checked = false;
							}
							else{
								var rowData = this.grid.getBinding().getRowSet().getData();
								var rowCount = rowData.length;
								if (rowCount==0) return;
								var isAllSelected = true;
								for (var i =0; i<rowCount; i++){
									if (!this.isSelected(i)) {
										isAllSelected = false;
										break;
									} 
								}
								if(isAllSelected)
									checkNode[0].checked = true;
							}
						}
						break;
					}
				}
//				views.refreshRow(inRowIndex);
				rowbar && rowbar.renderRow(rowbar.getRowNode(inRowIndex), inRowIndex,true);
				//判断多选框全选按钮是否应该全选或者取消全选的class   2018-11-17  LD

				var  isAllSelect = true;
				var  hasSelect = [];
                  for(var index = 0;index < binding.rowData.length; index++) {  
                      if(!binding.rowData[index]['_s']){
                            isAllSelect = false;
						}else{
							hasSelect.push(index);
						}
						
                    };
                 if(isAllSelect){
                        $(".u-grid-rowbar-choice",this.grid.headerNode).addClass("u-grid-rowbar-checked");
                    }else{
                        $(".u-grid-rowbar-choice",this.grid.headerNode).removeClass("u-grid-rowbar-checked");
					}	
					var rootPage = this.grid._rootID;
					var displayType = hasSelect.length>0?'none':'block'
					$('#'+rootPage).find('.select_buttons')&&$('#'+rootPage).find('.select_buttons').find('.select_buttons_mask').css('display',displayType)
								
			},
			
			/**
			 * @summary:
			 * 		设置一行是否可设置选择状态
			 * @param:
			 * 		{number} inRowIndex
			 * @param:
			 * 		{boolean} checkabled
			 */
			setCheckabled: function(inRowIndex, checkabled) {
				if (inRowIndex != parseInt(inRowIndex,10)) return;
				if (isNaN(inRowIndex)) return;
				if (inRowIndex<0||inRowIndex>this.grid.getBinding().getRowCount()-1) return;
				checkabled? this.enableCheckbox(inRowIndex):this.unableCheckbox(inRowIndex);
				this.grid.managers.get("ViewManager").refreshRow(inRowIndex);
			},
			
			/**
			 * @summary:
			 * 		设置一行选择状态是否显示
			 * @param:
			 * 		{number} inRowIndex
			 * @param:
			 * 		{boolean} display
			 */
			setCheckDisplay: function(inRowIndex, display) {
				if (inRowIndex != parseInt(inRowIndex,10)) return;
				if (isNaN(inRowIndex)) return;
				if (inRowIndex<0||inRowIndex>this.grid.getBinding().getRowCount()-1) return;
				var checkNode= this.selectType == "single"? dojo.query("input[type^=radio]",this.grid.viewsNode) : dojo.query("input[type^=checkbox]",this.grid.viewsNode);
                if(checkNode && checkNode[inRowIndex]){
                    //dataStore 里面增加数据 设置display的参数 好在渲染的时候去判断渲染的时候是否渲染该单选或者多选框
                    this.grid.getBinding().rowData[inRowIndex]['_setCkeckDisplay'] = display;
					if(display){
						dojo.style(checkNode[inRowIndex],"display","block");
						//增加这行状态栏是否显示 因为改版状态栏 改成外层隐藏和现实外层div  LIND
                        $(checkNode[inRowIndex]).parent().css("display","block");
					}
					else{
						dojo.style(checkNode[inRowIndex],"display","none");
                        $(checkNode[inRowIndex]).parent().css("display","none");
					}
				}
				display?this.showCheckNode(inRowIndex):this.hideCheckNode(inRowIndex);
			},
			
			/**
			 * @summary:
			 * 		设置表格全选
			 * 		只对多选时有用
			 * @param:
			 * 		{boolean} inSelect
			 */
			setAllSelect: function(inSelect) {
				//操作行区域显示与隐藏
				var rootPage = this.grid._rootID;
				var displayType = inSelect?'none':'block'
				$('#'+rootPage).find('.select_buttons')&&$('#'+rootPage).find('.select_buttons').find('.select_buttons_mask').css('display',displayType)
                if(inSelect && this.grid.getBinding().rowData.length > 0){ //防止表格无数据的时候 点击多选增加class 表现成选中状态  2019-1-7 LD
                    $(".u-grid-rowbar-choice",this.grid.headerNode).addClass("u-grid-rowbar-checked");
                }else{
                    $(".u-grid-rowbar-choice",this.grid.headerNode).removeClass("u-grid-rowbar-checked");
                }
				if (!unieap.fireEvent4Widget(this,this.grid,this.onBeforeAllSelect,[inSelect])) {
					return false;
				}
				if (!(this.selectType==this.types.multiple || this.selectType==this.types.m)) {
					return false;
				}
				var rowData = this.grid.getBinding().getRowSet().getData();
				var rowCount = rowData.length;
				if (rowCount==0) return false;
				var checkNode=dojo.query("input[type^=checkbox]",this.grid.headerNode);
				var binding = this.grid.getBinding();
				var xtreeMgr = this.grid.getManager("XTreeManager");
				if (inSelect) {					
					if(xtreeMgr){
						xtreeMgr.setAllSelect(inSelect);
					}else{				
					for (var i =0; i<rowCount; i++){
//						var row = rowData[i];
						var row = new unieap.ds.Row(binding.getRowSet(),rowData[i]);
						var groupIdentifier = row.getIdentifier("_g");
						var displayIdentifier = row.getIdentifier("_d");
						if ((groupIdentifier && (groupIdentifier["uncheckabled"]==true)) || ('undefined' != typeof displayIdentifier && (displayIdentifier["displayed"]==false))) {
						} else {
							//row["_s"] = true;
							row.setRowSelected(true);
						}
					}
					}
					checkNode[0]&&(checkNode[0].checked = true);
				} else {					
					if(xtreeMgr){
						xtreeMgr.setAllSelect(inSelect);
					}else{
					for (var i =0; i<rowCount; i++){
						var row = new unieap.ds.Row(binding.getRowSet(),rowData[i]);
						var groupIdentifier = row.getIdentifier("_g");
						if (groupIdentifier && groupIdentifier["uncheckabled"]==true) {
						} else {
							//row["_s"] = false;
							row.setRowSelected(false);
							}
						}
					}
//					this.clearSelection();
					checkNode[0]&&(checkNode[0].checked = false);
				}
				this.grid.managers.get("ViewManager").refreshPage();
				unieap.fireEvent4Widget(this,this.grid,this.onAfterAllSelect,[inSelect]);
				return true;
			},
			
			/**
			 * @summary:
			 * 		判断一行是否被选中
			 * @param:
			 * 		{number} inIndex
			 * @return:
			 * 		{boolean}
			 */
			isSelected: function(inRowIndex){
				var binding = this.grid.getBinding();
				var rowData = binding.getRow(inRowIndex);
				//数据为undefined时会报错
				if( undefined== rowData || null == rowData ){
					return false;
				}else{
					var row = new unieap.ds.Row(binding.getRowSet(),rowData);
					return row.isRowSelected();
				}
				//return this.grid.getBinding().getRow(inRowIndex)["_s"]==true;
			},
			
			/**
			 * @summary:
			 * 		取得选择的行号
			 * @return:
			 * 		{array}
			 */
			getSelectedRowIndexs: function() {
				return this.grid.getBinding().getRowSet().getSelectedRowIndexs();
			},
			
			/**
			 * @summary:
			 * 		清空选择
			 */
			clearSelection: function() {
				var view = this.grid.managers.get("ViewManager").views[0];
				if (view.isRowBar) {
					var inputs = dojo.query("input",view.domNode);
					var arr = this.grid.getBinding().getDataStore().rowSet.primary;
					for(var i = 0; i<arr.length; i++){
						if(arr[i]['_s']){
							delete  arr[i]['_s'];
						}
					}
					for (var i=0, check; check=inputs[i]; i++) {
						if (check.checked==true) {
							check.checked = false;
						}
					}
				}
				var rows,
					rowSet = this.grid.getBinding().getRowSet();
			    var rows_p = rowSet.getSelectedRows(unieap.ds.Buffer.PRIMARY);
				var rows_f = rowSet.getSelectedRows(unieap.ds.Buffer.FILTER);
				rows = rows_p.concat(rows_f);
				for (var i=0,r; r=rows[i]; i++) {
					//r && (r.data["_s"]=false);
					r && (r.setRowSelected(false));
				}
				this.grid.managers.get("ViewManager").refreshPage()
				
			},
			
			//events
			_onSelect: function(inRowIndex, select) {
		//		若是多选，可根据情况设置全选按钮选中状态
		//		var views = this.grid.managers.get("ViewManager");
		//		
		//		if (views.views[0].isRowBar) {
		//			views.views[0].renderHeader();
		//		}
				var rows = this.grid.managers.get("RowManager");
				rows.updateStyles(inRowIndex);
				rows.updateCurrnetRow(inRowIndex);
				unieap.fireEvent4Widget(this,this.grid,select?this.onAfterSelect:this.onAfterDeselect,[inRowIndex]);
				if(this.grid.getManager("XTreeManager")){
					var stor = this.grid.getBinding().rowData;
					var arr = this.grid.getManager("XTreeManager").getDataStore().getRowSet().primary;
					var arrList=dojo.clone(arr);
					var storList=dojo.clone(stor);
					for(var i=0; i<storList.length;i++){
						if(storList[i]['_s']){
							arrList[i]['_s']=storList[i]['_s']
						}
					}
					//this.grid.getManager("XTreeManager").getDataStore().getRowSet().primary = stor;
				}
			}
		},
		
		"unieap.grid.manager.RowManager": {
			prepareStylingRow: function(inRowIndex, inRowNode, inView) {
				return {
					index: inRowIndex,
					node: inRowNode,
					odd: Boolean(inRowIndex&1),
					selected: this.grid.managers.get("SelectionManager").isSelected(inRowIndex),
					over: this.isOver(inRowIndex),
					customStyles: "",
					highlight: this.grid.managers.managers.RowManager._isThisRowHighlighted(inRowIndex),
					customClasses: inView.isRowBar? "u-grid-rowbar":"u-grid-row"
				}
			},
			
			onStyleRow: function(inRow) {
				with(inRow){
					customClasses += (odd?" u-grid-row-odd":"")
					+ (over?" u-grid-row-over":"")
					+ (selected?" u-grid-row-selected":"")
					+((index==this.currentRowIndex)?" u-grid-row-current":"")
					+(highlight?" u-grid-row-highlight":"");
				}
			}
		},
		
		"unieap.grid.RowView": {
			// event handlers
			headerEvtHandler: function(e) {
				if(e.target.tagName.toUpperCase()=="INPUT"&&e.type=="click") {
					this.grid.managers.get("SelectionManager").setAllSelect(e.target.checked) || dojo.stopEvent(e);
				}
			},
			
			contentEvtHandler: function(e) {
				if(e.target.tagName.toUpperCase()=="INPUT"&&e.type=="click") {
					var select = this.grid.managers.get("SelectionManager");
					var rowIndex = Number(e.rowIndex);
					switch(select.getSelectType()) {
						case select.types.s:
						case select.types.single: {
							select.setSelect(rowIndex, true);
							break;
						}
						case select.types.m:
						case select.types.multiple: {
							select.setSelect(rowIndex, !select.isSelected(rowIndex));
							break;
						}
					}
				}
			}
		}
		
	}
});
dojo.provide('unieap.grid.manager.SelectionManager');

dojo.declare("unieap.grid.manager.SelectionManager", null, {
	/**
	 * @declaredClass:
	 * 		unieap.grid.manager.SelectionManager
	 * @summary:
	 * 		选择控制器
	 * @description:
	 * 		选择控制器为表格提供针对行的选择功能。
	 * 		可在Grid配置上配置selection指定表格的选择类型(单选/多选)，及各种选择事件。
	 * @example:
	 * |	<div dojoType="unieap.grid.Grid" width="500px" height="200px"
	 * |		binding="{store:'empDataStore'}"
	 * |		views="{rowNumber:true,orderType:'none'}"
	 * |		selection="{selectType:'single',onBeforeSelect:onSelect}">
	 * |		<fixed>
	 * |			<cell label="员工编号" width="150" name="attr_empno"></cell>
	 * |		</fixed>
	 * |		<header>
	 * |			<cell width="100px" label="姓名" name="NAME"></cell>
	 * |			<cell width="150px" label="职位" name="attr_job"></cell>
	 * |			<cell width="150px" label="工资" name="attr_sal" headerStyles="text-align: left;"></cell>
	 * |		</header>
	 * |	</div>
	 * @img:
	 * 		images/grid/grid_select.png
	 */
	
	ui: {
		setSelect:true,
		setAllSelect:true,
		isSelected:true,
		getSelectedRows:true,
		deleteSelectedRows:true,
		getSelectedRowIndexs:true,
		clearSelection:true,
		getSelectType:true,
		setSelectType:true,
		setCheckabled:true,
		setCheckDisplay:true,
		isCheckable : true,
		isSelectable : true,
		getSelectedDataSet:true,
		events: {
			onBeforeSelect:true,
			onBeforeDeselect:true,
			onAfterSelect:true,
			onAfterDeselect:true,
			onBeforeAllSelect:true,
			onAfterAllSelect:true
		}
	},
	
	_patch: "unieap.grid.manager.SelectionPatch",
	types : {
		s: "s",
		single: "single",
		m: "m",
		multiple: "multiple"
	},
	
	/**
	 * @summary:
	 * 		选择类型
	 * @description:
	 * 		设置rowBar上的选择类型，可为单选或多选模式
	 * 		设置为's'或'single'时为单先模式
	 * 		设置为'm'或'multiple'时为多选模式
	 * 		设置为'none'时不能选择
	 * @type:
	 * 		{string}
	 * @enum:
	 * 		{'s'|'single'|'m'|'multiple'|'none'}
	 * @default:
	 * 		'none'
	 * @example:
	 *|<div dojoType="unieap.grid.Grid"  width="80%" height="250px" binding="{store:'empDataStore'}" selection="{selectType:'single'}">
	 *|... ...
	 *|</div> 
	 */
	selectType: null,
	uncheckabled:null,
	
	constructor: function(param) {
		dojo.mixin(this, param);
		this.selectType = param.selectType||"none";
		this.uncheckabled = {};
		
		var viewManager=this.grid.managers.get("ViewManager");
		this.switchType();
		this.connects = [];
		this.connects.push(dojo.connect(viewManager, "addView", this, "onAddView"));
		this.grid.managers.addPlus(viewManager,'getRowBarWidth',dojo.hitch(this, this.getRowBarWidth));
		this.grid.managers.addPlus(viewManager,'generateRowBarCells',dojo.hitch(this, this.generateRowBarCells));
	},
	
	onAddView: function(inView) {
		switch(this.selectType) {
			case this.types.s:
			case this.types.single:
			case this.types.m:
			case this.types.multiple: {
				this.doPatch(inView);
			}
		}
	},
	
	switchType: function() {
		switch(this.selectType) {
			case this.types.s:
			case this.types.single:
			case this.types.m:
			case this.types.multiple: {
				this.doPatch(this);
				this.doPatch(this.grid.managers.get("RowManager"));
//				this.doPatch(this.grid.managers.get("ViewManager"));
				
			}
		}
	},
	
	getRowBarWidth: function() {
		var inWidth=0;
		switch(this.getSelectType()) {
			case this.types.s:
			case this.types.single:
			case this.types.m:
			case this.types.multiple: {
				inWidth+=20;
				break;	
			}	
		}
		return inWidth;
	},
	
	generateRowBarCells: function(inRowIndex) {

		var cells = "";
		if (this.getSelectType()==this.types.m || this.getSelectType()==this.types.multiple) {
			cells += this.generateMultiSelectCell(inRowIndex);
		} else if (this.getSelectType()==this.types.s || this.getSelectType()==this.types.single) {
			cells += this.generateSingleSelectCell(inRowIndex);
		}
		
	
		return cells;
	},
	
	/**
	 * @summary:
	 * 		设置某一行是否可选
	 * @description:
	 * 		如果设置可选，则返回true，否则返回false
	 * @param:
	 * 		{number} inRowIndex 行索引号
	 * @return:
	 * 		{boolean}
	 * @example:
	 * |<script type="text/javascript">
	 * |	function isSelectable(inRowIndex) {
	 * |		// 设置行索引号为偶数时可选，奇数时不可选
	 * |		if (inRowIndex % 2 == 0) {
	 * |			return true;
	 * |		} else {
	 * |			return false;
	 * |		}
	 * |	}
	 * |</script>
	 * |<div dojoType="unieap.grid.Grid" binding="{store:'empDataStore'}"
	 * |	 selection="{isSelectable:isSelectable}">
	 * |... ...
	 * |</div> 
	 */
	isSelectable : function(inRowIndex){
		return true;
	},
	
	/**
	 * @summary:
	 * 		判断某行是否可变更选择状态
	 * @param:
	 * 		{number} inRowIndex
	 * @return:
	 * 		{boolean}
	 */
	isCheckable : function(inRowIndex){
		return true;
	},
	generateSingleSelectCell: function(inRowIndex) {
        if (inRowIndex == -1) {
            return "<td></td>";
        }else {
        	var binding = this.grid.getBinding();
            var data = binding.getRow(inRowIndex);
            var row = new unieap.ds.Row(binding.getRowSet(),data);
            var groupIdentifier = row.getIdentifier("_g");
            var selectIdentifier = row.getIdentifier("_s");
            var _setCkeckDisplay;
            var outDiv = "<td class='u-grid-rowbar-choice'><div class='u-grid-outDiv'><input type='radio' name='";
            try {
                _setCkeckDisplay = binding.rowData[inRowIndex]['_setCkeckDisplay'];
                if(_setCkeckDisplay === false){
                    outDiv = "<td  class='u-grid-rowbar-choice'><div class='u-grid-outDiv gridSetDisplay'><input type='radio' name='"
                }

            }catch (e) {
                _setCkeckDisplay = true;
                outDiv = "<td  class='u-grid-rowbar-choice'><div class='u-grid-outDiv'><input type='radio' name='";
            }
            //if (data["_g"] && (data["_g"]["gr"] || data["_g"]["gsr"])) {//分组行
            if (groupIdentifier && (groupIdentifier["gr"] || groupIdentifier["gsr"])) {//分组行
                return "<td></td>";
            }
            var check = [];
            var select = this.grid.managers.get("SelectionManager");
            check.push(outDiv);
            check.push("radio_" + this.grid.id + "'");
            check.push
            if (selectIdentifier) {
                check.push(" checked='true' ");
                select.addToSelection(inRowIndex);
            }
            if (!this.isSelectable(inRowIndex) || groupIdentifier && groupIdentifier["uncheckabled"]) {
                check.push(" disabled='true' ");
            }
            check.push("</>");
            check.push("<span class='u-grid-rowbar-radio'></span></div>");
            check.push("</td>");
            return check.join('');
        }
	},
	
	generateMultiSelectCell: function(inRowIndex) {
        // var rs = this.grid.getBinding().getRowSet();
			// console.log(inRowIndex);
            // console.log(rs.getRowCount()>0&&rs.getUnSelectedRows(unieap.ds.Buffer.PRIMARY).length == 0&&rs.getUnSelectedRows(unieap.ds.Buffer.FILTER).length == 0);

		var binding = this.grid.getBinding();
		var data = inRowIndex>=0?binding.getRow(inRowIndex):{allSelect: true};
		var row = new unieap.ds.Row(binding.getRowSet(),data);
        var groupIdentifier = row.getIdentifier("_g");
        var selectIdentifier = row.getIdentifier("_s");
        var displayIdentifier = row.getIdentifier("_d");
        var _setCkeckDisplay;
        var outDiv = "<td  class='u-grid-rowbar-choice'><div class='u-grid-outDiv'><input type='checkbox' name='";
        try {
           _setCkeckDisplay = binding.rowData[inRowIndex]['_setCkeckDisplay'];
           if(_setCkeckDisplay === false){
               outDiv = "<td  class='u-grid-rowbar-choice'><div class='u-grid-outDiv gridSetDisplay'><input type='checkbox' name='"
		   }

        }catch (e) {
            _setCkeckDisplay = true;
            outDiv = "<td  class='u-grid-rowbar-choice'><div class='u-grid-outDiv'><input type='checkbox' name='";
        }
        // if( binding.rowData.length > 0){
        //     var _setCkeckDisplay = binding.rowData[inRowIndex]['_setCkeckDisplay'];
        //     console.log(_setCkeckDisplay)
        //
        // }
		if (groupIdentifier && (groupIdentifier["gr"] || groupIdentifier["gsr"])) {//分组行
			return "<td></td>";	
		}
		var check = [];
		var select = this;
		check.push(outDiv);
		check.push("checkbox_" + this.grid.id + "'");
		if (data["allSelect"]) {
			//设置全选按钮选中状态
			//todo:如果设置某些行不可以选中(row["_g"]["uncheckabled"]=true)
			//然后用户勾选表头复选框,grid重新刷新后，表头应该选中?
	
			var rs = this.grid.getBinding().getRowSet();
			//当Grid绑定的dataStore没有任何数据时，需要加上判断条件rs.getRowCount()>0才行
			//见bug U_EAP00011726
			if (rs.getRowCount()>0&&rs.getUnSelectedRows(unieap.ds.Buffer.PRIMARY).length == 0&&rs.getUnSelectedRows(unieap.ds.Buffer.FILTER).length == 0) {
				check.push(" checked='true' ");
			}
		} else if (selectIdentifier) {
			check.push(" checked='true' ");
			select.addToSelection(inRowIndex);
		} else {
			select.removeFromSelection(inRowIndex);
		}
		if(displayIdentifier && !displayIdentifier["displayed"]){
			check.push("style='display:none'");
		}
		if (!this.isSelectable(inRowIndex) || groupIdentifier && groupIdentifier["uncheckabled"]) {
			check.push(" disabled='true' ");
		}
        check.push("/>");
        check.push("<span class='u-grid-rowbar-checkbox'></span></div>");
		check.push("</td>");
		return check.join('');
	},
	
	update: function() {
		
	},
	
	/**
	 * @summary:
	 * 		取得表格的选择类型
	 * @return:
	 * 		{string}
	 * @enum:
	 * 		{"s"|"single"|"m"|"multiple"|"none"}
	 * @example:
	 * |<script type="text/javascript">
	 * |	var grid=unieap.byId("grid");
	 * |    var type=grid.getManager("SelectionManager").getSelectType(); 
	 * |	alert(type);
	 * |</script>
	 */
	getSelectType: function() {
		return this.selectType;
	},
	
	/**
	 * @summary:
	 * 		设置表格的选择类型
	 * @param:
	 * 		{string} inSelectType
	 * @enum:
	 * 		{"s"|"single"|"m"|"multiple"|"none"}
	 * @example:
	 * |<script type="text/javascript">
	 * |	var grid=unieap.byId("grid");
	 * |	var selectType = grid.getManager("SelectionManager").getSelectType();
	 * |	if(selectType=="m" || selectType=="multiple"){
   	 * |		grid.getManager("SelectionManager").setSelectType("s");
	 * |	}else if(selectType=="s" || selectType=="single"){
   	 * |		grid.getManager("SelectionManager").setSelectType("m"); 
	 * |	}
	 * |</script>
	 */
	setSelectType: function(inSelectType) {
		if (this.selectType == inSelectType) {
			return;
		} else {
			this.selectType = inSelectType;
			this.clearSelection && this.clearSelection();
			this.switchType();
			this.grid.managers.reloadManager("SelectionManager");
			this.grid.refresh();
		}
	},
	
	/**
	 * @summary:
	 * 		取得表格选中行
	 * @return:
	 * 		{array} 被选中的行的Row对象数组
	 * @example:
	 * |<script type="text/javascript">
	 * |	var grid=unieap.byId("grid");
	 * |	var selectedRows=grid.getManager('SelectionManager').getSelectedRows();
	 * |	unieap.debug(selectedRows);
	 * |</script>
	 */
	getSelectedRows: function() {
		try {
			return this.grid.getBinding().getRowSet().getSelectedRows();
		} catch (e) {
//			console.log("this.grid.getBinding().getRowSet().getSelectedRows()");
		}
	},
	
	
	/**
	 * @summary:
	 * 		取得选中的数据集
	 * @return：
	 * 		{unieap.ds.RowSet} 选中的数据对象组成的数据集
	 * @description：
	 * 		取得选中的数据集。
	 * 		当存在翻页缓存时,能够获取缓存中的数据。
	 * 		
	 */
	getSelectedDataSet:function(){
		var pagingMan=this.grid.getManager("PagingManager");
		if( pagingMan && pagingMan.pageCache){
			//如果存在缓存页
			var data=pagingMan.getSelectedCachedData();
			return new  unieap.ds.DataStore(data).getRowSet();
		}else{
			var rs = new unieap.ds.DataStore().getRowSet();
			var grs = this.grid.getBinding().getRowSet();
			var arr  = grs.getSelectedRowIndexs();
			var data = grs.getData();
			for(var i = 0;i<arr.length;i++){
				rs.addRow(data[arr[i]],false,true,false);
			}
			return rs;
		}
	},

	
	/**
	 * @summary:
	 * 		删除选中行
	 * @example:
	 * |<script type="text/javascript">
	 * |	var grid=unieap.byId("grid");
	 * |	grid.getManager('SelectionManager').deleteSelectedRows();
	 * |</script>
	 */
	deleteSelectedRows: function() {
		try {
			this.grid.getBinding().getRowSet().deleteSelectedRows();
			this.grid.managers.get("ViewManager").refresh();
		} catch(e) {
//			console.log("this.grid.getBinding().getRowSet().deleteSelectedRows()");
		}
	},
	
	/**
	 * @summary:
	 * 		选中前监听事件
	 * @description:
	 * 		此方法返回false时，选择将不生效。
	 * @param:
	 * 		{number} inRowIndex 行索引号
	 * @return:
	 * 		{boolean}
	 */
	onBeforeSelect: function(inRowIndex) {
		return true;
	},
	
	/**
	 * @summary:
	 * 		取消选择前监听事件
	 * @description:
	 * 		此方法返回false时，取消选择将不生效。
	 * @param:
	 * 		{number} inRowIndex 行索引号
	 * @return:
	 * 		{boolean}
	 * @example:
	 *|<div dojoType="unieap.grid.Grid"  width="80%" height="250px" binding="{store:'empDataStore'}" views="{rowNumber:true}" 
     *|	    selection="{selectType:'multiple',onBeforeDeselect:test}">
   	 *|		... 
	 *|</div>	  
	 */
	onBeforeDeselect: function(inRowIndex) {
		return true;
	},
	
	/**
	 * @summary:
	 * 		选择后事件
	 * @param:
	 * 		{number} inRowIndex 行索引号
	 * @example:
	 *|<div dojoType="unieap.grid.Grid"  width="80%" height="250px" binding="{store:'empDataStore'}" views="{rowNumber:true}" 
     *|     selection="{selectType:'single',onAfterSelect:test}">
	 *|</div>
	 */
	onAfterSelect: function(inRowIndex) {
	},
	/**
	 * @summary:
	 * 		取消选择后事件
	 * @param:
	 * 		{number} inRowIndex
	 * @example:
	 *|<div dojoType="unieap.grid.Grid"  width="80%" height="250px" binding="{store:'empDataStore'}" views="{rowNumber:true}" 
     *|	selection="{selectType:'multiple',onAfterDeselect:test}">
     *|</div>
	 */
	onAfterDeselect: function(inRowIndex) {
	},
	/**
	 * @summary:
	 * 		全选前事件
	 * @description:
	 * 		此方法返回false时，全部选择将不生效。
	 * @param:
	 * 		{boolean} select select为true全部选中前事件，为false表示全部取消选择前事件
	 * @return:
	 * 		{boolean}
	 * @example:
	 *|<div dojoType="unieap.grid.Grid"  width="80%" height="250px" binding="{store:'empDataStore'}" views="{rowNumber:true}" 
     *|selection="{selectType:'multiple',onBeforeAllSelect:test}">
	 *|</div>
	 */
	onBeforeAllSelect: function(select) {
		return true;
	},
	/**
	 * @summary:
	 * 		全选后事件
	 * @param:
	 * 		{boolean} select select为true全部选中后事件，为false表示全部取消选择后事件
	 * @example:
	 *|<div dojoType="unieap.grid.Grid" width="80%" height="250px" binding="{store:'empDataStore'}" views="{rowNumber:true}" 
     *|     selection="{selectType:'multiple',onAfterAllSelect:test}">
	 *|</div>
	 */
	onAfterAllSelect: function(select) {
	},
	
	//在用户没有配置selectType的情况下,下面方法是空实现
	//设置selectType属性后,在SelectionPatch.js中会对这些方法进行覆盖(mixin)
	
	/**
	 * @summary:
	 * 		设置表格行数据的选中状态
	 * @param:
	 * 		{number} inRowIndex 行索引号
	 * @param:
	 * 		{boolean} inSelect 选择状态，true表示选中，false表示不选
	 * @example:
	 * |<script type="text/javascript">
	 * |	var grid=unieap.byId("grid");
	 * |	//如果用户配置了selection属性,会选中复选框或者单选框
	 * |	grid.getManager('SelectionManager').setSelect(0,true);
	 * |</script>
	 */
	setSelect: function() {},
	
	/**
	 * @summary:
	 * 		设置表格全选,只对多选时有用
	 * @description:
	 * 		如果某一行的复选框被禁用,本方法将不会操作该行
	 * @param:
	 * 		{boolean} inSelect 选择状态，true表示全选，false表示全取消选择
	 * @example:
	 * |<script type="text/javascript">
	 * |	var grid=unieap.byId("grid");
	 * |	//选中rowBar上所有的复选框
	 * |	grid.getManager('SelectionManager').setAllSelect(true);
	 * |</script>
	 * @example:
	 * |<script type="text/javascript">
	 * |	var grid=unieap.byId("grid");
	 * |	//第一行不可选中
	 * |	grid.getManager('SelectionManager').setCheckabled(0,false);
	 * |	//除第一行没被选中外，其他行都选中
	 * |	grid.getManager('SelectionManager').setAllSelect(true);
	 * |</script>
	 */
	setAllSelect: function() {},
	
	/**
	 * @summary:
	 * 		判断某一行是否被选中
	 * @param:
	 * 		{number} inRowIndex 行索引号
	 * @return:
	 * 		{boolean}
	 * @example:
	 * |<script type="text/javascript">
	 * |	var grid=unieap.byId("grid");
	 * |	//判断第一行是否选中
	 * |	var selected=grid.getManager('SelectionManager').isSelected(0);
	 * |	alert(selected);
	 * |</script>
	 */
	isSelected: function(inRowIndex) {},
	
	/**
	 * @summary:
	 * 		取得选择的行号
	 * @return:
	 * 		{array}
	 * @example:
	 * |<script type="text/javascript">
	 * |	var grid=unieap.byId("grid");
	 * |	//获得选中的行号,返回一个数组
	 * |	var indexs=grid.getManager('SelectionManager').getSelectedRowIndexs();
	 * |	alert(indexs);
	 * |</script>
	 */
	getSelectedRowIndexs: function() {},
	
	/**
	 * @summary:
	 * 		清除所有选中项,包括禁用和非禁用的行
	 * @example:
	 * |<script type="text/javascript">
	 * |	var grid=unieap.byId("grid");
	 * |	grid.getManager('SelectionManager').clearSelection();
	 * |	
	 * |</script>
	 */
	clearSelection: function() {},
	
	/**
	 * @summary:
	 * 		设置一行是否可选中
	 * @param:
	 * 		{number} inRowIndex 行索引号
	 * @param:
	 * 		{boolean} checkabled 是否可选
	 * @example:
	 * |<script type="text/javascript">
	 * |	var grid=unieap.byId("grid");
	 * |	//设置第一行不可选中(第一行的复选框或者单选框被禁用)
	 * |	grid.getManager('SelectionManager').setCheckabled(0,false);
	 * |</scrsetCheckabled: function(inRowIndex, checkabled) {},
	
	/**
	 * @summary:
	 * 		设置一行选择状态是否显示
	 * @param:
	 * 		{number} inRowIndex 行索引号
	 * @param:
	 * 		{boolean} display 是否可选
	 * @example:
	 * |<script type="text/javascript">
	 * |	var grid=unieap.byId("grid");
	 * |	//设置第一行不可选中(第一行的复选框或者单选框不显示)
	 * |	grid.getManager('SelectionManager').setCheckDisplay(0,false);
	 * |</script>
	 */
	setCheckDisplay: function(inRowIndex, display) {},
	
	doPatch: function(inComponent) {
		if (!this.patcher) {
			dojo.require(this._patch);
			this.patcher = new unieap.grid.manager.SelectionPatch();
		}
		this.patcher.doPatch(inComponent);
	},
	
	destroy : function(){
		while(this.connects.length>0){
			dojo.disconnect(this.connects.pop());
		}
	}
});

dojo.provide('unieap.grid.manager.PrintManager');
dojo.declare("unieap.grid.manager.PrintManager", null, {
	/**
	 * @summary:
	 * 		打印控制器
	 * @classDescription：
	 * 		控制Grid的打印功能。
	 * @declaredClass:
	 * 		unieap.grid.manager.PrintManager
	 * @example:
	 * |	var manager=grid.getManager('PrintManager');
	 * 		得到打印控制器	
	 * @example:
	 * |	var manager=grid.getManager('PrintManager');
	 * |	manager.doPrint();
	 * 		进行打印
	 * @img:
	 * 		images/grid/print.png
	 */

	ui:{
		doPrint:true,
		setInfo:true
	},


	/**
	 * @summary:
	 * 		打印的url
	 * @type:
	 * 		{string}
	 * @example:
	 * |	<div dojoType='unieap.grid.Grid'>
	 * |		<header></header>
	 * |		<toolbar print="{url:'test.do'}" >
	 * |		</toolbar>
	 * |	</div>
	 * 		可在toolbar标签上的print定义url
	 * @example:
	 * |	var manager=grid.getManager('PrintManager');
	 * |	manager.setInfo({url:'test.do'});
	 * 		可以通过setInfo方法设置打印控制器的url
	 */
    url: null,
    
	
	/**
	 * @summary:
	 * 		打印所需的parameters
	 * @type：
	 * 		{object}
	 * @example:
	 * |	<div dojoType='unieap.grid.Grid'>
	 * |		<header></header>
	 * |		<toolbar print="{parameters:{user:'y',password:'f'}}" >
	 * |		</toolbar>
	 * |	</div>
	 * 		可在toolbar标签上的print定义parameters
	 * @example:
	 * |	var manager=grid.getManager('PrintManager');
	 * |	manager.setInfo({parameters:{user:'y',password:'f'}});
	 * 		可以通过setInfo方法设置打印控制器的parameters
	 */
    parameters: null,
    
    
    constructor: function(param){
        dojo.mixin(this, param);
    },
	
	
	/**
	 * @summary:
	 * 		打印操作
	 * @param:
	 * 		{object|null} printInfo 打印信息
	 * @example:
	 * |	grid.getManager('PrintManager').doPrint()
	 * 		通过PrintManager进行打印操作
	 * @example:
	 * |	var printInfo={url:'a.do',parameters:{a:b}}
	 * |	grid.getManager('PrintManager').doPrint(printInfo)
	 * 		通过PrintManager进行打印操作
	 */
	doPrint:function(printInfo){
		var printData = this.grid.getGridData();
		if(this.url){
			printData.url=this.url;
		}
		if(this.parameters){
			printData.parameters=this.parameters;
		}
		if(printInfo){
			if(printInfo.url){
				printData.url=printInfo.url;
			}
			if(printInfo.parameters){
				printData.parameters=printInfo.parameters;
			}
		}
        unieap.Action.doPrint(printData);
	},
	
	/**
	 * @summary:
	 * 		设置打印相关信息
	 * @param:
	 * 		{object} printInfo 打印信息
	 * @example:
	 * |	var manager=grid.getManager('PrintManager');
	 * |	var printInfo={
	 * |		url:'test',
	 * |		parameters:{user:'chen',password:'s'}
	 * |	}
	 * |	manager.setInfo(printInfo);
	 * 		设置翻页控制器的url与parameters属性。
	 */
	setInfo:function(printInfo){
		dojo.mixin(this,printInfo);
	}
	
});

dojo.provide('unieap.grid.manager.UnitedCellManager');

dojo.declare("unieap.grid.manager.UnitedCellManager", null, {
	/**
	 * @declaredClass:
	 * 		unieap.grid.manager.UnitedCellManager
	 * @summary:
	 * 		合并单元格控制器
	 * @description:
	 * 		提供合并单元格功能。
	 * 		标签中可配置unite属性指定一个需要合并的单元格数组，onCellClick指定合并后单元格的点击事件。
	 * 		合并单元格控制器还提供getUnitedCells方法取得被合并的单元格名称数组。
	 * @example:
	 * |	<div id="grid" id="grid" dojoType="unieap.grid.Grid" width="500px" height="200px"
	 * |		binding="{store:'empDataStore'}" views="{rowNumber:true}"
	 * |		unitedCell="{unite:['attr_deptno','attr_job'],onCellClick: onclick}">
	 * |		<header>
	 * |			<cell width="100px" label="部门" name="attr_deptno" decoder="{store:'DEPT',valueAttr:'CODEVALUE',displayAttr:'CODENAME'}"></cell>
	 * |			<cell width="150px" label="职位" name="attr_job"></cell>
	 * |			<cell width="150px" label="姓名" name="NAME"></cell>
	 * |			<cell label="员工编号" width="100" name="attr_empno" headerStyles="text-align: left;"></cell>
	 * |		</header>
	 * |	</div>
	 * @img:
	 * 		images/grid/grid_unitedCell.png
	 */
	
	ui: {
		getUnitedCells:true,
		events: {
			onCellClick:true,
			onContextMenu:true,
			onCellDblClick:true
		}
	},
	
	/**
	 * @summary:
	 * 		需要合并的单元格数组
	 * @description:
	 * 		指定需要列值合并的单元格数组，数组中为列绑定名
	 * 		指定列中如果上下单元格中的内容相同则合并为一个单元格
	 * @type:
	 * 		{array}
	 * @example:
	 *|<div dojoType="unieap.grid.Grid" id="grid" width="80%" height="250px" binding="{store:'empDataStore'}" views="{rowNumber:true}" 
     *|unitedCell="{unite:['attr_deptno','attr_job']}">
     *|	... ...
	 *|</div>
	 */
	unite: null,
	helpers: null,
	/**
	 * @summary:
	 * 		单元格合并是否有依赖
	 * @description:
	 * 		
	 * @type:
	 * 		{string}
	 * @example:
	 *|<div dojoType="unieap.grid.Grid" id="grid" width="80%" height="250px" binding="{store:'empDataStore'}" views="{rowNumber:true}" 
     *|unitedCell="{unite:['attr_deptno','attr_job'],cascade:false}">
     *|	... ...
	 *|</div>
	 */
	cascade:true,
	_table:'<table class="u-grid-row-table u-grid-unitedLayout" border="0" cellspacing="0" cellpadding="0"',
	
	constructor: function(param) {
		dojo.mixin(this, param);
		if (!dojo.isArray(this.unite)) {
			return;
		}
		this.helpers = {};
		this.unitedCells = {};
		this.connects = [];
		var viewManager=this.grid.managers.get("ViewManager");
		this.connects.push(dojo.connect(this.grid.managers.get("LayoutManager"), "onAfterAddCell", this, "onAddCell"));
		this.connects.push(dojo.connect(viewManager, "addView", this, "onAddView"));
		this.connects.push(dojo.connect(viewManager, "_prerender", this, "onpreRender"));
		this.connects.push(dojo.connect(viewManager, "setScrollTop", this, "render"));
		this.connects.push(dojo.connect(viewManager, "_postrender", this, "render"));
		this.connects.push(dojo.connect(this.grid.managers.get("RowManager"), "updateStyles", this, "updateStyles"));
		this.grid.managers.addPlus(this.grid,'getGridData',dojo.hitch(this, this.getGridData));
		for (var i=0,name; name=this.unite[i]; i++) {
			this.unitedCells[name] = {
				layers:[],
				superior:this.unite[i-1] || null
			};
		}
	},
	
	onAddCell: function(inCell) {
		var name = inCell.name;
		if (name && this.unitedCells[name]) {
			this.helpers[name] = new unieap.grid.UnitedCellHelper(inCell,this.unitedCells[name].superior, this);
			inCell.enable = false;
		}
	},
	
	onAddView: function(inView) {
		if (inView.isRowBar) return;
		var node = this.getUnitedLayer(inView);
//		inView.contentNode.appendChild(node);
		inView.unitedCellLayer = node;
		inView._resizeWidth = dojo.hitch(inView, function(node,index,width) {
			var colgroups; 
			if(node){
				colgroups = node.getElementsByTagName("colgroup");
				for(var colgroup, i= 0;colgroup = colgroups[i]; i++) {
					if (dojo.isFF) {
						dojo.style(colgroup.childNodes[index],"width",width);
					} else {
						dojo.style(colgroup.children[index],"width",width);
					}
				}
			}
		});
	},
	
	getUnitedLayer: function(inView) {
		var node = dojo.create('div', {
			'class':'u-grid-unitedLayer'
		});
		return node;
	},
	onpreRender: function() {
		var views = this.grid.managers.get("ViewManager").views,
			cellLayers=[];
		
		for (var i=0,v; v=views[i]; i++) {
			if (v.unitedCellLayer) {
				v.unitedCellLayer.innerHTML = this.generateHtml(v);
				//<div cell='attr_deptno'></div>
				var result = dojo.query("div[class=u-grid-unitedCellLayer]",v.unitedCellLayer);
				for (var j=0,c; c=result[j]; j++) {
					cellLayers.push(c);
				}
			}
		}
		var c;
		for (c in this.unitedCells) {
			this.unitedCells[c].layers = [];
		}
		for (var i=0,l; l=cellLayers[i]; i++) {
			this.unitedCells[dojo.attr(l, "cell")].layers.push(l);
		}

		for (var i=0,name,helper; name=this.unite[i]; i++) {
			helper = this.getUnitedCellHelper(name);
			helper.reset();
		}
	},
	generateHtml: function(inView) {
		
		var html = [this._table], 
			v = inView,
			rows = v.contentStructure.rows;
		html.push('>');
		html.push(v.rowTable["colgroup"]);
		for(var j=0, row; (row=rows[j]); j++) {
			html.push('<tr>');
			for(var i=0, cell, markup; (cell=row[i]); i++) {
				markup = this.generateCellMarkup(cell);
				if(this.unitedCells[cell.name]) {
					markup[5] = "<div class='u-grid-unitedCellLayer' cell='" + cell.name + "'></div>";
				}
				html.push(markup.join(''));
			}
			html.push('</tr>');
		}
		html.push('</table>');
		return html.join('');
	},
	generateCellMarkup: function(inCell) {
		var result = [], html, colSpan, rowSpan;
		colSpan = "contentColSpan";
		rowSpan = "contentRowSpan";
		
		html = [ '<td tabIndex="-1"' ];
		
		inCell.colSpan && html.push(' colspan="', inCell.colSpan, '"');
		inCell.rowSpan && html.push(' rowspan="', inCell.rowSpan, '"');
		html.push('');//class
		// result[0] => td opener, style
		result.push(html.join(''));
		// SLOT: result[1] => td classes 
		html = [' idx="', inCell.index, '" style="'];
		html.push('height:100%;');
		// result[2] => markup
		result.push(html.join(''));
		// SLOT: result[3] => td style 
		result.push('');
		html = [ '"' ];
		inCell.attrs && html.push(" ", inCell.attrs);
		html.push('>');
		// result[4] => td postfix
		result.push(html.join(''));
		// SLOT: result[5] => content
		result.push('');
		// result[6] => td closes
		result.push('</td>');
		return result;
	},
	
	getUnitedCellHelper: function(name) {
		/** 修改前
		if (this.helpers[name]) {
			return this.helpers[name];
		}
		**/

		/** 修改后 为了避免this.connects为空时候报错，导致页面销毁时候js报错而无法点击其他菜单的bug**/
		if (this.helpers && this.helpers[name]) {
			return this.helpers[name];
		}
		return null;
	},
	
	render: function() {
		//用了一个全局的job id,导致有多个grid同时渲染时
		//只渲染了了最后一个,见bug U_EAP00008063
		unieap.grid.jobs.job("u-grid-renderUnited-"+this.grid.id, 0, dojo.hitch(this, function() {
			for (var i=0,name,helper; name=this.unite[i]; i++) {
				helper = this.getUnitedCellHelper(name);
				helper.reset();
				helper.render();
			}
		}));
	},
	
	updateStyles: function(inRowIndex) {
		if (inRowIndex<0) return;

		var nodes = this.getNodes(inRowIndex);
		if (dojo.isArray(nodes) && nodes.length>0) {
			
			for (var i=0,node; node=nodes[i]; i++) {
				this.styleRowNode(inRowIndex, node);
			}
		}
	},
	styleRowNode: function(inRowIndex, inRowNode) {
		var row = this.prepareStylingRow(inRowIndex, inRowNode);
		this.onStyleRow(row);
		this.applyStyles(row);
	},
	prepareStylingRow: function(inRowIndex, inRowNode) {
		var rm = this.grid.managers.get("RowManager");
		return {
			index: inRowIndex, 
			node: inRowNode,
			odd: Boolean(inRowIndex&1),
			over: rm.isOver(inRowIndex),
			customStyles: "",
			customClasses: "u-grid-unite-cell"
		}
	},
	onStyleRow: function(inRow) {
		var rm = this.grid.managers.get("RowManager");
		with(inRow) {
			customClasses += (odd?" u-grid-row-odd":"")  
			+ (over?" u-grid-row-over":"")
			+((index==rm.currentRowIndex)?" u-grid-row-current":"");
		}
	},
	applyStyles: function(inRow) {
		with(inRow) {
			node.className = customClasses;
			var h = node.style.height,top=node.style.top;
			unieap.grid.setStyleText(node, customStyles + ';' + (node._style||''));
			node.style.height = h;
			node.style.top=top;
		}
	},
	getNodes: function(inRowIndex) {
		var nodes = [];
		for (var i=0,name,helper; name=this.unite[i]; i++) {
			helper = this.getUnitedCellHelper(name);
			var rowNodes = helper.nodes[inRowIndex];
			if (dojo.isArray(rowNodes) && rowNodes.length>0) {
				for (var j=0,n; n=rowNodes[j]; j++) {
					nodes.push(n);
				}
			}
		}
		return nodes;
	},
	
	destroy : function(){
		/**修改前
		for(var i=0,l=this.connects.length;i<l;i++){
				dojo.disconnect(this.connects[i]);
		   }
		**/

		/** 修改后  为了避免this.connects为空时候报错，导致页面销毁时候js报错而无法点击其他菜单的bug **/
	   if(this.connects){
		   for(var i=0,l=this.connects.length;i<l;i++){
				dojo.disconnect(this.connects[i]);
		   }
	   }
	   for (var i=0,name,helper; name=this.unite[i]; i++) {
			var helper = this.getUnitedCellHelper(name);
			if(helper){
				helper.destroy();
			}
	   }
	   unieap.grid.jobs.cancelJob("u-grid-renderUnited-"+this.grid.id);
	},
	
	//user interface
	/**
	 * @summary:
	 * 		取得合并单元格名称数组
	 * @return:
	 * 		{array}
	 * @example:
	 *|grid.getManager("UnitedCellManager").getUnitedCells(); 
	 */
	getUnitedCells: function() {
		return this.unite;
	},
	
	/**
	 * @summary:
	 * 		合并的单元格点击事件
	 * @param:
	 * 		{unieap.grid.Cell} inCell 当前的合并单元格所在列Cell对象
	 * @param:
	 * 		{number} inRowIndex 行索引号
	 * @example:
	 *|<div dojoType="unieap.grid.Grid" id="grid" width="80%" height="250px" binding="{store:'empDataStore'}" views="{rowNumber:true}" 
     *|unitedCell="{unite:['attr_job'],onCellClick: test}">
     *|	... ...
	 *|</div>
	 */
	onCellClick: function(inCell, inRowIndex) {
		
	},
	
	/**
	 * @summary:
	 * 		合并的单元格双击事件
	 * @param:
	 * 		{unieap.grid.Cell} inCell 当前的合并单元格所在列Cell对象
	 * @param:
	 * 		{number} inRowIndex 行索引号
	 * @example:
	 *|<div dojoType="unieap.grid.Grid" id="grid" width="80%" height="250px" binding="{store:'empDataStore'}" views="{rowNumber:true}" 
     *|		unitedCell="{unite:['attr_job'],onCellDblClick: test}">
     *|	... ...
	 *|</div>
	 */
	onCellDblClick: function(inCell, inRowIndex) {
		
	},
	
	/**
	 * @summary:
	 * 		合并单元格右键菜单事件
	 * @param:
	 * 		{unieap.grid.Cell} cell 当前的合并单元格所在列Cell对象
	 * @param:
	 * 		{domNode} cellNode 当前单元格DOM结点
	 * @param:
	 * 		{number} inRowIndex 行索引号
	 * @example:
	 * |<div dojoType="unieap.grid.Grid" id="grid" width="80%" height="250px" binding="{store:'empDataStore'}" views="{rowNumber:true}" 
     * |		unitedCell="{unite:['attr_job'],onContextMenu: fn}">
     * |		... ...
	 * |</div>
	 * |<script type="text/javascript">
	 * |	var menu;
	 * |	function fn(cell,cellNode,inRowIndex){
	 * |		if(!menu){
	 * |			menu=new unieap.menu.Menu({style:'display:none'});
	 * |			menu.addChild(new unieap.menu.MenuItem({label:"你好"}));
	 * |			menu.addChild(new unieap.menu.MenuItem({label:"基础软件"}));
	 * |			menu.startup();
	 * |		}
	 * |		menu.bindDomNode(cellNode);
	 * |	}	
	 * |</script>
	 */
	onContextMenu:function(cell,cellNode,inRowIndex){},
	
	

	
	
	getGridData: function(){
		return {unitedCells:this.unite};
	}
	
});

dojo.provide("unieap.grid.UnitedCellHelper");
dojo.declare("unieap.grid.UnitedCellHelper", null, {
	
	constructor: function(inCell, superior, uniteManager) {
		this.cell = inCell;
		this.superior = superior;
		this.manager = uniteManager;
		this.views = this.cell.grid.managers.get("ViewManager");
		this.rowHeight = this.cell.grid.managers.get("RowManager").defaultRowHeight;
		this.view = this.views.getViewByCell(this.cell);
		this.nodes = {};
		this.boundary = {};
		this.cascade = uniteManager.cascade;
	},
	
	getRowCount: function() {
		//return this.cell.grid.getBinding().getRowData().length;
		return this.cell.grid.getBinding().getInternalRowSet().getRowCount();
	},
	
	render : function(){
	
		var top = this.views.scroller.firstVisibleRow;
		var bottom = this.views.scroller.lastVisibleRow-1;

		var layers = this.manager.unitedCells[this.cell.name].layers;
		if (dojo.isArray(layers) && layers.length>0) {
			for(var i=top;i<=bottom;i++){
				this.parseRow(i, layers);
			}
		}
	

	},
	
	parseRow : function(inRowIndex, layers) {
		
		var unite = this.unite = this.unite || [];
		var binding = this.cell.grid.getBinding();
		if (!dojo.isArray(layers)) {
			return;
		}
		if(unite[inRowIndex] || layers.length<=0) {
			return;
		}
		this.nodes[inRowIndex] = [];

		var row = binding.getRow(inRowIndex);
		
		var value = this.cell.get ? unieap.fireEvent4Widget(this.cell,this.cell.grid,this.cell.get,[inRowIndex]) : this.cell._get(inRowIndex);
		unite[inRowIndex]=1;
		var top = inRowIndex,
			superiorHelper = this.manager.getUnitedCellHelper(this.superior);
			preRow = binding.getRow(inRowIndex-1);
		
			
		var rowObject = new unieap.ds.Row(binding.getRowSet(),row);
		var rowGroup = rowObject.getIdentifier("_g");
		var preRowObject,preRowGroup;
		if(preRow){
			preRowObject = new unieap.ds.Row(binding.getRowSet(),preRow);
			preRowGroup = preRowObject.getIdentifier("_g");
		}
		
			
		while(top-1>=0 && (this.cell.get ? unieap.fireEvent4Widget(this.cell,this.cell.grid,this.cell.get,[top-1]) : this.cell._get(top-1))==value//向上搜索,直至值不再相同
			&& (!this.cascade || (!(rowGroup && rowGroup["gr"])//搜索至分组行停止
			&& (preRowObject&&!(preRowGroup && preRowGroup["gr"])) //上一行不存在分组
			&& (this.superior?this.manager.getUnitedCellHelper(this.superior).restrain(top):"true")))) { //是否满足上级单元格合并
			top--;
			unite[top]=1;
			preRow = binding.getRow(top-1);
			if(preRow){
				preRowObject = new unieap.ds.Row(binding.getRowSet(),preRow);
				preRowGroup = preRowObject.getIdentifier("_g");
			}else{
				preRowObject = null;
				preRowGroup = null;
			}
		}
		
		var bottom = inRowIndex;
		var rowCount = this.getRowCount();
		var nextRow = this.cell.grid.getBinding().getRow(inRowIndex+1);
		
		
		var nextRowObject,nextRowGroup;
		if(nextRow){
			nextRowObject = new unieap.ds.Row(binding.getRowSet(),nextRow);
			nextRowGroup = nextRowObject.getIdentifier("_g");
		}
		
		while(bottom+1<rowCount && (this.cell.get ? unieap.fireEvent4Widget(this.cell,this.cell.grid,this.cell.get,[bottom+1]) : this.cell._get(bottom+1))==value //向下搜索,直至值不再相同 
			&& (!this.cascade || (!(rowGroup && rowGroup["gr"]) //搜索至分组行停止
			&& (nextRowObject&&!(nextRowGroup && nextRowGroup["gr"])) //下一行不存在分组
			&& (this.superior?this.manager.getUnitedCellHelper(this.superior).restrain(bottom+1):"true")))) {
				bottom++;
				unite[bottom]=1;
				nextRow = this.cell.grid.getBinding().getRow(bottom+1);
				if(nextRow){
					nextRowObject = new unieap.ds.Row(binding.getRowSet(),nextRow);
					nextRowGroup = nextRowObject.getIdentifier("_g");
				}else{
					nextRowObject = null;
					nextRowGroup = null;
				}
		}
		
		this.boundary[top] = true;
		this.boundary[bottom+1] = true;
		//这部分构造
		var rowSpan = bottom - top +1;
		
	

		for (var i=0, layer; layer=layers[i]; i++) {
			var node;
			if (inRowIndex%2) {
				node = dojo.create("div", {
					'class' : "u-grid-unite-cell u-grid-row-odd"
				});
			} else {
				node = dojo.create("div", {
					'class' : "u-grid-unite-cell"
				});
			}
			this.funnelEvents(node, top);
			node.pos = top;
			node.innerHTML = this.generUniteHTML(inRowIndex, row);
			dojo.style(node,"top",top * (this.rowHeight+1) + "px");
			dojo.style(node,"height",rowSpan * (this.rowHeight+1) + "px");
			layer.appendChild(node);
			this.nodes[inRowIndex].push(node);
		}
	},
	
	restrain: function(index) {
		return !this.boundary[index];
	},
	
	generUniteHTML : function(inRowIndex, row) {
		var result = ["<table cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" height=\"100%\">"];
		result.push("<tr>");
		
		if (row["_g"] && row["_g"]["gr"]) {
			result.push("<td class=\"u-grid-united-group\" style=\""+this.cell.styles+"\">");
		} else {
			//2018-11-8  防止 this.cell.style  返回值是undefined
			var style = this.cell.styles ? this.cell.styles :'line-height: 33px;height: 33px;' ;
			result.push("<td class=\"u-grid-unitedCell-inner\" style=\""+this.cell.styles+"\">");
		}
//		result.push("<nobr class='u-grid-text'>");
		result.push(this.cell.format(inRowIndex,null,true) || "&nbsp;");
//		result.push("</nobr>");
		result.push("</td>");
		result.push("</tr>");
		result.push("</table>");
		
		return result.join("");
	},
	
	funnelEvents: function(inNode, inRowIndex) {
		var rm = this.cell.grid.managers.get("RowManager"),
			vm = this.cell.grid.managers.get("ViewManager");
		inNode.onmouseover = dojo.hitch(this, function(e) {
			if (!rm.isOver(inRowIndex)) {
				rm.setOverRow(inRowIndex);
			}
			dojo.stopEvent(e);
		});
		
		
		inNode.onclick = dojo.hitch(this, function(e) {
			rm.updateCurrnetRow(inRowIndex);
			e=dojo.fixEvent(e);
			var target = e.srcElement;
			if(!target.type || !(target.type=="checkbox"||target.type=="radio")){
				dojo.stopEvent(e);
			}
			unieap.fireEvent4Widget(this.manager,this.cell.grid,this.manager.onCellClick,[this.cell, inRowIndex]);
			unieap.fireEvent4Widget(vm,this.cell.grid,vm.onCellClick,[this.cell, inRowIndex]);
			unieap.fireEvent4Widget(vm,this.cell.grid,vm.onRowClick,[inRowIndex]);
		});
		
		inNode.ondblclick = dojo.hitch(this, function(e) {
			e=dojo.fixEvent(e);
			dojo.stopEvent(e);
			unieap.fireEvent4Widget(this.manager,this.cell.grid,this.manager.onCellDblClick,[this.cell, inRowIndex]);
			unieap.fireEvent4Widget(vm,this.cell.grid,vm.onCellDblClick,[this.cell, inRowIndex]);
			unieap.fireEvent4Widget(vm,this.cell.grid,vm.onRowDblClick,[inRowIndex]);
		});
		
		
		inNode.onmouseup=dojo.hitch(this,function(e){
			e=dojo.fixEvent(e);
			if(e.button!=2){
				return;
			}
			unieap.fireEvent4Widget(this.manager,this.cell.grid,this.manager.onContextMenu,[this.cell,inNode,inRowIndex]);
			unieap.fireEvent4Widget(vm,this.cell.grid,vm.onContextMenu,[this.cell,inNode,inRowIndex]);
		});
	},
	
	reset : function() {
		this.releaseEvent();
		var layers = this.manager.unitedCells[this.cell.name].layers;
		for (var i=0,layer; layer=layers[i]; i++) {
			layer.innerHTML = "";
		}
		this.unite = null;
		this.nodes = {};
		this.boundary = {};
	},
	destroy : function(){
        this.releaseEvent();
	} ,
	
	releaseEvent : function(){
		for(var i in this.nodes){
		  if(this.nodes[i]){
		  	for(var j=0,ll=this.nodes[i].length;j<ll;j++){
				 this.nodes[i][j].onmouseover = null;
		         this.nodes[i][j].onclick = null;
				 this.nodes[i][j].onmouseup=null;
				 this.nodes[i][j].ondblclick=null;
			}
		  }
       }
	}
});
dojo.provide('unieap.grid.manager.XTreeManager');

dojo.declare("unieap.grid.manager.XTreeManager", null, {

//平面化的treeGrid，暂命名为xTreeGrid
	
	ui: {
		id: true,
		parent: true,
		label: true,
		leaf: true,
		query: true,
		isLazyTree: true,
		expandOnLoad: true,
		cascade: true,
		
		openedNodeIconClass: true,
		closedNodeIconClass: true,
		leafNodeIconClass: true,
		
		_baseRS: true,
		
		setDataStore: true,
		getDataStore: true,
		
		setAllSelect: true,
		setSelect: true,
		doExpandAll: true,
		
		createRow:  true,
		autoEdit: true,
		cascadeDelete: true,
		
		showLocate: true,
		doLocate: true,
		resetLocate: true,
		
		showFilter: true,
		doFilter: true,
		resetFilter: true,
		
		realId: true,
		
		events: {
			getLeafIconClass: true,
			rpc: true
		}
	},
	
	
	
	/**
	 * @summary:
	 * 		xTreeGrid中对应数据的标识字段
	 * @type:
	 * 		{string}
	 * @default:
	 * 		null
	 */
	id: null,
	
	/**
	 * @summary:
	 * 		xTreeGrid中标识父节点的字段名 
	 * @type:
	 * 		{string}
	 * @default:
	 * 		null
	 */	
	parent: null,
	
	/**
	 * @summary:
	 * 		xTreeGrid中显示为树节点的字段名，建议选择第一列 
	 * @type:
	 * 		{string}
	 * @default:
	 * 		null
	 */	
	label: null,
	
	/**
	 * @summary:
	 * 		xTreeGrid中标识叶子节点的字段名，字段值应为Boolean值
	 * @type:
	 * 		{string}
	 * @default:
	 * 		null
	 */	
	leaf: null,
	
	/**
	 * @summary:
	 * 		构建树的第一层节点的查询条件,例如:{name:'id',relation:'=',value='root'}
	 * @type:
	 * 		{object}
	 * @default:
	 * 		{
	 * 			name: null,
	 *	     	relation: '=',
	 *			value: null
	 * 		}
	 */	
	query: {
		name: null,
		relation: '=',
		value: null
	},
	
	/**
	 * @summary:
	 * 		xTreeGrid是否为懒加载，默认值为false
	 * @type:
	 * 		{boolean}
	 * @default:
	 * 		false
	 */	
	isLazyTree: false,
		
	/**
	 * @summary:
	 * 		在多选模式下，xTreeGrid是否级联选择
	 * @type:
	 * 		{boolean}
	 * @default:
	 * 		false
	 */	
	cascade: false,
			
	/**
	 * @summary:
	 * 		xTreeGrid加载后是否全展开,默认是false; 懒加载模式下此属性无效
	 * @type:
	 * 		{boolean}
	 * @default:
	 * 		false
	 */	
	expandOnLoad: false,
				
	/**
	 * @summary:
	 * 		xTreeGrid通过createRow增加数据后，如果是可编辑grid，是否自动使这一行进入编辑状态
	 * @type:
	 * 		{boolean}
	 * @default:
	 * 		false
	 */	
	autoEdit: false,
	
	/**
	 * @summary:
	 * 		xTreeGrid中非叶子节点的展开状态图标 
	 * @type:
	 * 		{string}
	 * @default:
	 * 		'u-grid-treegrid-openedIcon-default'
	 */	
	openedNodeIconClass: 'u-grid-treegrid-openedIcon-default',
	
	/**
	 * @summary:
	 * 		xTreeGrid中非叶子节点的收起状态图标 
	 * @type:
	 * 		{string}
	 * @default:
	 * 		'u-grid-treegrid-closedIcon-default'
	 */	
	closedNodeIconClass: 'u-grid-treegrid-closedIcon-default',
	
	/**
	 * @summary:
	 * 		xTreeGrid中叶子节点的默认图标 
	 * @type:
	 * 		{string}
	 * @default:
	 * 		'u-grid-treegrid-leafIcon-default'
	 */		
	leafNodeIconClass: 'u-grid-treegrid-leafIcon-default',

	/**
	 * @summary:
	 * 		懒加载时，自定义查询子节点的请求 
	 */		
	rpc:null,
	
	//用于缓存数据，现行的是rowSet对象，注意要clone！
	_baseRS: new unieap.ds.RowSet(),
	
	//克服AUX的叶子节点可能存在Id重复的问题！！！
	//目前可能涉及的地方：
	//1，删除某个叶子时（如果是子树应该问题不大）；
	//2，定位滚动到某行时；
	realId: null,
	
	//定位的view所在路径
	locateViewURL: "/techcomp/ria/xTreeGrid/loca-view.jsp",
	
	//筛选的view所在路径
	filterViewURL: "/techcomp/ria/xTreeGrid/filt-view.jsp",
	
	constructor: function(param) {

		dojo.mixin(this, param);
		this.connects = [];

		this.connects.push(dojo.connect(this.grid.managers.get("ViewManager"), "_doClick", this, "_doExpand"));

	},
	
//=======================UTIL区================================

	//-------------------对外接口------------------------------
	/**
	 * @summary：
	 * 		数据全展开/全收起功能，懒加载树不可用
	 * @param:
	 * 		{boolean} exp 全展开（true）/全收起（false） 如果无入参认为是false
	 */
	doExpandAll: function(exp){
		if(this.isLazyTree){
			return;
		}
		editMan = this.grid.getManager("EditManager");
		editMan && editMan.apply();
		var expand = (typeof(exp)=='undefined') ? false : exp;
		if(expand){
			this._expandAll();
		}else{
			this._collapseAll();
		}
	},
	    
	/**
	 * @summary：
	 * 		根据行号收起某行数据
	 * @param:
	 * 		{number} inRowIndex 行号
	 */
    collapseNodeByRowIndex: function(inRowIndex){
    	if(inRowIndex){
    		var rowData = this._getRowDataByRowIndex(inRowIndex);
    		this._collapseNode(rowData[this.id], inRowIndex);
    	}
    },
    
    /**
	 * @summary：
	 * 		根据数据的Id收起某行数据
	 * @param:
	 * 		{string} nodeId 数据的id
	 */
    collapseNodeByNodeId: function(nodeId){
    	if(nodeId){
    		var inRowIndex = this._getRowIndexByNodeId(nodeId);
    		this._collapseNode(nodeId, inRowIndex);
    	}
    },
        
	/**
	 * @summary：
	 * 		根据行号展开某行数据
	 * @param:
	 * 		{number} inRowIndex 行号
	 */
    expandNodeByRowIndex: function(inRowIndex){
    	var rowData = this._getRowDataByRowIndex(inRowIndex);
    	if(rowData){
    		this._expandNode(rowData[this.id], inRowIndex);
    	}
    },
        
    /**
	 * @summary：
	 * 		根据数据的Id展开某行数据
	 * @param:
	 * 		{string} nodeId 数据的id
	 */
    expandNodeByNodeId: function(nodeId){
    	if(nodeId){
    		var inRowIndex = this._getRowIndexByNodeId(nodeId);
    		this._expandNode(nodeId, inRowIndex);
    	}
    },
	
	/**
	 * @summary:
	 * 		自定义叶子节点的图标 
	 * @param:
	 * 		{object} rowData 当前行的数据
	 * @return:
	 * 		{string}
	 */		
	getLeafIconClass: function(rowData){
	
	},
	
	//-------------------对外接口END------------------------------
	
//=======================UTIL区END================================

//-----------------------数据集操作--------------------------
	 
	//获取xTreeGrid的数据源
	getDataStore: function(){
		if(this._baseRS == null){ //U_EAP00029207
			return this.grid.getBinding().getDataStore();
		}
		var gridDS = this.grid.getBinding().getDataStore();
		var newDS = gridDS.clone(gridDS.getName());
		if(this._baseRS){
		newDS.setRowSet(this._baseRS);
		} else {
			newDS.getRowSet().deleteAllRows();
		}
		return newDS;
	},
	
 	//为xTreeGrid设置数据源
	setDataStore: function(ds){
		this._baseRS = new unieap.ds.RowSet();
		if(ds == null){ //U_EAP00029207
			//view.grid.setDataStore中如果是清空操作 不需要执行下面的内容			
		}else{
		if(this.isLazyTree){
				var newDS = this._getLazyTreeRoots(ds);
				if(ds.pageNumber && ds.pageSize && ds.recordCount){
					newDS.pageSize = ds.pageSize;
					newDS.pageNumber = ds.pageNumber;
					newDS.recordCount = ds.recordCount
				}
				this.grid.getBinding().setDataStore(newDS);
		}else{
			if (this.expandOnLoad) {
				var newDS = this._getAllExpandedDataStore(ds);
				if(ds.pageNumber && ds.pageSize && ds.recordCount){
					newDS.pageSize = ds.pageSize;
					newDS.pageNumber = ds.pageNumber;
					newDS.recordCount = ds.recordCount
				}
				this.grid.getBinding().setDataStore(newDS);
			} else {
				var newDataStore = this._getRootsDataStore(ds);
				if(ds.pageNumber && ds.pageSize && ds.recordCount){
					newDataStore.pageSize = ds.pageSize;
					newDataStore.pageNumber = ds.pageNumber;
					newDataStore.recordCount = ds.recordCount
				}
				this.grid.getBinding().setDataStore(newDataStore);
				}
			}
		}
		this.grid.managers.get("ViewManager").refresh();
	}, 
	
//-------------------数据集操作END------------------------------	
	
//-------------------级联选中------------------------------
	    
    //全部选中的方法，入参是boolean值
    setAllSelect: function(inSelect){
    	var rowSet = this._baseRS;
		for(var i=0,len = rowSet.getRowCount(); i<len; i++){
			rowSet.getRow(i).setRowSelected(inSelect);
		}
    },
    
        
    //设置选中某个子树的方法，入参是行号和选择状态（boolean值）
    setSelect: function(inRowIndex, inSelect){
    	if(this.cascade){
    		var nodeId = this._getRowDataByRowIndex(inRowIndex)[this.id];
    		var baseRSRowIndex = this._getRowIndexByNodeIdInBaseRS(nodeId);//将grid展示的行号转化为baseRS中的行号
    		this._selectChildren(baseRSRowIndex, inSelect);
			var views = this.grid.managers.get("ViewManager");
			views.render(views.scrollTop);
    	}
    },
	
//-------------------级联选中END------------------------------
	


//-----------------------内部基本方法-----------------------------

	//懒树时处理dataStore
	_getLazyTreeRoots: function(ds){
		this._baseRS = ds.getRowSet();
		var rowSet = ds.getRowSet();
		var gridDS = this.grid.getBinding().getDataStore();
		var newDataStore = new unieap.ds.DataStore(gridDS.getName());
		newDataStore.setRowSetName(gridDS.getRowSetName());
		var newRowSet = newDataStore.getRowSet();
        for (var i = 0,count = rowSet.getRowCount(); i < count; i++) {
        	newRowSet.insertRow(rowSet.getRowData(i));
        }
		return newDataStore;
	},
	
	//----------------------这些都是操作grid中的rowSet-----------------------
	
	//根据行号获取该行的数据
	_getRowDataByRowIndex: function(inRowIndex){
		return this.grid.getBinding().getRowSet().getRowData(inRowIndex) || null;
	},
	
	//根据rowData得到深度,根节点的depth为1
	_getDepthByRowData: function(rowData){
		var relation = this.query.relation;
        var itemName = this.query.name;
        var itemValue = this.query.value;

        var parentId = rowData[itemName];
        var depth = 1;

        if (relation == '=') {
            while (parentId != itemValue) {
                var rowData = this._getRowDataByNodeId(parentId);
                parentId = rowData[itemName];
                depth++;
            }
            return depth;
        }
        else {
            while (String(parentId).indexOf(itemValue) == -1) {
                var rowData = this._getRowDataByNodeId(parentId);
                parentId = rowData[itemName];
                depth++;
            }
            return depth;
        }
	},
	
	//根据节点ID获得rowData
	_getRowDataByNodeId: function(nodeId){
		var rowSet = this.grid.getBinding().getRowSet();
        var result = null;
        for (var i = 0, count = rowSet.getRowCount(); i < count; i++) {
            if (rowSet.getItemValue(i, this.id) == nodeId) {
                result = rowSet.getRowData(i);
                break;
            }
        }
        return result;
	},
	
	//判断当前行是否已经展开
	_isNodeExpanded: function(rowData, inRowIndex){
		if (rowData[this.leaf]) {
            return false;
        }
        else {
            var rowCount = this.grid.getBinding().getRowSet().getRowCount() - 1;
            if (inRowIndex == rowCount) {
                return false;
            }
            else {
                var nextRowData = this._getRowDataByRowIndex(inRowIndex + 1);
                if (rowData[this.id] == nextRowData[this.parent]) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
	},
	    
    //判断是否为叶子节点，懒加载时不可用
	_isLeaf: function(rowData){
        var rowSet = this._baseRS;
        var nodeId = rowData[this.id];
        var childParentId = null;
        var result = true;
        for (var i = 0,count = rowSet.getRowCount(); i < count; i++) {
            childParentId = rowSet.getRowData(i)[this.parent];
            if (childParentId == nodeId) {
                result = false;
                break;
            }
        }
        return result;
    },
    
    //----------------------这些都是操作grid中的rowSet END-----------------------
	
	//根据节点的ID，从baseRS中获取其子节点的数据
	_getChildrenRowDatasByNodeId: function(nodeId) {
        var result = [];
        var rowCount = this._baseRS.getRowCount();
        var row = null;
        for (var i = 0; i < rowCount; i++) {
            rowData = this._baseRS.getRowData(i);
            if (nodeId == rowData[this.parent]) {
                result.push(rowData);
            }
        }
        return result;
    },
    
    //懒加载时用于更新叶子节点的状态
    _updateIsLeaf: function(nodeId){
    	 var rowSet = this._baseRS;
    	 var row = null;
    	 for(var i = 0,count = rowSet.getRowCount();i<count;i++){
    	 	if(rowSet.getItemValue(i,this.id)==nodeId){
    	 		row = rowSet.getRow(i);
    	 		var isModified = row.isModified(); 
    	 		rowSet.setItemValue(i,"_treeGridIsLeaf",true);
    	 		!isModified && rowSet.resetUpdate(i);
    	 		break;
    	 	}
    	 }
    },
    
    //通过数据的Id获得在baseRS中的index
    _getRowIndexByNodeIdInBaseRS: function(nodeId){
    	var result = 0;
        var rowSet = this._baseRS;
        var idName = this.id;
        for (var i = 0,count = rowSet.getRowCount(); i < count; i++) {
            if (rowSet.getRowData(i)[idName] == nodeId) {
                result = i;
                break;
            }
        }
        return result;
    },
    
    //通过数据的Id获得在baseRS中的rowData
    _getRowDataByNodeIdInBaseRS: function(nodeId){
    	var result = null;
        var rowSet = this._baseRS;
        var idName = this.id;
        for (var i = 0,count = rowSet.getRowCount(); i < count; i++) {
            if (rowSet.getRowData(i)[idName] == nodeId) {
                result = rowSet.getRowData(i);
                break;
            }
        }
        return result;
    },
    
    //克服AUX中id可能重复的问题；根据realId获得grid中的行号
    _getRowIndexByRealId: function(realId){
    	var result = 0;
    	var rowSet = this.grid.getBinding().getDataStore().getRowSet();
    	var realIdName = this.realId;
    	for (var i = 0,count = rowSet.getRowCount(); i < count; i++) {
            if (rowSet.getRowData(i)[realIdName] == realId) {
                result = i;
                break;
            }
        }
        return result;
    },
    
    //克服AUX中id可能重复的问题；根据realId获得baseRS中的行号
    _getRowIndexByRealIdInBaseRS: function(realId){
    	var result = 0;
    	var rowSet = this._baseRS;
    	var realIdName = this.realId;
    	for (var i = 0,count = rowSet.getRowCount(); i < count; i++) {
            if (rowSet.getRowData(i)[realIdName] == realId) {
                result = i;
                break;
            }
        }
        return result;
    },
    
//-----------------------内部基本方法END-----------------------------
    
//----------------------展开节点--------------------------------------      
    
    //展开节点后的插入数据操作
	_insertRows: function(rows, inRowIndex) {
		if(rows.length>0){
	        var rowIndex = inRowIndex || this.grid.getRowManager().getCurrentRowIndex();
	        var treeGridDS = this.grid.getBinding().getDataStore();
	        var rowSet = new unieap.ds.RowSet(treeGridDS.getRowSet().getData());
	        for (var i = 0, count = rows.length; i < count; i++) {
	            rowSet.insertRow(rows.pop(), rowIndex);
	        }
	        treeGridDS.setRowSet(rowSet);
			var views = this.grid.managers.get("ViewManager");
			views.render(views.scrollTop);
		}
    },
    
//----------------------展开节点END-------------------------------------- 
    
//----------------------收起节点--------------------------------------  
    
    //收起节点时删除子孙节点
	_deleteRows: function(rowData, inRowIndex) {
		var grid = this.grid;
		var rowMgr = grid.getRowManager();
	        var rowIndex = inRowIndex || rowMgr.getCurrentRowIndex();
	        var delRowIndexs = this._getRowIndexsToCollapseByParentId(rowData, rowIndex);
		var views = grid.managers.get("ViewManager");
	    	grid.getBinding().deleteRows(delRowIndexs);
		views.render(views.scrollTop);
		views.resize();    
    },
    
    //收起节点时，用于存放当前节点子树的所有下级子孙的rowIndex
     _rowIndexsToCollapse: [],
     
    //在grid的rowSet中，根据当前行号，获得该行构成的子树的所有子孙index（当前展示出来的子孙），构成数组
     _getRowIndexsByRowIndexInGridRS: function(rowIndex){
     	var childrenIndexs = this._getChildrenIndexsByRowIndexInGridRS(rowIndex);
     	if(childrenIndexs.length > 0){
     		this._rowIndexsToCollapse = this._rowIndexsToCollapse.concat(childrenIndexs);
     		for(var i=0,len=childrenIndexs.length; i<len; i++){
     			this._getRowIndexsByRowIndexInGridRS(childrenIndexs[i]);
     		}
     	}
     	return this._rowIndexsToCollapse;
     },
     
    //根据父节点的行号获得grid的rowSet中所有子节点的行号
    _getChildrenIndexsByRowIndexInGridRS: function(inRowIndex){
    	var rowSet = this.grid.getBinding().getDataStore().getRowSet();
    	var results = [];
    	var nodeId = rowSet.getRowData(inRowIndex)[this.id];
    	for(var i=0,len=rowSet.getRowCount(); i<len; i++){
    		if(rowSet.getRowData(i)[this.parent] == nodeId){
    			results.push(i);
    		}
    	}
    	return results;
    },
    
    //根据parentId获得需要删除的rowIndexs，为安全起见是倒叙的index
    
    //逻辑要修改一下--> 入参应该为rowData
    // 先判定是否为根节点
    // 根节点--> 寻找下一个根节点 构成数组 删除
    // 非根节点-->  递归子孙节点 放入数组 取出数组最大的一个 再重构 删除
	_getRowIndexsToCollapseByParentId: function (rowData, inRowIndex) {
		
		//inRowIndex是当前行号 inRowIndex+1也就是收起的起始rowIndex
        var gridRS = this.grid.getBinding().getRowSet();
        var endIndex = null;	//用于存放终止的rowIndex
        var results = [];
        var relation = this.query.relation;
        var itemName = this.query.name;
        var itemValue = this.query.value;
        
        //是否为根节点
        if (this._isRoot(rowData)){
            if (relation == "=") {
                for (var i = inRowIndex + 1, count = gridRS.getRowCount(); i < count; i++) {
                    if (gridRS.getItemValue(i, itemName) == itemValue) {
                    	//收起时只需要到该子树的最后一行，即另一个根节点的上一行
                        endIndex = ( i - 1 );
                        break;
                    }
                }
            }else {
                for (var i = inRowIndex + 1, count = gridRS.getRowCount(); i < count; i++) {
                    if (String(gridRS.getItemValue(i, itemName)).indexOf(itemValue) > -1) {
                    	//收起时只需要到该子树的最后一行，即另一个根节点的上一行
                        endIndex = ( i - 1 );
                        break;
                    }
                }
            }
          	if(endIndex == null){//可能是最后一个根节点
          		endIndex = ( gridRS.getRowCount()-1 );
          	}
        }else{
        	this._rowIndexsToCollapse = [];
        	var allChildrenRowIndex = this._getRowIndexsByRowIndexInGridRS(inRowIndex);
        	var len = allChildrenRowIndex.length;
        	if(len > 0){
        		//降序排序，然后获得最大值
//	        	allChildrenRowIndex.sort();
				var temp = null;
				for(var m = 0; m < len; m++){
					for(var n = m+1; n < len; n++){
						if(allChildrenRowIndex[m] < allChildrenRowIndex[n]){//降序排列，防止删除后干扰顺序
							temp = allChildrenRowIndex[n];
							allChildrenRowIndex[n] = allChildrenRowIndex[m];
							allChildrenRowIndex[m] = temp;
						}
					}
				}
	        	endIndex = allChildrenRowIndex[0];	
        	}else{
        		endIndex = inRowIndex;
        	}
        }
        //倒叙防错删
        for (var i = endIndex ; i > inRowIndex; i--) {
            results.push(i);
        }
        return results;
                
    },
    
//----------------------收起节点END-------------------------------------- 
    
    //全加载时，用于取得根节点的DS
	_getRootsDataStore: function(ds) {
        this._baseRS = ds.getRowSet();
        var rowSet = ds.getRowSet();
        var relation = this.query.relation;
        var itemName = this.query.name;
        var itemValue = this.query.value;
//        var newDataStore = ds.clone(this.grid.getBinding().getDataStore().getName());
//        var newRowSet = newDataStore.getRowSet();
//        newRowSet.deleteAllRows();
//        newRowSet.resetUpdate();
		var gridDS = this.grid.getBinding().getDataStore();
		var newDataStore = new unieap.ds.DataStore(gridDS.getName());
		newDataStore.setRowSetName(gridDS.getRowSetName());
		var newRowSet = newDataStore.getRowSet();
        if (relation == "=") {
            for (var i = 0,count = rowSet.getRowCount(); i < count; i++) {
                if (rowSet.getItemValue(i, itemName) == itemValue) {
                    newRowSet.insertRow(rowSet.getRowData(i));
                }
            }
        }
        else {
            for (var i = 0,count = rowSet.getRowCount(); i < count; i++) {
                if (String(rowSet.getItemValue(i, itemName)).indexOf(itemValue) > -1) {
                    newRowSet.insertRow(rowSet.getRowData(i));
                }
            }
        }
        return newDataStore;
    },
    
    //根据节点的ID得到节点的当前行号
	_getRowIndexByNodeId: function(nodeId){
        var result = null;
        var rowSet = this.grid.getBinding().getRowSet();
        var idName = this.id;
        for (var i = 0,count = rowSet.getRowCount(); i < count; i++) {
            if (rowSet.getItemValue(i, idName) == nodeId) {
                result = i;
                break;
            }
        }
        return result;
    },
    
//=========================新增方法===============================
    
    //用于判断当前grid中是不是有该数据的子节点，入参是这条数据的Id，返回值boolean
    _isChildrenInGrid: function(nodeId){
    	var parentName = this.parent;
    	var result = false;
    	var rowSet = this.grid.getBinding().getDataStore().getRowSet();
    	for(var i = 0,len = rowSet.getRowCount(); i<len; i++){
    		if(rowSet.getItemValue(i, parentName) == nodeId){
    			result = true;
    			break;
    		}	
    	}
    	return result;
    },
    
    //收起的内部实现，入参是行号
    _collapseNode: function(nodeId, inRowIndex){
		var hasChildren = this._isChildrenInGrid(nodeId);
	    if(hasChildren){//当前grid中有子节点才收起	
    		var rowData = this._getRowDataByRowIndex(inRowIndex);
	    	this._deleteRows(rowData, inRowIndex);
	    }
    },

    
    //展开的内部实现，入参是数据的Id和需要执行的行号，区分是否需要发ajax
    _expandNode: function(nodeId, inRowIndex){
    	var hasChildren = this._isChildrenInGrid(nodeId);
    	if(!hasChildren){ //当前grid中没有子节点才展开
	    	var insertRows = this._getChildrenRowDatasByNodeId(nodeId);
	    	if(insertRows.length == 0 && this.isLazyTree){ //需要通过ajax请求去获得数据
	    		this._expandNodeForLazyTree(nodeId, inRowIndex);
	    	}else{
	    		 this._insertRows(insertRows, inRowIndex + 1);
	    	}
    	}
    },
    
    //懒加载且没有缓存数据时，需要用rpc发ajax请求去获取数据，入参是数据的Id和需要执行的行号
    _expandNodeForLazyTree: function(nodeId,inRowIndex){
    	var _self = this;
    	var rowData = this._getRowDataByRowIndex(inRowIndex);
    	var selectType = this.grid.getManager("SelectionManager") ? this.grid.getManager("SelectionManager").getSelectType() : 'none';
        var isMultiSelect = (selectType == 'm' || selectType == 'multiple');
        var isRowSelected = this.grid.getBinding().getDataStore().getRowSet().getRow(inRowIndex).isRowSelected();
        //成功回调
        var callback = function(a, b){
        	var ds,dc;
			if(arguments.length==2){
				ds=a;
				dc=b;
			}else if(arguments.length==1){
				dc=a;
			}else{
				return;
			}
			!ds && (ds = dc.getSingleDataStore());
			//懒加载成功回调的逻辑
	        var rowSet = ds.getRowSet();
	        var rowDatas = [];
	        if (rowSet.getRowCount() > 0) {
                rowDatas = rowSet.getData(unieap.ds.Buffer.PRIMARY);
                var rowIndexToInsert = _self._getRowIndexByNodeIdInBaseRS(nodeId) + 1;
            	var rowIndexRevise = 0;//插入一条之后要偏移一条
                for (var i = 0, count = rowDatas.length; i < count; i++) {
					(_self.cascade) && (isMultiSelect) && (isRowSelected) && (rowDatas[i]._s = true);
                    _self._baseRS.insertRow(rowDatas[i],rowIndexToInsert + rowIndexRevise, false, true);
                    rowIndexRevise++;
                }
                _self._insertRows(rowDatas, inRowIndex + 1);
	        }else{
	        	var bindRowSet = _self.grid.getBinding().getDataStore().getRowSet();
	        	var isModified = bindRowSet.getRow(inRowIndex).isModified(); 
	        	bindRowSet.setItemValue(inRowIndex, "_treeGridIsLeaf", true);
	        	!isModified && bindRowSet.resetUpdate(inRowIndex);
	        	_self.grid.getManager('ViewManager').refreshRow(inRowIndex);
	        }	
        }
		if(dojo.isFunction(this.rpc)){
			this.rpc(rowData,callback,this.grid);
		}
    },
    
    //-----------------------复选逻辑--------------------------------
    
    //xtree为级联选择时，用于处理级联下级节点
    //基本逻辑是递归的从baseRS中获取需要设置选中的index，组成[index,...]
    //入参必须是baseRS中的行号！！！
    _selectChildren: function(inRowIndex, inSelect){
    	var rowSet = this._baseRS;
    	var nodeId = rowSet.getRowData(inRowIndex)[this.id];
    	var results = this._getRowIndexsToSelectByNodeId(nodeId);
    	var rowIndex = null;
		for(var i=0,len=results.length; i<len; i++){
			rowIndex = results[i];
			rowSet.getRow(rowIndex).setRowSelected(inSelect);
			this._selectChildren(rowIndex, inSelect);
		}
    },
    
    //根据Id获得baseRS中需要选中的行号
    _getRowIndexsToSelectByNodeId: function(nodeId){
    	var rowSet = this._baseRS;
    	var results = [];
    	for(var i=0,len=rowSet.getRowCount();i<len;i++){
    		if(rowSet.getRowData(i)[this.parent] == nodeId){
    			results.push(i);
    		}
    	}
    	return results;
    },

     //-----------------------复选逻辑END--------------------------------
     
     //-----------------------级联删除------------------------------
     
     //用于存放在baseRS中所有要删除的rowIndex
     _cascadeDeleteRowIndexs: [],
     
    /**
	 * @summary：
	 * 		根据行号级联删除整个子树
	 * @param:
	 * 		{number} inRowIndex 行号
	 */
     cascadeDelete: function(inRowIndex){
     	//删除grid中的数据部分
     	var rowData = this._getRowDataByRowIndex(inRowIndex);
     	this._deleteRows(rowData, inRowIndex);
     	this.grid.getBinding().getDataStore().getRowSet().deleteRow(inRowIndex);
     	
     	//删除baseRS中的部分
     	this._cascadeDeleteRowIndexs = [];
     	if(this.realId){
     		var realId = rowData[this.realId];
     		var baseRSRowIndex = this._getRowIndexByRealIdInBaseRS(realId);
     	}else{
			var nodeId = rowData[this.id];
     		var baseRSRowIndex = this._getRowIndexByNodeIdInBaseRS(nodeId);//将grid展示的行号转化为baseRS中的行号
     	}
     	this._cascadeDeleteRowIndexs.push(baseRSRowIndex);
     	var results = this._getAllRowIndexsByRowIndexInBaseRS(baseRSRowIndex);
     	this._baseRS.deleteRows(results);
     	
     	this._cascadeDeleteRowIndexs = [];
     	this.grid.refresh();
     },
     
     //在baseRS中获得需要级联删除的index数组
     _getAllRowIndexsByRowIndexInBaseRS: function(rowIndex){
     	var childrenIndexs = this._getChildrenIndexsByRowIndexInBaseRS(rowIndex);
     	if(childrenIndexs.length > 0){
     		this._cascadeDeleteRowIndexs = this._cascadeDeleteRowIndexs.concat(childrenIndexs);
     		for(var i=0,len=childrenIndexs.length; i<len; i++){
     			this._getAllRowIndexsByRowIndexInBaseRS(childrenIndexs[i]);
     		}
     	}
     	return this._cascadeDeleteRowIndexs;
     },
     
    //根据父节点的行号获得baseRS中所有子节点的行号
    _getChildrenIndexsByRowIndexInBaseRS: function(inRowIndex){
    	var rowSet = this._baseRS;
    	var results = [];
    	var nodeId = rowSet.getRowData(inRowIndex)[this.id];
    	for(var i=0,len=rowSet.getRowCount(); i<len; i++){
    		if(rowSet.getRowData(i)[this.parent] == nodeId){
    			results.push(i);
    		}
    	}
    	return results;
    },
     
     
     //-----------------------级联删除END---------------------------------
     
     
     //-----------------------新增行--------------------------------
     
     //在给定的rowSet中根据匹配次数找到符合nodeId的行号
     _getRowIndexInGivenRowSetByNodeIdOfOrder: function(rowSet, parentId, order, isInGrid){
     	var result = 0;
     	var matchCount = 0;
     	var lastMatchRowIndex = null;//当order为 -1 时，记录最后一个兄弟节点的index
     	var isBreak = false;
     	var parentRowIndex = null;//当父节点是个叶子时，获得父节点的index
     	var rowData = null;
     	for(var i= 0,len= rowSet.getRowCount(); i<len; i++){
     		rowData = rowSet.getRowData(i);
     		if(rowData[this.parent] == parentId){
     			if(matchCount == order){
     				result = i;
     				isBreak = true;
     				break;
     			}else{
     				matchCount++;
     				lastMatchRowIndex = i;
     			}
     		}else if(rowData[this.id] == parentId){
     			parentRowIndex = i;
     		}
     	}
     	if(parentRowIndex != null && lastMatchRowIndex == null){//确认是个叶子（或者order是0时）时，父节点的行号就当做最后匹配行号了
     		lastMatchRowIndex = parentRowIndex;
     	}
     	//当index已经超过children的总数时，我们认为它应该插入到最后一个child之后，成为最后的child
     	if(isInGrid && order != 0){ //order为0时，也就是父节点之下的那一行 不用再查询子孙节点
	     	//grid增节点时，比如增加到最后，那么应该是当前最后节点所有可见子孙的末尾，需要递归
	     	this._rowIndexsOfAllChildren = [];
	     	var allChildrenRonIndexs = this._getRowIndexsOfAllChildrenByRowIndex(isBreak ? result : lastMatchRowIndex);
	     	if(allChildrenRonIndexs.length>0){
		     	var lastRowIndex = allChildrenRonIndexs[0];
		     	for(var j=0,leng=allChildrenRonIndexs.length;j<leng;j++){
		     		if(lastRowIndex < allChildrenRonIndexs[j]){
		     			lastRowIndex = allChildrenRonIndexs[j];
		     		}
		     	}
		     	return lastRowIndex+1 ;
	     	}else{
	     		return isBreak ? result : lastMatchRowIndex+1;
	     	}
     	}else{
     	return isBreak ? result : lastMatchRowIndex+1 ;
     	}
     },
     //某个节点下所有子孙节点的rowIndex（）
     _rowIndexsOfAllChildren: [],
     //获得某个节点下边所有的子孙节点的行号，需要
     _getRowIndexsOfAllChildrenByRowIndex: function(inRowIndex){
     	var childrenIndexs = this._getChildrenIndexsByRowIndexInGridRS(inRowIndex);
     	if(childrenIndexs.length > 0){
     		this._rowIndexsOfAllChildren = this._rowIndexsOfAllChildren.concat(childrenIndexs);
     		for(var i=0,len=childrenIndexs.length; i<len; i++){
     			this._getRowIndexsOfAllChildrenByRowIndex(childrenIndexs[i]);
     		}
     	}
     	return this._rowIndexsOfAllChildren;
     },
     
     //在给定的rowSet中按order查找根节点
     _getRootIndexInGivenRowSetOfOrder:function(rowSet, order){
     	if(order == -1){//没有order的情况
     		return rowSet.getRowCount()+1;
     	}
     	var result = 0;
     	var matchCount = 0;
     	var isBreak = false;
		var relation = this.query.relation;
		var itemName = this.query.name;
		var itemValue = this.query.value;
		if(relation == "="){
			for(var i=0,len=rowSet.getRowCount(); i<len; i++){
				if(rowSet.getRowData(i)[itemName] == itemValue){
					if(matchCount == order){
						result = i;
						isBreak = true;
						break;
					}else{
						matchCount++;
					}
				}
			}
		}else{
			for(var i=0,len=rowSet.getRowCount(); i<len; i++){
				if(String(rowSet.getItemValue(i, itemName)).indexOf(itemValue) > -1){
					if(matchCount == order){
						result = i;
						isBreak = true;
						break;
					}else{
						matchCount++;
					}
				}
			}
		}
		return isBreak ? result : rowSet.getRowCount()+1;
     },
     
     //插入数据，入参是rowData和插入的index（grid中）
	 //入参isRoot（是否为根）；rowData（数据，parent已经修正）；index（插入位置，可为undefined）
     createRow: function(isRoot, rowData, index){
     	var gridRowSet = this.grid.getBinding().getDataStore().getRowSet();
     	var order = (typeof(index) == 'undefined') ? -1 : index;
     	if(!isRoot){//不是根节点时，需要找到父节点，遍历它的children以判断插入位置
     		var parentId = rowData[this.parent];
     		var parentRowData = this._getRowDataByNodeId(parentId);
        	var parentIndex = this._getRowIndexByNodeId(parentId);
     		
     		var selectType = this.grid.getManager("SelectionManager") ? this.grid.getManager("SelectionManager").getSelectType() : 'none';
        	var isMultiSelect = (selectType == 'm' || selectType == 'multiple');
        	var isRowSelected = gridRowSet.getRow(parentIndex).isRowSelected();
        	
        	var gridIndexToInsert = 0;//插入grid的位置
        	var baseRSIndexToInsert = 0;//插入baseRS的位置
        	
        	//如果没有index 那么order为-1 加到最后一位
     		//处理级联
     		(this.cascade) && (isMultiSelect) && (isRowSelected) && (rowData._s = true);
 			//首先要强制把父节点的children显示出来
 			if(this._isChildrenInGrid(parentId)){
 				//children已经存在
     			gridIndexToInsert = this._getRowIndexInGivenRowSetByNodeIdOfOrder
     				(gridRowSet, parentId, order, true);
     			baseRSIndexToInsert = this._getRowIndexInGivenRowSetByNodeIdOfOrder
     				(this._baseRS, parentId, order, false);
     			gridRowSet.insertRow(rowData, gridIndexToInsert, false, true);
				this._baseRS.insertRow(rowData, baseRSIndexToInsert, false, true);
				var views = this.grid.managers.get("ViewManager");
				views.render(views.scrollTop);
				if(this.autoEdit){
					this.grid.getManager('EditManager') && this.grid.getManager('EditManager').setEdit(gridIndexToInsert,0);
				}
 			}else{
 				var insertRows = this._getChildrenRowDatasByNodeId(parentId);
 				//懒加载树且还没有获得children
 				if(insertRows.length == 0 && this.isLazyTree){
 					//成功回调
     				 var _self = this;
					 var callback = function(a, b){
						var ds,dc;
						if(arguments.length==2){
							ds=a;
							dc=b;
						}else if(arguments.length==1){
							dc=a;
						}else{
							return;
						}
						!ds && (ds = dc.getSingleDataStore());
						//懒加载成功回调的逻辑
					    var rowSet = ds.getRowSet();
					    var rowDatas = [];
					    if (rowSet.getRowCount() > 0) {
					        rowDatas = rowSet.getData(unieap.ds.Buffer.PRIMARY);
					        var rowIndexToInsert = _self._getRowIndexByNodeIdInBaseRS(parentId) + 1;
					        //将要插入的rowData放到堆栈中 注意order
					        var results = [];
					        var len = rowDatas.length;
					        var hasInsert = false;
					        var insertIndex = 0;
					        for (var j = 0; j<len; j++){
					        	if(j == order){
					        		results[j] = rowData;
					        		results[j+1] = rowDatas[j];
					        		hasInsert = true;
					        		insertIndex = j;
					        	}else {
					        		hasInsert ? (results[j+1] = rowDatas[j]) : (results[j] = rowDatas[j]) ;
					        	}
					        }
					        ( !hasInsert ) && (results[len] = rowData) && (insertIndex = len) ;
					    	var rowIndexRevise = 0;//插入一条之后要偏移一条
					        for (var i = 0, count = results.length; i < count; i++) {
								(_self.cascade) && (isMultiSelect) && (isRowSelected) && (results[i]._s = true);
					            _self._baseRS.insertRow(results[i],rowIndexToInsert + rowIndexRevise, false, true);
					            rowIndexRevise++;
					        }
					        _self._insertRows(results, parentIndex + 1);
					        gridIndexToInsert = parentIndex + insertIndex + 1;
					  		if(_self.autoEdit){
								_self.grid.getManager('EditManager') && _self.grid.getManager('EditManager').setEdit(gridIndexToInsert,0);
							}
					    }else{//父节点是个叶子
//					    	var isModified = gridRowSet.getRow(parentIndex).isModified(); 
//					    	gridRowSet.setItemValue(parentIndex, "_treeGridIsLeaf", true);
//					    	!isModified && gridRowSet.resetUpdate(parentIndex);
							if(_self.leaf!=null){
								var isModified = gridRowSet.getRow(parentIndex).isModified(); 
								gridRowSet.setItemValue(parentIndex,_self.leaf,false);
								!isModified && gridRowSet.resetUpdate(parentIndex);
							}else{
								var isModified = gridRowSet.getRow(parentIndex).isModified(); 
					        	gridRowSet.setItemValue(parentIndex,"_treeGridIsLeaf",false)
					        	!isModified && gridRowSet.resetUpdate(parentIndex);
							} 
					    	gridIndexToInsert = parentIndex + 1;
					    	baseRSIndexToInsert = _self._getRowIndexByNodeIdInBaseRS(parentId) + 1;
					    	gridRowSet.insertRow(rowData, gridIndexToInsert, false, true);
							_self._baseRS.insertRow(rowData, baseRSIndexToInsert, false, true);
					    	_self.grid.getManager('ViewManager').refreshRow(parentIndex);
					    	var views = _self.grid.managers.get("ViewManager");
							views.render(views.scrollTop);
							if(_self.autoEdit){
								_self.grid.getManager('EditManager') && _self.grid.getManager('EditManager').setEdit(gridIndexToInsert,0);
							}					    	
					    }	
					}
					//成功回调--END
					
					if(dojo.isFunction(this.rpc)){
						this.rpc(parentRowData,callback,this.grid);
					}
 				}else{
 				//不需要发ajax但需要先添加数据
 					this._insertRows(insertRows, parentIndex + 1);
	     			gridIndexToInsert = this._getRowIndexInGivenRowSetByNodeIdOfOrder
	     				(gridRowSet, parentId, order, true);
	     			baseRSIndexToInsert = this._getRowIndexInGivenRowSetByNodeIdOfOrder
	     				(this._baseRS, parentId, order, false);
	     			gridRowSet.insertRow(rowData, gridIndexToInsert, false, true);
					this._baseRS.insertRow(rowData, baseRSIndexToInsert, false, true);
					var views = this.grid.managers.get("ViewManager");
					views.render(views.scrollTop);
					if(this.autoEdit){
						this.grid.getManager('EditManager') && this.grid.getManager('EditManager').setEdit(gridIndexToInsert,0);
					}
 				}
 			}
     	}else{//加入的是个根节点
		    gridIndexToInsert = this._getRootIndexInGivenRowSetOfOrder
				(gridRowSet, order);
			baseRSIndexToInsert = this._getRootIndexInGivenRowSetOfOrder
				(this._baseRS, order);
			gridRowSet.insertRow(rowData, gridIndexToInsert, false, true);
			this._baseRS.insertRow(rowData, baseRSIndexToInsert, false, true);
			var views = this.grid.managers.get("ViewManager");
			views.render(views.scrollTop);
			if(this.autoEdit){
				this.grid.getManager('EditManager') && this.grid.getManager('EditManager').setEdit(gridIndexToInsert,0);
			}
     	}
     },
     
     //-----------------------新增行END--------------------------------
     
     //-----------------------定位-------------------------------------
     
     //持续查询时，记录上一次的位置
     _lastRowIndex: 0,
     
     //之前的定位结果
     _showIndex: null,
     
     //专用对比函数 用于处理多个值枚举的情况
     //currentValue：数据中的值；compareValueList：枚举值（相当于sql里边的in...值）；relation：现在支持等于（"="）和包含两种
     //return值为bool型 如果匹配成功则返回true 反之false
     _compareFunction: function(currentValue, compareValueList, relation){
     	var result = false;
     	var comValue = null;
     	for(var i=0,len=compareValueList.length; i<len; i++){
     		comValue = compareValueList[i];
     		if(comValue != null && comValue != ""){
     			if(relation == "="){
					if(comValue == currentValue){
						result = true;
						break;
					}    				
     			}else{
     				if(currentValue.indexOf(comValue)>-1){
						result = true;
						break;
					}  
     			}
     		}
     	}
     	return result;
     },
     
     _clearHighlight: function(){
     	var index = (this._lastRowIndex-1)>0 ? (this._lastRowIndex-1) : 0;
	//U_EAP00029207
     	(this._baseRS.getRowCount()>0) && this._baseRS.getRow(index).setItemValue("_style",null);
     	if(this._showIndex != null){
     		this.grid.getManager("ViewManager").refreshRow(this._showIndex);
     	}
     },
     
     resetLocate: function(){
     	this._lastRowIndex = 0;
     	this._clearHighlight();
     	this._showIndex = null;
     },
     
     //以当前行为查询起点 或者 以当前可见的最上边一行为起点
     _startByCurrentRow:true,
     
    /**
	 * @summary:
	 * 		xTreeGrid中显示定位的xdialog
	 */
     showLocate: function(){
     	var locateXDialog = new unieap.xdialog.Dialog({
			url: unieap.WEB_APP_NAME + this.locateViewURL,
			id:'grid_xtree_locate',
			title:RIA_I18N.grid.xtree.locateTitle,
			height:"150",
			onComplete:dojo.hitch(this,this._clearHighlight),
			iconCloseComplete:true,
			dialogData:{'grid':this.grid},
			width:"650"
		});
//		if(this._startByCurrentRow){
//			var rowMgr = this.grid.getManager("RowManager");
//			var index = rowMgr.getCurrentRowIndex();
//		}else{
//			var views = this.grid.managers.get("ViewManager");
//			var index = views.scroller.firstVisibleRow; //最上边的行号	
//		}
//		this._lastRowIndex = index>0 ? index : 0;

		this._lastRowIndex = 0;
		locateXDialog.noBgMask = true;
		locateXDialog.show();
     },
     
     //xTreeGrid的定位过程：入参是个json 里边有name：查找哪个属性；relation：等于或者包含；value：查找的值
     doLocate: function(queryObj, isCycle){
     	if(this.isLazyTree){
     		return;
     	}
		var relation = queryObj.relation;
        var itemName = queryObj.name;
        
        var itemValueString = queryObj.value;
		while(itemValueString.indexOf("，")>-1){
			itemValueString = itemValueString.replace("，", ",");
		}
		var itemValueList = itemValueString.split(",");
		   
		var rowSet = this._baseRS;
		var rowData = null;
		var nodeId = null;
		var inRowIndex = null;
			
		var views = this.grid.managers.get("ViewManager");
		var rowMgr = this.grid.getManager("RowManager");
		
     	(this._lastRowIndex > rowSet.getRowCount()) && (this._lastRowIndex = 0); //连续查询功能
     	
		for(var i = this._lastRowIndex,len=rowSet.getRowCount(); i<len; i++){
			rowData = rowSet.getRowData(i);
			if(this._compareFunction(rowData[itemName], itemValueList, relation)){
				(this._lastRowIndex = (i+1)); //连续查询功能
				nodeId = rowData[this.id];
				inRowIndex = i;
				break;
			}	
		}
		if(nodeId){
			var path = this._buildPathByRowData(rowData);
			this._expandNodeByPath(path);
			//把定位到的行展示出来
			var topIndex = views.scroller.firstVisibleRow; //最上边的行号
			var bottomIndex = views.scroller.lastVisibleRow; //最下边的行号
			
			//！！！AUX的id非唯一问题！！！
			if(this.realId){
				var realId = rowData[this.realId];
				var showIndex = this._getRowIndexByRealId(nodeId);
			}else{
				var showIndex = this._getRowIndexByNodeId(nodeId);	//需要展示出来的行号
			}
			
			if(topIndex < showIndex && showIndex < bottomIndex){
					//已经显示出来(居然不用干什么...)
					
			}else{
//中心定位--效果不明显且有混淆 暂时屏蔽
//				var halfRowCount = Math.floor((bottomIndex-topIndex) / 2);
//				var scrollerToIndex = 0;
//				if(topIndex > showIndex){
//					scrollerToIndex = (showIndex - halfRowCount > 0) ? (showIndex - halfRowCount) : 0;
//				}else{
//					scrollerToIndex = (showIndex - halfRowCount);
//				}
//				views.scrollToRow(scrollerToIndex); 
				views.scrollToRow(showIndex);
			}
			
				//神奇 勿动！
//				rowMgr.updateCurrentRow(rowMgr.getCurrentRowIndex());
				rowMgr.setCurrentRow(showIndex);
				
				//xtree定位的背景色
				views.setRowStyles(showIndex,{"background":"#769dc0"});
				this._showIndex = showIndex;
		}else{
			if(isCycle){
					this._lastRowIndex = 0;
					this.doLocate(queryObj, false);
			}else{
				MessageBox.alert({message:RIA_I18N.grid.xtree.noDataByLocate});
			}
		}     	
     },
     
     //是否正处于筛选过程，如果是true那么需要屏蔽format
     _isInFilter: false,
     
     //筛选前保存当时grid中的rowSet，以便还原
     _beforeFilterRowSet: null,
     
     //筛选前保存当时grid显示的scrollTop
     _beforeFilterScrollTop: null,
     
    /**
	 * @summary:
	 * 		xTreeGrid中显示筛选的xdialog
	 */
     showFilter: function(){
     	var filterXDialog = new unieap.xdialog.Dialog({
			url: unieap.WEB_APP_NAME + this.filterViewURL,
			id:'grid_xtree_filter',
			title:RIA_I18N.grid.xtree.filterTitle,
			height:"150",
			dialogData:{'grid':this.grid},
			width:"650"
		});
		filterXDialog.noBgMask = true;
		filterXDialog.show();
     },
     
     
     //筛选的重置方法 主要用于回复到筛选之前的dataStore
     resetFilter: function(){
     	if(this._isInFilter){
     		this._isInFilter = false;
     		var grid = this.grid;
     		var views = grid.managers.get("ViewManager");
     		var gridDS = grid.getBinding().getDataStore();
			var newDS = new unieap.ds.DataStore(gridDS.getName(), this._beforeFilterRowSet.getData());
			newDS.setRowSetName(gridDS.getRowSetName());
			this.grid.getBinding().setDataStore(newDS);
			views.render(this._beforeFilterScrollTop);  
     	}
     },
     
     //筛选的主方法 入参和定位的入参相当
     doFilter: function(queryObj){
     	var relation = queryObj.relation;
        var itemName = queryObj.name;
        
        var itemValueString = queryObj.value;
		while(itemValueString.indexOf("，")>-1){//某个很2的replaceAll
			itemValueString = itemValueString.replace("，", ",");
		}
		var itemValueList = itemValueString.split(",");
		if(!this._isInFilter){//初始化筛选
			var views = this.grid.managers.get("ViewManager");
			this._beforeFilterScrollTop = views.scrollTop; //最上边的行号
			this._beforeFilterRowSet = this.grid.getBinding().getDataStore().getRowSet();
			this._isInFilter = true;
		}
		var rowSet = this._baseRS;
		var rowData = null;
		var result = []; //存放符合的数据
		
		for(var i=0,len=rowSet.getRowCount(); i<len; i++){
			rowData = rowSet.getRowData(i);
			if(this._compareFunction(rowData[itemName], itemValueList, relation)){
				result.push(rowData);
			}
		}
		if(result.length>0){
			var gridDS = this.grid.getBinding().getDataStore();
			var newDS = new unieap.ds.DataStore(gridDS.getName(), result);
			newDS.setRowSetName(gridDS.getRowSetName());
			this.grid.getBinding().setDataStore(newDS);
		}else{
			MessageBox.alert({message:RIA_I18N.grid.xtree.noDataByFilter});
		}
     },
     
     //-----------------------定位END-------------------------------------
     
     //-----------------------按照路径层级展开-------------------------
     
     //是否为根节点 入参是rowData
     _isRoot: function(rowData){
     	var relation = this.query.relation;
        var itemName = this.query.name;
        var itemValue = this.query.value;
        if(relation == "="){
        	return (rowData[itemName] == itemValue);
        }else{
        	return (String(rowData[itemName]).indexOf(itemValue) > -1);
        }
     },
     
     //全收起的实现
     _collapseAll: function(){
     	var rowSet = this._baseRS;
     	var relation = this.query.relation;
        var itemName = this.query.name;
        var itemValue = this.query.value;
		var gridDS = this.grid.getBinding().getDataStore();
     	var gridRowSet = gridDS.getRowSet();
		var newDataStore = new unieap.ds.DataStore(gridDS.getName());
		newDataStore.setRowSetName(gridDS.getRowSetName());
		var newRowSet = newDataStore.getRowSet();
        if (relation == "=") {
            for (var i = 0,count = rowSet.getRowCount(); i < count; i++) {
                if (rowSet.getItemValue(i, itemName) == itemValue) {
                    newRowSet.insertRow(rowSet.getRowData(i));
                }
            }
        }
        else {
            for (var i = 0,count = rowSet.getRowCount(); i < count; i++) {
                if (String(rowSet.getItemValue(i, itemName)).indexOf(itemValue) > -1) {
                    newRowSet.insertRow(rowSet.getRowData(i));
                }
            }
        }
        this.grid.getBinding().setDataStore(newDataStore);
     },
     
     //全展开的实现
     _expandAll: function(){
     	this._transResult = [];
     	var rowSet = this._baseRS;
     	var rootRowDatas = this._getRootRowDatas(rowSet);
        var result = this._addChildrenRowDatas(rootRowDatas);
        var resultRowDatas = this._transformRowDatas(result);
        for(var i = 0,len = resultRowDatas.length; i<len; i++){
        	if(resultRowDatas[i]._treeGridChildren){
        		delete resultRowDatas[i]._treeGridChildren;
        	}
        }
        var gridDS = this.grid.getBinding().getDataStore();
        var newDS = new unieap.ds.DataStore(gridDS.getName(),resultRowDatas);
        newDS.setRowSetName(gridDS.getRowSetName());
        this._transResult = [];
        this.grid.getBinding().setDataStore(newDS);
     },
     //构建从根节点数据到当前节点的父节点的path "/根/第一层/第二层...." 
     //AUX那边居然有多条数据同Id的情况 现在扩展一下入参 如果有InRowIndex的话还得以index为准
     _buildPathByRowData: function(rowData){
     	var path = "";
     	var parentId = "";
     	while(!this._isRoot(rowData)){
     		parentId = rowData[this.parent];
     		path = "/" + parentId + path;
     		rowData = this._getRowDataByNodeIdInBaseRS(parentId);
     	}
     	return (path == "") ? "/" : path;
     },
     
     //根据path展开特定路径 path的样例"/root/node1" 
     // isCollapseAll为是否先收起再展开，即只展开单例 callBack为懒加载的回调函数 全加载应该用不到 args为callback的入参 自己定义
     _expandNodeByPath: function(path, isCollapseAll, callBack, args){
     	isCollapseAll && (this._collapseAll());
     	if(this.isLazyTree){
     		
     	}else{
     		var pathList = path.split("/");
     		var parentId = null;
     		for(var i = 0,len = pathList.length; i<len; i++){
     			parentId = pathList[i];
     			if(parentId == null || parentId == ""){
     				continue;
     			}
     			this.expandNodeByNodeId(parentId);
     		}
     	}
     },
     
     
    //-----------------------按照路径层级展开END-------------------------
    
//=========================END===============================
    
    
//----------关键区:开始--------------------

	_doExpand: function (e) {
		if (!e.cell || isNaN(e.rowIndex) || e.rowIndex == null) {
			return;
		}
        var rowIndex = this.grid.getRowManager().getCurrentRowIndex();
        var selectType = this.grid.getManager("SelectionManager") ? this.grid.getManager("SelectionManager").getSelectType() : 'none';
        var isMultiSelect = (selectType == 'm' || selectType == 'multiple');
        var isRowSelected = this.grid.getBinding().getDataStore().getRowSet().getRow(rowIndex).isRowSelected();
        var rowData = this._getRowDataByRowIndex(rowIndex);
        var nodeId = rowData[this.id];
        var insertRows = null;
        var _self = this;
        //成功回调
        var callback = function(a,b){
        	var ds,dc;
			if(arguments.length==2){
				ds=a;
				dc=b;
			}else if(arguments.length==1){
				dc=a;
			}else{
				return;
			}
			!ds && (ds = dc.getSingleDataStore());
			//懒加载成功回调的逻辑
			var relation = _self.query.relation;
	        var itemName = _self.query.name;
	        var itemValue = _self.query.value;
	        var rowSet = ds.getRowSet();
	        var rowDatas = [];
	        if (rowSet.getRowCount() > 0) {
//	            if (itemValue == rowSet.getRowData(0)[itemName] || String(rowSet.getRowData(0)[itemName]).indexOf(itemValue) > -1) {
//	            	var newDS = _self._getLazyTreeRoots(ds);
//	                _self.grid.getBinding().setDataStore(newDS);
//	            } else {
	                rowDatas = rowSet.getData(unieap.ds.Buffer.PRIMARY);
	                var rowIndexToInsert = _self._getRowIndexByNodeIdInBaseRS(nodeId) + 1;
	                var rowIndexRevise = 0;//插入一条之后要偏移一条
	                for (var i = 0, count = rowDatas.length; i < count; i++) {
	                    (_self.cascade) && (isMultiSelect) && (isRowSelected) && (rowDatas[i]._s = true);
	                    _self._baseRS.insertRow(rowDatas[i], rowIndexToInsert + rowIndexRevise, false, true);
	                    rowIndexRevise++;
//	不能用pop 否则rowDatas变成空的了！！！
//					    (_self.cascade) && (isMultiSelect) && (isRowSelected) && (rowDatas[i]._s = true);
//	                    _self._baseRS.insertRow(rowDatas.pop(),rowIndexToInsert, false, true);
	                }
	                var nodeIdX = rowDatas[0][_self.parent];
	                var rowIndexX = _self._getRowIndexByNodeId(nodeIdX) + 1;
	                _self._insertRows(rowDatas, rowIndexX);
//	            }
	        }else{
	        	var bindRowSet = _self.grid.getBinding().getDataStore().getRowSet();
	        	var isModified = bindRowSet.getRow(rowIndex).isModified(); 
	        	bindRowSet.setItemValue(rowIndex,"_treeGridIsLeaf",true);
	        	!isModified && bindRowSet.resetUpdate(rowIndex);
	        	_self.grid.getManager('ViewManager').refreshRow(rowIndex);
//	        	_self._updateIsLeaf(nodeId);
	        }	
        }       
        try {
            switch (e.target.className) {
	            case 'u-grid-treegrid-plus':{
	                    insertRows = this._getChildrenRowDatasByNodeId(nodeId);
	                    if (insertRows.length == 0 && this.isLazyTree) {
	                        //发请求 this.rpc
	                       if(dojo.isFunction(this.rpc)){
	                       		this.rpc(rowData,callback,this.grid);
	                       }
	                    } else {
	                        this._insertRows(insertRows, rowIndex + 1);
	                    }
	                    break;
	                }
	            case 'u-grid-treegrid-minus':{
	                    this._deleteRows(rowData, rowIndex);
	                    break;
	                }
            }
        }
        catch (e) {}
    },
    
	_formatNode: function (inValue, inRowIndex) {
		
		if(this._isInFilter){
			return inValue;
		}
		
        var rowData = this._getRowDataByRowIndex(inRowIndex);
        var table = "<table  cellspacing='0' cellpadding='0' class='u-grid-treegrid-celltable'><tr>",
            _table = "</tr></table>";
        var level = this._getDepthByRowData(rowData);
        //expand node
        var isLeaf = false;
        if(this.isLazyTree){
        	isLeaf = this.leaf ? rowData[this.leaf] : (rowData['_treeGridIsLeaf'] || false);
        }else{
        	isLeaf = this.leaf ? rowData[this.leaf] : this._isLeaf(rowData);
        }
        var isExpanded = this._isNodeExpanded(rowData, inRowIndex);
        var expandNode = "<td style='width:" + level*16 + "px;height:100%;' align='right'>";
        if (!isLeaf) {
            if (isExpanded) {
                expandNode += "<div class='u-grid-treegrid-minus' style='float:right;'></div></td>";
            }
            else {
                expandNode += "<div class='u-grid-treegrid-plus'  style='float:right;'></div></td>";
            }
        }
        else {
            expandNode = "";
        }
        //icon
        level++;
        var leafIcon = this.getLeafIconClass(rowData) || this.leafNodeIconClass;
        var iconNode = expandNode == "" ? ("<td style='width:" + level * 16 + "px;height:100%;' align='right'>") : "<td style='width:16px' align='left'>";
        if (isLeaf) {
            iconNode += "<div class='" + leafIcon + "' style='float:right;'></div></td>";
        }
        else if (isExpanded) {
            iconNode += "<div class='" + this.openedNodeIconClass + "' style='float:right;'></div></td>";
        }
        else {
            iconNode += "<div class='" + this.closedNodeIconClass + "' style='float:right;'></div></td>";
        }
//        这块需要再处理一下
        var lineHeight = this.grid.managers.get('RowManager').defaultRowHeight-1;
        var css = "line-height:" + lineHeight + "px";
        var value = "<td>" +
        				"<div class='u-grid-text' style='" + css + "'>" +
        					"<div class='u-grid-text2'>" + inValue + "" +
        					"</div>" +
        				"</div>" +
        			"</td>";
        return table + expandNode + iconNode + value + _table;
    },
    
//----------关键区:结束-------------------

//----------默认全展开代码区：开始---------
    
    //记录从层次化转换到平面化时的数据
	_transResult: [],
    
    //默认全展开，用于构造全展开的DataStore
	_getAllExpandedDataStore: function(ds) {
		this._transResult = [];
        this._baseRS = ds.getRowSet();
        var rootRowDatas = this._getRootRowDatas(ds.getRowSet());
        var result = this._addChildrenRowDatas(rootRowDatas);
        var resultRowDatas = this._transformRowDatas(result);
        for(var i = 0,len = resultRowDatas.length; i<len; i++){
        	if(resultRowDatas[i]._treeGridChildren){
        		delete resultRowDatas[i]._treeGridChildren;
        	}
        }
        var gridDS = this.grid.getBinding().getDataStore();
        var newDS = new unieap.ds.DataStore(gridDS.getName(),resultRowDatas);
        newDS.setRowSetName(gridDS.getRowSetName());
        this._transResult = [];
        return newDS;
    },
    
    //获取roots的数据 返回值为[rowData,...]
	_getRootRowDatas: function(rowSet) {
//        var rowSet = ds.getRowSet();
        var relation = this.query.relation;
        var itemName = this.query.name;
        var itemValue = this.query.value;
        var result = [];
        if (relation == "=") {
            for (var i = 0,count = rowSet.getRowCount(); i < count; i++) {
                if (rowSet.getItemValue(i, itemName) == itemValue) {
                    result.push(rowSet.getRowData(i));
                }
            }
        }
        else {
            for (var i = 0,count = rowSet.getRowCount(); i < count; i++) {
                if (String(rowSet.getItemValue(i, itemName)).indexOf(itemValue) > -1) {
                    result.push(rowSet.getRowData(i));
                }
            }
        }
        return result;
    },
    
    //递归，为父节点数组逐个增加子节点数组
	_addChildrenRowDatas: function(parentRowDatas){
        var result = [];
        var children = [];
        var rowData = null;
        for (var i = 0,count = parentRowDatas.length; i < count; i++) {
            rowData = parentRowDatas[i];
            children = this._getChildrenRowDatasByNodeId(rowData[this.id]);
            rowData._treeGridChildren = children;
            if (children.length > 0) {
                children = this._addChildrenRowDatas(children);
            }
            result.push(rowData);
        }
        return result;
    },
    
    //递归，将层次化的rowDatas翻译成平面化的rowDatas
	_transformRowDatas: function(rowDatas){
        var result = this._transResult;
        var rowData = null;
        var children = [];
        for (var i = 0,count = rowDatas.length; i < count; i++) {
            rowData = rowDatas[i];
            children = rowData._treeGridChildren;
            result.push(rowData);
            if (children.length > 0) {
                children = this._transformRowDatas(children);
            }
            result.concat(children);
        }
        return result;
    }
    
//----------默认全展开代码区：结束---------
    
//----------------------------------------------------------------------------------------------------------	
	
});



dojo.provide('unieap.grid.menu.filter');

dojo.declare("unieap.grid.menu.filter", null, {
	
	constructor: function(params){
		dojo.mixin(this,params)
		this.menu=this.menuManager.getMenu();
		var args=this.args;
		if(!unieap.isEmpty(args)){
			this.include=args.include;
			this.exclude=args.exclude;
		}
		this.grid.connect(this.grid,'onStoreChanged',dojo.hitch(this,function(){
			this.onStoreChanged();
		}));
		this.filterManager=this.grid.managers.get('FilterManager');
	  },
	  
	//是否让grid表头上的菜单按钮可见
	validateMenu:function(cell){
		var include=this.include,exclude=this.exclude,
			cellName=(cell||this.menuManager.getCell()).name,
			result=true;
	  	if(include&&dojo.isArray(include)){
			if(include.length==0) return false;
			result=dojo.some(include,function(item){
				return item==cellName;
			});
	    }else if(exclude&&dojo.isArray(exclude)){
			if(exclude.length==0) return true;
			result=dojo.some(exclude,function(item){
				return item!=cellName;
			});
	    }
		return result;
	},
	
	//初始化菜单
	initMenu:function(){
		var self=this;
		this.filterItem =new unieap.menu.MenuItem({
					//过滤
	            	'label': RIA_I18N.grid.filter.filter,
					'onClick':function(e){
						self.onFilterClick(e);
					},
					'iconClass':'u-gird-menu-filtericon'
	     		});
		this.cancelFilterItem =new unieap.menu.MenuItem({
					//清除本列过滤
	            	'label': RIA_I18N.grid.filter.clearColumn,
					'onClick':function(e){
						self.onCancelFilterClick(e);
					}
	     		});		
		this.cancelGridFilterItem =new unieap.menu.MenuItem({
					//清除表格过滤
	            	'label': RIA_I18N.grid.filter.clearGrid,
					'onClick':function(e){
						self.onCancelGridFilterClick(e);
					}
	     });				
	    this.menu.addChild(this.filterItem);
		this.menu.addChild(this.cancelFilterItem);
		this.menu.addChild(this.cancelGridFilterItem);
	},
	
	//更新菜单状态
	updateMenu:function(){
		var layoutmanager=this.grid.managers.get('LayoutManager');
			cell=this.menuManager.getCell();
			cells=layoutmanager.cells;
		
		if(cell&&cell.name&&!cell.isMulTitle&&this.validateMenu(cell)){
			this.filterItem.setDisabled(false);
		}else{
			this.filterItem.setDisabled(true);
		}
		if(cell&&cell.filter&&cell.name&&!cell.isMulTitle&&this.validateMenu(cell)){
			this.cancelFilterItem.setDisabled(false);
		}else{
			this.cancelFilterItem.setDisabled(true);
		}
		var cellsfilter=dojo.some(cells,function(cell){
			return !!cell.filter;
		})
		if(cellsfilter&&this.validateMenu(cell)){
			this.cancelGridFilterItem.setDisabled(false);
		}else{
			this.cancelGridFilterItem.setDisabled(true);
		};
	},
	
	onHeaderRender:function(node,view){
		this.updateCells(node);
	},
	onStoreChanged:function(){
		var layoutmanager=this.grid.managers.get('LayoutManager');
		cells=layoutmanager.cells;
		dojo.forEach(cells,function(cell){
			cell.filter=null;
		})
		this.updateCells();
	},
	//更新cells
	updateCells:function(node){
		 var layout = this.grid.managers.get("LayoutManager");
		dojo.query('.u-grid-cell',node||this.grid.headerNode).forEach(function(th){
			var index=th.getAttribute("idx");
			var cell=layout.getCell(Number(index));
			if(cell.filter){
				dojo.addClass(th,'u-grid-filter-cell');
			}else{
				
				dojo.removeClass(th,'u-grid-filter-cell');
			}
		});
	},
	
	//点击过滤菜单
	onFilterClick:function(e){
		dojo.require("unieap.dialog.Dialog");
        dojo.require("unieap.dialog.DialogUtil");
        var cell, dialog, title, filterDialog,self=this;
        cell = this.menu.cell;
        title = unieap.getText("grid.filter.configure",[cell.label]);
        filterDialog = this.getFilterDialog(cell);
        dialog = new unieap.dialog.Dialog({
			isExpand:false,
			resizable:false,
            inner: filterDialog.domNode,
            title: title,
			width:'420',
			height:'220',
			iocnCloseComplete:true,
			onComplete:function(){
				filterDialog.destroy();
				self.updateCells();
			}
        });
		filterDialog.dialog=dialog;
        dialog.show(e.target)
        dijit.popup.close(this.menu);
	},
	
	//取消本列过滤
	onCancelFilterClick:function(){
		 var cell = this.menuManager.getCell();
		 this.filterManager.cancelFilter(cell);
	},
	
	//取消grid过滤
	onCancelGridFilterClick:function(){
		this.filterManager.cancelFilter();
	},

    
    //创建filter对话框
    getFilterDialog: function(cell){
       	return new unieap.grid.FilterDialog({cell:cell, dataCenter: this.grid.dataCenter});
    },
	
	//销毁组件
	destroy:function(){
		this.filterItem.destroy();
		this.cancelFilterItem.destroy();
		this.cancelGridFilterItem.destroy();
	}	
});

dojo.declare("unieap.grid.FilterDialog", [dijit._Widget, dijit._Templated], {
    templateString: '<div class="u-grid-filter-body"><div class="u-grid-filter" >'+
						'<table class="u-grid-filter-table" cellPadding="0" cellSpacing="0">' +
							'<colgroup>'+
								'<col style="width: 80px;"/>' +
								'<col style="width: 180px;"/>' +
								'<col style="width: 40px;"/>' +
								'<col style="width: 20px;"/>' +
							'</colgroup>' +
	    					'<tbody dojoAttachPoint="tBodyNode,containerNode">'+
								'<tr dojoAttachPoint="separatorNode">'+
									'<td colspan="4">'+
										'<span class="u-menu-item-separator"></span>'+
									'</td>'+
								'</tr>'+
								'<tr>'+
									'<td colspan="4" align="right">'+
										'<span dojoAttachPoint="okBtn" class="u-grid-filter-ok"></span>'+
										'<span dojoAttachPoint="cancelBtn" class="u-grid-filter-cancel"></span>'+
									'</td>'+
								'</tr>'+
							'</tbody>' +
						'</table>'+
					'</div></div>',
	
	//所在的列				
	cell:null,
	
	//所在的dialog变量
	dialog:null,
	
	//本列的过滤条件
	conditions:null,
	
	//本列列名
	name:"",
	
	//本列编辑器class
	widget:'',
	
	//本列数据类型
	dataType:"",
	
	operators:[
				['=',RIA_I18N.grid.filter.eq,'number,date,string'], //等于
				['!=',RIA_I18N.grid.filter.neq,'number,date,string'], //不等于
				['>',RIA_I18N.grid.filter.gt,'number,date'],//大于
				['>=',RIA_I18N.grid.filter.gte,'number,date'],//大于等于
				['<',RIA_I18N.grid.filter.lt,'number,date'],//小于
				['<=',RIA_I18N.grid.filter.lte,'number,date'],//小于等于
				['like',RIA_I18N.grid.filter.include,'string'],//包含
				['not like',RIA_I18N.grid.filter.exclude,'string'],//不包含
				['is null',RIA_I18N.grid.filter.empty,'number,date,string'],//为空
				['is not null',RIA_I18N.grid.filter.notempty,'number,date,string'] //不为空
			],
	
	widgets:{
		'number':'unieap.form.NumberTextBox',
		'string':'unieap.form.TextBox',
		'boolean':null,
		'date':'unieap.form.DateTextBox'
	},
	
	/*
	 * 过虑对话框事件绑定的句柄
	 */
	_connectHandlers: null,
	
	postCreate:function(){
		this.init();
		dojo.attr(this.okBtn,'title',RIA_I18N.grid.filter.confirm);
		dojo.attr(this.cancelBtn,'title',RIA_I18N.grid.filter.cancel);
		this._connectHandlers.push(dojo.connect(this.okBtn,'onclick',this,'apply'));
		this._connectHandlers.push(dojo.connect(this.cancelBtn,'onclick',this,'cancel'));
	},
	getWidget:function(){
		if(this.cell&&this.cell.decoder){
			var decoder=this.cell.decoder;
			var displayAttr=decoder.displayAttr||"CODENAME";
			var valueAttr=decoder.valueAttr||"CODEVALUE";
			this.widgetParameter=" dataProvider=\"{store:'"+decoder.store+"'}\"  decoder=\"{displayAttr:'"+displayAttr+"',valueAttr:'"+valueAttr+"'}\""
			return "unieap.form.ComboBox";
		}
		return this.widgets[this.dataType];
	},
	//初始化
	init:function(){
		this._connectHandlers = [];
		this.conditions=this.cell['filter'];
		this.name=this.cell['name'];
		this.id=this.cell['id'];
		this.dataType=this.cell['dataType']||this.getDataType(this.name)||'string';
		this.widget=this.getWidget(this.dataType);
		if(this.widget){
			dojo.require(this.widget);
		}
		if(this.conditions){
			this.createConditions(this.conditions);
		}else{
			this.createCondition();
		}
	},
	
	//应用 收集过滤信息 关闭dialog
	apply:function(){
		var validate=dojo.query('[widgetId]', this.containerNode).every(function(widget) {
			widget=dijit.byNode(widget)||widget;
			if(widget.disabled){
				return true;
			}
			var validator = widget.getValidator();
			return validator?  validator.validate() : true;
		});
		if(!validate){
			return;
		}
		this.doFilter();
	},

	//取消,删除所有条件,并初始化第一个条件
	cancel:function(){
		while (this.separatorNode != this.containerNode.childNodes[1]) {
			//循环删除第二个条件
			this.deleteCondition(this.containerNode.childNodes[1]);
		}
		//初始化第一个条件
		var tr=this.containerNode.childNodes[0];
		var nodes=this.getNodesByTr(tr);
		nodes[0].value='=';
		nodes[1]&&!nodes[1].disabled&&nodes[1].setValue("");
		nodes[2].value="";
	},
	
	
	//从一个tr中取得由各个node组成的数组
	getNodesByTr:function(tr){
		var operatorNode=tr.childNodes[0].childNodes[0],
			widgetNode=tr.childNodes[1].childNodes[0],
			andorNode=tr.childNodes[2].childNodes[0],
			deleteNode=tr.childNodes[3].childNodes[0];
		return[operatorNode,dijit.byNode(widgetNode),andorNode,deleteNode];
	},
	
	
	//进行过滤
	doFilter:function(){
		var filter={},childrens=this.containerNode.childNodes;
		filter.condition={};
		filter.pattern="";
		for(var i=0,l=childrens.length;i<l&&i<(l-2);i++){
			var filterObject=this.getFilterObject(childrens[i]);
			filter.condition["condition"+(this.id||this.name)+i]=filterObject.condition;
			filter.pattern+=" ${condition"+(this.id||this.name)+i+"} ";
			if(i!=(l-3)){
				filter.pattern+=filterObject.andor;
			}
		}
		var grid=this.cell.grid;
		grid.managers.get('FilterManager').setFilter(cell,filter);
		this.dialog.close();
		//确保grid完全关闭后调用filter
		window.setTimeout(function(){
			grid.getBinding().doFilter();
		},475)
	},
	
	//根据条件 创建节点
	createCondition:function(condition){
		var tr=dojo.create('tr',null,this.separatorNode,'before');
		this.createTrNode(tr,condition);
		dojo.parser.parse(tr);
		var nodes=this.getNodesByTr(tr);
		for(var i=0, node; node=nodes[i]; i++){
			if("unieap.form.ComboBox"==node.declaredClass && this.dataCenter){
				var store = unieap.getDataStore(this.cell.decoder.store,this.dataCenter,true);
				node.getDataProvider().setDataStore(store);
			}
		}
		var operatorChange=function(e){
			if(nodes[0].value=="is null"||nodes[0].value=="is not null"){
				//当nodes[0]的value值不是"is null"或者"is not null",focus到文本框然后再blur文本框
				//会出现红色叹号。当value值为"is null"时,需要清除红色叹号
				nodes[1]&&nodes[1].setRequired(false)&&nodes[1].getValidator().validate()&&nodes[1].setDisabled(true);
			}else{
				nodes[1]&&nodes[1].setRequired(true)&&nodes[1].setDisabled(false);
			}
		}
		operatorChange();
		this._connectHandlers.push(dojo.connect(nodes[0],'onchange',operatorChange));
		this._connectHandlers.push(dojo.connect(nodes[2],'onchange',dojo.hitch(this, function(e){
			this.addCondition(tr);
			nodes[2].childNodes.length>2&&nodes[2].removeChild(nodes[2].childNodes[0]);
		})));
		this._connectHandlers.push(dojo.connect(nodes[3],'onclick',dojo.hitch(this, function(){
			this.deleteCondition(tr);
		})));
	},
	
	//增加一个条件
	addCondition:function(conditionNode,condition){
		if(conditionNode&&conditionNode.nextSibling!=this.separatorNode){
			return;
		}
		if(this.containerNode.childNodes.length>6){
			return;
		}
		this.createCondition(condition);
	},
	
	//根据过滤条件创建
	createConditions:function(filter){
		var conditions=filter.condition;
	
		var patterns=filter.pattern.split(" ");
		patterns=dojo.filter(patterns,function(v){
			return v!=""
		});
		var andors={};
		dojo.forEach(patterns,function(v,index){
			if(v.indexOf('${')!=-1&&index+1<patterns.length){
				andors[v]=patterns[index+1]
			}
		})
		for(var condition in conditions){
			this.addCondition(null,{
				relation:conditions[condition].relation,
				value:conditions[condition].value||"",
				andor:andors["${"+condition+"}"]||" "
			})
		}
	},
	
	//删除一个条件 销毁对应的组件
	deleteCondition:function(conditionNode){
		if(this.containerNode.childNodes.length<=3){
			return;
		}
		dojo.query('[widgetId]', conditionNode).forEach(function(node){
			var w=dijit.byNode(node);
			w&&w.destroy();
		});
		dojo.destroy(conditionNode);
	},
	
	
	//收集过滤信息
	getFilterObject:function(conditionNode){
		var condition={},andor='and';
		var	relationNode= conditionNode.childNodes[0].childNodes[0],
			valueNode=conditionNode.childNodes[1].childNodes[0],
			andorNode=conditionNode.childNodes[2].childNodes[0];
		condition.name=this.name;
		condition.relation=relationNode.value;
		condition.value= (dijit.byNode(valueNode)&&dijit.byNode(valueNode).getValue());
		if(this.dataType=='number'){
			condition.value=Number(condition.value);
		}else if(this.dataType=="date"){
			if (this.cell.displayFormatter) {
				var dataFormat = this.cell.displayFormatter.dataFormat;
				condition.dataFormat=dataFormat;
			}else{
				condition.dataFormat="yyyy-MM-dd";
			}
		}
		andor=andorNode.value||" ";
		return {condition:condition,andor:andor};
	},

	
	//根据条件 创建一行组件
	createTrNode:function(tr,condition){
		dojo.create('td',{innerHTML:this.getOperatorInner(condition)},tr);
		dojo.create('td',{innerHTML:this.getWidgetInner(condition),'align':'left'},tr);
		dojo.create('td',{innerHTML:this.getAndorInner(condition)},tr);
		dojo.create('td',{innerHTML:this.getDelInner()},tr);
	},
	
	
	//创建删除按钮
	getDelInner:function(){
		return "<span class='u-grid-filter-del'></span>"
	},
	
	getOperatorInner:function(condition){
		var inner=[],dataType=this.dataType,self=this;
		inner.push("<select style='width:125px;margin-right:2px'>");
		dojo.forEach(this.operators,function(operator){
			if(operator[2].indexOf(dataType)!=-1&&self.isOperator(operator)){
				if(condition&&operator[0]==condition.relation){
					inner.push("<option SELECTED value='"+operator[0]+"'>"+operator[1]+"</option>");
				}else{
					inner.push("<option value='"+operator[0]+"'>"+operator[1]+"</option>");
				}
			}
		});
		inner.push("</select>");
		return inner.join("");
	},
	
	//合法的条件关系
	isOperator:function(operator){
		if(this.widget=='unieap.form.ComboBox'){
			//combobox没有 包含 不包含
			if(operator[0]=='link'||operator[0]=='not like'){
				return false;
			}
		}	
		return true;
	},
	
	getWidgetInner:function(condition){
		var inner='';
		if(this.widget){
			inner+="<div dojoType='"+this.widget+"' required='true'";
			if(condition&&condition.value){
				inner+=" value="+condition.value;
			}
			if(this.dataType=="date"){
				if (this.cell.displayFormatter) {
					var dataFormat = this.cell.displayFormatter.dataFormat;
					inner+=" displayFormatter=\"{dataFormat:'"+dataFormat+"'}\"";
				}
			}
			inner+=this.widgetParameter||"";
			inner+=" width='162px'></div>";
		}else{
			inner="<div  style='width:162px' ></div>";
		}
		return inner;
	},
	getAndorInner:function(condition){

		var inner=[];
		inner.push("<select style='width:48px;margin-left:2px'>");
		if(condition&&condition.andor=='||'){
			inner.push("<option  value='&&'>"+RIA_I18N.grid.filter.and+"</option>");
			inner.push("<option SELECTED value='||'>"+RIA_I18N.grid.filter.or+"</option>");
		}else if(condition&&condition.andor=='&&'){
			inner.push("<option  SELECTED value='&&'>"+RIA_I18N.grid.filter.and+"</option>");
			inner.push("<option  value='||'>"+RIA_I18N.grid.filter.or+"</option>");
		}else{
			inner.push("<option  value=' ' SELECTED></option>");
			inner.push("<option  value='&&'>"+RIA_I18N.grid.filter.and+"</option>");
			inner.push("<option  value='||'>"+RIA_I18N.grid.filter.or+"</option>");
		}
		inner.push("</select>");
		return inner.join("");
	},
	
	//得到数据类型
	getDataType:function(name){
		var metaData=this.cell.grid.getBinding().getRowSet().getMetaData(name);
		if(metaData) {
			var type=metaData.getDataType();
			dojo.require('unieap.util.util');
			return unieap.getDataType(type);
		}
	},
	
	//销毁组件
	destroy:function(){
		while(this._connectHandlers.length>0) {
			dojo.disconnect(this._connectHandlers.pop());
		}
		dojo.query('[widgetId]', this.containerNode).forEach(function(node){
			var w=dijit.byNode(node);
			w&&w.destroy();
		});
		this.inherited(arguments);
	}
});

dojo.provide('unieap.grid.manager.managers');

dojo.declare("unieap.grid.managers", null, {
	
	params: null,
	managers: null,
	userManagers: null,
	
	lazyManagers:{
		'PrintManager':{},
		'ExportManager':{},
		'PagingManager':{},
		'FilterManager':{},
		'SelectionManager':{selectType: "none"},
		'EditManager':{editType: "readonly"}
	},
	
	constructor: function(inGrid) {

		this.grid = inGrid;
		this.params = {};
		this.managers = {};
		this.userManagers = {};
		this.params["LayoutManager"] = inGrid.layout || {};
		this.params["ViewManager"] = inGrid.views || {};
		this.params["RowManager"] = inGrid.rows || {};
		this.params["MenuManager"] = inGrid.menu||{};
		this._updateMenuParams(this.params["MenuManager"]);
		this.params["SelectionManager"] = inGrid.selection;
		this.params["EditManager"] = inGrid.edit;
		this.params["GroupManager"] = inGrid.group;
		this.params["TreeManager"] = inGrid.tree;
		this.params["XTreeManager"] = inGrid.xtree;
		this.params["UnitedCellManager"] = inGrid.unitedCell;
		this.params["DetailManager"] = inGrid.detail;
	},
	
	//更新MenuManager中的controlsNameList变量
	_updateMenuParams:function(menuParams){
		var list={};
		this.grid.filter&&(list['unieap.grid.menu.filter']=this.grid.filter);
		dojo.mixin(menuParams,{controlsNameList:list})
	},
	
	_loadManager: function(manager) {
		if (this.userManagers[manager] || !this.get(manager)) return;
		var real = this.get(manager);
		var m = {};
		for(var member in real.ui) {
			if (dojo.isFunction(real[member])) {
				m[member] = dojo.hitch(real, real[member]);
			} else if(member=="events") {
				for (e in real.ui[member]) {
					m[e] = function() {
						//event function
					};
					dojo.connect(real, e, m, e);
				}
			} else {
				m[member] = real[member];
			}
		}
		m.funnelEvent = function(/*string*/event, /*function*/func) {
			real[event] = func;
		}
		this.userManagers[manager] = m;
	},
	
	//重新加载用户控制器，在内部控制器打补丁之后使用。
	reloadManager: function(manager) {
		if (!this.get(manager)) return;
		var real = this.get(manager);
		var m = {};
		for (member in real.ui) {
			if (dojo.isFunction(real[member])) {
				m[member] = dojo.hitch(real, real[member]);
			} else if(member=="events") {
				for (e in real.ui[member]) {
					m[e] = function() {
						//event function
					};
					dojo.connect(real, e, m, e);
				}
			} else {
				m[member] = real[member];
			}
		}
		dojo.mixin(this.userManagers[manager], m);
	},
	
	init: function() {
		for (manager in this.params) {
			if (this.params[manager]) {
				this.get(manager);
			}
		}
	},
	
	//internal function, to get grid private manager
	get: function(manager) {
		if (!this.managers[manager]) {
			var params = this.params[manager];
			if (!params) {
				if(this.lazyManagers[manager]) {
					params=this.lazyManagers[manager]||{};
				}else{
					return null;
				}
			}
			params = dojo.mixin({grid: this.grid}, params);
			
			var declaredClass = "unieap.grid.manager." + manager;
			dojo.require(declaredClass);
			var clazz = dojo.getObject(declaredClass);
			this.managers[manager] = new clazz(params);
			delete this.params[manager];
		}
		return this.managers[manager];
	},
	
	getManager: function(manager) {
		this._loadManager(manager);
		return this.userManagers[manager];
	},
	
	destroy: function(){
		var managers = this.managers;
		for (var name in managers) {
			managers[name] && managers[name].destroy && managers[name].destroy();
		}
	},
	addPlus:function(manager,key,plus){
		if(!manager.plus){
			manager.plus={}
		}
		if(!manager.plus[key]){
			manager.plus[key]=[];
		}
		manager.plus[key].push(plus);
	},
	getPlus:function(manager,key){
		if(manager&&manager.plus&&manager.plus[key]){
			return manager.plus[key];
		}
		return null
	}
});

dojo.provide("unieap.grid.Grid");
dojo.require("dijit._Templated");
dojo.require("unieap.grid._grid.lib");
dojo.require("unieap.grid._grid.binding");
dojo.require("unieap.grid.manager.managers");
dojo.require("unieap.ds");
dojo.require("unieap.layout.Container");
dojo.declare('unieap.grid.Grid', [unieap.layout.Container, dijit._Templated], {
	/**
	 * @declaredClass:
	 * 		unieap.grid.Grid
     * @superClass:
     * 		unieap.layout.Container
	 * @summary:
	 * 		数据表格
	 * @example:
	 * |<div dojoType="unieap.grid.Grid" width="500px" height="300px"
	 * |	 binding="{store:'empDataStore'}"
	 * |	 views="{rowNumber:true,orderType:'none'}">
	 * |	 <fixed>
	 * |		<cell label="员工编号" width="150" name="attr_empno"></cell>
	 * |	 </fixed>
	 * |	 <header>
	 * |		<cell width="100px" label="姓名" name="NAME"></cell>
	 * |		<cell width="150px" label="职位" name="attr_job"></cell>
	 * |		<cell width="150px" label="工资" name="attr_sal" headerStyles="text-align: left;"></cell>
	 * |	</header>
	 * |</div>
	 * @img:
	 * 		images/grid/grid_overview.png
	 */
	
	//配置属性接口
	UserInterfaces : dojo.mixin({
		height : "string",
		trigger : "boolean",
		layout : "object",
		views : "object",
		rows : "object",
		selection : "object",
		filter : "object",
		menu : "object",
		edit : "object",
		group : "object",
		tree : "object",
		xtree : "object",
		binding : "object",
		lockedRow : "object",
		detail : "object",
		unitedCell : "object",	
		showLoading:"boolean",
        addHeaders:'object',
	},
	unieap.layout.Container.prototype.UserInterfaces),
	//增加addHeaders方法定义
    addHeaders:function(headerStore){
        var grid = this;
        var layoutManager = grid.getManager("LayoutManager");
        var structure = layoutManager.getStructure();
        structure = structure.length > 1 ? structure[1] :structure[0];
        var userMaxDept = 0;

        function clearUserDynamicHeader(){

            for(var i=0;i<structure.rows.length;){
                var row = structure.rows[i];
                for(var j=0;j<row.length;){
                    var col = row[j];
                    if(col.userDynamicHeader == true){
                        row.splice(j,1);
                    }else{
                        col.rowSpan = 1;
                        j++;
                    }
                }
                if(row.length == 0){
                    structure.rows.splice(i,1);
                }else{
                    i++;
                }
            }

            dojo.forEach(structure.rows,function(row){
                dojo.forEach(row,function(col){
                    if(col.userDynamicHeader){
                        col = null;
                    }
                });
            });
        }


        function setUserMaxDept(headers,dept){
            if(dept == 1){
                userMaxDept = structure.rows.length;
            }
            if(dept > userMaxDept){
                userMaxDept = dept;
            }
            dojo.forEach(headers,function(header){
                if(dojo.isArray(header.childs) && header.childs.length > 0){
                    setUserMaxDept(header.childs,dept+1);
                }
            });
        }

        function setOldColRowSpan(){
            var addRowSpan = userMaxDept - structure.rows.length + 1;
            if(addRowSpan > 1){
                dojo.forEach(structure.rows,function(row,rowIndex){
                    dojo.forEach(row,function(col){
                        if(col.isMulTitle != true){
                            col.rowSpan = userMaxDept - rowIndex;
                        }
                    });
                });
            }
        }

        function addGridHeader(headers,dept,parentRowSpan){
            dojo.forEach(headers,function(header){
                if(structure.rows[parentRowSpan] == null){
                    structure.rows[parentRowSpan] = [];
                }
                var nowRowsSpan = header.rowSpan;

                structure.rows[parentRowSpan].push(header);
                if(dojo.isArray(header.childs) && header.childs.length > 0){
                    header.isMulTitle = true;

                    var _parentRowSpan = parentRowSpan + nowRowsSpan;

                    addGridHeader(header.childs,dept+1,_parentRowSpan);
                }else{
                    header.rowSpan = userMaxDept - parentRowSpan;
                    if(header.editor &&  header.editor.editorProps){
                        var editorId = header.editor.editorProps.id;
                        dijit.registry.remove(editorId);
                    }
                }
            });
        }
		var newPrimary=[];
		var newSequence = [];
		//填充origin
		function fillGridOrigin(grid,addColumnsArr){
			if(grid.managers&&grid.managers.managers&&grid.managers.managers.LayoutManager.origin){
				var _preColumn=grid.managers.managers.LayoutManager.origin.columnsbk||grid.managers.managers.LayoutManager.origin.columns;
				var _preColumn=dojo.clone(_preColumn);
				if(_preColumn&&_preColumn.length>0){
					for(var z=0;z<_preColumn.length;z++){
						if(_preColumn[z])
							newPrimary.push(_preColumn[z]);
						newSequence.push(z);
					}
				}
//				getGridOriginCells(headerStore.getRowSet().primary);
				getGridOriginCells(headerStore.getRowSet().primary,newSequence.length);

				if(!grid.managers.managers.LayoutManager.origin.columnsbk)
					grid.managers.managers.LayoutManager.origin.columnsbk=grid.managers.managers.LayoutManager.origin.columns;
				grid.managers.managers.LayoutManager.origin.columns=newPrimary;
				grid.managers.managers.LayoutManager.origin.sequence=newSequence; //LH 不设置 动态表单列无法动态隐藏显示
				grid.managers.managers.LayoutManager.customStructure.fixed = 0;  //动态添加表头，fixed设置为0；即使在view中设置后，此处也设置为0
				grid.managers.managers.LayoutManager.customStructure.seq=newSequence; //设置此值，否则在锁定列时不生效
			}
		}

		//填充grid的origin值
		function  getGridOriginCells(cellsArray,newSequenceLength){
			dojo.forEach(cellsArray,function(currentCell,index){
				if(currentCell){
					newPrimary.push(dojo.clone(currentCell));
					// var currentCellArr ;
					// $.extend(true,currentCellArr,currentCell)
					// newPrimary.push(currentCellArr);
					newSequence.push(index+newSequenceLength);
//					if(currentCell.childs&&currentCell.childs.length>0){
//						getGridOriginCells(currentCell.childs);
//					}
				}
			});
		}
        clearUserDynamicHeader();
		fillGridOrigin(grid,headerStore.getRowSet().primary);
        setUserMaxDept(headerStore.getRowSet().primary,1);
        setOldColRowSpan();
        addGridHeader(headerStore.getRowSet().primary,1,0);
        this._replaceEditColText(); //majz 移动到这里，才能正常显示(E)表示
        layoutManager.setStructure([structure]);
        //this._replaceEditColText();
	},
	_replaceEditColText:function(){
		var grid = this;
		//majz 打开这段代码  解决：动态表格E标识显示
//		var layoutManager = grid.getManager("LayoutManager");
		var layoutManager = this.managers.get("LayoutManager")
    	//var structure = layoutManager.structure.length > 1 ? layoutManager.structure[1] : layoutManager.structure[0];
		dojo.forEach(layoutManager.structure,function(structure){
			dojo.forEach(structure.rows,function(row){
				dojo.forEach(row,function(col){
					if(col.editor){
						if(col.label.indexOf('(E)') == -1){
							col.label += '(E)';
						}
						if(col.editor.editorProps.required ){
							// 可编辑表格必填项字段表格title上添加可编辑星号
							if(col.label.indexOf('*') == -1){
								col.label = '<span class="grid-edit-required" style=" color:#ff0000; font-size:14px; position: relative; top: -5px; right: 5px;">*</span>' + col.label
							}
						}
					}
				})
			})
		});

	},

	/**
	 * @summary:
	 * 		表格高度
	 * @type:
	 * 		{string}
	 * @default:
	 * 		'250px'
	 */
	height: '250px',
	
	/**
	 * @summary:
	 * 		是否监听数据变更
	 * @type:
	 * 		{boolean}
	 * @default:
	 * 		true
	 * @description:
	 * 		是否根据表格绑定的数据的变化，自动刷新表格的显示。
	 * @example:
	 *|<div dojoType="unieap.grid.Grid" id="grid" width="80%" height="250px" 
	 *|     binding="{store:'empDataStore'}" views="{rowNumber:true}" trigger="false">
     *| 	...... 
	 *|</div>
	 */
	trigger: true,
	
	/**
	 * @summary:
	 * 		布局控制器
	 * @description
	 * 		在使用new创建Grid时需要指定布局控制器中的表格结构信息，使用标签声明来创建表格时一般不使用此属性。
	 * @type:
	 * 		{object}
	 * @see:
	 * 		unieap.grid.manager.LayoutManager
	 * @example:
	 * |//锁定列数据
	 * |var fixedColumns=[
	 * |	{label: "员工编号",name: "attr_empno",width: "150px"}
	 * |]
	 * |//非锁定列数据
	 * |var columns=[
	 * |	{label: "姓名",name: "NAME",width: "100px"},
	 * |	{label: "职位",name: "attr_job",width: "150px"},
	 * |	{label: "工资",name : "attr_sal",width : "150px"}
	 * |]
	 * |var fixed={noscroll: true,rows:[fixedColumns]};
	 * |var header={rows:[columns]}
	 * |var layout = [fixed, header]; //注意这里的顺序，要将锁定列放在前面
	 * |var grid = new unieap.grid.Grid({
	 * |		binding: {store:'empDataStore'},
	 * |		views: {rowNumber: true},
	 * |		layout: {structure: layout},
	 * |		width: 600,
	 * |		height: 250
	 * |});
	 */
	layout: null,
	
	/**
	 * @summary:
	 * 		视图控制器
	 * @type:
	 * 		{object}
	 * @see:
	 * 		unieap.grid.manager.ViewManager
	 * @example:
	 * |<div dojoType="unieap.grid.Grid" binding="{store:'empDataStore'}" views="{rowNumber:true}">
	 * |	...
	 * |</div>
	 */
	views: null,
	
	/**
	 * @summary:
	 * 		行控制器
	 * @type:
	 * 		{object}
	 * @see:
	 * 		unieap.grid.manager.RowManager
	 * @example:
	 * |<div dojoType="unieap.grid.Grid" binding="{store:'empDataStore'}" rows="{defaultRowHeight:23}">
	 * |	...
	 * |</div>
	 */
	rows: null,
	
	/**
	 * @summary:
	 * 		选择控制器
	 * @type:
	 * 		{object}
	 * @see:
	 * 		unieap.grid.manager.SelectionManager
	 * @example:
	 * |<div dojoType="unieap.grid.Grid" binding="{store:'empDataStore'}" 
	 * |	 selection="{selectType:'single',onBeforeSelect:'myFunction'}">
	 * |	 ...
	 * |</div>
	 */
	selection: null,
	
	/**
	 * @summary:
	 * 		过滤相关信息
	 * @description：
	 * 		是否启用列过滤功能，可配置include或exclude属性，指定在哪些列上显示过滤菜单
	 * 		{include: ['col1', 'col2']} 在列绑定名为'col1'和'col2'的列上显示过滤菜单
	 * 		{exclude: ['col1', 'col2']} 除列绑定名为'col1'和'col2'的列不显示过滤菜单外，其它列上都显示
	 * 		{} 在所有列上都显示过滤菜单
	 * @type：
	 * 		{object}
	 * @see:
	 * 		unieap.grid.manager.FilterManager
	 * @example:
	 * |//在所有列上都显示过滤菜单
	 * |<div dojoType="unieap.grid.Grid" binding="{store:'empDataStore'}" filter="{}"></div>
	 * @example:
	 * |//只在列绑定名为attr_name的列才显示过滤菜单
	 * |<div dojoType="unieap.grid.Grid" filter="{include:['attr_name']}"></div>
	 * @example:
	 * |//除列绑定名为attr_name的列不显示滤外菜单,其他列都显示
	 * |<div dojoType="unieap.grid.Grid" filter="{exclude:['attr_name']}"></div>
	 */
	filter:null,
	
	/**
	 * @summary:
	 * 		菜单控制器
	 * @description
	 * 		设置表头上菜单相关的属性，若要出现菜单，还需要配置菜单项，例如filter。
	 * @type:
	 * 		{object}
	 * @see：
	 * 		unieap.grid.manager.MenuManager
	 * @example:
	 * |<div dojoType="unieap.grid.Grid" menu="{onBeforeMenuClick:fn}}"
	 * |	 width="100%" height="350px">
	 * |</div>
	 * |function fn(cell){
	 * |	console.info(cell.label);
	 * |	return true; //一定要有返回true,否则菜单项不会弹出来
	 * |}
	 */
	menu:null,
	
	//自动注入dataCenter
	Autowired : "dataCenter",
	
	/**
	 * @summary:
	 * 		编辑控制器
	 * @description
	 * 		设置编辑模式，cell中配置editor才能进行编辑。
	 * @type:
	 * 		{object}
	 * @see:
	 * 		unieap.grid.manager.EditManager
	 * @example:
	 * |<div dojoType="unieap.grid.Grid" binding="{store:'empDataStore'}" edit="{editType:'rowEdit',singleClickEdit:false}">
	 * |	 ...
	 * |</div>
	 */
	edit: null,
	
	/**
	 * @summary:
	 * 		分组控制器
	 * @type：
	 * 		{object}
	 * @see:
	 * 		unieap.grid.manager.GroupManager
	 * @example:
	 * |<div dojoType="unieap.grid.Grid" binding="{store:'empDataStore'}" group="{autoApply:true,groupBar:true}">
	 * |	 ...
	 * |</div>
	 */
	group: null,
	
	/*
	 * @summary:
	 * 		TreeGrid控制器
	 * @type:
	 * 		{object}
	 * @see:
	 * 		unieap.grid.manager.TreeManager
	 */
	tree: null,
	
	//新版treeGrid
	xtree: null,
	
	/**
	 * @summary:
	 * 		表格绑定
	 * @type:
	 * 		{object}
	 * @see:
	 * 		unieap.grid.Binding
	 * @example:
	 * |<div dojoType="unieap.grid.Grid" binding="{store:'empDataStore'}">
	 * |	 ...
	 * |</div>
	 */
	binding: null,
	
	/**
	 * @summary:
	 * 		锁定行相关信息
	 * @description
	 * 		getLockedRow 配置锁定行的自定义信息，配置一个函数，返回在锁定行显示的RowSet数据。
	 * 		statistics 配置锁定行的统计信息，要使用此功能，需要事先将计算好的数据存放在DataStore中
	 * 		DataStore的setStatistics可以向DataStore中添加统计信息。
	 * 		例如：
	 * 		var ds = new unieap.ds.DataStore("test");
	 * 		var statistics = {"attr_sal":{"max":5555,"min":222},attr_empno: {"min": ""}};
	 * 		ds.setStatistics(statistics);
	 * @type：
	 * 		{object}
	 * @example：
	 * |<div id="grid" id="grid" dojoType="unieap.grid.Grid" 
	 * |	 lockedRow="{getLockedRow:getLockedFun,statistics:[{attr_sal:'max'},{attr_sal:'min'}]}">
	 * |</div>
	 * |function getLockedFun(){
	 * |	return [{
	 * |              NAME: '用户1',
	 * |              attr_empno: 251,
	 * |              attr_job: '职位1',
	 * |              attr_sal: '25555'
	 * |          },{
	 * |              NAME: '用户2',
	 * |              attr_empno: 252,
	 * |              attr_job: '职位2',
	 * |              attr_sal: '25555'
	 * |          }];
	 * |}
	 * @img:
	 * 		images/grid/lockrow.png
	 */
	lockedRow:null,
		
	/**
	 * @summary:
	 * 		表格行详情相关信息
	 * @description：
	 * 		实现每行的详细情况
	 * @type
	 * 		{object}
	 * @see：
	 * 		unieap.grid.manager.DetailManager
	 * @example:
	 * |<div dojoType="unieap.grid.Grid" detail='{expandAll:true,getMasterDetail:getMyDetail}'> 
	 * |</div>
	 * |function getMyDetail(inRowIndex){
	 * |	var span=dojo.create("span",{innerHTML:inRowIndex});
	 * |	return span;
	 * |}
	 */
	detail:null,
	
	/**
	 * @summary:
	 * 		表格合并单元格信息
	 * @type:
	 * 		{object}
	 * @see:
	 * 		unieap.grid.manager.UnitedCellManager
	 */
	unitedCell:null,
	
	/**
	 * @summary:
	 * 		是否增加提示信息“正在加载数据...”
	 * @type:
	 * 		{boolean}
	 * @default:
	 * 		 false
	 * @example:
	 * |<div dojoType="unieap.xgrid.Grid" showLoading="true">
	 * |	...
	 * |</div>
	 */
	showLoading: false,
	
	//cell的formatter方法是否已经存在错误，以免重复提示错误信息
	_hasCellFormatterError: false,
	
	templateString: '<div class="u-grid">' +
						'<table class="u-grid-master-header" cellpadding="0" cellspacing="0" dojoAttachPoint="header"><tbody><tr dojoAttachPoint="headerNode"></tr></tbody></table>' +
						'<div class="content-loading"  style="display:none;z-index:100" dojoAttachPoint="contentLoading">' +
						'<div class="content-loading-text" dojoAttachPoint="contentText"></div>' +
						'</div>'+
						'<table class="u-grid-master-views" cellpadding="0" cellspacing="0" dojoAttachPoint="view"><tbody><tr dojoAttachPoint="viewsNode"></tr>'+
						'</tbody></table>' +
					'</div>',
	
	postMixInProperties: function() {
		var s;
		if (this.layout && this.layout.structure) {
			return;
		} else if (typeof (s= this.srcNodeRef.innerHTML) =="undefined" || dojo.trim(s)==""){
			return;
		}
		this._preSrcNodeRef();
		if(s.indexOf('toolbar') == -1 && this.individual){
			s = "<toolbar class='userPageToolBar'></toolbar>" + s
		}
		s = s.replace(/<header/gi,"<div tagName=header").
				replace(/<fixed/gi,"<div tagName=fixed").
				replace(/<row/gi,"<div tagName=row").
				replace(/<cell/gi,"<div tagName=cell").
				replace(/<foot/gi,"<div tagName=foot").
				replace(/<toolbar/gi,"<div tagName='toolbar'").
				replace(/(<\/header>)|(<\/fixed>)|(<\/row>)|(<\/cell>)|(<\/foot>)|(<\/toolbar)/gi,"</div>")
		this.srcNodeRef.innerHTML = s;
	},
	
	startup: function(){
		this.resizeContainer();
	},
	
	postCreate: function() {
		this.initContainer();
	    this._createManagers();
		unieap.grid.funnelEvents(this.view, this, "doContentEvent",[ 'mouseover', 'mouseout', 'mousedown', 'click', 'dblclick', 'contextmenu' , 'mouseup']);
		unieap.grid.funnelEvents(this.header, this, "doHeaderEvent", [ 'mouseover', 'mouseout', 'mousemove', 'mousedown', 'click', 'dblclick', 'contextmenu']);
		if(this.showLoading){
			this.contentText.innerHTML = RIA_I18N.util.util.loading;
			dojo.style(this.contentLoading,'display','block');
		};
		this._replaceEditColText();
	},
	doContentEvent : function(e){
    	this.managers.get("ViewManager").doContentEvent(e);
    },
    doHeaderEvent : function(e){
    	this.managers.get("ViewManager").doHeaderEvent(e);
    },
	
	_createManagers: function() {
		this.managers = new unieap.grid.managers(this);
		this.managers.init();
		var layout = this.managers.get("LayoutManager");
		unieap.grid.addObserver(layout, this.managers.get("ViewManager"));
		layout.setStructure(layout.structure);
	},
	
	resizeContainer : function(){
		if(!this.domNode || this.domNode.offsetHeight==0) return;
		var viewManager = this.managers.get("ViewManager");
		unieap.fireEvent(this,this.onBeforeResize,[]);
		if(this.width.indexOf("%") > 0 || this.height.indexOf("%") > 0){
			viewManager.resize();
		}
		else{
			viewManager.resizeHeight();
			viewManager.adjustScrollBar();
		}
		
	},
	
	onBeforeResize : function(){
		
	},
	
	/**
	 * @summary:
	 * 		取得表格的某个控制器
	 * @param:
	 * 		{string} manager 控制器名字
	 * @return:
	 * 		{unieap.grid.manager.*} 表格的某个控制器
	 * @example:
	 * |//取得视图控制器
	 * |var views = grid.getManager("ViewManager");
	 * @example:
	 * |//取得布局控制器	
	 * |var layout = grid.getManager("LayoutManager");
	 * @example:
	 * |//取得编辑控制,调用相关操作
	 * |var edit = grid.getManager("EditManager");
	 * |if (edit) {
	 * |	edit.apply();
	 * |}
	 */
	getManager: function(manager) {
		return this.managers.getManager(manager);
	},
	
	/**
	 * @summary:
	 * 		取得视图控制器
	 * @return:
	 * 		{unieap.grid.manager.ViewManager}
	 */
	getViewManager: function() {
		return this.getManager("ViewManager");
	},
	
	/**
	 * @summary:
	 * 		取得布局控制器
	 * @return:
	 * 		{unieap.grid.manager.LayoutManager}
	 */
	getLayoutManager: function() {
		return this.getManager("LayoutManager");
	},
	
	/**
	 * @summary:
	 * 		取得行控制器
	 * @return:
	 * 		{unieap.grid.manager.RowManager}
	 */
	getRowManager: function() {
		return this.getManager("RowManager");
	},
	
	/**
	 * @summary:
	 * 		取得某个cell对象
	 * @param:
	 * 		{number|string} inData 列的序号或绑定名
	 * @return:
	 * 		{unieap.grid.Cell}
	 * @description:
	 * 		获取某个cell对象，inData可为cell的序号，也可以是cell的name属性值
	 */
	getCell: function(inData) {
		return this.getManager("LayoutManager").getCell(inData);
	},
	
	/**
	 * @summary:
	 * 		设置表格的数据源
	 * @param:
	 * 		{unieap.ds.DataStore} store
	 */
	setDataStore: function(store) {
		this.getBinding().setDataStore(store);
	},
	
	/**
	 * @summary：
	 * 		取得toolbar
	 * @example：
	 * |	var toolbar=grid.getToolBar();
	 * |	toolbar.update();
	 * 		取得工具条,进行工具条的更新操作
	 * @return:
	 * 		{unieap.grid.view.toolbar|null}
	 * @see:
	 * 		unieap.grid.view.toolbar
	 */
	getToolBar:function(){
		if(this.toolBar&&this.toolBar.declaredClass=='unieap.grid.view.toolbar'){
			return this.toolBar;
		}else{
			return null;
		}
	},
	
	/**
	 * @summary：
	 * 		取得foot
	 * @example:
	 * |//取得foot,进行foot的更新操作
	 * |var foot=grid.getFoot();
	 * |foot.update();
	 * @return:
	 * 		{unieap.grid.view.foot|null}
	 * @see:
	 * 		unieap.grid.view.foot
	 */
	getFoot:function(){
		if(this.foot&&this.foot.declaredClass=='unieap.grid.view.foot'){
			return this.foot;
		}else{
			return null;
		}
	},
	/**
	 * @summary
	 * 		取得grid的信息
	 * @description:
	 * 		用于打印导出等功能
	 * @return:
	 * 		{array} 二维数组
	 * @example:
	 * | var layout = gird.getGridData(); 	
	 * |//返回的内容形如如下格式：
	 * |[
	 * |${1}[
	 * |		[
	 * |			{${2}name:"attr_empno",${3}label:"员工编号",${4}width:"80"}
	 * |		]
	 * |	],
	 * |${5}[
	 * |	${6}[
	 * |			{name:"attr_ename",label:"姓名" , ${7}rowSpan:2,width:"150"},
	 * |			{label:"基本信息",${8}colSpan:4,${9}isMulTitle:true}
	 * |		],
	 * |	${10}[
	 * |			{name:"attr_deptno",label:"部门", colSpan:1, width:"150",${11}decoder:{"10":"财务部","20":"开发部"}}, 		
	 * | 			{name:"attr_hiredate",label:"入职日期" , width:"160", ${12}dataFormat:'yyyy-MM-dd'},
	 * | 			{name:"attr_job",label:"职位", width:"150"},
	 * |			{name:"attr_sal",label:"工资", width:"150",dataFormat:'#,###.00'}
	 * |		]
	 * |	]
	 * |]
	 * ${1}锁定列视图部分定义
	 * ${2}列数据绑定字段名称
	 * ${3}列显示的名称
	 * ${4}列在页面上显示的宽度
	 * ${5}非锁定列视图部分定义
	 * ${6}多标题第一行内容定义与（table的row定义一致）
	 * ${7}定义该列占几行，如果不写默认为1
	 * ${8}定义该列占几列，如果不写默认为1
	 * ${9}标明该列是否为多标题列，如果是则没有数据绑定
	 * ${10}多标题第二行内容定义
	 * ${11}转义字典，根据它值可以翻译成显示文本
	 * ${12}格式化定义，根据它显示格式化后的文本
	 * @img:
	 * 		images/grid/grid_multititles.png
	 */
	getGridData: function(){
        var gridData = {}, self = this,lockedData;
        var layoutmanager = self.managers.get('LayoutManager');
        gridData.store = self.getBinding().store;
		gridData.layout = layoutmanager.getLayoutInfo();
		gridData['structure'] = layoutmanager.getLayoutInfo('export');
		lockedData=self.getBinding().getLockedRowData();
		if(lockedData&&lockedData.length>0){
			gridData.lockedData=lockedData;	
		}
		var foot=self.getFoot();
		if (foot) {
			gridData.footer=foot.getInnerText();	
		}
		var datas=this.managers.getPlus(this,'getGridData');
		if(datas&&datas.length>0){
		 	for(var i=0;i<datas.length;i++){
				var _mdf=datas[i],_md;
				if(typeof _mdf =="function"){
					_md=_mdf.call();
					dojo.mixin(gridData,_md);
				}
			}
		 }
        return gridData;
    },
	
	/**
	 * @summary:
	 * 		取得表格的绑定
	 * @return:
	 * 		{unieap.grid.Binding}
	 */
	getBinding: function() {
		this.binding = new unieap.grid.Binding(this.binding||{}, this);
		this.getBinding = function(){
			return this.binding;
		}
		return this.binding;
	},
	

	/**
	 * @summary:
	 * 		校验Grid中的数据是否合法
	 * @description:
	 * 		如果校验不通过的单元格可以编辑，当errorPrompt参数为true时会自动提示错误信息，并置光标到单元格中
	 * @param:
	 * 		{number} inRowIndex 对某一行的数据进行校验，如果不设置则检验所有单元格
	 * @param:
	 * 		{boolean} errorPrompt 校验不通过后是否自动提示错误信息，如果不设置就为global.js中的unieap.widget.errorPrompt
	 * @return:
	 * 		{boolean} needFocus 当校验不通过时，是否设置光标到出错的单元格，默认为true
	 * @example:
	 * |<script type="text/javascript">
	 * |	var grid=unieap.byId("grid");
	 * |	//只校验第1行,是否提示错误信息依赖于unieap.widget.errorPrompt
	 * |	grid.validate(0); 
	 * |	//校验第一行并提示错误信息
	 * |	grid.validate(0,true);
	 * |	//校验所有的单元格但不提示错误信息
	 * |	grid.validate(false);
	 * |</script>
	 */
	validate:function(inRowIndex,errorPrompt){
		var binding=this.getBinding();
		if(binding){
			return binding.validate.apply(binding,arguments);
		}
		return true;

	},
	
	destroy: function(){
		this.managers.destroy&&this.managers.destroy();
		this.binding&&this.binding.destroy&&this.binding.destroy();
		this.foot&&this.foot.destroy&&this.foot.destroy();
		this.toolBar&&this.toolBar.destroy&&this.toolBar.destroy();
		this.inherited(arguments);
	},
	getSortInfo : function(){
		return this.sortInfo || [];
	},
	setSortInfo : function(inCell){
		this.sortInfo = this.sortInfo || [];
		for(var i=0;i<this.sortInfo.length;i++){
			if(this.sortInfo[i]==inCell){
				this.sortInfo.splice(i,1);
				break;
			}
		}
		this.sortInfo.unshift(inCell);
		this.sortInfo.length>2 && this.sortInfo.pop();
	},
	
	/**
	 * @summary:
	 * 		刷新表格，视图重新构建。
	 *	@example:
	 *	|unieap.byId("grid").refresh();
	 */
	refresh : function(){
		this.managers.get("ViewManager").structureChanged();
	},
	
	//SrcNode预处理
	_preSrcNodeRef:function(){
		if(this.srcNodeRef){
			var toolbar=this.srcNodeRef.getElementsByTagName('toolbar');
			var foot=this.srcNodeRef.getElementsByTagName('foot');
			if(toolbar&&toolbar[0]){
				if(!dojo.isIE){//U_EAP00028406
					this.toolbarSrcNode=toolbar[0];
				}else{
					this.toolbarSrcNode=dojo.create('div',{});
					this.toolbarSrcNode.appendChild(toolbar[0]);
//					var cs=toolbar[0].parentNode.childNodes;
//					var begin,end;
//					for(var i=0;i<cs.length;i++){
//						if(cs[i].tagName=='TOOLBAR'){
//							begin=true;
//							continue;
//						}
//						if(begin){
//							if(cs[i].tagName=='/TOOLBAR'){
//								break;
//							}	
//							this.toolbarSrcNode.appendChild(cs[i]);
//							i--;
//						}
//					}
				}
			}else{
				//如果用户通过动态parse来创建toolbar
				//dojo.byId('x').innerHTML="<div dojoType='unieap.grid.Grid'><div tagName='header'><div tagName='cell' label='测试'></div></div><div tagName='toolbar'>Hello</div></div>";
				//dojo.parser.parse('x')
				//toolbar的内容无法显示
				try{
					var _t=dojo.query(" >div[tagName='toolbar']",this.srcNodeRef);
					if(_t&&_t[0]){
						this.toolbarSrcNode=dojo.create('div',{});
						while(_t[0].hasChildNodes()){
							this.toolbarSrcNode.appendChild(_t[0].firstChild);
						}
					}
				}
				catch(e){
					
				}
			}
			if(foot&&foot[0]){
				if(!dojo.isIE){
					this.footSrcNode=foot[0];
				}else{
					this.footSrcNode=dojo.create('div',{});
					var cs=foot[0].parentNode.childNodes;
					var begin,end;
					for(var i=0;i<cs.length;i++){
						if(cs[i].tagName=='FOOT'){
							begin=true;
							continue;
						}
						if(begin){
							if(cs[i].tagName=='/FOOT'){
								break;
							}	
							this.footSrcNode.appendChild(cs[i]);
							i--;
						}
					}
				}
			}
		}
	},
	
	//事件等定义
	doKeyEvent: function(e) {
		e.dispatch = 'do' + e.type;
		this.onKeyEvent(e);
	},
	onKeyEvent: function(e) {
		this.dispatchKeyEvent(e);
	},
	dispatchKeyEvent: function(e) {
		this._dispatch(e.dispatch, e);
	},
	
	onContentEvent: function(e) {
		this.dispatchContentEvent(e);
	},
	onHeaderEvent: function(e) {
		this.dispatchHeaderEvent(e);
	},
	dispatchContentEvent: function(e) {
		e.sourceView.dispatchContentEvent(e) || this._dispatch(e.dispatch, e)
	},
	dispatchHeaderEvent: function(e) {
		e.sourceView.dispatchHeaderEvent(e) || this._dispatch('doheader' + e.type, e);
	},
	
	_dispatch: function(m, e) {
		if(m in this) {
			return this[m](e);
		}
	},
	domousedown: function(e) {
		this.managers.get("ViewManager")._onMousedown(e);
	},
	domouseup:function(e){
		this.managers.get("ViewManager")._onMouseup(e);
	},
	doclick: function(e) {
		this.managers.get("ViewManager")._doClick(e);
	},
	dodblclick: function(e) {
		this.managers.get("ViewManager")._doDbClick(e);
	},
	
	docontextmenu:function(e){
		//U_EAP00028570
		var result = this.managers.get("ViewManager")._doContextMenu(e);
		if(result){
			if(dojo.isIE){
				this.domNode.fireEvent('oncontextmenu');
			}else{
				var evt=document.createEvent('HTMLEvents');
				evt.initEvent("contextmenu", false, false);
				this.domNode.dispatchEvent(evt);
			}
		}
		dojo.stopEvent(e);
	},
	

	
	doheaderclick: function(e) {
		this.managers.get("ViewManager")._doHeaderClick(e);
	},
	doheadermousedown: function(e) {
		//groupbar may connect this function
		this.managers.get("ViewManager")._doHeaderMousedown(e);
	},
	
	//////////////////数据驱动//////////////////////////////
	
	///当一个单元格的值发生变化或者RowSet的item值被修改时触发
	onItemChanged:function(index,name) {
		var cell = this.managers.get("LayoutManager").getCell(name);
		var viewManager=this.managers.get("ViewManager");
		viewManager.refreshCell(index,cell);
		viewManager.renderLockedRow(true);
	},
	
	//grid新增、删除数据时触发
	onRowSetChanged:function() {
		this.managers.get("ViewManager").refreshPage();
		this.resizeContainer();
	},
	
    //grid的datastore发生改变时触发(datastore被重新设置、被替换等)
	onStoreChanged:function() {
		//2014-10-31 控制下拉分页的状态
		var toolBar = this.getToolBar();
		var store = this.binding.getDataStore();
		if(toolBar && toolBar._comboBox){
			if(store == null || store.getRowSet().getRowCount() == 0){
				toolBar._comboBox.setValue(null);
				toolBar._comboBox.setDisabled(true);	
			}else{
				toolBar._comboBox.setDisabled(false);
				(store.getPageSize()) && (toolBar._comboBox.setValue(store.getPageSize()));
			}
		}
//		   this.toolBar && this.toolBar._comboBox 
//		&& this.binding.getDataStore() && this.binding.getDataStore().getPageSize() 
//		&& this.toolBar._comboBox.setValue(this.binding.getDataStore().getPageSize());
		//RowSet deleteAllRows方法中执行了this["primary"] = [];需要进行同步   modify by wangbw 09.11.26
		this.binding.updateRowData();
		if(this.managers.getManager("TreeManager") == undefined){
			this.managers.get("ViewManager").refresh();
		}
		//this.managers.get("ViewManager").refresh();
	},
	
	//操作列过滤时触发
	onRowSetFilter:function() {
		this.managers.get("ViewManager").refresh();
	},
	
	//grid绑定的datastore的统计信息发生变化时触发
	onStatisticChanged:function(){
		var viewManager=this.managers.get("ViewManager");
		viewManager.renderLockedRow();
	},

    //grid排序后触发
	onSorted:function(){
		var viewManager=this.managers.get("ViewManager");
		dojo.forEach(viewManager.views,function(view){
			!view.isRowBar&&view.renderHeader();
		})
		viewManager.refreshPage();
		
	},
	
	//发布消息
	publish : function(topic,args){
		var topics = this._topics || (this._topics = []);
		dojo.forEach(topics[topic] || [],function(method){
			method.apply(null,args || []);
		});
	},
	//订阅消息
	subscribe : function(topic,context,method){
		topic = topic.split(".");
		var id = topic[1] || "";
		topic = topic[0];
		var topics = this._topics || (this._topics = []);
		var listener = topics[topic] || (topics[topic] = []);
		function fn(){
			(dojo.isFunction(method) && method || context[method]).apply(context,arguments);
		}
		fn.id = id;
		listener.push(fn);
	},
	//取消订阅
	unsubscribe : function(topic){

		//grid.unsubscribe("headerClick.uniqid");
		topic = topic.split(".");
		var id = topic[1] || "";
		topic = topic[0];
		var topics = this._topics || (this.grid._topics = []);
		if(null==id){
			delete topics[topic];
			return;
		}
		var listener = topics[topic] || [];
		for(var i=listener.length-1,fn;fn =listener[i];i--){
			if(fn.id==id){
				listener.splice(i,1);
			}
		}
	},
	//用于grid个性化保存获取原始ID
	getOriId:function(){
		if(this._rootID != null){
			var len = this._rootID.length;
			var len2 = this.id.length;
			return this.id.substring(len);
		}
		return this.id;
	},
	
});
//保存分页信息
dojo.require("unieap.grid.manager.PagingManager");
unieap.gridPageSizeCache = unieap.gridPageSizeCache || {}
if(unieap.grid.manager.PagingManager.prototype._setPageNumberBack == null){
	unieap.grid.manager.PagingManager.prototype._setPageNumberBack = unieap.grid.manager.PagingManager.prototype.setPageNumber;
	
	unieap.grid.manager.PagingManager.prototype.setPageNumber = function(no,pageInfo){
		this._setPageNumberBack(no,pageInfo);
		var model=this.grid.getBinding();
		var store=model.getDataStore();
		
		if(store && store.parameters && store.parameters.processor && store.parameters.processor.name && store.parameters.processor.view){
			var view = store.parameters.processor.view;
			var pName = store.parameters.processor.name;
			var pageSize = store.pageSize;
			unieap.gridPageSizeCache[view + '.' + pName] = pageSize;
		}
	}
}
unieap.grid.Grid.prototype.setAutoSum = function(columns,sumColumnsStr){
	this._sumType = 'toolbar';
	this._sumColumns = columns;
	this._sumColumnsStr = sumColumnsStr;
}
unieap.grid.Grid.prototype.setAutoSumByInner = function(sumTextColumn,columns){
	this._sumType = 'inner';
	this._sumTextColumn = sumTextColumn;
	this._sumColumns = columns;
}

unieap.grid.Grid.prototype._loadRemoteSumRow = function(){
	if(this._sumColumns){
		if(
			this.getBinding() 
			&& this.getBinding().getDataStore() 
			&& this.getBinding().getDataStore().getRowSet() 
			&& this.getBinding().getDataStore().getRowSet().getRowCount() > 0
		){
			if(this.getBinding().getDataStore().getRowSet().getRows()[0] == undefined){
				return
			}
			// 增加判断是否插入的条件变量
			if(this.getBinding().getDataStore() && this.getBinding().getDataStore().getRowSet().getRows()[0]){
				var isAppend = this.getBinding().getDataStore().getRowSet().getRows()[0].data.IS_SUM_ROW;
			}else{
				return;
			}
			var isAppend = this.getBinding().getDataStore().getRowSet().getRows()[0].data.IS_SUM_ROW;
			if(this.getBinding().getDataStore().getRowSet().getRowCount() > 0){
				var pageKey = this.getBinding().getDataStore().getParameter("_pageKey");
				if(pageKey && false){
					var data = unieap.requestBo({
						dc:'commonDC',
						bo:'PageQuerySumBO',
						method:'querySum',
						params:[pageKey,this._sumColumns.join(',')]
					});
					var sumRow = data.getSingleDataStore().getRowSet().getRowData(0);
					if(this._sumType == 'toolbar'){
						var sumColumnsStr = this._sumColumnsStr;
						var sumColNum =0 ;
						$.each(this._sumColumns,function(index,column){
							var sumValue = sumRow[column];
							sumValue = dojo.number.format(sumValue, {pattern: '#,###.00'});
							sumColumnsStr = sumColumnsStr.replace('{'+index+'}',sumValue);
							sumColNum++;
						});
						$('.u-grid-master-toolbar .grid-toolbar-sum',this.domNode).remove();
						if(sumColNum==1){
							$('.u-grid-master-toolbar',this.domNode).append("<div class='grid-toolbar-sum'><label class='grid-toolbar-sum-text'>合计</label><label class='grid-toolbar-sum-label'>¥"+sumColumnsStr+"</label></div>");
						}else{
							$('.u-grid-master-toolbar',this.domNode).append("<div class='grid-toolbar-sum'>"+sumColumnsStr+"</div>");
						}
						
					}else if(this._sumType == 'inner'){
						//zhaohf 防止重复增加合计行
						var sumRow0 = this.getBinding().getDataStore().getRowSet().primary[0];
						if(sumRow0.IS_SUM_ROW){
							return;
						}
						//判断是否为true是就不插入合计否则插入。
						if(isAppend != true){
							sumRow.IS_SUM_ROW = true;
							sumRow[this._sumTextColumn] = '合计';
							this.getBinding().getDataStore().getRowSet().insertRow(sumRow, 0);
							this.getManager("SelectionManager").setCheckabled(0, false);
						}
					}
				}
			}else{
				$('.u-grid-master-toolbar .grid-toolbar-sum',this.domNode).remove();
			}
		}
	}
}
unieap.grid.Grid.prototype.templateString = 
			'<div class="u-grid grid_checkBox">' +
				'<table class="u-grid-master-header" cellpadding="0" cellspacing="0" dojoAttachPoint="header"><tbody><tr dojoAttachPoint="headerNode"></tr></tbody></table>' +
				'<div class="content-loading"  style="display:none;z-index:100" dojoAttachPoint="contentLoading">' +
				'<div class="content-loading-text" dojoAttachPoint="contentText"></div>' +
				'</div>'+
				'<table class="u-grid-master-views" cellpadding="0" cellspacing="0" dojoAttachPoint="view"><tbody><tr dojoAttachPoint="viewsNode"></tr>'+
				'</tbody></table>' +
				'<div class="sum-row">' +
				'</div>' +
				//如果grid中存在grid-has-total这个class,则显示合计栏
				'<table class="u-grid-master-totals" style="display:none" cellpadding="0" cellspacing="0" dojoAttachPoint="total"><tbody><tr dojoAttachPoint="totalsNode"></tr>'+
				'</tbody></table>' +
			'</div>';

	
			/**
			 * 数据源Changed
			//  */
			unieap.grid.Grid.prototype._onStoreChangedBack = unieap.grid.Grid.prototype.onStoreChanged;
			unieap.grid.Grid.prototype.onStoreChanged = function(){
				var storeChangeBack =  this._onStoreChangedBack();
				this._loadRemoteSumRow();
				// this._autoResize();
				// this.managers.get("SelectionManager")._execSelectionChange();
				this._addSumRow();
				return storeChangeBack;
			}
			// /**
			//  * 动态插入数据Changed
			//  */
			unieap.grid.Grid.prototype._onRowSetChangedBack = unieap.grid.Grid.prototype.onRowSetChanged;
			unieap.grid.Grid.prototype.onRowSetChanged = function(){
				this._onRowSetChangedBack();
				// this._autoResize();
				// this.managers.get("SelectionManager")._execSelectionChange();
				this._addSumRow();
			}

			unieap.grid.Grid.prototype._isLastTreeRow = function(inRowIndex){
				if(this.xtree){
					var codeColumn = this.xtree.id;
					var parentCodeColumn = this.xtree.parent;
					var gridRs = this.getBinding().getDataStore().getRowSet();
					var rowCode = gridRs.getItemValue(inRowIndex,codeColumn);
					
					var isLast = true;
					$.each(gridRs.getData(),function(i,row){
						if(row[parentCodeColumn] == rowCode){
							isLast = false;
							return false;
						}
					})
					return isLast;
				}else{
					return true;
				}
				
			}
			
			unieap.grid.Grid.prototype._addSumRow = function(){
		
				
				var grid = this;
				var colHtml = $('.u-grid-content colgroup:first',this.domNode).html();
				var cellSumStr = '';
			
				if(colHtml){
					var tds = "";
					try{
					if(this._sumColumnsStr){ //如果传了html进来就走
						var colSum = [],
							sumNub = 0,
							_sumColumns = this._sumColumns,
							_sumColumnsStr = this._sumColumnsStr;
							var sumValue = 0;
								$.each(this.managers.managers.ViewManager.views[1].rowTable.cols,function(index,cell){
									for(var i = 0; i< grid.getRowManager().getRowCount();i++){
										for(var u=0;u<_sumColumns.length;u++){
											if(cell.name == _sumColumns[u]){
												sumNub += Number(cell._get(i));
												if(i == grid.getRowManager().getRowCount()-1){
													colSum[u] = Number(sumNub);
													sumNub = 0;
												}
											}
										}
									}
								})
							var sumColumnsStr = this._sumColumnsStr;
							var sumColNum =0 ;
							$.each(this._sumColumns,function(index,colNub){ //把传进来的html替换一下合计
								var sumValue = colSum[index];
								sumValue = dojo.number.format(sumValue, {pattern: '#,###.00'});
								sumColumnsStr = sumColumnsStr.replace('{'+index+'}',sumValue);
								sumColNum++;
							});

					}else{
					
							$.each(this.managers.managers.ViewManager.views[1].rowTable.cols,function(index,cell){
								if(cell.hidden != true){
									var name = cell.name;
									if(tds.length == 0){
										tds += "<td style='text-align:left;' sumTag='"+name+"'><div class='sum-cell'>合计</div></td>";
									}else{
										
										var headerClass = cell.headerStyles || '';
										if(cell.dataType == 'number' && headerClass.indexOf('off-sum') == -1){
											var rowCount = grid.getRowManager().getRowCount();
											var sumValue = 0;
											for(var i = 0; i< rowCount;i++){
												var numberValue = 0;
												var value = cell._get(i);
												// 优先把金额数据截取成2位小数
												numberValue = dojo.number.format(value, {pattern: '#.00'});
												// 转换成number类型进行计算
												numberValue = Number(numberValue);
												if(numberValue != null){
													sumValue += numberValue;
												}
											}
											cellSumStr = dojo.number.format(sumValue, {pattern: '#,###.00'});
										}
										tds += "<td style='text-align:right;' sumTag='"+name+"'><div class='sum-cell'>"+cellSumStr+"</div></td>";
									}
								}
							});
						
					}
				}catch(e){}

					var paddingLeft = 30;
					var selectManager = this.managers.get("SelectionManager");
					if(selectManager && selectManager.selectType == "multiple" || selectManager.selectType == "single"){
						paddingLeft += 20;
					}
					$('.sum-row',this.domNode).css({
						'width':$('.u-grid-content',this.domNode).width()+'px'
					});
					$('.sum-row',this.domNode).html("");
					$('.sum-row',this.domNode).append("<table height='100%' border='0' cellspacing='0' cellpadding='0' style='padding-left:"+paddingLeft+"px;table-layout:fixed;width:100%;'>"+colHtml+"<tr>"+tds+"</tr></table>");
					$('.sum-row',this.domNode).remove();
					$('.grid-toolbar-sum',this.domNode).remove();
					if($('.u-grid-master-toolbar').find('.grid-toolbar-sum').length == 0){
						if(this._sumColumnsStr){
							$('.u-grid-master-toolbar',this.domNode).find('.toolbar-sum-multi').remove()
							$('.u-grid-master-toolbar',this.domNode).append(sumColumnsStr);
							return
						}
						$('.u-grid-master-toolbar',this.domNode).append("<div class='grid-toolbar-sum'><label class='grid-toolbar-sum-text'>合计</label><label class='grid-toolbar-sum-label'>¥"+cellSumStr+"</label></div>");
					}
				}
			}
		

dojo.provide('unieap.xgrid.core.cell');
dojo.declare("unieap.xgrid.Cell", null, {
	/**
	 * @declaredClass:
	 * 		unieap.xgrid.Cell
	 * @summary:
	 * 		单元格定义对象
	 * @description:
	 * 		可认为是表格单元格的模型，记录单元格定义和一些数据处理/显示的方法。
	 * @example:
	 * |<div dojoType="unieap.xgrid.Grid" id="grid" binding="{store:'empDataStore'}">
	 * |	<header>
	 * |		<cell name="attr_empno" label="编号" width="200"></cell>
	 * |		<cell name="attr_deptno" label="部门" width="300" decoder="{store:"deptStore"}></cell>
	 * |	</header>
	 * |</div>
	 * @example:
	 * |var layoutMan=unieap.byId("grid").getManager("LayoutManager");
	 * |var empnoCell=layoutMan.getCell("attr_empno");
	 * |//也可以简单得写成: var empnoCell=unieap.byId("grid").getCell("attr_empno");
	 * |var empnoName=empnoCell.name; //获得列绑定名为"attr_empno"
	 * |var empnoLabel=empnoCell.label; //获得列标题名为"编号"
	 * |
	 */


	width: 200,

	/*
	 * @summary:
	 * 		排序方式，1：升序，-1：降序
	 * @type:
	 * 		{1|-1}
	 * @default:
	 * 		1
	 */
	asc: 1,

	//编辑属性
	properties: {
		/**
		 * @summary:
		 *	指定列是或否可调整宽度
		 * @type:
		 * 	{boolean}
		 * @default:
		 *	false
		 * @example:
		 * | <cell label="姓名" name="attr_name" width="200" noresize="true"></cell>
		 */
		noresize: "boolean",

		/**
		 * @summary:
		 * 		列绑定名
		 * @description:
		 * 		用于指定单元格绑定datastore中的哪个字段
		 * 		注意:如果多列绑定了同一字段，请给这些列分别设置唯一的id值
		 * @type:
		 * 		{string}
		 * @default:
		 * 		""
		 * @example:
		 * |var ds=new unieap.ds.DataStore("demo",[
		 * |	{attr_name:'基础软件',attr_address:'黄浦路901号'}
		 * |]);
		 * |dataCenter.addDataStore(ds);
		 * |<div dojoType="unieap.xgrid.Grid" binding="{store:'demo'}">
		 * |	<header>
		 * |		<cell label="姓名" name="attr_name"></cell>
		 * |		<cell label="姓名" name="attr_address"></cell>
		 * |	</header>
		 * |</div>
		 */
		name: 'string',


		/**
		 * @summary:
		 * 		列跨越,类似于HTML中table的colspan属性
		 * @description:
		 * 		一般用于多标题和复杂表头
		 * @type:
		 * 		{number}
		 * @default:
		 * 		1
		 * @example:
		 * |<div dojoType="unieap.xgrid.Grid" binding="{store:'empDataStore'}">
		 * |	<header>
		 * |		<row>
		 * |			<cell colSpan="2" label="标题一" isMulTitle="true"></cell>
		 * |		</row>
		 * |		<row>
		 * |			<cell label="工资" name="attr_sal"></cell>
		 * |			<cell label="职位" name="attr_job"></cell>
		 * |		</row>
		 * |	</header>
		 * |</div>
		 * @img:
		 * 		images/grid/grid-cell-colSpan.jpg
		 */
		colSpan: "number",

		/**
		 * @summary:
		 * 		行跨越,类似于HTML中table的rowspan属性
		 * @type:
		 * 		{number}
		 * @description:
		 * 		一般用于多标题
		 * @default:
		 * 		1
		 * @example:
		 * |<div dojoType="unieap.xgrid.Grid" binding="{store:'empDataStore'}">
		 * |	<header>
		 * |		<row>
		 * |			<cell rowSpan="2" label="编号"></cell>
		 * |			<cell colSpan="2" label="标题一" isMulTitle="true"></cell>
		 * |		</row>
		 * |		<row>
		 * |			<cell label="工资" name="attr_sal"></cell>
		 * |			<cell label="职位" name="attr_job"></cell>
		 * |		</row>
		 * |	</header>
		 * |</div>
		 * @img:
		 * 		images/grid/grid-cell-rowSpan.jpg
		 */
		rowSpan: "number",


		/**
		 * @summary:
		 * 		标识列,表示该列是唯一的
		 * @type:
		 * 		{string}
		 * @default:
		 * 		""
		 * @example:
		 * |<div dojoType="unieap.xgrid.Grid" id="grid" binding="{store:'empDataStore'}">
		 * |	<header>
		 * |		<cell id="salary" name="attr_sal" label="工资"></cell>
		 * |		<cell id="job" name="attr_job" label="职位"></cell>
		 * |	</header>
		 * |</div>
		 * |<script type="text/javascript">
		 * |	var layoutMan=unieap.byId("grid").getManager("LayoutManager");
		 * |	layoutMan.hideCell(["salary"]); //隐藏工资列
		 * |</script>
		 */
		id: 'string',


		/**
		 * @summary:
		 * 		列数据类型
		 * @type:
		 * 		{string}
		 * @enum:
		 * 		{"number"|"string"|"date"}
		 * @default:
		 * 		"string"
		 * @example:
		 * |//设置此列排序方式为客户端排序，并且按数字类型排序。
		 * |<cell label="工资" name="attr_salary" width="150px"  dataType="number"></cell>
		 */
		dataType: "string",

		/**
		 * @summary:
		 * 		设置列是否能排序
		 * @type:
		 * 		{boolean}
		 * @default:
		 * 		true
		 * @example:
		 * |//工资列不可排序 
		 * |<cell label="工资" name="attr_salary" width="20%" canSort="false"></cell>
		 */
		canSort: "boolean",

		/**
		 * @summary:
		 * 		列格式化方法 【注】用户自定义的函数必须要有返回值
		 * @type:
		 * 		{function}
		 * @default:
		 * 		null
		 * @example:
		 * |//formatter指定的方法拥有两个参数，单元格数据值和行号。
		 * |<cell label="操作"  width="40px" formatter="fn"></cell>
		 * |function fn(inValue,inRowIndex){
		 * |	if ((inRowIndex-1)%2==0){
		 * |		inValue = "<label style='color:red'>" + inValue + "</label>";
		 * |	}
		 * |	return inValue;
		 * |} 
		 * @img:
		 * 		images/grid/grid-cell-formatter.jpg
		 */
		formatter: "object",

		/**
		 * @summary:
		 * 		列取值方法
		 * @type:
		 * 		{function}
		 * @default:
		 * 		null
		 * @example:
		 * |//设置cell标签的get属性,get属性指定生成列值方法，参数为行号。
		 * |<cell name="操作" width="40px" get="fn"></cell>
		 * |function fn(inRowIndex){
		 * |	return "第"+ (inRowIndex+1) + "行"; 
		 * |}
		 * @img:
		 * 		images/grid/grid-cell-get.jpg
		 */
		get: "object",

		/**
		 * @summary:
		 * 		列头样式支持css
		 * @type:
		 * 		{string}
		 * @default:
		 * 		""
		 */
		headerClass: "string",
		/**
		 * @summary:
		 * 		列头样式
		 * @type:
		 * 		{string}
		 * @default:
		 * 		""
		 * @example:
		 *|<div id="grid" id="grid" dojoType="unieap.xgrid.Grid" width="80%" height="180px" binding="{store:'empDataStore'}" views="{rowNumber:true}">
		 *|	<header>
		 *|		<cell name="attr_empno" label="员工编号(红色字体)" width="10%"  headerStyles="color:red;"></cell>
		 *|		<cell name="NAME" label="姓名(居左)" width="20%" headerStyles="text-align:left;"></cell>
		 *|		<cell name="NAME" label="姓名(居中)" width="20%" headerStyles="text-align:center;"></cell>
		 *|		<cell name="NAME" label="姓名(居右)" width="20%" headerStyles="text-align:right;"></cell>
		 *|		<cell name="attr_job" label="职位" width="20%"></cell>
		 *|		<cell name="attr_sal" label="工资(正常列)" width="10%"></cell>
		 *|	</header>
		 *|</div>
		 * @img:
		 * 		images/grid/headerstyle.png
		 */
		headerStyles: "string",

		/**
		 * @summary:
		 * 		列样式
		 * @type:
		 * 		{string}
		 * @default:
		 * 		""
		 * @example:
		 *|<div id="grid" id="grid" dojoType="unieap.xgrid.Grid" width="80%" height="180px" binding="{store:'empDataStore'}" views="{rowNumber:true}">
		 *|		<header>
		 *|			<cell name="attr_empno" label="员工编号" width="10%" styles="color:red;" ></cell>
		 *|			<cell name="NAME" label="姓名" width="20%" styles="text-align:left;" ></cell>
		 *|   		<cell name="NAME" label="姓名" width="20%" styles="text-align:center;" ></cell>
		 *|			<cell name="NAME" label="姓名" width="20%" styles="text-align:right;" ></cell>
		 *|			<cell name="attr_job" label="职位(黄色背景)" width="20%" styles="background-color:yellow;"></cell>
		 *|			<cell name="attr_sal" label="工资(正常列)" width="10%"></cell>
		 *|		</header>
		 *|</div>
		 * @img:
		 * 		images/grid/styles.png
		 */
		styles: "string",


		/**
		 * @summary:
		 * 		是否为多标题列
		 * @description:
		 * 		设置isMulTitle="true"的列不可绑定字段
		 * @default:
		 * 		false
		 * @type:
		 * 		{boolean}
		 * @example:
		 *|<row>
		 *|   <cell rowSpan="2" name="attr_empno" width="20%" label="编号"></cell>
		 *|   <cell label="标题一" isMulTitle="true" width="40%" colSpan="2"></cell>
		 *|</row>
		 *|<row>
		 *|   <cell name="attr_sal" label="工资" width="20%"></cell>
		 *|   <cell name="attr_job" label="职位" width="20%"></cell>
		 *|</row>
		 * 设置多标题
		 * @img:
		 *	images/grid/views/multitle.png
		 */
		isMulTitle: "boolean",

		/**
		 * @summary:
		 * 		是否可以拖动，是否可以调整列位置
		 * @type:
		 * 		{boolean}
		 * @default:
		 * 		true
		 * @example:
		 *|<div dojoType="unieap.xgrid.Grid" id="grid" width="80%" height="250px" 
		 *|     binding="{store:'empDataStore'}" views="{rowNumber:true}" draggable="false">
		 *| 	...... 
		 *|</div>
		 */
		draggable: "boolean",

		/**
		 * @summary:
		 * 		列标题名
		 * @type:
		 * 		{string}
		 * @default:
		 * 		""
		 * @example:
		 * |<cell label="测试" name="attr_job"></cell>
		 */
		label: "string",

		/**
		 * @summary:
		 * 		设置单元格的宽度
		 * @description:
		 * 		单元格的宽度也可以设置成百分比
		 * 		注意:锁定列单元格宽度不支持百分比，如果设置了百分比，它们的宽度会变为"200px"
		 * @type:
		 * 		{number|string}
		 * @default:
		 * 		200
		 * @example:
		 * |<div dojoType="unieap.xgrid.Grid" width="800" binding="{store:'empDs'}">
		 * |	<header>
		 * |		<cell name="attr_empno" label="编号" width="200" ></cell>
		 * |		<cell name="attr_sal" label="工资" ${1}width="20%"></cell>
		 * |		<cell name="attr_deptno" label="部门" width="80%"></cell>
		 * |	</header>
		 * |</div>
		 * 		${1}由于"工资"列和"部门"列的宽度为百分比,它们的实际宽度为:
		 * 			工资列宽:(20%/(20%+80%))*(800-200)=120
		 * 			部门列宽:(80%/(20%+80%))*(800-200)=480
		 */
		width: "string",

		/**
		 * @summary:
		 * 		定义值转义的依据
		 * @type:
		 * 		{object}
		 * @default:
		 * 		null
		 * @example:
		 * |//设置转义
		 * |<cell label="姓名" name="attr_name" decoder="{store:'ds',valueAttr:'value',displayAttr:'display'}"></cell>
		 */
		decoder: "object",

		/**
		 * @summary:
		 * 		处理级联值转义
		 * @type:
		 * 		{object}
		 * @default:
		 * 		null
		 * @example:
		 * |<script type="text/javascript">
		 * |	var ds1=new unieap.ds.DataStore('ds1',[
		 * |		{province:1,city:11},
		 * |		{province:2,city:12}
		 * |	]);
		 * |	dataCenter.addDataStore(ds1);
		 * |	var provinceDs=new unieap.ds.DataStore("province",[
		 * |		{CODEVALUE:1,CODENAME:'湖北'},
		 * |		{CODEVALUE:2,CODENAME:'辽宁'}
		 * |	]);
		 * |	dataCenter.addDataStore(provinceDs);
		 * |	var city1=new unieap.ds.DataStore("city1",[
		 * |		{CODEVALUE:11,CODENAME:'仙桃'},
		 * |		{CODEVALUE:12,CODENAME:'荆州'}
		 * |	])
		 * |	dataCenter.addDataStore(city1);
		 * |	var city2=new unieap.ds.DataStore('city2',[
		 * |		{CODEVALUE:11,CODENAME:'大连'},
		 * |		{CODEVALUE:12,CODENAME:'锦州'}
		 * |	]);
		 * |	dataCenter.addDataStore(city2);
		 * |	function fn(value){
		 * |		if(value=="1"){
		 * |			return "city1";
		 * |		}else if(value=="2"){
		 * |			return "city2";
		 * |		}
		 * |}
		 * |</script>
		 * |<div dojoType="unieap.xgrid.Grid" binding="{store:'ds1'}" edit="{editType:'rowEdit'}" >
		 * |	<header>
		 * |		<cell label="省份" name="province" editor="{editorClass:'unieap.form.ComboBox',editorProps:{id:'province',dataProvider:{store:'province'}}}"></cell>
		 * |		<cell label="城市" name="city" decoder="{}" cascade="{primary:'province',getCascadeStore:fn}" ></cell>
		 * |	</header>
		 * |</div>
		 */
		cascade: "object",

		/**
		 * @summary:
		 * 		值格式化属性
		 * @type:
		 * 		{object}
		 * @default:
		 * 		null
		 * @example:
		 * |假设单元格绑定的值为2009/01/01,要显示成2009年01月01日,需要先设置valueFormatter属性
		 * |<cell label="日期" name="attr_hiredate" valueFormatter="{declaredClass:'unieap.form.DateValueFormatter',dataFormat:'yyyy/MM/dd'}"></cell>
		 */
		valueFormatter: "object",

		/**
		 * @summary:
		 * 		显示格式化方法
		 * @description:
		 * 		如果用户自定义一个格式化类,格式化类的format方法会接受到两个参数,一个是要格式化的值,另外一个是当前单元格所在的索引号(rowIndex)
		 * @type:
		 * 		{object}
		 * @default:
		 * 		null
		 * @example:
		 *|<div id="grid" id="grid" dojoType="unieap.xgrid.Grid" width="80%" height="200px" binding="{store:'empDataStore'}" views="{rowNumber:true,orderType:'client'}">
		 *|		<header>
		 *|			<cell width="150px" label="部门(真实值)" name="attr_deptno" headerStyles="color:red;" width="15%"></cell>
		 *|			<cell width="150px" label="部门(转义值)" name="attr_deptno" headerStyles="color:red;" width="15%" 
		 *|     			decoder="{store:'DEPT',valueAttr:'CODEVALUE',displayAttr:'CODENAME'}"></cell>
		 *|			<cell width="150px" label="入职日期(未格式化的列)" name="attr_hiredate" headerStyles="color:green;" width="20%"></cell>
		 *|			<cell width="150px" label="入职日期(已格式化的列)" name="attr_hiredate" headerStyles="color:green;" width="20%"
		 *|				     displayFormatter="{declaredClass:'unieap.form.DateDisplayFormatter',dataFormat:'yyyy-MM-dd'}"></cell> //日期格式化
		 *|			<cell width="150px" label="工资(未格式化的列)" name="attr_sal" headerStyles="color:red;" width="15%"></cell>
		 *|			<cell width="150px" label="工资(已格式化的列)" name="attr_sal" headerStyles="color:red;" width="15%" 
		 *|				     displayFormatter="{declaredClass:'unieap.form.NumberDisplayFormatter',dataFormat:'###,###'}"></cell>  //数字格式化
		 *|		</header>
		 *|</div>
		 * @img:
		 * 		images/grid/displayformatter.png	
		 */
		displayFormatter: "object",

		/**
		 * @summary:
		 * 		编辑器配置
		 * @description:
		 * 		editor中必须配置editorClass，用来指定编辑器类型；
		 * 		可选的配置为editorProps，相当于一般在普通editor标签上配置的各个属性，事件及方法等。
		 * 		editorClass和editorProps之外，editor不可以配置其他属性。
		 * @type:
		 * 		{object}
		 * @default:
		 * 		null
		 * @example:
		 * |<cell name="attr_job" width="150px" label="职位" editor="{editorClass:'unieap.form.TextBox',editorProps:{textAlign:'left'}}"></cell>
		 * @example:
		 * |<cell name="attr_deptno" width="150px" label="部门" 
		 * |	editor="{editorClass:'unieap.form.ComboBox',editorProps:{dataProvider:{store: 'DEPT'},decoder:{valueAttr:'CODEVALUE',displayAttr:'CODENAME'}}}"></cell>
		 */
		editor: "object",

		/**
		 * @type:
		 * 		{boolean}
		 * @summary:
		 * 		编辑器可用标志
		 * @default:
		 * 		true
		 * @example:
		 * |<div dojoType="unieap.xgrid.Grid" edit="{editType:'rowEdit'}">
		 * |	<header>
		 * |		${1}<cell name="attr_ename" editor="{editorClass:'unieap.form.TextBox'}" enable="false"></cell>
		 * |	</header>
		 * |</div>
		 * ${1}虽然该列配置了editor属性，但是enable为false,该列依然不可编辑
		 */
		enable: "boolean",

		/**
		 * @summary:
		 * 		cell编辑前事件
		 * @description:
		 * 		编辑前事件，此事件指定的方法返回false时，此列的编辑器将不会被打开。
		 * @type:
		 * 		{function}
		 * @default:
		 * 		null
		 * @example:
		 * |<div dojoType="unieap.xgrid.Grid" edit="{editType:'rowEdit'}">
		 * |	<header>
		 * |		<cell name="attr_ename" label="姓名" editor="{editorClass:'unieap.form.TextBox'}" onBeforeEdit="fn"></cell>
		 * |	</header>
		 * |</div>
		 * |function fn(){
		 * |	return false; //姓名列不可编辑
		 * |}
		 * |
		 */
		onBeforeEdit: "object",

		/**
		 * @summary:
		 * 		本列是否显示
		 * @type:
		 * 		{boolean}
		 * @default:
		 * 		false
		 * @example:
		 * |<div dojoType="unieap.xgrid.Grid" binding="{store:'demo'}">
		 * |	<header>
		 * |		<cell label="姓名" name="attr_name" hidden=true></cell>
		 * |		<cell label="姓名" name="attr_address"></cell>
		 * |	</header>
		 * |</div>
		 */
		hidden: "boolean"

	},

	constructor: function (param) {
		this.enable = true;
		dojo.mixin(this, param);
		this.setWidth(this.width);
		unieap.setLabelFormatProps(this);
		this.classes = [];
		this._isNumberStyle() && this.classes.push('u-xgrid-text2-number');
		param.colSpan > 1 && this.classes.push('u-xgrid-MulTitle');
		//U_EAP00027960 
		(!this.enable) && this.editor && (this.editor = null);
	},

	// 判断当前cell否应用数字类型样式
	_isNumberStyle: function () {
		if (this.dataType == "number") return true;
		if (this.dataType) return false;
		var ds = this.grid.getBinding().getDataStore();
		var datatype;
		if (this.name && ds.getMetaData(this.name)) {
			datatype = ds.getMetaData(this.name).dataType;
		} else {
			return false;
		}
		if (unieap.getDataType(datatype) == "number") {
			this.text2_number = true;
			return true;
		}
		return false;
	},

	//对日期进行格式化用得到
	getValueFormatter: function () {
		return unieap.getModuleInstance(this, "valueFormatter", "unieap.form.SimpleFormatter");
	},
	//用户可以自己定义自己的formatter,例如
	//displayFormatter="{declaredClass:'unieap.form.NumberDisplayFormatter',dataFormat:'###,###.00'}"
	getDisplayFormatter: function () {
		return unieap.getModuleInstance(this, "displayFormatter", "unieap.form.SimpleFormatter");
	},


	_get: function (inRowIndex) {
		var value = this.value || this.grid.getBinding().getDatum(inRowIndex, this.name);
		return value;
	},

	//动态改变cell或者row样式时，在生成html时改变html的style
	_changeStyle: function (rowIndex, m, cellIndex) {
		var row = new unieap.ds.Row(this.grid.getBinding().getRowSet(), this.grid.getBinding().getRow(rowIndex));
		var identifierNO = row.getIdentifier("identifierNO");
		var _styles = row.getIdentifier("_styles");
		if (_styles && "undefined" != typeof (_styles[cellIndex]) && identifierNO[cellIndex] == cellIndex) {
			var styles = m[2] + ";" + _styles[cellIndex];
			m[2] = styles;
		}
		return m;
	},
	_addAClass: function (rowIndex, m, cellIndex) {
		var row = new unieap.ds.Row(this.grid.getBinding().getRowSet(), this.grid.getBinding().getRow(rowIndex));
		var str = m;
		var color = row.getIdentifier('color_v');
		var identifierNO = row.getIdentifier("identifierNO");
		if (str.indexOf('<a') > -1 && color && rowIndex == color.color_v && identifierNO[cellIndex] == cellIndex
		&& str.indexOf('<a').length-1 == 1
		) {
			function createXml(str) {
				if (document.all) {
					var xmlDom = new ActiveXObject("Microsoft.XMLDOM");
					xmlDom.loadXML(str);
					return xmlDom;
				} else
					return new DOMParser().parseFromString(str, "text/xml");
			}
			var xmlDom = createXml(str);
			xmlDom.getElementsByTagName('a')[0].className = 'color_v'
			if (xmlDom.xml) { //不在IE中,会返回undefined
				str = xmlDom.xml
			} else {
				str = new XMLSerializer().serializeToString(xmlDom);
				if(str.indexOf('parsererror')>-1){
					var begin = str.indexOf('<parsererror>');
					var end = str.lastIndexOf('</parsererror>');
					var substr = str.substring(begin, end+14);
					return str.replace(substr, '')
				}
			}
		}
		return str
	},

	//isUnitedCell 是否是合并单元格调用
	//合并单元格调用是,合并的单元格不需要line-height样式，不然会出现bug #U_EAP00008691 
	format: function (inRowIndex, data, isUnitedCell) {
		if (data) {
			//如果有数据 则不需要通过inRowIndex去取,用于锁定行
			value = (this.name in data) ? data[this.name] : '';
		} else {
			var value = this.get ? unieap.fireEvent4Widget(this, this.grid, this.get, [inRowIndex]) : this._get(inRowIndex);
		}
		value = this._format(value, inRowIndex);

		var gclass = "";
		if (value.cls) {
			gclass = value.cls;
		}
		if (value.value) {
			value = value.value;
		}
		//value值为空时，ie下单元格显示没有边框
		value === "" ? (value = "&nbsp;") : value;
		//判断金额为0.00的时候，数据是否显示

		if ($(this.grid.domNode).hasClass('grid-summoney')) {
			if (this.dataType == "number") {
				if (value == 0.00) {
					value = "";
				}
			}
		}

		// 添加判断行合并
		var uniteName = this.name;
		if (this.grid.unitedCell) { //jols add condition			
			for (var i = 0; i < this.grid.unitedCell.unite.length; i++) {
				if (this.name == this.grid.unitedCell.unite[i]) {
					if (!this.grid.uniteText) {
						this.grid.uniteText = {};
					}
					if (this.grid.binding.getDataStore().getRowSet().getRowCount() > 1 && (this.grid.uniteText[uniteName] != null || this.grid.uniteText[uniteName] != undefined)) {
						if (inRowIndex != 0 && value != "&nbsp;") {
							if (value == this.grid.uniteText[uniteName]) {
								value = "";
							} else {
								this.grid.uniteText[uniteName] = value;
							}
						} else {
							this.grid.uniteText[uniteName] = value;
						}
					} else {
						this.grid.uniteText[uniteName] = value;
					}
				}
			}
		}



		//		var lineHeight=this.grid.managers.get('RowManager').defaultRowHeight,
		//			css="";
		//		lineHeight=lineHeight-1;
		//		!isUnitedCell&&(css="line-height:"+lineHeight+"px");
		var css = "";
		if (gclass) {
			value = "<div  class='" + gclass + "' style='" + css + "'>" + value + "</div>";
		}
		//else{
		//value = "<div  class=' u-xgrid-text' style='"+css+"'><div class='u-xgrid-text2'>" + value + "</div></div>";
		//}
		return value;
	},

	_format: function (inValue, inRowIndex) {
		var value = inValue;
		if (this.decoder) { //对于后台 date类型做防护  时间戳和日期格式都可以
			//处理级联
			if (!this.cascade && this.editor && this.editor.editorProps.cascade) {
				this.cascade = this.editor.editorProps.cascade;
			}
			if (this.cascade && this.cascade.getCascadeStore) {
				this.decoder.store = this._getCascadeStore(this.cascade, inRowIndex);
			}
			if (this.decoder.store) {
				//如果没有找到value对应的值,应该返回原始的value值
				//				var dc = this.grid.dataCenter || (unieap.Action.getViewContext(this.grid) || window).dataCenter;
				//				value = unieap.transcode(value,this.decoder,dc)||value;
				var bindingDataCenter = this.grid.getBinding().dataCenter;
				var decordDC = ((bindingDataCenter == undefined) ?
					(this.grid.dataCenter || (unieap.Action.getViewContext(this.grid) || window).dataCenter) :
					bindingDataCenter);
				value = unieap.transcode(value, this.decoder, decordDC) || value;
			}
		}
		if (this.displayFormatter || this.valueFormatter) {
			value = this._formatValue(value, inRowIndex);
		}
		if (dojo.isFunction(this.formatter)) {
			try {
				value = unieap.fireEvent4Widget(this, this.grid, this.formatter, [value, inRowIndex]);
			} catch (e) {
				console.log(e);
				if (!this.grid._hasCellFormatterError) {
					this.grid._hasCellFormatterError = true;
					// MessageBox.alert({
					// 	type:'warn',					
					// 	message:"	"+this.label+" -- "+RIA_I18N.grid.cell.formatterErrorMessage
					// });
				}
			}
			if (typeof (value) == "undefined" && !this.grid._hasCellFormatterError) {
				this.grid._hasCellFormatterError = true;
				MessageBox.alert({
					type: 'warn',
					message: "	" + this.label + " -- " + RIA_I18N.grid.cell.formatterNoReturnValue
				});
			}
		}
		return value;
	},
	_formatValue: function (value, inRowIndex) {
		//value值格式化操作
		if (this.valueFormatter) {
			value = this.getValueFormatter().format(value, inRowIndex);
		}
		//显示值格式化操作
		var valFormat = /^(\d{4})-(\d{2})-(\d{2})$/;
		if (typeof (value) === 'string' && valFormat.test(value)) { //方法如果传值进来直接是yyyy-mm-dd的格式 就不走格式化 否则会格式化出空
			return value
		}
		if (this.displayFormatter) {
			value = this.getDisplayFormatter().format(value, inRowIndex);
		}
		return value;
	},
	_getCascadeStore: function (cascade, inRowIndex) {
		if (isNaN(inRowIndex)) {
			return null;
		}
		if (!cascade.primaryCell) {
			this.grid.LayoutManager.forEachCell(function (cell, index) {
				if ((cell.editor && cell.editor.editorProps &&
						cell.editor.editorProps.id == cascade.primary) ||
					(cell.name == cascade.primary)) {
					cascade.primaryCell = cell;
				}
			});
		}
		return cascade.getCascadeStore(cascade.primaryCell._get(inRowIndex));
	},

	isPercent: function () {
		return this.percent == true;
	},

	/**
	 * @summary:
	 * 		设置单元格的列宽
	 * @return:
	 * 		{string}
	 * @example:
	 * unieap.byId("grid").getLayoutManager().getCell("attr_name").setWidth("300px");
	 * unieap.byId("grid").refresh();
	 */
	setWidth: function (width) {
		var view = this.grid.getManager("ViewManager").getViewByCell(this);
		width = String(width || 200);
		this.width = parseInt(width, 10);
		if (view && view.noscroll) {
			return this.percent = false;
		}
		if (this.percent == true) {
			return;
		}
		if (width.indexOf("%") > 0) {
			this.percent = true;
		} else {
			this.percent = false;
		}
	},

	/**
	 * @summary:
	 * 		获得单元格的列宽
	 * @return:
	 * 		{string}
	 * @example:
	 * |var cell=grid.getCell("attr_name");
	 * |var cellWidth=cell.getWidth(); 
	 */
	getWidth: function () {
		return this.isPercent() ? String(this.width).concat("%") : String(this.width).concat("px");
	},

	getPixelWidth: function () {
		if (this.hidden) {
			return 0;
		}
		return this.width;
	},

	getRealWidth: function () {
		var view = this.grid.getViewManager().getViewByCell(this),
			viewName = view.id,
			trNodeList = dojo.query("tr", viewName);
		if (trNodeList[0] != undefined && trNodeList[0] != null) {
			var tr = trNodeList[0];
			for (var i = 0; i < tr.cells.length; ++i) {
				if (this.index == tr.cells[i].getAttribute("idx"))
					return tr.cells[i].clientWidth;
			}
			return 0;
		} else {
			var tr = dojo.query("col", viewName);
			for (var i = 0; i < tr.length; ++i) {
				if (this.index == i)
					return parseInt(tr[i].style.width);
			}
			return 0;
		}

	},

	clearCellEdit: function () {
		if (this.edit) {
			this.edit = null;
		}
	},

	isValid: function (inRow) {
		if (!this.name) return true;
		var value = inRow.getItemValue(this.name),
			editor = this.getEditor();
		//首先校验编辑器
		if (editor) {
			editor.getBinding().bind(inRow);
			editor.setValue(value);
			result = editor.getValidator().validate();
			editor.getBinding().unbind(inRow);
			if (!result) {
				this._errorMsg = editor.getValidator().getErrorMsg();
				this.destroy();
				return false;
			}
			this.destroy();
		}
		//元数据校验
		var meta = inRow.getRowSet().getMetaData(this.name);
		if (meta) {
			return this._isMetaValid(meta, value);
		}
		return true;
	},

	_isMetaValid: function (meta, value) {

		// 非空校验
		if (!meta.isNullable() && (value == null || (typeof (value) == "string" && dojo.trim(value) === ""))) {
			this._errorMsg = meta.getPrompt("nullable") || RIA_I18N.form.formWidgetValidator.nullError;
			this._canEdit = false;
			return false;
		}

		// 长度校验
		if (typeof (meta.getMaxLength()) != "undefined" && value && unieap.bitLength(value) > meta.getMaxLength()) {
			this._errorMsg = meta.getPrompt("maxLength") || (RIA_I18N.form.formWidgetValidator.maxLengthError + meta.getMaxLength());
			this._canEdit = false;
			return false;
		}
		if (typeof (meta.getMinLength()) != "undefined" && value && unieap.bitLength(value) < meta.getMinLength()) {
			this._errorMsg = meta.getPrompt("minLength") || (RIA_I18N.form.formWidgetValidator.minLengthError + meta.getMaxLength());
			this._canEdit = false;
			return false;
		}
		// 正则校验
		if (typeof (meta.getPattern()) != "undefined" && value && !new RegExp(meta.getPattern()).test(value)) {
			this._errorMsg = meta.getPrompt("pattern") || RIA_I18N.form.formWidgetValidator.errorMsg;
			this._canEdit = false;
			return false;
		}
		// 数值校验（范围、最大值、最小值、精度）
		if (typeof (meta.getRange()) != "undefined" && value && typeof (value) == "number" && (value > meta.getRange().max || value < meta.getRange().min)) {
			this._errorMsg = meta.getPrompt("range") || RIA_I18N.form.formWidgetValidator.errorMsg;
			this._canEdit = false;
			return false;
		}
		if (typeof (meta.getMax()) != "undefined" && value && typeof (value) == "number" && value > meta.getMax()) {
			this._errorMsg = meta.getPrompt("max") || RIA_I18N.form.formWidgetValidator.errorMsg;
			this._canEdit = false;
			return false;
		}
		if (typeof (meta.getMin()) != "undefined" && value && typeof (value) == "number" && value < meta.getMin()) {
			this._errorMsg = meta.getPrompt("min") || RIA_I18N.form.formWidgetValidator.errorMsg;
			this._canEdit = false;
			return false;
		}
		if (typeof (meta.getPrecision()) != "undefined" && value && typeof (value) == "number") {
			value = value + "";
			var len = meta.getPrecision() - meta.getScale(),
				re;
			if (len <= 0) return true;
			if (value.indexOf(".") > -1 && meta.getScale() > 0) {
				re = new RegExp("^(-)?\\d{1," + len + "}.\\d{1," + meta.getScale() + "}$");
			} else {
				re = new RegExp("^(-)?\\d{1," + len + "}$");
			}
			//校验精度
			if (!re.test(value)) {
				if (meta.getScale() > 0) {
					this._errorMsg = meta.getPrompt("scale") || RIA_I18N.form.formWidgetValidator.errorMsg;
					this._canEdit = false;
					return false;
				} else {
					this._errorMsg = meta.getPrompt("precision") || RIA_I18N.form.formWidgetValidator.errorMsg;
					this._canEdit = false;
					return false;
				}
			}
		}
		// 日期校验
		if (typeof (meta.getPast()) != "undefined" && value && value > meta.getPast()) {
			this._errorMsg = meta.getPrompt("past") || RIA_I18N.form.formWidgetValidator.errorMsg;
			this._canEdit = false;
			return false;
		}
		if (typeof (meta.getFuture()) != "undefined" && value && value < meta.getFuture()) {
			this._errorMsg = meta.getPrompt("future") || RIA_I18N.form.formWidgetValidator.errorMsg;
			this._canEdit = false;
			return false;
		}
		return true;
	},
	//获得校验错误提示信息
	getErrorMsg: function () {
		return this._errorMsg;
	},
	getEdit: function () {
		// console.log(this);
		if (!this.edit) {
			dojo.require("unieap.xgrid.core.cellEdit");
			this.edit = new unieap.xgrid.cellEdit(this);
		}
		return this.edit;
	},

	/**
	 * @summary:
	 * 		获得Cell上配置的编辑器
	 * @return:
	 * 		{unieap.form.FormWidget}
	 * @example:
	 * |<cell editor="{editorClass:'unieap.form.TextBox'}" name="attr_sal"></cell>
	 * |var editor=unieap.byId("grid").getCell("attr_sal").getEditor();
	 * |alert(editor.declaredClass); //弹出unieap.form.TextBox
	 */
	getEditor: function (which) {
		return this.getEdit().getEditor(which);
	},

	destroy: function () {
		if (this.edit) {
			this.edit.destroy();
			this.edit = null;
		}
	}

});
dojo.provide("unieap.xgrid.core.lib");

dojo.mixin(unieap.xgrid, {
	nop: function() {
	},
	getTr: function(rowOwner, index){
		return rowOwner && ((rowOwner.rows||0)[index]);
	},
	mouseEvents: [ 'mouseover', 'mouseout', /*'mousemove', */'mousedown', 'mouseup', 'click', 'dblclick', 'contextmenu' ],
	keyEvents: [ 'keyup', 'keydown', 'keypress' ],
	funnelEvents: function(inNode, inObject, inMethod, inEvents) {
		var evts = (inEvents ? inEvents : unieap.xgrid.mouseEvents.concat(unieap.xgrid.keyEvents));
		for (var i=0, l=evts.length; i<l; i++){
			inObject["connect"](inNode,'on' + evts[i],  inMethod);
		}
	},
	addObserver: function(target, ob) {
		if (!target.observers) {
			target.observers = [];
		}
		target.observers.push(ob);
	},
	notify: function(host, method, inArgs) {
		var a = inArgs || [];
		for(var i=0, m, o; (o=host.observers[i]); i++){
			(method in o)&&(o[method].apply(o, a));
		}
	}
});

dojo.provide('unieap.xgrid.core.builder');
unieap.xgrid.rowIndexTag = "gridrowindex";


dojo.declare("unieap.xgrid.view.Builder", null, {
	
	view: null,
	
	_table: '<table class="u-xgrid-table" border="0" cellspacing="0" cellpadding="0" height="1"',
	_rowbartable: '<table class="u-xgrid-rowbar-table" border="0" cellspacing="0" cellpadding="0" ',
	
	constructor: function(inView) {
		this.view = inView;
        window.localStorage.setItem(this.view.grid.id+'isMulTitle', JSON.stringify({}));
	},
	
	generateCellMarkup: function(inCell, isHeader) {
		if(!isHeader){
		}
		var result = [], html, cellTag;
		if (isHeader) {
			cellTag = "th";
		} else {
			cellTag = "td";
		}
		html = [ "<" + cellTag + " " ];
		//如果不是Header，则认为没有colspan和rowspan
		if(isHeader){
			inCell.colSpan && html.push(" colspan='", inCell.colSpan, "'");
			inCell.rowSpan && html.push(" rowspan='", inCell.rowSpan, "'");
		}
		html.push(" class='");
		isHeader&&html.push("u-xgrid-hcell ");
		if(isHeader){
			html.push(inCell.headerClass);
		}
		inCell.classes && html.push(inCell.classes.join(' '));
		html.push("");
		//result[0]-->"<td class='u-grid-cell"
		result.push(html.join(''));
		//result[1]-->""
		result.push("");
		html = ["' idx='", inCell.index, "' style='"];
		html.push(isHeader?inCell.headerStyles:inCell.styles);
		//result[2]--->"' idx='1' style='background:#ccc;"
		result.push(html.join(''));
		//result[3]-->""
		result.push("");
		html = [ "'" ];
		html.push(">");
		//result[4]-->"'>"
		result.push(html.join(''));
		//result[5] -->""
		result.push("");
		//result[6]-->"</td>"
		result.push("</" + cellTag + ">");
		return result;
	},
	// cell finding
	isCellNode: function(inNode) {
		return Boolean(inNode && inNode.getAttribute && inNode.getAttribute("idx"));
	},
	getCellNodeIndex: function(inCellNode) {
		return inCellNode ? Number(inCellNode.getAttribute("idx")) : -1;
	},
	getCellNode: function(inRowNode, inCellIndex) {
		for(var i=0, row; row=unieap.xgrid.getTr(inRowNode.firstChild, i); i++) {
			for(var j=0, cell; cell=row.cells[j]; j++) {
				if(this.getCellNodeIndex(cell) == inCellIndex) {
					return cell;
				}
			}
		}
	},
	findCellTarget: function(inSourceNode, inTopNode) {
		var n = inSourceNode;
		while(n && !this.isCellNode(n) && (n!=inTopNode)) {
			n = n.parentNode;
		}
		return n!=inTopNode ? n : null 
	},
	// event decoration
	baseDecorateEvent: function(e) {
		e.dispatch = 'do' + e.type;
		e.grid = this.view.grid;
		e.sourceView = this.view;
		e.cellNode = this.findCellTarget(e.target, e.rowNode);
		e.cellIndex = this.getCellNodeIndex(e.cellNode);
		var layout = e.grid.LayoutManager; 
		e.cell = (e.cellIndex >= 0 ? layout.getCell(e.cellIndex) : null);
	},
	// event dispatch
	findTarget: function(inSource, inTag) {
		var n = inSource;
		while(n && !(n.getAttribute(inTag)) && (n!=this.view.grid.domNode)) {
			n = n.parentNode;
		}
		return (n != this.view.domNode) ? n : null; 
	},
	findRowTarget: function(inSource) {
		var rowNode=this.findTarget(inSource, unieap.xgrid.rowIndexTag);
		var l=0,m=rowNode;
		while(m&&(m!=this.view.grid.domNode)){
			m = m.parentNode;
			l+=1;
			if(l>10)return null;
		}
		if (l > 10) {
			return null;
		}
		return rowNode;
	},
	isIntraNodeEvent: function(e) {
		try {
			return (e.cellNode && e.relatedTarget && dojo.isDescendant(e.relatedTarget, e.cellNode));
		} catch(x) {
			// e.relatedTarget has permission problem in FF if it's an input: https://bugzilla.mozilla.org/show_bug.cgi?id=208427
			return false;
		}
	},
	isIntraRowEvent: function(e) {
		try {
			var row = e.relatedTarget && this.findRowTarget(e.relatedTarget);
			return !row && (e.rowIndex==-1) || row && (e.rowIndex==row.gridRowIndex);			
		} catch(x) {
			// e.relatedTarget on INPUT has permission problem in FF: https://bugzilla.mozilla.org/show_bug.cgi?id=208427
			return false;
		}
	},
	dispatchEvent: function(e) {
		if(e.dispatch in this) {
			return this[e.dispatch](e);
		}
	},
	// dispatched event handlers
	domouseover: function(e) {
		if(e.cellNode && (e.cellNode!=this.lastOverCellNode)) {
			this.lastOverCellNode = e.cellNode;
			this.view.onMouseOver(e);
		}
		this.view.onMouseOverRow(e);
	},
	domouseout: function(e) {
		var relatedTarget = e.relatedTarget;
		//if(relatedTarget && relatedTarget.className != 'u-xgrid-text2' && relatedTarget.className != 'u-xgrid-cell'){
		if(relatedTarget){
			this.view.onMouseOut(e);
			if(relatedTarget.className != 'u-xgrid-cell'){
				this.lastOverCellNode = null;
			}
		}else if(e.cellNode && (e.cellNode==this.lastOverCellNode) && !this.isIntraNodeEvent(e, this.lastOverCellNode)){
			this.lastOverCellNode = null;
			if(!this.isIntraRowEvent(e)) {
				this.view.onMouseOutRow(e);
			}
		} 
	}
});



dojo.declare("unieap.xgrid.view.HeaderBuilder", unieap.xgrid.view.Builder, {
	bogusClickTime: 0,       //防止调整列宽mouseup后，让表头排序
	overResizeWidth: 4,      //调整列宽时，在overResizeWidth范围内，鼠标改变
	minColWidth: 50,         //调整列宽，允许调整到的最小的宽度
	oldWidth: -1,            //调整列宽，cell原宽度
	rawWidth: -1,            //调整列宽，cell新的宽度
	isMulTitle: false,       //标记是否是多标题
	
	generateHtml : function() {
		var html = [], rows = this.view.structure.rows,w =this.view.getRealWidth();
		var sortInfo = this.view.grid.getSortInfo();
		if(sortInfo.length > 1){ //避免排序的时候出现两条排序显示的图标
			sortInfo.length = 1;
		}
     	 var  heightType = false;
		var v = this.view,
			cells = v.cells,
			snapshot = v.snapshot,
			showCells = snapshot.showCells || cells.length;
		var temprows = v.contentStructure.rows,
			temprow = temprows?temprows[0]:cells;
		var colgroup = ["<colgroup>"];
		if(v.isRowBar){
			html.push(this._rowbartable);	
			html.push(">");
				
			var rowbar_null = true;
			var colgroup = ["<colgroup>"];
			if(v.isRowBar){	
				html.push(v.genarateColgroup());		
			} 
			colgroup.push("</colgroup>");
			html.push(colgroup.join(""));		
		} else {
			html.push("<div class='xgrid-table-layout'");
			var temp = isNaN(w)?"":"px";
			html.push("style='width:"+w+temp+"'>");
			html.push(this._table);
			html.push("style='width:100%'");
			html.push(">");
			
			for(var j=0;j<temprow.length; j++) {
				var cellIndex = j ,
					cell = temprow[cellIndex];
				if(!cell.hidden){
					colgroup.push("<col style='width:")
					if(dojo.isIE <= 7 && -1 == cell.getWidth().indexOf("%")){
						colgroup.push(cell.width-1);
					}else{
						colgroup.push(cell.getWidth());
					}
					colgroup.push("'>");
				}
			}
			colgroup.push("</colgroup>");
			html.push(colgroup.join(""));	
		}	
		
		html.push("<tbody>");
		if(v.isRowBar){
			html.push(v.generateHeader());
		} else {
			if(dojo.isIE){
				var s = ["<tr>"];
				for(var i =this.view.rowTable["cols"].length;i>0;i--){
					s.push("<td class=\"u-xgrid-hcell\" style=\"display:none;\">&nbsp;</td>");
				}
				s.push("</tr>");
				html.push(s.join(""));
			}
			for(var j=0, row; row=rows[j]; j++) {
				html.push('<tr>');
				for(var i=0, cell,cc, markup; (cell=row[i]); i++) {
					if(!cell.hidden){
						markup = this.generateCellMarkup(cell, true);
						this.isMulTitle = this.isMulTitle || cell.isMulTitle || false;
                        var cellLabel = '';
                        //构建表头  解决：动态表格E标识显示  2018-11-16  LD
                        if(cell.editor){
                            if(cell.label.indexOf('(E)') == -1){
                                cell.label += '(E)';
                            }
                            if(cell.editor.editorProps.required ){
                                // 可编辑表格必填项字段表格title上添加可编辑星号  2018-11-16  LD
                                if(cell.label.indexOf('*') == -1){
                                    cell.label = '<span class="grid-edit-required" style=" color:#ff0000; font-size:14px; position: relative; top: -5px; right: 5px;">*</span>' + cell.label
                                }
                            }
                        }
                       
						markup[5] = (cell.label || '');
						//设置排序列样式，包括主排序列和次排序列
						for(var k=0;k<sortInfo.length;k++){
							if(sortInfo[k] == cell){
								cc = cell.customClasses = [];
								cc.push(k==0?" u-xgrid-sort-primary " : " u-xgrid-sort-secondary");
								markup[1] = cc.join(' ');
								//var result = ["<nobr class='u-xgrid-text'><span"];
								var result = ["<nobr><span"];
								result.push(">");
								result.push(cell.label || '');
								result.push("</span>");
								//result.push("<span class='"+(cell.asc >0? "u-xgrid-sort-up":"u-xgrid-sort-down")+"'>&nbsp</span>");
                                result.push("<i class='"+(cell.asc >0 ? "iconfont icon-color-picker up active":"iconfont icon-color-picker up")+"'></i>");
                                result.push("<i class='"+(cell.asc >0 ? "iconfont icon-color-picker down":"iconfont icon-color-picker down active")+"'></i>");
								result.push("</nobr>");
								markup[5] = result.join("");

								break;
							}
						}
						var storageVal = {}
						 	//判断是否多表头 如果是多表头，存储到本地以帮助渲染rowbar  
							if((cell.colSpan && cell.colSpan > 1) || (cell.rowSpan && cell.rowSpan > 1) || cell.subrow!== 0 || this.isMulTitle){
								heightType = true;
                                storageVal.mulTitle = true;
                                window.localStorage.setItem(this.view.grid.id+'isMulTitle', JSON.stringify(storageVal));
							}
						var xgrid_hcell_height = heightType ?
							v.grid.getManager("RowManager").defaultMulTitleHeight : v.grid.getManager("RowManager").defaultHeaderHeight;
						cell.rowSpan && (xgrid_hcell_height = cell.rowSpan * xgrid_hcell_height);
						markup[5]="<div class='u-xgrid-htext'"+" style='height:"+
								(xgrid_hcell_height-1)+"px"+";line-height:"
								+xgrid_hcell_height+"px'"+">"+markup[5];
						var grid = v.grid;
						var toolBarIndividual = grid.getToolBar() && grid.getToolBar()['individual'];
						if(grid.menu || grid.filter || toolBarIndividual || grid.individual){
							markup[5] += "<div class='u-xgrid-menu'"+" style='height:"+
									(xgrid_hcell_height-1)+"px"+";line-height:"
									+xgrid_hcell_height+"px;";
							if(grid.getManager("MenuManager").alwaysShowMenu &&(toolBarIndividual || grid.individual 
																			    || ((grid.filter) && grid.getFilterManager()._validateMenu(cell)))){
								markup[5] += "visibility:visible'></div>";
							} else {
								markup[5] += "'></div>";
							}
						}
						markup[5] +="</div>";
						html.push(markup.join(''));
					}
				}
				html.push('</tr>');
			}
		}
		html.push('</tbody>');
		html.push('</table>');
		html.push('</div>');
		return html.join('');
	},
	decorateEvent: function(e) {
		this.baseDecorateEvent(e);
		e.rowIndex = -1;
		return (this.overRightResizeArea(e) && e.type == 'click')? false: true;
	},
	
	canResize: function(e) {
		return (!e.cellNode || e.cellNode.colSpan > 1 || e.cell.noresize)? false: (!e.cell.noresize);
	},
	overRightResizeArea: function(e) {
		if((e.view&&e.view.dialogs&&e.view.dialogs.length)|| (e.view&&e.view.thisDome&&e.view.thisDome.className&&e.view.thisDome.className.indexOf('dialog')>-1)&&e.view.thisDome.style&&e.view.thisDome.style&&e.view.thisDome.style.display=='block'){
			if (dojo.isFF) {
				return e.cellNode && (e.cellX >= e.cellNode.offsetWidth - this.overResizeWidth);
			}		
			else if (e.cellNode) {
				var node = this.view.scrollboxNode,
					scrollLeft = 0;
				while(node){
					scrollLeft+=node.scrollLeft;
					node=node.offsetParent;
				}
				this.cellX = this.getMousePosition(e, e.cellNode).x + scrollLeft;
				return e.cellNode && (this.cellX  >= e.cellNode.offsetWidth - this.overResizeWidth);
			} else {
				return false;
			}

		}else{
			
			return e.cellNode && (this.getMousePosition(e, e.cellNode).x -16>= e.cellNode.offsetWidth - this.overResizeWidth);
		
		}
		
	},
	getMousePosition: function(event,o) {
		var mousePosition={x:0,y:0};
		var top,left,obj=o;
		var ParentObj=obj;
		left=obj.offsetLeft;
		while(ParentObj=ParentObj.offsetParent){
			left+=ParentObj.offsetLeft;
		}
		mousePosition.x=event.clientX-left+document.body.scrollLeft;
		ParentObj=obj;
		top=obj.offsetTop;
		while(ParentObj=ParentObj.offsetParent){
			top+=ParentObj.offsetTop;
		}
		mousePosition.y=event.clientY-top+document.body.scrollTop;
		return mousePosition;
	},
	domousemove: function(e) {
		var c;
		if(this.canResize(e)){
			c = this.overRightResizeArea(e) ? 'col-resize'  : 'default';

		}
		
		e.sourceView.headerNode.style.cursor = c || ''; 
	},
	insertxGridInitData:function(e){
		if(!this.view.grid.LayoutManager['initData'] && !window.localStorage.getItem(this.view.grid.LayoutManager.WEB_PAGE_NAME+this.view.grid.getOriId()+'init')){			var initData=[];//存储原始数据过滤后的
			var initData=[];//存储原始数据过滤后的
			var layoutManager = this.view.grid.getManager('LayoutManager');
			var strucItems = [];
			dojo.forEach(layoutManager.cells,function(cell){
				var cellWidth = cell.width;
				if(typeof(cellWidth)=="number" && cell.percent
					|| (cell.percent && typeof(cellWidth)=="string" && cellWidth.indexOf("%")==-1)){
					cell.width = cellWidth+"%";
				}
				strucItems.push(cell)
			});
				
			var sequence = [];
			dojo.forEach(strucItems, function(item,index){
				sequence.push(index);
				
				
			});
			var structure = layoutManager.cells;
			var lockCellNum = 0;
			for(var i = 0 ; i<structure.length; ++i){
				if(structure[i].noscroll && !structure[i].isRowBar){
					lockCellNum = structure[i].rows[0].length;
				}
			}
			
			var islocked = 0;
			var isShow = true;
			for (var i = 0; i < sequence.length; i++) {
				if (i < lockCellNum) {
					islocked = 1;
				} else {
					islocked = 0;
				}
				if(strucItems[i].hidden){
					isShow = false;
				} else {
					isShow = true;
				}
				
				initData.push({lock: islocked, show: isShow, index: sequence[i], 'name': strucItems[i]['name'], width: strucItems[i].width,label:strucItems[i].label,dataType:strucItems[i].dataType,
				layoutIndex:strucItems[i].layoutIndex,mulTitleIndex:strucItems[i].mulTitleIndex,subrow:strucItems[i].subrow,userDynamicHeader:strucItems[i].userDynamicHeader,decoder:strucItems[i].decoder,dataType:strucItems[i].dataType});
			}
			 //存储原始数据
			this.view.grid.LayoutManager['initData'] = initData;
			//window.localStorage.setItem(unieap.WEB_PAGE_NAME+this.view.grid.getOriId()+'init',JSON.stringify(initData))
		}
	},
	domousedown: function(e) {
		this.insertxGridInitData();
		dojo.require("unieap.xgrid.core.drag");
		if(!unieap.xgrid.drag.dragging) {
			if(e.sourceView.headerNode.style.cursor == 'col-resize' && this.overRightResizeArea(e)) {
				this.beginColumnResize(e);
			}else if((this.view.grid.draggable == true) && 
				(e.cell && e.cell.draggable != false) && 
				!this.isMulTitle && 
				!this.overRightResizeArea(e))
			{
				this.beginAdjustColPosition(e);
			}
		}		
	},
	domouseup: function(e) {
		this.resizeHelper && this.resizeHelper.end();
		this.adjustHelper && this.adjustHelper.end();
	},
	
	domouseover: function(e) {
		this.view.onMouseOverHeader(e);
	},
	domouseout: function(e) {
		this.view.onMouseOutHeader(e);
	},
	
	dodblclick: function(e){
		if(e.sourceView.headerNode.style.cursor!='col-resize')
			return;
		var width;
		var maxlength = this._calStringWidth(String(e.cell.label))*7+14;
		var rowCount = this.view.grid.getManager("BindingManager").getRowCount();
		for(var i = 0; i< rowCount;i++){
			var value = e.cell._get(i);	//U_EAP00028681
			e.cell._format && (value = e.cell._format(value,i));
			value = this._getText(value);
			if(value!=null){
				width = this._calStringWidth(String(value))*7+14;
				if(width > maxlength)
					maxlength = width; 
			}
		}
		if(maxlength < this.minColWidth)
			maxlength = this.minColWidth;
		this.view.updateCellWidth(e.cell,maxlength);
		dojo.style(e.sourceView.headerNode,"cursor",'');
	},
	
	_getText: function(str){
		var result = str.match( /(>[^<]*<)+?/g);
		var resultStr = "";
		if(result){
			for(var i=result.length-1;i>=0;i--){
				resultStr += result[i].substring(1,result[i].length-1);
			}
		}
		else{
			resultStr = str;
		}
		return resultStr;
	},
	
	_calStringWidth: function(str){
	    return str.replace(/[^\x00-\xff]/g,"xx").length;
	},
	
	doclick: function(e) {
		if (new Date().getTime() < this.bogusClickTime) {
			dojo.stopEvent(e);
			return true;
		}
	},
			
	beginAdjustColPosition:function(e){
		
		//JSON去重
		//arr是要进行去重的json串
		//attribute是针对json串中哪个属性进行去重
		/*function _unique(arr,attribute){
		     var new_arr=[];
		     var json_arr=[];
		     for(var i=0; i<arr.length; i++){
		         if(new_arr.indexOf(arr[i][attribute]) ==-1){    //  -1代表没有找到
		             new_arr.push(arr[i][attribute]);   //如果没有找到就把这个name放到arr里面，以便下次循环时用
		             json_arr.push(arr[i]);
		         } else{
		         }
		     }
		     return json_arr;
		 }
		
		var arr = _unique(this.view.grid.LayoutManager.cells,'label');
		this.view.grid.LayoutManager.initData=arr;
		*/
		dojo.stopEvent(e);
		var menu = this.view.grid.getManager("MenuManager").menu;
		if(menu && menu.isShowingNow){
			menu.isShowingNow = false;
			dijit.popup.close(menu);
		}
		var drag = {
			view: e.sourceView,
			node: e.cellNode,
			index: e.cellIndex,
			w: e.cellNode.clientWidth,
			flag: false,
			clientX: e.clientX,
			innerHTML: e.target.innerHTML
		};
		var obj = {
			"inElement": e.cellNode,
			"inOnDrag": dojo.hitch(this, 'doAdjustColumn', drag),
			"inOnEnd": dojo.hitch(this, 'endAdjustColumn', drag),
			"inOnRelease": dojo.hitch(this, 'domouseup'),
			"inEvent": e,
			"inOnStart": null
		};
		unieap.xgrid.drag.start(obj);
	},
	
	beginColumnResize: function(e) {
		dojo.stopEvent(e);
		var menuManager = this.view.grid.getManager("MenuManager");
		if(menuManager && menuManager.menu.isShowingNow){
			menuManager.menu.isShowingNow = false;
			dijit.popup.close(menuManager.menu);
		}
		var drag = {
			view: e.sourceView,
			node: e.cellNode,
			index: e.cellIndex,
			w: e.cellNode.clientWidth
		};
		this.oldWidth = e.cellNode.offsetWidth;
		this.getResizeHelper().begin(
			e.cellNode.offsetWidth           //改变宽度的单元的原宽度
			+ e.cellNode.offsetLeft          //本单元相对table中的偏移量
			+ this.view.domNode.offsetLeft   //这个view前面视图的宽度
			+ e.cellNode.offsetParent.parentNode.offsetLeft   //本table中前面被覆盖的单元格的宽度
		);
		var obj = {
			"inElement": e.cellNode,
			"inOnDrag": dojo.hitch(this, 'doResizeColumn', drag),
			"inOnEnd": dojo.hitch(this, 'endResizeColumn', drag),
			"inOnRelease": dojo.hitch(this, 'domouseup'),
			"inEvent": e,
			"inOnStart": null
		};
		unieap.xgrid.drag.start(obj);
	},
	
	getResizeHelper: function() {
		return (!this.resizeHelper)?(this.resizeHelper = new unieap.xgrid.resizeHelper(this.view))
			: this.resizeHelper;
	},
	
	getAdjustHelper: function() {
		return(!this.adjustHelper)? (this.adjustHelper = new unieap.xgrid.adjustHelper(this.view))
			: this.adjustHelper;
	},
	//调整列位置准备工作，计算目标位置是否正确
	doAdjustColumn: function(inDrag, inEvent){
		//不可以没有非锁定列，当非锁定列只有一列时，不允许向锁定列中拖拽
		if(!this.view.noscroll && (1 == this.view.cells.length)){
			 return false; 
		}
		//第一次mousemove时，调用begin方法
		if(!inDrag.flag){
			var text;
			if(dojo.isIE){
				text = inDrag.node.innerText;
			} else {
				text = inDrag.node.textContent;
			}
			this.getAdjustHelper().begin(inDrag.clientX, text);
			inDrag.flag = true;
		}
		// var jsonArr = this.view.grid.LayoutManager.cells;
		
	    var getIdx = dojo.attr(inEvent.target,"idx");
	    var temp = getIdx?getIdx:dojo.attr(inEvent.target.parentNode,"idx");
		this.getAdjustHelper().resize(inEvent.clientX);
		//鼠标移动出xgrid或者移动到另外一个xgrid中时，不可以调整列位置
		var offsetParent = inEvent.target.parentNode.offsetParent;
		while(offsetParent){
			if(dojo.hasClass(offsetParent,"u-xgrid")){
				break;
			}else{
				offsetParent = offsetParent.offsetParent;
			}
		}
		//不是同一个grid，返回false
		if(null == offsetParent || inDrag.view.grid.id != offsetParent.id){
			this.noAdjust();
			return false;
		}
		if(!temp){//如果鼠标移动到header外部，不可以调整列位置
			this.noAdjust();
			return false;
		}
		//鼠标还在同一个header内
		if(inDrag.index == temp){
			this.noAdjust();
			return false;
		}else{
			if(8 == dojo.isIE){
				var offsetX = inEvent.x;
				offsetX++;
				if(offsetX > inEvent.target.offsetWidth) {
					this.noAdjust();
					return false;
				}
			}else{
				var offsetX = this.adjustGetX(inEvent)-1;
			}
	    	//左侧第一个节点,但不是锁定和非锁定的临界,如果是锁定和非锁定列的临界，那么相邻的列也是可以调整位置，否则，鼠标需要过下列的一半后才可以调整
			if((1 == inDrag.index - temp) && (inDrag.index != this.getAdjustHelper().lockingCellNo())){ 
				if(offsetX > inEvent.target.offsetWidth/2){
					this.noAdjust();
					return false;
				}
			}else if((1 == temp - inDrag.index) && (temp != this.getAdjustHelper().lockingCellNo())){  //右侧第一个节点
				if(offsetX < inEvent.target.offsetWidth/2){
					this.noAdjust();
					return false;
				}
			}
			this.yesAdjust(inEvent,offsetX);
		}
	},
	
	endAdjustColumn: function(inDrag){
		//end后，将inDrag设置为false，以便下次第一次mousemove调用helper的begin方法
		inDrag.flag = false;
		this.getAdjustHelper().end();
		if(dojo.hasClass(this.getAdjustHelper().helperNode,"u-xgrid-adjust-yes")){
			var cellIndex = this.getCellNodeIndex(inDrag.node);
			var num = this.view.noscroll?cellIndex:cellIndex-this.getAdjustHelper().lockingColNo;
			var cell = this.view.structure.rows[0][num];
				cell && setTimeout(dojo.hitch(inDrag.view, "updateColumnPosition", cell,this.getAdjustHelper().toCol,this.getAdjustHelper().lockingColNo,this.getAdjustHelper().tuning), 50);
		}
		
	},
	
	adjustGetX: function(e){
		var e=window.event || e,
			posX=(e.offsetX==undefined) ? this.getOffset(e).offsetX : e.offsetX ;
		return posX;
	},
	
	getOffset: function(e){
		var target = e.target;
		if (target.offsetLeft == undefined){
			target = target.parentNode;
		}
		var pageCoord = this.getPageCoord(target);
		var eventCoord =
			{     
				x: window.pageXOffset + e.clientX,
				y: window.pageYOffset + e.clientY
			};
		var offset =
			{
				offsetX: eventCoord.x - pageCoord.x,
				offsetY: eventCoord.y - pageCoord.y
			};
		return offset;
	},
	
	getPageCoord: function(element){
		var coord = {x: 0, y: 0};
		while (element){
			coord.x += element.offsetLeft;
			coord.y += element.offsetTop;
			element = element.offsetParent;
		}
		return coord;
	},
	
	yesAdjust: function(inEvent,offsetX){
		this.getAdjustHelper().adjust(inEvent,offsetX);
	},
	
	noAdjust: function(){
		this.getAdjustHelper().noadjust();
	},
	
	doResizeColumn: function(inDrag, inEvent) {
		var w = inDrag.w + inEvent.deltaX,view=inDrag.view,grid=view.grid;
		
		var offsetParent = inEvent.target.parentNode.offsetParent;
		while(offsetParent){
			if(dojo.hasClass(offsetParent,"u-xgrid")){
				break;
			}else{
				offsetParent = offsetParent.offsetParent;
			}
		}
		//不是同一个grid，返回false
		if(null == offsetParent || inDrag.view.grid.id != offsetParent.id){
			return;
		}
		
		if(w >= this.minColWidth) {
			this.getResizeHelper().resize(inEvent.deltaX);
			this.rawWidth = w;
		}
		//放置锁定行拖到grid的边界外
		if(view.noscroll){
			var hasRowBar=grid.getManager("ViewManager").hasRowBar(),
				gridWidth=grid.domNode.offsetWidth,
				queryRs=dojo.query(".u-xgrid-header",grid.header),
				fixeNode;
			//判断是否有rowbar,有则减去rowbar的宽度
			if(hasRowBar){
				var rowBarNode=queryRs[0];
				fixedNode=queryRs[1];
				gridWidth=gridWidth-rowBarNode.offsetWidth;
			}else{
				fixedNode=queryRs[0];
			}
			//减去当前单元格之前的单元格的宽度
			gridWidth=gridWidth-this._getFixedNodeWidth(inDrag.node,fixedNode);
			this.rawWidth>=gridWidth&&(this.rawWidth=gridWidth);
        }
	},
	
	_getFixedNodeWidth:function(cellNode,fixedNode){
		var rs=dojo.query(".u-grid-cell",fixedNode),width=0;
		for(var i=0,l=rs.length;i<l;i++){
			if(rs[i]===cellNode) break;
			width+=(rs[i].offsetWidth+1);
		}
		return width;
	},
	
	endResizeColumn: function(inDrag) {
		this.getResizeHelper().end();
		this.bogusClickTime = new Date().getTime() + 30;
		if (this.rawWidth > this.minColWidth && this.rawWidth != this.oldWidth) {
			var cellIndex = this.getCellNodeIndex(inDrag.node);
			var layout = this.view.grid.getManager("LayoutManager"); 
			var cell = cellIndex >= 0 ? layout.getCell(cellIndex) : null;
			cell && setTimeout(dojo.hitch(inDrag.view, "updateCellWidth", cell,this.rawWidth), 50);
		}
	}
});
dojo.declare("unieap.xgrid.view.ContentBuilder", unieap.xgrid.view.Builder, {
	decorateEvent: function(e) {
		e.rowNode = this.findRowTarget(e.target);
		if(!e.rowNode) {return false};
		e.rowIndex = e.rowNode.getAttribute("gridrowindex");
		this.baseDecorateEvent(e);
		return true;
	},
	
	generateHtml: function() {
		var html = [],
			v = this.view,
			cells = v.cells,
			snapshot = v.snapshot,
			binding = v.grid.getBinding(),
			// rowData = v.grid.getBinding().getRowData(),
			showCells = snapshot.showCells || cells.length;
			// if(binding['store'].recordCount == 0 && binding['store']['rowSet']['primary'].length < 2 ){ //防止后台传null的脏数据过来 污染前台表格渲染空行
			// 	v.snapshot.showRows = 0
			// }

		//如果生成关于多标题，contentStructure存在，tableWidth按照contentStructure获得
		if(!v.isRowBar){
		var temprows = v.contentStructure.rows,
			temprow = temprows[0];
		}
		var tableWidth = v.getRealWidth(snapshot.beginCellIndex,showCells);
		var colgroup = ["<colgroup>"];
		if(v.isRowBar){
			html.push(this._rowbartable);
			html.push("style='");
			html.push(snapshot.lastRow && "bottom:0;" || "");
			html.push(snapshot.lastCell && "right:0;" || "");
			html.push("'>");	
		} else {
			html.push("<div class='xgrid-table-layout '");
			var temp = isNaN(tableWidth)?"":"px";
			html.push("style='width:"+tableWidth+temp+";");
			html.push(snapshot.lastRow && "bottom:0px;" || "");
			html.push(snapshot.lastCell && "right:0;" || "");
			html.push("'>");
			html.push(this._table);
			html.push("style='width:100%;");
			html.push(snapshot.lastRow && "bottom:0px;" || "");
			html.push("'>");
		}
		//构造colgroup
		var width;
		if(v.isRowBar){
			html.push(v.genarateColgroup());	
		}else{
			// 用这个构造colgroup可以避免多级标题后面继续有跨行的标题宽度设置不正确
			//html.push(this.view.rowTable["colgroup"]);
			var unShowNum = 0;	
			for(var j=0;j<showCells; j++) {
				var cellIndex = snapshot.beginCellIndex + j + unShowNum ,
					cell = temprow[cellIndex];
					//cell = cells[cellIndex];
				if(cell){
					if(!cell.hidden){
						colgroup.push("<col style='width:")
						colgroup.push(cell.getWidth());
						colgroup.push("'>");
					} else {
						unShowNum++;
						j--;
					}
				}
			}
			colgroup.push("</colgroup>");
			html.push(colgroup.join(""));	
		}
		html.push("<tbody>");
		var markDirty = this.view.grid.get("ViewManager").markDirty;
		var gridId = '#'+v.grid.id;
		dojo.query(gridId).removeClass('xgridNoFooter');
		dojo.query(gridId).removeClass('xgrid-contant-bjimg');
		if(!v.isRowBar && snapshot.showRows == 0){
			dojo.query(gridId).addClass('xgrid-contant-bjimg');
            // html.unshift("<div class='xgrid-contant-bjimg  '"+" style='width: 100%;height:"+(snapshot.viewContentHeight)+"px"
            // +";line-height:"+snapshot.viewContentHeight+"px'"+">"+"</div>");
          dojo.query(gridId).addClass('xgridNoFooter');
		}
  
        for(var j=0;j< snapshot.showRows ; j++) {
			if(v.isRowBar){
				// if(snapshot.beginRowIndex + snapshot.showRows === snapshot.beginRowIndex+j ){
                //     html.push(v.generateContent(snapshot.beginRowIndex+j,'tr'));
				// }else{
                    html.push(v.generateContent(snapshot.beginRowIndex+j));
                // }
			} else {
				var rows = v.contentStructure.rows,
				row = rows[0];
				var unShowNum = 0;
				var rowIndex = snapshot.beginRowIndex + j;
				html.push('<tr class="'+(rowIndex%2?"u-xgrid-odd":"u-xgrid-even")+'" gridrowindex="'+(rowIndex)+'">');
				var rowItem = new unieap.ds.Row(this.view.grid.getBinding().getRowSet(),this.view.grid.getBinding().getRow(rowIndex));;
				for(var i=0, cell, m, cc; i<showCells; i++) {
				//for(var i=0, cell, m, cc; i<cells.length; i++) {
					var cellIndex = i+snapshot.beginCellIndex+unShowNum;
					//cell = cells[cellIndex];
					cell = row[cellIndex];
					if(cell){
						if(!cell.hidden){
							m = this.generateCellMarkup(cell, false), cc = cell.customClasses = [];
							var value = cell.format(rowIndex);
							if(cell.changeStyle){
								m = cell._changeStyle(rowIndex,m,cell.mulTitleIndex);
							}
							if(cell.color_v&&value&&value.indexOf('<a')>-1){//如果是a标签原来添加了color_v的class 重新在增加回来
								value= cell._addAClass(rowIndex,value,cell.mulTitleIndex);
							}
							nodeHeight = v.grid.getManager("RowManager").defaultRowHeight;
							nodeHeight += 'px';
							nodeLineHeight = '28px'
							//判断是否设置了表格自动高度  lind
							if(v.grid.class.indexOf('xgridCellAutoHeight')>-1){
								nodeHeight = '100%;white-space:break-spaces';
							}
							// 判断是否行合并value=""为行合并
							if(value === ""){
								value = '&nbsp;';
			            		m[5]="<div class='u-xgrid-text ' style='height:100%'><div class='gridBorderNone'></div><div class='u-xgrid-cell'"+" style='height:"+(nodeHeight)+""
								+";line-height:"+nodeLineHeight+"'"+">"+value+"</div></div>";
							}else{
								m[5]="<div class='u-xgrid-text ' style='height:100%'><div class='u-xgrid-cell'"+" style='height:"+(nodeHeight)+""
								+";line-height:"+nodeLineHeight+"'"+">"+value+"</div></div>";
							}
							// if(value === ""){
							// 	value = '&nbsp;';
			            	// 	m[5]="<div class='u-xgrid-text '><div class='gridBorderNone'></div><div class='u-xgrid-cell'"+" style='height:"+(nodeHeight)+"px"
							// 	+";line-height:"+nodeHeight+"px'"+">"+value+"</div></div>";
							// }else{
							// 	m[5]="<div class='u-xgrid-text '><div class='u-xgrid-cell'"+" style='height:"+(nodeHeight)+"px"
							// 	+";line-height:"+nodeHeight+"px'"+">"+value+"</div></div>";
							// }
							
//							m[5]="<div class='u-xgrid-text'><div class='u-xgrid-cell'"+" style='height:"+(nodeHeight)+"px"
//									+";line-height:"+nodeHeight+"px'"+">"+value+"</div></div>";
							if(markDirty){
								var index=m[5].lastIndexOf("</div>");
								if (cell["name"]&& rowItem && rowItem.data && rowItem.isItemChanged(cell["name"])){//U_EAP00028153
									m[5] = m[5].substring(0,index) + "<div class=\"u-xgrid-value-changed\"></div></div>";
								}
								else{
									m[5] = m[5].substring(0,index) + "<div class=\"u-xgrid-value-changed \" style=\"display:none\"></div></div>";
								}
							}
							html.push(m.join(''));
						} else {
							unShowNum++;
							i--;
						}
					}
				}
				html.push('</tr>');
			}
		}
		html.push('</tbody>');
		html.push('</table>');
		html.push('</div>');
		return html.join('');
	},
	
	getRowEdit: function(index) {
		var view = this.view;
		if(!view.grid.rowEdit){
			dojo.require("unieap.xgrid.core.RowEdit");
			if(typeof index == 'number'){
				view.grid.rowEdit = new unieap.xgrid.RowEdit({view:view,setEditting:true});
				view.grid.getRowEditManager().setEdit(index);
			}else{
				view.grid.rowEdit = new unieap.xgrid.RowEdit({view:view});
			}
			if(view.grid.rowEdit.unableEdit){
				view.grid.rowEdit = null;
			}
		} 
		return view.grid.rowEdit;
	},
	
	doclick: function(e){
		// var rowEditManager = this.view.grid.getRowEditManager();
		// var rowEdit = this.view.grid.rowEdit;
		// var cell =  this.view.grid.LayoutManager.getCell(Number(e.rowIndex))
		// // if(rowEdit && rowEdit.editing && !dojo.hasClass(e.target,"u-xgrid-viewContent") &&
		// // 	rowEditManager.onBeforeEdit && unieap.fireEvent4Widget(rowEditManager,this.view.grid, rowEditManager.onBeforeEdit, [e.rowIndex,cell])
		// // 	){
		// // 	rowEdit.initEdit(rowEditManager.animate);
		// // 	var getIdx = dojo.attr(e.target,"idx"),
		// // 		cellIndex = getIdx?getIdx:dojo.attr(e.target.parentNode,"idx");
		// // 	rowEditManager.setCellIndex(cellIndex);
		// // 	dojo.stopEvent(e);
		// // }
		// if(rowEditManager.editType == 'readonly'){ return };//LD  增加判断 判断表格是否是readonly  如果是 点击事件无效
		// if(rowEditManager && this.view.grid.getManager("ViewManager").autoRender && 
		// 	rowEditManager.onBeforeEdit && unieap.fireEvent4Widget(rowEditManager,this.view.grid, rowEditManager.onBeforeEdit, [e.rowIndex,cell])
		// 	){
		// 	this.getRowEdit();
		// 	var getIdx = dojo.attr(e.target,"idx"),
		// 		cellIndex = getIdx?getIdx:dojo.attr(e.target.parentNode,"idx")?dojo.attr(e.target.parentNode,"idx"):dojo.attr(e.target.parentNode.parentNode,"idx");
		// 	rowEditManager.setCellIndex(cellIndex);
		// }
		var rowEditManager = this.view.grid.getRowEditManager();
		var rowEdit = this.view.grid.rowEdit;
		
		//取消可编辑表格切换行时编辑行移动,改为关闭
			if(rowEdit != null && rowEdit.editing){
				rowEditManager.apply();
				dojo.stopEvent(e);
				return;
			}
			if(rowEditManager.editType == 'readonly'){ return };//LD  增加判断 判断表格是否是readonly  如果是 点击事件无效
		if(rowEdit && rowEdit.editing && !dojo.hasClass(e.target,"u-xgrid-viewContent") &&
			rowEditManager.onBeforeEdit && unieap.fireEvent4Widget(rowEditManager,this.view.grid, rowEditManager.onBeforeEdit, [e.rowIndex])
			){
			rowEdit.initEdit(rowEditManager.animate);
			var getIdx = dojo.attr(e.target,"idx"),
				cellIndex = getIdx?getIdx:dojo.attr(e.target.parentNode,"idx");
			rowEditManager.setCellIndex(cellIndex);
			dojo.stopEvent(e);
		}
		
	
		if(e.rowIndex == null) return;
		var rowEditManager = this.view.grid.getRowEditManager();
		if(rowEditManager && this.view.grid.getManager("ViewManager").autoRender && 
			rowEditManager.onBeforeEdit && unieap.fireEvent4Widget(rowEditManager,this.view.grid, rowEditManager.onBeforeEdit, [e.rowIndex])
			){
			this.getRowEdit();
			var getIdx = dojo.attr(e.target,"idx"),
				cellIndex = getIdx?getIdx:dojo.attr(e.target.parentNode,"idx")?dojo.attr(e.target.parentNode,"idx"):dojo.attr(e.target.parentNode.parentNode,"idx");
			rowEditManager.setCellIndex(cellIndex);
		}
	},
	
	dodblclick: function(e){
		if(e.rowIndex == null) return;
		var rowEditManager = this.view.grid.getRowEditManager();
		var cell =  this.view.grid.LayoutManager.getCell(Number(e.rowIndex));
        if(rowEditManager.editType == 'readonly'){ return };//LD  增加判断 判断表格是否是readonly  如果是 点击事件无效
		if(rowEditManager && this.view.grid.getManager("ViewManager").autoRender && 
			rowEditManager.onBeforeEdit && unieap.fireEvent4Widget(rowEditManager,this.view.grid, rowEditManager.onBeforeEdit, [e.rowIndex,cell])
			){
			this.getRowEdit();
			var getIdx = dojo.attr(e.target,"idx"),
				cellIndex = getIdx?getIdx:dojo.attr(e.target.parentNode,"idx")?dojo.attr(e.target.parentNode,"idx"):dojo.attr(e.target.parentNode.parentNode,"idx");
			rowEditManager.setCellIndex(cellIndex);
		}
	}
});
dojo.declare("unieap.xgrid.view.TotalBuilder", unieap.xgrid.view.Builder, {	
	generateHtml : function() {
		var html = [], rows = this.view.structure.rows,w =this.view.getRealWidth();
		var sortInfo = this.view.grid.getSortInfo();
		var v = this.view,
			cells = v.cells,
			snapshot = v.snapshot,
			showCells = snapshot.showCells || cells.length;
		var temprows = v.contentStructure.rows,
			temprow = temprows?temprows[0]:cells;
		if(!snapshot.rowCount){
			var BindingManager = this.view.grid.getManager("BindingManager");
			if(BindingManager){
				snapshot.rowCount = BindingManager.getRowCount();
			}
		}
		var colgroup = ["<colgroup>"];
		if(v.isRowBar){
			html.push(this._rowbartable);	
			html.push(">");
			var rowbar_null = true;
			var colgroup = ["<colgroup>"];
			if(v.isRowBar){	
				html.push(v.genarateColgroup());		
			} 
			colgroup.push("</colgroup>");
			html.push(colgroup.join(""));		
		} else {
			html.push("<div class='xgrid-table-layout  xgridTotalNode'");
			var temp = isNaN(w)?"":"px";
			if(snapshot.lastCell){
				html.push("style='width:"+w+temp+";right:0;left:auto'>");
			}else{
				if(v.totalContentNode.firstChild && v.totalContentNode.firstChild.offsetLeft){
					var scrollLeft = v.totalContentNode.firstChild.offsetLeft;
					html.push("style='width:"+w+temp+";right:auto;left:"+scrollLeft+temp+"'>");
				}else{
					html.push("style='width:"+w+temp+";right:auto;left:0'>");
				}
			}
			html.push(this._table);
			html.push("style='width:100%'");
			html.push(">");
			for(var j=0;j<temprow.length; j++) {
				var cellIndex = j ,
					cell = temprow[cellIndex];
					//防止表格有默认宽度1px的空白列渲染边框
				if( parseInt(cell.width) < 5 ){
					if(cell.classes&&cell.classes.indexOf('xgridCellBorderRightNone') == -1){
						cell.classes.push('xgridCellBorderRightNone')
					}
				}
				if(!cell.hidden){
					colgroup.push("<col style='width:")
					if(dojo.isIE <= 7 && -1 == cell.getWidth().indexOf("%")){
						colgroup.push(cell.width-1);
					}else{
						colgroup.push(cell.getWidth());
					}
					colgroup.push("'>");
				}
			}
			colgroup.push("</colgroup>");
			html.push(colgroup.join(""));	
		}	
		html.push("<tbody>");
		
		var markDirty = this.view.grid.get("ViewManager").markDirty;
	
		if(v.isRowBar && snapshot.rowCount > 0){ //如果没有数据 合计行也不渲染
			nodeHeight = v.grid.getManager("RowManager").defaultRowHeight;
			var trb = '<tr><td>';
			var tds = '';
			if(v.grid&&v.grid.SelectionManager){
				tds = "<td><div class='u-xgrid-rowbar  xgridTotalRowBar'"+" style='height:"+(nodeHeight-1)+"px"
				+";line-height:"+(nodeHeight-1)+"px;border-left:none;'"+"><div class='u-xgrid-rowbar-cell'></div></div></td>"
			}
			var sumType = '小计';
			if(this.view.grid&&this.view.grid.SetColSumData){
				sumType = '合计';
			}
			trb += "<div class='u-xgrid-rowbar  xgridTotalRowBar'"+" style='height:"+(nodeHeight-1)+"px"
			+";line-height:"+(nodeHeight-1)+"px;'"+"><div class='u-xgrid-rowbar-cell'>"+sumType+"</div></div>";
			trb += '</td>';
			trb += tds;
			trb += '</tr>';
			html.push(trb);
		
		}else{
			html.push('<tr>');
			var cellTotals = [];
			var nbspArr = [];
			cells = temprow;
			for(var j=0;j<snapshot.rowCount; j++) {
				var rows = v.contentStructure.rows,
				row = rows[0];
				var rowIndex = j;
				var rowItem = new unieap.ds.Row(this.view.grid.getBinding().getRowSet(),this.view.grid.getBinding().getRow(rowIndex));
//				for(var i=0, cell, m, cc; i<showCells; i++) {
				for(var i=0, cell, m, cc; i<cells.length; i++) {
					var cellIndex = i;
					cell = cells[cellIndex];
					if(cell){
						if(!cell.hidden){
							var value = cell.format(rowIndex);
							if(cell.dataType == "number"){
								if(typeof(value) === 'string' && value.indexOf(',')>0){value = value.split(',').join('')}//防止需要计算的数字格式是1,123.00导致计算失败
								if(value && typeof(value) == "string" && value.indexOf("<a") > -1){
									var firstMarkNum = value.indexOf(">");
									firstMarkNum = firstMarkNum + 1;
									var lastMarkNum = value.length - 4;
									value = value.substring(firstMarkNum,lastMarkNum);
									if(value.indexOf(",") > -1){
										value = dojo.number.parse(value, {pattern: '#.00'});
									}
									if(value != ''){
										value = parseFloat(value);
									}
								}
								if(!nbspArr[i]){
									nbspArr[i] = [];
								}
								if(value == '' || value == '&nbsp;'){
									var old_value = value;
									value = 0;
								}else{
									if(!isNaN(parseFloat(value))){
										value = String(value);
										if(value.indexOf(",") == -1){
											value = dojo.number.format(value, {pattern: '#,###.00'});
										}
										value = dojo.number.parse(value, {pattern: '#.00'});
										value = Number(value);
									}else{
										value = parseFloat(value);
									}
								}
								if(!isNaN(value)){
									if(cellTotals.length > i){
										if(typeof cellTotals[i] == 'number'){
											cellTotals[i] += value;
										}
									}else{
										if(typeof value == 'number'){
											cellTotals[i] = value;
										}else{
											cellTotals[i] = '';
										}
									}
									if(old_value){
										nbspArr[i].push(old_value);
										old_value = null;
									}
								}else{
									cellTotals[i] = '';
								}
								//判断此列是否进行计算
								if(cell.headerClass && cell.headerClass.indexOf('grid-total-nocalculation') > -1){
									cellTotals[i] = '';
								}
							}else{
								cellTotals[i] = '';
							}
							if(j == snapshot.rowCount-1){
								m = this.generateCellMarkup(cell, false), cc = cell.customClasses = [];
								/*  注释 不设置合计行样式解决最后一行设置样式合计也跟着改了的问题*/
//								if(cell.changeStyle){
//									m = cell._changeStyle(rowIndex,m,cell.mulTitleIndex);
//								}
								nodeHeight = v.grid.getManager("RowManager").defaultRowHeight;
								
								var stitle = '';

								
								
								//判断是否此列所有的值都是空格或空值，确定是否显示0
								if(nbspArr[i] && nbspArr[i].length>0 && nbspArr[i].length == snapshot.rowCount){
									cellTotals[i] = '';
								}	
								
								if(cellTotals[i] != ''){
									cellTotals[i] = dojo.number.format(cellTotals[i], {pattern: '#,###.00'});
								}
								if(this.view.grid&&this.view.grid.SetColSumData){ //如果有设合计
									var SetColSumData = this.view.grid.SetColSumData;
									for(var q=0;q<SetColSumData.length;q++){
										if(SetColSumData[q].name == cell.name){
											cellTotals[i] = SetColSumData[q].value
										}
									}
								}
									m[5]="<div class='u-xgrid-text '><div "+stitle+" class='u-xgrid-cell '"+" style='height:"+(nodeHeight)+"px"
									+";line-height:"+nodeHeight+"px'"+"><span id="+this.view.grid.id+"_"+ cell.name +">"+cellTotals[i]+"</span></div></div>";
								
								

								if(markDirty){
									var index=m[5].lastIndexOf("</div>");
									if (cellTotals[i] != ''){
										m[5] = m[5].substring(0,index) + "<div class=\"u-xgrid-value-changed\"></div></div>";
									}
									else{
										m[5] = m[5].substring(0,index) + "<div class=\"u-xgrid-value-changed\" style=\"display:none\"></div></div>";
									}
								}
								html.push(m.join(''));
							}
						}
					}
				}
			}
			html.push('</tr>');
		}
		html.push('</tbody>');
		html.push('</table>');
		html.push('</div>');
		return html.join('');
	},
	
	decorateEvent: function(e) {
		e.rowNode = this.findRowTarget(e.target);
		if(!e.rowNode) {return false};
		e.rowIndex = e.rowNode.getAttribute("gridrowindex");
		this.baseDecorateEvent(e);
		return true;
	},
	
	getRowEdit: function(index) {
		var view = this.view;
		if(!view.grid.rowEdit){
			dojo.require("unieap.xgrid.core.RowEdit");
			if(typeof index == 'number'){
				view.grid.rowEdit = new unieap.xgrid.RowEdit({view:view,setEditting:true});
				view.grid.getRowEditManager().setEdit(index);
			}else{
				view.grid.rowEdit = new unieap.xgrid.RowEdit({view:view});
			}
			if(view.grid.rowEdit.unableEdit){
				view.grid.rowEdit = null;
			}
		} 
		return view.grid.rowEdit;
	},
	
	doclick: function(e){

		var rowEditManager = this.view.grid.getRowEditManager();
		var rowEdit = this.view.grid.rowEdit;
		
		//取消可编辑表格切换行时编辑行移动,改为关闭
	
			if(rowEdit != null && rowEdit.editing){
				rowEditManager.apply();
				dojo.stopEvent(e);
				return;
			}
	
		
		if(rowEdit && rowEdit.editing && !dojo.hasClass(e.target,"u-xgrid-totalContent") &&
			rowEditManager.onBeforeEdit && unieap.fireEvent4Widget(rowEditManager,this.view.grid, rowEditManager.onBeforeEdit, [e.rowIndex])
			){
			rowEdit.initEdit(rowEditManager.animate);
			var getIdx = dojo.attr(e.target,"idx"),
				cellIndex = getIdx?getIdx:dojo.attr(e.target.parentNode,"idx");
			rowEditManager.setCellIndex(cellIndex);
			dojo.stopEvent(e);
		}
		
		
		/**
		 * JXin 行单击可编辑事件
		 * unieap.widget.grid.distinguishDblclick = true;
		 * 2017-8-8 15:24:03
		 */
		//JXin 判断当前grid distinguishDblclick属性是否为true
		
		if(e.rowIndex == null) return;
		var rowEditManager = this.view.grid.getRowEditManager();
		if(rowEditManager && this.view.grid.getManager("ViewManager").autoRender && 
			rowEditManager.onBeforeEdit && unieap.fireEvent4Widget(rowEditManager,this.view.grid, rowEditManager.onBeforeEdit, [e.rowIndex])
			){
			this.getRowEdit();
			var getIdx = dojo.attr(e.target,"idx"),
				cellIndex = getIdx?getIdx:dojo.attr(e.target.parentNode,"idx")?dojo.attr(e.target.parentNode,"idx"):dojo.attr(e.target.parentNode.parentNode,"idx");
			rowEditManager.setCellIndex(cellIndex);
		}
	
	},
	
	dodblclick: function(e){
		if(e.rowIndex == null) return;
		var rowEditManager = this.view.grid.getRowEditManager();
		if(rowEditManager && this.view.grid.getManager("ViewManager").autoRender && 
			rowEditManager.onBeforeEdit && unieap.fireEvent4Widget(rowEditManager,this.view.grid, rowEditManager.onBeforeEdit, [e.rowIndex])
			){
			this.getRowEdit();
			var getIdx = dojo.attr(e.target,"idx"),
				cellIndex = getIdx?getIdx:dojo.attr(e.target.parentNode,"idx")?dojo.attr(e.target.parentNode,"idx"):dojo.attr(e.target.parentNode.parentNode,"idx");
			rowEditManager.setCellIndex(cellIndex);
		}
	}
});


dojo.declare("unieap.xgrid.resizeHelper", null, {
	view: null,
	helperNode: null,
	positionX: 5,
	
	constructor: function(inView) {
		this.view = inView;
		this.helperNode = dojo.create("div");
		dojo.addClass(this.helperNode,"u-xgrid-resize-proxy");
		dojo.style(this.helperNode, "display", "none");
	},
	
	begin: function(inPositionX) {
		this.positionX = inPositionX;

        // if(this.positionX == this.view.snapshot.gridWidth || this.view.snapshot.gridWidth - this.positionX < 5){
			// return
        // }
		dojo.place(this.helperNode,this.view.grid.domNode);
		dojo.style(this.helperNode, "display", "block");
		dojo.style(this.helperNode, "left", this.positionX + "px");
		var height = this.view.headerNode.offsetHeight + this.view.contentNode.offsetHeight;
		var data = this.view.grid.getBinding().getLockedRowData();
		height += this.view.rowHeight*data.length;
		dojo.style(this.helperNode, "height", height+"px");
	},
	
	resize: function(deltaX) {
        dojo.style(this.helperNode, "left", (this.positionX + deltaX) + "px");
	},
	
	end: function() {
		dojo.style(this.helperNode, "display", "none");
	}
	
});

dojo.declare("unieap.xgrid.adjustHelper", null, {
	view: null,
	helperNode: null,
	positionX: 15,
	toCol: 0,
	tuning: 0,
	
	constructor: function(inView) {
		this.view = inView;
		this.lockingColNo = 0;
		this.tuning = 0;
		this.helperNode = dojo.create("div");
		dojo.addClass(this.helperNode,"u-xgrid-adjust-proxy");
		dojo.style(this.helperNode, "display", "none");
		dojo.style(this.helperNode, "overflow", "hidden");
		//创建定位图标
		this.moveTopNode = dojo.create("div");
		this.moveBottomNode = dojo.create("div");
		dojo.addClass(this.moveTopNode,"move-top");
		dojo.addClass(this.moveBottomNode,"move-bottom");
	},
	
	begin: function(inPositionX,textHtml) {
		this.positionX = inPositionX+10;
		this.helperNode.innerHTML = textHtml;
		dojo.place(this.helperNode,this.view.grid.domNode);
		dojo.style(this.helperNode, "display", "block");
		dojo.style(this.helperNode, "left", this.positionX + "px");
		//添加定位图标
		dojo.place(this.moveTopNode,this.view.grid.domNode);
		dojo.place(this.moveBottomNode,this.view.grid.domNode);
		var nodeHeight = this.view.grid.getManager("RowManager").defaultHeaderHeight;
		dojo.style(this.moveBottomNode, "top", nodeHeight + "px");
	},
	
	resize: function(reClientX) {
		var temp = reClientX+10;
		var gridOffset = dojo.position(this.view.grid.domNode).x;
		temp -= gridOffset;
		dojo.style(this.helperNode, "left", temp + "px");
	},
	
	//计算锁定列列数
	lockingCellNo: function(){
		var viewManager = this.view.grid.getManager("ViewManager");
		for(i = 0 ; i<viewManager.views.length; ++i){
			if(viewManager.views[i].noscroll && !viewManager.views[i].isRowBar){
				this.lockingColNo = viewManager.views[i].cells.length;
			}
		}
		return this.lockingColNo;
	},

	adjust: function(inEvent,offsetX){
		var deltaX = inEvent.deltaX,
			target = inEvent.target;
		!dojo.hasClass(this.helperNode,"u-xgrid-adjust-yes") && dojo.addClass(this.helperNode,"u-xgrid-adjust-yes");
		dojo.style(this.moveTopNode, "display", "none");
		dojo.style(this.moveBottomNode, "display", "none");
		var left = Math.floor(dojo.position(target).x),
			getIdx = target.getAttribute("idx");
		this.toCol = getIdx?getIdx:target.parentNode.getAttribute("idx");
		this.lockingCellNo();
		this.tuning = 0;
		//根据鼠标前移还是后移计算目标位置
		if(deltaX > 0){
			if(offsetX >= target.offsetWidth/2){
				left += target.offsetWidth;
			}else{
				if(this.lockingColNo>0 && this.toCol == this.lockingColNo){
					this.tuning = 1;
				}
				this.toCol--;
			}
		}else{
			if(offsetX > target.offsetWidth/2){
				if(this.lockingColNo>0 && (this.toCol == this.lockingColNo-1)){
					this.tuning = -1;
				}
				left += target.offsetWidth;
				this.toCol++;
			}
		}
		//减掉grid的偏移量，例如padding
		var gridOffset = dojo.position(this.view.grid.domNode).x;
		left -= gridOffset;
		dojo.style(this.moveTopNode, {
			"left": left+"px",
			"display": "block"
		});
		dojo.style(this.moveBottomNode, {
			"left": left+"px",
			"display": "block"
		});
	},
	
	noadjust: function(){
		dojo.removeClass(this.helperNode,"u-xgrid-adjust-yes");
		dojo.style(this.moveTopNode, "display", "none");
		dojo.style(this.moveBottomNode, "display", "none");
		
	},
	
	end: function() {
		dojo.style(this.helperNode, "display", "none");
		dojo.style(this.moveTopNode, "display", "none");
		dojo.style(this.moveBottomNode, "display", "none");
		
	}
	
});
dojo.provide('unieap.xgrid.manager.Manager');
dojo.require('unieap.xgrid.core.builder');
dojo.declare("unieap.xgrid.manager.Manager", null, {
	view:null,
	constructor: function(params) {
		dojo.mixin(this, params);
		this.create();
		this.view = params;

	},
	create : function(){
	},
	startup : function(){
	},
	//发布消息
	publish : function(topic,args){
		var topics = this.grid._topics || (this.grid._topics = []);
		dojo.forEach(topics[topic] || [],function(method){
			method.apply(null,args || []);
		});
	},
	//订阅消息
	subscribe : function(topic,context,method){
		topic = topic.split(".");
		var id = topic[1] || "";
		topic = topic[0];
		var topics = this.grid._topics || (this.grid._topics = []);
		var listener = topics[topic] || (topics[topic] = []);
		function fn(){
			(dojo.isFunction(method) && method || context[method]).apply(context,arguments);
		}
		fn.id = id;
		listener.push(fn);
	},
	//取消订阅
	unsubscribe : function(topic){
		/**
		 * grid.unsubscribe("headerClick.uniqid");
		 */
		topic = topic.split(".");
		var id = topic[1] || "";
		topic = topic[0];
		var topics = this.grid._topics || (this.grid._topics = []);
		if(null==id){
			delete topics[topic];
			return;
		}
		var listener = topics[topic] || [];
		for(var i=listener.length-1,fn;fn =listener[i];i--){
			if(fn.id==id){
				listener.splice(i,1);
			}
		}
	}
});

dojo.provide('unieap.xgrid.manager.LayoutManager');
dojo.require("unieap.xgrid.core.cell");
dojo.require("unieap.xgrid.manager.Manager");
dojo.declare("unieap.xgrid.manager.LayoutManager", unieap.xgrid.manager.Manager, {
	/**
	 * @declaredClass:
	 * 		unieap.xgrid.manager.LayoutManager
	 * @summary:
	 * 		布局控制器
	 * @description:
	 * 		布局控制器提供一些布局相关的方法，如：setStructure，getCell，getCells，sortCell等.
	 */
	
	structure: null,
	
	create : function() {
		if(!this.structure){
			this._setLayout(this.grid.srcNodeRef);
			
		}
		
	},
	
	//解析布局元素
	_setLayout: function(node) {
		var layout = [],
		
			headerlist =dojo.query("header",node),
			fixedNode =dojo.query("fixed",node);
		if(fixedNode.length>0){
			var fixed={noscroll: true};
			fixed["rows"] = this._parseRows(fixedNode[0]);
			layout.push(fixed);
		}
		if(headerlist.length>0){
			var header={};
			header["rows"] = this._parseRows(headerlist[0]);
			layout.push(header);
		}
		this.structure = layout;
		this.origin = {
			fixed: 0,
			columns: []
		};
		for(var i=0;i<this.structure.length;i++) {
			for(var j=0;this.structure[i]["rows"]&&j<this.structure[i]["rows"].length;j++) {
				for(var k=0;k<this.structure[i]["rows"][j].length;k++) {
					//排除复杂表头和多标题
					if (this.structure[i]["rows"] && this.structure[i]["rows"].length != 1) {
						this.origin = null;
					} else if (this.origin != null) {
						if (this.structure[i].noscroll)	 {
							this.origin.fixed = this.structure[i]["rows"][j].length;
						}
						this.origin.columns.push(this.structure[i]["rows"][j][k]);
					}
				}
			}
		}
	},
	
	setIndividualStructure: function(){
		var individual = this.grid.getManager("IndividualManager") ;
		// if (individual) {
			var customSet = this.getManagerIndividual(this.grid.getOriId());
			if (customSet) {	
				if(this._compareIndividualCells(customSet)){
						this.grid.customSetNum = 1;
						this.setStructure(this._customStructure(customSet));
					}
				}else{
					//individual&&individual.deleteIndividual();
				} 
			//} 
	},

    //表格个性化去前台本地缓存，检测本地是否有缓存，如果有就返回
    getManagerIndividual:function(id){
        if(unieap.WEB_APP_NAME==null) return null;
		var APP_NAME_localstore = (top&&top.app&&top.app.getCurrentMenu&&top&&top.app&&top.app.getCurrentMenu())||(top&&top.app&&top.app._store.getState().global.currentMenu)||{};
        if(APP_NAME_localstore.id&&window.localStorage.getItem(APP_NAME_localstore.id+id) && JSON.parse(window.localStorage.getItem(APP_NAME_localstore.id+id)).length > 0  ){ //判斷本地是否有存儲
            return JSON.parse(window.localStorage.getItem(APP_NAME_localstore.id+id));
        }else{
            return null
        }
	},
	//对比grid现有cell的信息和个性化数据中的信息 如果cell都能匹配返回true 反之false
	_compareIndividualCells: function(individualCells){
		var gridCells = this.origin.columns;
		//动态表格保存列表
		// if(gridCells.length != this.grid.LayoutManager.initHeadData.length){
		// }
		if(!(individualCells[0].name)){ //对于旧版本的xgrid个性化信息（没有name那种） 需要提示一下
			MessageBox.alert({message:RIA_I18N.xgrid.individual.individualUpdated});
			return true;
		}
		var result = true; //最终结果
		var isCellExist = false; //记录grid中某个cell是否在indiv中 
		var gridCell = null;
		for(var i=0,gridLen=gridCells.length; i<gridLen; i++){
			isCellExist = false;
			gridCell = gridCells[i];
			for(var j=0,indivLen=individualCells.length; j<indivLen; j++){
				if(individualCells[j].name && individualCells[j].name == gridCell.name){
					isCellExist = true;
					break;
				}
			}
			if(!isCellExist){
				result = false;
				break;
			}	
		}
		return result;
	},
	

	// 根据缓存建立新表结构
	buildCustom: function(customSet) {
		var cs = [];
		var cols = this.grid.getManager("LayoutManager").origin.columns;
		var layoutManager = this.grid.getManager("LayoutManager");
		var strucItems = [];
		dojo.forEach(layoutManager.structure,function(structure){
			if(!structure.type){
				dojo.forEach(structure.rows[0],function(cell){
					var cellWidth = cell.width;
					if(typeof(cellWidth)=="number" && cell.percent
						|| (cell.percent && typeof(cellWidth)=="string" && cellWidth.indexOf("%")==-1)){
						cell.width = cellWidth+"%";
					}
					strucItems.push(cell)
				});
			}
		});
		var sequence = [];
		dojo.forEach(strucItems, function(item,index){
			
			//区分动态表格
			if(strucItems.length != cols.length){
				if(item.name!=''){
					sequence.push(index);
				}
			}else{
				for(var i = 0; i<cols.length; i++){
					if(cols[i].name==item.name ){
						sequence.push(i);
						break;
					}
				}
			}
			
			
		});
		var structure = layoutManager.structure;
		var lockCellNum = 0;
		for(var i = 0 ; i<structure.length; ++i){
			if(structure[i].noscroll && !structure[i].isRowBar){
				lockCellNum = structure[i].rows[0].length;
			}
		}
		var islocked = 0;
		var isShow = true;
		for (var i = 0; i < sequence.length; i++) {
			if (i < lockCellNum) {
				islocked = 1;
			} else {
				islocked = 0;
			}
			if(strucItems[i].hidden){
				isShow = false;
			} else {
				isShow = true;
			}
			
			cs.push({lock: islocked, show: isShow, index: sequence[i], 'name': strucItems[i]['name'], width: strucItems[i].width,label:strucItems[i].label,userDynamicHeader:strucItems[i].userDynamicHeader,decoder:strucItems[i].decoder,dataType:strucItems[i].dataType});
		}
		for (var i = 0; i < cs.length; i++) {
			for (var j = 0; j < customSet.length; j++) {
				if (cs[i].name === customSet[j].name && cs[i].label === customSet[j].label) { // 设置缓存的信息
					cs[i].lock = customSet[j].lock;
					cs[i].show = customSet[j].show;
					cs[i].width = customSet[j].width;
				}
			}
		}
		return cs;
	},

	_customStructure: function(customSet) {
		// console.log('customSet:', customSet);
		var newCustomSet = this.buildCustom(customSet);
		// console.log('newCustomSet:', newCustomSet);
		customSet = this.grid&&this.grid.class&&this.grid.class.indexOf('changeDoubleGrid')>-1?newCustomSet:customSet;
		var columns=[];
		if(this.origin.columns.length!=newCustomSet.length){
			// $.extend(true,columns, newCustomSet);
			$.extend(true,columns, customSet);
		}else{
			var columns = dojo.clone(this.origin.columns);
		}
		var fixedNum = 0;
		var customColumns = [];
		dojo.forEach(customSet, function(item){
			customColumns.push(item);
			if (item.lock) fixedNum++;
		});
		
	  	var structure = [];
	  	var fixed = {noscroll: true};
	  	var header = {};
	  	fixed["rows"] = [];
	  	header["rows"] = [];
	  	
		var fixrow = []; //锁定的列数据
		var freerow = []; //非锁定列的数据
		var column = null;

		//动态列前面的固定列，有问题比如format方法会被清除掉
		var originColumns = this.origin.columns; 
		var cellsList = this.cells

	for (var i = 0; i < cellsList.length; i++) {
		column = columns[customColumns[i].index];
		column.hidden = !customColumns[i].show;
		column.width = customColumns[i].width;
		column.userDynamicHeader = customColumns[i].userDynamicHeader;
		column.dataType=customColumns[i].dataType
		column.decoder = customColumns[i].decoder;
		for(var j=0 ; j< originColumns.length;j++){
			 if(customColumns[i].name==originColumns[j].name) {
				  column.formatter = originColumns[j].formatter;
			 }
		}
		for(var a=0 ; a< cellsList.length;a++){
			 if(customColumns[i].name==cellsList[a].name) {
				  column.displayFormatter = cellsList[a].displayFormatter;
			 }
		}
		if (fixedNum && i < fixedNum) {
			fixrow.push(column);
		} else {
			freerow.push(column);
		}
	}
		
		fixed["rows"].push(fixrow);
		header["rows"].push(freerow);
		
		if (fixrow.length > 0 && freerow.length > 0) {
			structure.push(fixed);
			structure.push(header);
		} else if (fixrow.length > 0) {
			structure.push(fixed);
		} else if (freerow.length > 0) {
			structure.push(header);
		}
		
		
		return structure;
	 },
	
	//解析行元素
	_parseRows: function(nodelist) { 
		var rows = [];
		var rowlist = dojo.query("row",nodelist);
		if(rowlist.length==0){
			rows.push(this._parseCells(dojo.query("cell",nodelist)));			
		}
		for(var i=0;i<rowlist.length;i++){
			rows.push(this._parseCells(dojo.query("cell",rowlist[i])));
		}
		return rows;
	},
	//解析列元素
	_parseCells: function(nodelist) {
		var row = [],
			properties = unieap.xgrid.Cell.prototype.properties;
		for(var i=0,value,name,node; (node = nodelist[i]); i++){
			var cell = {};
			for(name in properties){
				if((value = node.getAttribute(name))!=null){
					var dataType = properties[name];
					cell[name] = this._dataConvertor[dataType](value);
				}					
			}	
			if(!cell.hidden){
				cell.hidden = false;
			}			
			row.push(cell);
		}
		return row;
	},
	
	_dataConvertor : {
		"string" : function(inValue){ return inValue;},
		"number" : function(inValue){return Number(inValue);},
		"boolean" : function(inValue){return inValue=="true";},
		"object" : function(inValue){return dojo.getObject(inValue) || dojo.fromJson(inValue);}
	},
	
	_postLayout: function() {
		if (this.grid.getManager("ViewManager").hasRowBar()||this.structure.length==0) {
			dojo.require("unieap.xgrid.core.rowbar");
			this.structure.unshift({type: 'unieap.xgrid.RowView', width: 20});
		}
	},
	
	//获得grid的结构信息
	getLayoutInfo:function(type){
		var structure=this.getStructure(),
			layoutInfo=[],
			view;
		
		for(var i=0,l=structure.length;i<l;i++){
			view=structure[i];
			//不处理rowbar
			if(view.type&&view.type=="unieap.xgrid.RowView"){
				continue;
			}
			if(view.rows && view.rows.length>0 && type){
				var newViews = view.rows[0];
				var  exportInfo = function(_self,arg){
					var views = arg;
					var newArr = [],newObj={};
					dojo.forEach(views,function(view2){
							newObj = _self._getCellInfo(view2);
							if(view2['childs']&& view2['childs'].length >0){
								newObj.childs = exportInfo(_self,view2.childs);
								}
							newArr.push(newObj);
						
					})
					return newArr;
				};
				return(exportInfo(this,newViews));
			}
			if(view.rows && view.rows.length>0 && !type){
				layoutInfo.push(this._getViewInfo(view));
			}
			
		}
		return layoutInfo;
	},
	
	_getViewInfo:function(view){
		var rows=view.rows,viewInfo=[];
		for(var i=0,l=rows.length;i<l;i++){
			var row=rows[i],rowInfo=[];
			for(var j=0,k=row.length;j<k;j++){
				var cell=row[j],cellInfo;
				cellInfo=this._getCellInfo(cell);
				cellInfo['width'] != 1 && rowInfo.push(cellInfo);
			}
			viewInfo.push(rowInfo);
		}
		return viewInfo;
	},
	_checkTotal:function(){//检查是否有合计
        if(this.grid.getBinding().getDataStore() && this.grid.getBinding().getDataStore().getRowSet().getRows()[0]&&this.grid.getBinding().getDataStore().getRowSet().getRows()[0].data.IS_SUM_ROW){
            return true
        }else if(this.grid.class.indexOf('total')>-1){
            return true
        }else{
            return false
        }

    },
	_getCellInfo:function(cell){
		var cellInfo={};
		if(cell.name){
			cellInfo.name=cell.name;
		}
		try{width = cell.getWidth()}catch(e){width=cell.width}
		if(width){
			cellInfo.width=width;
		}
		var delHtmlTag = function (str){ //删除表头html标签 和替换E标签
			if(!str){return "&nbsp;"}
		　　return str.replace(/<[^>]+>/g,"").replace("(E)","").replace("*","");
		}
		cellInfo.label = cell.label ? delHtmlTag(cell.label) : '';
		if(cell.rowSpan){
			cellInfo.rowSpan=cell.rowSpan
		}
		if(cell.colSpan){
			cellInfo.colSpan=cell.colSpan
		}
		if(cell.isMulTitle){
			cellInfo.isMulTitle=cell.isMulTitle
		}
		if(cell.grid && cell.grid['group'] && (cell.grid['group'].statistic).hasOwnProperty(cell.name) ){
			cellInfo.totalSum = cellInfo.groupSum = {
				funcExp : cell.grid['group'].statistic[cell.name],
				groupField : cell.grid['group'].name
			 }
		}
		if(cell.displayFormatter &&  cell.displayFormatter.dataFormat){
			cellInfo.dataFormat=cell.displayFormatter.dataFormat;
			cellInfo['displayFormatter'] = {};
			var cellStr = cell.displayFormatter.dataFormat;
			cellInfo['displayFormatter']['dataFormat'] = cellStr.indexOf('.00') >0  ? cellStr.replace(/#.00/g, "0.00"):cellStr;//导出的格式变为###,##0.00
			if(!cell.totalSum&&cellStr.indexOf('.00') >0  && this._checkTotal()){
                cellInfo['totalSum'] = {funcExp:'sum',dataFormat:cellStr.indexOf('.00') >0  ? cellStr.replace(/#.00/g, "0.00"):cellStr}
            }
		}
		
		if(cell.valueFormatter && cell.valueFormatter.dataFormat){
			cellInfo.dataFormat=cell.valueFormatter.dataFormat;
			cellInfo['displayFormatter'] = {};
			var cellStr =  cell.valueFormatter.dataFormat;
			cellInfo['displayFormatter']['dataFormat'] = cellStr.indexOf('.00') >0  ? cellStr.replace(/#.00/g, "0.00"):cellStr;//导出的格式变为###,##0.00
			if(cellStr.indexOf('.00') >0){
				cellInfo.dataType = 'number';
			}
			if(!cell.totalSum&&cellStr.indexOf('.00') >0  && this._checkTotal()){
                cellInfo['totalSum'] = {funcExp:'sum',dataFormat:cellStr.indexOf('.00') >0  ? cellStr.replace(/#.00/g, "0.00"):cellStr}
            }
		}
		if(cell.dataType){
			cellInfo.dataType = cell.dataType;
		}
		if(cell.decoder){
			var decoder=cell.decoder,decoderInfo={};
			var valueAttr=decoder.valueAttr||"CODEVALUE",displayAttr=decoder.displayAttr||"CODENAME";
			var dc = this.grid.getBinding().dataCenter || this.grid.dataCenter || (unieap.Action.getViewContext(this.grid) || window).dataCenter;
			var store=unieap.getDataStore(decoder.store,dc);
			//U_EAP00028693
			if(!store){
				store = unieap.getDataStore(decoder.store, unieap.getTopWin().dataCenter);
			}
			if(store){
				var k,v;
				store.getRowSet().forEach(function(row){
					k=row.getItemValue(valueAttr);
					v=row.getItemValue(displayAttr);
					decoderInfo[k]=v;
				},null,null,null,this)
			}	
			cellInfo.decoder=decoderInfo;
		}
		if(cell.hidden){
			cellInfo.hidden = true;
		}
		if(cell.styles){
			cellInfo.styles =cell.styles
		}
		

		return cellInfo;
	},
	

	
	/**
	 * @summary:
	 * 		取得表格的结构信息
	 * @return:
	 * 		{array}
	 */
	getStructure: function() {
		return this.structure;
	},
	/**
	 * @summary:
	 * 		设置表格结构
	 * @param：
	 * 		{array} inStructure
	 * @example:
	 *  |	layout = grid.getManager("LayoutManager");
	 *  |	layout.setStructure(s);
	 * 	|	grid.getManager("ViewManager").refresh();
	 */
	setStructure: function(inStructure,flag) {
		if (!dojo.isArray(inStructure)) return;
		if (inStructure) {
			if (inStructure.length>0) {
				for(var i=0;i<inStructure.length-1;i++){
					inStructure[i].noscroll = true;
				}
				var last = inStructure[inStructure.length-1];
				last.noscroll && delete last.noscroll;
			}
			this.structure = inStructure;
		}
		
		this._postLayout();
		//存在行编辑，在改变structure时，先关闭编辑器，否则不能及时销毁text-box
		if(this.grid.rowEdit){
			var rowEdit = this.grid.rowEdit;
			rowEdit.refreshEditTextBox(rowEdit.index);
		    rowEdit.applyEdit();
		    var editflag = true,
		    	rowEditIndex = rowEdit.index;
		}
		if(this.cells){
			dojo.forEach(this.cells,function(cell){
				cell.destroy&&cell.destroy();
			});
		}
		this.cells = [];
		this.structure = s = [];
		for(var i=0, viewDef; (viewDef=inStructure[i]); i++){
			s.push(this.addViewDef(viewDef));
		}
		this.structure = s;
		this.cellCount = this.cells.length;
		if(editflag){
			this.grid.noInitEdit = true;
			this.grid.getViewManager().getScrollView().contentBuilder.getRowEdit(rowEditIndex);
		}
		var cellLength = this.cells.length;
		for(var i = 0,j = 0; i<cellLength ; ++i){
			if(!this.cells[i].isMulTitle){
				this.cells[i].mulTitleIndex = j++;
			}
		}
		if(!this.grid.customSetNum){
			this.setIndividualStructure();
		}
		
		//发布一个结构改变的消息
		this.publish("structureChanged",[flag]);
	},
	addViewDef: function(inDef){
		this._defaultCellProps = inDef.defaultCell || {};
		return dojo.mixin({}, inDef, {rows: this.addRowsDef(inDef.rows || inDef.cells)});
	},
	addRowsDef: function(inDef){
		var result = [];
		for(var i=0, row; inDef && (row=inDef[i]); i++){
			result.push(this.addRowDef(i, row));
		}
		return result;
	},
	addRowDef: function(inRowIndex, inDef){
		var result = [];
		for(var i=0, def, cell; (def=inDef[i]); i++){
			cell = this.addCellDef(inRowIndex, i, def);
			result.push(cell);
			this.cells.push(cell);
		}
		return result;
	},
	addCellDef: function(inRowIndex, inCellIndex, inDef){
		var w;
		if(inDef.colSpan > 1){
			w = 0;
		}else{
			w = inDef.width;
		}
		var fieldIndex = inDef.field != undefined ? inDef.field : (inDef.get ? -1 : this.fieldIndex);
		if((inDef.field != undefined) || !inDef.get){
			this.fieldIndex = (inDef.field > -1 ? inDef.field : this.fieldIndex) + 1; 
		}
		var param = dojo.mixin({}, this._defaultCellProps, inDef, {
			grid: this.grid,
			subrow: inRowIndex,
			layoutIndex: inCellIndex,
			index: this.cells.length,
			fieldIndex: fieldIndex
		});
		w && dojo.mixin(param, {width:w});
		return new unieap.xgrid.Cell(param);
	},
	
	getCells: function() {
		return this.cells;
	},
	/**
	 * @summary:
	 * 		获取cell对象
	 * @param:
	 * 		{number|string} inData
	 * @return:
	 * 		{unieap.xgrid.Cell}
	 * @description:
	 * 		获取某个cell对象，inData可为cell的序号，也可以是cell的name属性值
	 */
	getCell: function(inData) {
		if (typeof(inData)=="number") {
			return this.cells[inData];
		} else {
			for(var i =0;i<this.cells.length;i++){
				if(this.cells[i]["name"]==inData)
					return this.cells[i];
			}
		}
	},
	
	_getCol: function(col){
		var newCol = null;
		//单帧情况下cell的ID带有前缀，在for循环中判断时需要处理
		var rootId = this.grid._rootID==undefined?"":this.grid._rootID;
		!isNaN(col)&&(col=parseInt(col,10));
 		if (dojo.isString(col)) {
 			for (var j = 0; this.cells[j]; j++) {
				 console.log(col);
 				if (this.cells[j].id == (rootId+col) ||this.cells[j].id == col) {
 					newCol = j;
 					break;
 				}
 			}
 			if (dojo.isString(newCol)) return newCol;
 		} else if (isNaN(col))	{
 			return newCol;
 		} else {
 			newCol = col;
 		}
	 	return newCol;
	},
	
	/**
	  * @summary:
	  * 	列锁定/解锁
	  * @param:
	  * 	{array} cols
	  * @param:
	  * 	{boolean} isLock
	  * @description:
	  * 	参数cols代表被锁定列的数组,
	  * 	形如:[4,2](数字为列的原始序号,第2列和4列将被锁定),["col1", "col3", "col2"](字符串为列的id或者securityId)
	  * 	参数isLock设置操作类型为锁定还是解锁,可不写,默认为锁定。
	  * @example:
	  * |	var layout = grid.getManager("LayoutManager");
	  * |	layout.lockCell(["col1", "col3", "col2"], true);
	  */
	lockCell: function(cols, isLock) {
		if (!dojo.isArray(cols)||cols.length==0) {
	 		return;
	 	}
		typeof(isLock)=='undefined'&&(isLock=true);
		var individual = this.grid['IndividualManager'];
	 	if(!individual){
			dojo.require("unieap.xgrid.manager.Individual");
			individual = this.grid['IndividualManager']= new unieap.xgrid.manager.Individual({grid:this.grid});
			this.grid.managers.push("IndividualManager");
		}
		var self = this;
		dojo.forEach(cols,function(col){
			col = self._getCol(col);
			col = self.getCell(col);
			
			if(isLock){
	 			individual.menulockcell.doLockCell(col);
	 		} else {
	 			individual.menulockcell.doUnlockCell(col);
	 		}
		});
	 },
	 
	 /**
	  * @summary:
	  * 	列隐藏
	  * @param:
	  * 	{array} cols
	  * @description:
	  * 	参数cols代表被隐藏列的数组,
	  * 	形如:[2,4](数字为列的原始序号,第2列和4列将被隐藏),["col1", "col3", "col2"](字符串为列的id或者securityId)
	  * @example:
	  * |	var layout = grid.getManager("LayoutManager");
	  * |	layout.hideCell(["col1", "col3", "col2"]);
	  */
	hideCell: function(cols) {
		if (!dojo.isArray(cols)||cols.length==0) {
	 		return;
	 	}
		var self = this;
		dojo.forEach(cols,function(col){
			col = self._getCol(col);
			try{
				self.getCell(col).hidden = true;
				self.getCell(col)['setHidden'] = true;
			}catch(e){
			}
		});
	 	this.grid.getManager("ViewManager").refreshPage();
	 },
	 
	 /**
	  * @summary:
	  * 	列显示
	  * @param:
	  * 	{array} cols
	  * @description:
	  * 	参数cols代表被显示列的数组,
	  * 	形如:[2,4](数字为列的原始序号,第2列和4列将被显示),["col1", "col3", "col2"](字符串为列的id或者securityId)
	  * @example:
	  * |	var layout = grid.getManager("LayoutManager");
	  * |	layout.hideCell(["col1", "col3", "col2"]);
	  */
	showCell: function(cols) {
		if (!dojo.isArray(cols)||cols.length==0) {
	 		return;
	 	}
	 	var self = this;
		dojo.forEach(cols,function(col){
			col = self._getCol(col);
			if(self && self.getCell(col)){
				self.getCell(col).hidden = false;
				self.getCell(col)['setHidden'] = false;
			}
		});
	 	this.grid.getManager("ViewManager").refreshPage();
	 },
	 
	 /**
	 * @summary:
	 * 		判断一列是否被隐藏
	 * @description:
	 * 		参数为unieap.xgrid.Cell对象的name属性。
	 * 		注意，若表格中不存在此inName值的列，方法也将返回true。
	 * @example:
	 * |	var layout = grid.getManager("LayoutManager");
	 * |	layout.isHidden("attr_salary");
	 * @param:
	 * 		{string} inName
	 * @return:
	 * 		{boolean}
	 */
	isHidden: function(inName) {
	 	var cell;
	 	var cellNum = this.cells.length;
	 	for (var i = 0; i < cellNum; ++i) {
	 		 cell = this.cells[i];
	 		 if(cell.name&&cell.name===inName){
	 		 	return cell.hidden;
	 		 }
	 	}
	 	return true;
	},
	
	/**
	  * @summary:
	  * 	调整Grid各列的次序
	  * @param:
	  * 	{array} sequence 
	  * @param:
	  * 	{number} fixedNum
	  * @description:
	  * 	参数sequence为列顺序数组, 
	  * 	形如:[4,2,3,1,0](数字为列的原始序号),["col1", "col3", "col2"](字符串为列的id)
	  * 	参数fixedNum为锁定列数
	  * 	如：sortCell([4,2,1,0,3],2)
	  * @example:
	  * |	var layout = grid.getManager("LayoutManager");
	  * |	layout.sortCell(["col1", "col3", "col2"], ${1}2);
	  * ${1}表示锁定前两列
	  */
	 sortCell: function(sequence, fixedNum) {
	 	if (!dojo.isArray(sequence)||sequence.length==0) {
	 		return;
	 	}
	 	var se = [];
	 	for(var i=0; i<sequence.length;i++){
	 		se[i] = this._getCol(sequence[i]);
	 	}
		
	  	var fixed = {noscroll: true};
	  	var header = {};
	  	fixed["rows"] = [];
	  	header["rows"] = [];
	  	
		var fixrow = []; //锁定的列数据
		var freerow = []; //非锁定列的数据
		var column = null;
		var existColumns = [];
		existColumns.length = this.cells.length;
		var self = this;
		dojo.forEach(se,function(index){
			column = self.cells[index];
			if(column){
				existColumns[index]=true;
				if (fixedNum && i < fixedNum) {
					fixrow.push(column);
				} else {
					freerow.push(column);
				}
			}
		});
		for(var i=0;i<existColumns.length;i++){
			!existColumns[i] && freerow.push(this.cells[i]);
		}
		
		fixed["rows"].push(fixrow);
		header["rows"].push(freerow);
		var structure = [];
		if (fixrow.length > 0 && freerow.length > 0) {
			structure.push(fixed);
			structure.push(header);
		} else if (fixrow.length > 0) {
			structure.push(fixed);
		} else if (freerow.length > 0) {
			structure.push(header);
		}
	 	if (structure) {
	 		this.structure = structure;
	 		this.setStructure(this.structure);
	 	} 
	 },
	
	startup : function(){
		//第二个参数的目的是告知ViewManager初始化表格时不刷新表格
		this.setStructure(this.structure,true);
	},
	
	forEachCell: function(inCallback) {
		for(var i=0, c; (c=this.cells[i]); i++) {
			inCallback(c, i);
		}
	}
	
});

dojo.provide('unieap.xgrid.core.cellEdit');

dojo.declare("unieap.xgrid.cellEdit", null, {
	
	constructor: function(inCell) {
		this.editors = {
			current: null
		},
		this.connects = [];
		this.cell = inCell;
		var editor = inCell.editor;
		if (editor) {
			this.setEditor(editor.editorClass, editor.editorProps);
		}
	},
	
	//创建编辑器并且给编辑器绑定上事件
	_createEditor: function(editorClass, editorProps) {
		dojo.require(editorClass);
		var clazz = dojo.getObject(editorClass);
		//修改了设置单元格宽度为auto时，单元格内编辑器不能自动撑开的问题。
		var editor = new clazz(dojo.mixin(editorProps, {width:"auto",style:"display:block;",binding:{name:this.cell.name},dataCenter:this.cell.grid.dataCenter}));
		this.funnelEvents(editor);
		return editor;
	},
	
//	//给编辑器绑定上事件
	funnelEvents: function(editor) {
		//控件Tab键事件
		this.connects.push(dojo.connect(editor, "onTab", this,function(evt) {
			this.edit = this.cell.grid.rowEdit;
			this.edit.onEditorTab(this.cell, evt);
		}));
		//上下键up and down
//		this.connects.push(dojo.connect(editor, "onKeyDown", this,function(evt) {
//			//this.edit.onEditorBlur(this.cell, evt);
//			if("unieap.form.TextBox" == this.cell.editor.editorClass){
//				if(evt.keyCode == dojo.keys.DOWN_ARROW){
//					this.edit = this.cell.grid.rowEdit;
//					this.edit.onEditorDown(this.cell, evt);
//				}
//				if(evt.keyCode == dojo.keys.UP_ARROW){
//					this.edit = this.cell.grid.rowEdit;
//					this.edit.onEditorUp(this.cell, evt);
//				}
//			}
//		}));
		//cascad事件绑定,监听主ComboBox的onChange事件，刷新从combobox或者配置了cascade属性的单元格
		var cells=this.cell.grid.getManager("LayoutManager").getCells(),childCells=[];
		if(editor.declaredClass=="unieap.form.ComboBox"){
			dojo.forEach(cells,function(cell){
				if(this._checkCell(editor,cell)){
					childCells.push(cell);
				}
	
			},this);
		}
		
		if(childCells.length>0){
			this.connects.push(dojo.connect(editor,"onChange",this,function(){
				setTimeout(dojo.hitch(this,function(){
					var row = editor.getBinding().getRow();
					dojo.forEach(childCells,function(cell){
						//modified by zhengh 2011-05-27 解决Grid级联编辑中级联combo数据不正确。U_EAP00019773
						//取得主combobox值
						var index = row.getIndex();
						var primaryValue = editor.getBinding().getValue();
						//调用子combobox的getCascadeStore对应的方法 
						var cascadeStoreFun = cell.getEditor().getCascade().getCascadeStore;
						
						if(cascadeStoreFun){
							//获得第index行，子combobox的dataStore名字
							var cascadeStoreName = cascadeStoreFun(primaryValue);
							//给子combobox绑定store
							
							cell.getEditor().getDataProvider().setDataStore(cascadeStoreName);
						}
						this.cell.grid.getManager("ViewManager").refreshCell(row.getIndex(),cell);
					},this)
					
				}),0);
			}));
		}

	},
	
	_checkCell:function(primaryEditor,cascadeCell){
		var cascadeEditor=cascadeCell.editor,
			primaryId=primaryEditor.id,
			cascadeId=(cascadeEditor&&cascadeEditor.cascade&&cascadeEditor.cascade.primary)||
					  (cascadeCell.cascade&&cascadeCell.cascade.primary);
		if(primaryId==cascadeId){
			return true;
		}
		var context = unieap.Action.getViewContext(this.cell.grid);
		if(context && context.rootNode && primaryId==context.rootNode.id+cascadeId){
			return true;
		}
		return false;
	},
	
	//获得编辑器对象,如果传入which,比如'unieap.form.TextBox'就返回一个TextBox对象
	//否则返回当前编辑器对象
	getEditor: function(which) {
		if (!this.editors) return null;
		return which && this.editors[which] || this.editors[this.editors.current];
	},
	//设置编辑器,将编辑器对象保存为Map,其中key为decleredClass,value为控件对象
	//例如{'unieap.form.TextBox':obj
	setEditor: function(editorClass, editorProps) {
		this.editors.current = editorClass;
		if (!(editorClass in this.editors)){
			this.editors[editorClass] = this._createEditor(editorClass, editorProps);
		} else {
			var editor = this.editors[editorClass];
			editor && editor.destroy && editor.destroy();
			delete editor;
			this.editors[editorClass] = this._createEditor(editorClass, editorProps);
		}
	},
	//销毁控件及其事件
	destroy: function() {
		while(this.connects.length>0) {
			dojo.disconnect(this.connects.pop());
		}
		editors = this.editors;
		//销毁控件内存对象
		for (var which in editors) {
			editors[which] && editors[which].destroy && editors[which].destroy();
		}
		delete this.editors;
	}
	
});
dojo.provide('unieap.xgrid.core.RowEdit');
dojo.require("dijit._Widget");
dojo.require("dijit._Templated");

dojo.declare('unieap.xgrid.RowEdit', [dijit._Widget, dijit._Templated], {
	//标记是否在编辑
	editing: false,
	//标记是否由外部来设置编辑行
	setEditting: false,

	isResize: true,

	templateString: "<div class='xgrid-rowedit-container' dojoAttachPoint='firstNode' style='display:none'>" +
		"<div class='xgrid-rowedit-edit' dojoAttachPoint='editNode'>" +
		"<div class='xgrid-rowedit-lockedview' dojoAttachPoint='lockViewNode'>" + "</div>" +
		"<div class='xgrid-rowedit-unlockedviewcontent' dojoAttachPoint='unlockedviewcontentNode'>" +
		"<div class='xgrid-rowedit-unlockedview' dojoAttachPoint='unlockViewNode'>" +
		"</div>" +
		"</div>" +
		"</div>" +
		"</div>",

	postCreate: function () {
		this.inherited(arguments);
		this.grid = this.view.grid;
		this.rowManager = this.grid.getRowManager();
		var gridDomNode = this.grid.domNode;
		dojo.place(this.domNode, gridDomNode);
		this.lockingColNo = 0;
		var wheelEvent = dojo.isFF ? "DOMMouseScroll" : "onmousewheel";
		this.link = dojo.connect(this.firstNode, wheelEvent, this, function (event) {
			this.grid.getManager("ViewManager").scroller._wheelListener(event);
			dojo.stopEvent(event);
		});
		if (!this.setEditting) this.initEdit();
		//U_EAP00027735 不完美版 
		//this.lastCellIndex = this._getLastVisibleCellIndex();
	},

	//slide控制动画开关，在单击时候调用initEdit(1),tabbing为是否是tab键按下并到最后一个编辑格，如果是index加1
	//并且这个时候不需要再重新获取当前行。
	initEdit: function (slide, tabbing) {
		this.unableEdit = false;
		this.noRefreshEdit = false;
		//用于IE8、9中最有一个cell在快捷键聚焦时位置移动情况，在改变窗口大小但显示列不变时，需要重新调整cell宽度
		this.adjustLastCellWidth = false;
		var snapshot = this.grid.getViewManager().getScrollView().snapshot,
			rowManager = this.rowManager,
			rowEditManager = this.grid.getRowEditManager();
		//editShowCells用于判断当调整窗口大小时，是否需要重新渲染编辑器
		this.editShowCells = snapshot.showCells;
		//如果有滚动条移动则不刷新Row，因为滚动条移动已经刷新page
		if (this.editing && !this.clickScroll && this.styleIndex >= 0) {
			//当窗口大小改变时，可能出现横向滚动条的有无，这样可能会影响到可显示的行数，有可能styleIndex超出可显示的行数导致错误
			if (this.styleIndex > snapshot.showRows - 1) {
				this.styleIndex = snapshot.showRows - 1;
			}
			this.grid.getManager("ViewManager").refreshRow(this.styleIndex + snapshot.beginRowIndex);
		}
		if (!tabbing) {
			//如果this.setEditting为真，用setEdit中参数设置编辑的行index
			if (true != this.setEditting) {
				this.index = rowManager.getCurrentRowIndex();
			}
			this.styleIndex = this.index - snapshot.beginRowIndex;
		} else {
			var rowNumber = rowManager.getRowCount();
			if ((this.index + 1) >= rowNumber) return;
			this.index++;
			this.styleIndex++;
			this.isResize = false;
			rowEditManager._visualizeRow(this.index, tabbing);
		}
		if (rowEditManager.onBeforeEdit && !unieap.fireEvent4Widget(rowEditManager, this.grid, rowEditManager.onBeforeEdit, [this.index])) {
			this.unableEdit = true;
			this.editing = false;
			this._exit();
			return;
		}
		var viewManager = this.grid.getManager("ViewManager"),
			headerHeight = viewManager.getHeaderHeight();
		var unlockedviewWidth = viewManager.getScrollView().getRealWidth(snapshot.beginCellIndex, snapshot.showCells);
		if ("string" == typeof (unlockedviewWidth) && -1 != unlockedviewWidth.indexOf("%")) {
			unlockedviewWidth = snapshot.viewContentWidth;
		}
		var lockedviewWidth = this.getLockEditWidth(),
			editOffset = this.getLeft(),
			editOffsetTop = 0,
			//editNodeWidth = lockedviewWidth + unlockedviewWidth,
			editNodeheight = rowManager.defaultRowHeight;
		if (!this.grid.getManager("ViewManager").isHideHeader) {
			editOffsetTop += headerHeight;
		}
		editOffsetTop += this.styleIndex * rowManager.defaultRowHeight;
		editOffsetTop -= 5;
		//slide = false;
		if (slide) {
			if (true == snapshot.lastRow) {
				dojo.style(this.firstNode, {
					"left": editOffset + "px",
					"height": editNodeheight + "px"
				});
				this.doLastRow();
			} else {
				dojo.require("dojo.fx");
				var self = this;
				dojo.fx.slideTo({
					duration: 100,
					node: this.firstNode,
					left: editOffset,
					top: editOffsetTop,
					onEnd: function () {
						if (!this.clickScroll) {
							self._addInputNode();
						}
					}
				}).play();
			}
			if ((this.styleIndex < 0) || (this.styleIndex > snapshot.showRows)) {
				this.flagDisplay = "none";
				//dojo.style(this.firstNode,"display","none");
			} else {
				this.flagDisplay = "block";
				//dojo.style(this.firstNode,"display","block");
				if (true == snapshot.lastCell) {
					this.doLastCell();
				}
			}
		} else {
			//如果编辑器在移动纵向滚动条时隐藏起来，这个时候调整列宽后，应该继续隐藏
			if ((this.styleIndex < 0) || (this.styleIndex > snapshot.showRows)) {
				this.flagDisplay = "none";
			} else {
				this.flagDisplay = "block";
				dojo.style(this.firstNode, {
					//"display": "block",
					"left": editOffset + "px",
					"top": editOffsetTop + "px",
					"height": editNodeheight + "px"
				});
			}
			//初始化editNode宽、高
			var temp = Math.min(unlockedviewWidth, snapshot.viewContentWidth);
			temp += lockedviewWidth;
			dojo.style(this.editNode, { //SUN
				"width": temp + "px",
				"height": editNodeheight + "px"
			});
			//解决锁定列分割线问题，将锁定列宽多1px,在view，renderContent方法中IE和其他浏览器生成锁定列不一样，
			if (dojo.isIE) {
				if (lockedviewWidth > 0) {
					dojo.style(this.lockViewNode, {
						"width": lockedviewWidth - 1 + "px",
						"height": editNodeheight + "px"
					});
				}
				dojo.style(this.unlockedviewcontentNode, {
					"left": lockedviewWidth + "px",
					"width": snapshot.viewContentWidth + "px",
					"height": editNodeheight + "px"
				});
			} else {
				dojo.style(this.lockViewNode, {
					"width": lockedviewWidth + "px",
					"height": editNodeheight + "px"
				});
				dojo.style(this.unlockedviewcontentNode, {
					"left": lockedviewWidth + 1 + "px",
					"width": snapshot.viewContentWidth + "px",
					"height": editNodeheight + "px"
				});
			}
			dojo.style(this.unlockViewNode, {
				"width": unlockedviewWidth + "px",
				"height": editNodeheight + "px"
			});
			if (true == snapshot.lastRow) {
				this.doLastRow();
			}
			if (true == snapshot.lastCell) {
				this.doLastCell();
			}
			//如果移动纵向滚动条时，不用重新再加入input节点
			if (!this.clickScroll) {
				this._addInputNode();
			}
		}
		//		//添加关闭按钮 
		//		if(!this.editing){
		//			this.closeNode = dojo.create("div");
		//			dojo.addClass(this.closeNode,"xgrid-rowedit-closeNodeDiv");
		//			dojo.style(this.closeNode,{
		//						"left": "0px"
		//					   });	
		//			dojo.place(this.closeNode,this.firstNode); 
		//			dojo.connect(this.closeNode,"onclick",this,this.applyEdit);  
		//		}
		this.editing = true;
		//当setEdit或者insertRow以后在单击触发编辑器时需要将setEditting设为false，否则不重新计算this.index
		this.setEditting = false;
		this.clickScroll = false;
		if ("none" == this.flagDisplay) {
			dojo.style(this.firstNode, "display", "none");
		} else {
			dojo.style(this.firstNode, "display", "block");
		}
		//U_EAP00022040 新表格编辑中带有日期控件时，第一次弹出日期控件时会多次调用resize container，导致聚焦错位。
		//this.editedNode[0] && this.editedNode[0].focus();
		rowEditManager._visualizeRow(this.index, tabbing);
	},

	//获取edit的宽度，包括锁定列和非锁定列
	getLockEditWidth: function () {
		var viewManager = this.grid.getManager("ViewManager");
		var editNodeWidth = 0;
		for (var i = 0, len = viewManager.views.length; i < len; ++i) {
			if (viewManager.views[i].noscroll && !viewManager.views[i].isRowBar) {
				editNodeWidth += viewManager.views[i].getRealWidth();
			}
		}
		return editNodeWidth;
	},

	//获取rowbar宽度
	getLeft: function () {
		var viewManager = this.grid.getManager("ViewManager");
		if (viewManager.hasRowBar()) {
			var left = viewManager.views[0].getRealWidth();
		} else {
			return 0;
		}
		return left;
	},

	//添加各个inputDiv
	_addInputNode: function () {
		var height = 25,
			divTopOffset = Math.max(((this.rowManager.defaultRowHeight - 15) / 2) - 1, 1),
			viewManager = this.grid.getManager("ViewManager"),
			isLcokedView = 0;
		//记录编辑单元格
		this.editedCell = [];
		if (!this.editing) {
			this.editedNode = [];
			this.inputDivNodes = [];
		}
		for (var i = 0, len = viewManager.views.length; i < len; ++i) {
			if (viewManager.views[i].isRowBar) {
				continue;
			}
			var left = 0;
			var binding = viewManager.views[i].grid.getBinding();
			this.bindRow = binding.getDataStore().getRowSet().getRow(this.index);
			var rows = viewManager.views[i].contentStructure.rows[0];
			if (viewManager.views[i].noscroll && !viewManager.views[i].isRowBar) {
				this.lockingColNo = viewManager.views[i].cells.length;
				//处理关于隐藏列  ..
				for (var ln = 0, inlen = viewManager.views[i].cells.length; ln < inlen; ++ln) {
					if (viewManager.views[i].cells[ln].hidden) {
						this.lockingColNo--;
					}
				}
				if (this.lockingColNo > 0) {
					isLcokedView = 1;
					dojo.addClass(this.lockViewNode, "xgrid-rowedit-splitter");
				} else {
					isLcokedView = 0;
				}
			} else {
				isLcokedView = 0;
			}
			var snapshot = viewManager.views[i].snapshot;
			var showCells = snapshot.showCells || rows.length;
			var unShowNow = 0;
			for (var j = 0; j < showCells; ++j) {
				var cellIndex = snapshot.beginCellIndex ? j + unShowNow + snapshot.beginCellIndex : j + unShowNow;
				if (cellIndex >= rows.length) break;
				if (rows[cellIndex].hidden) {
					unShowNow++;
					j--;
					continue;
				}
				if (!this.editing) {
					this.inputDivNode = dojo.create("div");
					dojo.addClass(this.inputDivNode, "xgrid-rowedit-inputDiv");
					if (1 == isLcokedView) {
						dojo.place(this.inputDivNode, this.lockViewNode);
					} else {
						dojo.place(this.inputDivNode, this.unlockViewNode);
					}
					this.inputDivNodes.push(this.inputDivNode);
				} else {
					this.inputDivNode = viewManager.views[i].noscroll ? this.inputDivNodes[j] : this.inputDivNodes[j + this.lockingColNo];
				}
				var width = rows[cellIndex].getRealWidth();
				dojo.style(this.inputDivNode, {
					// "top": divTopOffset+"px",
					// "height": height+"px",
					"top": "0px",
					"height": "100%",
					"width": width + "px",
					"left": left + "px"
				});
				//浏览器IE8及IE9，并且不是最后一列的非锁定视图，在可见区域中的最后一个时，把edit cell宽度变小
				if (dojo.isIE > 7 && !snapshot.lastCell && 0 == isLcokedView && j == showCells - 1) {
					var unlockedviewWidth = viewManager.getScrollView().getRealWidth(snapshot.beginCellIndex, snapshot.showCells);
					if ("string" == typeof (unlockedviewWidth) && -1 != unlockedviewWidth.indexOf("%")) {
						unlockedviewWidth = snapshot.viewContentWidth;
					}
					var tempWidth = unlockedviewWidth - snapshot.viewContentWidth,
						lastInputWidth = tempWidth > 0 ? width - (unlockedviewWidth - snapshot.viewContentWidth) + 4 : width;
					dojo.style(this.inputDivNode, "width", lastInputWidth + "px");
					this.adjustLastCellWidth = true;
				}
				left += width;
				//添加input节点
				this.editedCell.push(rows[cellIndex]);
				//第一次进入编辑状态，或者cell上配有onBeforeEdit，或者cell上没有editor时，进入_addValue
				if ((!this.editing) || rows[cellIndex].onBeforeEdit || !rows[cellIndex].editor ||
					rows[cellIndex].editor.editorClass == "unieap.form.RadioButton" || rows[cellIndex].editor.editorClass == "unieap.form.CheckBox") {
					this.inputDivNode.innerHTML = "";
					if (this.editing && dojo.isIE) {
						rows[cellIndex].destroy();
					}
					this._addValue(this.index, rows[cellIndex], viewManager.views[i]);
				}
				if (rows[cellIndex].editor && rows[cellIndex].editor.editorClass == "unieap.form.ComboBoxTree") {
					var newBing = rows[cellIndex].editor.editorProps.treeJson.binding;
					if (typeof (newBing.store) == "string") {
						newBing._store = newBing.store;
					} else {
						delete newBing.store;
						newBing.store = newBing._store;
					}
				}
			} //end for (j)
		} //end for(i)
		if (!dojo.isIE || dojo.isIE >= 9) {
			this._enter2Tab();
		}
		for (var i = 0, cell; cell = this.editedCell[i]; ++i) {
			cell.getEditor().getBinding().bind(this.bindRow);
		}
		//this.editedNode[0] && this.editedNode[0].focus();
	},

	//add text-box 如果cell没配有editor,或者cell配有onBeforeEdit并返回false这不创建text-box直接将单元格内容显示
	_addValue: function (index, inCell, view) {
		if (!inCell.editor || (inCell.onBeforeEdit && !unieap.fireEvent4Widget(inCell, this.grid, inCell.onBeforeEdit, [index, inCell]))) {
			//如果此单元格不可编辑，在this.editedCell中移除此节点，否则在TAB和ENTER快捷键是判断是否是最有一个节点出错
			this.editedCell.pop();
			//删除this.editedNode中对应的节点（用于cell上配有onBeforeEdit的）
			for (var i = 0, len = this.editedNode.length; i < len; ++i) {
				if (this.editedNode[i].editIndex == inCell.index) {
					this.editedNode.splice(i, 1);
					break;
				}
			}
			var tempValue = inCell.get ? unieap.fireEvent4Widget(inCell, this.grid, inCell.get, [index]) : inCell._get(index);
			result = inCell._format(tempValue, index);
			this.inputDivNode.innerHTML = "<div class = 'xgrid-rowedit-cannotEdit'>" + result + "</div>";
			//inCell.destroy();//SUN11.21
			return;
		}
		var editor = this._getEditor(index, inCell);
		if (editor == null) return false;
		editor.editIndex = inCell.index;
		dojo.place(editor.domNode, this.inputDivNode);
		if (this.editing) {
			//找到editor对应的位置
			for (var i = 0, len = this.editedNode.length; i < len; ++i) {
				if (inCell.index == this.editedNode[i].editIndex) {
					return;
				}
				if (inCell.index < this.editedNode[i].editIndex) {
					break;
				}
			}
			this.editedNode.splice(i, 0, editor);
		} else {
			this.editedNode.push(editor);
		}
	},

	//获得编辑器
	_getEditor: function (inRowIndex, inCell) {
		if (!inCell.enable) return null;
		//获取当前编辑器对象
		var editor = inCell.getEditor();
		if (!editor || !editor.binding) return null;
		var editorClass = editor.declaredClass;
		if (editorClass == "unieap.form.CheckBox" || editorClass == "unieap.form.RadioButton") {
			unieap.setLabelFormatProps(inCell);
			var value = inCell.get ? unieap.fireEvent4Widget(inCell, this.grid, inCell.get, [index]) : inCell._get(inRowIndex);
			editor.domNode = inCell.formatter(value, inRowIndex);
			var marginLeft = 5; //U_EAP00028703
			if (inCell && inCell.styles) {
				var styleString = inCell.styles.replace(/\s/g, "");
				if (styleString.indexOf("text-align:center") > -1) {
					marginLeft = (inCell.getRealWidth() / 2) - 7;
				} else if (styleString.indexOf("text-align:right") > -1) {
					marginLeft = inCell.getRealWidth() - 18;
				}
			}
			var marginTop = (dojo.style(this.unlockViewNode, 'height') - 25) / 2;
			var tempStyle = "input style='" + "margin-left:" + marginLeft + "px; margin-top:" + marginTop + "px; '";
			editor.domNode = editor.domNode.replace("input", tempStyle);
			if (inCell.editor.editorProps.disabled) { //U_EAP00028408
				editor.domNode = editor.domNode.replace("input", "input disabled='true' ");
			} else {
				editor.domNode = editor.domNode.replace("disabled = 'true'", "");
			}
		}
		return editor;
	},

	//当滚动条移动到最下端时改变editor的样式
	doLastRow: function () {
		var snapshot = this.grid.getViewManager().getScrollView().snapshot;
		var editOffsetBottom = 0;
		//判断有没有toolbar
		if (this.grid.toolBar) {
			var toolHeight = this.grid.getToolBar().getHeight();
			editOffsetBottom = toolHeight;
		}
		//获取总行高
		editOffsetBottom += (snapshot.rowCount - this.index - 1) * this.rowManager.defaultRowHeight;
		//判断横向滚动条是否显示
		if ("none" != dojo.style(this.grid.xscrollerNode, "display")) {
			editOffsetBottom += 10;
		} else {
			editOffsetBottom -= 5;
		}
		if (this.grid.totalsNode && this.grid.totalsNode.style && this.grid.totalsNode.style.display != 'none') {
			editOffsetBottom += (this.rowManager.defaultRowHeight + 4);
		} else {
			editOffsetBottom += 4;
		}
		//有foot时会导致编辑框位置偏下 需要进行修正 U_EAP00027880
		editOffsetBottom += 5; //这个算硬性修正
		if (this.grid.foot) {
			editOffsetBottom += (this.grid.foot.getHeight() + 5);
		}
		dojo.style(this.firstNode, {
			"top": "auto",
			"bottom": editOffsetBottom + "px"
		});
	},

	//点击纵向滚动条
	clickVerticalScroll: function () {
		var snapshot = this.grid.getViewManager().getScrollView().snapshot;
		if ((this.index < snapshot.beginRowIndex) || (this.index >= snapshot.beginRowIndex + snapshot.showRows)) {
			dojo.style(this.firstNode, {
				"display": "none"
			});
			return;
		}
		this.clickScroll = true;
		//当用快捷键TAB/Enter换行后，在点击纵向滚动条时，不能在重新计算index
		this.setEditting = true;
		this.initEdit();
	},

	doLastCell: function () {
		dojo.style(this.unlockViewNode, {
			"right": "0px",
			"left": "auto"
		});
	},

	//获得最后一个cell的编号,编号从0开始计数（不包括隐藏的cell）
	_getLastVisibleCellIndex: function () {
		var cells = this.grid.getManager('LayoutManager').cells;
		for (var i = cells.length - 1; i >= 0; i--) {
			if (!cells[i].hidden) {
				return i;
			}
		}
		return 0;
	},

	//Tab或者Enter时，判断是否是一行最后一个，如果是换行
	isLastEditCell: function (inCell, evt) {
		var snapshot = this.grid.getViewManager().getScrollView().snapshot,
			cells = this.editedCell,
			gridCells = this.grid.getManager('LayoutManager').cells,
			viewManager = this.grid.getManager("ViewManager");
		//U_EAP00027735 不完美版 （这个版本滚动条到最右端才换行）
		if (this.index == (snapshot.rowCount - 1) && snapshot.lastCell) {
			if (inCell == cells[cells.length - 1]) {
				viewManager.scroller._scrollBarClickRight(1);
				dojo.stopEvent(evt);
			}
			return false;
		}
		if (inCell == cells[cells.length - 1]) {
			// if(inCell == cells[cells.length-1]){
			//如果可以显示所有列，不需要移动滚动条
			//			var rows = viewManager.getScrollView().contentStructure.rows[0];
			//关于隐藏列
			if ("none" == dojo.style(this.grid.xscrollerNode, "display")) {
				return true;
			}
			if (!snapshot.lastCell) {
				dojo.stopEvent(evt);
				viewManager.scroller._scrollBarClickRight();
				return false;
			} else {
				//refresh中不应该刷新rowEdit,
				//rowEdit换行设置snapshot.beginCellIndex为0，保留原来beginCellIndex的备份，在刷新cell是会用到
				var scrollView = this.grid.getViewManager().getScrollView();
				scrollView.originalSnapshotBeginCellIndex = scrollView.snapshot.beginCellIndex;
				this.noRefreshEdit = true;
				this.refreshCellPosition();
				this.grid.getRowEditManager().refreshRowEdit();
				scrollView.originalSnapshotBeginCellIndex = 0;
				dojo.stopEvent(evt);
				return false;
			}
		} else {
			return false;
		}
	},

	doLastTab: function () {
		var editedNodes = this.editedNode;
		//解决FF bug
		setTimeout(function () {
			editedNodes[0] && editedNodes[editedNodes.length - 1].focus();
		}, 0);
	},

	setEdit: function (rowIndex) {
		//如果this.setEditting为真，在initEdit中this.index为rowIndex
		this.setEditting = true;
		var rowCount = this.rowManager.getRowCount();
		if (rowIndex < 0 || rowIndex >= rowCount) {
			rowIndex = 0;
		}
		this.index = rowIndex;
		if (!this.grid.noInitEdit) {
			this.initEdit();
		} else {
			this.editing = true;
			this.grid.noInitEdit = false;
		}
	},

	//回车变成Tab切换焦点处理 
	_enter2Tab: function () {
		var cells = this.editedCell,
			editPre, editNext;
		var lens = cells.length;
		if (lens == 0) return;
		for (var i = 0, l = lens - 1; i < l; i++) {
			editPre = cells[i].getEditor();
			editNext = cells[i + 1].getEditor();
			editPre.setNextFocusId && editPre.setNextFocusId(editNext.id);
		}
		if (!editNext) {
			editNext = cells[0].getEditor();
		}
		editNext.setNextFocusId && editNext.setNextFocusId('unieap_for_focus');
	},

	//	//保留
	//	onEditorDown: function(inCell, evt){
	//		this.tabHandler= setTimeout(dojo.hitch(this,function(){
	//			var tabbing = 1;
	//			this.initEdit(0,tabbing);
	//		}),0);
	//	},
	//	//保留
	//	onEditorUp: function(inCell, evt){
	//		this.tabHandler= setTimeout(dojo.hitch(this,function(){
	//			this.initEdit(0,-1);
	//		}),0);
	//	},

	//Tab\Enter键快捷键，如果是最后一个，换行，否则什么都不做
	onEditorTab: function (inCell, evt) {
		// if(this.isLastEditCell(inCell, evt)){
		// 	inCell.edit.getEditor().fireDataChange&&inCell.edit.getEditor().fireDataChange();
		// 	dojo.stopEvent(evt);
		// 	var tabbing = 1;
		// 	this.initEdit(0,tabbing);
		// 	this.editedNode[0] && this.editedNode[0].focus();
		// 	/*Tab\Enter快捷键换行纵向滚动条也滚动 zhaos*/
		// 	this.grid.getManager("ViewManager").scroller._onEditorTabscrollBar();
		// } 

		var snapshot = this.grid.getViewManager().getScrollView().snapshot,
			cells = this.editedCell,
			gridCells = this.grid.getManager('LayoutManager').cells;
		var cellIndex = 0;
		for (var j = 0; j < cells.length; j++) {
			if (cells[j].id == inCell.id) {
				cellIndex = j;
			}
		}
		
		if (this.isLastEditCell(inCell, evt) || (inCell.index == gridCells.length - 2 && gridCells[gridCells.length - 1].enable == false)) {
			inCell.edit.getEditor().fireDataChange && inCell.edit.getEditor().fireDataChange();
			dojo.stopEvent(evt);
			var tabbing = 1;
			this.initEdit(0, tabbing);
			this.editedNode[0] && this.editedNode[0].focus();
			/*Tab\Enter快捷键换行纵向滚动条也滚动 zhaos*/
			this.grid.getManager("ViewManager").scroller._onEditorTabscrollBar();
		} else if (this.grid.xscrollerNode.style.display == "none" || cells[cells.length - 1].id == inCell.id) {
		
			return;
			//是否含有锁定列
		} else if (this.grid.rowEdit.lockViewNode.childNodes.length > 0) {
			if ((gridCells.length - (snapshot.showCells + snapshot.beginCellIndex) >= 0) && this.isFixedCell(inCell, evt) ) {
				console.log(this.grid.getManager("ViewManager").scroller.scrollView.snapshot.beginCellIndex,Math.trunc(cells[cellIndex].index/2));
				if(this.grid.getManager("ViewManager").scroller.scrollView.snapshot.beginCellIndex <Math.trunc(cells[cellIndex].index/2)+1){
					this.grid.getManager("ViewManager").scroller.scrollView.snapshot.beginCellIndex = Math.trunc(cells[cellIndex].index/2)+1;
				}
				// this.grid.getManager("ViewManager").scroller._scrollBarClickRight(1 ,7);
				// if (this.grid.getManager("ViewManager").scroller && this.grid.getManager("ViewManager").scroller.scrollView && this.grid.getManager("ViewManager").scroller.scrollView.snapshot) {
				// 	var beginCellIndex = this.grid.getManager("ViewManager").scroller.scrollView.snapshot.beginCellIndex;
				// 	var showCells = this.grid.getManager("ViewManager").scroller.scrollView.snapshot.showCells;
				// 	if(beginCellIndex+showCells>cells[cellIndex].index){
					
				// 	}else{
				// 		//如果需要向后跳格 那么表格的开始格 就相当于当前的格子 避免多次重复向后跳格   lind
				// 		this.grid.getManager("ViewManager").scroller.scrollView.snapshot.beginCellIndex = cellIndex;
				// 		this.grid.getManager("ViewManager").scroller._scrollBarClickRight(1, cellIndex);
				// 	}
				// }
			}
			if( (gridCells.length - (snapshot.showCells+snapshot.beginCellIndex)>=0) &&  this.isFixedCell(inCell, evt)){
    
				this.grid.getManager("ViewManager").scroller._scrollBarClickRight(2,cellIndex);
				}
		} else if (this.grid.rowEdit.lockViewNode.childNodes.length == 0 && (gridCells.length - (snapshot.showCells + snapshot.beginCellIndex) >= 0)) {
			this.grid.getManager("ViewManager").scroller._scrollBarClickRight();
		}
	},
	isFixedCell: function (inCell, evt) {
		var structure = this.grid.LayoutManager.structure;
		var fixedCells = [];
		var isScroll = true;
		for (var i = 0; i < structure.length; i++) {
			if (structure[i].noscroll == true) {
				fixedCells = structure[i].rows[0];
			}
		}
		for (var m = 0; m < fixedCells.length; m++) {
			if (fixedCells[m].id == inCell.id) {
				isScroll = false;
			}
		}
		return isScroll;
	},
	//在ViewManager中的resize方法中调用，当窗口大小改变时为了防止已经输入的数据丢失。   
	refreshEditTextBox: function (index) {
		if (index < 0) return //防止传进来的参数为-1 导致取不到编辑行报错
		if (this.isResize) {
			var editors = this.editedNode;
			//插入行时，有时this.editedCell为空，这时不需要此操作
			if (!this.editedCell) return;
			var editedCells = this.editedCell;
			for (var i = 0, len = editedCells.length; i < len; i++) {
				var editor = editors[i];
				//当编辑器为radioButton和checkBox时，不用重新赋值
				if (!editor.inputNode) continue;
				var value = editor.getValue();
				var cellName = editedCells[i].name;
				//this.grid.getBinding().getRowSet().getRow(index).setItemValue(cellName,value);
			}
		}
		this.isResize = true;
	},

	//刷新grid，纵向滚动条位置不变，横向滚动条位置变化snapshot.beginCellIndex设为0；
	refreshCellPosition: function () {
		var scrollView = this.grid.getViewManager().getScrollView();
		var rowCount = this.grid.getBinding().getRowCount();
		var views = this.grid.getManager("ViewManager").views;
		scrollView.snapshot.rowCount = rowCount;

		dojo.forEach(views, function (view) {
			view.snapshot.beginCellIndex = 0;
			view.snapshot.lastCell = false;
		});
		this.grid.resizeContainer();
	},

	_exit: function () {
		dojo.forEach(this.editedNode, function (editor) {
			if ((editor.dateYM == 'true' || editor.dateYM == true) && editor.popup && editor.popup.domNode) {
				dojo.style(editor.popup.domNode, "display", "none");
			}
			editor.destroy();
			editor = null;
		});
		dojo.forEach(this.editedCell, function (cell) {
			cell.destroy();
			cell.clearCellEdit();
		});
		dojo.disconnect(this.link);
		this.editedCell = [];
		this.editedNode = [];
		this.inputDivNodes = [];
		this.setEditting = false;
		this.grid.rowEdit = null;
		dojo.destroy(this.firstNode); //U_EAP00029322
	},

	applyEdit: function () {
		if (true == this.editing) {

			//this.editing = false放在这里当关闭编辑器时，不需要在ViewManager中在处理编辑器相关的逻辑
			this.editing = false;
			this.noRefreshEdit = true;
			var viewManager = this.grid.getManager("ViewManager");
			viewManager.views.length && viewManager.refreshPage();
			this._exit();
		}
	}
});
dojo.provide('unieap.xgrid.core.view');
dojo.require("dijit._Widget");
dojo.require("dijit._Templated");
dojo.require("unieap.xgrid.core.builder");
dojo.declare('unieap.xgrid.View', [dijit._Widget, dijit._Templated], {
	
	rowHeight : null,
	
	//视图可显示的行数，与snapshot.showRows不同，snapshot.showRows可能是rowcount
	_showRows: 0,
	
	_table: '<table class="u-xgrid-table" border="0" cellspacing="0" cellpadding="0" ',
	
	templateString: 
		"<div class='u-xgrid-view' dojoAttachPoint='viewNode'>" +
			"<div class='u-xgrid-header' dojoAttachPoint='headerNode'>" +
				"<div class='u-xgrid-headerContent' dojoAttachPoint='headerContentNode'></div>" +							
			"</div>" +
			"<div class='u-xgrid-scrollContent' dojoAttachPoint='scrollboxNode'>" +
				"<div class='u-xgrid-viewContent' dojoAttachPoint='contentNode'></div>" +
			"</div>" +
			"<div class='u-xgrid-total' dojoAttachPoint='totalNode'>" +
				"<div class='u-xgrid-totalContent' dojoAttachPoint='totalContentNode'></div>" +
			"</div>" +
		"</div>",
					
	postCreate: function() { 
		this.evts = [];
		this.rowHeight = this.grid.getRowManager().defaultRowHeight;
		this.rowNodes = [];
		this.contentStructure = {};
		this.headerBuilder = new unieap.xgrid.view.HeaderBuilder(this);
		if(this.grid.ViewManager.isHideHeader){
			dojo.style(this.headerContentNode,"height","0px");
			dojo.style(this.headerNode,"height","0px");
		}
		this.contentBuilder = new unieap.xgrid.view.ContentBuilder(this);
		this.totalBuilder = new unieap.xgrid.view.TotalBuilder(this);
	},
	destroy: function() {
		dojo.destroy(this.domNode);
		dojo.destroy(this.headerNode);
		dojo.destroy(this.totalNode);
		delete this.rowNodes;
		delete this.snapshot;
		this.inherited(arguments);
	},
	
	setStructure: function(inStructure) {
		this.structure = inStructure;
		this.noscroll = inStructure.noscroll;
		var rows = this.structure.rows;
		//hh用于获取锁定列header高度
		this.grid.ViewManager.hh = Math.max(this.grid.ViewManager.hh,rows.length);
		//this.cells = rows[rows.length-1];
		this.cells = [];
		for(var i = 0; i<rows.length ; ++i){
			for(var j = 0; j<rows[i].length; ++j){
				if(!rows[i][j].isMulTitle){
					this.cells.push(rows[i][j]);
				}
			}
		}
		this.snapshot = {
			beginRowIndex : 0,
			beginCellIndex : 0
		};
		this._buildisMulTitleStructure();
	},
	
	_prepareTable: function() {
		this.rowTable = {content : ""};
		var rows = this.structure.rows,wa=[],layout=[];
		for(var j=0; j<rows.length; j++) {
			wa[j] = [];
		}
		for(var j=0, index, cell, row; (row=rows[j]); j++) {
			index = 0;
			wa[j] = wa[j] || [];
			layout[j] = layout[j] || [];
			for (var i=0, l; (cell=row[i]); i++) {
				if((l=Number(cell.colSpan))>1) {
					for (var k=0;k<l;k++) {
						while(wa[j][index]!=null) {
							index++;
						};
						for(var k1=1,ll=Number(cell.rowSpan);k1<ll;k1++) {
							wa[j+k1] = wa[j+k1] || [];
							wa[j+k1][index] = -1;
							layout[j+k1] = layout[j+k1] || [];
							layout[j+k1][index] = cell.index;
						}
						wa[j][index] = -1;
						layout[j][index] = cell.index;
						index++;
					}
				} else {
					while(wa[j][index]!=null) {
						index++;
					};
					wa[j][index] = cell.index;
					layout[j][index] = cell.index;
					for(var k=1,l=Number(cell.rowSpan);k<l;k++) {
						wa[j+k] = wa[j+k] || [];
						wa[j+k][index] = wa[j][index];
						layout[j+k] = layout[j+k] || [];
						layout[j+k][index] = layout[j][index];
					}
					index++;
				}
			}
		}
		this.rowTable["layout"] = layout;
		this.rowTable["cache"]  = wa;
	},
	
	_generateTableColGroup: function() {
		var wa = this.rowTable["cache"],t = [], w = [];
		t.push("<colgroup>");
		var layout = this.grid.LayoutManager;
		for (var k=0,l = wa[0].length; k< l;k++) {
			for(var i=0;i<wa.length;i++) {
				if (wa[i][k] != -1) {
					var cell = layout.getCell(wa[i][k]);
					if (this.noscroll && cell.isPercent() && !cell.isRowBar) {
						cell.setWidth("200px");
					}
					t.push("<col style='width:"+cell.getWidth()+"'>");
					w.push(cell);
					break;
				}
			}
		}
		t.push("</colgroup>");
		this.rowTable["colgroup"] = t.join("");
		this.rowTable["cols"] = w;
	},
	
	_buildisMulTitleStructure:function(){
		this._prepareTable();
		this._generateTableColGroup();
		var _t = this.rowTable["layout"];
		var layout = this.grid.LayoutManager;
		if (_t.length == 0) {
			return;
		}
		//映射多标题表结构,升级法
		for (var i,j=0,cursor,cell; j<_t[0].length; j++,i=_t.length-1) {
			i=_t.length-1;
			cursor = _t[i][j];
			i--;
			while(i>=0) {
				cell = layout.getCell(_t[i][j]);
				if (cell.isMulTitle) {
					_t[i][j] = cursor;
				} else {
					cursor = _t[i][j];
				}
				i--;
			}
		}
		var d = [];
		for (var i=0; i<_t.length-1; i++) {
			var same = true;
			for (var j=0; j<_t[i].length; j++) {
				if (_t[i][j] != _t[i+1][j]) {
					same = false;
					break;
				}
			}
			if (same) {
				d.push(i);
			}
		}
		//删除重复行
		for (i in d) {
			delete _t[i];
		}
		//生成contentStructure
		var rows = [], cs=[];
		for (i in _t) {
			if (typeof(_t[i]) == "function") {
				continue;
			} else {
				rows.push(_t[i]);
			}
		}
		for (var i=0; i<rows.length; i++) {
			var row = [];
			for (var j=0,cell; j< rows[i].length;) {
				if (rows[i][j] == -1) {
					j++;
					continue;
				}
				cell = layout.getCell(rows[i][j]);
				//compute rowSpan
				var n = i + 1;
				while(rows[n] && rows[n][j] == rows[i][j]) {
					rows[n][j] = -1;
					n++;
				}
				var rowSpan = n-i;
				if (rowSpan && rowSpan>1) {
					cell.contentRowSpan = rowSpan;
				}
				//compute colSpan
				n = j+1;
				while(rows[i][j] == rows[i][n]) {
					n++;
				}
				var colSpan = n-j;
				if (colSpan && colSpan>1) {
					cell.contentColSpan=colSpan;
				}
				
				row.push(cell);
				j = n;
			}
			cs.push(row);
		}
		this.contentStructure.rows = cs;
	},
	
	
	//判断当前视图是否存在指定的cell
	hasCell: function(inCell) {
		if(this.declaredClass != 'unieap.xgrid.View') return;
		var rows = this.structure.rows;
		for (var row=0; row<rows.length; row++) {
			for (var c=0; c<rows[row].length; c++) {
				if (inCell == rows[row][c])
					return true;
			}
		}
		return false;
	},
	
	render : function(){
		this.renderHeader();
		if(this.snapshot.viewHeight!=null){
			this.renderContent();
		}
		this.renderTotal();
	},
	
	renderLockedRow: function(data,flag){
		if(!data || data.length==0){
			return;
		}
		if(!this.lockedNode){
			var isAbsolute;
			var _tem =	"<div class='row-locked-splitter' dojoAttachPoint='rows_locked'>"+
							"<div class='u-grid-locked-content'>"+ //去掉z-index 否则某些情况下会被遮挡
								"<div class='u-grid-inner'>"+
									"<div class='u-grid-locked-content-rows' dojoAttachPoint='locked-rows'>"+
									"</div>"+
								"</div>"+
							"</div>"+
						"</div>",
				node=dojo._toDom(_tem);
			this.lockedContentNode = node;
			this.lockedNode=node.childNodes[0].childNodes[0].childNodes[0];
			this.lockedScrollNode=this.lockedNode.parentNode;
			this.generateLockedRow(this.lockedNode,data,flag)
			dojo.place(node,this.scrollboxNode);
		}else{
			this.generateLockedRow(this.lockedNode,data,flag)
		}
	},
	generateLockedRow:function(lockedNode,data,flag){
		var inner=this.generalLockedHTML(data);
		lockedNode.innerHTML=inner;
		if(!this.isRowBar && this.noscroll && this.cells.length>0){
			if(dojo.isIE){
				dojo.query("table>tbody>tr",this.lockedNode).forEach(function(tr){
					if(tr.cells.length>0){
						dojo.addClass(tr.cells[tr.cells.length-1].firstChild,"locked-splitter");
					}
				});
			}else{
				dojo.addClass(this.lockedContentNode,"locked-splitter");
			}
		}
		this.resizeLocked(data,flag);
	},
	generalLockedHTML: function(data){
		var html = [],
			snapshot = this.snapshot,
			showCells = this.snapshot.showCells || this.cells.length;
		!this.snapshot.xscroller &&  (this.snapshot.beginCellIndex = 0);
		var tableWidth = this.getRealWidth(this.snapshot.beginCellIndex,showCells);
		this.isRowBar ? html.push("<div class='u-xgrid-rowbar-table'") : html.push("<div class='xgrid-table-layout' dojoAttachPoint='locked_rows'");
		var temp = isNaN(tableWidth)?"":"px";
			html.push("style='width:"+(tableWidth-1)+temp+";");
			html.push(snapshot.lastRow && "bottom:0px;" || "");
			if("none" == dojo.style(this.grid.yscrollerNode,"display")){
				html.push(snapshot.lastCell && "right:1px;" || "");
			}else{
				html.push(snapshot.lastCell && "right:17px;" || "");
			}
			html.push("'>");
			html.push(this._table);
			html.push("style='width:100%;");
			html.push("'>");
		if(this.isRowBar){
			for(var j=0;j<data.length; j++) {
				html.push(this.generateBlankCell(true));
			}
		}else{
			var colgroup = ["<colgroup>"];
			var rows = this.contentStructure.rows,
				row = rows[0];
			var unShowNum = 0;
			for(var i=0;i<showCells; i++) {
				var cellIndex = this.snapshot.beginCellIndex + i + unShowNum,
					cell = row[cellIndex];
				if(cell){
					if(!cell.hidden){
						colgroup.push("<col style='width:")
						colgroup.push(cell.getWidth());
						colgroup.push("'>");
					} else {
						unShowNum++;
						i--;
					}
				}
			}
			colgroup.push("</colgroup>");
			html.push(colgroup.join(""));	
			html.push("<tbody>");
			for(var j=0;j<data.length; j++) {
				var rowIndex = snapshot.beginRowIndex + j;
				html.push('<tr class="'+(j%2?"u-xgrid-odd":"u-xgrid-even")+'">');
				var unShowNum = 0;
				for(var i=0,cell; i<showCells; i++) {
					var cellIndex = i+snapshot.beginCellIndex+unShowNum,
				 		cell = row[cellIndex],
				 		nodeHeight = this.rowHeight;
				 	if(cell){
					 	if(!cell.hidden){
							if(this.isRowBar){
								html.push('<td class="u-grid-rowbar-cell">');
								html.push('<nobr class="" style="height:'+(nodeHeight)+'px">');
								html.push('</td>');
							}else{
								html.push('<td>');
								html.push('<div class="u-xgrid-cell" style="height:'+(nodeHeight)+'px">');
								//html.push('<div class="u-xgrid-text">');
								//html.push('<div class="u-xgrid-text2">');
								if(cell.name in data[j]){
									html.push(data[j][cell.name]);
								}
								html.push('</div></td>');
							}
					 	}else {
							unShowNum++;
							i--;
						}
				 	}
				}
				html.push('</tr>');
			}
		}
		html.push('</tbody>');
		html.push('</table>');
		html.push('</div>');
		return html.join('');
	},
	resizeLocked:function(data,flag){

		this.grid.lockedRowData = data; //U_EAP00028153
		dojo.style(this.lockedScrollNode,'height',(data.length*this.rowHeight) + "px");
		var contentHeight = dojo.style(this.contentNode,'height'),
			bottomValue;
		if(flag){
			//lockedRow的高度可能比content要高 //U_EAP00028153
			var leftHeight = (contentHeight - (data.length*this.rowHeight)>0) ? (contentHeight - (data.length*this.rowHeight)) : 0;
			dojo.style(this.contentNode,'height',leftHeight +"px");
			this.snapshot.viewContentHeight = leftHeight;
		}
		this.snapshot.viewHeight -= data.length*this.rowHeight;
		if(!this.noscroll){
			for(var c = this.rowTable["cols"],i=c.length-1;i>=0;i--) {
				if(c[i].isPercent()) {
					dojo.style(this.lockedNode,'width','100%');
					dojo.style(this.lockedContentNode,'width',dojo.style(this.contentNode,'width')+'px');
                    return ;
				}
			}
		}
//		var lockedContentNodeWidth = dojo.style(this.contentNode,'width');
//		if(!flag && !dojo.isIE){
//			lockedContentNodeWidth--;
//		}
//		dojo.style(this.lockedContentNode,'width',lockedContentNodeWidth+'px');
//		dojo.style(this.lockedContentNode.childNodes[0],'width',dojo.style(this.contentNode,'width')+'px');
//		this.snapshot.xscroller ? (bottomValue = this.grid.scrollerOffset) : (bottomValue = 0);
//		dojo.style(this.lockedContentNode,'bottom',bottomValue+'px');
	},
	renderHeader: function() {
		if(this.grid.ViewManager.isHideHeader) return;
			//设置grid的初始WEB_PAGE_NAME  
			var WEB_PAGE_loacalstore=(top&&top.app&&top.app.getCurrentMenu&&top.app.getCurrentMenu())||(top&&top.app&&top.app._store.getState().global.currentMenu)||{};
			if(!this.grid.LayoutManager.WEB_PAGE_NAME && WEB_PAGE_loacalstore.id){
				this.grid.LayoutManager.WEB_PAGE_NAME = WEB_PAGE_loacalstore.id;
			}
		//给表格叫初始数据
		this.grid.LayoutManager.initHeadData=this.cells;
		this.headerContentNode.innerHTML = this.headerBuilder.generateHtml();
		unieap.xgrid.notify(this, "onHeaderRender",[this.headerContentNode,this]);
		dojo.publish(this.grid.id + "onHeaderRender4Filter",[null]);
	},

	renderTotal: function() {
		this.totalContentNode.innerHTML = this.totalBuilder.generateHtml();
	},

	//获取实际的宽度
	getRealWidth : function(beginCellIndex,showCells){
		if(this.isRowBar) return this.getRowBarWidth();
		var rows = this.contentStructure.rows,
			row = rows[0];
		if(0==arguments.length){
			beginCellIndex = 0;
			//showCells = this.cells.length ;
			showCells = row.length;
		}
		if(!showCells){
			//showCells = this.cells.length ;
			showCells = row.length;
		}
		var width = 0;
		for(var i=0;i<showCells; i++) {
			var cellIndex = beginCellIndex + i ;
			if(this.contentStructure.rows){
				cell = row[cellIndex];
			}
			else{
				cell = this.cells[cellIndex];
			}
			if(cell && !cell.hidden){
				if(!cell.resized && cell.isPercent()) {
					if(this.noscroll){
						width += 200;
					} else{
						//if(cell.width!=100){
						//	cell.width=cell.width+'%';
						//}
						return '100%';
					}
				}
				width+=cell.getPixelWidth();
			}
		}

		return width;
	},
	setViewLeftPosition : function(left){ //表头对齐的问题  2018-12-24  LD
		if(!this.grid.ViewManager.rowNumber && this.grid.SelectionManager &&this.grid.SelectionManager.view.selectType == 'none'){
			dojo.style(this.headerNode,"left",left+"px");
		}else{
			if(left == 0){
				dojo.style(this.headerNode,"left",left +"px");
				dojo.style(this.headerNode,"border-right",'1px solid rgba(215, 215, 215, 0.5)');
				dojo.style(this.headerNode,"z-index",'99');
			}else{
				dojo.style(this.headerNode,"left",(left - 1)+"px");
			}

		}

		
		dojo.style(this.viewNode,"left",left+"px");
		dojo.style(this.totalNode,"left",left+"px");
	},
	resize : function(w,h,autoHeight){ //U_EAP00029644

		var snapshot = this.snapshot,
			scrollerOffset = this.grid.scrollerOffset;
		//设置最小宽度和高度

       
        w = w< scrollerOffset ? scrollerOffset : w;
		h = h< scrollerOffset ? scrollerOffset : h;
		if(this.noscroll){
			w = this.getRealWidth();
		}
		snapshot.viewWidth = w;
		snapshot.viewHeight  = h;
		snapshot.viewContentWidth = w;
		snapshot.viewContentHeight = h;
		snapshot.yscroller = false;
		snapshot.xscroller = false;

		dojo.style(this.headerNode,"width",w + "px");
		dojo.style(this.viewNode,{
			"width" : w + "px",
			"height" : h + "px"
		});
		dojo.style(this.totalNode,"width",w + "px");
		//计算表格可显示多少条数据
		this._showRows = Math.ceil(h / this.grid.getRowManager().defaultRowHeight);
		//先计算高度
		var rowCount = this.grid.getBinding().getRowCount(),
			totalRowHeight = rowCount * this.grid.getRowManager().defaultRowHeight;
		if(this.grid.lockedRow && this.grid.lockedRowData){ //U_EAP00028153
			totalRowHeight += this.grid.lockedRowData.length * this.grid.getRowManager().defaultRowHeight;
		}
		if(!this.grid.getManager("ViewManager").autoRender){
			rowCount = 0;
			totalRowHeight = 0;
		}
		//表格实际高度
		snapshot.totalRowHeight = totalRowHeight;
		//总记录数
		snapshot.rowCount = rowCount;
		//如果是锁定视图则不计算高度
		if(!this.noscroll && totalRowHeight>h){
			snapshot.yscroller = true;
			snapshot.viewContentWidth = snapshot.viewWidth - scrollerOffset;
		}
		//如果锁定视图或百分比表格
		snapshot.showCells = this.cells.length;
		if((!this.noscroll && !snapshot.percentage)){
			//计算是否应该有横向滚动条
			var headerContentWidth = this.getRealWidth();
			if(this.contentStructure.rows){
				var rows = this.contentStructure.rows,
					row = rows[0];
			}
			else{
				var row = this.cells;
			}
			
			if(headerContentWidth > snapshot.viewContentWidth){
				snapshot.xscroller = true;
				var beginCellIndex = snapshot.beginCellIndex,
					visibleWidth = 0;
				snapshot.showCells = 0;
				//for(var i=beginCellIndex,cell;cell = this.cells[i];i++){
				if(snapshot.lastCell){
					snapshot.beginCellIndex = 0;
					for(var i=row.length-1,cell;(cell = row[i]);i--){
						visibleWidth+=cell.getPixelWidth();
						snapshot.showCells ++;
						if(visibleWidth>=snapshot.viewContentWidth){
							snapshot.beginCellIndex = i;
							break;
						}
					}
					if(visibleWidth<snapshot.viewContentWidth){
						snapshot.lastCell = false;
					}
					
				}else{
					for(var i=beginCellIndex,cell;(cell = row[i]);i++){
						visibleWidth+=cell.getPixelWidth();
						snapshot.showCells ++;
						if(visibleWidth>=snapshot.viewContentWidth){
							break;
						}
					}
					//判断beginCellIndex的合法性
					for(;visibleWidth<snapshot.viewContentWidth;){
						snapshot.lastCell = true;
						snapshot.beginCellIndex --;
						visibleWidth+= this.cells[snapshot.beginCellIndex].getPixelWidth();
						snapshot.showCells++;
						if(0==snapshot.beginCellIndex) break;
					}
				}
				
				
				snapshot.viewContentHeight = autoHeight?snapshot.viewHeight:snapshot.viewHeight -scrollerOffset; //U_EAP00029644
				snapshot.viewHeight = autoHeight?snapshot.viewHeight + scrollerOffset:snapshot.viewHeight;
				//如果此时还存在纵向滚动条的场景
				if(false==snapshot.yscroller){
					if(totalRowHeight + scrollerOffset > snapshot.viewHeight){
						snapshot.yscroller = true;
						snapshot.viewContentWidth = snapshot.viewWidth - scrollerOffset;
					}
				}
			}else{
				if(true==snapshot.yscroller){
					if(headerContentWidth > snapshot.viewContentWidth ){
						snapshot.xscroller = true;
						snapshot.viewContentHeight = snapshot.viewHeight - scrollerOffset;
					}else{
						snapshot.lastCell = false;
					}
				}
			}
		}
		//设置偏移量
		dojo.style(this.headerContentNode,"marginRight",snapshot.yscroller && (scrollerOffset-1+"px") || "0px");			
		//非锁定视图再设置应该显示多少条记录
		if(!this.noscroll){
			var showRows = Math.ceil(snapshot.viewContentHeight / this.grid.getRowManager().defaultRowHeight);
			snapshot.showRows = Math.min(showRows,rowCount);
			//考虑当前的beginRowIndex的合法性，可视的记录小于showRows，重新确定beginRowIndex
			if(snapshot.beginRowIndex + snapshot.showRows > rowCount){
				snapshot.beginRowIndex = rowCount - snapshot.showRows;
				snapshot.lastRow = true;
			}
		}
		//设置ViewContent容器和滚动条的宽高
		dojo.style(this.contentNode,{
			"width": snapshot.viewContentWidth+"px",
			"height" : snapshot.viewContentHeight+1+"px"
		});
	},
	renderContent : function(){
		var snapshot = this.snapshot;
		var headerTable = this.headerContentNode.firstChild;
		if(headerTable){
			if(snapshot.lastCell){
				dojo.style(headerTable,{
					"left":"auto",
					"right" : "0"
				});	
			}else{
				dojo.style(headerTable,{
					"left": -(snapshot.scrollWidth || 0) + "px",
					"right" : "auto"
				});	
			}
		}
		var totalTable = this.totalContentNode.firstChild;
		
		if(totalTable){
			if(snapshot.lastCell){
				dojo.style(totalTable,{
					"left":"auto",
					"right" : "0"
				});	
			}else{
				dojo.style(totalTable,{
					"left": -(snapshot.scrollWidth || 0) + "px",
					"right" : "auto"
				});	
			}
		}
	//		this.headerContentNode.innerHTML = this.headerBuilder.generateHtml();
			this.contentNode.innerHTML = this.contentBuilder.generateHtml();
			

// ****************判断是否设置了表格自动高度 处理右边rowbar  lind****************
if(this.grid.class.indexOf('xgridCellAutoHeight')>-1){
		 var viewdoms =  dojo.query('tr',this.id);
		 if(viewdoms.length){
			var trs= $('#'+this.id).prev().find('tr');
			if(trs.length){
				for(var i=0;i<trs.length;i++){
					$(trs[i]).find('.u-xgrid-rowbar-choice').css('height',viewdoms[i].offsetHeight-1) ;
					$(trs[i]).find('.u-xgrid-rowbar').css('height',viewdoms[i].offsetHeight-1) 
				}
			}
		 }
		}
// ****************************************************************

		//锁定列右边线为黑色
		if(!this.isRowBar && this.noscroll && this.cells.length>0){
			if(dojo.isIE < 9){
				var ths = dojo.query("table>tbody>tr>th",this.headerContentNode);
				if(ths.length){
					dojo.addClass(ths[ths.length-1],"locked-splitter");
						var trs = dojo.query("table>tbody>tr",this.contentNode).forEach(function(tr){
							dojo.addClass(tr.cells[tr.cells.length-1].firstChild,"locked-splitter");
						});
				}
			}else{

				dojo.style(this.headerContentNode,"width",dojo.style(this.headerNode,'width')+"px");
				dojo.addClass(this.headerNode,"locked-splitter");
				var contentNodeWidth = dojo.style(this.contentNode,'width');
				//避免每次有页面刷新的时候都将contentNodeWidth加1
				if(this.grid.splitterFlag != contentNodeWidth){
					dojo.style(this.contentNode,"width",contentNodeWidth+1+"px");
					this.grid.splitterFlag = dojo.style(this.contentNode,'width');
				}
				dojo.addClass(this.contentNode.firstChild,"locked-splitter");
				dojo.style(this.totalContentNode,"width",dojo.style(this.totalNode,'width')+"px");
				dojo.addClass(this.totalNode,"locked-splitter");
			}
		}
		this.grid.getManager("ViewManager").publish("resize");
		//改变header容器的位置
		if(this.noscroll || snapshot.percentage){
			return;
		}
	},
	updateCellWidth: function(inCell, inWidth) {
		inCell.percent = false;
		inCell.setWidth(inWidth);		
		var colCells = this.rowTable["cols"],
			layout = this.grid.getManager("LayoutManager"),
			w = 0, t = [], index = -1, isPercent = false;
			t.push("<colgroup>");
		for (var i=0,cell,vw,col; colCells[i]; i++) {
			cell = colCells[i];
			if (cell == inCell) {
				index = i;
			}
			if (cell.isPercent()) {
				isPercent = true;
			}

			t.push("<col style='width:"+cell.getWidth()+";'>");
			w += cell.getPixelWidth();
		}
		t.push("</colgroup>");
		this.rowTable["colgroup"] = t.join("");
		
		var viewManager = this.grid.getManager("ViewManager");
		if(this.grid.rowEdit && 
		   this.grid.rowEdit.editShowCells == viewManager.getScrollView().snapshot.showCells){
			this.grid.rowEdit.updateCellWidth = true;
		}
		this.renderHeader();
		viewManager.refreshPage();
	},
	//cell.index是准备移动的idx，toCell是非锁定视图从0开始计算的idx
	updateColumnPosition: function(cell,toCell,lockingColNo,tuning){
		var viewManager = this.grid.getManager("ViewManager");
		//判断有没有rowbar找到锁定列视图
		var lockingindex = 0;
		if((lockingColNo > 0) && this.grid.getManager("ViewManager").views[0].isRowBar){
			lockingindex = 1;
		}
		//原列在锁定视图中，在锁定视图的structure中删除
		if(cell.index < lockingColNo){
			var removeCellNum = cell.index;
		}else{
			var removeCellNum = cell.index-lockingColNo;
		}
		var removed = this.structure.rows[0].splice(removeCellNum,1);
		var removedcontent = this.contentStructure.rows[0].splice(removeCellNum,1);
		//目标列在锁定视图中，将移动列加入锁定视图中，否则加入非锁定视图中,如果tuning为-1表示将非锁定列移动到锁定列最后一个位置，当tuning为1表示将锁定列移动到非锁定列第一个位置
		if((toCell < lockingColNo || tuning == -1) && tuning != 1){
			viewManager.views[lockingindex].structure.rows[0].splice(toCell,0,removed[0]);
			viewManager.views[lockingindex].contentStructure.rows[0].splice(toCell,0,removed[0]);
		}else{
			toCell -= lockingColNo;
			if(lockingColNo > 0){
				if(cell.index < lockingColNo){
					toCell++;
				}
					viewManager.views[lockingindex+1].structure.rows[0].splice(toCell,0,removed[0]);
					viewManager.views[lockingindex+1].contentStructure.rows[0].splice(toCell,0,removed[0]);
			}else{
				this.structure.rows[0].splice(toCell,0,removed[0]);
				this.contentStructure.rows[0].splice(toCell,0,removed[0]);
			}
		}
		//refreshPage
		var layoutManager = this.grid.getManager("LayoutManager");
		if(layoutManager.structure[0].type=="unieap.xgrid.RowView"){
			layoutManager.structure.shift();
		}
		if(layoutManager.structure[0].noscroll && layoutManager.structure[0].rows[0].length == 0){
			layoutManager.structure.splice(0,1);
		}
		var snapshot = this.grid.getViewManager().getScrollView().snapshot;
		//当notifyEdit为1时，在viewmanager中不需要处理关于行编辑
		if(this.grid.rowEdit){
			this.grid.notifyEdit = 1;
		}
		layoutManager.setStructure(layoutManager.structure);
		this.grid.getViewManager().getScrollView().snapshot = snapshot;
		//this.grid.resizeContainer();
		if(this.grid.rowEdit){
			this.grid.notifyEdit = 2;
		}
		viewManager.refreshPage();
	},
	
	doContentEvent: function(e) {
		if(this.contentBuilder.decorateEvent(e)) {
			this.grid.onContentEvent(e);
		}
	},
	doHeaderEvent: function(e) {
		if(this.headerBuilder.decorateEvent(e)) {
			//防止快速点击表头多次排序,当数据量过大时会使得浏览器假死
			typeof(this._flag)=='undefined'&&(this._flag=true)
			if(this._flag&&e.type=='click'){
				this._flag=false;
				this.grid.onHeaderEvent(e);
				setTimeout(dojo.hitch(this,function(){
					this._flag=true;
				}),250)
				
			}else if(e.type!='click'){
				this.grid.onHeaderEvent(e);
			}
			
		}
	},
	doTotalEvent: function(e) {
		if(this.totalBuilder.decorateEvent(e)) {
			this.grid.onTotalEvent(e);
		}
	},
	getRowNode: function(inRowIndex) {
		var viewName = this.id,
			rowNodes = dojo.query("tr",viewName);
		return rowNodes[inRowIndex];
	},
	getCellNode: function(inRowIndex, inCellIndex) {
		var row = this.getRowNode(inRowIndex);
		if (row) {
			return this.contentBuilder.getCellNode(row, inCellIndex);
		} else {
			return null;
		}
	},
	getCurrentRows: function() {
		var rows = [];
		for(i in this.rowNodes) {
			if (isNaN(i)) {continue;}
			rows.push(Number(i));
		}
		return rows;
	},
	// event dispatch(from Grid)
	dispatchContentEvent: function(e) {
		return this.contentBuilder.dispatchEvent(e);
	},
	dispatchHeaderEvent: function(e) {
		return this.headerBuilder.dispatchEvent(e);
	},
	dispatchTotalEvent: function(e) {
		return this.totalBuilder.dispatchEvent(e);
	},
	onMouseOver: function(e) {
		unieap.xgrid.notify(this, "onMouseOver", [e]);
	},
	onMouseOut: function(e) {
		unieap.xgrid.notify(this, "onMouseOut", [e]);
	},
	
	//鼠标移过表头
	onMouseOverHeader: function(e) {
		unieap.xgrid.notify(this, "onHeaderMouseOver", [e]);
	},
	
	
	//鼠标移出表头
	onMouseOutHeader: function(e) {
		unieap.xgrid.notify(this, "onHeaderMouseOut", [e]);
	},
	
	onMouseOverRow: function(e) {
		unieap.xgrid.notify(this, "onMouseOverRow", [e]);
	},
	onMouseOutRow: function(e) {
		unieap.xgrid.notify(this, "onMouseOutRow", [e]);
	}
});


dojo.provide('unieap.xgrid.core.rowbar');
dojo.require('unieap.xgrid.core.view');

dojo.declare('unieap.xgrid.RowView', unieap.xgrid.View, {
	
	
	//noscroll用来标识本视图是一个锁定视图。
	noscroll: true,
	
	//标识本视图是一个rowBar视图
	isRowBar: true,
	
	postCreate: function() {
		this.inherited(arguments);
		this._fs = parseInt(dojo.style(this.grid.domNode,"fontSize"))/2 || 8 ;
	},
	
	setStructure: function(inStructure) {
		this.structure = inStructure;
		this.cells = [];
		this.cells.length = 1;
		this.snapshot = {
			beginRowIndex : 0,
			beginCellIndex : 0
		};
	},
	
	prepareHtml: function() {
		
		// var html = [];
		// html.push('<table class="u-grid-rowbar-table" style="height:');
		// //html[1]: rowHeight
		// html.push('');
		// html.push('px;" cellspacing=0 cellpadding=0>');
		
		// html.push('<tr>');
		// //html[4]: cells
		// html.push('');
		// html.push('</tr></table>')
		// return html;
		var html = [];
		html.push('<tr class="" gridrowindex=');		
		html.push('');
		html.push('>');	
		//html[3]: cells
		html.push('');
		html.push('</tr>')
		return html;
	},
	//为rowbar准备header的HTML
	generateHeader: function() {
		var html = this.prepareHtml();
		html[1] = -1;	
		html[3] = this.generateRowCells(-1);
		return html.join('');
	},	
	//为rowbar准备content的HTML
	generateContent: function(inRowIndex) {
		var html = this.prepareHtml();
		html[1] = inRowIndex;
		if(arguments.length >1){
            html[3] = this.generateRowCells(inRowIndex,'tr');
		}else{
            html[3] = this.generateRowCells(inRowIndex);
        }
		return html.join('');
	},
	//产生rowNumberCell的HTML
	generateRowNumberCell: function(inRowIndex) {
		if(inRowIndex<0 || arguments.length > 1 ){
			return this.generateBlankCell(false,inRowIndex);
		}
		var result = [];
		var store = this.grid.getBinding().getDataStore();
		var nodeHeight = this.grid.getManager("RowManager").defaultRowHeight;
		inRowIndex += (store.getPageNumber()-1) * store.getPageSize();
		result.push('<td class="">');
		result.push('<div class="u-xgrid-rowbar" style="height:'+(nodeHeight-1)+'px;line-height:'+(nodeHeight-1)+'px;">');
		result.push('<div class="u-xgrid-rowbar-cell">');
		result.push(inRowIndex+1);
		result.push('</div></div></td>');
		return result;
	},
	//产生空cell的HTML
	generateBlankCell : function(bool,inRowIndex){
		
		var result = [];
		if(!bool){
			var hheight;
			result.push('<td class="" >');
			if(inRowIndex<0){
				hheight = this.grid.ViewManager.getHeaderHeight();
				result.push('<div class="u-xgrid-rowbar" style="height:'+(hheight-1)+'px; line-height:'+(hheight-1)+'px">');
			} else {
				hheight = this.grid.getManager("RowManager").defaultRowHeight;
				result.push('<div class="u-xgrid-rowbar" style="height:'+(hheight-1)+'px; line-height:'+(hheight-1)+'px">');
			}
			result.push('<div class="u-xgrid-rowbar-cell">')
			if(inRowIndex == -1){//如果是rowbar 就添加 NO.
				result.push('NO.');
			}else{
				result.push('&nbsp;');
			}
			result.push('</div></div></td>');
			return result;
		} else {                //为锁定列产生空的rowbar提供的方法
			var html = [];
			html.push('<tr class="" gridrowindex=-1>');	
			html.push('');
			html.push('</tr>')
			var hheight = this.grid.getManager("RowManager").defaultRowHeight;
			result.push('<td class="" ><div class="u-xgrid-rowbar" style="height:'+(hheight-1)+'px; line-height:'+(hheight-1)+'px">');
			result.push('<div class="u-xgrid-rowbar-cell">&nbsp;</div></div></td>')
			html[1] = result.join("");
			return html.join("");
		}
	},
	//根据inRowIndex生成相应的rowBar的HTML	
	generateRowCells: function(inRowIndex) {
		var selectManager = this.grid.getManager("SelectionManager");
		if(arguments.length > 1){
            var cells= this.rowNumber ?  this.generateRowNumberCell(inRowIndex,'tr') : [];

        }else{
            var cells= this.rowNumber ?  this.generateRowNumberCell(inRowIndex) : [];

        }
		if(selectManager && arguments.length ==1 ){
			var td;
			td=selectManager.generateRowBarCells(inRowIndex);
			td && cells.push(td);
		}
		if (cells.length==0 && arguments.length ==1) {
			cells = this.generateBlankCell(false,inRowIndex);
		}
		return cells.join('');
	},
	//生成colgroup的HTML
	genarateColgroup: function(){
		var colgroup = ["<colgroup>"];
		var view = this.grid.getManager("ViewManager");
		var select = this.grid.getManager("SelectionManager");
		if(view.rowNumber){
			var bindManager = this.grid.getBinding();
			var number = bindManager.getRowCount() + (bindManager.store.pageNumber-1)*bindManager.store.pageSize;
			var width = Math.max((String(number).length*this._fs+10),30);
			colgroup.push("<col style='width:")
			if(select&&(select.selectType=='s'||select.selectType=='single'
				||select.selectType=='m'||select.selectType=='multiple')){

				colgroup.push(width);
				colgroup.push("px'>");
				colgroup.push("<col style='width:29px'>");

			} else {

				colgroup.push(width-1);
				colgroup.push("px'>");
			}
			return colgroup.join("");
		} 
		colgroup.push("<col style='width:34px'>");
		colgroup.push("</colgroup>");
		return colgroup.join("");
	},
	
	//计算获得rowbar的宽度
	getRowBarWidth: function() {	
		var	width = 0;
		var view = this.grid.getManager("ViewManager");
		if(view.rowNumber){
			var bindManager = this.grid.getBinding();
			var number = bindManager.getRowCount() + (bindManager.store.pageNumber-1)*bindManager.store.pageSize;
			width = Math.max((String(number).length*this._fs+10),30);
		}
		var select = this.grid.getManager("SelectionManager");
		if(select){
			var colWidth = view.rowNumber ? select.getRowBarWidth() : select.getRowBarWidth()+5;
			// console.log(width,colWidth);

			width +=  colWidth;
		}
		return width==0?60:width;
	},
	//处理点击rowbar的header的事件
	dispatchHeaderEvent: function(e) {
		if("click"==e.type && "INPUT"==e.target.tagName.toUpperCase()) {
			this.grid.getManager("SelectionManager").setAllSelect(e.target.checked) || dojo.stopEvent(e);
		}
	},
	//处理点击rowbar的content的事件
	dispatchContentEvent: function(e) {
		if("click"==e.type && "INPUT"==e.target.tagName.toUpperCase()) {
			var select = this.grid.getManager("SelectionManager");
			var rowIndex = Number(e.rowIndex);
			switch(select.getSelectType()) {
				case select.types.s:
				case select.types.single: 
					select.setSelect(rowIndex, true, e);
					break;
				case select.types.m:
				case select.types.multiple: 
					select.setSelect(rowIndex, !select.isSelected(rowIndex), e);
					break;
			}
		}
		return true;
	}	
});
dojo.provide('unieap.xgrid.core.scroller');
dojo.declare('unieap.xgrid.Scroller', null, {
	//纵向滚动条控制器高度
	yScrollBarHandleHeight:null,
	//横向滚动条控制器长度
	xScrollBarHandleWidth:null,
	//纵向滚动条控制器
	yScrollHandle:null,
	//横向滚动条控制器
	xScrollHandle:null,
	//判断是否是点击空白处来移动 滚动条
	yScrollBlack:false,
	
	xScrollBlack:false,	
	
	constructor: function(viewManager) {
		this.connects = [];
		this.viewManager = viewManager;
		this.scrollView = viewManager.getScrollView();
		
		var grid = this.grid = viewManager.grid,wheelEvent;
		this.rowHeight = grid.getRowManager().defaultRowHeight;
		this.yScrollHandle = grid.yscrollerHandle;
		this.xScrollHandle = grid.xscrollerHandle;
		dojo.setSelectable(grid.yscrollerNode,false);
		dojo.setSelectable(grid.xscrollerNode,false);
		this.connects.push(dojo.connect(grid.yscrollerNode,"onmouseup",this,function(event){
			this._scrollBarMouseUp(event);
			dojo.stopEvent(event);
		}));
		this.connects.push(dojo.connect(grid.yscrollerNode,"onmousedown",this,function(event){
			var className = event.target.className;
			switch(className){
				case "y-scroller-up" :
					this._scrollBarClickUp(event);
					break;
				case "y-scroller-down" :
					this._scrollBarClickDown(event);
					break;
				default :
					if(/y-scroller-handle/.test(className)){
						this._forYMouseDown(event);
					}else{
						this._scrollBarClickUpDown(event);
					}
			}
			dojo.stopEvent(event);
		}));
		dojo.isFF ? wheelEvent = "DOMMouseScroll" : wheelEvent = "onmousewheel";
		this.connects.push(dojo.connect(grid.viewsNode,wheelEvent,this,function(event){
			var self = this,
				wheelDelta;
			if(event.wheelDelta) { 
				wheelDelta = event.wheelDelta/120; 
			}else if(event.detail) { 
				wheelDelta = -event.detail/3; 
			}
			var timer = setTimeout(function(){
				self._wheelListener(wheelDelta);
				clearTimeout(timer)
			},0);
			if(wheelDelta > 0 && this.scrollView.snapshot.beginRowIndex != 0) { 
				dojo.stopEvent(event);
			}
			if(wheelDelta < 0 && !this.scrollView.snapshot.lastRow && "none" != dojo.style(this.grid.yscrollerNode,"display")){
				dojo.stopEvent(event);
			}
		}));
		this.connects.push(dojo.connect(grid.xscrollerNode,"onmouseup",this,function(event){
			this._scrollBarMouseUp(event);
			dojo.stopEvent(event);
		}));
		this.connects.push(dojo.connect(grid.xscrollerNode,"onmousedown",this,function(event){
			grid.xscrollerNode.focus();
			var className = event.target.className;
			switch(className){
				case "x-scroller-up" : 
					this._scrollBarClickLeft(event);
					break;
				case "x-scroller-down" : 
					this._scrollBarClickRight(event);
					break;
				default : 
					if(/x-scroller-handle/.test(className)){
						this._forXMouseDown(event);
					}else{
						this._scrollBarClickRightLeft(event);
					}
			}
			dojo.stopEvent(event);
		}));
	},
	_scrollBarClickUpDown : function(event){	
		
		if(this.yScrollHandle.offsetTop > event.offsetY){
		
			this.yScrollBlack = true;
			this._scrollBarClickBlackUp(event);
		} else{
		
			this._scrollBarClickBlackDown(event);
		}
		
	},
	_scrollBarClickRightLeft : function(event){				
		this.xScrollBlack=true;
		if(this.xScrollHandle.offsetLeft > event.offsetX){		
			this._scrollBarClickBlackLeft(event);
		} else{		
			this._scrollBarClickBlackRight(event);
		}				  
	},
	
	//计算纵向滚动条高度
	_calYScrollHeight : function(){
		var snapshot = this.scrollView.snapshot,
			h = snapshot.viewContentHeight,H = snapshot.totalRowHeight;
		return h*(h-2*16)/H; 
	},
	//计算横向滚动条宽度
	_calXScrollWidth : function(){
		var snapshot = this.scrollView.snapshot,
			w = snapshot.viewContentWidth,W = this._calHeaderWidth(),r=this.xScrollWidth;
		return w*(r-2*16)/W;
	},
	//设置纵向滚动条的最小高度
	_setYScrollBarHandleHeight : function() {
		this.yScrollBarHandleHeight = this._calYScrollHeight();
		if(this.yScrollBarHandleHeight > 15) { 
			dojo.style(this.yScrollHandle,"height",this.yScrollBarHandleHeight + "px");
		}else { 
			this.yScrollBarHandleHeight = 15; 
			dojo.style(this.yScrollHandle,"height",15+"px");
		}
	},
	//设置横向滚动条的最小长度
	_setXScrollBarHandleWidth : function(){
		this.xScrollBarHandleWidth = this._calXScrollWidth();
		if(this.xScrollBarHandleWidth > 15) { 
			dojo.style(this.xScrollHandle,"width",this.xScrollBarHandleWidth + "px");
		}else { 
			this.xScrollBarHandleWidth = 15; 
			dojo.style(this.xScrollHandle,"width",15+"px");
		}
	},
	//计算纵向滚动条步长
	_calYScrollStep : function(){
		var snapshot = this.scrollView.snapshot;
		if(snapshot.rowCount>snapshot.showRows){
			var step = (snapshot.viewContentHeight + this.lockedHeight-2*16-this.yScrollBarHandleHeight)/(snapshot.rowCount-snapshot.showRows);
			return step;
		}
		return null;
	},
	//计算表头header的总长度
	_calHeaderWidth : function(){
		return this.scrollView.getRealWidth();
	},
	_moveYScroll:null,
	//移动纵向滚动条
	_forYMouseDown : function(e){
		var snapshot = this.scrollView.snapshot,
			y_currentIndex = snapshot.beginRowIndex;
		this.yScrollHandle.setCapture && this.yScrollHandle.setCapture();
		var y =e.clientY;
		var _top = dojo.style(this.yScrollHandle,"top") || (this.yScrollHeight - 16 - this.yScrollBarHandleHeight);
		this.dcmhandle = dojo.connect(document,"onmousemove",this,function(e){
			this._yHandleMove(e,y,_top,y_currentIndex);
		});
		this.dcuhandle = dojo.connect(document,"onmouseup",this,function(e){
			this.yScrollHandle.releaseCapture && this.yScrollHandle.releaseCapture();
			dojo.disconnect(this.dcmhandle);
			dojo.disconnect(this.dcuhandle);
		});
	},
	_yHandleMove : function(e,y,_top,y_currentIndex){
		clearTimeout(this._moveYScroll);
		var step =  this._calYScrollStep(),
			topValue=_top+ (e.clientY-y),
			view = this.scrollView,
			snapshot = view.snapshot;
		function calRowIndex(step){
			var yNow_top = dojo.style(this.yScrollHandle,"top") || (this.yScrollHeight - 16 - this.yScrollBarHandleHeight);
			var moveLength=yNow_top-_top;
			var moveIndex;
			if(step == null){
				moveIndex = 0;
			}else{
				moveIndex=Math.floor(moveLength/step);
			}
			dojo.style(this.yScrollHandle,"top",_top+(e.clientY-y)+"px");
			snapshot.beginRowIndex=y_currentIndex+moveIndex;
		};
		if(e.clientY > y){
			var h = snapshot.viewContentHeight + this.lockedHeight;
//			var h = snapshot.viewContentHeight;
			if(topValue>(h-16-this.yScrollBarHandleHeight)){
				dojo.style(this.yScrollHandle,"top","auto");
				dojo.style(this.yScrollHandle,"bottom","16px");
				snapshot.beginRowIndex=snapshot.rowCount-snapshot.showRows;
				var tableHeight = snapshot.showRows * (this.rowHeight+1);
				if(tableHeight > snapshot.viewContentHeight){
					snapshot.lastRow = true;
				}
			}else{
				calRowIndex.call(this,step);
			}
		}else{
			if(snapshot.lastRow){
				snapshot.lastRow = false;
			}
			if(topValue<=16){
				dojo.style(this.yScrollHandle,"top",16+"px");
				snapshot.beginRowIndex = 0;
			}else{
				calRowIndex.call(this,step);
			}
		}
		this._moveYScroll = setTimeout(dojo.hitch(this,function(){
			this.viewManager.doYScroll('true');
		}),10);
		this.doEditVerticalScroll();
	},
	//判断是否移动纵向滚动条位置
	calYStep:function(){
		var step;
		if(this.step){
			step = this.step;
		}else{
			step = this.step = parseFloat(this._calYScrollStep());
		}
		if(!this.ystep){
			this.ystep = step;
		}
	},
	_scrollBarMouseUp : function(e){
		this.handleDown && clearTimeout(this.handleDown);
		this.handleUp && clearTimeout(this.handleUp);
		this.handleLeft && clearTimeout(this.handleLeft);
		this.handleRight && clearTimeout(this.handleRight);
		this.yScrollHandle.releaseCapture && this.yScrollHandle.releaseCapture();
		this.xScrollHandle.releaseCapture && this.xScrollHandle.releaseCapture();
		this.dcmhandle && dojo.disconnect(this.dcmhandle);
		this.dcuhandle && dojo.disconnect(this.dcuhandle);
	},
	//点击纵向滚动条向下滚动
	_scrollBarClickDown : function(e) {
		var snapshot = this.scrollView.snapshot,
			h = snapshot.viewContentHeight + this.lockedHeight,
			self = this;
		if(e){
			this.step = null;
			this.calYStep();
			snapshot.beginRowIndex++;
			var documentUp = dojo.connect(document,"onmouseup",this,function(){
				clearTimeout(this.handleDown);
				dojo.disconnect(documentUp);
			});
			this.handleDown=setTimeout(dojo.hitch(self,function(){self._scrollBarClickDown(e);}),150);
		}
		if(snapshot.beginRowIndex+snapshot.showRows<=snapshot.rowCount){
			var yscrollBarHandleTop = dojo.style(this.yScrollHandle,"top");
			if(this.ystep >= 1){
				if(yscrollBarHandleTop+this.yScrollBarHandleHeight+16+this.ystep<h){
					dojo.style(this.yScrollHandle,"top",yscrollBarHandleTop+this.ystep+"px");
				}else{
					snapshot.beginRowIndex=snapshot.rowCount-snapshot.showRows;
					dojo.style(this.yScrollHandle,"top","auto");
					dojo.style(this.yScrollHandle,"bottom","16px");
					snapshot.lastRow = true;
				}
				this.ystep = null;
			}else{
				this.ystep += this.step;
			}
		}else{
			snapshot.beginRowIndex=snapshot.rowCount-snapshot.showRows;
			snapshot.lastRow = true;
			dojo.style(this.yScrollHandle,"top","auto");
			dojo.style(this.yScrollHandle,"bottom","16px");
		}
		this.viewManager.doYScroll('true');
		this.doEditVerticalScroll();
	},
	// tab/Enter快捷键换行纵向滚动条向下滚动 zhaos
	_onEditorTabscrollBar:function(){
		var snapshot = this.scrollView.snapshot;
		if(!snapshot.yscroller){return;}
         var stepx = 1;            
         // 步长设每次移动stepx行数据
		var step = this.step = stepx * this._calYScrollStep();
		this.ystep = step;	
		this.scrollView.snapshot.beginRowIndex += 1; 
		this._scrollBarClickDown();	
	},
	//点击纵向滚动条向上滚动
	_scrollBarClickUp : function(e){
		var self = this,
			snapshot = this.scrollView.snapshot;
		if(snapshot.lastRow){
			dojo.style(this.yScrollHandle,"bottom","auto");
			if(0 >= snapshot.beginRowIndex){
				dojo.style(this.yScrollHandle,"top","16px");
				this.scrollView.snapshot.beginRowIndex = 0;
			}else{
				var ytop = dojo.style(this.yScrollHandle,"top") || (this.yScrollHeight - 16 - this.yScrollBarHandleHeight);
				dojo.style(this.yScrollHandle,"top",ytop+"px");
			}
			snapshot.lastRow = false;
		}
		if(0 == snapshot.beginRowIndex && this.yScrollBlack ){
			dojo.style(this.yScrollHandle,"top","16px");					
		}else if(snapshot.beginRowIndex == 0){			
			dojo.style(this.yScrollHandle,"top","16px");
			return;
		}else if(snapshot.beginRowIndex < 0){
			this.scrollView.snapshot.beginRowIndex = 0;
			dojo.style(this.yScrollHandle,"top","16px");
		}	
		if(e){
			this.step = null;
			this.calYStep();
			snapshot.beginRowIndex--;
			var documentUp = dojo.connect(document,"onmouseup",this,function(){
				clearTimeout(this.handleUp);
				dojo.disconnect(documentUp);
			});
			this.handleUp=setTimeout(dojo.hitch(self,function(){self._scrollBarClickUp(e);}),150);
		}
		if(snapshot.beginRowIndex > 0){
			var yscrollBarHandleTop = parseFloat(dojo.style(this.yScrollHandle,"top"));
			if(this.ystep >= 1){
				if(yscrollBarHandleTop-16>this.ystep){
					dojo.style(this.yScrollHandle,"top",yscrollBarHandleTop-this.ystep+"px");
				}else{
					dojo.style(this.yScrollHandle,"top","16px");
				}
				this.ystep = null;
				this.step = null;
			}else{
				this.ystep += this.step;
			}
		}
		this.yScrollBlack = false;
		this.viewManager.doYScroll('true');
		this.doEditVerticalScroll();
	},
	
	//点击纵向滚动条空白处向上滚动
	_scrollBarClickBlackUp : function(e){
		var snapshot = this.scrollView.snapshot;
		if(!snapshot.yscroller){return;}		
         var stepy = parseInt((this.yScrollHandle.offsetTop - event.offsetY)/this._calYScrollStep()+1);            
//		步长设每次移动stepy行数据
		var step = this.step = stepy * this._calYScrollStep();
		this.ystep = step;	
		this.scrollView.snapshot.beginRowIndex -= stepy; 
		this._scrollBarClickUp();		
	},
	//点击纵向滚动条空白处向下滚动
	_scrollBarClickBlackDown : function(e){
		var snapshot = this.scrollView.snapshot;
		if(!snapshot.yscroller){return;}
         var stepx = parseInt((event.offsetY- this.yScrollHandle.offsetTop-this.yScrollBarHandleHeight)/this._calYScrollStep()+1);            
//		步长设每次移动stepx行数据
		var step = this.step = stepx * this._calYScrollStep();
		this.ystep = step;	
		this.scrollView.snapshot.beginRowIndex += stepx; 
		this._scrollBarClickDown();		
	},
	//点击横向滚动条空白处向左移动
	_scrollBarClickBlackLeft : function(e){
		var view = this.scrollView,
		    snapshot = this.scrollView.snapshot;
		if(!snapshot.xscroller){return;}
		var scrollWidth = (this._calHeaderWidth() - snapshot.viewContentWidth) * (e.offsetX-16) / (this.xScrollWidth-32- this.xScrollBarHandleWidth) ,
		visibleWidth = 0;
		for(var i=0,cell;cell=view.contentStructure.rows[0][i];i++){
			visibleWidth+=cell.getPixelWidth();
			if(visibleWidth>=scrollWidth){				
				snapshot.beginCellIndex  = i;
				break;
			}
		}
		this._scrollBarClickLeft();		
	},
	//点击横向滚动条空白处向右移动
	_scrollBarClickBlackRight : function(e){
		var view = this.scrollView,
	    snapshot = this.scrollView.snapshot;
		if(!snapshot.xscroller){return;}			
		var realscrollWidth =  this.xScrollBarHandleWidth* this._calHeaderWidth()/(this.xScrollWidth-32),
		    scrollWidth = (this._calHeaderWidth()) * (e.offsetX-16) / (this.xScrollWidth-32  ) -realscrollWidth,
		    visibleWidth = 0;	
		for(var i=0,cell;cell=view.contentStructure.rows[0][i];i++){			
			visibleWidth+=cell.getPixelWidth();			
			if(visibleWidth>=scrollWidth){							
			    snapshot.beginCellIndex  = i+1;		
				break;
			}
		}
		this._scrollBarClickRight();	
	},
	
	
	//鼠标滚轮事件
	_wheelListener : function(wheelDelta){
		var snapshot = this.scrollView.snapshot,wheelDelta;
		if(!snapshot.yscroller){return;}
//		if(e.wheelDelta) { 
//			wheelDelta = e.wheelDelta/120; 
//		}else if(e.detail) { 
//			wheelDelta = -e.detail/3; 
//		}
		//步长设每次移动4行数据
		if(!this.step){
			var step = this.step = 4 * this._calYScrollStep();
		}
		
		if(!this.ystep){
			this.ystep = step;
		}
		if(wheelDelta > 0) { 
			//滚动条无法一次滚到顶的问题
			var snapshot = this.scrollView.snapshot;
			snapshot.beginRowIndex -= 4;
			if(snapshot.beginRowIndex==0) snapshot.beginRowIndex -= 1;
			this._scrollBarClickUp();
		}else {
			this.scrollView.snapshot.beginRowIndex += 4; 
			this._scrollBarClickDown();
		}
	},
	//点击横向滚动条向右移动
	_scrollBarClickRight : function(edit,cellIndex){
		var self = this,
			view = this.scrollView,
			snapshot = view.snapshot;
	    if(snapshot.lastCell){return;}	
		if(!this.xScrollBlack) {
		     snapshot.beginCellIndex++;	
		}
		while(view.structure.rows[0][snapshot.beginCellIndex] && view.structure.rows[0][snapshot.beginCellIndex].hidden){
			snapshot.beginCellIndex++;
		}
		var visibleWidth = this.calShowCells();
		//倒数第二个单元格宽度很大
		if(visibleWidth<=snapshot.viewContentWidth){
			snapshot.beginCellIndex--;
			snapshot.showCells++;
			snapshot.lastCell = true;
		}
		
		if(snapshot.lastCell){
			dojo.style(this.xScrollHandle,"left","auto");
			dojo.style(this.xScrollHandle,"right","16px");
		}else{
			this.posX();
		}
		view.renderContent();
		//add by zhengh 处理锁定行
		this.viewManager.renderLockedRow(false);
		this.doEditHorizontalScroll();
		if(1 == edit){
			this.grid.rowEdit.doLastTab();
			return;
		}else if(2 == edit ){
			var editedNodes = this.grid.rowEdit.editedNode;
			//snapshot.beginCellIndex++;
			editedNodes[cellIndex]&&editedNodes[cellIndex].focus();
			
		}			
		var documentUp = dojo.connect(document,"onmouseup",this,function(){
			clearTimeout(this.handleRight);
			dojo.disconnect(documentUp);
		});
		//if(!this.xScrollBlack)
			//this.handleRight = setTimeout(dojo.hitch(self,function(){self._scrollBarClickRight();}),150);
		this.xScrollBlack =false;
	},
	//点击横向滚动条向左移动
	_scrollBarClickLeft : function(){
		var self = this,
			view = this.scrollView,
			snapshot = view.snapshot;
		if(0==snapshot.beginCellIndex && !snapshot.lastCell&& !this.xScrollBlack){
			dojo.style(this.xScrollHandle,"left","16px"); 
			return;
		}
		if(snapshot.lastCell){
			dojo.style(this.xScrollHandle,"right","auto");
			snapshot.lastCell = false;
		}else{
			this.lastCell = false;
			if(!this.xScrollBlack)
			    snapshot.beginCellIndex--;
		}	
			
		if(snapshot.beginCellIndex<0){
			snapshot.beginCellIndex =0;
		}		
		while(view.structure.rows[0][snapshot.beginCellIndex] && view.structure.rows[0][snapshot.beginCellIndex].hidden){
			snapshot.beginCellIndex--;
		}
		this.xScrollBlack =false;
		this.posX();
		this.calShowCells();
		view.renderContent();
		this.viewManager.renderLockedRow(false);
		this.doEditHorizontalScroll();
		var documentUp = dojo.connect(document,"onmouseup",this,function(){
			clearTimeout(this.handleLeft);
			dojo.disconnect(documentUp);
		});
		this.handleLeft = setTimeout(dojo.hitch(self,function(){self._scrollBarClickLeft();}),150);
	},
	//移动横向滚动条
	_forXMouseDown : function(e){
		var snapshot = this.scrollView.snapshot,
			x =e.clientX,
			_left = dojo.style(this.xScrollHandle,"left") || (this.xScrollWidth - 16 - this.xScrollBarHandleWidth);
		this.x_currentIndex = snapshot.beginCellIndex;
		this.x_lastCell = snapshot.lastCell;
		this.xScrollHandle.setCapture && this.xScrollHandle.setCapture();
		this.dcmhandle = dojo.connect(document,"onmousemove",this,function(e){
			this._xHandleMove(e,x,_left);
		});
		this.dcuhandle = dojo.connect(document,"onmouseup",this,function(e){
			this.xScrollHandle.releaseCapture && this.xScrollHandle.releaseCapture();
			dojo.disconnect(this.dcmhandle);
			dojo.disconnect(this.dcuhandle);
		});
	},
	_xHandleMove : function(e,x,_left){
		clearTimeout(this._moveXScroll);
		var leftValue=_left+ (e.clientX-x),
			view = this.scrollView,
			snapshot = this.scrollView.snapshot;
		if(leftValue>=(this.xScrollWidth - 16 - this.xScrollBarHandleWidth)){
			snapshot.lastCell = true;
			this.calCellIndex();
			dojo.style(this.xScrollHandle,"left",(this.xScrollWidth - 16 - this.xScrollBarHandleWidth)+"px");
		}else if(leftValue<=16){
			snapshot.lastCell = false;
			snapshot.beginCellIndex  = 0;
			dojo.style(this.xScrollHandle,"left","16px");
			dojo.style(this.xScrollHandle,"right","auto");
		}else{
			snapshot.lastCell = false;
			dojo.style(this.xScrollHandle,"left",leftValue+"px");
			var scrollWidth = (this._calHeaderWidth() - snapshot.viewContentWidth) * (leftValue - 16) / (this.xScrollWidth - 32 - this.xScrollBarHandleWidth),
				visibleWidth = 0;
			for(var i=0,cell;cell=view.contentStructure.rows[0][i];i++){
				visibleWidth+=cell.getPixelWidth();
				if(visibleWidth>=scrollWidth){
					snapshot.beginCellIndex  = i;
					break;
				}
			}
		}
		if(this.x_currentIndex==snapshot.beginCellIndex){ 
			if(this.x_lastCell == snapshot.lastCell){
				return;
			}
		}
		this.calShowCells();
		snapshot.scrollWidth =  this.getScrollWidth();
		this._moveXScroll = setTimeout(dojo.hitch(this,function(){	
			this.scrollView.renderContent();
			this.viewManager.renderLockedRow(false);
			this.doEditHorizontalScroll();
			this.x_currentIndex = snapshot.beginCellIndex;
			this.x_lastCell = snapshot.lastCell;
		}),10);
	},
	
	//点击纵向滚动条时关于编辑器的处理
	doEditVerticalScroll: function(){
		var gridRowEdit = this.grid.rowEdit;
		if(gridRowEdit){
			gridRowEdit.clickVerticalScroll();
		}
	},
	
	//点击横向滚动条时关于行编辑的处理
	doEditHorizontalScroll: function(){
		var snapshot = this.scrollView.snapshot,
			gridRowEdit = this.grid.rowEdit;
		if(gridRowEdit){
			gridRowEdit.clickScroll = true;
			var setIndex = gridRowEdit.styleIndex;
			gridRowEdit.applyEdit();
			this.viewManager.getScrollView().contentBuilder.getRowEdit(setIndex+snapshot.beginRowIndex);
			if(snapshot.lastCell){
				gridRowEdit.doLastCell();
			}
		}
	},
	
	//确保rowIndex行可见
	visualizeRow: function(rowIndex){
		var snapshot = this.scrollView.snapshot;
		if (isNaN(rowIndex))return;
		if((snapshot.beginRowIndex < rowIndex) && (rowIndex < (snapshot.beginRowIndex+snapshot.showRows-1)))	return ;
		if(rowIndex<snapshot.beginRowIndex){
			snapshot.beginRowIndex = rowIndex;
		}
		if(rowIndex>=(snapshot.beginRowIndex+snapshot.showRows-1)){
			snapshot.beginRowIndex += rowIndex-(snapshot.beginRowIndex+snapshot.showRows);
			snapshot.beginRowIndex += 2;
			if(snapshot.beginRowIndex>snapshot.rowCount)snapshot.beginRowIndex=0;
		}
		if(this.grid.rowEdit){
			this.grid.rowEdit.noRefreshEdit = true;
		}
		this.grid.getManager("ViewManager").refreshPage();
	},
	//计算表格横向滚动出去的长度
	getScrollWidth : function(){
		var scrollWidth = 0,
			snapshot = this.scrollView.snapshot,
		//多标题，后面有跨行的header，用contentStructure来计算移动的头部
			view = this.scrollView,
			row = [];
		if(view.contentStructure.rows){
			row = view.contentStructure.rows[0];
		}else{
			row = this.scrollView.cells;
		}
		for(var i=0;i<snapshot.beginCellIndex;i++){
			if(!row[i].hidden){
				scrollWidth+= row[i].getPixelWidth();
			}
		}
		return scrollWidth;
	},
	//计算横向滚动条left值
	posX : function(){
		var scrollWidth = this.getScrollWidth(),
			snapshot = this.scrollView.snapshot,
			headerWidth = this._calHeaderWidth(),
			xScrollWidth = this.xScrollWidth - 32 - this.xScrollBarHandleWidth,_left;
			if(headerWidth > snapshot.viewContentWidth){
		 		_left = scrollWidth * xScrollWidth / (headerWidth - snapshot.viewContentWidth) + 16;
			}else{
				_left = 16;
			}
		dojo.style(this.xScrollHandle,"left",_left+"px");
		snapshot.scrollWidth = scrollWidth;
	},
	resize : function(height,self){
		var snapshot = this.scrollView.snapshot,
			grid = this.grid;
		this.lockedHeight = height || 0;
		this.yScrollHeight = snapshot.viewHeight + this.lockedHeight;
		this.xScrollWidth = snapshot.gridWidth;
		dojo.style(grid.yscrollerNode,"display",snapshot.yscroller ? "block" : "none");
		//增加gridheard 比 totalrowheight 小的判断 否则容易误判出滚筒条  2018-11-22  林栋
		if((grid.class.indexOf('xgridCellAutoHeight')>-1)&&!self&&!snapshot.yscroller&&snapshot.totalRowHeight>0){
			var gridId = this.grid.id;
			setTimeout(()=>{
				var viewdom =  dojo.query('tr',gridId);
				var viewdoms = [],totalRowHeight = 0;
				for(var i=0;i<viewdom.length;i++){
					if(viewdom[i]&&viewdom[i].classList&&viewdom[i].classList.value.indexOf('u-xgrid-')>-1){
						viewdoms.push(viewdom[i]);
						totalRowHeight+=viewdom[i].offsetHeight-1
					}	
				}
				if(totalRowHeight>snapshot.gridHeight-50&&unieap.byId(gridId)&&unieap.byId(gridId).ViewManager&&unieap.byId(gridId).ViewManager.scroller){
					var snapshots = unieap.byId(gridId).ViewManager.scroller.scrollView.snapshot;
					snapshots.yscroller = true;
					snapshots.totalRowHeight = totalRowHeight;
					unieap.byId(gridId).ViewManager.scroller.scrollView.snapshot=snapshots
					unieap.byId(gridId)&&unieap.byId(gridId).ViewManager&&unieap.byId(gridId).ViewManager.scroller&&unieap.byId(gridId).ViewManager.scroller.resize(null,true);
				}
				
			},500)
		}	
		if((snapshot.yscroller && snapshot.gridHeight < snapshot.totalRowHeight)){
			dojo.addClass(grid.yscrollerNode,'scrollerShow');
			$('.u-xgrid-totals').addClass('hasScroller');
        }
        if(snapshot.xscroller){
			dojo.addClass(grid.xscrollerNode,'scrollerShow');
		
        }
		dojo.style(grid.xscrollerNode,"display",snapshot.xscroller ? "block" : "none");
		dojo.style(grid.headerCorner,"display",snapshot.yscroller ? "block" : "none");
		dojo.style(grid.contentCorner,"display",(snapshot.xscroller  && snapshot.yscroller) ? "block" : "none");

		if(snapshot.yscroller && snapshot.xscroller){
			this.yScrollHeight = this.yScrollHeight - grid.scrollerOffset;
			this.xScrollWidth = this.xScrollWidth - grid.scrollerOffset;
		}
		dojo.style(grid.yscrollerNode,"height",this.yScrollHeight+"px");
		dojo.style(grid.xscrollerNode,"width",this.xScrollWidth+"px");
		if(snapshot.yscroller){
			this._setYScrollBarHandleHeight();
			if(snapshot.lastRow){
				dojo.style(this.yScrollHandle,"top","auto");
				dojo.style(this.yScrollHandle,"bottom","16px");
				snapshot.beginRowIndex = snapshot.rowCount - Math.ceil(snapshot.viewContentHeight / this.rowHeight);
			}else{
				var ystep = this._calYScrollStep();
				if(ystep != null){
					ystep *= snapshot.beginRowIndex;
				}else{
					ystep = 0;
				}
				var yOffSet = ystep+grid.scrollerOffset;
				dojo.style(this.yScrollHandle,"top",yOffSet+"px");
			}
		}else{
			snapshot.lastRow = false;
		}
		if(snapshot.xscroller){
			this._setXScrollBarHandleWidth();
			if(snapshot.lastCell){
				dojo.style(this.xScrollHandle,"left","auto");
				dojo.style(this.xScrollHandle,"right","16px");
				this.calCellIndex();
			}else{
				this.posX();
			}
		}else{
			snapshot.beginCellIndex = 0;
			snapshot.scrollWidth = 0;
			snapshot.lastCell = false;
		}
		this.viewManager.doYScroll();
	},
	//计算可以显示的列数
	calShowCells : function(){
		var snapshot = this.scrollView.snapshot,
			visibleWidth = 0,
			//用contentStructure.rows带顺序的cells来代替原来的cells（按照html里row，cell书写顺序）
			view = this.scrollView, 
			rows = view.contentStructure.rows,
			row = rows[0];
		snapshot.showCells = 0;
		for(var i=snapshot.beginCellIndex,cell;cell=row[i];i++){
			snapshot.showCells++;
			visibleWidth+=cell.getPixelWidth();
			if(visibleWidth>snapshot.viewContentWidth){
				break;
			}
		}
		if(snapshot.lastCell && snapshot.beginCellIndex < this.scrollView.cells.length-1){
			snapshot.showCells = this.scrollView.cells.length - snapshot.beginCellIndex;
		}
		return visibleWidth;
	},
	//计算列索引
	calCellIndex : function(){
		var visibleWidth = 0,
			snapshot = this.scrollView.snapshot,
			view = this.scrollView,
			rows = view.contentStructure.rows,
			row = rows[0];
		snapshot.beginCellIndex = row.length ;
		for(;visibleWidth<snapshot.viewContentWidth;){
			snapshot.beginCellIndex --;
			if(row){
				visibleWidth+= row[snapshot.beginCellIndex].getPixelWidth();
			}else{
				visibleWidth+= view.cells[snapshot.beginCellIndex].getPixelWidth();
			}
		}
	},
	destroy : function(){
		while(this.connects.length){
			dojo.disconnect(this.connects.pop());
		}
	},
	updateContentHeight: function(dataLength,flag){
		if(flag){
			var snapshot = this.scrollView.snapshot,
				showRows = this.scrollView._showRows;
			snapshot.showRows = Math.min(snapshot.showRows,showRows - dataLength);
			this.resize(this.rowHeight*dataLength);	
		}else{
			return;
		}
	}
});

dojo.provide('unieap.xgrid.manager.ViewManager');
dojo.require("unieap.xgrid.manager.Manager");
dojo.require("unieap.xgrid.core.view");
dojo.require("unieap.xgrid.core.scroller");
dojo.declare("unieap.xgrid.manager.ViewManager", unieap.xgrid.manager.Manager, {
    
    /**
     * @type:
     * 		{boolean}
     * @summary:
     * 		是否在初始化时渲染
     * @example:
     * |<div dojoType="unieap.xgrid.Grid" binding="{store:'empDataStore'}" views="{autoRender:true}">
     * |	...
     * |</div>
     */
    autoRender: true,
    
    /**
	 * @summary:
	 * 		设置当鼠标移动单元格上时，是否以tooltip的形式来显示单元格内容
	 * @description:
	 * 		只有当拖动表头使得单元的内容显示不全时tooltip才展现出来
	 * @type:
	 * 		{boolean}
	 * @default:
	 * 		false
	 * @example:
	 * |<div dojoType="unieap.xgrid.Grid" id="grid" views="{enableTooltip:true}">
	 * |	<header>
	 * |		<cell name="attr_empno" label="编号"></cell>
	 * |		<cell name="attr_ename" label="姓名"></cell>
	 * |	</header>
	 * |</div>
	 */
	enableTooltip:true,
    
	/**
     * @type:
     * 		{boolean}
     * @summary:
     * 		是否显示rowBar
     * @example:
     * |<div dojoType="unieap.xgrid.Grid" binding="{store:'empDataStore'}" views="{rowBar:true}">
     * |	...
     * |</div>
     * @img:
     * 		images/grid/views/rowbar.png
     */
    rowBar: false,
    /**
     * @type:
     * 		{boolean}
     * @summary:
     * 		是否显示行号
     * @example:
     * |<div dojoType="unieap.xgrid.Grid" binding="{store:'empDataStore'}" views="{rowNumber:true}">
     * |	...
     * |</div>
     * @img:
     * 		images/grid/rownumber.png
     */
    rowNumber: false,
    /**
     * @type:
     * 		{string}
     * @summary:
     * 		设置点击Grid表头的排序方式
     * @enum:
     * 		{client|server|none}
     * @example:
     * |<div dojoType="unieap.xgrid.Grid" binding="{store:'empDataStore'}" views="{orderType:'none'}">
     * |	...
     * |</div>
     * |上述代码表明点击Grid表头时不排序
     */
    orderType: 'client',
    
    isHideHeader: false,
    
    /**
     * @type:
     * 		{boolean}
     * @summary:
     * 		是否显示修改标记
     * @default:
     * 		true
     * @example:
     * |<div dojoType="unieap.xgrid.Grid" views="{markDirty:false}">
     * |	...
     * |</div>
     * @img:
     * 		images/grid/markdirty.png
     */
    markDirty: true,
    
    /**
     * @type:
     * 		{boolean}
     * @summary:
     * 		是否严格区分grid的行单双击事件
     * @default:
     * 		global.js中的unieap.widget.grid.distinguishDblclick属性
     * @example:
     * |<div dojoType="unieap.xgrid.Grid" views="{distinguishDblclick:true}">
     * |	...
     * |</div>
     */
    distinguishDblclick: unieap.widget.grid.distinguishDblclick,
    
    create: function() {
		this.views = [];
        this.subscribe("structureChanged",this,"structureChanged");
        if(this.isHideHeader){
	        dojo.style(this.grid.headersNode,"height","0px");
        }
    },
    
    doContentEvent : function(e){
    	var node = e.target;
    	while(node && node!=this.grid.viewsNode){
    		if(dojo.hasClass(node,"u-xgrid-view")){
    			var view = this.grid.ViewManager.views[dojo.query(">.u-xgrid-view",this.grid.viewsNode).indexOf(node)];
    			view&&view.doContentEvent(e);
    			return;
    		}
    		node = node.parentNode;
    	}
    },
    
    doHeaderEvent : function(e){
    	var node = e.target;
    	while(node && node!=this.grid.headersNode){
    		if(dojo.hasClass(node,"u-xgrid-header")){
    			var view = this.grid.ViewManager.views[dojo.query(">.u-xgrid-header",this.grid.headersNode).indexOf(node)];
    			view.doHeaderEvent(e);
    			return;
    		}
    		node = node.parentNode;
    	}
    },
		
	doTotalEvent : function(e){
		var node = e.target;
		while(node && node!=this.grid.totalNodes){
			if(dojo.hasClass(node,"u-xgrid-total")){
				var view = this.grid.ViewManager.views[dojo.query(">.u-xgrid-total",this.grid.totalsNode).indexOf(node)];
				view&&view.doTotalEvent(e);
				return;
			}
			node = node.parentNode;
		}
	},

    startup: function(){
    	var rowManager = this.grid.RowManager;
    	this.scroller = new unieap.xgrid.Scroller(this);
    },
    structureChanged: function(flag) {
		this.destroyViews();
		this.buildViews();
		this.scroller && (this.scroller.scrollView = this.getScrollView());
        this.render();
     	if(!flag){
    		this.refreshPage();
        }
    },
    buildViews: function() {
        var nodes = [], layout = this.grid.LayoutManager;
        for (var i = 0, vs; (vs = layout.structure[i]); i++) {
            var v = this.createView(vs.type || "unieap.xgrid.View");
            v.isRowBar && (v.rowNumber = this.rowNumber);
            v.setStructure(vs);
            nodes.push(v.contentNode);
        }
    },
    createView: function(inClass) {
        var clazz = dojo.getObject(inClass);
        var view = new clazz({
            grid: this.grid
        });
        this.addView(view);
        unieap.xgrid.addObserver(view, this);
        return view;
    },
    addView: function(inView) {
        inView.idx = this.views.length;
        this.views.push(inView);
        this.grid.headersNode.appendChild(inView.headerNode);
		this.grid.viewsNode.appendChild(inView.viewNode);
		this.grid.totalsNode.appendChild(inView.totalNode);
    },
	
	//根据cell对象来获得该cell所在的view
    getViewByCell: function(inCell) {
        for (var i = 0, v; v = this.views[i]; i++) {
			if(v.hasCell && v.hasCell(inCell)){
				return v;
			}
        }
        return null;
    },
 	render: function(){
    	var layout = this.grid.LayoutManager,
		storeList = [];
		for (var i=0, c; c=layout.cells[i]; i++) {
        	if (c.decoder&&c.decoder.store) {
        		unieap.getDataStore(c.decoder.store,this.grid.dataCenter,true) || (storeList.push(c.decoder.store));
        	}
        }
        var self = this;
        if(0 == storeList.length){
        	dojo.forEach(self.views,function(view){
	    		view.render();
	    	});
        }else{
        	unieap.Action.getMultiCodeList(storeList,function(dc){
				dojo.forEach(self.views,function(view){
		    		view.render();
		    	});
			});
        }
    },
    renderLockedRow: function(flag){
    	var data = this.grid.getBinding().getLockedRowData();
        if (!data || data.length == 0) {
      		//因为表格编辑时焦点移出编辑器会触发onItemChange，会调用这个方法，这个方法刷新表格使事件丢失，故移到resize中。
//        	this.scroller.resize();
            return;
        }
    	this.forEach(function(view){
    		view.renderLockedRow(data,flag);
    	});
    	this.scroller.updateContentHeight(data.length,flag);
    },
    destroyViews: function() {
  		for (var i = 0, v; v = this.views[i]; i++) 
            v.destroy();
        this.views = [];
    },
    destroy: function(){
    	this.destroyViews();
    },
    
    getHeaderHeight: function(){
		var mulType =  JSON.parse(window.localStorage.getItem(this.grid.id+'isMulTitle'));//判断是否是多表头
			if(Object.getOwnPropertyNames(mulType).length === 0){ //防止第一次加载进来渲染rowbar的时候 渲染错误表头rowbar的高度
				var cells = this.grid.LayoutManager.cells;
				dojo.forEach(cells,function(cell){
					if((cell['isMulTitle'] || cell['rowSpan'] > 1)&&!cell['hidden']){
						mulType = {
							"mulTitle":true
						}
					}
				})
			}	
		if(mulType && mulType.mulTitle){
                return this.grid.getManager("RowManager").defaultMulTitleHeight * this.getScrollView().structure.rows.length;
			}
        return this.grid.getManager("RowManager").defaultHeaderHeight * this.getScrollView().structure.rows.length;
    },
    
    resize: function(width,height,autoHeight){
        
//      防止ds里面的selectType判断出问题 会有bug type变成none 导致rowbar不渲染   2018-11-24 林栋
//      this.grid.SelectionManager.selectType = this.grid.SelectionManager.view.selectType; 
//      先取消，防止 setSelectType none 不起作用

    	var toolHeight = 0;
		if (this.grid.toolBar) {
			toolHeight = this.grid.getToolBar()&&this.grid.getToolBar().getHeight ? this.grid.getToolBar().getHeight() : 40;
		}
		if (this.grid.foot) {
			toolHeight += this.grid.getFoot().getHeight() + 3;
		}
		var scrollView = this.getScrollView(),
		hh = this.getHeaderHeight(),vh;
    	if(this.isHideHeader) hh=0;
    	if(autoHeight){
    		var defaultRowHeight = this.grid.getManager("RowManager").defaultRowHeight;
    		vh = this.grid.getBinding().getDataStore().getRowSet().getRowCount()*defaultRowHeight;
    		height = vh + toolHeight + hh + 2;
    	}
    	else if(toolHeight > 0){
    		vh = height -  hh - toolHeight;
    	}else{
    		vh = height -  hh ;
		}
		
		var rowOperationHeight = $(this.grid.domNode).find('.u-xgrid-title-row-operation').height() || 0;
		var sumRowHeight = $(this.grid.domNode).find('.sum-row').height();
		var totalHeight = $(this.grid.domNode).find('.u-xgrid-totals').height();
		var hasGridTotal = this.grid.summary !== 'none' || $(this.grid.domNode).hasClass('grid-has-total') ? true : false; //判断是否有合计行
		//判断是否有合计行
		if(hasGridTotal){
			//vh=vh-rowOperationHeight - sumRowHeight - totalHeight; //判断是否有合计行，来计算viewNode的高度
			vh=vh  - sumRowHeight - totalHeight-1; //防止计算错误
			$(this.grid.domNode).find('.u-xgrid-totals').show();
		}else{
			//vh=vh-rowOperationHeight - sumRowHeight;//判断是否有合计行，来计算viewNode的高度 待修改
			vh=vh  - sumRowHeight;//判断是否有合计行，来计算viewNode的高度 待修改
			$(this.grid.domNode).find('.u-xgrid-totals').hide();
		}
    	if(vh < 1){
    		return;
    	}
    	//在非锁定视图中存储Grid的宽度和高度	
    	scrollView.snapshot.gridWidth = width;
    	scrollView.snapshot.gridHeight = height;
		//设置表头和视图区域的高度
	
		dojo.style(this.grid.headersNode,"height",hh + "px");
		//如果没有数据 就把表格内容撑开 视觉上没有底部toolbar的效果
	
		if(this.grid.BindingManager&&this.grid.BindingManager.store&&this.grid.BindingManager.store.recordCount == 0&&this.grid.BindingManager.store.rowSet.initialCount == 0 && this.grid.PagingManager){
			dojo.style(this.grid.viewsNode,"height",(vh+28) + "px");
		}else{
			dojo.style(this.grid.viewsNode,"height",vh + "px");
		}
		//dojo.style(this.grid.viewsNode,"height",vh + "px");
		
		//增加 totalsNode 的高度
		var defaultRowHeight = this.grid.getManager("RowManager").defaultRowHeight;
		var totalHeight = defaultRowHeight + 2;
		dojo.style(this.grid.totalsNode,"height",totalHeight + "px");
        //     if(view.noscroll){
        //         var vw = view.getRealWidth();
        //         left += vw;        
        //         if(view.grid.SelectionManager.view.selectType !== "none" && left > 0){
        //             vw = view.rowNumber ? 25 : 35;
        //         }
        
        //         if(view.rowNumber && view.grid.SelectionManager.view.selectType !== "none"){
        //             vw += 39;
        //         }
        //         width= width - vw;
        //         dojo.style(view.headerNode,"width",vw+"px");
        //         dojo.style(view.contentNode,{"width": vw+"px","height": vh+"px"});
        //         continue;
        //     }
        //     if(view.grid.SelectionManager.view.selectType !== "none" && left > 0){
        //         view.setViewLeftPosition(vw);
        //     }else{
        //         view.setViewLeftPosition(left);
        //     }
            
        //     view.resize(width,vh,autoHeight); 
        // }
        // if(autoHeight&&scrollView.snapshot.xscroller){//U_EAP00029644
        //     var scrollerOffset = this.grid.scrollerOffset;
        //     dojo.style(this.grid.viewsNode,"height",vh+scrollerOffset + "px");
        // }
        // for (var i = 0, view; view = this.views[i]; i++) {
        //     if(view.noscroll){
        //         dojo.style(view.contentNode,"height",scrollView.snapshot.viewContentHeight +"px");
        //     }
        // }
        // this.scroller.resize();
        // this.publish("resize");
        // this.renderLockedRow(true);

    	//调整各视图中的记录
    	for (var i = 0,left = 0, view; view = this.views[i]; i++) {
    		view.setViewLeftPosition(left);
    		if(view.noscroll){
    			var vw;
				vw = view.getRealWidth();
				
    			if(unieap.isUserStyle){    				
    				var selectManager = this.grid.getManager("SelectionManager");
    				if(view.structure.noscroll == true){
    					vw = view.getRealWidth();
    				}else{
    					if((selectManager.selectType == "multiple" && this.rowNumber == true) || (selectManager.selectType == "single" && this.rowNumber == true)){
    						var vw = 75;
    					}else{
    						var vw = 50;
    					}
    				}
    			}else{
    				vw = view.getRealWidth();
    			}
    			//var vw = view.getRealWidth();
    			left += vw;    			
    			width= width - vw;
    		
    				if($(view.headerNode).hasClass('locked-splitter')){
						dojo.style(view.headerNode,"width",(vw+1)+"px");
    	    			dojo.style(view.contentNode,{"width": vw+"px","height": vh+"px"});
                        dojo.style(view.totalNode,"width",vw+"px");
    	    		
    				}else{
    					dojo.style(view.headerNode,"width",vw+"px");
    	    			dojo.style(view.contentNode,{"width": vw+"px","height": vh+"px"});
                        dojo.style(view.totalNode,"width",vw+"px");
    	    			
    				}
    				/*解决合计行没有复选条件下合计被遮挡问题 zhaos*/
    				if(hasGridTotal && vw < 35){
    					dojo.style(view.totalNode,"width","35px");
    					$(view.totalNode).addClass("totalNoBorder");
	    			}
                    continue;
    		}
    		view.resize(width,vh,autoHeight); 
    	}
    	if(autoHeight&&scrollView.snapshot.xscroller){//U_EAP00029644
    		var scrollerOffset = this.grid.scrollerOffset;
    		dojo.style(this.grid.viewsNode,"height",vh+scrollerOffset + "px");
    	}
    	for (var i = 0, view; view = this.views[i]; i++) {
    		if(view.noscroll){
    			dojo.style(view.contentNode,"height",scrollView.snapshot.viewContentHeight +"px");
    		}
    	}
		this.scroller.resize();
    	this.publish("resize");
    	this.renderLockedRow(true);
    	//如果有行编辑，并且窗口可显示的列数比原来的多，则关闭编辑器，并重新渲染,如果是移动滚动横向滚动条不重新渲染
    	if(this.grid.rowEdit && this.grid.rowEdit.clickScroll != true){
    		var	snaphotCells = scrollView.snapshot.showCells,
    			rowEdit = this.grid.rowEdit;
    		//关于锁定列解锁锁定、调整列位置
    		var notifyEdit = this.grid.notifyEdit;
    		if(!notifyEdit || 1 != notifyEdit){
	    		if((rowEdit.editShowCells != snaphotCells ) || (notifyEdit && 2 == notifyEdit)){
	    		    this.grid.notifyEdit = 0;
	    		    rowEdit.editShowCells = snaphotCells;
	    		    var setIndex = rowEdit.styleIndex;
	    		    //var editIndex = setIndex+rowEdit.beginRowIndex;
	    		    var editIndex = rowEdit.index;
	    		    if(editIndex >= scrollView.snapshot.rowCount) editIndex = scrollView.snapshot.rowCount-1;
	    			rowEdit.refreshEditTextBox(editIndex);
	    		    rowEdit.applyEdit();
	    		    scrollView.contentBuilder.getRowEdit(editIndex);
	    		}else{
	   				var tempIndex = rowEdit.index;
	    			rowEdit.refreshEditTextBox(rowEdit.index);
	    			if(rowEdit.updateCellWidth){
	    				rowEdit.updateCellWidth = false;
	    			}
	    			!rowEdit.noRefreshEdit && rowEdit.initEdit();
	    			//如果用TAB/Enter快捷键换行时，重新initEdit这时index变回原来的，需要重新设置回原来的index
	    			tempIndex != rowEdit.index && rowEdit.setEdit(tempIndex);
	    		}
    		}
		}
    	unieap.fireEvent4Widget(this, this.grid, this.onAfterResize,[]);
    },
   
	forEach: function(inCallback) {
	    for (var i = 0, v; v = this.views[i]; i++) {
	        inCallback(v, i);
	    }
    },
    getScrollView: function(){
    	return this.views[this.views.length-1];
    },
	doYScroll: function (type) {
		var scrollView = this.getScrollView(),
			snapshot = scrollView.snapshot;
		dojo.forEach(this.views, function (view) {
			view.snapshot.beginRowIndex = snapshot.beginRowIndex;
			view.snapshot.viewContentHeight = snapshot.viewContentHeight;
			view.snapshot.showRows = snapshot.showRows;
			view.snapshot.lastRow = snapshot.lastRow;
			view.renderContent();
			if (!type) {
				view.renderTotal();
			}
		});
	},
    
    /**
     * @summary:
     * 		刷新某一行
     * @param:
     * 		{number} index
     * @example:
     * |var grid=dijit.byId('grid');
     * |grid.getManager('ViewManager').refreshRow(0) //刷新grid中的第一行
     */
    refreshRow: function(index){
    	var snapshot = this.getScrollView().snapshot;
		var viewName = "",
			temp = 0,
		 	cellInnerHTMLList = [];
		for(var i = 0 ; i<this.views.length; ++i){
			if(this.views[i].isRowBar) {
				viewName = this.views[i].id;
				var rowbar = dojo.query("tr",viewName);
				var binding = this.grid.getBinding();
				var data = binding.getRow(index);
				var row = new unieap.ds.Row(binding.getRowSet(),data);
				var checkBox = dojo.query("input", rowbar[index-snapshot.beginRowIndex]);
				if(checkBox[0]){
	            	checkBox[0].checked = row.isRowSelected();
					if (true == row.getIdentifier("uncheckabled")) {
						dojo.attr(checkBox[0],"disabled","true");
                        $(checkBox[0]).parent().addClass('disabledChecked');
					} else {
						dojo.removeAttr(checkBox[0],"disabled");
                        $(checkBox[0]).parent().removeClass('disabledChecked');
					}
				}
				continue;
			}
			temp = this.views[i].noscroll?1:0;
			viewName = this.views[i].id;
			var trNodeList = dojo.query("tr",viewName);
			cellInnerHTMLList = dojo.query("div.u-xgrid-cell",trNodeList[index-snapshot.beginRowIndex]);
			var cellListLength = Math.min(cellInnerHTMLList.length,dojo.query("div.u-xgrid-cell",trNodeList[0]).length,dojo.query("col",viewName));
			var unShowNow = 0;
			for(var j = 0; j<cellListLength;j++){
				var rowsRealIndex = temp?j + unShowNow:j + snapshot.beginCellIndex + unShowNow;
				if(this.views[i].contentStructure.rows[0][rowsRealIndex].hidden){
					j--;
					unShowNow++;
					continue;
				}
				cellInnerHTMLList[j].innerHTML = this.views[i].contentStructure.rows[0][rowsRealIndex].format(index);
			}
		}
	},
	
	/**
     * @summary:
     * 		刷新某个单元格
     * @param:
     * 		{number} index
     * @param:
     * 		{unieap.grid.Cell} cell
     * @example:
     * |var grid=dijit.byId('grid');
     * |grid.getManager('ViewManager').refreshCell(0,cell) //刷新第一列第一行的cell
     */
	refreshCell: function(index,cell){
		if(!cell) return;
		if(cell.editor && cell.editor.editorClass=='unieap.form.RadioButton')return;
		var snapshot = this.getScrollView().snapshot;
    		//realIndex = index+snapshot.beginRowIndex;
		var viewName = "",
		 	cells = [],
		 	cellIndex = cell.mulTitleIndex,
		 	lockingColNo = 0;
		for(var i = 0 ; i<this.views.length; ++i){
			if(this.views[i].isRowBar) continue;
			if(this.views[i].noscroll){
				lockingColNo = this.views[i].cells.length;
			}
			viewName = this.views[i].id;
			var trNodeList = dojo.query("tr",viewName);
			//U_EAP00027958
			if(trNodeList.length == undefined || trNodeList.length == 0){
				continue;
			}
			cells = dojo.query("div.u-xgrid-cell",trNodeList[index-snapshot.beginRowIndex]);
			//cell在锁定列范围内
			if(cellIndex<lockingColNo){
				var hiddenCellNo = 0,
					rows = this.views[i].contentStructure.rows[0];
				for(var j=0; j<cellIndex; j++){
					if(rows[j].hidden && rows[j].editor){
						hiddenCellNo++;
					}
				}
//				cells[cellIndex-hiddenCellNo].innerHTML = this.views[i].contentStructure.rows[0][cellIndex].format(index);
				var cellNode = cells[cellIndex-hiddenCellNo];
				if(cellNode){
					cellNode.innerHTML = this.views[i].contentStructure.rows[0][cellIndex].format(index);
					if(this.markDirty){
						var rowItem = new unieap.ds.Row(this.grid.getBinding().getRowSet(),this.grid.getBinding().getRow(index));;
						var cellChangeNode = cellNode.nextSibling;
						if(cellChangeNode){
						dojo.style(cellChangeNode,"display",(cell["name"]&& rowItem && rowItem.isItemChanged(cell["name"]))?"block":"none");
						}
					}
				}
				return;
			}else
			if(this.views[i].noscroll){
				continue;
			}else{
				//非锁定列
				//cellIndex-lockingColNo-snapshot.beginCellIndex-hiddenCellNo为可编辑的第几个，因为是dojo.query得到的，所以应该是可见的序号
				//cellNoInRows 为cell在rows[0]中的需要，需要去掉锁定列的列数
				//uneditedCellNo为不可编辑的列数，如cell上没有配置编辑类型
				var hiddenCellNo = 0,
					uneditedCellNo = 0,
					rows = this.views[i].contentStructure.rows[0],
					cellNoInRows = cellIndex-lockingColNo;
				for(var j=0; j<cellNoInRows ; ++j){
					if(rows[j].hidden && rows[j].editor){
						hiddenCellNo++;
					}
				}
				var beginCellIndex = snapshot.beginCellIndex;
				if(this.views[i].originalSnapshotBeginCellIndex){
					beginCellIndex = this.views[i].originalSnapshotBeginCellIndex;
				}
				//刷新表格时串格
//				for(var j=beginCellIndex; j<cellNoInRows ; ++j){
//					if(!rows[j].editor){
//						uneditedCellNo++;
//					}
//				}
//				var tempIndex = cellIndex-lockingColNo-beginCellIndex-hiddenCellNo-uneditedCellNo;
				var tempIndex = cellIndex-lockingColNo-beginCellIndex-hiddenCellNo;
				//当cell不显示的时候，不需要刷新，tempIndex可能小于0或者大于cells的长度
				var cellNode = cells[tempIndex];
				if(cellNode){
					cellNode.innerHTML = rows[cellNoInRows].format(index);
					if(this.markDirty){
						var rowItem = new unieap.ds.Row(this.grid.getBinding().getRowSet(),this.grid.getBinding().getRow(index));;
						var cellChangeNode = cellNode.nextSibling;
						if(cellChangeNode){
//							if (cell["name"]&& rowItem && rowItem.isItemChanged(cell["name"])){
//								dojo.style(cellChangeNode,"display","block");
//							}
//							else{
//								dojo.style(cellChangeNode,"display","none");
//							}
						dojo.style(cellChangeNode,"display",(cell["name"]&& rowItem && rowItem.isItemChanged(cell["name"]))?"block":"none");
						}
					}
				}
			}
		}
	},
    
    /**
     * @summary:
     * 		刷新表格可视区域，不改变滚动条的位置
     * @description:
     * 		本方法会重新渲染Grid控件
     * @example:
     * |var grid=dijit.byId('grid');
     * |grid.getManager('ViewManager').refresh()
     */
    refreshPage: function(){
		var rowCount = this.grid.getBinding().getRowCount();
		var scrollView = this.getScrollView();
		scrollView.snapshot.rowCount = rowCount;
		dojo.forEach(this.views,function(view){
	    	view.renderHeader();
	    });
		this.grid.resizeContainer();
    },
     /**
     * @summary:
     * 		刷新表格视图
     * @description:
     * 		本方法会重新渲染Grid控件
     * @example:
     * |var grid=dijit.byId('grid');
     * |grid.getManager('ViewManager').refresh()
     */
    refresh: function(autoHeight) {
    	unieap.fireEvent4Widget(this, this.grid, this.onBeforeRefresh,[]);
    	this.grid._hasCellFormatterError = false;
    	dojo.forEach(this.views,function(view){
    		delete view.snapshot;
    		view.snapshot = {
    			beginRowIndex : 0,
    			beginCellIndex : 0,
    			viewHeight : this.yScrollHeight,
    			gridWidth : this.xScrollWidth
    		};
    	});
    	autoHeight?this.grid.resizeContainer(true):this.grid.resizeContainer();
    },
    
    /**
     * @summary:
     * 		设置表格是否自动渲染
     * @param:
     * 		{boolean} render
     * @example:
     * |<div dojoType="unieap.xgrid.Grid" id="grid" views="{autoRender:false}">
     * |	...
     * |</div>
     * |var viewMan=unieap.byId("grid").getManager("ViewManager");
     * |viewMan.setAutoRender(true);
     */
    setAutoRender: function(render) {
        this.autoRender = render;
        if(!render){
        	dojo.forEach(this.views,function(view){
	    		view.contentNode.innerHTML = "";
	    	});
        }
        this.refresh();
    },
    
     /**
     * @summary:
     * 		设置列标题值
     * @param:
     * 		{string|number} cell
     * @param:
     * 		{string} customName
	 * @example:
	 * |var viewMan=unieap.byId('grid').getManager('ViewManager');
	 * |var label=viewMan.setHeaderName('attr_sal','最新工资');//列标题值变为"最新工资"
     */
    setHeaderName: function(inCell, customName) {
		var cell = this.grid.getLayoutManager().getCell(inCell);
		if (!cell) {
			return;
		};
		var n = dojo.isString(customName)?customName:cell.name,
			th = dojo.query("TH", this.getViewByCell(cell).headerNode)[cell.layoutIndex],
		 	headerDiv = th.firstChild;
//		 	divInnerHTML = headerDiv.innerHTML,
//			headerDivIndex = divInnerHTML.indexOf("<div");
//		if(-1 == headerDivIndex){
//			headerDivIndex = divInnerHTML.indexOf("<DIV");
//		}
//		var oldName = divInnerHTML.slice(0,headerDivIndex);
//		if(oldName){
//			headerDiv.innerHTML = headerDiv.innerHTML.replace(oldName,n);
//		}else{
//			return;
//		}
		if (dojo.isIE) {
			headerDiv.innerText = n;
		} else {
			headerDiv.textContent = n;
		}
		 cell.label = n;
		 this.publish("headerNameChanged");
    },
    
    /**
	 * @summary:
	 * 		获得列标题值
	 * @param:
	 * 		{string|number} inCell Cell的序号或者name属性
	 * @example:
	 * |var viewMan=unieap.byId('grid').getManager('ViewManager');
	 * |var label=viewMan.getHeaderName('attr_sal');//获得标签值为"工资"
	 */
	getHeaderName: function(inCell){
		var cell = this.grid.getLayoutManager().getCell(inCell);
		return cell?cell.label:null;
		
	},
    
    /**
     * @summary:
     * 		将指定行滚动到可显示页面
     * @param:
     * 		{number} inRowIndex
     * @example:
     * |var grid=dijit.byId('grid');
     * |grid.getViewManager().scrollToRow(30); //第30行滚动到可显示区域
     */
    scrollToRow: function(inRowIndex) {
    	if (isNaN(inRowIndex) || inRowIndex<0) return;
    	this.scroller.visualizeRow(inRowIndex);
    },
    
    /**
	 * @summary:
	 * 		获得指定单元格的内容
	 * @param:
	 * 		{string|number} inCell 列绑定名称或者列索引号
	 * @param:
	 * 		{number} inRowIndex 单元格所在的行索引
	 * @param：
	 * 		{boolean} isOrigin 是否获得格式化前的值
	 * @example:
	 * |var grid=unieap.byId('grid');
	 * |//获得第一行、第一列单元格中的数据
	 * |var text=grid.getManager('ViewManager').getItemText(0,0);
	 * |//获得第一行行中列绑定名为attr_sal的单元格的值
	 * |var text1=grid.getManager('ViewManager').getItemText("attr_sal",0);
	 * @example:
	 * |var txt=manager.getItemText("attr_sal",0);
	 * |var txt1=manager.getItemText("attr_sal",0,true);
	 * |比如单元格的显示值格式化成'5,000.00',txt的值就为'5,000.00',而txt1为'5000'.
	 */
    getItemText: function(inCell, inRowIndex,isOrigin) {
		if(inCell.declaredClass!='unieap.grid.Cell'){
			inCell=this.grid.getLayoutManager().getCell(inCell);
		}
    	if (!inCell) {
    		return null;
    	}
    	var value = inCell._get(inRowIndex);
		isOrigin!=true && (value=inCell._format(value,inRowIndex));
    	return value;
    },
    
    /**
	 * @summary:
	 * 		设置指单元格样式(合并单元格暂不支持该方法设置样式)
	 * @param:
	 * 		{number} inRowIndex  单元格所在的行索引 
	 * @param:
	 * 		{string|number} cell 列绑定名称或者列索引号
	 * @param:
	 * 		{object} styles 样式对象
	 * @example:
	 * |var viewMan=unieap.byId("grid").getManager("ViewManager");
	 * |//设置Grid中第一行中列绑定名为attr_sal的单元格的样式
	 * |viewMan.setCellStyles(0,"attr_sal",{"color":"red","text-align":"left"});
	 */
	setCellStyles: function(inRowIndex, inCell, styles) {
		if(typeof(inRowIndex)!="number") return;
		var rowCount=this.grid.getBinding().getRowCount(),
			cell = this.grid.getLayoutManager().getCell(inCell);
		if(inRowIndex>rowCount||!cell) return;
		var style,
			tempStyles = '',
			cellIndex = cell.mulTitleIndex,
			rowNodes = [];
		if(!cellIndex && 0 != cellIndex) return;
		cell.changeStyle = true;
		var row = this.grid.getBinding().getRowSet().getRow(inRowIndex);
		if(!row.getIdentifier("identifierNO")){
			row.setIdentifier("identifierNO",{});
		}
		if(!row.getIdentifier("_styles")){
			row.setIdentifier("_styles",{});
		}
//		rowDatas[inRowIndex].identifierNO = rowDatas[inRowIndex].identifierNO || [];
//		rowDatas[inRowIndex]._styles = 	rowDatas[inRowIndex]._styles || [];
		for(style in styles) {
			if("undefined" != typeof(style) ){
				tempStyles += style+":"+styles[style]+";";
			}
		}
//		rowDatas[inRowIndex]._styles[cellIndex] = tempStyles;
//		rowDatas[inRowIndex].identifierNO[cellIndex] = cellIndex;

		var _style = row.getIdentifier("_styles");
		_style[cellIndex] = tempStyles;
		row.setIdentifier("_styles",_style);
		
		var _identifierNO = row.getIdentifier("identifierNO");
		_identifierNO[cellIndex] = cellIndex;
		row.setIdentifier("identifierNO",_identifierNO);
		
		//刷新行样式
		var scrollView = this.getScrollView();
		if(scrollView.snapshot.beginRowIndex > inRowIndex) return;
		inRowIndex -= scrollView.snapshot.beginRowIndex; 
		for (var i=0,view; view = this.views[i]; i++) {
			if (view.isRowBar) continue;
			var rowNode = view.getRowNode(inRowIndex);
			if(rowNode){	//U_EAP00028110
				dojo.forEach(rowNode.childNodes,function(cellNode){
					rowNodes.push(cellNode.firstChild.firstChild); //U_EAP00029666
				});
			}
		}
		if (rowNodes.length==0) return;
		var cellNode = rowNodes[cellIndex];
		if(!cell.hidden && cellNode){ //U_EAP00029108
			for(style in styles) {
				if("undefined" != typeof(style) ){
					if(!dojo.isIE){
						cellNode.attributes.style.value += ";"+style+":"+styles[style];
					}else{
						cellNode.style.cssText += ";"+style+":"+styles[style];
					}
				}
			}
		}
	},
	
	/**
	 * @summary:
	 * 		设置指定行样式(合并单元格暂不支持该方法设置样式)
	 * @param：
	 * 		{number} inRowIndex 行索引号
	 * @param:
	 * 		{object} styles 样式对象
	 * @example:
	 * |var viewMan=unieap.byId("grid").getManager("ViewManager");
	 * |//设置Grid中第一行的样式
	 * |viewMan.setRowStyles(0,{"color":"red","text-align":"left"});
	 */

	setRowStyles: function(inRowIndex, styles) {
		if(typeof(inRowIndex)!="number") return;
		var rowNodes = [],
			rowCount=this.grid.getBinding().getRowCount();
//		rowDatas[inRowIndex].identifierNO = rowDatas[inRowIndex].identifierNO || [];
//		rowDatas[inRowIndex]._styles = 	rowDatas[inRowIndex]._styles || [];
		var rowObject = this.grid.getBinding().getRowSet().getRow(inRowIndex);
		if(!rowObject.getIdentifier("identifierNO")){
			rowObject.setIdentifier("identifierNO",{});
		}
		if(!rowObject.getIdentifier("_styles")){
			rowObject.setIdentifier("_styles",{});
		}
		//保存样式
		var tempStyles = '';
		for(style in styles) {
			if("undefined" != typeof(style) ){
				tempStyles += ";"+style+":"+styles[style];
			}
		}
		if(inRowIndex>rowCount) return;
		for (var i=0,view; view = this.views[i]; i++) {
			if (view.isRowBar) continue;
			var rows = view.contentStructure.rows;
			var row = rows[0];
			for(var j=0, cell; (cell=row[j]); j++) {
				cell.changeStyle = true;
//				rowDatas[inRowIndex].identifierNO[cell.mulTitleIndex] = cell.mulTitleIndex;
//				rowDatas[inRowIndex]._styles[cell.mulTitleIndex] = tempStyles;
				var _style = rowObject.getIdentifier("_styles");
				_style[cell.mulTitleIndex] = tempStyles;
				rowObject.setIdentifier("_styles",_style);
		
				var _identifierNO = rowObject.getIdentifier("identifierNO");
				_identifierNO[cell.mulTitleIndex] = cell.mulTitleIndex;
				rowObject.setIdentifier("identifierNO",_identifierNO);
			}
		}
		//刷新行样式
		var scrollView = this.getScrollView();
		if(scrollView.snapshot.beginRowIndex > inRowIndex) return;
		inRowIndex -= scrollView.snapshot.beginRowIndex; 
		for (var i=0,view; view = this.views[i]; i++) {
			if (view.isRowBar) continue;
			var rowNode = view.getRowNode(inRowIndex);
			rowNode && rowNodes.push(rowNode);
		}
		if (rowNodes.length==0) return;
		dojo.forEach(rowNodes,function(node){
			dojo.forEach(node.childNodes,function(cellNode){
				dojo.forEach(cellNode.childNodes,function(textNode){
					dojo.forEach(textNode.childNodes,function(cellTextNode){
						for(style in styles) {
							if("undefined" != typeof(style) ){
								if(!dojo.isIE){
									if("undefined" != typeof(cellTextNode.attributes.style)){
										cellTextNode.attributes.style.value += ";"+style+":"+styles[style];
									}
								}else{
									cellTextNode.style.cssText += ";"+style+":"+styles[style];
								}
							}
						}
					});
				});
			});
		});
	},
    
    /**
     * @summary:
     * 		判断表格是否有rowBar
     * @return:
     * 		{boolean}
     * @example:
     * |var viewMan=unieap.byId('grid').getManager('ViewManager');
     * |var rowBar=viewMan.hasRowBar();
     */
    hasRowBar: function() {
        var sm = this.grid.SelectionManager;
        return this.rowBar || this.rowNumber || sm && sm.getSelectType();
    },
  	/**   
   	 * @summary:
     * 		grid视图刷新前事件
     * @example:
     * |function fn(){}
     * |<div dojoType='unieap.xgrid.Grid' views="{onBeforeRefresh:fn}"></div>
     */
	onBeforeRefresh: function() {
	},
	/**
	 * @summary:
	 * 		在单元格上鼠标释放事件
	 * @param:
	 * 		{unieap.xgrid.Cell} inCell 
	 * @param:
	 * 		{number} inRowIndex
	 * @param:
	 * 		{event} evt
	 * @example:
	 * |function fn(cell,index,evt){}
	 * |<div dojoType='unieap.xgrid.Grid' views="{onCellMouseup:fn}"></div>
	 */
    onCellMouseup: function(inCell, inRowIndex) {
    },
    _doHeaderClick: function(e) {
    	if (e.cell) {
    		if (this.canSort(e.cell)) {
                this.grid.rowEdit && this.grid.rowEdit.applyEdit();
                this.grid.getBinding().sort(e.cell, -e.cell.asc);
            }
    		unieap.fireEvent4Widget(this, this.grid,this.onHeaderCellClick,[e.cell]);
    	}
    	unieap.fireEvent4Widget(this, this.grid,this.onHeaderClick,[e]);
    },
    _doHeaderMousedown: function(e) {
    	if (e.cell) {
    		unieap.fireEvent4Widget(this, this.grid,this.onHeaderCellMousedown,[e.cell]);
    	}
    	unieap.fireEvent4Widget(this, this.grid,this.onHeaderMousedown,[e]);
    },
     /**
	 * @summary:
	 * 		设置表格是否可排序
	 */
    canSort: function(inCell) {
        return this.orderType != "none" && inCell.canSort != false && inCell.isMulTitle != true;
    },
    
    onMouseOverRow: function(e) {
        var rows = this.grid.RowManager;
        if (!rows.isOver(e.rowIndex)) {
            rows.setOverRow(e.rowIndex);
            unieap.fireEvent4Widget(this, this.grid,(e.rowIndex == -1 ?this.onHeaderMouseOver:this.onRowMouseOver),[e]);
        }
    },
    
    onMouseOutRow: function(e) {
        var rows = this.grid.RowManager;
        if (rows.isOver(-1)) {
        	unieap.fireEvent4Widget(this, this.grid,this.onHeaderMouseOut,[e]);
        } else if (!rows.isOver(-2)) {
        	unieap.fireEvent4Widget(this, this.grid,this.onRowMouseOut,[e]);
        }
    },
    
	onMouseOver: function(e){
    	if (e.rowIndex==null || !e.cell) return;
    	if (e.rowIndex >= 0) {
			this.enableTooltip&&this._enableTooltip(e);
			unieap.fireEvent4Widget(this, this.grid,this.onCellMouseOver,[e.cell, e.rowIndex, e]);
    	}
    },
    
    _enableTooltip: function(e){
		if(e.cell && e.cell.editor && e.cell.editor.editorClass=="unieap.form.RadioButton")return;
		this._toolTipTimer=setTimeout(dojo.hitch(this,function(){
			if(!this._globalSpan&&!dojo.byId('_globalSpan_')){
				this._globalSpan=dojo.create("span",{style: {
					visibility: 'hidden',
					position: 'absolute'
				},id:'_globalSpan_'},dojo.body(),"first");
			}
			this._globalSpan = dojo.byId('_globalSpan_');
			if(dojo.isIE == 6){
			 	dojo.style(this._globalSpan,'display','');
			};
			var cellNode,
				fontSize="12px",
				paddingRight=0;
			try{
				cellNode=e.cellNode;
				fontSize=dojo.style(cellNode,'fontSize');
			}catch(ex){
			}
			this._globalSpan.style.fontSize=fontSize;
			//在配置了filter的情况下不判断会报错
			if(!cellNode||!cellNode.childNodes[0]) return;
			var innerHTML,
				tooltipHTML = innerHTML = cellNode.childNodes[0].childNodes[0].innerHTML;
			innerHTML=cellNode.childNodes[0].childNodes[0].innerHTML;
			innerHTML = "<DIV class=\"u-grid-text\">" +innerHTML+ "</DIV>";
			this._globalSpan.innerHTML = innerHTML;
			paddingRight=parseInt(dojo.getComputedStyle(cellNode.childNodes[0]).paddingRight);//火狐下tooltip报脚本错误问题 见U_EAP00008619
			var cellNodeWidth = dojo.contentBox(cellNode).w;
			var showToolTip = dojo.contentBox(this._globalSpan).w-paddingRight>=cellNodeWidth;//U_EAP00028357
			//解决IE6下显示tooltip出现滚动条的问题 见U_EAP00008377
			dojo.isIE==6&&dojo.style(this._globalSpan,"display","none");
			//判断cellNodeWidth是否为0，解决新表格在滚动鼠标滑轮时cellNode宽度为0出现toolTip的bug 见U_EAP00021303
			if(showToolTip && 0 != cellNodeWidth){
				//整个window的宽度
				var windowWidth;
                try {
                    windowWidth = dojo.style(unieap.getTopWin().dojo.body(),'width');
                }
                catch(err) {
                    windowWidth = $(document.body).width();
                }
				//全文的tooltip长度
				var tooltipWidth = dojo.style(this._globalSpan,'width');
				var aroundNodePos = dojo.coords(cellNode, true);
				//cell的宽度
				var cellNodeWidth = aroundNodePos.w;
				var cellX = aroundNodePos.x;
				var rightPlaceWidth = windowWidth-cellX-cellNodeWidth;
                tooltipWidth = 400;

                // @yll 解决tooltip多余标签bug &合同下不过滤tooltip图片
                if((this.grid.class!='pact_grid') && (tooltipHTML != null || tooltipHTML != undefined)){
                    tooltipHTML = tooltipHTML.replace(/<[^>]+>/g,"");
                }				
				var isSetTooltipWidth = false;
				
				if(cellX > rightPlaceWidth){//tooltip出现在左侧
					if( (cellX < tooltipWidth) || (tooltipWidth > 600)){//tooltip如果太宽，需要制定大小 而且全屏也不美观
						tooltipWidth = Math.floor(Math.min((cellX-100),600));
						if(tooltipWidth < 10  || windowWidth < 800){tooltipWidth = 400};
						isSetTooltipWidth = true;
					}
				}else {
					if(tooltipWidth>600){//tooltip在右侧但太宽
						tooltipWidth = Math.floor(Math.min((rightPlaceWidth-100),600));
						isSetTooltipWidth = true;
					}
				}
				
				if(isSetTooltipWidth){
					tooltipHTML = "<DIV style='padding: 0 5px 0 5px;vertical-align: middle;word-wrap: break-word;overflow: hidden;" +
									  "height:100%;width:"+tooltipWidth+"px'>" +tooltipHTML+ "</DIV>";
				}else{
					tooltipHTML = "<DIV style='padding: 0 5px 0 5px;vertical-align: middle;word-wrap: break-word;overflow: hidden;" +
								  "height:100%;'>" +tooltipHTML+ "</DIV>";
				}
				
				unieap.showTooltip(tooltipHTML,cellNode);
			}
			
		}),0);
	},
	
	_doContextMenu: function(e){
		//U_EAP00028570
		if(isNaN(e.rowIndex) || null == e.rowIndex) return false;
		this.onContextMenu(e.cell,e.cellNode,e.rowIndex);
		if(dojo.isIE){
			e.cellNode.oncontextmenu&&e.cellNode.fireEvent('oncontextmenu');
		}else{
			var evt=document.createEvent('HTMLEvents');
			evt.initEvent("contextmenu", false, false);
			e.cellNode.dispatchEvent(evt);
		}
		return true;
	},
    
	onMouseOut: function(e){
    	if (e.rowIndex==null || !e.cell) return;
    	if (e.rowIndex >= 0) {
			this.enableTooltip&&this._disableTooltip(e);
			unieap.fireEvent4Widget(this, this.grid,this.onCellMouseOut,[e.cell, e.rowIndex, e]);
    	}
    	var rowManager = this.grid.RowManager;
    	//U_EAP00027811 当鼠标移出xgrid时，清除当前行的样式
    	rowManager.removeRowOverStyles(e.rowIndex);
    },
    
    _disableTooltip: function(e){
		clearTimeout(this._toolTipTimer);
		this._globalSpan&&unieap.hideTooltip(e.cellNode);
	},
    
	//鼠标按下事件
	_onMousedown: function(e) {
		if (e.cell) {
			unieap.fireEvent4Widget(this, this.grid,this.onCellMousedown,[e.cell, e.rowIndex, e]);
		}
		if (e.rowIndex == null || isNaN(e.rowIndex)) {
			return;
		}
		unieap.fireEvent4Widget(this, this.grid,this.onRowMousedown,[e]);
		var rowManager = this.grid.RowManager;
		rowManager.updateCurrentRow(Number(e.rowIndex),e);
		if(e.rowIndex == null){
			rowManager.updateHighlightRow(null,true);
		}else{
			if(e.ctrlKey){
				rowManager.updateHighlightRow(Number(e.rowIndex),false);
			}else{
				rowManager.updateHighlightRow(Number(e.rowIndex),true);
			}
		}
		
	},
	//鼠标释放事件
	_onMouseup: function(e) {
		if (e.cell) {
			unieap.fireEvent4Widget(this, this.grid,this.onCellMouseup,[e.cell, e.rowIndex, e]);
		}
		if (e.rowIndex == null || isNaN(e.rowIndex)) {
			return;
		}
		unieap.fireEvent4Widget(this, this.grid,this.onRowMouseup,[e]);
	},
	
	//暂存单击事件，防止在双击时误入单击事件
	_intervalTimer : null,
	
	//单双击辨别时延，官方推荐值为300（毫秒）
	_doubleClickDelay : 300,
	 
	//鼠标点击事件；注：为点击附加的事件请放在_onMousedown中
	_doClick: function(e) {
		if(this.distinguishDblclick){
			clearTimeout(this._intervalTimer); //取消上次延时未执行的方法 
			this._intervalTimer = setTimeout(dojo.hitch(this,function(){
				if (e.cell) {
					unieap.fireEvent4Widget(this, this.grid,this.onCellClick,[e.cell, e.rowIndex, e]);
				}
				var rowManager = this.grid.RowManager;
				if (isNaN(e.rowIndex) || null == e.rowIndex) {
					return;
				}
				unieap.fireEvent4Widget(this, this.grid,this.onRowClick,[e]);
				rowManager.updateCurrentRow(Number(e.rowIndex),e);
			}),this._doubleClickDelay);
		}else{
			if (e.cell) {
					unieap.fireEvent4Widget(this, this.grid,this.onCellClick,[e.cell, e.rowIndex, e]);
				}
				var rowManager = this.grid.RowManager;
				if (isNaN(e.rowIndex) || null == e.rowIndex) {
					return;
				}
				unieap.fireEvent4Widget(this, this.grid,this.onRowClick,[e]);
				rowManager.updateCurrentRow(Number(e.rowIndex),e);
		}
	},
	//鼠标双击事件
	_doDbClick: function(e) {
		if(this.distinguishDblclick){
			clearTimeout(this._intervalTimer); 
		}
		if (e.cell) {
			unieap.fireEvent4Widget(this, this.grid,this.onCellDblClick,[e.cell, e.rowIndex, e]);
		}
		if (e.rowIndex == null || isNaN(e.rowIndex)) {
			return;
		}
		unieap.fireEvent4Widget(this, this.grid,this.onRowDblClick,[e]);
	},
	/**
	 * @summary:
	 * 		在单元格上点击事件
	 * @description:
	 * 		对于合并单元格，请在unitedCell属性上设置onCellClick属性
	 * @param:
	 * 		{unieap.xgrid.Cell} inCell 
	 * @param:
	 * 		{number} inRowIndex
	 * @param:
	 * 		{event} evt
	 * @example:
	 * |function fn(cell,index,evt){}
	 * |<div dojoType='unieap.xgrid.Grid' views="{onCellClick:fn}"></div>
	 */
    onCellClick: function(inCell, inRowIndex) {
    },
	/**
	 * @summary:
	 * 		在单元格上双击事件
	 * @description:
	 * 		对于合并单元格，请在unitedCell属性上设置onCellDblClick属性
	 * @param:
	 * 		{unieap.xgrid.Cell} inCell 
	 * @param:
	 * 		{number} inRowIndex
	 * @param:
	 * 		{event} evt
	 * @example:
	 * |function fn(cell,index,evt){}
	 * |<div dojoType='unieap.xgrid.Grid' views="{onCellDblClick:fn}"></div>
	 */
    onCellDblClick: function(inCell, inRowIndex) {
    },
	 /**
     * @summary:
     * 		单元格上鼠标按下事件
     * @param:
     * 		{unieap.xgrid.Cell} inCell 单元格对象
     * @param:
     * 		{number} rowIndex 行索引号
	 * @param:
	 * 		{event} evt
	 * @example:
	 * |function fn(cell,index,evt){}
     * |<div dojoType='unieap.xgrid.Grid' views="{onCellMousedown:fn}"></div>
     */
    onCellMousedown: function(inCell, inRowIndex) {
    },
     /**
     * @summary:
     * 		单元格上鼠标经过事件
     * @param:
     * 		{unieap.xgrid.Cell} inCell 单元格对象
     * @param:
     * 		{number} rowIndex 行索引号
	 * @param:
	 * 		{event} evt
	 * @example:
	 * |function fn(cell,index,evt){}
     * |<div dojoType='unieap.xgrid.Grid' views="{onCellMouseOver:fn}"></div>
     */
    onCellMouseOver: function(inCell,rowIndex) {
    },
    /**
     * @summary:
     * 		单元格上鼠标移出事件
     * @param:
     * 		{unieap.xgrid.Cell} inCell 单元格对象
     * @param:
     * 		{number} rowIndex 行索引号
	 * @param:
	 * 		{event} evt
	 * @example:
	 * |function fn(cell,index,evt){}
     * |<div dojoType='unieap.xgrid.Grid' views="{onCellMouseOut:fn}"></div>
     */
    onCellMouseOut: function(inCell,rowIndex) {
    },
    /**
	 * @summary:
	 * 		鼠标移出Grid表头事件
	 * @param:
	 * 		{event} evt
	 * @example:
	 * |function fn(evt){unieap.debug(evt)}
	 * |<div dojoType='unieap.xgrid.Grid' views="{onHeaderMouseOut:fn}"></div>
	 */
    onHeaderMouseOut: function(evt) {
    },
    /**
	 * @summary:
	 * 		鼠标移出Grid的某一行事件
	 * @param:
	 * 		{event} evt
	 * @example:
	 * |function fn(evt){unieap.debug(evt)}
	 * |<div dojoType='unieap.xgrid.Grid' views="{onRowMouseOut:fn}"></div>
	 */
    onRowMouseOut: function(evt) {
    },
    /**
	 * @summary:
	 * 		鼠标滑过Grid的某一行事件
	 * @param:
	 * 		{event} evt
	 * @example:
	 * |function fn(evt){unieap.debug(evt)}
	 * |<div dojoType='unieap.xgrid.Grid' views="{onRowMouseOver:fn}"></div>
	 */
    onRowMouseOver: function(evt) {
    },
    /**
	 * @summary:
	 * 		在Grid的某一行上鼠标按下事件
	 * @param:
	 * 		{event} evt
	 * @example:
	 * |function fn(evt){unieap.debug(evt)}
	 * |<div dojoType='unieap.xgrid.Grid' views="{onRowMousedown:fn}"></div>
	 */
    onRowMousedown: function(evt) {
    },
	/**
	 * @summary:
	 * 		在Grid的某一行上鼠标释放事件
	 * @param:
	 * 		{event} evt
	 * @example:
	 * |function fn(evt){unieap.debug(evt)}
	 * |<div dojoType='unieap.xgrid.Grid' views="{onRowMouseup:fn}"></div>
	 */
    onRowMouseup: function(evt) {
    },
	/**
	 * @summary:
	 * 		在Grid的某一行上鼠标点击事件
	 * @param:
	 * 		{event} evt
	 * @example:
	 * |function fn(evt){unieap.debug(evt)}
	 * |<div dojoType='unieap.xgrid.Grid' views="{onRowClick:fn}"></div>
	 */
    onRowClick: function(evt) {
    },
	/**
	 * @summary:
	 * 		在Grid的某一行上鼠标双击事件
	 * @param:
	 * 		{event} evt
	 * @example:
	 * |function fn(evt){unieap.debug(evt)}
	 * |<div dojoType='unieap.xgrid.Grid' views="{onRowDblClick:fn}"></div>
	 */
    onRowDblClick: function(evt) {
    },
	/**
	 * @summary:
	 * 		列表头鼠标点击事件
	 * @param:
	 * 		{unieap.xgrid.Cell} inCell 列对象
	 * @example:
	 * |function fn(inCell){unieap.debug(inCell)}
	 * |<div dojoType='unieap.xgrid.Grid' views="{onHeaderCellClick:fn}"></div>
	 */
    onHeaderCellClick: function(inCell) {
    },
	/**
	 * @summary:
	 * 		表头鼠标点击事件
	 * @description:
	 * 		如果同时配置了onHeaderCellClick和onHeaderClick,会先执行前者再执行后者
	 * @param:
	 * 		{event} evt 
	 * @example:
	 * |function fn(inCell){unieap.debug(inCell)}
	 * |<div dojoType='unieap.xgrid.Grid' views="{onHeaderClick:fn}"></div>
	 */
    onHeaderClick: function(evt) {
    },
	/**
	 * @summary:
	 * 		列表头鼠标按下事件
	 * @param:
	 * 		{unieap.xgrid.Cell} inCell 列对象
	 * @example:
	 * |function fn(inCell){unieap.debug(inCell)}
	 * |<div dojoType='unieap.xgrid.Grid' views="{onHeaderCellMousedown:fn}"></div>
	 */
    onHeaderCellMousedown: function(inCell) {
    },
    /**
	 * @summary:
	 * 		渲染表头的回调方法
	 * @param:
	 * 		{HTMLDomNode} node 标头结点
	 * @param:
	 * 		{unieap.grid.View} inView 视图对象
	 * @example:
	 * |function fn(node ,view){unieap.debug(inCell)}
	 * |<div dojoType='unieap.xgrid.Grid' views="{onHeaderRender:fn}"></div>
	 */
    onHeaderRender : function(node ,inView){
    },
	/**
	 * @summary:
	 * 		表头鼠标按下事件
	 * @param:
	 * 		{event} evt 
	 * @example:
	 * |function fn(inCell){unieap.debug(inCell)}
	 * |<div dojoType='unieap.xgrid.Grid' views="{onHeaderMousedown:fn}"></div>
	 */
    onHeaderMousedown: function(e) {
    },
    /**
     * @summary:
     * 		在单元格上点击右键时触发
     * @param:
     * 		{unieap.grid.Cell} cell
     * @param:
     * 		{domNode} cellNode
     * @param:
     * 		{number} inRowIndex
     * @example:
     * |<div dojoType="unieap.xgrid.Grid" views="{onContextMenu:fn}">
     * |	...
     * |</div>
     * |<script type="text/javascript">
     * |	var menu;
     * |	function fn(cell,cellNode,inRowIndex){
     * |		if(!menu){
     * |			menu=new unieap.menu.Menu({style:'display:none'});
     * |			menu.addChild(new unieap.menu.MenuItem({label:'你好'}));
     * |			menu.addChild(new unieap.menu.MenuItem({label:'基础软件'}));
     * |			menu.startup();
     * |			menu.popup();
     * |		}
     * |		menu.bindDomNode(cellNode);
     * |	}
     * |</script>
     * @img:
     * 		images/grid/views/contextmenu.png
     */
	onContextMenu:function(cell,cellNode,inRowIndex){
	},
	
	onAfterResize : function(){
    }
});
dojo.provide('unieap.xgrid.manager.RowManager');
dojo.require('unieap.xgrid.core.builder');
dojo.declare("unieap.xgrid.manager.RowManager", unieap.xgrid.manager.Manager, {
	/**
	 * @declaredClass:
	 * 		unieap.xgrid.manager.RowManager
	 * @summary:
	 * 		行控制器
	 * @description:
	 * 		行控制器，可配置表头和每行的高度。
	 * 		默认状态下，表格行高为23px。
	 * 		用户可通过设置相应的属性值。
	 * 		行控制器还提供：
	 * 			取得表格的“当前行”行号（注意，当前行一般为鼠标最后点击的行，而不是选中行）的方法:getCurrentRowIndex；
	 * 			取得总行数方法:getRowCount；
	 */

	/**
	 * @summary:
	 * 		每行的默认高度
	 * @type:
	 * 		{number}
	 * @example:
	 *| <div id="grid" id="grid" dojoType="unieap.xgrid.Grid" width="80%" height="250px" binding="{store:'empDataStore'}" rows="{defaultRowHeight:40}" 
	 *|		views="{rowBar:true}">  
	 *| </div> 
	 */
	defaultRowHeight: 28,

	/**
	 * @summary:
	 * 		表头的默认高度
	 * @type:
	 * 		{number}
	 * @example:
	 *|  <div dojoType="unieap.xgrid.Grid" rows="{defaultHeaderHeight:30}"></div>
	 */
	defaultHeaderHeight: 29,
	/**
	 * @summary:
	 * 		多表头的默认高度
	 * @type:
	 * 		{number}
	 * @example:
	 *|
	 */
	defaultMulTitleHeight: 22,


	/**
	 * @summary:
	 * 		设置鼠标滑过控件中的一行时是否给该行加上背景色
	 * @type:
	 * 		{boolean}
	 * @default:
	 * 		{true}
	 * @example:
	 *|<div dojoType="unieap.xgrid.Grid" rows="{mouseEffect:false}"></div>
	 */
	mouseEffect: true,

	overRow: -2,
	//currentRowIndex值的改变要调用updateCurrentRow(),不要直接赋值。（行样式）
	currentRowIndex: -1,

	highlightRowIndexs: [],

	managerRowBarWidth: null,

	create: function () {
		var params = this.grid.rows || {};
		this.subscribe("resize", this, "updateCurrentRow");
		this.subscribe("resize", this, "updateSelectRow");
		this.subscribe("resize", this, "showHighlight");
		dojo.mixin(this, params);
	},

	forEachView: function (inFunc) {
		var vm = this.grid.ViewManager;
		vm.forEach(dojo.hitch(this, inFunc));
	},

	setOverRow: function (inRowIndex) {
		//如果设置了rows="{mouseEffect:false}"当鼠标滑过Grid中的某一行时,不给该行增加背景样式
		var highlight = this.mouseEffect;
		if (!highlight) return;
		var last = this.overRow;
		this.overRow = inRowIndex;
		if ((last != this.overRow) && (last >= 0)) {
			this.updateStyles(last);
		}
		this.updateStyles(this.overRow);
	},

	isOver: function (inRowIndex) {
		return (this.overRow == inRowIndex);
	},

	/**
	 * @summary:
	 * 		更新当前行
	 * @param:
	 * 		{number} inRowIndex
	 */
	updateCurrentRow: function (inRowIndex, event) {
		//通过事件resize事件监听调用此方法时，inRowIndex为undefined
		if (!inRowIndex && 0 != inRowIndex) inRowIndex = this.currentRowIndex;
		this.currentRowIndex = inRowIndex;
		event = event || window.event; //或（||）书写顺序有讲究，不能随意换
		this.updateCurrentStyles(this.currentRowIndex, event);
		unieap.fireEvent4Widget(this, this.grid, this.onUpdateCurrentRow, [inRowIndex]);
	},

	showHighlight: function () {
		var highlightRowIndexs = this.highlightRowIndexs;
		if (highlightRowIndexs.length > 0) {
			var inRowIndex = 0;
			for (var i = 0, l = highlightRowIndexs.length; i < l; i++) {
				inRowIndex = highlightRowIndexs[i];
				dojo.query('table.u-xgrid-table [gridrowindex="' + inRowIndex + '"]', this.grid.viewsNode).forEach(function (node) {
					dojo.style(node, "backgroundColor", "");
					dojo.addClass(node, "u-xgrid-row-highlight");
				});
			}
		}
	},

	_clearAllHighlight: function () {
		var len = this.highlightRowIndexs.length;
		for (var i = 0; i < len; i++) {
			var rowIndex = this.highlightRowIndexs[i];
			dojo.query('table.u-xgrid-table [gridrowindex="' + rowIndex + '"]', this.grid.viewsNode).forEach(function (node) {
				dojo.removeClass(node, "u-xgrid-row-highlight");
			});
		}
		this.highlightRowIndexs = [];
	},

	_isThisRowNeedHighlight: function (inRowIndex) {
		var len = this.highlightRowIndexs.length;
		for (var j = 0; j < len; j++) {
			if (this.highlightRowIndexs[j] == inRowIndex) {
				return false;
			}
		}
		return true;
	},

	updateHighlightRow: function (inRowIndex, reset) {
		if (reset) {
			this._clearAllHighlight();
		}
		if (inRowIndex != null) {
			dojo.query('table.u-xgrid-table [gridrowindex="' + inRowIndex + '"]', this.grid.viewsNode).forEach(function (node) {
				dojo.style(node, "backgroundColor", "");
				dojo.addClass(node, "u-xgrid-row-highlight");
			});
			if (this._isThisRowNeedHighlight(inRowIndex))
				this.highlightRowIndexs.push(inRowIndex);
		}
	},

	updateCurrentStyles: function (inRowIndex, event) {
		if (event) {
			var tagName = (event.srcElement ? event.srcElement.tagName : event.target.tagName);
			if (tagName == "A") {
				var row = this.grid.getBinding().getRowSet().getRow(inRowIndex);
				if (event.cell && event.cell.name) {
					var cell = this.grid.getLayoutManager().getCell(event.cell.name),
					cellIndex = cell.mulTitleIndex;
					cell.color_v = true;
				}
				var rowIndexojb = {
					'color_v': inRowIndex
				}
				if(row){
					if (!row.getIdentifier("identifierNO")) {
						row.setIdentifier("identifierNO", {});
					}
					var _identifierNO = row.getIdentifier("identifierNO");
					_identifierNO[cellIndex] = cellIndex;
					row.setIdentifier("identifierNO", _identifierNO);
					row.setIdentifier('color_v', rowIndexojb);
					$(event.target || event.srcElement).addClass("color_v");
				}
				
			}
		}!this.currentRows && (this.currentRows = []);
		var currentRows = this.currentRows;
		for (var i = 0, l = currentRows.length; i < l; ++i) {
			dojo.removeClass(currentRows.pop(), "u-xgrid-row-current");
		}
		dojo.query('table.u-xgrid-table [gridrowindex="' + inRowIndex + '"]', this.grid.viewsNode).forEach(function (node) {
			dojo.style(node, "backgroundColor", "");
			dojo.addClass(node, "u-xgrid-row-current");
			currentRows.push(node);
		});
	},

	//U_EAP00027811 当鼠标移出xgrid时，清除当前行的样式
	removeRowOverStyles: function (inRowIndex) {
		if (inRowIndex == this.currentRowIndex) return;
		!this.overRows && (this.overRows = []);
		var size = this.overRows.length,
			overRows = this.overRows;
		for (var i = 0; i < size; i++) {
			dojo.removeClass(overRows.pop(), "u-xgrid-row-over");
		}
	},

	updateStyles: function (inRowIndex) {
		//		if(inRowIndex == this.currentRowIndex) return;  //U_EAP00029533
		!this.overRows && (this.overRows = []);
		var size = this.overRows.length,
			overRows = this.overRows;
		for (var i = 0; i < size; i++) {
			dojo.removeClass(overRows.pop(), "u-xgrid-row-over");
		}
		dojo.query('table.u-xgrid-table [gridrowindex="' + inRowIndex + '"]', this.grid.viewsNode).forEach(function (node) {
			dojo.addClass(node, "u-xgrid-row-over");
			overRows.push(node);
		});
		if (-1 == inRowIndex) {
			this.overRow = inRowIndex;
		}
	},

	updateSelectRow: function (inRowIndex) {
		if (!this.grid.selection) return;
		//如果当前行成为选中行，取消此行为当前行
		if (inRowIndex == this.currentRowIndex) {
			this.currentRowIndex = -1;
			this.updateCurrentStyles(this.currentRowIndex, event);
		}
		this.updateSelectRowStyles(inRowIndex);
	},

	updateSelectRowStyles: function (inRowIndex) {
		!this.selectRows && (this.selectRows = []);
		var snapshot = this.grid.getViewManager().getScrollView().snapshot,
			beginRowIndex = snapshot.beginRowIndex,
			row = null,
			selectRows = this.selectRows,
			rowSet = this.grid.getBinding().getRowSet();

		for (var i = 0, l = selectRows.length; i < l; ++i) {
			var node = selectRows.pop();
			dojo.removeClass(node, "u-xgrid-row-selected");
			dojo.query('table.u-xgrid-rowbar-choice [gridrowindex="' + inRowIndex + '"]', this.grid.viewsNode).forEach(function (node) {
				dojo.removeClass(node, "u-xgrid-row-selected");
			})
			dojo.query('table.u-xgrid-rowbar-table [gridrowindex="' + inRowIndex + '"]', this.grid.viewsNode).forEach(function (node) {
				dojo.removeClass(node, "u-xgrid-row-selected");
			})

		}
		for (var i = beginRowIndex, l = beginRowIndex + snapshot.showRows; i < l; ++i) {
			row = rowSet.getRow(i);
			if (this.grid.SelectionManager.selectType) { //如果是單選框  清除所有選中class     lind
				dojo.query('table.u-xgrid-rowbar-table [gridrowindex="' + i + '"]', this.grid.viewsNode).forEach(function (node) {
					dojo.removeClass(node, "u-xgrid-row-selected");
				});
			}
			var _i = i;
			if (row && row.data && row.isRowSelected()) { //U_EAP00028153
				dojo.query('table.u-xgrid-table [gridrowindex="' + i + '"]', this.grid.viewsNode).forEach(function (node) {
					dojo.addClass(node, "u-xgrid-row-selected");
					selectRows.push(node);
				});

				// 给表格勾选位置添加背景色
				dojo.query('table.u-xgrid-rowbar-table [gridrowindex="' + i + '"]', this.grid.viewsNode).forEach(function (node) {
					dojo.addClass(node, "u-xgrid-row-selected");
				})
			}

		}
		var isAllSelect = true,
			rowPrimary;
		for (var index = 0; index < rowSet.primary.length; index++) {
			rowPrimary = rowSet.getRow(index);
			if (!rowSet.primary[index]['_s'] && !rowPrimary.data['uncheckabled'] == true) {
				isAllSelect = false;
			}
		};

		if (isAllSelect && rowSet.primary.length > 0 && !rowSet.primary[0]['uncheckabled'] == true) { //判断是否全选  
			$('#' + this.grid.id + ' ' + ".xgridRowbarSetAll").addClass("u-xgrid-row-chockbox-selected").find('input[type=checkbox]').attr("checked", "true");
		} else {
			$('#' + this.grid.id + ' ' + ".xgridRowbarSetAll").removeClass("u-xgrid-row-chockbox-selected").find('input[type=checkbox]').removeAttr("checked");
		}
		//单选多选 选中以后去掉操作区的display none
		var rootPage = this.grid._rootID;
		var displayType = selectRows.length == 0 ? 'block' : 'none'
		$('#' + rootPage).find('.select_buttons') && $('#' + rootPage).find('.select_buttons').find('.select_buttons_mask').css('display', displayType)
	},

	//当拖动表格滚动条渲染数据时,重新应用样式
	//	styleCustomRowNode: function(rowNode,styleObj,layoutManager){
	//		if(!styleObj) return;
	//		var rowStyle=styleObj["row"]&&dojo.fromJson(styleObj["row"]),
	//			cellStyle=styleObj["cell"],
	//			priority=styleObj["priority"],
	//			//多标题情况下seq是不存在的，注意判断
	//			seq=layoutManager.customStructure;//解决个性化列次序发生变化后渲染问题
	//		if(priority=="row"){
	//			if(cellStyle){
	//				for(var item in cellStyle){
	//					var index = item,
	//					currentIndex=seq?dojo.indexOf(seq.seq,index):index;
	//					if(currentIndex==-1) return;
	//					var style = dojo.fromJson(cellStyle[item]);
	//					var node=dojo.query("[idx="+currentIndex+"]",rowNode);
	//					node&&node[0]&&dojo.style(node[0],style);				
	//				}					
	//			}			 
	//			dojo.query('.u-grid-cell',rowNode).forEach(function(node){
	//				dojo.style(node,rowStyle);
	//			});
	//			
	//		}else if(priority=="cell"){
	//			rowStyle&&dojo.query('.u-grid-cell',rowNode).forEach(function(node){
	//				dojo.style(node,rowStyle);
	//			});
	//			for(var item in cellStyle){
	//				var index = item,
	//				currentIndex=seq?dojo.indexOf(seq.seq,index):index;
	//				if(currentIndex==-1) return;
	//				var style = dojo.fromJson(cellStyle[item]);
	//				var node=dojo.query("[idx="+currentIndex+"]",rowNode);
	//				node&&node[0]&&dojo.style(node[0],style);				
	//			}
	//		}
	//	},

	onRowRemoved: function (inRowIndex) {

	},

	/**
	 * @summary:
	 * 		取得表格总行数
	 * @return:
	 * 		{number}
	 */
	getRowCount: function () {
		return this.grid.getBinding().getRowCount();
	},

	/**
	 * @summary:
	 * 		设置当前行
	 * @param：
	 * 	{number} inRowIndex行号
	 */
	setCurrentRow: function (inRowIndex) {
		if (isNaN(inRowIndex)) return;
		this.currentRowIndex = inRowIndex;
		this.grid.getViewManager().refreshPage();
	},

	/**
	 * @summary:
	 * 		取得当前行号
	 * @return:
	 * 		{number}
	 * @example:
	 *|	grid.getRowManager().getCurrentRowIndex(); 
	 */
	getCurrentRowIndex: function () {
		var gridBinding = this.grid.getBinding();
		var rowCount = (gridBinding == undefined || gridBinding == null) ? -2 : gridBinding.getDataStore().getRowSet().getRowCount();
		if (rowCount <= this.currentRowIndex) {
			this.currentRowIndex = -1;
		}
		return this.currentRowIndex;
	},

	/**
	 * @summary:
	 * 		判断表格是否有锁定行
	 * @return {Boolean}
	 */
	hasLockedRow: function () {
		var data = this.grid.getBinding().getLockedRowData();
		if (!data || data.length == 0) {
			return false;
		} else {
			return true;
		}
	},

	/**
	 * @summary:
	 * 		取得锁定行高度
	 * @return:
	 * 		{number}
	 */
	getLockedRowHeight: function () {
		if (this.hasLockedRow()) {
			var data = this.grid.getBinding().getLockedRowData();
			return data.length * this.defaultRowHeight;
		} else {
			return 0;
		}
	},

	/**
	 * @summary:
	 * 		更新当前行回调方法
	 * @example:
	 *|<div dojoType="unieap.xgrid.Grid" id="grid" width="80%" height="250px" binding="{store:'empDataStore'}" views="{rowNumber:true}" rows="{onUpdateCurrentRow:test}">
	 *|		<header>
	 *|		   <cell label="姓名" name="NAME"></cell>
	 *|		   <cell label="部门" name="attr_empno"></cell>
	 *|		   <cell label="职位" name="attr_job"></cell>
	 *|		   <cell label="工资" name="attr_sal"></cell>
	 *|		</header>
	 *|</div>
	 *|<script>
	 *|		function test(rowIndex){
	 *|		//令当前行的字体变成红色
	 *|		grid.getViewManager().setRowStyles(rowIndex,{'color':'red'});
	 *|		}
	 *|</script>
	 */
	onUpdateCurrentRow: function (inRowIndex) {

	}
});
dojo.provide('unieap.xgrid.manager.BindingManager');
dojo.require("unieap.xgrid.manager.Manager");
dojo.require("unieap.util.util");
dojo.declare("unieap.xgrid.manager.BindingManager", unieap.xgrid.manager.Manager, {
	/**
	 * @declaredClass:
	 * 		unieap.xgrid.manager.BindingManager
	 * @summary:
	 * 		Grid数据绑定
	 * @description:
	 * 		Grid控件的数据绑定模块(binding)，用来和DataCenter的数据进行绑定
	 * @example:
	 * |<div id="grid" id="grid" dojoType="unieap.xgrid.Grid" width="500px" height="300px"
	 * |	binding="{store:'empDataStore'}">
     * |	<header>
     * |		<cell label="员工编号" width="150" name="attr_empno"></cell>
     * |		<cell width="100px" label="姓名" name="NAME"></cell>
     * |		<cell width="150px" label="职位" name="attr_job"></cell>
     * |		<cell width="150px" label="工资" name="attr_sal" dataType="number"></cell>
     * |	</header>
	 * |</div>
	 */
	
	/**
	 * @summary:
	 * 		设置Grid控件所绑定的DataStore对象
	 * 
	 * @type:
	 * 		{unieap.ds.DataStore}
	 * @example:
	 * |<div dojoType="unieap.xgrid.Grid" binding="{store:'empDs'}">
	 * |	...
	 * |</div>
	 */
	store: null,
	
	/*
	 * @summary:
	 * 		用户自定义获得datastore，给V4模型提供接口实现
	 * @param:
	 * 		{unieap.ds.DataStore} ds Grid控件绑定的datastore
	 * @param:
	 * 		{function} load 回调成功后执行
	 */
	rpc: null,
	
	/**
	 * @summary:
	 * 		设置Grid控件所绑定的DataStore对象来源于哪个DataCenter，仅在store属性为DataStore名称时生效
	 * 		若没有指明,将会在全局的DataCenter对象(即dataCenter)中获取
	 * @type:
	 * 		{unieap.ds.DataCenter}
	 * @example:
	 * |<div dojoType="unieap.xgrid.Grid" binding="{store:'empDs',datacenter:dc}">
	 * |	...
	 * |</div>
	 */
	dataCenter: null,
	
	//配置前台翻页后，分割原始datastore后新生成的datastore的名字
	_pagingStoreName: '_client_paging_ds' +new Date().getTime(),
	
	create: function() {
		this.connects = [];
		this.grid=this.widget;
		var store=this.store,
			tempDs=new unieap.ds.DataStore(store || "temp");
		if((!store || !store.rowSet) && !dojo.isString(store)){
			this.store =tempDs ;
		}else{
			if(!this.dataCenter){
				this.dataCenter = this.grid.dataCenter || (unieap.Action.getViewContext(this.grid) || window).dataCenter;
			}
			dojo.isString(this.store)?
					(this.originStore=unieap.getDataStore(this.store, this.dataCenter, false)):(this.originStore= this.store);
			//如果支持客户端翻页，构建一个新的datastore
			this._supportClientPaging()?
				(this.store = this.getDataStoreByPageNumber(this.originStore.getPageNumber())):(this.store = this.originStore);
		}
		this.setData(this.store||tempDs);
	},
	
	/**
	 * @summary:
	 * 		设置表格的数据源
	 * @param:
	 * 		{unieap.ds.DataStore} store
	 */
	setDataStore: function(store) {
		!store && (store=new unieap.ds.DataStore("temp"));
		var dsName=store.getName();
		//判断是否支持前台翻页
		var type = this.gird && this.grid.PagingManager && this.grid.PagingManager['clientPaging'];
		if(this._supportClientPaging() && dsName.indexOf(this._pagingStoreName)==-1){ //增加判断是否是前端分页的逻辑
			this.originStore=store;
			this.store=this.getDataStoreByPageNumber(this.originStore.getPageNumber());
			this.setData(this.store);
		}else{
			this.setData(store);
		}
		this.grid.sortInfo = []; //U_EAP00029640
		this.grid.onStoreChanged();
		if(this.grid.showLoading){
			dojo.style(this.grid.contentLoading,'display','none');	
		}
	},
	
	
	//通过pageNumber属性从原始datastore中来读取数据
	getDataStoreByPageNumber: function(pageNumber){
//		pageNumber=pageNumber||1;
//		var store=this.originStore,
//			rows = store.getRowSet().getData(),
//			pageSize=store.getPageSize(),
//			recordCount=store.getRecordCount();
//		//构建datastore
//		var start = (pageNumber-1)*pageSize,
//			rowData = rows.slice(start, start+pageSize),
//			dsObj = {
//				pageSize: pageSize,
//				pageNumber: pageNumber,
//				recordCount: recordCount,
//				rowSet:rowData,
//				name:this._pagingStoreName,
//				metaData:store.getMetaData()
//			};
//		return  new unieap.ds.DataStore(dsObj);
		pageNumber=pageNumber||1;
		var store=this.originStore,
			pageSize=store.getPageSize(),
			recordCount=store.getRecordCount();
		//构建datastore
		var start = (pageNumber-1)*pageSize,
			rows = store.getRowSet().getRows(null,start, start+pageSize),
			rowset = new unieap.ds.RowSet();
		for(var i=0,len = rows.length;i<len;i++){
			rowset.insertRow(rows[i].getData(),i);
			rowset.resetUpdate(i);
		}
		var tempStore = new unieap.ds.DataStore();
		tempStore.setRowSet(rowset);
		tempStore.setPageSize(pageSize);
		tempStore.setPageNumber(pageNumber);
		tempStore.setRecordCount(recordCount);
		tempStore.setName(this._pagingStoreName);
		tempStore.setMetaData(store.getMetaData());
		tempStore.setRowSetName(store.getRowSetName());
//		tempStore.getRowSet().resetUpdate();
		return  tempStore;
	},
	
	//是否支持客户端翻页
	_supportClientPaging: function(){
		var pagingManager=this.grid['PagingManager'];
		if(pagingManager){
			return pagingManager.supportClientPaging();
		}
		return false;
	},
	
	/**
	 * @summary:
	 * 		当有客户端翻页时，返回grid初始绑定的DataStore
	 * @return:
	 * 		{unieap.ds.DataStore}
	 */
	getOriginStore:function(){
		return this.originStore;
	},
	
	//删除当前grid绑定的datastore时，同步原始的主datastore
	syncOriginStore:function(indexs){
		if(this._supportClientPaging()){
			var pagingManager=this.grid['PagingManager'],
				pageInfo=pagingManager.getPageInfo(),
				totalCount=pageInfo['totalCount'],
				pageNumber=pageInfo['pageNumber'],
				pageSize=pageInfo['pageSize'],
				startNumber=(pageNumber-1)*pageSize;
			indexs=dojo.map(indexs,function(index){
				return startNumber+index;
			});
			if (totalCount > 0){
				this.originStore.getRowSet().deleteRows(indexs);
				//更新主datastore的总记录数
				this.originStore.setRecordCount(totalCount-indexs.length);
				//让当前页面总是显示为pageSize条记录
				this.setDataStore(this.getDataStoreByPageNumber(pageNumber));
			}
		}
	},
	
	
	/**
	 * @summary:
	 * 		取得Grid绑定的DataStore
	 * @return:
	 * 		{unieap.ds.DataStore}
	 */
	getDataStore: function() {
		return this.store;
	},
	
	/**
	 * @summary:
	 * 		清空表格的数据
	 * @description：
	 * 		清空表格的数据，相当于getBinding().setDataStore(null)
	 */
	clear : function(){
		this.setDataStore(null);
	},
	
	setData: function(data) {
		this.disconnect();
		this.store = (data ||  new unieap.ds.DataStore(this.store.getName()));
		//this.setRowData(this.getRowSet().getData());
		this.grid.trigger && this.bindDataSetTrigger();
	},

	/**
	 * @summary:
	 * 		取得Grid绑定的RowSet
	 * @return:
	 * 		{unieap.ds.RowSet}
	 */
	getRowSet: function() {
		return this.store.getRowSet();
	},
	
	/**
	 * @summary:
	 * 		取得当前Grid的数据行数
	 * @return:
	 * 		{number}
	 */
	getRowCount: function() {
		//return this.getRowData().length;
		return this.getRowSet().getRowCount();
	},

	/**
	 * @summary:
	 * 		取得Grid的指定行数据
	 * @param:
	 * 		{number} inRowIndex
	 * @return:
	 * 		{object}
	 */
	getRow: function(inRowIndex) {
		var row = this.getRowSet().getRow(inRowIndex);
		if(row){
			return row.getData();
		}
		//return this.getRowData()[inRowIndex];
	},
	
	//取得锁定行数据
	getLockedRowData : function(){
		var d=[];
		if(this.grid.lockedRow){
			var statistics=this.grid.lockedRow.statistics;
			var getLockedRow=this.grid.lockedRow.getLockedRow;
			var setLockedRowData=this.grid.lockedRow.setLockedRowData;
			if(setLockedRowData){
				return setLockedRowData;
			}
			if(getLockedRow){
				if(typeof(getLockedRow)=='function'){
					var data=getLockedRow.apply(this.grid);
					if(data){
						d=d.concat(data);
					}
				}
			}
			if(statistics){
				var datas = this.store.getStatistics();
				if(datas){
					if (!dojo.isArray(statistics)) {
						statistics=[statistics];
					}
					dojo.forEach(statistics,function(statistic){
						var data={};
						for(var name in statistic){
							if(datas[name]&&datas[name][statistic[name]]){
								dojo.require('unieap.util.util')
//								//var statisticName=unieap.translate(statistic[name])||"计"; // MODIFY BY TENGYF
								var statisticName=unieap.translate(statistic[name])||RIA_I18N.xgrid.binding.count;
								data[name]=statisticName+": "+datas[name][statistic[name]]
							}
						}
						d.push(data);
					})
				}
			}
		}
		return d;
	},
	
	getDatum: function(inRowIndex, colName) {
		var row = this.getRowSet().getRow(inRowIndex);
		if(!row)return "";
		var value = row.getItemValue(colName);
		if(value==null) return "";
		if(JSON.stringify(value) === "{}") return '';
		return String(value);//去掉转义
		//对Grid单元格中的数据进行转义1
		// return String(value).replace(/&/g,"&amp;").
		// 					 replace(/</g,"&lt;").
		// 					 replace(/>/g,"&gt;").
		// 					 replace(/\s/g,"&nbsp;");	
							 
	},
	
	selectedData : function(inRowIndex){
		var row = this.getRowSet().getRow(inRowIndex);
		row.setRowSelected(true);
	},
	unSelectedData : function(inRowIndex){
		var row = this.getRowSet().getRow(inRowIndex);
		row.setRowSelected(false);
	},
	
	//xGrid列过滤
	doFilter:function(){
		var self=this;
		var layoutmanager=this.grid.getManager('LayoutManager');
		var cells=layoutmanager.cells;
		this.getRowSet().doFilter();
		var filter={condition:{},pattern:""},hasfilter=false;
		dojo.forEach(cells,function(cell,index){
			if(cell.filter){
				dojo.mixin(filter.condition,cell.filter.condition);
				filter.pattern+=(filter.pattern==""?'  ':' && ')+"("+cell.filter.pattern+")";
				hasfilter=true;
			}
		});
		if(hasfilter){
			self.getRowSet().doFilter(dojo.clone(filter));
		}else{
			self.getRowSet().doFilter();
		}
		
		//如果有toolbar，就更新toolbar状态
		this.grid.getToolBar()&&this.grid.getToolBar().update();
	},
	
	/**
	 * @summary:
	 * 		往Grid绑定的RowSet中插入一行数据
	 * @description:
	 * 		往RowSet中插入一行数据后，Grid会自动刷新并且显示该行数据
	 * 		如果不传入任何参数或者传入的第一个参数不为对象,将在控件的最前面增加一条记录。
	 * @param:
	 * 		{object} inData 要插入的数据对象
	 * @param:
	 * 		{number} inRowIndex 设置在哪个位置插入数据
	 * @example:
	 * |var binding=unieap.byId('grid').getBinding();
	 * |binding.insertRow({deptno:10},0); //在第一行插入一条记录
	 */
	insertRow: function(inData, inRowIndex){
		var len=arguments.length;
		if(len>=2){
			this.getRowSet().insertRow(inData,inRowIndex);
		}else if(len==1){
			typeof(inData)!='object'&&(inData={});
			this.getRowSet().insertRow(inData,0);
		}else{
			this.getRowSet().insertRow({},0);
		}
	},
	/**
	 * @summary:
	 * 		删除Grid绑定的RowSet中的某一行数据
	 * @description:
	 * 		删除RowSet中的一行记录后,Grid会自动刷新表格数据
	 * @param:
	 * 		{number} inRowIndex
	 * @example:
	 * |var binding=unieap.byId('grid').getBinding();
	 * |binding.deleteRow(0) //删除第一条数据
	 */
	deleteRow: function(inRowIndex) {
		this.getRowSet().deleteRow(inRowIndex);
		this.syncOriginStore([inRowIndex]);
	},
	/**
	 * @summary:
	 * 		删除Grid绑定的RowSet中的多行数据
	 * @description:
	 * 		删除RowSet中的多行记录后,Grid会自动刷新表格数据
	 * @param:
	 * 		{array} rowsIndexArray
	 * @example:
	 * |var binding=unieap.byId('grid').getBinding();
	 * |binding.deleteRows([0,1]) //删除Grid中的第一条和第二个数据
	 */
	deleteRows: function(rowsIndexArray) {
		this.getRowSet().deleteRows(rowsIndexArray);
		this.syncOriginStore(rowsIndexArray);
	},
	bindDataSetTrigger : function(){
		var grid = this.grid,
			rowset = this.getRowSet(),
			self = this;
		this.connects.push(dojo.connect(
			rowset,
			"onItemChanged",
			function(thisRow, itemName, value, index){
				grid.onItemChanged(index,itemName);
			}
		));
		/*监听RowSet的postAddRow事件*/
		this.connects.push(dojo.connect(
			rowset,
			"onAfterAddRow",
			function(){
				grid.onRowSetChanged('onAfterAddRow');	
			}
		));
		/*监听RowSet的postAddRows事件*/
		this.connects.push(dojo.connect(
			rowset,
			"onAfterAddRows",
			function(){
				grid.onRowSetChanged('onAfterAddRows');
			}
		));
		/*监听RowSet的postDeleteRow事件*/
		this.connects.push(dojo.connect(
			rowset,
			"onAfterDeleteRow",
			function(){
				grid.onRowSetChanged('onAfterDeleteRow');
			}
		));
		/*监听RowSet的postDeleteRows事件*/
		this.connects.push(dojo.connect(
			rowset,
			"onAfterDeleteRows",
			function(){
				grid.onRowSetChanged('onAfterDeleteRows');
			}
		));
		/*监听RowSet的postDeleteAllRows事件*/
		this.connects.push(dojo.connect(
			rowset,
			"onAfterDeleteAllRows",
			function(){
				grid.onStoreChanged('onAfterDeleteAllRows');
			}
		));
		/*监听RowSet的onAfterDeleteSelectedRows事件*/
        this.connects.push(dojo.connect(
            this.getRowSet(),
            "onAfterDeleteSelectedRows",
            function(){
                grid.onRowSetChanged('onAfterDeleteSelectedRows');
            }
        ));
		/*监听datastore的onRowSetChanged事件*/
		this.connects.push(dojo.connect(
			this.store,
			"onRowSetChanged",
			this,
			function(){
				grid.setDataStore(this.store);
			}
		));
		this.connects.push(dojo.connect(
			rowset,
			"onSort",function(){
				grid.onSorted();
		}));
	},
	//销毁绑定
	disconnect: function() {
		while(this.connects.length>0){
			dojo.disconnect(this.connects.pop());	
		}
	},
	//销毁绑定
	destroy: function() {
		this.disconnect();
	},
	/**
	 * @summary:
	 * 		判断Grid绑定的RowSet是否被修改
	 * @return:
	 * 		{boolean}
	 * @example:
	 * |var binding=unieap.byId('grid').getBinding();
	 * |var modified=binding.isModified();
	 */
	isModified: function() {
		return this.getDataStore().getRowSet().isModified();
	},
	/**
	 * @summary:
	 * 		求某一列的最大值
	 * @param:
	 * 		{string} name 列名
	 * @return:
	 * 		{number}
	 * @example:
	 * |var binding=unieap.byId('grid').getBinding();
	 * |var max=binding.max('attr_sal'); //获得RowSet中列为attr_sal的最大值
	 */
	max : function(name){
		return this.getRowSet().max(name);
	},
	/**
	 * @summary:
	 * 		求某一列的最小值
	 * @param:
	 * 		{string} name 列名
	 * @return:
	 * 		{number}
	 * @example:
	 * |var binding=unieap.byId('grid').getBinding();
	 * |var min=binding.min('attr_sal'); //获得RowSet中列为attr_sal的最小值
	 */
	min : function(name){
		return this.getRowSet().min(name);
	},
	/**
	 * @summary:
	 * 		求某一列的总和
	 * @param:
	 * 		{string} name 列名
	 * @param:
	 * 		{string} pattern 格式化字符串
	 * @return:
	 * 		{number}
	 * @example:
	 * |var binding=unieap.byId('grid').getBinding();
	 * |var sum=binding.sum('attr_sal'); //获得RowSet中列为attr_sal的总和
	 * |var sum1=binding.sum('attr_sal','###,###.000'); //sum1值形如123.25
	 */
	sum : function(name,pattern){
		return this.getRowSet().sum(name,pattern);
	},
	/**
	 * @summary:
	 * 		求某一列的平均值
	 * @param:
	 * 		{string} name 列名
	 * @param:
	 * 		{string} pattern 格式化字符串
	 * @return:
	 * 		{number}
	 * @example:
	 * |var binding=unieap.byId('grid').getBinding();
	 * |var avg=binding.avg('attr_sal'); //获得RowSet中列为attr_sal的平均值
	 * |var avg1=binding.avg('attr_sal','###,###.000'); //avg1值形如123.25
	 */
	avg : function(name,pattern){
		return this.getRowSet().avg(name,pattern);
	},
	/**
	 * @summary:
	 * 		持久化表格中的数据
	 * @param:
	 * 		{object} inData 要传入的对象
	 * @example:
	 * |var grid=unieap.byId('grid')
	 * |grid.getBinding().save()
	 * |grid.getBinding().save({url:'/demo.do?method=update'});
	 */
	save: function(inData){
		if(false == unieap.fireEvent4Widget(this, this.grid,this.onBeforeSave,[])){
			return;
		}
		var _store=this.store,inData=inData||{};
		if(_store){
			if(inData['load']){
				dojo.connect(inData,'load',dojo.hitch(this,this._onAfterSave))
			}else{
				dojo.mixin(inData,{'load':dojo.hitch(this,this._onAfterSave)})
			}
			unieap.Action.doUpdate(_store,inData);
		}

	},
	_onAfterSave: function(){
		this.grid.ViewManager.refresh();
		unieap.fireEvent4Widget(this, this.grid,this.onAfterSave,[]);
	},
	
	/**
	 * @summary:
	 * 		表格保存前事件
	 * @description:
	 * 		此方法返回false时，保存操作将取消。
	 * @return:
	 * 		{boolean}
	 * @example:
	 * |<div dojoType="unieap.xgrid.Grid" id="grid" binding="{onBeforeSave:fn}">
	 * |</div>
	 * |function fn(){
	 * |	var isValid=unieap.byId("grid").getBinding().isValid();
	 * |    return isValid; //如果校验不成功,就不执行保存操作
	 * |}
	 * |unieap.byId("grid").getBinding().save(); //save执行之前会执行fn
	 */
	onBeforeSave: function() {
		return true;
	},
	
	/**
	 * @summary:
	 * 		表格持久化后回调事件
	 * @description:
	 * 		此方法会刷新表格的视图
	 * @example:
	 * |<div dojoType="unieap.xgrid.Grid" id="grid" binding="{onAfterSave:fn}">
	 * |</div>
	 * |function fn(){
	 * |	unieap.byId("grid").getBinding().save(); //save执行完毕后会执行fn
	 * |}
	 * |
	 */
	onAfterSave: function() {
	},
	/**
	 * @summary:
	 * 		表格排序
	 * @param:
	 * 		{unieap.xgrid.Cell} inCell
	 * @param:
	 * 		{number} asc 可选值为-1和1,-1表示降序，1表示升序
	 */
	sort: function(inCell, asc){

		this.grid.getManager("RowManager")._clearAllHighlight();
		if (unieap.fireEvent4Widget(this, this.grid,this.onBeforeSort,[inCell, asc])==false || !inCell.name) return;
		asc && (inCell.asc = asc);
		this.grid.setSortInfo(inCell);
		var sortInfo = this.grid.getSortInfo();
		//client sort	
		if(this.grid.ViewManager.orderType=="client") {

            this.getRowSet().sort(inCell.name,inCell.asc,inCell.dataType);
			unieap.fireEvent4Widget(this, this.grid,this.onAfterSort,[inCell, asc]);
		}else { //server sort
			var store = this.getDataStore(),
				    result = [];
			for(var i=0;i<sortInfo.length;i++){
				var order = sortInfo[i].name; 
				if(!store.getStatementName()){
					if(unieap.dbDialect&&unieap.dbDialect=='drm'){
						order = "[".concat(order).concat("]");
					}
					
				}
				order = order.concat(" ").concat(sortInfo[i].asc>0?"asc":"desc");
				result.push(order);
			}
//			//if(this.isModified()&&confirm("保存修改？")) {
			if(this.isModified()&&confirm(RIA_I18N.xgrid.binding.saveMoidify)) {
					this.save();
			}
			 store.setOrder(result.join(","));
			 //请求处理，调用回调刷新表格，清除所有状态翻到第一页
			 store=store.collect('none');
			 store.setPageNumber(1);
			 var self=this,
			 	 callback=function(a,b){
				 	var ds,dc;
					if(arguments.length==2){
						ds=a;
						dc=b;
					}else if(arguments.length==1){
						dc=a;
					}else{
						return;
					}
					!ds&&(ds=dc.getSingleDataStore());
					self.setDataStore(ds);
					self.onAfterSort(inCell, asc);
			 	 };

			 if(dojo.isFunction(this.rpc)){
			 	this.rpc(this.getDataStore().collect("none"),callback,this.grid,'sort');
			 }else{
				unieap.Action.doQuery(store,{
				 	load:function(ds,dc){
						callback(ds,dc);
					},
					sync:false
				 });
			 }	
		}
 
	},
	
	/**
	 * @summary:
	 * 		校验Grid中的数据是否合法
	 * @description:
	 * 		如果校验不通过的单元格可以编辑,当errorPrompt参数为true时会自动提示错误信息，并置光标到单元格中
	 * @param:
	 * 		{number} inRowIndex 对某一行的数据进行校验
	 * @param:
	 * 		{boolean} errorPrompt 校验不通过后是否自动提示错误信息,如果不设置就为global.js中的unieap.widget.errorPrompt
	 * @param:
	 * 		{boolean} needFocus  当校验不通过时，是否设置光标到出错的单元格，默认为true
	 * @return:
	 * 		{boolean}
	 * @description:
	 * 		如果用户使用了编辑模块，并且配置了onBeforeEdit事件，建议用户不要在onBeforeEdit方法中调用validate方法。
	 * 		因为使用不当，可能会使得页面出现死循环。如果您的确需要这么做，请确保needFocus值参数为false
	 * @example:
	 * |<script type="text/javascript">
	 * |	var grid=unieap.byId("grid");
	 * |	//只校验第1行,是否提示错误信息依赖于unieap.widget.errorPrompt
	 * |	grid.getBinding().validate(0); 
	 * |	//校验第一行并提示错误信息
	 * |	grid.getBinding().validate(0,true);
	 * |	//校验所有的单元格并提示错误信息
	 * |	grid.getBinding().validate(null,true);
	 * |	//或者简写成grid.getBinding().validate(true);
	 * |</script>
	 */
	validate:function(inRowIndex,errorPrompt,needFocus){
		if(arguments.length==1){
			typeof(inRowIndex)=="boolean"&&(errorPrompt=inRowIndex);
		}
		if(arguments.length==2){
			if(typeof(inRowIndex)=='boolean'&&typeof(errorPrompt)=='boolean'){
				needFocus=errorPrompt;
				errorPrompt=inRowIndex;
			}
		}
		typeof(errorPrompt)=="undefined"&&(errorPrompt=unieap.widget.errorPrompt);
		typeof(needFocus)=="undefined"&&(needFocus=true);
		var cells = this.grid.getLayoutManager().getCells(),
			self = this,
			rowSet = this.getRowSet();
		//防止校验污染其他行的数据
		this.grid.rowEdit && this.grid.rowEdit.applyEdit();
		//只对某一行进行校验
		if(typeof(inRowIndex)=="number"){
			var row = rowSet.getRow(inRowIndex);
			if(!row) return true;
			for (var i=0,cell; (cell=cells[i]); i++) {
				if (cell&&!cell.hidden&&!cell.isValid(row)) {
					errorPrompt?this._showErrorPrompt(inRowIndex,cell,needFocus):this._setEdit(inRowIndex,cell,needFocus);
					return false;
				}
			}
			return true;
		}
		var result=true;
		//对primary缓冲区中的数据进行校验
		result=!rowSet.some(function(row) {//对每个row校验，有不合法的值返回true
			for (var i=0,cell; (cell=cells[i]); i++) {
				if (!cell.isValid(row)) {
					errorPrompt?this._showErrorPrompt(row.getIndex(),cell,needFocus):this._setEdit(row.getIndex(),cell,needFocus);
					return true;
				}
			}
			return false;
		},null,null,unieap.ds.Buffer.PRIMARY,this);
		//如果primary缓冲区中有不合法数据,直接返回false
		if(!result) return false;
		//对filter缓冲区中的数据进行校验
		result=!rowSet.some(function(row) {
			for (var i=0,cell; (cell=cells[i]); i++) {
				if (!cell.isValid(row)) {
					//过滤缓冲区，不需要focus
					errorPrompt?this._showErrorPrompt(row.getIndex(),cell,false):this._setEdit(row.getIndex(),cell,false);
					return true;
				}
			}
			return false;
		},null,null,unieap.ds.Buffer.FILTER,this);	
		return result;
	},
	_showErrorPrompt:function(rowIndex,cell,needFocus){
		var me=this;
		MessageBox.alert({
//			title:cell.label+'列校验信息',
			title:cell.label+RIA_I18N.xgrid.binding.columnCheckInfo,
			type:'warn',
			message:cell.label+': '+cell.getErrorMsg(),
			onComplete:function(){
				me._setEdit(rowIndex,cell,needFocus);
			}
		});
	},
	_setEdit:function(rowIndex,cell,needFocus){
		if(needFocus&&cell.getEditor()){
			this.grid.getRowEditManager().setEdit(rowIndex,cell.index);
			//光标置入出错的单元格中后，马上进行校验
			setTimeout(function(){
				cell.getEditor()&&cell.getEditor().getValidator().validate();
			},0);
		}
	},
	/**
	 * @summary:
	 * 		表格列排序前事件
	 * @description:
	 * 		此方法返回false时，排序操作将取消。
	 * @param:
	 * 		{unieap.xgrid.Cell} inCell
	 * @param:
	 * 		{number} asc 可选值为-1和1,-1表示降序，1表示升序
	 * @return:
	 * 		{boolean}
	 * @example:
	 *|<div dojoType="unieap.xgrid.Grid" id="grid" width="80%" height="250px" 
	 *| 	binding="{store:'empDataStore',onBeforeSort:fn}">
     *|</div>
     *|function fn(inCell,asc){
     *|}
	 */
	onBeforeSort: function(inCell, asc) {
		return true;
	},
	/**
	 * @summary:
	 * 		表格列排序后回调事件
	 * @param:
	 * 		{unieap.xgrid.Cell} inCell
	 * @param:
	 * 		{number} asc 可选值为-1和1,-1表示降序，1表示升序
	 * @example:
	 *|<div dojoType="unieap.xgrid.Grid" id="grid" height="250px"
	 *| 	binding="{store:'empDataStore',onAfterSort:test}">
	 *|</div>
     *|function fn(inCell,asc){
     *|}
	 */
	onAfterSort: function(inCell, asc) {
	}
});
dojo.provide('unieap.xgrid.manager.MenuManager');
dojo.require("unieap.xgrid.manager.Manager");
dojo.require('unieap.menu.Menu');
dojo.declare("unieap.xgrid.manager.MenuManager", unieap.xgrid.manager.Manager, {
	/**
	 * @summary:
	 * 		是否总是在Grid表头上显示菜单按钮(点击该按钮会弹出菜单)
	 * @description:
	 * 		该属性有效的前提是要弹出的菜单必须有子节点或者用户自自定义了onBeforeMenuClick函数。
	 * 		用户可以修改global.js中的unieap.widget变量来全局设定是否在表头上显示菜单按钮
	 * @type:
	 * 		 {boolean}
	 * @example:
	 * |<div dojoType="unieap.xgrid.Grid' 
	 * |	menu="{alwaysShowMenu:true,onBeforeMenuClick:fn}" showcell=true lockcell=true>
	 */
	alwaysShowMenu:unieap.widget.grid.alwaysShowMenu,
	
	/*
	 * Grid菜单的事件句柄
	 */
	_connectHandlers: null,
	
	create: function(param){
		this._connectHandlers = [];
		dojo.mixin(this, param);
		this.menu = new unieap.menu.Menu({});
		this.subscribe("injectMenuItem",this,"injectMenuItem");
		this.subscribe("setItemStatus",this,"setItemStatus");
		this.subscribe("resize",this,"updateEvent");
		this.subscribe("reinjectMenuItem",this,"destroyMenuItem");
		this.bindEvent();
	},
	//向menu中注入菜单项
	injectMenuItem: function(menuItems){
		for(var i=0;i< menuItems.length;i++){
			this.menu.addChild(menuItems[i]);
		}
	},
	//根据array中的ID设置菜单项的禁用状态
	setItemStatus: function(item){
		item.menuItem.setDisabled(item.flag);
	},
	//页面刷新时，需要重新绑定菜单事件
	updateEvent: function(){
		this.unbindEvent();
		this.bindEvent();
	},
	//当菜单项的结构发生改变时，需要先销毁这个菜单项，然后重新注入菜单项
	destroyMenuItem: function(menuItems){
		for(var i=0;i< menuItems.length;i++){
			this.menu.removeChild(menuItems[i]);
		}
	},
	//为菜单项绑定事件
	bindEvent: function(){
		var viewManager=this.grid.getManager('ViewManager');
		var self=this;
		dojo.forEach(dojo.query(".u-xgrid-menu", this.grid.headersNode),function(th){
			self._connectHandlers.push(dojo.connect(th, 'onclick', dojo.hitch(self,self.onMenuCick)
				))
		});
		
		this._connectHandlers.push(dojo.connect(viewManager,'onHeaderMouseOver',dojo.hitch(self,self.onHeaderMouseOver)));
		this._connectHandlers.push(dojo.connect(viewManager,'onHeaderMouseOut',dojo.hitch(self,self.onHeaderMouseOut)));
	},
	//解绑定事件
	unbindEvent: function(){
		while(this._connectHandlers.length>0) {
			dojo.disconnect(this._connectHandlers.pop());
		}
	},
		
	/**
	 * @summary:
	 * 		获取Menu对象
	 * @description：
	 * 		通过这个menu可以增加菜单项
	 * @example：
	 * |	var meneuManager=grid.getManager('MenuManager');
	 * |	var menu=meneuManager.getMenu();
	 * |	menu.addChild(new unieap.menu.MenuItem(...));
	 */
	getMenu:function(){
		return this.menu;
	},
	
	//销毁menu控制器
	destroy:function(){
		while(this._connectHandlers.length>0) {
			dojo.disconnect(this._connectHandlers.pop());
		}
		this.menu.destroy();
	},
	
	//鼠标移入Header,显示menuDom按钮
	onHeaderMouseOver: function(e){
		var cell = e.cell,
			grid = this.grid,
			toolBarIndividual = grid.getToolBar() && grid.getToolBar()['individual'];
		if(cell){
			this.cell=cell;
			var menuDom = dojo.query(".u-xgrid-menu", e.cellNode)[0];
			if (toolBarIndividual || grid.individual || (grid.filter && grid.getFilterManager()._validateMenu(cell))){
				if(menuDom){
					this.showMenuDom(menuDom);
				};
			}else{
				menuDom&&dojo.addClass(menuDom.parentNode,"u-xgrid-focus");
			}
		}
	},
	//鼠标移出Header,删除menuDom按钮
	onHeaderMouseOut: function(e){
		if (e.cell) {
			var menuDom = dojo.query(".u-xgrid-menu", e.cellNode)[0];
			if(menuDom){
				this.hideMenuDom(menuDom);
			}
		}
	},
	//显示menu
	showMenuDom:function(node){
		dojo.addClass(node.parentNode,"u-xgrid-focus");
		dojo.style(node.parentNode,"position",'relative');
		dojo.style(node,"position","absolute");
		dojo.style(node,"visibility","visible");
		dojo.style(node,"display","block");
	},
	
	//隐藏menuDom
	hideMenuDom:function(node){
		if(node.parentNode){
			dojo.removeClass(node.parentNode,"u-xgrid-focus");
			if(this.alwaysShowMenu) return;
			if(!this.menu.isShowingNow || this.menu.cell!= this.cell){
				dojo.style(node,"position","static");
				dojo.style(node,"visibility","hidden");
				dojo.style(node,"display","none");
			}
		}
	},
	
	//点击menuDom后，弹出菜单
	onMenuCick: function(e){
		this.grid.getManager("RowManager")._clearAllHighlight();
		dojo.stopEvent(e);
		var node = e.srcElement || e.target;
		var view;
		
    	while(node && node!=this.grid.headersNode){
    		if(dojo.hasClass(node,"u-xgrid-header")){
    			view = this.grid.ViewManager.views[dojo.query(">.u-xgrid-header",this.grid.headersNode).indexOf(node)];
    			break;
    		}
    		node = node.parentNode;
    	}
    	if(view.headerNode.style.cursor == 'col-resize'){
    		return;
    	}
		
		this.publish("itemStatus",[e.target.parentNode.parentNode]);
		this.menu.startup();

		//判断是否重复点击表头上的小三角
		if(this.menu.isShowingNow&&e.target==this.menuParent){
			return;
		}
		dijit.popup.close(this.menu);

		var parent = e.target;
		var menu = this.menu;
		this.menuParent=parent;
		//判断用户自定义的函数onBeforeMenuClick的返回值是否为true,否则就不弹出菜单
		if (!unieap.fireEvent4Widget(this, this.grid,this.onBeforeMenuClick,[])) {
			return;
		}

		menu.cell=this.getCell();
		
		//判断菜单是否有菜单项,没有就直接返回
		if(!menu.hasChildren()){
			return;
		}
		
		dijit.popup.open({
			parent: parent,
			popup: menu,
			around: parent,
			onClose: dojo.hitch(this,function(){
				menu.isShowingNow = false;
				this.hideMenuDom(parent);
				this.menuParent = null;
			}),
			orient:{BL:'TL', BR:'TR',TL:'BL',TR:'BR'}
		});
		
		var children = menu.getChildren();
		dojo.forEach(children, function(child) {
			child._toggleClass && child._toggleClass(false);
		}, this);

		menu.focus();
		menu.isShowingNow = true;
	},

	/**
	 * @summary:
	 * 		点击下拉菜单按钮前事件
	 * @example:
	 * |<div dojoType="unieap.xgrid.Grid' 
	 * 		menu="{alwaysShowMenu:true,onBeforeMenuClick:fn}">
	 */
	onBeforeMenuClick: function(){
		return true;
	},
	
	/**
	 * @summary:
	 * 		获取当前Menu所在的cell
	 * @description
	 * 		在有自定义按钮时,可以通过这个方法取得所在的列
	 */
	getCell: function(){
		return this.cell;
	}
});
dojo.provide('unieap.xgrid.manager.SelectionManager');
dojo.require("unieap.xgrid.manager.Manager");

dojo.declare("unieap.xgrid.manager.SelectionManager", unieap.xgrid.manager.Manager, {
	/**
	 * @declaredClass:
	 * 		unieap.xgrid.manager.SelectionManager
	 * @summary:
	 * 		选择控制器
	 * @description:
	 * 		选择控制器为表格提供针对行的选择功能。
	 * 		可在Grid配置上配置selection指定表格的选择类型(单选/多选)，及各种选择事件。
	 * @example:
	 * |	<div dojoType="unieap.xgrid.Grid" width="500px" height="200px"
	 * |		binding="{store:'empDataStore'}"
	 * |		views="{rowNumber:true,orderType:'none'}"
	 * |		selection="{selectType:'single',onBeforeSelect:onSelect}">
	 * |		<fixed>
	 * |			<cell label="员工编号" width="150" name="attr_empno"></cell>
	 * |		</fixed>
	 * |		<header>
	 * |			<cell width="100px" label="姓名" name="NAME"></cell>
	 * |			<cell width="150px" label="职位" name="attr_job"></cell>
	 * |			<cell width="150px" label="工资" name="attr_sal" headerStyles="text-align: left;"></cell>
	 * |		</header>
	 * |	</div>
	 * @img:
	 * 		images/grid/grid_select.png
	 */
	
	types : {
		s: "s",
		single: "single",
		m: "m",
		multiple: "multiple"
	},
	
	/**
	 * @summary:
	 * 		选择类型
	 * @type:
	 * 		{string}
	 * @enum:
	 * 		{"s"|"single"|"m"|"multiple"|"none"}
	 * @default:
	 * 		"none"
	 * @example:
	 *|<div dojoType="unieap.xgrid.Grid"  width="80%" height="250px" binding="{store:'empDataStore'}" selection="{selectType:'single'}">
	 *|... ...
	 *|</div> 
	 */
	selectType: "none",
	
	//根据selection类型返回selection宽度
	getRowBarWidth: function() {
		var inWidth=0;
		if(this.selectType&&this.selectType!="none"){
			inWidth+=30;
		}
		return inWidth;
	},
	
	//根据selection类型，产生相应的HTML
	generateRowBarCells: function(inRowIndex) {
		var html = "",
			selectType = this.getSelectType() || this.view.selectType,
//			selectType = this.view.selectType,
			types=this.types;

		if (selectType==types.m || selectType==types.multiple) {
			html += this.generateMultiSelectCell(inRowIndex);
		} else if (selectType==types.s || selectType==types.single) {
			html += this.generateSingleSelectCell(inRowIndex);
		}
		return html;
	},
	
	isSelectable : function(inRowIndex){
		return true;
	},
	
	//产生单选按钮的HTML
	generateSingleSelectCell: function(inRowIndex) {
		var binding = this.grid.getBinding();
		if(inRowIndex < -1)  return;
        if (inRowIndex == -1) {
        	var hheight = this.grid.ViewManager.getHeaderHeight();
            // return "<td><div class='u-xgrid-rowbar-choice'style='height:"+(hheight-1)+"px; line-height:"+hheight+"px'>&nbsp;</div></td>"; //先取消lineheight属性
            return "<td><div class='u-xgrid-rowbar-choice'style='height:"+(hheight-1)+"px'>&nbsp;</div></td>";
        }else {
        	var hheight = this.grid.RowManager.defaultRowHeight;
            var data = binding.getRow(inRowIndex);
			var html = [];
			

            var td = binding.store.rowSet.primary[inRowIndex]['_setCkeckDisplay'] == false ?
				"<td><div class='u-xgrid-rowbar-choice u-xgrid-input-radio inputDisplayNone' style='height:"+(hheight-1)+"px'>"
				+"<input style='height:"+hheight+"px; line-height:" +hheight+"px' type='radio' name='" :
				"<td><div class='u-xgrid-rowbar-choice u-xgrid-input-radio' style='height:"+(hheight-1)+"px'>"
				+"<input style='height:"+hheight+"px; line-height:" +hheight+"px' type='radio' name='"
//            var h = 1;
//            if(unieap.bootstrapMenu){
//            	h= 2;
//            }
//             html.push("<td class='u-xgrid-rowbar-choice u-xgrid-input-radio' style='height:"+(hheight-1)+"px; line-height:"+(hheight-1)+"px'><input type='radio' name='");先取消lineheight属性
            html.push(td);
            // html.push("radio_" + this.grid.id + "' style='height:"+(hheight)+"px; line-height:"+hheight+"px'");
			// 修复单选按钮错行的问题
            html.push("radio_" + this.grid.id +"'");
            var row = new unieap.ds.Row(binding.getRowSet(),data);
            if (row && row.data && row.isRowSelected()) { //U_EAP00028153
            	html.push(" checked='true' ");
                this.addToSelection(inRowIndex);
            }
            if (!this.isSelectable(inRowIndex) || row.getIdentifier("uncheckabled")) {
            	html.push(" disabled='true' ");
            }
            html.push("/></td>");
            return html.join('');
        }
	},
	//产生复选按钮的HTML
	generateMultiSelectCell: function(inRowIndex) {

		var binding = this.grid.getBinding();
		var data = inRowIndex>=0?binding.getRow(inRowIndex):{allSelect: true};;
		var row = new unieap.ds.Row(binding.getRowSet(),data);
		var html = [];

		if (inRowIndex == -1) {
	
        	var hheight = this.grid.ViewManager.getHeaderHeight();
            if (data["allSelect"]) {
				var rs = this.grid.getBinding().getRowSet();
				//当Grid绑定的dataStore没有任何数据时，需要加上判断条件rs.getRowCount()>0才行
				//见bug U_EAP00029667
                if (rs.getRowCount()>0&&rs.getUnSelectedRows(unieap.ds.Buffer.PRIMARY).length == 0&&rs.getUnSelectedRows(unieap.ds.Buffer.FILTER).length == 0) {
				// if (rs.getRowCount()>0&&rs.getUnSelectedRows(unieap.ds.Buffer.FILTER).length == 0) {
                    html.push("<td><div class='u-xgrid-rowbar-choice xgridRowbarSetAll u-xgrid-input-checkbox u-xgrid-row-chockbox-selected' " +
                    		// "style='height:"+(hheight-1)+"px; line-height:"+hheight+"px'>" +
                            "style='height:"+(hheight-1)+"px'>" +
                    		"<input type='checkbox' style='height:"+(hheight-1)+"px; line-height:"
                    		+hheight+"px'");
					html.push(" checked='true'");
				}else{
                    html.push("<td><div class='u-xgrid-rowbar-choice xgridRowbarSetAll u-xgrid-input-checkbox' " +
                    		// "style='height:"+(hheight-1)+"px; line-height:"+hheight+"px'>" +
                    	    "style='height:"+(hheight-1)+"px'>" +
                    		"<input type='checkbox' style='height:"+(hheight-1)+"px; line-height:"
                    		+hheight+"px'");
				}
			}
			html.push("></div></td>");
        }else {
			var hheight = this.grid.RowManager.defaultRowHeight;
			//判断是否有被set过display的情况
			var td = binding.store.rowSet.primary[inRowIndex]['_setCkeckDisplay'] == false ?
					"<td><div class='u-xgrid-rowbar-choice u-xgrid-input-checkbox inputDisplayNone' style='height:"+(hheight-1)+"px'><input type='checkbox' name='"  :
				"<td><div class='u-xgrid-rowbar-choice u-xgrid-input-checkbox' style='height:"+(hheight-1)+"px'><input type='checkbox' name='" ;

			// html.push("<td><div class='u-xgrid-rowbar-choice u-xgrid-input-checkbox' style='height:"+(hheight-1)+"px; line-height:"+(hheight-1)+"px'><input type='checkbox' name='");
            html.push(td);
			html.push("checkbox_" + this.grid.id + "' style='height:"+(hheight)+"px; line-height:"+hheight+"px'");
			if (row && row.data && row.isRowSelected()) { //U_EAP00028153
				html.push(" checked='true' ");
				this.addToSelection(inRowIndex);
			} else {
				this.removeFromSelection(inRowIndex);
			}
			if (!this.isSelectable(inRowIndex) || row.getIdentifier("uncheckabled")) {
				html.push(" disabled='true' ");
				html.push(" class='checkBoxDisabled' ");
			}
			html.push("></div></td>");
			
        }
        return html.join('');
	},
	
	/**
	 * @summary:
	 * 		取得表格的选择类型
	 * @return:
	 * 		{string}
	 * @enum:
	 * 		{"s"|"single"|"m"|"multiple"|"none"}
	 * @example:
	 * |<script type="text/javascript">
	 * |	var grid=unieap.byId("grid");
	 * |    var type=grid.getManager("SelectionManager").getSelectType(); 
	 * |	alert(type);
	 * |</script>
	 */
	getSelectType: function() {
		return this.selectType;
	},
	
	/**
	 * @summary:
	 * 		设置表格的选择类型
	 * @param:
	 * 		{string} inSelectType
	 * @enum:
	 * 		{"s"|"single"|"m"|"multiple"|"none"}
	 * @example:
	 * |<script type="text/javascript">
	 * |	var grid=unieap.byId("grid");
	 * |	var selectType = grid.getManager("SelectionManager").getSelectType();
	 * |	if(selectType=="m" || selectType=="multiple"){
   	 * |		grid.getManager("SelectionManager").setSelectType("s");
	 * |	}else if(selectType=="s" || selectType=="single"){
   	 * |		grid.getManager("SelectionManager").setSelectType("m"); 
	 * |	}
	 * |</script>
	 */
	setSelectType: function(inSelectType) {
		if (this.selectType == inSelectType) {
			return;
		} else {
			this.selectType = inSelectType;
			this.clearSelection();	
			this.grid.refresh();
		}
	},
	
	/**
	 * @summary:
	 * 		取得表格选中行
	 * @return:
	 * 		{array} 被选中的行的Row对象数组
	 * @example:
	 * |<script type="text/javascript">
	 * |	var grid=unieap.byId("grid");
	 * |	var selectedRows=grid.getManager('SelectionManager').getSelectedRows();
	 * |	unieap.debug(selectedRows);
	 * |</script>
	 */
	getSelectedRows: function() {

		return this.grid.getBinding().getRowSet().getSelectedRows();
	},
	
	
	/**
	 * @summary:
	 * 		取得选中的数据集
	 * @return：
	 * 		{unieap.ds.RowSet} 选中的数据对象组成的数据集
	 * @description：
	 * 		取得选中的数据集。
	 * 		当存在翻页缓存时,能够获取缓存中的数据。
	 * 		
	 */
	getSelectedDataSet:function(){
		var pagingMan=this.grid.getManager("PagingManager");
		if( pagingMan && pagingMan.pageCache){
			//如果存在缓存页
			var data=pagingMan.getSelectedCachedData();
			return new  unieap.ds.DataStore(data).getRowSet();
		}else{
			var rs = new unieap.ds.DataStore().getRowSet();
			var grs = this.grid.getBinding().getRowSet();
			var arr  = grs.getSelectedRowIndexs();
			var data = grs.getData();
			for(var i = 0;i<arr.length;i++){
				rs.addRow(data[arr[i]],false,true,false);
			}
			return rs;
		}
	},

	
	/**
	 * @summary:
	 * 		删除选中行
	 * @example:
	 * |<script type="text/javascript">
	 * |	var grid=unieap.byId("grid");
	 * |	grid.getManager('SelectionManager').deleteSelectedRows();
	 * |</script>
	 */
	deleteSelectedRows: function() {
		try {
			var binding = this.grid.getBinding();
			binding.getRowSet().deleteSelectedRows();
			this.grid.resizeContainer();
			if(binding.getRowCount() == 0){
				var checkNode=dojo.query("input[type^=checkbox]",this.grid.headersNode);
				checkNode[0]&&(checkNode[0].checked = false);
			}
		} catch(e) {
			
		}
	},
	
	/**
	 * @summary:
	 * 		选中前监听事件
	 * @description:
	 * 		此方法返回false时，选择将不生效。
	 * @param:
	 * 		{number} inRowIndex
	 * @return:
	 * 		{boolean}
	 */
	onBeforeSelect: function(inRowIndex) {
		return true;
	},
	
	/**
	 * @summary:
	 * 		取消选择前监听事件
	 * @description:
	 * 		此方法返回false时，取消选择将不生效。
	 * @param:
	 * 		{number} inRowIndex
	 * @return:
	 * 		{boolean}
	 * @example:
	 *|<div dojoType="unieap.xgrid.Grid"  width="80%" height="250px" binding="{store:'empDataStore'}" views="{rowNumber:true}" 
     *|	    selection="{selectType:'multiple',onBeforeDeselect:test}">
   	 *|		... 
	 *|</div>	  
	 */
	onBeforeDeselect: function(inRowIndex) {
		return true;
	},
	
	/**
	 * @summary:
	 * 		选择后事件
	 * @param:
	 * 		{number} inRowIndex
	 * @example:
	 *|<div dojoType="unieap.xgrid.Grid"  width="80%" height="250px" binding="{store:'empDataStore'}" views="{rowNumber:true}" 
     *|     selection="{selectType:'single',onAfterSelect:test}">
	 *|</div>
	 */
	onAfterSelect: function(inRowIndex) {
	},
	/**
	 * @summary:
	 * 		取消选择后事件
	 * @param:
	 * 		{number} inRowIndex
	 * @example:
	 *|<div dojoType="unieap.xgrid.Grid"  width="80%" height="250px" binding="{store:'empDataStore'}" views="{rowNumber:true}" 
     *|	selection="{selectType:'multiple',onAfterDeselect:test}">
     *|</div>
	 */
	onAfterDeselect: function(inRowIndex) {
	},
	/**
	 * @summary:
	 * 		全选前事件
	 * @description:
	 * 		此方法返回false时，全部选择将不生效。
	 * @param:
	 * 		{boolean} select select为true全部选中前事件，为false表示全部取消选择前事件
	 * @return:
	 * 		{boolean}
	 * @example:
	 *|<div dojoType="unieap.xgrid.Grid"  width="80%" height="250px" binding="{store:'empDataStore'}" views="{rowNumber:true}" 
     *|selection="{selectType:'multiple',onBeforeAllSelect:test}">
	 *|</div>
	 */
	onBeforeAllSelect: function(select) {
		return true;
	},
	/**
	 * @summary:
	 * 		全选后事件
	 * @param:
	 * 		{boolean} select select为true全部选中后事件，为false表示全部取消选择后事件
	 * @example:
	 *|<div dojoType="unieap.xgrid.Grid" width="80%" height="250px" binding="{store:'empDataStore'}" views="{rowNumber:true}" 
     *|     selection="{selectType:'multiple',onAfterAllSelect:test}">
	 *|</div>
	 */
	onAfterAllSelect: function(select) {
	},
	//根据inRowIndex选中一行
	addToSelection: function(inRowIndex) {

		this.grid.getBinding().selectedData(inRowIndex);
	},
	//根据inRowIndex移除一行	
	removeFromSelection: function(inRowIndex) {

		this.grid.getBinding().unSelectedData(Number(inRowIndex));
	},
	//根据inRowIndex使一行可以被选中
	enableCheckbox: function(inRowIndex) {
		var binding = this.grid.getBinding();
		var data = binding.getRow(inRowIndex);
		var row = new unieap.ds.Row(binding.getRowSet(),data);
		row.setIdentifier("uncheckabled",false);
	},
	//根据inRowIndex使一行不可被选中	
	unableCheckbox: function(inRowIndex) {
		var binding = this.grid.getBinding();
		var data = binding.getRow(inRowIndex);
		var row = new unieap.ds.Row(binding.getRowSet(),data);
		row.setIdentifier("uncheckabled",true);
	},
	/**
	 * @summary:
	 * 		判断某行是否可变更选择状态
	 * @param:
	 * 		{number} inRowIndex
	 * @return:
	 * 		{boolean}
	 */
	isCheckable: function(inRowIndex) {
		var binding = this.grid.getBinding();
		var data = binding.getRow(inRowIndex);
		var row = new unieap.ds.Row(binding.getRowSet(),data);
		var value = row.getIdentifier("uncheckabled");
		return value != true;
	},
		
	/**
	 * @summary:
	 * 		设置表格行数据的选中状态
	 * @param:
	 * 		{number} inRowIndex
	 * @param:
	 * 		{boolean} inSelect
	 */
	setSelect: function(inRowIndex, inSelect, event) {
		inRowIndex = parseInt(inRowIndex,10);
		if (isNaN(inRowIndex) || inRowIndex<0 || inRowIndex >= this.grid.getManager("RowManager").getRowCount()) {
			return;
		}
		
		if(!this.isCheckable(inRowIndex)) return;
		var select = true;
		
		if (typeof inSelect != 'undefined') {
			select = (inSelect==true);
		}
//		this.grid.getViewManager().refreshRow(inRowIndex);
		if (select) {
			if (!unieap.fireEvent4Widget(this, this.grid,this.onBeforeSelect,[inRowIndex])) {
				dojo.stopEvent(event);
				return;
			}
		} else {
			if (!unieap.fireEvent4Widget(this, this.grid,this.onBeforeDeselect,[inRowIndex])) {
				dojo.stopEvent(event);
				return;
			}
		}

		if(this.selectType&&this.selectType!="none"){
			if(this.selectType==this.types.s||this.selectType==this.types.single){
				this.clearSelection();
			}
			select?this.addToSelection(inRowIndex):this.removeFromSelection(inRowIndex);
			var rows = this.grid.getManager("RowManager");
			unieap.fireEvent4Widget(this, this.grid,select?this.onAfterSelect:this.onAfterDeselect,[inRowIndex]);
			var vm = this.grid.getViewManager();
			var snapshot = vm.views[vm.views.length-1].snapshot;
			if(inRowIndex <= snapshot.beginRowIndex+snapshot.showRows){
				vm.refreshRow(inRowIndex);
			}
			rows.updateSelectRow(inRowIndex);
			this.refreshCheckState(select);
		}
	},
			
	/**
	 * @summary:
	 * 		设置一行是否可设置选择状态
	 * @param:
	 * 		{number} inRowIndex
	 * @param:
	 * 		{boolean} checkabled
	 */
	setCheckabled: function(inRowIndex, checkabled) {
		if (inRowIndex != parseInt(inRowIndex,10)) return;
		if (isNaN(inRowIndex)) return;
		if (inRowIndex<0||inRowIndex>this.grid.getBinding().getRowCount()-1) return;
		checkabled? this.enableCheckbox(inRowIndex):this.unableCheckbox(inRowIndex);
		var vm = this.grid.getViewManager();
		var snapshot = vm.views[vm.views.length-1].snapshot;
		if(inRowIndex <= snapshot.beginRowIndex+snapshot.showRows){
			vm.refreshRow(inRowIndex);
		}
	},
	
	setCheckable: function(inRowIndex, checkabled) {
		if (inRowIndex != parseInt(inRowIndex,10)) return;
		if (isNaN(inRowIndex)) return;
		if (inRowIndex<0||inRowIndex>this.grid.getBinding().getRowCount()-1) return;
		checkabled? this.enableCheckbox(inRowIndex):this.unableCheckbox(inRowIndex);
		var vm = this.grid.getViewManager();
		var snapshot = vm.views[vm.views.length-1].snapshot;
		if(inRowIndex <= snapshot.beginRowIndex+snapshot.showRows){
			vm.refreshRow(inRowIndex);
		}
	},
	
	
	
	/**
	 * @summary:
	 * 		设置一行选择状态是否显示
	 * @param:
	 * 		{number} inRowIndex
	 * @param:
	 * 		{boolean} display
	 */
	setCheckDisplay: function(inRowIndex, display) {

		if (inRowIndex != parseInt(inRowIndex,10)) return;
		if (isNaN(inRowIndex)) return;
		if (inRowIndex<0||inRowIndex>this.grid.getBinding().getRowCount()-1) return;
		var checkNode= this.selectType == "single"? dojo.query("input[type^=radio]",this.grid.viewsNode) : dojo.query("input[type^=checkbox]",this.grid.viewsNode);
		if(checkNode){
			this.grid.getBinding().store.rowSet.primary[inRowIndex]['_setCkeckDisplay'] = display
		}
		if(checkNode && checkNode[inRowIndex]){
			//dataStore 里面增加数据 设置display的参数 好在渲染的时候去判断渲染的时候是否渲染该单选或者多选框
            this.grid.getBinding().store.rowSet.primary[inRowIndex]['_setCkeckDisplay'] = display;
            if(display){
				dojo.style(checkNode[inRowIndex],"display","block");
				$(checkNode[inRowIndex]).parent().css("visibility","visible");
				// $(checkNode[inRowIndex]).parent().css("display","block");
                // $(checkNode[inRowIndex]).parent().addClass('displayNone');
			}
			else{
				dojo.style(checkNode[inRowIndex],"display","none");
                $(checkNode[inRowIndex]).parent().css("visibility","hidden");
                // $(checkNode[inRowIndex]).parent().addClass('displayNone');
                // $(checkNode[inRowIndex]).parent().parent().addClass('displayNone');
			}
		}
	},
	
	/**
	 * @summary:
	 * 		设置表格全选
	 * 		只对多选时有用
	 * @param:
	 * 		{boolean} inSelect
	 */
	setAllSelect: function(inSelect) {
		if (!unieap.fireEvent4Widget(this, this.grid,this.onBeforeAllSelect,[inSelect])) {
			return false;
		}
		if (!(this.selectType==this.types.multiple || this.selectType==this.types.m)) {
			return false;
		}
		var binding = this.grid.getBinding();
		//var rowData = binding.getRowSet().getData();
		//var rowCount = rowData.length;
		var rowCount = binding.getRowCount();
		var checkNode=dojo.query("input[type^=checkbox]",this.grid.headersNode);
		if (rowCount==0) {
			checkNode[0]&&(checkNode[0].checked = inSelect);
			return false;
		}
		if (inSelect) {					
			for (var i =0; i<rowCount; i++){
				var row = new unieap.ds.Row(binding.getRowSet(),binding.getRow(i));
				if (true == row.getIdentifier("uncheckabled")) {
				} else {
					row.setRowSelected(true);
				}
			}
			checkNode[0]&&(checkNode[0].checked = true);
		} else {					
			for (var i =0; i<rowCount; i++){
				var row = new unieap.ds.Row(binding.getRowSet(),binding.getRow(i));
				if (true == row.getIdentifier("uncheckabled")) {
				} else {
					row.setRowSelected(false);
				}
			}
			checkNode[0]&&(checkNode[0].checked = false);
		}
		this.grid.getManager("ViewManager").refreshPage();
		unieap.fireEvent4Widget(this, this.grid,this.onAfterAllSelect,[inSelect]);
		return true;
	},
			
	/**
	 * @summary:
	 * 		判断一行是否被选中
	 * @param:
	 * 		{number} inIndex
	 * @return:
	 * 		{boolean}
	 */
	isSelected: function(inRowIndex){
		if(inRowIndex<0 || inRowIndex >= this.grid.getManager("RowManager").getRowCount()) {
			return false;
		}
		var binding = this.grid.getBinding();
		var row = new unieap.ds.Row(binding.getRowSet(),binding.getRow(inRowIndex));
		return row.isRowSelected();
		//return this.grid.getBinding().getRow(inRowIndex)["_s"]==true;
	},
	
	/**
	 * @summary:
	 * 		取得选择的行号
	 * @return:
	 * 		{array}
	 */
	getSelectedRowIndexs: function() {
		return this.grid.getBinding().getRowSet().getSelectedRowIndexs();
	},
	
	/**
	 * @summary:
	 * 		清空选择
	 */
	clearSelection: function() {
		var view = this.grid.getManager("ViewManager").views[0];
		if (view.isRowBar) {
			var inputs = dojo.query("input",view.domNode);
			for (var i=0, check; check=inputs[i]; i++) {
				if (check.checked==true) {
					check.checked = false;
				}
			}
		}
		var pageManager = this.grid.getManager("PagingManager");
		if(pageManager){
			pageManager.clearPageData();
		}
		var rows = this.grid.getBinding().getRowSet().getSelectedRows();
		for (var i=0,r; r=rows[i]; i++) {
			if(r){
				r.setRowSelected(false);
			}
		}
		this.refreshCheckState();
	},
	refreshCheckState: function(select) {
		if(this.selectType==this.types.m||this.selectType==this.types.multiple){
			var checkNode=dojo.query("input[type^=checkbox]",this.grid.headersNode);
			if(checkNode&&checkNode[0]){
				if(typeof select != 'undefined'&&!select){
					if(checkNode[0].checked)
						checkNode[0].checked = false;
				}
				else{
					var binding = this.grid.getBinding();
					var rowCount = binding.getRowCount();
					if (rowCount==0) return;
					var isAllSelected = true;
					for (var i =0; i<rowCount; i++){
						if (!this.isSelected(i)) {
							isAllSelected = false;
							checkNode[0].checked = false;
							return;
						} 
					}
					if(isAllSelected)
						checkNode[0].checked = true;
				}
			}
		}
	}
});

dojo.provide('unieap.xgrid.manager.RowEditManager');
dojo.require("unieap.global");
dojo.declare("unieap.xgrid.manager.RowEditManager", unieap.xgrid.manager.Manager,  {
	
	create : function(){
		dojo.connect(dojo.body(),"onmousedown",this,"applyEditing");
	},
	
	applyEditing : function(evt){
		if(dojo.isDescendant(evt.target,this.grid.domNode)) {
			return;
		}
		if(this.editType=="readonly" || !this.grid.rowEdit) {
			return;
		}
		var target = evt.target,
			node = target,
			x = evt.x || evt.pageX,
			y = evt.y || evt.pageY,
			obj = null,targetInView = false;
		dojo.require("unieap.form.Popup");
		while(node){
			if(node.className == "xgrid-rowedit-container" || node.notApplyWidget || node.id == 'shadeDiv'){
				targetInView = true;
				break;
			}
			if(node.getAttribute && (obj =  dijit.byNode(node)) && obj instanceof unieap.form.Popup){
				node = obj.widget.domNode ;
			}
			node = node.parentNode;
		}
		//如果不在Grid编辑视图内消失
		if(!targetInView){
			var self = this;
			if(this.grid.rowEdit && this.grid.rowEdit.domNode){
				dojo.style(this.grid.rowEdit.domNode,"display","none");
			}
			setTimeout(function(){
				self.apply();
				return;
			},0);
		}
	},

	/**
     * @summary:
     * 		是否启用动画效果11
     * @type:
     * 		{boolean}
     * @default:
     * 		读取unieap.animate的值
     * @description:
     *      当点击xgrid行，进行编辑时，编辑器移动是否显示动画效果
     */
	 animate : (typeof(unieap.animate) == 'undefined')?true:unieap.animate,

	/**
	 * @summary:
	 * 		往Grid中插入一行数据并使该行处于编辑状态
	 * @param:
	 * 		{object} inRowData 行数据
	 * @param:
	 * 		{number} inRowIndex 插入行位置
	 * 		
	 * @example:
	 * |	var rowData = {
	 * |	   attr_empno:111,
	 * |	   NAME:"XXX",
	 * |	   attr_deptno:10,
	 * |       attr_job:"工程师",
	 * |       attr_sal:5000
	 * |	}
	 * |//如果Grid控件为行编辑,编辑时光标位于第一行第一列上
	 * |	grid.getRowEditManager().insertRow(rowData,0);11
	 * |	grid.getRowEditManager().insertRow(rowData,0,0);focusIndex 第三个参数传递进来默认插入编辑行的时候光标默认在哪个地方
	 */
	insertRow: function(inRowData,inRowIndex,focusIndex) {
		inRowIndex = parseInt(inRowIndex,10);
		this.apply && this.apply();//确保之前的编辑关闭
		var rowCount = this.grid.getRowManager().getRowCount();
		var rowIndex = inRowIndex||0;
		if (rowIndex<0 || rowIndex>rowCount) {
			rowIndex = 0;
		}
		this.grid.getBinding().insertRow(inRowData, rowIndex);
		//grid的onBeforeEdit方法
		if (!unieap.fireEvent4Widget(this, this.grid,this.onBeforeEdit,[rowIndex])) return rowIndex;
		this.setEdit(rowIndex);
		focusIndex=focusIndex?focusIndex:-1;
		this.setCellIndex(focusIndex);
		return rowIndex;
	},
	
	//确保rowIndex行可见
	_visualizeRow: function(rowIndex,tabbing){
		var scrollView = this.grid.getManager("ViewManager").getScrollView();
		var snapshot = scrollView.snapshot;
		// 解决新版本回车换行最后一行可编辑状态位置不对的问题
		// console.log((snapshot.beginRowIndex <= rowIndex) && (rowIndex < (snapshot.beginRowIndex+snapshot.showRows-1)))
		// if((snapshot.beginRowIndex <= rowIndex) && (rowIndex < (snapshot.beginRowIndex+snapshot.showRows-1)))	return ;
		var rowEdit = this.grid.rowEdit;
		if(!rowEdit){return}
		// if("none" != dojo.style(this.grid.yscrollerNode,"display")){
		// 	snapshot.beginRowIndex += 1;
		// 	rowEdit.styleIndex--;
		// }
		if(rowEdit && rowEdit.styleIndex<0) rowEdit.styleIndex = 0;
		if(rowIndex == snapshot.rowCount-1){
			snapshot.lastRow=true;
		}
		if(rowEdit)rowEdit.noRefreshEdit = true;
		this.grid.getManager("ViewManager").refreshPage();
		//当用快捷键移动到最后一行，然后移动窗口，横向滚动条从无到有，这个时候需要将noRefreshEdit设为false
		if(rowEdit)rowEdit.noRefreshEdit = false;
	},
	
	refreshRowEdit: function(){
		var rowEdit = this.grid.rowEdit,
		    setIndex = rowEdit.index,
		    scrollView = this.grid.getViewManager().getScrollView();
	    rowEdit.applyEdit();
	    scrollView.contentBuilder.getRowEdit(setIndex+1);
	},
	
	/**
	 * @summary:
	 * 		打开编辑器，焦点设置在inRowIndex对应的编辑器的第一个单元格上。
	 * @param:
	 * 		{number} inRowIndex 编辑的行号
	 * @example:
	 * |	var grid = unieap.byId("grid");
	 * |	var editMgr = grid.getRowEditManager();		
	 * |	editMgr.setEdit(2); //编辑第3行
	 * @example:
	 * |	var grid = unieap.byId("grid");
	 * |	var editMgr = grid.getManager("RowEditManager");
	 * | 	var rowIndex = parseInt(value,10);
     * |    editMgr.setEdit(rowIndex);
	 */
	setEdit: function(/*number*/inRowIndex,/*number*/cellIndex) {
		if(inRowIndex < 0)return;
		if(!unieap.fireEvent4Widget(this, this.grid,this.onBeforeEdit,[inRowIndex])) return inRowIndex;
		if(!this.grid.rowEdit){
			var views = this.grid.getManager("ViewManager").views;
			var view = views[views.length-1];
			dojo.require("unieap.xgrid.core.RowEdit");
			this.grid.rowEdit = new unieap.xgrid.RowEdit({view:view,setEditting:true});
		}
		//确保编辑行可见
		//this._visualizeRow(inRowIndex);
		this.grid.getManager("ViewManager").scroller.visualizeRow(inRowIndex);
		this.grid.rowEdit.setEdit(inRowIndex);
		if(typeof(cellIndex) != "number") cellIndex = -1;
		this.setCellIndex(cellIndex);
	},
	
	/**
	 * @summary:
	 * 	 设置焦点落在哪个cell上
	 * @example:
	 * |	var grid=unieap.byId("grid");
	 * |	grid.getManager("RowEditManager").setCellIndex(1);
	 */
	setCellIndex: function(/*number*/cellIndex) {
		var rowEdit = this.grid.rowEdit,
			flag = false,
			editedNode = rowEdit.editedNode;
		for(var i = 0,l = editedNode.length ; i<l; ++i){
			if(editedNode[i].editIndex == cellIndex){
				cellIndex = i;
				flag = true;
				break;
			}
		}

		if(flag && rowEdit && "undifine" != cellIndex && 0 <= cellIndex < editedNode.length){
			editedNode[cellIndex] && editedNode[cellIndex].focus();
		}else{
			// if(this.grid&&this.grid.LayoutManager&& editedNode[0] &&this.grid.LayoutManager.cellCount >editedNode[0].editIndex){ //避免造成编辑行的index在没有可视区的情况下被选中 导致表格错乱
			// 	return
			// }
			editedNode[0] && editedNode[0].focus();
		}
	},
	
	/**
	 * @summary:
	 * 	 获取当前编辑的行号
	 * @return:
	 * 	{number} 如果不处在编辑状态下，则返回-1
	 * @example:
	 * |	var grid=unieap.byId("grid");
	 * |	var currentIndex=grid.getManager("RowEditManager").getCurrentRowIndex();
	 */
	getCurrentRowIndex:function(){
		return this.grid.rowEdit?this.grid.rowEdit.index:-1;
	},
	
	/**
	 * @summary:
	 * 		完成编辑，让编辑器消失处于非编辑状态
	 * @example:
	 * |	var editMgr=grid.getManager("RowEditManager");
	 * |	editMgr.apply(); //如果有单元格处于编辑状态,让编辑器消失
	 */
	apply: function() {
		if(this.grid.rowEdit){
			this.grid.rowEdit.applyEdit();
		}
	},
	
	/**
	 * @summary:
	 * 		删除一行
	 * @param:
	 * 		{number} inRowIndex 行索引,从0开始计算
	 * @example:
	 * |	unieap.byId("grid").getManager("RowEditManager").deleteRow(1);
	 */
	deleteRow: function(inRowIndex) {
		if(this.grid.rowEdit){
			this.grid.rowEdit.applyEdit();
		}
		return this.grid.getBinding().deleteRow(inRowIndex);
	},
	
	/**
	 * @summary:
	 * 		删除多行数据
	 * @param:
	 * 		{array} rows
	 * @example:
	 *|		//获取选中行的行索引数组
	 *|		var selectedRowIndexs = grid.getBinding().getRowSet().getSelectedRowIndexs();
	 *|		//删除选中行
	 *|		grid.getManager("RowEditManager").deleteRows(selectedRowIndexs);
	 */
	deleteRows: function(rows) {
		if(this.grid.rowEdit){
			this.grid.rowEdit.applyEdit();
		}
		this.grid.getBinding().deleteRows(rows);
	},
	
	/**
	 * @summary:
	 * 		编辑前触发事件
	 * @description:
	 * 		覆盖此方法，并返回false时，编辑操作将被取消
	 * @param:
	 * 		{number} inRowIndex
	 * 		将要触发编辑的行
	 * @param:
	 * 		{unieap.xgrid.Cell} inCell
	 * @return:
	 * 		{boolean}
	 * @example:
	 *|<div dojoType="unieap.xgrid.Grid" id="grid" width="80%" height="250px" binding="{store:'empDataStore'}" views="{rowNumber:true}" 
     *|     edit="{editType:'rowEdit',singleClickEdit:true,onBeforeEdit:test}">
	 *|</div>
	 */
	onBeforeEdit: function(inRowIndex, inCell) {
		return true;
	},
	
	/**
	 * @summary:
	 *    返回当前正在编辑的cell对象
	 * @return:
	 * 		{unieap.xgrid.Cell}
	 * @example:
	 * |var cell = grid.getRowEditManager().getFocusCell();
	 */
	getFocusCell : function(){
		if(this.grid.rowEdit){
			var node = document.activeElement;
			var widget = dijit.getEnclosingWidget(node);
		    var cells = this.grid.rowEdit.editedCell;
			for(var i=0,l=cells.length;i<l;i++){
				if(cells[i].getEditor()==widget){
					return cells[i];
				}
			}
		}else{
			return null;
		}
	}
});
dojo.provide('unieap.xgrid.manager.PagingManager');
dojo.require("unieap.global");
dojo.declare("unieap.xgrid.manager.PagingManager",null,{
	/**
	 * @summary:
	 * 		翻页控制器
	 * @classDescription：
	 * 		控制Grid的翻页功能。上一页,下一页,第一页,最后一页等操作。
	 * @declaredClass:
	 * 		unieap.xgrid.manager.PagingManager
	 * @example:
	 * |	<div dojoType="unieap.xgrid.Grid">
	 * |		<toolbar paging="{parameters:{name:'psd'},url:"/demo.do"}">
	 * |		</toolbar>
	 * |	</div>
	 * 		通过toolbar的标签定义初始化翻页信息
	 * @example
	 * |	var manager=grid.getManager('PagingManager');
	 * |	manager.firstPage();
	 * 		翻到第一页
	 * @example:
	 * |	var manager=grid.getManager('PagingManager');
	 * |	manager.prevPage();
	 * 		翻到上一页
	 * @example：
	 * |	var manager=grid.getManager('PagingManager');
	 * |	manager.nextPage();
	 * 		翻到下一页
	 * @example：
	 * |	var manager=grid.getManager('PagingManager');
	 * |	manager.lastPage();
	 * 		翻到最后一页
	 */
	
	/**
	 * @summary:
	 * 		是否进行翻页缓存
	 * @description:
	 * 		客户端缓存只缓存数据,不缓存用户动态设置的样式(比如调用setRowStyles等)
	 * @type：
	 * 		{boolean}
	 * @default：
	 * 		false
	 * @example:
	 * 	|<div dojoType="unieap.xgrid.grid">
	 * 	|	<header>
	 * 	|		<cell name="empno"></cell>
	 * 	|	</header>
	 * 	|	<toolbar paging="{pageCache:true}"></toolbar>
	 * 	|</div>
	 */
	pageCache: false,
	
	/**
	 * @summary:
	 * 		翻页使用的url
	 * @type:
	 * 		{string}
	 * @example:
	 * |	<div dojoType='unieap.xgrid.Grid'>
	 * |		<header></header>
	 * |		<toolbar paging="{url:'test.do'}" >
	 * |		</toolbar>
	 * |	</div>
	 * 		可在toolbar标签上定义url
	 * @example:
	 * |	var manager=grid.getManager('PagingManager');
	 * |	manager.setInfo({url:'test.do'});
	 * 		可以通过setInfo方法设置翻页控制器的url
	 */
	url: null,
	
	/**
	 * @summary:
	 * 		翻页使用的parameters
	 * @type:
	 * 		{object}
	 * @example:
	 * |	<div dojoType='unieap.xgrid.Grid'>
	 * |		<header></header>
	 * |		<toolbar paging="{parameters:{user:'y',password:'f'}}" >
	 * |		</toolbar>
	 * |	</div>
	 * 		可在toolbar标签上定义parameters
	 * @example:
	 * |	var manager=grid.getManager('PagingManager');
	 * |	manager.setInfo({parameters:{user:'y',password:'f'}});
	 * 		可以通过setInfo方法设置翻页控制器的parameters
	 */
	parameters: null,
	
	/**
	 * @summary:
	 * 		是否显示翻页条,默认显示
	 * @description:
	 * 		默认情况下,在Grid控件里书写<toolbar></toolbar>会显示翻页条信息
	 * @type:
	 * 		{boolean}
	 * @default:
	 * 		true
	 * @example:
	 * |<div dojoType="unieap.xgrid.Grid" id="grid">
	 * |	<headr>
	 * |		<cell label="编号" name="attr_name"></cell>
	 * |		<cell label="职位" name="attr_job"></cell>
	 * |	</header>
	 * |	<toolbar paging="{display:false}"></toolbar>
	 * |</div>
	 * @img:
	 * 		images/grid/grid_toolbar_displayPagingBar.png
	 */
	display:true,
	
	/**
	 * @summary:
	 * 		设置每页显示的数据条数
	 * @description:
	 * 		该属性会在toolbar上创建一个下拉框,用户可以选择下拉框控件的值来动态改变每页显示的数据条数.
	 * 		只有当display属性为true的情况下,该属性才有效
	 * @type:
	 * 		{boolean|array}
	 * @default:
	 * 		false
	 * @example:
	 * |<div dojoType="unieap.xgrid.Grid" id="grid">
	 * |	<headr>
	 * |		<cell label="编号" name="attr_name"></cell>
	 * |		<cell label="职位" name="attr_job"></cell>
	 * |	</header>
	 * |	<toolbar paging="{userPageSize:true}"></toolbar>
	 * |</div>
	 * @img:
	 * 		images/grid/grid_toolbar_customPageSize.png
	 * @example:
	 * |<div dojoType="unieap.xgrid.Grid" id="grid">
	 * |	<headr>
	 * |		<cell label="编号" name="attr_name"></cell>
	 * |		<cell label="职位" name="attr_job"></cell>
	 * |	</header>
	 * |	<toolbar paging="{userPageSize:[100,200,300,400]}"></toolbar>
	 * |</div>
	 * @img:
	 * 		images/grid/grid_toolbar_configCustomPageSize.png
	 */
	userPageSize:false,
	
	
	/**
	 * @summary:
	 * 		是否支持客户端翻页
	 * @description:
	 * 		用户可以修改DataStore的pageSize属性来让每页显示多少条数据,用户需保证DataStore的recordCount属性正确
	 * @type:
	 * 		{boolean}
	 * default:
	 * 		false
	 * @example:
	 * |<div dojoType="unieap.xgrid.Grid" id="grid">
	 * |	<header>
	 * |		<cell label="编号" name="attr_name"></cell>
	 * |		<cell label="职位" name="attr_job"></cell>
	 * |	</header>
	 * |	<toolbar paging="{clientPaging:true}"></toolbar>
	 * |</div>
	 */
	clientPaging: false,
	
	
	
	/*
	 * @summary:
	 * 		grid翻页时，当本页发生变化时默认采取的操作
	 * @description:
	 * 		discard： 不提示，不保存，翻页
	 * 
	 * 		saveconfirm： 根据提示进行操作 “数据发生改变，是否保存修改?”
	 * 				  选择确定：保存，不翻页
	 * 				  选择取消：不保存，翻页
	 * 		discardconfirm：根据提示进行操作，“数据发生改变，是否放弃修改？”
	 * 				  选择确定：不保存，翻页
	 * 				  选择取消：	不保存，不翻页
	 * @type:
	 * 		{string}
	 * @enum:
	 * 		{"discard"|"saveconfirm"|"discardconfirm"}
	 * @default:
	 * 		"saveconfirm"
	 */
	pagingModifiedSave: unieap.widget.grid.pagingModifiedSave,
	
	asyncPageCount:false,
	asyncPageCountFinish:false,
	totalCount:0,
	
	
	constructor: function(param) {
		dojo.mixin(this,param);
		if(this.pageCache==true){
			if(this.grid.ViewManager && this.grid.ViewManager.orderType=="server"){
				this.grid.connect(this.grid.getBinding(),'onBeforeSort',dojo.hitch(this,function(){
					this.onServerSort();
				}));
			}
		}
		
		
	},
	
	/**
	 * @summary:
	 * 		显示toolbar上的翻页条
	 * @example:
	 * |<div dojoType="unieap.xgrid.Grid" id="grid">
	 * |	<headr>
	 * |		<cell label="编号" name="attr_name"></cell>
	 * |		<cell label="职位" name="attr_job"></cell>
	 * |	</header>
	 * |	<toolbar paging="{display:false}"></toolbar>
	 * |</div>
	 * |<div dojoType="unieap.form.Button" label="显示翻页条" onClick="show"></div>
	 * |<script type="text/javascript">
	 * |	function show(){
	 * |		unieap.byId("grid").getManager("PagingManager").showPagingBar();
	 * |	}
	 * |</script>
	 */
	showPagingBar:function(){
		if(!this.display){
			this.display=true;
			this.grid.getToolBar()._showPagingBar();
		}
	},
	
	/**
	 * @summary:
	 * 		隐藏toolbar上的翻页条
	 * @example:
	 * |<div dojoType="unieap.grid.Grid" id="grid">
	 * |	<headr>
	 * |		<cell label="编号" name="attr_name"></cell>
	 * |		<cell label="职位" name="attr_job"></cell>
	 * |	</header>
	 * |	<toolbar paging="{display:false}"></toolbar>
	 * |</div>
	 * |<div dojoType="unieap.form.Button" label="隐藏翻页条" onClick="hide"></div>
	 * |<script type="text/javascript">
	 * |	function hide(){
	 * |		unieap.byId("grid").getManager("PagingManager").hidePagingBar();
	 * |	}
	 * |</script>
	 */
	hidePagingBar:function(){
		if(this.display){
			this.display=false;
			this.grid.getToolBar()._hidePagingBar();
		}
	},
	
	/**
	 * @summary:
	 * 		同步自定义显示每页条数的下拉框中的值
	 * @description:
	 * 		在某些情况下，用户修改了Grid控件绑定的DataStore的pageSize，但是自定义每页显示数据条数的下拉框的值却不同步。
	 * 		调用本方法可以同步下拉框中的值
	 * @example:
	 * |<script type="text/javascript">
	 * |	unieap.byId("grid").getManager("PagingManager").updateUserPageSize();
	 * |</script>
	 */
	updateUserPageSize:function(){
		var toolbar=this.grid.getToolBar(),
			combobox=toolbar&&toolbar.getComboBox();
		if(combobox){
			var info=this.grid.getManager('PagingManager').getPageInfo();
			combobox.setValue(info.pageSize)
			
		}
	},
	
	/**
	 * @summary:
	 * 		当有翻页缓存时,导出选中的记录
	 * @param:
	 * 		{Object||null} exportInfo
	 * @example:
	 * |<div dojoType="unieap.form.Button" label="导出选中数据"></div>
	 * |<script type="text/javascript">
	 * |var info={
	 * |	url:'/user_export.do?method=export',
	 * |	parameters:{'id':'2.7182818284590451'}
	 * |}
	 * |function doExport(){
	 * |	unieap.byId("grid").getManager("PagingManager").exportSelectedData(info);
	 * |}
	 * |</script>
	 * 
	 */
	exportSelectedData:function(exportInfo){
		if(!this.pageCache) return;
		var gridData=this.grid.getGridData(),
			data=this.getSelectedCachedData(),
			dsName=gridData['store'].getName();
		delete gridData['store'];
		dojo.mixin(gridData,exportInfo||{},{type:'client'},{
			store:new unieap.ds.DataStore(dsName,data)
		});
		unieap.Action.doExport(gridData);
		
	},
	
	/**
	 * @summary:
	 * 		设置翻页信息
	 * @param 
	 * 		{object} pageInfo
	 * @example:
	 * |	var manager=grid.getManager('PagingManager');
	 * |	var pageInfo={
	 * |		url:'test',
	 * |		parameters:{user:'chen',password:'s'}
	 * |	}
	 * |	manager.setInfo(pageInfo);
	 * 		设置翻页控制器的url与parameters属性。在翻页查询数据时用到。
	 */
	setInfo: function(pageInfo){
		dojo.mixin(this,pageInfo);
	},
	
	/**
	 * @summary:
	 * 		得到翻页信息
	 * @return
	 * 		{object}
	 */
	getPageInfo: function(){
		var store=this.grid.getBinding().store,
			info={};
		if(store){
			//总记录数
			info.totalCount=store.getRecordCount();
			
			//每页显示的记录数
			info.pageSize=store.getPageSize();
			
			//页码
			info.pageNumber=store.getPageNumber();
			
			//本页主缓冲区的记录区域
			info.pageCount=store.getRowSet().getRowCount();
			
			//本页当前有效记录数  主缓冲区过滤缓冲区
	 		info.totalPageCount=info.pageCount+store.getRowSet().getRowCount(unieap.ds.Buffer.FILTER);
			//本页初始有效记录树 主缓冲区过滤缓冲区
			info.initialPageCount=store.getRowSet().getInitialCount();
		}
		return info;
	},
	
	/**
	 * @summary:
	 * 		进行翻页
	 * @param
	 * 		{number} no 页码
	 * @param
	 * 		{object|null} pageInfo 翻页信息
	 * @example：
	 * |	var manager=grid.getManager('PagingManager');
	 * |	var pageInfo={
	 * |		url:'test',
	 * |		parameters:{user:'chen',password:'s'}
	 * |	}
	 * |	manager.setPageNumber(2,pageInfo);
	 * 		翻到第2页,使用特定的翻页信息,没有参数时使用默认的翻页信息
	 */
	setPageNumber: function(no,pageInfo,store){
		var indata=dojo.mixin({},{url:this.url,parameters:this.parameters},pageInfo);
		this._setPageNumber(no,indata,store)
	},
	
	/**
	 * @summary:
	 * 		当翻页时，本页数据有变化时触发
	 * @param:
	 * 		{unieap.ds.DataStore} store
	 * @param:
	 * 		{unieap.xgrid.Binding} binding
	 * @description:
	 * 		默认实现为if(confirm("保存修改？")){binding.save();},
	 * 		可重新实现这个方法。
	 * 		在global.js中可以修改默认实现。
	 * @example:
	 * |<div dojoType="unieap.xgrid.Grid" id="grid">
	 * |	<header>
	 * |		<cell name="attr_empno" label="编号"></cell>
	 * |		<cell name="attr_ename" label="姓名"></cell>
	 * |	</header>
	 * |	<toolbar paging="{onPagingModified:onPM}">
	 * |	</toolbar>
	 * |</div>
	 * |<script type="text/javascript">
	 * |	//重新实现翻页时的保存信息
	 * |	function onPM(store,binding){
	 * |		var choice=confirm("保存修改?");
	 * |		if(choice){
	 * |			//由于save方法会延时执行,当配置pageCache为true时,不建议返回为false
	 * |			//即当有数据修改时,不翻页,只是保存数据
	 * |			binding.save({url:'/test.do'});
	 * |			return true; //保存不翻页
	 * |		}
	 * |		return false; //不保存翻页
	 * |	}
	 * |}
	 * 		
	 * @return:
	 * 	{boolean} 返回true不翻页 返回false进行翻页
	 */
	onPagingModified : function(store,binding){
		return false;
	},
	
	//翻页操作,翻到第no页
	_setPageNumber: function(no,indata,store){
		var rowEdit = this.grid.rowEdit;
		if(rowEdit && rowEdit.editing){
			rowEdit.applyEdit();
		}
		var headersNode = this.grid.headersNode || this.grid.headerNode;
		var checkNode=dojo.query("input[type^=checkbox]",headersNode);
		checkNode[0]&&(checkNode[0].checked = false);
		var model=this.grid.getBinding(),
			store=model.getDataStore();
		if(model.isModified()&&this.onPagingModified(store,model)){
			return;
		}else{
			var _store=store.collect('auto'),self=this;
			_store.setPageNumber(no);
			if(false == unieap.fireEvent4Widget(this, this.grid,this.onBeforePaging,[_store])){
				return;
			}else{
				if(this.pageCache){ 
					//缓存当前页
					this.cachePageData(store);
					var key = String(no);
					if(this._pageCache&&this._pageCache[key]){
						store.getRowSet()["primary"] = this._pageCache[key];
						//store.getRowSet().getData(unieap.ds.Buffer.PRIMARY) = this._pageCache[key];
						store.setPageNumber(no);
						var dsName = store.getName();
						model.setDataStore(store);
						unieap.fireEvent4Widget(this, this.grid,this.onAfterPaging,[]);
						return;
					}
				}else{
					this.clearPageData();
				}
				//客户端排序翻页时，去掉排序状态
				this.grid.ViewManager.orderType=='client' && (this.grid.sortInfo=[]);
				//处理翻页
				this.clientPaging?this.doClientPaging(no):this.doServerPaging(no,indata,_store);
					
			}
		}
		//U_EAP00027953 页码框自适应，达到3位数后自动扩展
		var toolbarPageNoNode = this.grid.getToolBar().pageNoNode;
		if(no>99){
			var newWidth = (String(no).length-2)*8 + 23;
			(dojo.isFF) && (newWidth = newWidth + 8);//FF下input偏正方 需要修正
			newWidth = newWidth + 'px';
			dojo.style(toolbarPageNoNode,'width',newWidth);
		}else{
			dojo.style(toolbarPageNoNode,'width','23px');
		}
	},
	
	//客户端翻页
	doClientPaging:	function(pageNumber){
		var model=this.grid.getBinding();
		this.onAfterPaging();
		model.setDataStore(model.getDataStoreByPageNumber(pageNumber));
		
	},
	
	//服务端翻页
	doServerPaging:	function(no,indata,_store){
		var model=this.grid.getBinding(),
			rpc=model.rpc,
			self=this;
		var callback=function(a,b){
			var ds,dc;
			if(arguments.length==2){
				ds=a;
				dc=b;
			}else if(arguments.length==1){
				dc=a;
			}else{
				return;
			}
			!ds&&(ds=dc.getSingleDataStore());
			//判断Grid绑定的DataStore是否在DataCenter中,先查看局部的，在查看全局的。新loader下有问题 需要增加判决条件
			var _dataCenter = self.grid.dataCenter || (unieap.Action.getViewContext(self.grid) || window).dataCenter;
			if((model.getDataStore() == _dataCenter.getDataStore(ds.getName()))) {
				_dataCenter.append(dc,"replace");
			}else{
				model.setDataStore(ds);
			}
			
			self.onAfterPaging();
		}
	
		if(!this.processor &&  _store.parameters &&_store.parameters.processor){
			this.processor =  _store.parameters.processor
		}
	
		//rpc用于用户自己去发送请求，返回一个dc即可
		if(dojo.isFunction(rpc)){
			rpc(_store,callback,this.grid,'paging');
		}else if(typeof(this.processor) != "undefined" && this.processor){
			// 调用自定义action Start
			var _pageKey = _store.getParameter("_pageKey");
			if(_pageKey){
				    var viewName = this.processor.view;
				    var methodName = this.processor.name;
				    var _calcRecordCount = this.processor._calcRecordCount;
				    var _rootNodeId = this.grid._rootID;
				    var viewContextKey = (typeof(_rootNodeId) == "undefined" || _rootNodeId == "")?"viewContext":_rootNodeId,
				    	viewContext = unieapViewContextHolder[viewContextKey];
				    if(viewContext.length > 1){
				    	var mainViewName = "",
				    		isViewc = false;
				    	for(var index =0 ; index < viewContext.length; index++){
				    		var view = viewContext[index],
				    			name = view["name"],
				    			type = view["type"];
				    		if(name == viewName && type == "viewc"){
				    			isViewc = true;
				    		}else if(type == "view"){
				    			mainViewName = name;
				    		}
				    	}
				    	if(isViewc){
				    		viewName = mainViewName + "_" + viewName;
				    	}
				    }
				    var view = window[viewName] || window[viewContext[0].name] ;//防止页面同名 被修改了viewName
				    var dataCenter = view.dataCenter;
			        var dc = new unieap.ds.DataCenter();
			        dc.addDataStore(dataCenter.getDataStore("_advancedQueryConditionStore"));
			        dc.setParameter("_pageKey", _pageKey);
			        dc.setParameter("_pageSize", _store.getPageSize());
					dc.setParameter("_pageNumber", _store.getPageNumber());
					
					var path = unieap.WEB_APP_NAME + unieap.global.gridServerPagingUrl +"?page="+unieap.WEB_PAGE_NAME;
					var menuId = null;
					if (view && view.dataCenter){
						menuId = view.dataCenter.getParameter('menuId') || view.dataCenter.getParameter('unieapMenuId');
						path += '&menuId=' + menuId;
					 }
			        var _self = this;
			        // 增加请求之前的切入点
			        if (doBeforeRequest(dc, view, "_pageQuery")) {
			            return unieap.Action.requestData({
			                url: path,
			                dc: dataCenter,
			                sync: false,
			                load: function (dc) {
			                    // 增加请求成功回调之前的切入点
			                    if (doBeforeSuccessResponse(dc, view, "_pageQuery")) {
			                    	
									var _ds;
			                    	
			                    	if(dc.getDataStores()){//增加对DS的判断
			                    		var dsList = dc.getDataStores();
			                    		for(var key in dsList){
			                    			var ds = dsList[key]
			                    			if(ds.getParameter("_pageKey")==_pageKey){
			                    				_ds = ds
			                    			}        
			                    		}
			                    	}
			                        var processorInfo = {};
		                            processorInfo['view'] = viewName;
		                            processorInfo['name'] = methodName;
									processorInfo['parameters'] = _self.processor.parameters;
									if(!_ds.rowSetName){
										_ds.rowSetName = _self.grid.getBinding().getDataStore().rowSetName;
									}
		                            //增加对服务端导出的支持
		                            if (dataCenter.getHeaderAttribute(methodName) == "serverExport"){
		                            	_ds.parameters = _store.parameters;
			            			}
		                            _ds.setParameter('processor', processorInfo);
			                        _self.grid.getBinding().setDataStore(_ds);
			            			_self.setInfo({processor:processorInfo});
			            			unieap.fireEvent4Widget(_self, _self.grid,_self.onAfterPaging,[]);	
			                    }
			                    // 增加请求成功回调之后的切入点
			                    doAfterSuccessResponse(dc, view, "_pageQuery");
			                },
			                error: function (xhr) {
			                    // 增加请求失败回调之前的切入点
			                    if (doBeforeFailedResponse(dc, view, "_pageQuery")) {
//			                        _exceptionProcess(xhr);
			                    	var view = _self.processor.view;
			        				var name = _self.processor.name;
			        				var pars = _self.processor.parameters;
			        				var length = pars.length;
			        				var parNameString = '';
			        				var parNames = [];
			        				for(var p in pars){
			        					pars[p] = pars[p]===''?"":unieap.fromJson(pars[p]);
			        				}
			        				if(length >0){
			        					for(var i=0; i < length ; i++ ){
			        						parNames[i] = "pars["+i+"]";
			        					}
			        					parNameString = parNames.join(",");
			        				}
			        				var processorString = "" + view + ".processor." + name + "(" + parNameString+");";
			        				eval(processorString);
			                    }
			                    // 增加请求成功回调之后的切入点
			                    doAfterFailedResponse(dc, view, "_pageQuery");
			                }
			            }, dc);
			        }
			// 调用自定义Action End
			}else{
				//存在processor的信息，自动发processor请求。
				var view = this.processor.view;
				var name = this.processor.name;
				var paras = this.processor.parameters;;
				var length = paras.length;
				var parNameString = '';
				var parNames = [];
				//如果paras  不是 string 再走转json程序 防止出现错误  2018-11-13  LD
				try{
					if(typeof paras[0] == 'string'){
						for(var p in paras){
							paras[p] = paras[p]===''?"":unieap.fromJson(paras[p]);
						}
					};
					}catch(e){
						
					}
					
				
				if(length >0){
					for(var i=0; i < length ; i++ ){
						parNames[i] = "paras["+i+"]";
					}
					parNameString = parNames.join(",");
				}
				var rpcString = "var rpc = function(store, load) {"
								+ view+ ".processor."+ name + "._pageNumber = store.getPageNumber();"
								+ view+ ".processor."+ name + "._pageSize = store.getPageSize();"
								+ "var dc = " + view+ ".processor."+ name + "("+parNameString+");if(dc){load(dataCenter,dc);}}";
				//rpcString 增加load方法 让他走回调，否则不渲染数据  2018-11-13  LD	
				eval(rpcString);
				rpc(_store,callback,this.grid,'paging');
			}
		}else{
			unieap.Action.doQuery(_store,dojo.mixin({
				load: function(ds,dc){
					callback(ds,dc);
				},
				sync:false
			},indata));
		}
		
	},
	
	/**
	 * @summary:
	 * 		返回当前页码
	 * @return：
	 * 		{number}
	 */
	getPageNumber:	function(){
		var	store=this.grid.getBinding().store;
		if(store){
			return store.getPageNumber()
		}else{
			return 1;
		}
	},
	
	/**
	 * @summary:
	 * 		得到总的页数。
	 * @description:
	 * 		由totalCount/pageSize计算得来。
	 * @return：
	 * 		{number}
	 */
	getTotalPage:	function(){
		var	store=this.grid.getBinding().store;
		if(store){
			var totalCount=store.getRecordCount();
			var pageSize=store.getPageSize();
			return Math.ceil(totalCount/pageSize);
		}else{
			return 1;
		}
	},
	
	/**
	 * @summary:
	 * 		翻到第一页
	 * @param
	 * 		{object|null} pageInfo 翻页信息
	 * @example
	 * |	var manager=grid.getManager('PagingManager');
	 * |	var pageInfo={
	 * |		url:'test',
	 * |		parameters:{user:'chen',password:'s'}
	 * |	}
	 * |	manager.firstPage(pageInfo);
	 * 		翻到第一页,使用特定的翻页信息,没有参数时使用默认的翻页信息
	 */
	firstPage:	function(pageInfo){
		this.setPageNumber(1,pageInfo);
	},
	
	/**
	 * @summary:
	 * 		翻到上一页
	 * @param
	 * 		{object|null} pageInfo 翻页信息
	 * @example
	 * |	var manager=grid.getManager('PagingManager');
	 * |	var pageInfo={
	 * |		url:'test',
	 * |		parameters:{user:'chen',password:'s'}
	 * |	}
	 * |	manager.prevPage(pageInfo);
	 * 		翻到上一页,使用特定的翻页信息,没有参数时使用默认的翻页信息
	 */
	prevPage: function(pageInfo){
		var no=this.getPageNumber();
		if(no>1){
			this.setPageNumber(no-1,pageInfo);
		}
	},

	/**
	 * @summary:
	 * 		翻到下一页
	 * @param
	 * 		{object|null} pageInfo 翻页信息
	 * @example
	 * |	var manager=grid.getManager('PagingManager');
	 * |	var pageInfo={
	 * |		url:'test',
	 * |		parameters:{user:'chen',password:'s'}
	 * |	}
	 * |	manager.nextPage(pageInfo);
	 * 		翻到下一页,使用特定的翻页信息,没有参数时使用默认的翻页信息
	 */
	nextPage: function(pageInfo){
		var totalPage=this.getTotalPage();
		var no=this.getPageNumber();
		if(no<totalPage){
			this.setPageNumber(no+1,pageInfo);
		}
	},
	
	/**
	 * @summary:
	 * 		翻到最后一页
	 * @param
	 * 		{object|null} pageInfo 翻页信息
	 * @example
	 * |	var manager=grid.getManager('PagingManager');
	 * |	var pageInfo={
	 * |		url:'test',
	 * |		parameters:{user:'chen',password:'s'}
	 * |	}
	 * |	manager.lastPage(pageInfo);
	 * 		翻到最后一页,使用特定的翻页信息,没有参数时使用默认的翻页信息
	 */
	lastPage: function(pageInfo){
		var totalPage=this.getTotalPage();
		this.setPageNumber(totalPage,pageInfo);
	},

	onServerSort: function(){
		this.clearPageData();
	},
	
	//缓存翻页数据	
	cachePageData : function(store){
		var rowset=store.getRowSet(),
			key = String(store.getPageNumber());
		if(rowset.getSelectedCount(unieap.ds.Buffer.PRIMARY)>0||rowset.getSelectedCount(unieap.ds.Buffer.FILTER)>0){
			var primaryData = rowset.getData(unieap.ds.Buffer.PRIMARY),
				filterData=rowset.getData(unieap.ds.Buffer.FILTER),
				data=primaryData.concat(filterData);
			this._pageCache = this._pageCache || {};
			this._pageCache[key] = data;
		}else{
			this._pageCache&&this._pageCache[key]&&(delete this._pageCache[key]);
		}
	},
	
	
	//是否支持客户端翻页
	supportClientPaging: function(){
		return this.clientPaging;
	},
	
	
	
	/**
	 * @summary:
	 * 		获得在设置翻页缓存后,Grid视图中被选中(复选框)的行数据
	 * @return:
	 * 		{array}
	 * @example:
	 * |	var pagingMan=unieap.byId("grid").getManager("PagingManager");
	 * |	var data=pagingMan.getSelectedCachedData();
	 * |	unieap.debug(data);
	 */
	getSelectedCachedData: function(){
		var data=[],_pageCache;
		if(this.pageCache&&this._pageCache){
			_pageCache=this._pageCache;
			for(var key in _pageCache ){
				_pageCache[key]&&this._updateSelectedItems(data,_pageCache[key])
			}
		}
		//获取本页选中的数据,并判断是否在_pageCache中
		var store=this.grid.getBinding().getDataStore(),
			rowset=store.getRowSet(),
			totalData=rowset.getData(unieap.ds.Buffer.PRIMARY).concat(rowset.getData(unieap.ds.Buffer.FILTER));
			pageNumber=String(store.getPageNumber());
		if(this._pageCache&&this._pageCache[pageNumber]){
			return data;
		}
		dojo.forEach(totalData,function(item){
			var row = new unieap.ds.Row(store.getRowSet(),item);
			row.isRowSelected()&&data.push(item);
			//item["_s"]==true&&data.push(item);
		});
		return data;
	},
	
	_updateSelectedItems: function(aArray,rowDatas){
		for(var key in rowDatas ){
			var row = new unieap.ds.Row(this.grid.getBinding().getRowSet(),rowDatas[key]);
			row.isRowSelected()&&aArray.push(rowDatas[key]);
			//rowDatas[key]["_s"]==true&&aArray.push(rowDatas[key]);
		}
	},
	
	
	/**
	 * @summary:
	 * 		清空缓存的翻页数据
	 * @description:
	 * 		设置新的store后,如果不想使用之前的翻页缓存信息。
	 * 		需要调用clearPageData方法。
	 */
	clearPageData : function(){
		this._pageCache = null;
	},
	
     /**
	 * @summary:
	 * 		在Grid翻页前监听的事件，若返回false，将会阻止翻页进行
	 * @param
	 * 		{unieap.ds.DataStore} store 要翻页的store   
	 * @return
	 *    {boolean}  
	 * @example:
	 * |	<div dojoType="unieap.xgrid.Grid" binding="{...}">
	 * |		<header>
	 * |			...
	 * |		</header>
	 * |		<toolbar paging="{parameters:{...},onBeforePaging:beforePage}">
	 * |		</toolbar>
	 * |	</div>
	 * |	function beforePage(store){
	 * |		if(store.getPageNumber()==2){
	 * |			return false;//此时不允许翻至第二页
	 * |		}
	 * |		return true;
	 * |	}
	 */
	onBeforePaging: function(store){
		return true;
	},
	
	 /**
	 * @summary:
	 * 		在Grid翻页后监听的事件
	 * @example:
	 * |	<div dojoType="unieap.xgrid.Grid" binding="{...}">
	 * |		<header>
	 * |			...
	 * |		</header>
	 * |		<toolbar paging="{parameters:{...},onAfterPaging:afterPage}">
	 * |		</toolbar>
	 * |	</div>
	 * |	function afterPage(){
	 * |		alert("翻页完成");
	 * |	}
	 */
	onAfterPaging: function(){
		
	},
	
	setPageCount:function(totalCount){
		this.totalCount = totalCount;
		var info = this.getPageInfo();
		info.totalCount = totalCount;
		var totalPage = info.pageSize==0?0:Math.ceil(info.totalCount / info.pageSize);
		this.asyncPageCountFinish = true;
		var	store=this.grid.getBinding().store;
		store.setRecordCount(totalCount);
		this.grid.toolBar.pageInfoNode.innerHTML = this.grid.toolBar._pageInfoTemplate.replace('{0}', "<span class=\"toolbarNum\">&nbsp;"+info.pageCount+ "&nbsp;</span>").replace('{1}', "<span class=\"toolbarNum\">&nbsp;"+totalCount+ "&nbsp;</span>");
		this.grid.toolBar.totalPageNoNode.innerHTML = "/" + totalPage + RIA_I18N.grid.paging.page;
		 //更新buttons状态
        dojo.forEach(this.grid.toolBar._buttonList, function(node, index){
            var array = ['first', 'prev', 'next', 'last'];
            dojo.addClass(node, 'u-grid-page-' + array[index]);
            dojo.removeClass(node, 'u-grid-page-' + array[index] + '-disabled');
        }, this)
		if (1 == info.pageNumber) {
            dojo.removeClass(this.grid.toolBar._buttonList[0], 'u-grid-page-first');
            dojo.addClass(this.grid.toolBar._buttonList[0], 'u-grid-page-first-disabled');
            dojo.removeClass(this.grid.toolBar._buttonList[1], 'u-grid-page-prev');
            dojo.addClass(this.grid.toolBar._buttonList[1], 'u-grid-page-prev-disabled');
        }
        if (info.pageNumber >= totalPage) {
            dojo.removeClass(this.grid.toolBar._buttonList[2], 'u-grid-page-next');
            dojo.addClass(this.grid.toolBar._buttonList[2], 'u-grid-page-next-disabled');
            dojo.removeClass(this.grid.toolBar._buttonList[3], 'u-grid-page-last');
            dojo.addClass(this.grid.toolBar._buttonList[3], 'u-grid-page-last-disabled');
        }
	}
});
dojo.provide('unieap.xgrid.manager.ExportManager');
dojo.declare("unieap.xgrid.manager.ExportManager", null, {
	/**
	 * @summary:
	 * 		导出控制器
	 * @classDescription：
	 * 		控制Grid的导出功能
	 * @declaredClass:
	 * 		unieap.xgrid.manager.ExportManager
	 * @example:
	 * |var manager=grid.getManager('ExportManager');
	 * |//进行服务端导出
	 * |manager.doServerExport();
	 * |//进行客户端导出
	 * |manager.doClientExport();
	 * |//导出选中记录
	 * |manager.exportSelectedData();
	 * |//手动禁用导出exl和pdf
	 * |manager.enableExport();
	 *  @img:
	 * 		images/grid/export.png
	 */
    ui:{
        tooltipMessage:true,
        doServerExport:true,
        doClientExport:true,
        exportSelectedData:true,
        setInfo:true,
		enableExport:true
    },
	
	/**
	 * @summary:
	 * 		导出所需的url
	 * @description:
	 * 		默认导出url为"/rpc.do?method=doExport"
	 * @type:
	 * 		{string}
	 * @example:
	 * |<div dojoType='unieap.xgrid.Grid' binding="{store:'emp'}">
	 * |	<header>
	 * |		<cell name="attr_name" label="姓名"></cell>
	 * |	</header>
	 * |	<toolbar export="{url:'test.do'}" >
	 * |	</toolbar>
	 * |</div>
	 * 		用户可在toolbar标签上的export定义url
	 * @example:
	 * |var manager=grid.getManager('ExportManager');
	 * |//可以通过setInfo方法改变打印控制器的url
	 * |manager.setInfo({url:'test.do'});
	 */
    url: null,
    
	/**
	 * @summary:
	 * 		导出按钮的提示信息
	 * @description:
	 * 		默认提示信息为空（null）
	 * @type:
	 * 		{string}
	 * @example:
	 * |<div dojoType='unieap.xgrid.Grid' binding="{store:'emp'}">
	 * |	<header>
	 * |		<cell name="attr_name" label="姓名"></cell>
	 * |	</header>
	 * |	<toolbar export="{tooltipMessage:'导出EXCEL'}" >
	 * |	</toolbar>
	 * |</div>
	 *  		
	 */
    tooltipMessage:null,
    
	/**
	 * @summary:
	 * 		导出所需的parameters
	 * @type:
	 * 		{object}
	 * @example:
	 * |<div dojoType='unieap.xgrid.Grid'>
	 * |	<header>
	 * |		<cell name="attr_name" label="姓名"></cell>
	 * |	</header>
	 * |	<toolbar export="{parameters:{info:'我来自基础软件'}}" >
	 * |	</toolbar>
	 * |</div>
	 * 		可在toolbar标签上的export定义parameters
	 * @example:
	 * |var manager=grid.getManager('ExportManager');
	 * |//也可以通过setInfo方法设置打印控制器的parameters
	 * |manager.setInfo({parameters:{info:'我来自基础软件'}});
	 * 		
	 */
    parameters: null,
	
	
	/**
	 * @summary:
	 * 		设置导出选项
	 * @description:
	 * 		传入一个数组，控件会根据传入的数组自动生成下拉菜单。默认会生成"服务端导出"、"客户端导出"以及"导出选中数据"三个菜单项。
	 * @type:
	 * 		{array}
	 * @default:
	 * 		['server','client','checked']
	 * @example:
	 * |<div dojoType="unieap.xgrid.Grid">
	 * |	<header>
	 * |		<cell name="empno" label="编号"></cell>
	 * |	</header>
	 * |	<toolbar export="{options:['server','checked']}"></toolbar>
	 * |</div>
	 */
	options: null,
	
	
	/**
	 * @summary:
	 * 		设置当点击导出下拉按钮(非右侧下拉箭头)时，执行什么操作。默认为服务端导出
	 * @description:
	 * 		Grid控件导出功能会导出显示区、锁定行以及ToolBar上的数据信息，导出的结构可以参考rpc.js中unieap.Action.doExport方法。
	 * 		如果用户想自定义后台实现导出，可以参考com.neusoft.unieap.ria33demo.action.export.ExportPojoAction类的实现
	 * @type:
	 * 		{string}
	 * @enum:
	 * 		{"server"|"client"|"checked"}
	 * @default:
	 * 		"server"
	 * @example:
	 * |<div dojoType="unieap.xgrid.Grid">
	 * |	<header>
	 * |		<cell name="empno" label="编号"></cell>
	 * |	</header>
	 * |	<toolbar export="{defaultType:'client'}"></toolbar>
	 * |</div>
	 */
	defaultType: '',
	
	/**
	 * @summary:
	 * 		设置导出的文件类型
	 * @description:
	 * 		fileType属性为excel、csv或者all。,当display为all时，支持在界面上选择文件类型。
	 * 		
	 * @type:
	 * 		{string}
	 * @enum:
	 * 		{"csv"|"excel"|"all"}
	 * @default:
	 * 		""
	 * @example:
	 * |<div dojoType="unieap.xgrid.Grid">
	 * |	<header>
	 * |		<cell name="empno" label="编号"></cell>
	 * |	</header>
	 * |	<toolbar export="{fileType:'csv'}"></toolbar>
	 * |</div>
	 */
	fileType : '',
	
	/**
	 * @summary:
	 * 		导出配置页面
	 * @description:
	 * 		导出时以xDialog形式弹出pageURL关联的页面。
	 * 		
	 * @type:
	 * 		{string}
	 * @default:
	 * 		"XXXX.jsp"
	 * @example:
	 * |<div dojoType="unieap.xgrid.Grid">
	 * |	<header>
	 * |		<cell name="empno" label="编号"></cell>
	 * |	</header>
	 * |	<toolbar export="{pageURL:'XXXX.jsp'}"></toolbar>
	 * |</div>
	 */
	pageURL : '',
    
    constructor: function(param){
        dojo.mixin(this, param);
    },
	
	/**
	 * @summary:
	 * 		设置导出信息
	 * @param:
	 * 		{object} exportInfo 导出信息
	 * @example:
	 * |var manager=grid.getManager('ExportManager');
	 * |var exportInfo={
	 * |	url:'test',
	 * |	parameters:{user:'chen',password:'s'}
	 * |}
	 * |manager.setInfo(exportInfo);
	 */
	setInfo: function(exportInfo){
		 dojo.mixin(this, exportInfo||{});
	},

	/**
	 * @summary:
	 * 		手动禁用导出exl和pdf
	 * @param:
	 * 		{object} enableExport 导出信息
	 * @example:
	 * |var manager=grid.getManager('ExportManager');
	 * |manager.enableExport(false);
	 */


	enableExport:function(exportType){
		$('#'+this.grid.id).find('.u-grid-export').hide();
		$('#'+this.grid.id).find('.u-grid-print').hide();
		if(this.grid['IndividualManager']){
			$('#'+this.grid.id).find('.hasIndividual').removeClass('hasIndividual');
		}else{
			$('#'+this.grid.id).find('.gird-liebiao').removeClass('isBlock');
		}
	},
	
	
	/**
	 * @summary:
	 * 		服务端导出
	 * @param：
	 * 		{object|null} exportInfo 导出信息
	 * @example:
	 * |//通过ExportManager进行服务端导出操作
	 * |grid.getManager("ExportManager").doServerExport();
	 * @example:
	 * |var exportInfo={url:'exportInfo.do',parameters:'{}'}
	 * |grid.getManager("ExportManager").doServerExport(exportInfo);
	 */
	doServerExport: function(exportInfo,removeHidden){
		var exportData = this._removeHiddenGridData(this.grid.getGridData());
		//U_EAP00029282
		var type = "server";
		var binding = this.grid.getBinding();
		var dsName = binding.getDataStore().getName();
		if(binding._supportClientPaging() && dsName && dsName.indexOf(binding._pagingStoreName)!=-1){ 
			//前台分页的服务端导出
			type = "client";
			exportData.store = binding.getOriginStore();
		}
		if(exportData.store.getRowSet().getRowCount()>0){
			exportInfo=exportInfo||{};
			dojo.mixin(exportInfo,{url:this.url,parameters:this.parameters,type:type});
			dojo.mixin(exportData,exportInfo);
			this.fileType = this.fileType ? this.fileType : unieap.widget.grid.exportFileType;
			if(this.fileType == 'all'){
				this._openExportXDialog(exportData);
			}else{
				dojo.mixin(exportData, {
					'exportType' : this.fileType
				});
				unieap.Action.doExport(exportData);
			}
		}else{
		     MessageBox.alert({
//					title : "提示信息", // MODIFY BY TENGYF
					title : RIA_I18N.xgrid['export'].info,
//					message : '无可导出数据，请重新设置查询条件后再导出!'
					message : RIA_I18N.xgrid['export'].noDataByQuery
				});
		}
	},
	
	/**
	 * @summary:
	 * 		客户端端导出
	 * @param：
	 * 		{object|null} exportInfo 导出信息
	 * @example:
	 * |//通过ExportManager进行客户端导出操作
	 * |grid.getManager("ExportManager").doClientExport();
	 * @example:
	 * |var exportInfo={url:'exportInfo.do',parameters:'{}'}
	 * |grid.getManager("ExportManager").doClientExport(exportInfo);
	 */
	doClientExport: function(exportInfo){
		var exportData = this._removeHiddenGridData(this.grid.getGridData());
        var exportType = arguments.length == 2 ? 'PDF': this.fileType;
		if(exportData.store.getRowSet().getRowCount()>0){
			exportInfo=exportInfo||{};
			dojo.mixin(exportInfo,{url:this.url,parameters:this.parameters,type:"client"});
			dojo.mixin(exportData,exportInfo);
			this.fileType = this.fileType ? this.fileType : unieap.widget.grid.exportFileType;
			if(this.fileType == 'all'){
				this._openExportXDialog(exportData);
			}else{
                dojo.mixin(exportData, {
                    'exportType' : exportType
                });
				var pagingManage = this.grid.PagingManager;
				exportData.viewName = pagingManage.processor ? pagingManage.processor.view : null;
				exportData.processorNam = pagingManage.processor ? pagingManage.processor.name : null;
				exportData.gridId = this.grid.id;
				unieap.Action.doExport(exportData);
			}
		}else{
		     MessageBox.alert({
//					title : "提示信息",
					title : RIA_I18N.xgrid['export'].info,
//					message : '无可导出数据，请重新设置查询条件后再导出!'
					message : RIA_I18N.xgrid['export'].noDataByChoice
				});
		}
	},
	
	
	/**
	 * @summary:
	 * 		导出所有选中的数据
	 * @description:
	 * 		如果用户在toolbar上设置了paging的pageCache为true,则导出缓存的所有选中数据。
	 * @param:
	 * 		{Object} exportInfo
	 * @example:
	 * |//通过ExportManager导出所有选中的数据
	 * |grid.getManager("ExportManager").exportSelectedData();
	 * @example:
	 * |var exportInfo={url:'exportInfo.do'};
	 * |grid.getManager("ExportManager").exportSelectedData(exportInfo);
	 */
	exportSelectedData: function(exportInfo){
		var pagingManager=this.grid["PagingManager"],
			data=pagingManager.getSelectedCachedData();
		var gridData=this._removeHiddenGridData(this.grid.getGridData()),
			store=this.grid.getBinding().getDataStore(),
			dsName=gridData['store'].getName();
		delete gridData['store'];
		exportInfo=exportInfo||{};
		dojo.mixin(exportInfo,{url:this.url,parameters:this.parameters,type:'client'});
//		dojo.mixin(gridData,exportInfo,{
//			store:new unieap.ds.DataStore(dsName,data)
//		});
		if(data.length>0){
			var rowSet = new unieap.ds.RowSet();
			for(var i=0;i<data.length;i++){
				rowSet.insertRow(data[i],i);
			}
			var store = new unieap.ds.DataStore(dsName);
			store.setRowSet(rowSet);
			dojo.mixin(gridData,exportInfo,{type:'client'},{
				store:store
			});
			this.fileType = this.fileType ? this.fileType : unieap.widget.grid.exportFileType;
			if(this.fileType == 'all'){
				this._openExportXDialog(gridData);
			}else{
				dojo.mixin(gridData, {
					'exportType' : this.fileType
				});
				unieap.Action.doExport(gridData);
			}
		}else{
		     MessageBox.alert({
//					title : "提示信息",
					title : RIA_I18N.xgrid['export'].info,
//					message : '无可导出数据，请先选择数据再导出!'
					message : RIA_I18N.xgrid['export'].noDataByChoice
				});
			}
	},
	
	// 弹出导出设置对话框
	_openExportXDialog: function(exportData){
		var _this = this;
		exportData["_this"] = this;
		var dialog = new unieap.xdialog.Dialog({
			url: unieap.WEB_APP_NAME + (this.pageURL ? this.pageURL : unieap.widget.grid.exportPageURL),
			title:RIA_I18N.xgrid['export'].exportSetting,
			height:"180",
			width:"563"
		});
		dialog.dialogData = exportData;
		dialog.show();
	},
	
	//获得选中的记录，包括primary和filter缓冲区中的数据
	_getSelectedData: function(store){
		var data=[],rowset=store.getRowSet(),
			totalData=rowset.getData(unieap.ds.Buffer.PRIMARY).concat(rowset.getData(unieap.ds.Buffer.FILTER));
		dojo.forEach(totalData,function(item){
			var row = new unieap.ds.Row(rowset,item);
			//item["_s"]==true&&data.push(item);
			row.isRowSelected()&&data.push(item);
		});
		return data;
	},
	
	_removeHiddenGridData:function(exportData){
		var structures = exportData['layout'];
		dojo.forEach(structures,function(structure){
			if(!structure.type){
				var index = 0;
				while(structure[0][index]){
					var cell = structure[0][index];
					cell.hidden?structure[0].splice(index,1):index++;
				}
			}
		});
		return exportData;
	}
	
	
});

dojo.provide('unieap.xgrid.menu.lockcell');
dojo.require("unieap.xgrid.manager.Manager");
dojo.require('unieap.menu.Menu');
dojo.declare("unieap.xgrid.menu.lockcell", unieap.xgrid.manager.Manager, {
	
	//记录弹出菜单的列节点
	cellNode: null,
	
	lockItem: null,
	
	unlockItem: null,
	
	create: function(params){
		this.initMenuItems();
		this.subscribe("itemStatus",this,"menuItemStatus");
	  },
	
	//初始化注入菜单的菜单项
	initMenuItems:function(){
		var self=this;
		this.lockItem =new unieap.menu.MenuItem({
        	'label': RIA_I18N.xgrid.menu.lockColumn,
			'onClick':	function(){
				self.doLockCell(self.cellNode);
			},
			'iconClass':'u-xgird-menu-lockcell'
 		});	
 		this.unlockItem =new unieap.menu.MenuItem({
        	'label': RIA_I18N.xgrid.menu.unlockColumn,
			'onClick': function(){
				self.doUnlockCell(self.cellNode);
			},
			'iconClass':'u-xgird-menu-unlockcell'
 		});	
	    this.publish("injectMenuItem",[[this.lockItem,this.unlockItem]]);
	},
	//根据列节点在锁定还是非锁定视图，发布菜单项的禁用状态
	menuItemStatus: function(node){
		this.cellNode = node;
		var views = this.grid.getManager("ViewManager").views;
		var viewNum = views.length;
		var lockCellNum = this.getLockCellNo();
		
		var unlockNum = 0;
		for(var i=0; i<views[viewNum-1].cells.length;i++){
			if(!views[viewNum-1].cells[i].hidden){
				unlockNum++;
			}
		}
		
		var pubLockItem = [];
		var pubUnlockItem = [];
		pubLockItem.menuItem = this.lockItem;
		pubUnlockItem.menuItem = this.unlockItem;
		if(dojo.attr(node,"idx")< lockCellNum){
			pubLockItem.flag = true;
			pubUnlockItem.flag = false;
		} else {
			if(1 == unlockNum){
				pubLockItem.flag = true;
				pubUnlockItem.flag = true;
			} else {
				pubLockItem.flag = false;
				pubUnlockItem.flag = true;
			}
		}
		this.publish("setItemStatus",[pubLockItem]);
		this.publish("setItemStatus",[pubUnlockItem]);
	},
	
	//锁定指定的列
	doLockCell: function(domNode){
		var layoutManager = this.grid.getManager("LayoutManager");
		var structure = layoutManager.structure;
		var lockCellNum = this.getLockCellNo();
		if(!domNode || domNode.index < lockCellNum){
			return;
		}
		//当没有锁定列时，为structure创建一个锁定列
		if(0 == lockCellNum){
			var newStructure = [];
			newStructure.noscroll = true;
			newStructure.rows = [];
			newStructure.rows[0] = [];
			structure.splice(structure.length-1,0,newStructure);
		}
		
		var removeCellNum = (dojo.attr(domNode,"idx")||domNode.index)-lockCellNum;
		var movedNode = structure[structure.length-1].rows[0][removeCellNum];
		structure[structure.length-1].rows[0].splice(removeCellNum,1);
		
		if(structure[0].type=="unieap.xgrid.RowView"){
			structure.shift();
		}
		if(this.grid.rowEdit){
			this.grid.notifyEdit = 1;
		}
		structure[structure.length-2].rows[0].push(movedNode);
		layoutManager.setStructure(structure);
		
		var viewManager = this.grid.getManager("ViewManager");
		var beginIndex = this._computeBeginIndex()
		var snapshot = viewManager.getScrollView().snapshot;
		snapshot.beginCellIndex = beginIndex;
		snapshot.showCells = this._computeShowCells(beginIndex);
		if(this.grid.rowEdit){
			this.grid.notifyEdit = 2;
		}
		viewManager.refreshPage();
		return true;
	},

	//解锁指定的列
	doUnlockCell: function(domNode){
		var layoutManager = this.grid.getManager("LayoutManager");
		var structure = layoutManager.structure;
		var lockCellNum = this.getLockCellNo();
		if(!domNode || domNode.index >= lockCellNum){
			return;
		}
		var removeCellNum = dojo.attr(domNode,"idx") || domNode.index;
		var movedNode;
		for(var i = 0 ; i<structure.length; ++i){
			if(structure[i].noscroll){
				movedNode = structure[i].rows[0][removeCellNum];
				structure[i].rows[0].splice(removeCellNum,1);
				//锁定列只有一列，解锁后，structure销毁锁定列
				if(0 == this.getLockCellNo()){
					structure.splice(i,1);
				}
			}
		}
		("unieap.xgrid.RowView" == structure[0].type)&& structure.shift();
		structure[structure.length-1].rows[0].push(movedNode);
		if(this.grid.rowEdit){
			this.grid.notifyEdit = 1;
		}
		layoutManager.setStructure(structure);
		var viewManager = this.grid.getManager("ViewManager");
		var beginIndex = this._computeBeginIndex()
		var snapshot = viewManager.getScrollView().snapshot;
		snapshot.beginCellIndex = beginIndex;
		snapshot.showCells = this._computeShowCells(beginIndex);
		if(this.grid.rowEdit){
			this.grid.notifyEdit = 2;
		}
		viewManager.refreshPage();
		return true;
	},
	
	_computeBeginIndex: function(){
		var beginIndex = 0;
		var viewManager = this.grid.getManager("ViewManager");
		var cells = viewManager.views[viewManager.views.length-1].structure.rows[0];
		for(var i =0; i<cells.length; i++){
			if(!cells[i].hidden){
				beginIndex = i;
				return beginIndex;
			}
		}
		return beginIndex;
	},
	
	_computeShowCells: function(beginIndex){
		var showcells = 0, width=0;
		var viewManager = this.grid.getManager("ViewManager");
		var cells = viewManager.views[viewManager.views.length-1].structure.rows[0];
		for(var i =beginIndex; i<cells.length; i++){
			if(!cells[i].hidden){
				width += cells[i].getRealWidth();
				showcells++;
				if(width > viewManager.views[viewManager.views.length-1].snapshot.viewContentWidth){
					return showcells;
				}
			}
		}
		return showcells;
	},
	
	getLockCellNo: function(){
		var structure = this.grid.getManager("LayoutManager").structure;
		var lockCellNum = 0;
		for(var i = 0 ; i<structure.length; ++i){
			if(structure[i].noscroll && !structure[i].isRowBar){
				lockCellNum = structure[i].rows[0].length;
			}
		}
		return lockCellNum;
	}
});
dojo.provide('unieap.xgrid.menu.showcell');
dojo.require("unieap.xgrid.manager.Manager");
dojo.require('unieap.menu.Menu');
dojo.declare("unieap.xgrid.menu.showcell", unieap.xgrid.manager.Manager, {
	
	//记录LayoutManager中每一列
	menuItems: [],
	//记录弹出菜单的每个菜单项
	children: [],
	//弹出菜单项，它的popup是menu
	showItem: null,
	//当非锁定列只有一项在视图中显示时，这一项将被禁用，disableItem记录这一项的序号
	disableItem: -1,
	
	create: function(params){
		this.children = [];
		this.menuItems = [];
		this.showItem = null;
		this.initMenuItem();
		this.subscribe("structureChanged",this,"updateMenuItem");
		this.subscribe("headerNameChanged",this,"updateMenuItem");

	  },
	
	//初始化注入菜单的菜单项
	initMenuItem:function(){
		var layoutManager = this.grid.getManager("LayoutManager");
		var self = this;
		dojo.forEach(layoutManager.structure,function(structure){
			if(!structure.type){
				dojo.forEach(structure.rows[0],function(cell){
					self.menuItems.push(cell)
				});
			}
		});
		
		var lockCellNum = -1;
		dojo.forEach(layoutManager.structure,function(structure){
			if(structure.noscroll && !structure.isRowBar){
				lockCellNum = structure.rows[0].length;
			}
		});
		
		var menu = new unieap.menu.Menu();
		var menuItemNo = this.menuItems.length;
		for(var i=0; i<menuItemNo;i++){

			if(i == lockCellNum){
                menu.addChild(new unieap.menu.MenuSeparator());
			}
            if(i < lockCellNum){ //如果是锁定的 增加islock的class
                self.children[i] = new unieap.menu.MenuItem({
                    'label': self.menuItems[i].label,
                    'onClick':	function(name,e){
                        return self.doMenuClick(e);
                    },
                    'iconClass': 'u-xgird-menu-unchecked',
					'lockClass':'isLock'
                })
            }else{
                self.children[i] = new unieap.menu.MenuItem({
                    'label': self.menuItems[i].label,
                    'onClick':	function(name,e){
                        return self.doMenuClick(e);
                    },
                    'iconClass': 'u-xgird-menu-unchecked',
                    'lockClass':'unLock'
                })
			}

	 		if(!self.menuItems[i].hidden){
	 			dojo.addClass(self.children[i].iconNode,'u-xgird-menu-checked');
	 		}
			menu.addChild(self.children[i]);
		}
		
		this.showItem =new unieap.menu.PopupMenuItem({
        	'label': RIA_I18N.xgrid.menu.columns,
        	'iconClass':'u-xgird-menu-columns',
        	popup: menu
 		});	
 		this.checkColumnsHidden();
	    this.publish("injectMenuItem",[[this.showItem]]);
	},
	//菜单项结构改变时，更新菜单项
	updateMenuItem: function(){
		this.publish("reinjectMenuItem",[[this.showItem]]);
		this.showItem.popup.destroy();
		this.showItem.destroy();
		this.menuItems = [];
		this.initMenuItem();
	},
	//处理点击菜单项的事件
	doMenuClick: function(e){
		var targetItem = e.target.parentNode;
		if(targetItem.tagName != "TR"){
			targetItem = targetItem.parentNode;
		}
		var children = this.children;
		var childNo = children.length;
		for(var i = 0; i<childNo; i++){
			if(targetItem.id == children[i].id){
				var iconNode = children[i].iconNode;
				if(dojo.hasClass(iconNode,"u-xgird-menu-checked")){
					dojo.removeClass(iconNode,"u-xgird-menu-checked");
					this.menuItems[i].hidden = true;
				} else {
					dojo.addClass(iconNode,"u-xgird-menu-checked");
					this.menuItems[i].hidden = false;
				}
				break;
			}
		}
		this.checkColumnsHidden();
		var viewManager = this.grid.getManager("ViewManager");
		
		var beginIndex = this._computeBeginIndex()
		var snapshot = viewManager.getScrollView().snapshot;
		snapshot.beginCellIndex = beginIndex;
		snapshot.showCells = this._computeShowCells(beginIndex);
		if(this.grid.rowEdit){
			this.grid.notifyEdit = 2;
		}
		viewManager.refreshPage();
		return false;
	},
	
	_computeBeginIndex: function(){
		var beginIndex = 0;
		var viewManager = this.grid.getManager("ViewManager");
		var cells = viewManager.views[viewManager.views.length-1].structure.rows[0];
		for(var i =0; i<cells.length; i++){
			if(!cells[i].hidden){
				beginIndex = i;
				return beginIndex;
			}
		}
		return beginIndex;
	},
	
	_computeShowCells: function(beginIndex){
		var showcells = 0, width=0;
		var viewManager = this.grid.getManager("ViewManager");
		var cells = viewManager.views[viewManager.views.length-1].structure.rows[0];
		for(var i =beginIndex; i<cells.length; i++){
			if(!cells[i].hidden){
				width += cells[i].getRealWidth();
				showcells++;
				if(width > viewManager.views[viewManager.views.length-1].snapshot.viewContentWidth){
					return showcells;
				}
			}
		}
		return showcells;
	},
	
	checkColumnsHidden: function(){
		var structure = this.grid.getManager("LayoutManager").structure;
		var unlockcells = structure[structure.length-1].rows[0];
		var unlockNum = [];
		if(typeof(unlockcells) !="undefined") {
			for(var i = 0; i<unlockcells.length; i++){
				if(!unlockcells[i].hidden){
					unlockNum.push(i);
				}
			}
			if(1 == unlockNum.length){
				this.disableItem = this.children.length - unlockcells.length + unlockNum[0];
				this.children[this.disableItem].setDisabled(true);
			} else if(this.disableItem >= 0){
				this.children[this.disableItem].setDisabled(false);
				this.disableItem = -1;
			}
		}
	}
});
dojo.provide('unieap.xgrid.manager.Individual');
dojo.require("unieap.xgrid.manager.Manager");

dojo.declare("unieap.xgrid.manager.Individual", unieap.xgrid.manager.Manager, {
	 
	 /**
	 * @declaredClass:
	 * 		unieap.xgrid.manager.Individual
	 * @summary:
	 * 		个性化模块
	 * @description:
	 * 		此模块控制Grid的个性化设置，包括拖动调整列位置、锁定解锁列、显示隐藏列。
	 * 		可以配置在Grid上或toolbar上，分以下3种情况进行说明
	 * 		1.在toolbar上配置个性化时，在toolbar上增加一个下拉菜单，
	 * 			用户可以通过拖动和点击表头上的下拉菜单定制个性化的表格布局，
	 * 			定制好以后，可以点击toolbar上的保存按钮，将表格布局保存到本地的缓存数据，
	 * 			当对表格布局不满意时，可以重新定制表格布局，
	 * 			点击toolbar上的重置按钮，可以将表格还原回本来的样式。	
	 * 		2.在Grid上配置个性化时，表格具有个性化设置的所有功能，但是不能保存和重置设置后的表格布局
	 * 		3.在toolbar和Grid上同时配置个性化，Grid上的individual能够控制toolbar上的按钮是否显示，
	 * 			个性化只实例化toolbar上的功能。
	 * 		要使个性化设置的锁定解锁列、显示隐藏列可用，必须在Grid上配置menu属性
	 * 		个性化功能不支持复杂表头和多标题表格。
	 * @example:
	 * |	<div dojoType="unieap.xgrid.Grid" width="500px" height="250px" style="left: 150px;top:200px;"
	 * |		binding="{store:'empDataStore'}" views="{rowNumber:true}" individual="{isShowToolbar: false}">
	 * |		<fixed>
	 * |			<cell label="员工编号" name="attr_empno" width="100px"></cell>
	 * |		</fixed>
	 * |		<header>
	 * |			<cell width="100px"  name="attr_job" label="职位"></cell>
	 * |			<cell width="100px" name="NAME" label="姓名"></cell>
	 * |			<cell width="100px" name="attr_deptno" label="部门" decoder="{store:'DEPT',valueAttr:'CODEVALUE',displayAttr:'CODENAME'}"></cell>
	 * |			<cell width="100px" name="attr_sal" label="工资" headerStyles="text-align: left;"></cell>
	 * |		</header>
	 * |		<toolbar individual="true"></toolbar>
	 * |	</div>
	 */
	 
	create: function(){
		dojo.require("unieap.xgrid.menu.lockcell");
		this.menulockcell = new unieap.xgrid.menu.lockcell({grid:this.grid});
	
		dojo.require("unieap.xgrid.menu.showcell");
		this.menushowcell = new unieap.xgrid.menu.showcell({grid:this.grid});
		
		this.grid.draggable = true;
	},
	
	buildCustomStore: function() {
		var cs = [];
		var cols = this.grid.getManager("LayoutManager").origin.columns;
		var layoutManager = this.grid.getManager("LayoutManager");
		var strucItems = [];
		dojo.forEach(layoutManager.structure,function(structure){
			if(!structure.type){
				dojo.forEach(structure.rows[0],function(cell){
					var cellWidth = cell.width;
					if(typeof(cellWidth)=="number" && cell.percent
						|| (cell.percent && typeof(cellWidth)=="string" && cellWidth.indexOf("%")==-1)){
						cell.width = cellWidth+"%";
					}
					strucItems.push(cell)
				});
			}
		});
		var sequence = [];
		dojo.forEach(strucItems, function(item,index){
			
			//区分动态表格
			if(strucItems.length != cols.length){
				if(item.name!=''){
					sequence.push(index);
				}
			}else{
				for(var i = 0; i<cols.length; i++){
					if(cols[i].name==item.name ){
						sequence.push(i);
						break;
					}
				}
			}
			
			
		});
		var structure = layoutManager.structure;
		var lockCellNum = 0;
		for(var i = 0 ; i<structure.length; ++i){
			if(structure[i].noscroll && !structure[i].isRowBar){
				lockCellNum = structure[i].rows[0].length;
			}
		}
		
		var islocked = 0;
		var isShow = true;
		for (var i = 0; i < sequence.length; i++) {
			if (i < lockCellNum) {
				islocked = 1;
			} else {
				islocked = 0;
			}
			if(strucItems[i].hidden){
				isShow = false;
			} else {
				isShow = true;
			}
			
			cs.push({lock: islocked, show: isShow, index: sequence[i], 'name': strucItems[i]['name'], width: strucItems[i].width,label:strucItems[i].label,userDynamicHeader:strucItems[i].userDynamicHeader,decoder:strucItems[i].decoder,dataType:strucItems[i].dataType});
		}
		this.cs = cs;
	},
	
	//保存个性化设置到本地的缓存数据
	saveIndividual: function() {
		var APP_NAME_localstore = (top.app.getCurrentMenu&&top.app.getCurrentMenu())||(top.app._store.getState().global.currentMenu);
		this.buildCustomStore();
		// unieap.Action.setIndividual({id:this.grid.getOriId(), data:this.cs});
		var inData = {
            id:this.grid.getOriId(), data:this.cs
		};
        if(unieap.WEB_APP_NAME==null){
            inData.callback && inData.callback();
            return;
        }
        var value=inData['data'];
        if(!inData||!(value instanceof Array)){
            return;
        }
        var obj = window["unieap.individual"];
        if(obj&&(dojo.toJson(obj[inData["id"]])==dojo.toJson(value))){
            return;
        }
        var dc = new unieap.ds.DataCenter();
        dc.setParameter("individual",value);
        //儲存本地
		if(!this.grid.LayoutManager.WEB_PAGE_NAME){
			this.grid.LayoutManager.WEB_PAGE_NAME = APP_NAME_localstore.id;
		}
		//var gridKey= this.grid.LayoutManager.WEB_PAGE_NAME?this.grid.LayoutManager.WEB_PAGE_NAME:APP_NAME_localstore+inData.id;
		var gridKey= APP_NAME_localstore.id;
		window.localStorage.setItem(gridKey+inData.id, JSON.stringify(value));
		//保存翻页
		var pageSize = this.grid.getManager('PagingManager').getPageInfo().pageSize;
		window.localStorage.setItem(gridKey+'pageSize', pageSize);
		
		
		if(this.grid.LayoutManager.initData){

			window.localStorage.setItem(gridKey+inData.id+'init', JSON.stringify(this.grid.LayoutManager.initData));
		}
		MessageBox.alert({
			title:"提示",
			message:"保存成功!"
		});

	},
	//删除个性化信息 MD在修改grid的layout后触发 之前的个性化信息失效
	//callback为提示用户grid构造变更
	deleteIndividual: function() {

		var callBackFunc = function(){
			MessageBox.alert({message:RIA_I18N.xgrid.individual.layoutChanged});
		};
		// unieap.Action.setIndividual({id: this.grid.getOriId(), data: [], callback: callBackFunc});
        window.localStorage.setItem(APP_NAME_localstore.id+this.grid.getOriId(), []);
        callBackFunc();
	},

	
	//reset该Grid的structure；
	//如果初始值有fix，structure需要有两个部分，第一个有noscroll:true；
	//如果初始值没有fix，structure只有一个部分
	_resetStructure: function(isOriginCellFixed,structure){
		var strLength = structure.length;
		if(isOriginCellFixed){//初始化的结构中有锁定列
			if(strLength > 1){
			//已经有fix和非fix结构，初始化
				structure[0].rows[0] = [];
				structure[1].rows[0] = [];
			}else if(structure[0].noscroll==undefined){
			//只有非fix结构，需要unshift一个fix结构
				var fixedObject = {noscroll:true,rows:[]};
				fixedObject.rows.push([]);
				structure.unshift(fixedObject);
				structure[1].rows[0] = [];
			}else{
			//只有fix结构（极少见），需要push一个非fix结构
				var unfixedObject = {rows:[]};
				unfixedObject.rows.push([]);
				structure.push(unfixedObject);
				structure[0].rows[0] = [];
			}
		}else{//初始化的结构中没有锁定列
			if(strLength > 1){
			//已经有fix和非fix结构,shift掉fix结构并初始化
				structure.shift();
				structure[0].rows[0] = [];
			}else if(structure[0].noscroll==undefined){
			//只有非fix结构，直接初始化
				structure[0].rows[0] = [];
			}else{
			//只有fix结构（极少见），shift掉fix结构并push一个非fix结构
				structure.shift();
				var unfixedObject = {rows:[]};
				unfixedObject.rows.push([]);
				structure.push(unfixedObject);
			}				
		}
		return structure;
	},
	
	//重置个性化设置  
	resetIndividual: function() {
		// unieap.Action.setIndividual({id:this.grid.getOriId(), data:[]}); 设置本地存储该xgrid个性化为空
		var initArr; //localStorage 初始化记录
		var APP_NAME_localstore= (top.app.getCurrentMenu&&top.app.getCurrentMenu())||(top.app._store.getState().global.currentMenu);
		if(unieap.WEB_APP_NAME==null) return null;
		if( window.localStorage.getItem(APP_NAME_localstore.id+'pageSize')){
			window.localStorage.setItem(APP_NAME_localstore.id+'pageSize',[]);
			this.grid.toolBar._setPageSize(window.localStorage.getItem(APP_NAME_localstore.id+'pageSizeInit'))
			
		}
		var gridLocal = this.grid.LayoutManager.WEB_PAGE_NAME; //grid表格记录了WEB_PAGE_NAME值
		var localKey = APP_NAME_localstore.id;
		if(window.localStorage.getItem(localKey+this.grid.getOriId()+'init') ){ //判斷本地是否有存儲
		    initArr= JSON.parse(window.localStorage.getItem(localKey+this.grid.getOriId()+'init'))
		}else{
			return false;
		}
		var customSetNow=this.grid.LayoutManager.cells;
		for(var i in customSetNow){
			for(var a in initArr){
				if(customSetNow[i].name == initArr[a].name && customSetNow[i].label == initArr[a].label){
					customSetNow[i].indexNew=a;
					customSetNow[i].lock=initArr[a].lock;
					customSetNow[i].show=initArr[a].show;
					customSetNow[i].index=initArr[a].index;
					customSetNow[i].width=initArr[a].width;
					customSetNow[i].hidden = customSetNow[i].show?false:true;
					customSetNow[i].dataType = customSetNow[i].dataType;
					
				}
			}
		}
		function sortNumber(a, b)
		{
		    return a.indexNew - b.indexNew
		}
		
		var customSetNowSort =customSetNow.sort(sortNumber);
        window.localStorage.setItem(APP_NAME_localstore.id+this.grid.getOriId(),[]);
		var origin = this.grid.getManager("LayoutManager").origin;
		
		var structure = this.grid.getManager("LayoutManager").structure;
		if(structure[0].type=="unieap.xgrid.RowView"){
			structure.shift();
		}
		var isOriginCellFixed = origin.fixed > 0 ? true : false;
		structure = this._resetStructure(isOriginCellFixed, structure);
		var cells =customSetNowSort.length>0?customSetNowSort:this.grid.getLayoutManager().cells;
		//判断是否被设置了setHidden  如果设置了setHidden 过滤 不让重置个性化的时候 显示出来
		var setHidden=[];
		if(cells.length){
			for(var k=0;k<cells.length;k++){
				if(cells[k]['setHidden']){
					setHidden.push({name:cells[k].name,type:cells[k]['setHidden']})
				}
				
			}
		}
		if(setHidden.length){
			for(var i=0;i<setHidden.length;i++){
				for(var k=0;k<origin.columns.length;k++){
					if(origin.columns[k].name == setHidden[i].name){
						origin.columns[k].hidden = true
					}
				}
			}
		}
		if(origin.fixed > 0){
			for(var i = 0; i<origin.fixed; i++){
				structure[0].rows[0].push(origin.columns[i]);
			}
		}
		for(var i = origin.fixed; i<customSetNowSort.length; i++){
			structure[structure.length-1].rows[0].push(customSetNowSort[i])
			
		}
		this.grid.getManager("LayoutManager").setStructure(structure);
		//重置完成删除本地缓存的表头
		window.localStorage.setItem(APP_NAME_localstore.id+this.grid.getOriId()+'init',[]);
		

	}
});
dojo.provide('unieap.xgrid.core.toolbar');
dojo.require("dijit._Widget");
dojo.require("dijit._Templated");
dojo.declare('unieap.xgrid.toolbar', [dijit._Widget, dijit._Templated], {
	/**
	 * @summary:
	 * 		Grid的工具条
	 * @declaredClass:
	 * 		unieap.xgrid.core.toolbar
	 * @classDescription：
	 * 		可进行翻页,打印,导出等操作的工具条
	 * @example:
	 * |<div dojoType="unieap.xgrid.Grid" id="grid">
	 * |	<header>
	 * |		<cell label="编号" name="attr_name"></cell>
	 * |		<cell label="职位" name="attr_job"></cell>
	 * |	</header>
	 * |	${1}<toolbar ${2} paging='{}' export='{}'>
	 * |		<button>自定义按钮</button>
	 * |	</toolbar>
	 * |</div>
	 * ${1}Grid中定义toolbar标签,通过grid.getToolBar()得到Grid的toolbar
	 * ${2}print,paging,export,individual分别传递相关信息。
	 * @img:
	 * 		images/grid/toolbar.png	
	 */

	grid: null,

	/**
	 * @summary：
	 * 		翻页相关信息
	 * @description:
	 * 		toolbar默认初始化翻页信息
	 * @type:
	 * 		{object}
	 * @see:
	 * 		unieap.xgrid.manager.PagingManager
	 */
	paging: null,

	/**
	 * @summary:
	 * 		导出相关信息
	 * @description:
	 * 		配置export属性才初始化导出相关的功能
	 * @type:
	 * 		{object}
	 * @example：
	 * |	<toolbar export='{defaultType:"client"}'>
	 * |	</toolbar>
	 * 		export的defaultType信息表示导出方式,可为client server
	 * @see:
	 * 		unieap.xgrid.manager.ExportManager
	 */
	'export': 'client',
	/**
	 * @summary:
	 * 		导出相关信息是否显示
	 * @description:
	 * 		配置页面导出是否显示出来 默认显示 个别页面可以不显示
	 * @type:
	 * 		{boolean}
	 * default:
	 * 		false
	 * @example:
	 * |<div dojoType="unieap.grid.Grid" id="grid">
	 * |	<headr>
	 * |		<cell label="编号" name="attr_name"></cell>
	 * |		<cell label="职位" name="attr_job"></cell>
	 * |	</header>
	 * |	<toolbar export="{enableExport:true}"></toolbar>
	 * |</div>
	 */

	enableExport: true,
	/**
	 * 
	 * @summary:
	 * 		设置分页栏尺寸  默认和缩减版尺寸
	 * @description:
	 * 		该属性会在设置分页栏尺寸  默认和缩减版尺寸，如果是缩减版的分页需要走流程重新渲染
	 * @type:
	 * 		{string}
	 * @value：
	 * 		'default'|'small'
	 * @default:
	 * 		true
	 * @example:
	 * |<div dojoType="unieap.grid.Grid" id="grid">
	 * |	<headr>
	 * |		<cell label="编号" name="attr_name"></cell>
	 * |		<cell label="职位" name="attr_job"></cell>
	 * |	</header>
	 * |	<toolbar paging="{userPageSize:true,pagingType:'small'}"></toolbar>
	 * |</div>
	 * @img:
	 * 		images/grid/grid_toolbar_customPageSize.png
	 * @example:
	 * |<div dojoType="unieap.grid.Grid" id="grid">
	 * |	<headr>
	 * |		<cell label="编号" name="attr_name"></cell>
	 * |		<cell label="职位" name="attr_job"></cell>
	 * |	</header>
	 * |	<toolbar paging="{userPageSize:[100,200,300,400]}" pagingType='small'></toolbar>
	 * |</div>

	 */

	pagingType: 'default',

	/**
	 * @summary:
	 * 		导入相关信息
	 * @description:
	 * 		配置import属性才初始化导出相关的功能
	 * @type:
	 * 		{object}
	 * @example：
	 * |	<toolbar import='{pageURL:"XXX"}'>
	 * |	</toolbar>
	 */
	'import': null,

	_destroyWidgets: null,

	/**
	 * @summary:
	 * 		个性化设置
	 * @description:
	 * 		配置individual属性才初始化个性化相关的功能
	 * @type:
	 * 		{boolean}
	 * @example：
	 * |	<toolbar individual='true'>
	 * |	</toolbar>
	 * @see:
	 * 		unieap.xgrid.manager.Individual
	 */
	individual: null,

	templateString: "<div class='u-grid-master-toolbar' dojoAttachPoint='toolBar'>" +
		//翻页条
		"<div class='u-grid-page left '>" +
		"<table cellPadding='0' cellSpacing='0'><tbody><tr>" +
		"<td><span dojoAttachPoint='firstImageNode' class='ico u-grid-page-first'></span></td>" +
		"<td><span dojoAttachPoint='prevImageNode' class='ico u-grid-page-prev'></span></td>" +
		"<td><span dojoAttachPoint='pageNoStart'></span></td>" +
		"<td><input dojoAttachPoint='pageNoNode' class='u-grid-page-pageNo'></td>" +
		"<td><span dojoAttachPoint='totalPageNoNode'></span></td>" +
		"<td><span dojoAttachPoint='nextImageNode' class='ico u-grid-page-next'></span></td>" +
		"<td><span dojoAttachPoint='lastImageNode' class='ico u-grid-page-last'></span></td>" +
		"<td><div class='sep'></div></td>" +
		"</tr></tbody></table>" +
		"</div>" +

		//导出、打印
		"<div  class='u-grid-page right   gird-liebiao ' dojoAttachPoint='girdLiebiao'>" +
		//  "<i class='iconfont icon-liebiao-'></i>"+
		"<div class='u-gird-senior'>" +
		'<span>高级</span><a href="javascript:void(0);" tabindex="-1" class="u-form-textbox-icon u-a-common u-form-textbox-icon-normal u-form-combobox-icon-normal" dojoattachpoint="iconNode"></a>' +
		'</div>' +
		"<div class='liebiao-div'>" +
		"<table cellPadding='0' cellSpacing='0'><tbody><tr>" +
		//							"<td><span class='u-grid-individual' dojoAttachPoint='individualNode'></span></td>" +
		"<td><div  class='individual-save' dojoAttachPoint='saveNode' ><i class=' iconfont icon-save'></i><span>保存列操作</span></div></td>" +
		"<td><div  class='individual-reset '  dojoAttachPoint='resetNode' ><i class=' iconfont icon-zhongzhi'></i><span>重置列操作</span></div></td>" +
		"<td><div class='u-grid-export' dojoAttachPoint='exportNode'></div></td>" +
		"<td><span class='u-grid-import' dojoAttachPoint='importNode'></span></td>" +
		// "<td><div class='u-grid-print ' dojoAttachPoint='printNode'><i class='iconfont icon-pdfexport'></i><span >导出PDF</span></div></td>" +
		"</tr></tbody></table>" +
		"<i class='triangle-down'></i>" +
		"</div>" +

		"</div>" +

		//动态改变每页显示数据条数
		"<div class='u-grid-page right   '>" +
		"<table cellPadding='0' cellSpacing='0'><tbody><tr>" +
		"<td><span class='u-grid-cpagesize-left' dojoAttachPoint='perPageNode'></span></td>" +
		"<td dojoAttachPoint='customPageSizeNode'></td>" +
		"<td><span class='u-grid-cpagesize-right' dojoAttachPoint='rowsNode'></span></td>" +
		"<td><div class='sep'></div></td>" +
		"</tr></tbody></table>" +
		"</div>" +



		//用户在toolbar上自定义显示
		"<div class='u-grid-page left '>" +
		"<table cellPadding='0' cellSpacing='0'><tbody><tr><td dojoAttachPoint='containerNode' height='100%'>" +
		"</td></tr></tbody></table>" +
		"</div>" +

		//翻页信息显示(本页多少条记录、共多少条记录)
		"<div class='u-grid-page right '>" +
		"<table cellPadding='0' cellSpacing='0'><tbody><tr><td>" +
		"<span dojoAttachPoint='pageInfoNode'></span>" +
		"</td></tr></tbody></table>" +
		"</div>" +
		"<div class='u-xgrid-title-row-operation u-grid-page right isBlock' dojoAttachPoint='rowOperation'>" +
		"<span class='pageTotal'></span>" +
		"</div>" +
		"</div>",

	//本页共{0}条记录  共{1}条记录				
	_pageInfoTemplate: RIA_I18N.grid.paging.template,

	postCreate: function () {
		this.grid.domNode.appendChild(this.domNode);
		
		//国际化翻页条信息
		dojo.attr(this.firstImageNode, 'title', RIA_I18N.grid.paging.firstPage);
		dojo.attr(this.prevImageNode, 'title', RIA_I18N.grid.paging.prevPage);
		dojo.attr(this.nextImageNode, 'title', RIA_I18N.grid.paging.nextPage);
		dojo.attr(this.lastImageNode, 'title', RIA_I18N.grid.paging.lastPage);
		//dojo.attr(this.individualNode,'title',RIA_I18N.grid.toolbar.individual);
		//显示分页数据
		this._configPaging();

		//导入设置
		if (this['import'] && this['import'].enable) {
			this.domNode.childNodes[2].style.display = 'block';
			this.importNode.style.display = 'block';
			this._configImport();
			//            var uniqueCell = this['import'].uniqueCell;
		}
		//动态改变每页显示数据条数
		if (this['_userPageSize'] || this['print']) {
			dojo.addClass(this.domNode.childNodes[2], 'isBlock');
			this.domNode.childNodes[2].style.display = 'block';
		}
		//导出设置
		if (this['enableExport'] && this.grid.class.indexOf('grid_notoolBar_noExport')  == -1) { //enableExport等后台传属性 工具设置属性 默认true
			dojo.addClass(this.girdLiebiao, "isBlock");
			//导出exl部分
			this.domNode.childNodes[2].style.display = 'block';
			this.exportNode.style.display = 'block';
			dojo.attr(this.exportNode, 'title', '全部导出');
			this._configExport();
			var tooltipMessage = this.grid.getManager("ExportManager").tooltipMessage;
			if (tooltipMessage != null && tooltipMessage != '') {
				this.connect(this.domNode.childNodes[2], "onmouseover", this._onExportMouseOver);
				this.connect(this.domNode.childNodes[2], "onmouseout", this._onExportMouseOut);
			}
			//导出PDF部分
			// this.printNode.style.display = 'block';
			this._configPrint();
		}
		var chekcMulTitle = function (id) { //判断是否是多表头 如果是多表头 就不出现保存列操作等
			var LayoutManager = unieap.byId(id).getManager('LayoutManager');
			if (LayoutManager) {
				var structure = LayoutManager.getStructure();
				var rows = structure&&structure[1] && structure[1].rows || false;
				if (structure && structure[1] && structure[1].rows && structure[1].rows.length == 1 && structure[1].rows[0][0]&& structure[1].rows[0][0].hidden) {
					return true
				}
				if ((rows && rows.length > 1) || rows[0].length <= 2) {
					return true
				} else {
					return false
				}
			} else {
				return false
			}
		}
		// console.log
		if ((this['individual'] || this.grid['individual'] || !chekcMulTitle(this.grid.id))&&!(this.grid&&this.grid.domNode&&this.grid.domNode.className.indexOf('xgridNoIndividual')>-1)) {
			dojo.addClass(this.girdLiebiao, "isBlock hasIndividual");
			this.girdLiebiao.style.display = 'block';
			this.domNode.childNodes[2].style.display = 'block';
			this.saveNode.style.display = 'block';
			this.resetNode.style.display = 'block';
			this._configIndividual();
			this.grid.getManager("LayoutManager").setIndividualStructure();
		}
		if (this['individual'] && this['enableExport']) { //如果有导出并且有个性化 增加class
			$(this.domNode.childNodes[1]).addClass('hasIndividual');
		}
		dojo.addClass(this.domNode.childNodes[2], "isBlock");
		// this.domNode.childNodes[2].style.display = 'block';

		this.update();
	},

	/**
	 * @summary:
	 * 		更新toolbar的翻页信息
	 * @description:
	 * 		在数据发生变化时更新翻页相关的信息
	 * @example：
	 * |	grid.getToolBar().update();
	 * 		更新toolbar上的信息
	 */
	update: function (data) {
		this._displayPagingBar && this._updatePagingStatus(null, data);
		var combox = this._comboBox;
		//如果下拉框只有一条数据就清空下拉框的值，否则不清空
		combox && combox.getDataProvider().getItems().length == 1 && combox.setValue('');
		//majz 选择下拉框若有数据，设置下拉框可点状态
		var value = combox ? combox.getValue() : null;
		if (value) {
			dojo.removeClass(combox.fieldNode, "u-form-readOnly");
			dojo.removeClass(combox.inputNode, "u-form-textbox-input-readonly");
			combox.inputNode.readOnly = true;
			combox.setDisabled(false);
		}
	},

	//xgrid导出显示提示信息
	_onExportMouseOver: function () {
		unieap.showTooltip({
			inner: this.grid.getManager("ExportManager").tooltipMessage
		}, this.exportNode);
	},
	//xgrid导出隐藏提示信息
	_onExportMouseOut: function () {
		unieap.showTooltip(this.exportNode);
	},

	//------------------------------------翻页-----------------------------------

	//显示toolbar上的翻页条
	_showPagingBar: function () {
		if (!this._displayPagingBar) {
			this._displayPagingBar = true;
			this._hideOrShowPagingBar("block");
			//如果没有配置过翻页相关设置
			if (!this._haveConfigedPaging) {
				this._configPaging();
				this.update();
			}
			var ds = this.grid.getBinding().getDataStore(); //U_EAP00029537
			if (ds && ds.getRowSet().getRowCount() > 0) {
				this._comboBox && this._comboBox.setDisabled(false);
			}
		}
	},

	//隐藏toolbar上翻页条
	_hidePagingBar: function () {

		if (this._displayPagingBar) {
			this._displayPagingBar = false;
			this._hideOrShowPagingBar("none");
		}
	},

	//	display可选值为"none"或者"block"
	_hideOrShowPagingBar: function (display) {
		var children = this.domNode.childNodes;
		dojo.style(children[0], 'display', display);
		if (this._userPageSize) {
			dojo.style(children[1], 'display', display);
		}
		dojo.style(children[4], 'display', display);
	},

	//配置翻页相关
	_configPaging: function () {
		!this._displayPagingBar && (this._displayPagingBar = this.paging && this.paging['display']);
		//默认显示翻页条,如果用户不配置就为true

		if (this._displayPagingBar == null | this._displayPagingBar == undefined) {
			this._displayPagingBar = true;
		}
		var userPageSize = this.paging && this.paging['userPageSize'];
		//用户如果设置了userPageSize属性（无论是true还是false)，就用用户的设置，否则走系统统一的属性
		this._userPageSize = this.paging && (typeof (userPageSize) != "undefined" ? userPageSize : unieap.widget.grid.userPageSize);

		if (!this.grid['PagingManager']) {
			var params = this.paging || {};
			dojo.require("unieap.xgrid.manager.PagingManager");
			this.grid['PagingManager'] = new unieap.xgrid.manager.PagingManager(dojo.mixin(params, {
				grid: this.grid
			}));
			try {
				this.grid.managers.push("PagingManager");
			} catch (e) {}
		}
		if (!this._displayPagingBar) {
			this._hideOrShowPagingBar("none");
			return;
		}

		this._configUserPageSize();
		//打印
		//this.connect(this.printNode, 'onclick', '_onLastClick');

		//已经完成翻页的相关设置
		this._haveConfigedPaging = true;
		this.connect(this.firstImageNode, 'onclick', '_onFirstClick');
		this.connect(this.prevImageNode, 'onclick', '_onPrevClick');
		this.connect(this.nextImageNode, 'onclick', '_onNextClick');
		this.connect(this.lastImageNode, 'onclick', '_onLastClick');
		this.connect(this.pageNoNode, 'onkeyup', '_onPageNoClick');


		//以下非UI事件 需要使用dojo.connect
		this.connects = [];
		this.connects.push(dojo.connect(this.grid, 'onStoreChanged', this, 'update'));
		this.connects.push(dojo.connect(this.grid, 'onRowSetChanged', this, 'update'));
		this.connects.push(dojo.connect(this.grid, 'onItemChanged', this, 'update'));
		this._buttonList = [this.firstImageNode, this.prevImageNode, this.nextImageNode, this.lastImageNode];
	},

	//更新翻页状态信息
	_updatePagingStatus: function (type, changeType) {
		if (type) {
			this.pagingType = 'small';
		} //page_init的时候设置页面

		var binding = this.grid.getBinding(),
			manager = this.grid['PagingManager'];
		if (manager && manager.asyncPageCount && manager.asyncPageCountFinish) {
			var store = binding.store;
			binding.store.setRecordCount(manager.totalCount);
		}
		var info = manager.getPageInfo(),
			pageSize = info.pageSize,
			totalPage = pageSize == 0 ? 0 : pageSize > 0 ? Math.ceil(info.totalCount / pageSize) : 0;

		//更新buttons状态
		dojo.forEach(this._buttonList, function (node, index) {
			var array = ['first', 'prev', 'next', 'last'];
			dojo.addClass(node, 'u-grid-page-' + array[index]);
			dojo.removeClass(node, 'u-grid-page-' + array[index] + '-disabled');
		}, this)
		if (1 == info.pageNumber) {
			dojo.removeClass(this._buttonList[0], 'u-grid-page-first');
			dojo.addClass(this._buttonList[0], 'u-grid-page-first-disabled');
			dojo.removeClass(this._buttonList[1], 'u-grid-page-prev');
			dojo.addClass(this._buttonList[1], 'u-grid-page-prev-disabled');
		}
		if (info.pageNumber >= totalPage) {
			dojo.removeClass(this._buttonList[2], 'u-grid-page-next');
			dojo.addClass(this._buttonList[2], 'u-grid-page-next-disabled');
			dojo.removeClass(this._buttonList[3], 'u-grid-page-last');
			dojo.addClass(this._buttonList[3], 'u-grid-page-last-disabled');
			totalPage = info.pageNumber;
		}
		if (!(binding._supportClientPaging() && binding.getDataStore().getName().indexOf(this._pagingStoreName) == -1)) {
			info.totalCount += info.totalPageCount - info.initialPageCount;
		}
		if (info.totalCount < 0) {
			info.totalCount = 0;
		}
		//更新信息
		this.pageNoNode.value = info.pageNumber;
		var totalCount = info.totalCount ? info.totalCount : info.pageCount;
		var recordCount = info.totalCount ? info.totalCount : info.pageCount;

		//zhaohf 修改总页数的显示位置
		var me = this;
		var str = this.pagingType == 'small' ? '共{1}条' : '共{1}条记录';
		var ds = this.grid.getBinding().getDataStore();
		var pages = ds.pageSize;
		if (ds.pageSize > 20000000) {
			// pages = 200; 
			// totalCount = 0;
			this._comboBox && this._comboBox.setValue('-1'); //如果pageSize大于200000 表格默认成全部
		}
		//增加表格下方的控件
		//     		$(".u-grid-page.left:first",this.domNode).hide();
		//     		$(".u-grid-page.left:eq(1)",this.domNode).hide();
		$(".u-grid-page.left", this.domNode).hide();
		$(".u-grid-page.right", this.domNode).hide();
		$(".u-grid-page.left:eq(1)", this.domNode).addClass('numShow').show();
		//在foot_toolbar上加上新的分页控件
		var pagebar = $(".u-grid-master-toolbar", this.domNode.parentNode);
		var operation = pagebar.find('.u-xgrid-title-row-operation');
		//判断如果是增加 或者是删除  只更改总数 不重新渲染 底部分页信息
		if (changeType) {
			var newStr = this.pagingType == 'small' ? '共' + info.totalCount + '条' : '共' + info.totalCount + '条记录';
			$('.pageTotal', this.domNode).html(newStr);
			return
		}
		//pagebar.html("");

		pagebar.find('.page').remove();
		var ul = this.pagingType == 'small' ? $('<ul class="page smallPage" ></ul>') : $('<ul class="page " ></ul>');
		operation.before(ul);
		me.pageUl = unieap.createPage({
			ul: ul,
			pagingType: this.pagingType,
			pagelistcount: pages,
			func: function (pagenum) {
				var manager = me.grid['PagingManager'];
				manager.setPageNumber(pagenum);
			}
		});
		var node = $('.pageTotal', '#' + this.grid.id);
		if (manager && manager.asyncPageCount && !manager.asyncPageCountFinish) {
			node.html(str.replace('{1}', 0));
		} else {
			node.html(str.replace('{1}', recordCount));
		}

		//设置显示的页数
		me.pageUl.setPageInfo(totalCount, ds.pageNumber, pages);

		// }else{
		// 	//原系统代码
		// 	if(manager && manager.asyncPageCount && !manager.asyncPageCountFinish){
		//     	this.pageInfoNode.innerHTML = this._pageInfoTemplate.replace('{0}', "<span class=\"toolbarNum\">&nbsp;"+info.pageCount+ "&nbsp;</span>").replace('{1}', "<div class='grid-pagecount-wait-img'></div>");
		//     	this.totalPageNoNode.innerHTML = "/" + "<div class='grid-pagecount-wait-img'></div>" + RIA_I18N.grid.paging.page;
		//     }
		//     else{	
		//     	this.pageInfoNode.innerHTML = this._pageInfoTemplate.replace('{0}', "<span class=\"toolbarNum\">&nbsp;"+info.pageCount + "&nbsp;</span>").replace('{1}', "<span class=\"toolbarNum\">&nbsp;"+totalCount + "&nbsp;</span>");
		//     	this.totalPageNoNode.innerHTML = "/" + totalPage + RIA_I18N.grid.paging.page;
		//     }
		// }
		// }

		//RIA_I18N.grid.paging.pagePrefix的值，中文为"第"，英文为"Page"
		this.pageNoStart.innerHTML = RIA_I18N.grid.paging.pagePrefix;
		//RIA_I18N.grid.paging.page的值，中文为"页"，英文为""
		if (totalPage > 999) {
			var totalPageNoNodeWidth = dojo.style(this.totalPageNoNode, 'width');
			if (totalPageNoNodeWidth > 10) totalPageNoNodeWidth -= 10;
			//一个字符7px，/，5px；
			if (totalPageNoNodeWidth < 23) totalPageNoNodeWidth = (totalPage + "").length * 7 + 5;
			dojo.style(this.pageNoNode, "width", totalPageNoNodeWidth);
		}
	},

	//第一页
	_onFirstClick: function () {
		if (this.grid['PagingManager'].getPageNumber() > 1) {
			this.grid['PagingManager'].firstPage();
		}
	},
	//上一页
	_onPrevClick: function () {
		if (this.grid['PagingManager'].getPageNumber() > 1) {
			this.grid['PagingManager'].prevPage();
		}
	},
	//下一页
	_onNextClick: function () {
		var manager = this.grid['PagingManager'];
		if (manager.getPageNumber() < manager.getTotalPage()) {
			manager.nextPage();
		}
	},

	//最后一页
	_onLastClick: function () {
		var manager = this.grid['PagingManager'];
		if (manager.getPageNumber() < manager.getTotalPage()) {
			manager.lastPage();
		}
	},

	_onPageNoClick: function (e) {
		var manager = this.grid['PagingManager'];
		if (e.keyCode == dojo.keys.ENTER) {
			var n = this.pageNoNode.value;
			n = n.replace(/[^0-9]/g, '');
			n = Number(n);
			if (n > manager.getTotalPage()) {
				n = manager.getTotalPage();
			} else {
				n = Math.max(n, 1);
			}
			if (n > 0 && n <= manager.getTotalPage() && n != manager.getPageNumber()) {
				manager.setPageNumber(n);
			}
		}
	},


	destroy: function () {
		if (this.connects) {
			while (this.connects.length) {
				dojo.disconnect(this.connects.pop());
			}
		}
		this.inherited(arguments);
		this._destroyWidgets && this._destroyWidgets.length > 0 &&
			dojo.forEach(this._destroyWidgets, function (w) {
				w && w.destroy && w.destroy();
			});
	},

	getHeight: function () {
		var height = dojo.style(this.domNode, "height");
		return height;
	},

	//-------------------------自定义每页显示的数据条数--------------------------------

	_configUserPageSize: function () {
		//只有当翻页条显示时才显示
		if (this._userPageSize && this._displayPagingBar) {
			dojo.style(this.domNode.childNodes[1], 'display', 'block');
			this._userPageSize = JSON.parse(this._userPageSize);
			this._userPageSize = dojo.isArray(this._userPageSize) ? this._userPageSize : unieap.defaultPageSize; //默认取消全部 如果需要加上 加-1即可
			var defaultValue,
				size = this.grid.getManager('PagingManager').getPageInfo().pageSize;
			if (dojo.indexOf(this._userPageSize, size) > -1) {
				defaultValue = size;
			}
			this._createComboBox(this._userPageSize, defaultValue);
		}
	},


	//构建下拉框
	_createComboBox: function (options, defaultValue) {
		if (!dojo.isArray(options)) return;
		dojo.require("unieap.form.ComboBox");
		this._comboBox && this._comboBox.destroy();
		dojo.empty(this.customPageSizeNode);
		var html = [],
			_temp;
		if (options.length > 0) {
			var maxValue = options[0];
			for (var i = 1, len = options.length; i < len; i++) {
				if (maxValue < options[i])
					maxValue = options[i];
			}
			var widthValue = (String(maxValue).length * 10 + 33) + "px";
		} else {
			var widthValue = '55px';
		}
		html.push("<select width='" + widthValue + "' dojoType='unieap.form.ComboBox' popup='{displayStyle:\"list\"}' comboShowSelect='false' dataProvider='{staticData:true}'>");
		if (dojo.isArray(options)) {
			var itemName = 'toolbar'
			html.push("<option value=" + itemName + ">" + itemName + "条/页</option>");
		}
		dojo.isArray(options) && dojo.forEach(options, function (item) {
			item == -1 ? (_temp = "全部") : (_temp = item+'条/页');
			html.push("<option value=" + item + ">" + _temp + "</option>");
		});
		html.push("</select>");
		this.customPageSizeNode.innerHTML = html.join('');
		dojo.parser.parse(this.customPageSizeNode);
		this._comboBox = dijit.byNode(this.customPageSizeNode.childNodes[0]);
		defaultValue && this._comboBox.setValue(defaultValue);
		if (!defaultValue) {
			dojo.addClass(this._comboBox.fieldNode, "u-form-readOnly");
			dojo.addClass(this._comboBox.inputNode, "u-form-textbox-input-readonly");
			this._comboBox.inputNode.readOnly = true;
			//2014-10-31 控制下拉分页的状态
			this._comboBox.setDisabled(true);
		}

		// dojo.addClass(this.customPageSizeNode,"isBlock"); //如果有就显示出来.
		this.connect(this._comboBox, "onChange", function () {
			var grid = unieap.byId(this.grid.id); //如果有编辑行 消除编辑行
			var editMgr = grid.getManager("RowEditManager");
			editMgr.apply();
			var value = this._comboBox.getValue();
			if (!value) {
				return;
			}
			this._setPageSize(value);
		});

	},

	getComboBox: function () {
		return this._comboBox;
	},

	//触发onChange事件
	_setPageSize: function (pageSize) { //U_EAP00029401
		var pagingMgr = this.grid.getManager('PagingManager');
		pagingMgr.clearPageData();
		var bindingMgr = this.grid.getBinding();
		var store = bindingMgr.getDataStore();
		store.getRowSet().reset();
		store.setPageSize(parseInt(pageSize));
		pagingMgr.clientPaging && (bindingMgr.originStore.setPageSize(parseInt(pageSize)));

		this.grid.getManager('PagingManager').setPageNumber(1, null, store);
		//majz toolbar中下拉框数据change时，设置下拉框点击状态
		if (pageSize) {
			this._comboBox.inputNode.readOnly = true;
			this._comboBox.setDisabled(false);
		}
	},

	//------------------------------------个性化-----------------------------------

	//配置个性化相关信息
	_configIndividual: function () {
		//toolbar上配置individual后，可以在grid上不配置menu
		if (!this.grid.filter && !this.grid.menu && !this.grid.individual) {
			dojo.require("unieap.xgrid.manager.MenuManager");
			this.grid['MenuManager'] = new unieap.xgrid.manager.MenuManager({
				grid: this.grid
			});
			this.grid.managers.push("MenuManager");
		}
		if(!this.grid['individual']){
			dojo.require("unieap.xgrid.manager.Individual");
			this.grid['IndividualManager'] = new unieap.xgrid.manager.Individual({
				grid: this.grid
			});
			this.grid.managers.push("IndividualManager");
		}
		
		this._createIndividualNode();

	},

	_createIndividualNode: function () {
		// var manager = this.grid.getManager("IndividualManager");
		// if (!manager) {
		// 	return;
		// }
		//        dojo.require('unieap.menu.Menu');
		//        dojo.require('unieap.form.DropDownButton');
		//        var individualNode = this.individualNode, menu, button;
		//        menu = new unieap.menu.Menu();
		//		//设置
		//        menu.addChild(new unieap.menu.MenuItem({
		//            label: RIA_I18N.xgrid.individual.save,
		//            iconClass: "individual",
		//            onClick: dojo.hitch(manager, "saveIndividual")
		//        }));
		//		//重置
		//        menu.addChild(new unieap.menu.MenuItem({
		//            label: RIA_I18N.xgrid.individual.reset,
		//            iconClass: "individual-reset",
		//            onClick: dojo.hitch(manager, "resetIndividual")
		//        }));
		//		//个性化
		//        button = new unieap.form.DropDownButton({
		//            title: RIA_I18N.grid.toolbar.individual,
		//            dropDown: menu,
		//			width:'100px',
		//			iconClass:'default-individual',
		//            onClick: dojo.hitch(manager, "saveIndividual")
		//        }).placeAt(individualNode);
		//		if (!this._destroyWidgets) {
		//			this._destroyWidgets = [];
		//		}
		//		this._destroyWidgets.push(menu);
		//		this._destroyWidgets.push(button);
		//		$(individualNode).find('.default-individual').html('个性化');
		this.connect(this.saveNode, "onclick", "_saveIndividual");
		this.connect(this.resetNode, "onclick", "_resetIndividual");

	},
	/*保存*/
	_saveIndividual: function () {
		this.grid.getManager("IndividualManager").saveIndividual();
	},
	_resetIndividual: function () {
		this.grid.getManager("IndividualManager").resetIndividual();
	},
	_configImport: function () {
		this._createImportNode();
		if (!this.grid['ImportManager']) {
			var importParams = this['import'] || {};
			dojo.require("unieap.xgrid.manager.ImportManager");
			this.grid['ImportManager'] = new unieap.xgrid.manager.ImportManager(dojo.mixin(importParams, {
				grid: this.grid
			}));
			this.grid.managers.push("ImportManager");
		}
	},
	_createImportNode: function () {
		dojo.require('unieap.form.Button');
		var importButton = new unieap.form.Button({
			id: this.grid.id + "_unieapGridImportButton",
			iconClass: 'u-grid-import-button'
		}).placeAt(this.importNode);
		dojo.style(importButton.btnNode, "padding", "0px");
		this.connect(importButton, "onClick", this.doImportOnClick);
	},

	//------------------------------------导出-----------------------------------

	//配置导出相关信息
	_configExport: function () {
		this._createExportNode();
		if (!this.grid['ExportManager']) {
			// var exportParams = this['export'] || {};
			var exportParams = {
				fileType: "excel",
				defaultType: "client"
			}; //2019-2-27 修改默认client导出  导出exl  并且默认显示出来
			dojo.require("unieap.xgrid.manager.ExportManager");
			this.grid['ExportManager'] = new unieap.xgrid.manager.ExportManager(dojo.mixin(exportParams, {
				grid: this.grid
			}));
			this.grid.managers.push("ExportManager");
		}
	},

	_createExportNode: function () {
		dojo.require('unieap.menu.Menu');
		dojo.require('unieap.form.DropDownButton');
		var exportNode = this.exportNode,
			menu, ddbutton,
			options = this['export']['options'] || ['server', 'client', 'checked'],
			type = this['export']['defaultType'] || 'server',
			menu = new unieap.menu.Menu();

		options && dojo.isArray(options) && dojo.forEach(options, function (option) {
			// if (option=='server') {
			// 	menu.addChild(new unieap.menu.MenuItem({
			// 		//服务端导出
			// 		label: RIA_I18N.grid['export'].serverExport,
			// 		iconClass: "export-s ",
			// 		onClick: dojo.hitch(this, this.doServerExport)
			// 	}));
			// } else if(option=='client') {
			//    menu.addChild(new unieap.menu.MenuItem({
			//         //客户端导出
			//        label: RIA_I18N.grid['export'].clientExport,
			//        iconClass: "export-c",
			//        onClick: dojo.hitch(this, this.doClientExport)
			//    }));
			// } else if(option=='checked') {
			// 	menu.addChild(new unieap.menu.MenuItem({
			// 	    //导出选中记录
			// 		label: RIA_I18N.grid['export'].selectedExport,
			// 		iconClass: 'export-checked',
			// 		onClick: dojo.hitch(this, this.exportSelectedData)
			// 	}));
			// }
			//暂时只做服务端到处  只改成服务端导出  LD

			menu.addChild(new unieap.menu.MenuItem({
				//服务端导出
				label: RIA_I18N.grid['export'].serverExport,
				iconClass: "export-s",
				onClick: dojo.hitch(this, this.doServerExport)
			}));
		}, this);
		ddbutton = new unieap.form.DropDownButton({
			id: this.grid.id + "_unieapGridExportButton",
			dropDown: menu,
			width: '100px'
		}).placeAt(exportNode);
		ddbutton.setIconClass('default-export-c iconfont icon-daochu');
		this.connect(ddbutton, 'onClick', 'doClientExport');
		//        if (type == 'client') {
		//            ddbutton.setIconClass('default-export-c');
		//			this.connect(ddbutton,'onClick','doClientExport');
		//        } else if(type=='checked') {
		//			ddbutton.setIconClass('default-export-checked');
		//			this.connect(ddbutton,'onClick','exportSelectedData');
		//        }else if(type=='server') {
		//			ddbutton.setIconClass('default-export-s');
		//			this.connect(ddbutton,'onClick','doServerExport');
		//		}
		if (!this._destroyWidgets) {
			this._destroyWidgets = [];
		}
		this._destroyWidgets.push(menu);
		this._destroyWidgets.push(ddbutton);
		$(exportNode).find('.u-form-btn-txt').html('导出&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;');

	},

	doImportOnClick: function () {
		this.grid['ImportManager']._openImportXDialog();
	},

	doServerExport: function () {
		this.grid['ExportManager'].doServerExport();
	},

	doClientExport: function () {
		this.grid['ExportManager'].doClientExport();
	},

	exportSelectedData: function () {
		this.grid['ExportManager'].exportSelectedData();
	},

	//------------------------------------打印-----------------------------------
	_configPrint: function () {
		// this.connect(this.printNode, 'onclick', 'doPrint');
	},
	doPrint: function () {
		// this.grid.managers.get('PrintManager').doPrint();
		//打印 改导出pdf格式  改走导出的格式
		this.grid['ExportManager'].doClientExport(null, 'pdf');
	}


});


unieap.createPage = function (config) {

	var page = function (config) {

		$.extend(this, {
			maxshowpageitem: 7, //最多显示的页码个数
			pagelistcount: 5, //每一页显示的内容条数
			initWithUl: initWithUl,
			setPageListCount: setPageListCount,
			initPageEvent: initPageEvent,
			getPageListModel: getPageListModel,
			setPageInfo: setPageInfo,
			pagingType: config.pagingType,
			getSmallListModel: getSmallListModel
		});

		$.extend(this, config);

		/**
		 * 初始化分页界面
		 * @param listCount 列表总量
		 */
		function initWithUl(listCount, currentPage) {
			this.ul.html('')
			var pageCount = 1;
			if (listCount >= 0 && (this.pagelistcount < 20000)) {
				var pageCount = listCount % this.pagelistcount > 0 ?
					parseInt(listCount / this.pagelistcount) + 1 :
					parseInt(listCount / this.pagelistcount);
			} else {
				pageCount = currentPage = 1
			}
			var appendStr = this.pagingType == 'small' ? this.getSmallListModel(pageCount, currentPage) : this.getPageListModel(pageCount, currentPage);
			this.ul.html(appendStr);
		}
		/**
		 * 设置列表总量和当前页码
		 * @param listCount 列表总量
		 * @param currentPage 当前页码
		 */
		function setPageListCount(listCount, currentPage) {
			var me = this;
			me.rowsNumber = listCount = parseInt(listCount);
			currentPage = parseInt(currentPage);
			me.initWithUl(listCount, currentPage);
			me.initPageEvent(listCount);
		}

		function initPageEvent(listCount) {
			var me = this;
			$(".pageItem", this.ul).on("click", function () {
				var currentPage = parseInt($(this).attr("page-data"));
				// me.setPageListCount(listCount,currentPage); //因为界面是全刷新的，所以这行没用上
				me.func(currentPage);
			});
			$(".direct .pageInput", this.ul).on("keyup", function (e) {
				var key = e.which; //e.which是按键的值 
				if (key == 13) {
					if (me.rowsNumber != 0) {
						var currentPage = parseInt(this.value);
						var rowcount = parseInt(me.rowsNumber / me.pagelistcount);
						if (currentPage > rowcount) {
							if (me.rowsNumber % me.pagelistcount > 0) {
								currentPage = rowcount + 1;
							} else {
								currentPage = rowcount;
							}
						}
						if (currentPage < 1) {
							currentPage = 1;
						}
						me.func(currentPage);
					} else {
						return;
					}
				}
			});
		}

		function getPageListModel(pageCount, currentPage) {

			var prePage = currentPage - 1;
			var nextPage = currentPage + 1;
			var prePageClass = "pageItem";
			var nextPageClass = "pageItem";
			if (prePage <= 0) {
				prePageClass = "pageItemDisable";
			}
			if (nextPage > pageCount) {
				nextPageClass = "pageItemDisable";
			}
			var appendStr = "";
			//	        appendStr+="<li class='"+prePageClass+" fistImgNode' page-data='1' page-rel='firstpage'></li>";
			appendStr += "<li class='" + prePageClass + " prevImgNode iconfont icon-left' page-data='" + prePage + "' page-rel='prepage'></li>";
			var miniPageNumber = 1;
			if (currentPage - parseInt(this.maxshowpageitem / 2) > 0 && currentPage + parseInt(this.maxshowpageitem / 2) <= pageCount) {
				miniPageNumber = currentPage - parseInt(this.maxshowpageitem / 2);
			} else if (currentPage - parseInt(this.maxshowpageitem / 2) > 0 && currentPage + parseInt(this.maxshowpageitem / 2) > pageCount) {
				miniPageNumber = pageCount - this.maxshowpageitem + 1;
				if (miniPageNumber <= 0) {
					miniPageNumber = 1;
				}
			}
			var showPageNum = parseInt(this.maxshowpageitem);
			if (pageCount < showPageNum) {
				showPageNum = pageCount;
			}
			//appendStr+="<li class='pageItem' page-data='1' page-rel='itempage'>"+1+"</li>";
			for (var i = 0; i < showPageNum; i++) {
				var pageNumber = miniPageNumber++;
				//JiaX 每次翻页都显示第一页和最后一页
				if (i == 0) {
					pageNumber = 1;
				}
				if (i == showPageNum - 1) {
					pageNumber = pageCount;
				}
				var itemPageClass = "pageItem";
				if (pageNumber == currentPage) {
					itemPageClass = "pageItemActive";
				}
				if ((pageCount - currentPage > 5 || currentPage > 3) && showPageNum - 2 == i) {
					appendStr += pageCount - currentPage < 4 ? "<li class='" + itemPageClass + "' page-data='" + pageNumber + "' page-rel='itempage'>" + pageNumber + "</li>" : "<li ><span class='paginationEllipsis'>...</span></li>";
				} else if (currentPage - 3 > 1 && i == showPageNum - 6) {
					appendStr += "<li ><span class='paginationEllipsis'>...</span></li>";
				} else {
					appendStr += "<li class='" + itemPageClass + "' page-data='" + pageNumber + "' page-rel='itempage'>" + pageNumber + "</li>";
				}
			}
			appendStr += "<li class='" + nextPageClass + " nextImgNode iconfont icon-right' page-data='" + nextPage + "' page-rel='nextpage'></li>";
			//	          appendStr+="<li class='"+nextPageClass+" lastImgNode' page-data='"+pageCount+"' page-rel='lastpage'></li>";
			appendStr += "<li class='direct'><span class='pagetxt'>跳至</span><input type='text' class='pageInput' onkeyup=\"value=value.replace(/[^\\d{1,}\\.\\d{1,}|\\d{1,}]/g,'')\" ><span class='pagetxt'>页</span></li>";
			return appendStr;
		}

		function getSmallListModel(pageCount, currentPage) {
			var prePage = currentPage - 1;
			var nextPage = currentPage + 1;
			var prePageClass = "pageItem";
			var nextPageClass = "pageItem";
			if (prePage <= 0) {
				prePageClass = "pageItemDisable";
			}
			if (nextPage > pageCount) {
				nextPageClass = "pageItemDisable";
			}
			var appendStr = "";
			appendStr += "<li class='" + prePageClass + " prevImgNode iconfont icon-left' page-data='" + prePage + "' page-rel='prepage'></li>";
			appendStr += "<li class='direct'><input type='text' class='pageInput' onkeyup=\"value=value.replace(/[^\\d{1,}\\.\\d{1,}|\\d{1,}]/g,'')\" value=" + currentPage + "><span>/</span></li>";
			appendStr += "<li class='nextImgNode " + nextPageClass + "' page-data='" + pageCount + "' page-rel='itempage'>" + pageCount + "</li>";
			appendStr += "<li class='" + nextPageClass + " nextImgNode iconfont icon-right' page-data='" + nextPage + "' page-rel='nextpage'></li>";
			return appendStr
		}

		function setPageInfo(listCount, currentPage, perOfPage) {
			if (listCount < 0) {
				listCount = 0;
			}
			if (currentPage <= 0) {
				currentPage = 1;
			}
			if (this.pagelistcount != perOfPage) {
				this.pagelistcount = perOfPage;
			}
			this.setPageListCount(listCount, currentPage);

		}
	}
	return new page(config);
}
dojo.provide("unieap.xgrid.Grid");
dojo.require("dijit._Templated");
dojo.require("unieap.xgrid.core.lib");
dojo.require("unieap.layout.Container");
if(dojo.isIE){
	//创建未知元素节点，以供dojo.query能够查询到以下声明的dom结点
	dojo.forEach(["header","fixed","row","cell","toolbar"],function(element){
		document.createElement(element);
	});
}
dojo.declare('unieap.xgrid.Grid', [unieap.layout.Container, dijit._Templated], {
	
	/**
	 * @declaredClass:
	 * 		unieap.xgrid.Grid
     * @superClass:
     * 		unieap.layout.Container
	 * @summary:
	 * 		数据表格
	 * @example:
	 * |<div dojoType="unieap.xgrid.Grid" width="500px" height="300px"
	 * |	 binding="{store:'empDataStore'}"
	 * |	 views="{rowNumber:true,orderType:'none'}">
	 * |	 <fixed>
	 * |		<cell label="员工编号" width="150" name="attr_empno"></cell>
	 * |	 </fixed>
	 * |	 <header>
	 * |		<cell width="100px" label="姓名" name="NAME"></cell>
	 * |		<cell width="150px" label="职位" name="attr_job"></cell>
	 * |		<cell width="150px" label="工资" name="attr_sal" headerStyles="text-align: left;"></cell>
	 * |	</header>
	 * |</div>
	 * @img:
	 * 		images/grid/grid_overview.png
	 */
	 
	//配置属性接口
	UserInterfaces: dojo.mixin({
		height: "string",
		trigger: "boolean",
		layout: "object",
		views: "object",
		rows: "object",
		selection: "object",
		filter: "object",
		menu: "object",
		individual: "object",
		edit: "object",
		binding: "object",
		lockedRow: "object",
		showLoading:"boolean",
		addHeaders:'object',
		summary:'string', //合计行
		summaryColumn:'string',//合计行的具体参数
	},
	unieap.layout.Container.prototype.UserInterfaces),


		//增加addHeaders方法定义
    addHeaders:function(headerStore) {
		var grid = this;
		var layoutManager = grid.getManager("LayoutManager");
		var structure = layoutManager.structure.length > 1 ? layoutManager.structure[1] : layoutManager.structure[0];

		var userMaxDept = 0;
		if(layoutManager.structure.length >2){ //如果structure大于2个 会丢失一些列
			structure.rows = [];
			structure.rows[0] = layoutManager.cells;
			
		}
		var oldArr = structure.rows[0];
		var addStructure= oldArr.concat(headerStore.getRowSet().primary);
		
		grid.LayoutManager['addStructure'] = addStructure;

		function clearUserDynamicHeader(){
			
			for(var i=0;i<structure.rows.length;){
				var row = structure.rows[i];
				for(var j=0;j<row.length;){
					var col = row[j];
					if(col.userDynamicHeader == true){
						row.splice(j,1);
					}else{
						col.rowSpan = 1;
						j++;
					}
				}
				if(row.length == 0){
					structure.rows.splice(i,1);
				}else{
					i++;
				}
			}
			
			dojo.forEach(structure.rows,function(row){
				dojo.forEach(row,function(col){
					if(col.userDynamicHeader){
						col = null;
					}
				});
			});
			
		}
		
		
		function setUserMaxDept(headers,dept){
			if(dept == 1){
				userMaxDept = structure.rows.length;
			}
			if(dept > userMaxDept){
				userMaxDept = dept;
			}
			dojo.forEach(headers,function(header){
				if(dojo.isArray(header.childs) && header.childs.length > 0){
					setUserMaxDept(header.childs,dept+1);
				}
			});
		}

		function setOldColRowSpan(){
			var addRowSpan = userMaxDept - structure.rows.length + 1;
			if(addRowSpan > 1){
				dojo.forEach(structure.rows,function(row,rowIndex){
					dojo.forEach(row,function(col){
						if(col.isMulTitle != true){
							col.rowSpan = userMaxDept - rowIndex;
						}
					});
				});
			}
		}

		function addGridHeader(headers,dept,parentRowSpan){
			dojo.forEach(headers,function(header){
				if(structure.rows[parentRowSpan] == null){
					structure.rows[parentRowSpan] = [];
				}
				var nowRowsSpan = header.rowSpan;
				
				structure.rows[parentRowSpan].push(header);
				if(dojo.isArray(header.childs) && header.childs.length > 0){
					header.isMulTitle = true;

					var _parentRowSpan = parentRowSpan + nowRowsSpan;
					
					addGridHeader(header.childs,dept+1,_parentRowSpan);
				}else{
					header.rowSpan = userMaxDept - parentRowSpan;
					if(header.editor){
						var editorId = header.editor.editorProps.id;
						dijit.registry.remove(editorId);
					}
				}
			});
		}
		var newPrimary=[];
		var newSequence = []; 
		//填充origin
		function fillGridOrigin(grid,addColumnsArr){
			if(grid.managers&&grid.managers.managers&&grid.managers.managers.LayoutManager.origin){			
				var _preColumn=grid.managers.managers.LayoutManager.origin.columnsbk||grid.managers.managers.LayoutManager.origin.columns;
				var _preColumn=dojo.clone(_preColumn);			
				if(_preColumn&&_preColumn.length>0){
					for(var z=0;z<_preColumn.length;z++){
						if(_preColumn[z])
							newPrimary.push(_preColumn[z]);
							newSequence.push(z); 
					}
				}			
				getGridOriginCells(headerStore.getRowSet().primary);
				getGridOriginCells(headerStore.getRowSet().primary,newSequence.length);
				
				if(!grid.managers.managers.LayoutManager.origin.columnsbk)
					grid.managers.managers.LayoutManager.origin.columnsbk=grid.managers.managers.LayoutManager.origin.columns;
				grid.managers.managers.LayoutManager.origin.columns=newPrimary;
				grid.managers.managers.LayoutManager.origin.sequence=newSequence; //LH 不设置 动态表单列无法动态隐藏显示
				grid.managers.managers.LayoutManager.customStructure.fixed = 0;  //动态添加表头，fixed设置为0；即使在view中设置后，此处也设置为0    
				grid.managers.managers.LayoutManager.customStructure.seq=newSequence; //设置此值，否则在锁定列时不生效
			}			
		}
		
		//填充grid的origin值
		function  getGridOriginCells(cellsArray,newSequenceLength){      
			dojo.forEach(cellsArray,function(currentCell,index){
				if(currentCell){	
					newPrimary.push(dojo.clone(currentCell));
					newSequence.push(index+newSequenceLength);
					if(currentCell.childs&&currentCell.childs.length>0){
						getGridOriginCells(currentCell.childs);
					}
				}
			});
		}
		
		clearUserDynamicHeader();	
		grid.customSetNum = 0;
		fillGridOrigin(grid,headerStore.getRowSet().primary);
		setUserMaxDept(headerStore.getRowSet().primary,1);
		setOldColRowSpan();
		addGridHeader(headerStore.getRowSet().primary,1,0);
		this._replaceEditColText(); //majz 移动到这里，才能正常显示(E)表示
		layoutManager.setStructure([structure]);
		//this._replaceEditColText();
	},
	
	_replaceEditColText:function(){
		var grid = this;
		//majz 打开这段代码  解决：动态表格E标识显示
//		var structure = grid.LayoutManager.structure.length > 1 ? grid.LayoutManager.structure[1] : grid.LayoutManager.structure[0];
		dojo.forEach(grid.LayoutManager.structure,function(structure){
			dojo.forEach(structure.rows,function(row){
				dojo.forEach(row,function(col){
					if(col.editor){
						if(col.label.indexOf('(E)') == -1){
							col.label += '(E)';
						}
						if(col.editor.editorProps.required ){
							// 可编辑表格必填项字段表格title上添加可编辑星号
							if(col.label.indexOf('*') == -1){
								col.label = '<span class="grid-edit-required" style=" color:#ff0000; font-size:14px; position: relative; top: -5px; right: 5px;">*</span>' + col.label
							}
						}
					}
				})
			})
		});
	},
	
	/**
	 * @summary:
	 * 		布局控制器
	 * @type:
	 * 		{object}
	 * @see:
	 * 		unieap.xgrid.manager.LayoutManager
	 */
	layout: null,
	
	/**
	 * @summary:
	 * 		表格高度
	 * @type:
	 * 		{string|number}
	 * @default:
	 * 		'250px'
	 */
	height: '250px',
	
	/**
	 * @summary:
	 * 		表格绑定
	 * @type:
	 * 		{object}
	 * @see:
	 * 		unieap.xgrid.manager.BindingManager
	 * @example:
	 * |<div dojoType="unieap.xgrid.Grid" binding="{store:'empDataStore'}">
	 * |	 ...
	 * |</div>
	 */
	binding: null,
	
	//滚动条的宽度
	scrollerOffset: 16,
	
	/**
	 * @summary:
	 * 		是否监听数据变更
	 * @type:
	 * 		{boolean}
	 * @default:
	 * 		true
	 * @description:
	 * 		是否根据表格绑定的数据的变化，自动刷新表格的显示。
	 * @example:
	 *|<div dojoType="unieap.xgrid.Grid" id="grid" width="80%" height="250px" 
	 *|     binding="{store:'empDataStore'}" views="{rowNumber:true}" trigger="false">
     *| 	...... 
	 *|</div>
	 */
	trigger: true,
	
	//自动注入dataCenter
	Autowired : "dataCenter",
	
	/**
	 * @summary:
	 * 		视图控制器
	 * @type:
	 * 		{object}
	 * @see:
	 * 		unieap.xgrid.manager.ViewManager
	 * @example:
	 * |<div dojoType="unieap.xgrid.Grid" binding="{store:'empDataStore'}" views="{rowNumber:true}">
	 * |	...
	 * |</div>
	 */
	views: null,
	
	/**
	 * @summary:
	 * 		编辑控制器
	 * @type:
	 * 		{object}
	 * @see:
	 * 		unieap.xgrid.manager.RowEditManager
	 * @example:
	 * |<div dojoType="unieap.xgrid.Grid" binding="{store:'empDataStore'}" edit="{onBeforeEdit:fn}">
	 * |	 ...
	 * |</div>
	 */
	edit: null,
	
	/**
	 * @summary:
	 * 		选择控制器
	 * @type:
	 * 		{object}
	 * @see:
	 * 		unieap.xgrid.manager.SelectionManager
	 * @example:
	 * |<div dojoType="unieap.xgrid.Grid" binding="{store:'empDataStore'}" 
	 * |	 selection="{selectType:'single',onBeforeSelect:'myFunction'}">
	 * |	 ...
	 * |</div>
	 */
	selection: null,
	
	/**
	 * @summary:
	 * 		过滤相关信息
	 * @description：
	 * 		是否启用列过滤功能
	 * @type：
	 * 		{object}
	 * @example:
	 * |<div dojoType="unieap.xgrid.Grid" binding="{store:'empDataStore'}" filter="{}"></div>
	 * @example:
	 * |//只在列绑定名为attr_name的列才可以进行数据过滤
	 * |<div dojoType="unieap.xgrid.Grid" filter="{include:['attr_name']}"></div>
	 * @example:
	 * |//除列绑定名为attr_name的列不可过滤外,其他列都可以过滤
	 * |<div dojoType="unieap.xgrid.Grid" filter="{exclude:['attr_name']}"></div>
	 */
	filter: null,
	
	/**
	 * @summary:
	 * 		菜单控制器
	 * @description
	 * 		鼠标移过表头出现menu按钮
	 * @type:
	 * 		{object}
	 * @see：
	 * 		unieap.xgrid.manager.MenuManager
	 * @example:
	 * |<div dojoType="unieap.xgrid.Grid" menu="{onBeforeMenuClick:fn}}"
	 * |	 width="100%" height="350px">
	 * |</div>
	 * |function fn(cell){
	 * |	console.info(cell.label);
	 * |	return true; //一定要有返回true,否则菜单项不会弹出来
	 * |}
	 */
	menu: null,
	/**
	 * @summary:
	 * 		个性化设置，可以控制ToolBar是否显示，
	 * 		当没有ToolBar时，配置这个属性，也可以使用个性化的所有功能
	 * 		要使个性化设置的锁定解锁列、显示隐藏列可用，必须在Grid上配置menu属性
	 * @type:
	 * 		{object}
	 * @see:
	 * 		unieap.xgrid.manager.Individual
	 * @example:
	 * |<div dojoType="unieap.xgrid.Grid" binding="{store:'empDataStore'}" 
	 * |	 individual="{isShowToolbar: false}">
	 * |	 ...
	 * |	<toolbar individual="true"></toolbar>
	 * |</div>
	 * |
	 */
	individual: null,
	
	/**
	 * @summary:
	 * 		行控制器
	 * @type:
	 * 		{object}
	 * @see:
	 * 		unieap.xgrid.manager.RowManager
	 * @example:
	 * |<div dojoType="unieap.xgrid.Grid" binding="{store:'empDataStore'}" rows="{defaultRowHeight:23}">
	 * |	...
	 * |</div>
	 */
	rows: null,
	
	/**
	 * @summary:
	 * 		锁定行相关信息
	 * @description
	 * 		getLockedRow 配置锁定行的自定义信息，配置一个函数，返回在锁定行显示的RowSet数据。
	 * 		statistics 配置锁定行的统计信息，要使用此功能，需要事先将计算好的数据存放在DataStore中
	 * 		DataStore的setStatistics可以向DataStore中添加统计信息。
	 * 		例如：
	 * 		var ds = new unieap.ds.DataStore("test");
	 * 		var statistics = {"attr_sal":{"max":13500,"min":2600},attr_empno: {"min": "001"}};
	 * 		ds.setStatistics(statistics);
	 * @type：
	 * 		{object}
	 * @example：
	 * |<div id="grid" id="grid" dojoType="unieap.xgrid.Grid" 
	 * |	 lockedRow="{getLockedRow:getLockedFun,statistics:[{attr_sal:'max'},{attr_sal:'min'}]}">
	 * |</div>
	 * |function getLockedFun(){
	 * |	return [{
	 * |              NAME: '用户1',
	 * |              attr_empno: 251,
	 * |              attr_job: '职位1',
	 * |              attr_sal: '25555'
	 * |          },{
	 * |              NAME: '用户2',
	 * |              attr_empno: 252,
	 * |              attr_job: '职位2',
	 * |              attr_sal: '25555'
	 * |          }];
	 * |}
	 * @img:
	 * 		images/grid/lockrow.png
	 */
	lockedRow: null,
	/**
	 * @summary:
	 * 		是否增加提示信息“正在加载数据...”
	 * @type:
	 * 		{boolean}
	 * @default:
	 * 		 false
	 * @example:
	 * |<div dojoType="unieap.xgrid.Grid" showLoading="true">
	 * |	...
	 * |</div>
	 */
	showLoading: false,
	
	/**
	 * @summary:
	 * 		表格行详情相关信息
	 * @description：
	 * 		实现每行的详细情况
	 * @type
	 * 		{object}
	 */
	unitedCell:null,
	
	//cell的formatter方法是否已经存在错误，以免重复提示错误信息
	_hasCellFormatterError: false,
	
	//resize时的setTimeout
	_timeout: null,
	
	/**
	 * @summary:
	 * 		是否显示合计行   none  clint  sever
	 * @type:
	 * 		 none  clint  sever
	 * @default:
	 * 		 false
	 * @example:
	 * |<div dojoType="unieap.xgrid.Grid"   summary='server' summaryColumn='cell_tellDate,cell_summary'>
	 * |	...
	 * |</div>
	 */
	
	summary:'none', //合计行
	
	summaryColumn:'null',//合计行的具体参数
	
	templateString: 
		"<div class='u-xgrid'>" +
			"<div class='u-xgrid-headers' dojoAttachPoint='headersNode'>" +
				"<div class='header-corner' dojoAttachPoint='headerCorner'></div>"+
			"</div>" +
			'<div class="u-xgrid-views" dojoAttachPoint="viewsNode">' +
				"<div class='u-xgrid-yscroller' dojoAttachPoint='yscrollerNode'>" +
					"<div dojoAttachPoint='yscrollerTop' class='y-scroller-up'></div>"+
					"<div dojoAttachPoint='yscrollerBottom' class='y-scroller-down'></div>"+
					"<div dojoAttachPoint='yscrollerHandle' class='y-scroller-handle'>" +
						"<div class='y-scroller-handle-top'></div>" + 
						"<div class='y-scroller-handle-middle'></div>" + 
						"<div class='y-scroller-handle-bottom'></div>" + 
					"</div>"+
				"</div>"+
				"<div class='u-xgrid-xscroller' dojoAttachPoint='xscrollerNode'>" +
					"<div dojoAttachPoint='xscrollerTop' class='x-scroller-up'></div>"+
				    "<div dojoAttachPoint='xscrollerBottom' class='x-scroller-down'></div>"+
				    "<div dojoAttachPoint='xscrollerHandle' class='x-scroller-handle'>" +
				    	"<div class='x-scroller-handle-west'></div>" + 
						"<div class='x-scroller-handle-middle'></div>" + 
						"<div class='x-scroller-handle-east'></div>" + 
				    "</div>"+
				"</div>"+
				"<div class='content-corner' dojoAttachPoint='contentCorner'></div>" +
				"<div class='content-loading'  style='display:none' dojoAttachPoint='contentLoading'>" +
				"<div class='content-loading-text' dojoAttachPoint='contentText'></div>" +
				"</div>" +				
			'</div>' +
			"<div class='sum-row'>" +
			"</div>" +
			//如果grid中存在grid-has-total这个class,则显示合计栏
			"<div class='u-xgrid-totals' dojoAttachPoint='totalsNode' style='display:none'>" +
			"</div>" +
			
		'</div>',
		
	postCreate: function() {
		this.inherited(arguments);
		this.initContainer();
		this._createManagers();
		unieap.xgrid.funnelEvents(this.viewsNode, this, "doContentEvent",[ 'mouseover', 'mouseout', 'mousedown', 'click', 'dblclick', 'contextmenu' , 'mouseup']);
		unieap.xgrid.funnelEvents(this.headersNode, this, "doHeaderEvent", [ 'mouseover', 'mouseout', 'mousemove', 'mousedown', 'click', 'dblclick', 'contextmenu']);
		if(this.showLoading){
			this.contentText.innerHTML = RIA_I18N.util.util.loading;
			dojo.style(this.contentLoading,'display','block');
		}
	},
	_createManagers: function() {
		this.managers = [];
		var managers = [
	                ["Layout","unieap.xgrid.manager.LayoutManager","layout"],
	                ["View","unieap.xgrid.manager.ViewManager","views"],
	                ["Row","unieap.xgrid.manager.RowManager","row"]
		      ];
		if(this.menu || this.filter || this.individual){
			managers.push(["Menu","unieap.xgrid.manager.MenuManager","menu"]);
		}
		if(this.filter){
			managers.push(["Filter","unieap.xgrid.manager.FilterManager","filter"]);
		}
		if(this.selection){
			managers.push(["Selection","unieap.xgrid.manager.SelectionManager","selection"]);
		}
		if(this.edit){
			managers.push(["RowEdit","unieap.xgrid.manager.RowEditManager","edit"]);
		}
		for(var i=0,m;m = managers[i];i++){
			dojo.require(m[1]);
			var managerName = m[0].concat("Manager"),
				managerClazz = dojo.getObject(m[1]);
			this[managerName] = new managerClazz(dojo.mixin(this[m[2]],{grid:this}));
			this.managers.push(managerName);
		}
		//初始化核心的manager
		for(var i=0,m;m = managers[i];i++){
			var manager = this[m[0].concat("Manager")];
			manager.startup && manager.startup();
		}
		this._parseFoot();
		this._parseToolBar();
		var toolBarIndividual = this.getToolBar() && this.getToolBar()['individual'];
		if(toolBarIndividual && this.individual){
			if(this.individual.isShowToolbar == false){
				dojo.style(this.getToolBar().individualNode,"display","none");
			} 
		}
		// if(this.individual && !toolBarIndividual){
		if(this.individual){
			dojo.require("unieap.xgrid.manager.Individual");
			this['IndividualManager'] = new unieap.xgrid.manager.Individual({grid:this});
			this.managers.push("IndividualManager");
		}
	},
	
	doContentEvent : function(e){
    	this.getManager("ViewManager").doContentEvent(e);
    },
    doHeaderEvent : function(e){
    	this.getManager("ViewManager").doHeaderEvent(e);
	},
	doTotalEvent : function(e){
		this.getManager("ViewManager").doTotalEvent(e);
	},
    
    _parseFoot: function() {
		if(!this.srcNodeRef){
			return;
		}
		var footNode=this.srcNodeRef.getElementsByTagName('foot');
		if(footNode.length>0){
			footNode=footNode[0];
			if(!dojo.isIE || dojo.isIE>8){
				dojo.style(footNode,{textAlign:'right',display:'block'});
			}else{
				this.footSrcNode=dojo.create('div',{});
				dojo.style(this.footSrcNode,'textAlign','right');
				var cs=footNode.parentNode.childNodes;
				var begin,end;
				for(var i=0;i<cs.length;i++){
					if(cs[i].tagName=='FOOT'){
						begin=true;
						continue;
					}
					if(begin){
						if(cs[i].tagName=='/FOOT'){
							break;
						}	
						this.footSrcNode.appendChild(cs[i]);
						i--;
					}
				}
				footNode =this.footSrcNode;
			}
			dojo.require("unieap.xgrid.core.foot");
			//引用foot
			this.foot=new  unieap.xgrid.foot(this,footNode);
		}
	},
	
	_parseToolBar: function() {
		if(!this.srcNodeRef){
			return;
		}
		if(this.srcNodeRef.getElementsByTagName('toolbar').length == 0 && this.individual){
			this.srcNodeRef.innerHTML = "<toolbar class='userPageToolBar'></toolbar>" + this.srcNodeRef.innerHTML;
		}
		var toolBar=this.srcNodeRef.getElementsByTagName('toolbar');
		if(toolBar.length>0) {
			//引用toolbar
			dojo.require("unieap.xgrid.core.toolbar");
			dojo.attr(toolBar[0],'dojoType','unieap.xgrid.toolbar');
			//实例化一个toolbar对象，传入toolBar domNode节点
			this.toolBar=dojo.parser.instantiate(toolBar,{grid:this})[0];
		}
	},
	
	resizeContainer: function(autoHeight,resizeAgain){  //U_EAP00029242
		if(!this.domNode) return;
		var width = this.domNode.style.width,
			height = this.domNode.style.height;
		if(String(width+height).indexOf("%")<0 && (width != "auto") && (height != "auto")){
			this.ViewManager.resize(parseInt(width,10),parseInt(height,10));
		}
		else{
			width = this.domNode.clientWidth;
//			if(0==(width = this.domNode.clientWidth)) return;
			if(this.height == "auto"){
				if(autoHeight){
					this.ViewManager.resize(width,height,autoHeight);
				}
//				setTimeout(dojo.hitch(this,this._autoHeight),0);
				return;
			}else if(width==0){
				var _self = this;
				clearTimeout(this._timeout);
				if(!resizeAgain){
					this._timeout = setTimeout(function(){
						_self.resizeContainer(null,true);
					},100);		
				}
				return;
			}
			else
				height = this.domNode.clientHeight;
			this.ViewManager.resize(width,height);
		}
	},
	
	_autoHeight:function(){
		var defaultRowHeight = this.getManager("RowManager").defaultRowHeight;
		var defaultHeaderHeight = this.getManager("RowManager").defaultHeaderHeight;
		var toolBarHeight = 0;
		var footHeight = 0;
		var width = this.domNode.offsetWidth+20;
		var height=0;
		if(this.toolBar)
			toolBarHeight = dojo.style(this.toolBar.domNode,"height") +2;
		if(this.foot)
			footHeight = dojo.style(this.foot.footNode,"height") +15;
		height = this.getBinding().getDataStore().getRowSet().getRowCount()*defaultRowHeight + defaultHeaderHeight + toolBarHeight + footHeight + 2;
		this.ViewManager.resize(width,height);
	},
	/**
	 * @summary:
	 * 		校验xGrid中的数据是否合法
	 * @description:
	 * 		如果校验不通过的单元格可以编辑，当errorPrompt参数为true时会自动提示错误信息，并置光标到单元格中
	 * @param:
	 * 		{number} inRowIndex 对某一行的数据进行校验，如果不设置则检验所有单元格
	 * @param:
	 * 		{boolean} errorPrompt 校验不通过后是否自动提示错误信息，如果不设置就为global.js中的unieap.widget.errorPrompt
	 * @return:
	 * 		{boolean} needFocus 当校验不通过时，是否设置光标到出错的单元格，默认为true
	 * @example:
	 * |<script type="text/javascript">
	 * |	var grid=unieap.byId("grid");
	 * |	//只校验第1行,是否提示错误信息依赖于unieap.widget.errorPrompt
	 * |	grid.validate(0); 
	 * |	//校验第一行并提示错误信息
	 * |	grid.validate(0,true);
	 * |	//校验所有的单元格但不提示错误信息
	 * |	grid.validate(false);
	 * |</script>
	 */
	validate:function(inRowIndex,errorPrompt){
		var binding=this.getBinding();
		if(binding){
			return binding.validate.apply(binding,arguments);
		}
		return true;
	},
	destroy: function(){
		var scroller = this.getViewManager().scroller;
		if(scroller){
			scroller.destroy();
		}
		var managers = this.managers;
		for(var i = 0,m; m = managers[i]; i++){
			if(this[m] && this[m].destroy){
				this[m].destroy();
			}
		}
		this.binding&&this.binding.destroy&&this.binding.destroy();
		this.toolBar&&this.toolBar.destroy&&this.toolBar.destroy();
		this.foot&&this.foot.destroy&&this.foot.destroy();
		this.inherited(arguments);
	},
	getSortInfo: function(){
		return this.sortInfo || [];
	},
	setSortInfo: function(inCell){
		this.sortInfo = this.sortInfo || [];
		for(var i=0;i<this.sortInfo.length;i++){
			if(this.sortInfo[i]==inCell){
				this.sortInfo.splice(i,1);
				break;
			}
		}
		this.sortInfo.unshift(inCell);
		this.sortInfo.length>2 && this.sortInfo.pop();
	},
	/**
	 * @summary:
	 * 		取得表格的某个控制器
	 * @param:
	 * 		{string} manager 控制器名字
	 * @return:
	 * 		{unieap.xgrid.manager.*} 表格的某个控制器
	 * @example:
	 * |//取得视图控制器
	 * |var views = grid.getManager("ViewManager");
	 * @example:
	 * |//取得布局控制器	
	 * |var layout = grid.getManager("LayoutManager");
	 */
	getManager: function(manager) {
		return this[manager] ? this[manager] : null;
	},
	/**
	 * @summary:
	 * 		取得视图控制器
	 * @return:
	 * 		{unieap.xgrid.manager.ViewManager}
	 */
	getViewManager: function() {
		return this.getManager("ViewManager");
	},
	
	/**
	 * @summary:
	 * 		取得布局控制器
	 * @return:
	 * 		{unieap.xgrid.manager.LayoutManager}
	 */
	getLayoutManager: function() {
		return this.getManager("LayoutManager");
	},
	/**
	 * @summary:
	 * 		取得行控制器
	 * @return:
	 * 		{unieap.xgrid.manager.RowManager}
	 */
	getRowManager: function() {
		return this.getManager("RowManager");
	},
	
	/**
	 * @summary:
	 * 		取得过滤控制器
	 * @return:
	 * 		{unieap.xgrid.manager.FilterManager}
	 */
	getFilterManager: function() {
		return this.getManager("FilterManager");
	},
	
	/**
	 * @summary:
	 * 		设置表格的数据源
	 * @param:
	 * 		{unieap.ds.DataStore} store
	 */
	setDataStore: function(store) {
		this.getBinding().setDataStore(store);
	},
	/**
	 * @summary：
	 * 		取得toolbar
	 * @example：
	 * |	var toolbar=grid.getToolBar();
	 * |	toolbar.update();
	 * 		取得工具条,进行工具条的更新操作
	 * @return:
	 * 		{unieap.xgrid.toolbar|null}
	 * @see:
	 * 		unieap.xgrid.core.toolbar
	 */
	getToolBar: function(){
		return this.toolBar;
	},
	/**
	 * @summary：
	 * 		取得foot
	 * @example：
	 * |	var foot=grid.getFoot();
	 * 		自定义XGrid的foot区域
	 * @return:
	 * 		{unieap.xgrid.foot|null}
	 * @see:
	 * 		unieap.xgrid.core.foot
	 */
	getFoot: function(){
		return this.foot;
	},
	/**
	 * @summary：
	 * 		取得rowEdit控制器
	 * @example：
	 * |	var rowEdit=grid.getRowEditManager();
	 * @return:
	 * 		{unieap.xgrid.manager.RowEditManager|null}
	 */
	 getRowEditManager: function(){
	 	return this.getManager("RowEditManager");
	 },
	//监听数据变化
	onItemChanged: function(index,name) {
		var cell = this.LayoutManager.getCell(name);
		var viewManager=this.ViewManager;
		viewManager.refreshCell(index,cell);
		viewManager.renderLockedRow(false);
	},
	//grid新增、删除数据时触发
	onRowSetChanged: function() {
		this.ViewManager.refreshPage();
	},
	//grid的datastore发生改变时触发(datastore被重新设置、被替换等)
	onStoreChanged: function() {
		//2014-10-31 控制下拉分页的状态
		var toolBar = this.getToolBar();
		var store = this.binding.getDataStore();
		if(toolBar && toolBar._comboBox){
			if(store == null || store.getRowSet().getRowCount() == 0){
				toolBar._comboBox.setValue(null);
				toolBar._comboBox.setDisabled(true);	
			}else{
				toolBar._comboBox.setDisabled(false);
				(store.getPageSize()) && (toolBar._comboBox.setValue(store.getPageSize()));
			}
		}
		var viewManager = this.getViewManager();
		//this.BindingManager.updateRowData();
		dojo.forEach(viewManager.views,function(view){
    		view.renderHeader();
    	});
    	var selectionManager = this.getManager("SelectionManager");
    	if(selectionManager){
    		selectionManager.refreshCheckState();
    	}
		this.height == "auto"?viewManager.refresh(true):viewManager.refresh();
	},
	//grid排序后触发
	onSorted: function(){
		var viewManager=this.ViewManager;
		dojo.forEach(viewManager.views,function(view){
			!view.isRowBar&&view.renderHeader();
		})
		viewManager.refreshPage();
	},
	/**
	 * @summary:
	 * 		取得表格的绑定
	 * @return:
	 * 		{unieap.xgrid.Binding}
	 */
	getBinding: function() {
		this.BindingManager=unieap.getModuleInstance(this,'binding',"unieap.xgrid.manager.BindingManager");
		this.managers.push("BindingManager");
		return this.BindingManager;
		
	},
	
	/**
	 * @summary:
	 * 		刷新表格，视图重新构建。
	 *	@example:
	 *	|unieap.byId("grid").refresh();
	 */
	refresh: function(){
		this.getManager("ViewManager").structureChanged();
		this.getManager("ViewManager").refresh();
	},
	
	
	/**
	 * @summary
	 * 		取得grid的信息
	 * @description:
	 * 		用于打印导出等功能
	 * @return:
	 * 		{array} 二维数组
	 * @example:
	 * | var layout = gird.getGridData(); 	
	 * |//返回的内容形如如下格式：
	 * |[
	 * |${1}[
	 * |		[
	 * |			{${2}name:"attr_empno",${3}label:"员工编号",${4}width:"80"}
	 * |		]
	 * |	],
	 * |${5}[
	 * |	${6}[
	 * |			{name:"attr_ename",label:"姓名" , ${7}rowSpan:2,width:"150"},
	 * |			{label:"基本信息",${8}colSpan:4,${9}isMulTitle:true}
	 * |		],
	 * |	${10}[
	 * |			{name:"attr_deptno",label:"部门", colSpan:1, width:"150",${11}decoder:{"10":"财务部","20":"开发部"}}, 		
	 * | 			{name:"attr_hiredate",label:"入职日期" , width:"160", ${12}dataFormat:'yyyy-MM-dd'},
	 * | 			{name:"attr_job",label:"职位", width:"150"},
	 * |			{name:"attr_sal",label:"工资", width:"150",dataFormat:'#,###.00'}
	 * |		]
	 * |	]
	 * |]
	 * ${1}锁定列视图部分定义
	 * ${2}列数据绑定字段名称
	 * ${3}列显示的名称
	 * ${4}列在页面上显示的宽度
	 * ${5}非锁定列视图部分定义
	 * ${6}多标题第一行内容定义与（table的row定义一致）
	 * ${7}定义该列占几行，如果不写默认为1
	 * ${8}定义该列占几列，如果不写默认为1
	 * ${9}标明该列是否为多标题列，如果是则没有数据绑定
	 * ${10}多标题第二行内容定义
	 * ${11}转义字典，根据它值可以翻译成显示文本
	 * ${12}格式化定义，根据它显示格式化后的文本
	 * @img:
	 * 		images/grid/grid_multititles.png
	 */
	getGridData: function(){
        var gridData={},
			layoutManager = this.LayoutManager;
        gridData['store'] = this.BindingManager.getDataStore();
		gridData['layout'] = layoutManager.getLayoutInfo();
		gridData['structure'] = layoutManager.getLayoutInfo('export');
		if(layoutManager.addStructure){
			gridData['addStructure'] = layoutManager.addStructure
		}
		//TODO:
		//	如果xgrid支持锁定行、footer，还需要导出锁定行、footer等相关信息
        return gridData;
    },
    
	//事件
	docontextmenu:function(e){
		//U_EAP00028570
		var result = this.ViewManager._doContextMenu(e);
		if(result){
			if(dojo.isIE){
				this.domNode.fireEvent('oncontextmenu');
			}else{
				var evt=document.createEvent('HTMLEvents');
				evt.initEvent("contextmenu", false, false);
				this.domNode.dispatchEvent(evt);
			}
		}
		dojo.stopEvent(e);
	},
	doheaderclick: function(e) {
		this.ViewManager._doHeaderClick(e);
	},
	doheadermousedown: function(e) {
		this.ViewManager._doHeaderMousedown(e);
	},
	doKeyEvent: function(e) {
		e.dispatch = 'do' + e.type;
		this.onKeyEvent(e);
	},
	onKeyEvent: function(e) {
		this._dispatch(e.dispatch, e);
	},
	onHeaderEvent: function(e) {
		e.sourceView.dispatchHeaderEvent(e) || this._dispatch('doheader' + e.type, e);
	},
	onContentEvent: function(e) {
		e.sourceView.dispatchContentEvent(e) || this._dispatch(e.dispatch, e);
	},
	_dispatch: function(m, e) {
		if(m in this) {
			return this[m](e);
		}
	},
	domousedown: function(e) {
		this.ViewManager._onMousedown(e);
	},
	domouseup: function(e){
		this.ViewManager._onMouseup(e);
	},
	doclick: function(e) {
		this.ViewManager._doClick(e);
	},
	dodblclick: function(e) {
		this.ViewManager._doDbClick(e);
	},
	startup: function(){
		this.resizeContainer();
	},
	//用户个性化保存获取grid原始ID
	getOriId:function(){
		if(this._rootID != null){
			var len = this._rootID.length;
			var len2 = this.id.length;
			return this.id.substring(len);
		}
		return this.id;
	}
});
unieap.xgrid.Grid.prototype.setAutoSum = function(columns,sumColumnsStr){
	if(!$(this.BindingManager.view.widget.domNode).hasClass('grid-has-total')){
		$(this.BindingManager.view.widget.domNode).addClass('grid-has-total');//预防迁移的时候不加该class
	}
	this._sumType = 'toolbar';
	this._sumColumns = columns;
	this._sumColumnsStr = sumColumnsStr || '{0}';
}
unieap.xgrid.Grid.prototype.setAutoSumByInner = function(sumTextColumn,columns){
	this._sumType = 'inner';
	this._sumTextColumn = sumTextColumn;
	this._sumColumns = columns;
	this._loadRemoteSumRow();
}

unieap.xgrid.Grid.prototype._loadRemoteSumRow = function(){
	if(this._sumColumns){
		if(
			this.getBinding()
			&& this.getBinding().getDataStore()
			&& this.getBinding().getDataStore().getRowSet()
		){
			// 增加判断是否插入的条件变量
			if(this.getBinding().getDataStore() && this.getBinding().getDataStore().getRowSet().getRows()[0]){
				var isAppend = this.getBinding().getDataStore().getRowSet().getRows()[0].data.IS_SUM_ROW;
			}else{
				return;
			}
			//var isAppend = this.getBinding().getDataStore().getRowSet().getRows()[0].data.IS_SUM_ROW;
			if(this.getBinding().getDataStore().getRowSet().getRowCount() > 0){
				var pageKey = this.getBinding().getDataStore().getParameter("_pageKey");
				if(pageKey){
					var requestInfo = window['requestInfo'];
					requestInfo.data.sync = true;
					requestInfo.data.load = false
					var parameter = '';
					for(var i=0;i<this._sumColumns.length;i++){
						parameter += 'sum("' +this._sumColumns[i]+'")';
						if(i<this._sumColumns.length-1){
							parameter += ','
						}
					}

					requestInfo.dc.setParameter("_rowsumColumns", parameter);
					var data = unieap.Action.requestData(requestInfo.data,requestInfo.dc,false);
		
					// var data = unieap.requestBo({
					// 	dc:'commonDC',
					// 	bo:'PageQuerySumBOImpl',
					// 	method:'querySum',
					// 	params:[pageKey,this._sumColumns.join(',')]
					// });

					var sumRow = data.getSingleDataStore().statistics;
					if(!sumRow){ return }
					if(this._sumType == 'toolbar'){
						var sumColNum =0 ;
						var sumColumnsStr = this._sumColumnsStr;
						$.each(this._sumColumns,function(index,column){
							var sumValue = sumRow[column];
							sumValue = dojo.number.format(sumValue, {pattern: '#,###.00'});
							sumColumnsStr = sumColumnsStr.replace('{'+index+'}',sumValue);
							sumColNum++;
						});
						$('.u-grid-master-toolbar .grid-toolbar-sum',this.domNode).remove();
						if(sumColNum==1){
							$('.u-grid-master-toolbar',this.domNode).append("<div class='grid-toolbar-sum'><label class='grid-toolbar-sum-text'>合计</label><label class='grid-toolbar-sum-label'>¥"+sumColumnsStr+"</label></div>");
						}else{
							$('.u-grid-master-toolbar',this.domNode).append("<div class='grid-toolbar-sum'>"+sumColumnsStr+"</div>");
						}
					}else if(this._sumType == 'inner'){
						//判断是否为true是就不插入合计否则插入。
						if(isAppend != true){
							sumRow.IS_SUM_ROW = true;
							sumRow[this._sumTextColumn] = '合计';
							this.getBinding().getDataStore().getRowSet().insertRow(sumRow, 0);
							this.getManager("SelectionManager").setCheckabled(0, false);
						}
					}
				}
			}else{
				$('.u-grid-master-toolbar .grid-toolbar-sum',this.domNode).remove();
			}
		}
	}
}
/**
 * 数据源Changed
 */
unieap.xgrid.Grid.prototype._onStoreChangedBack = unieap.xgrid.Grid.prototype.onStoreChanged;
unieap.xgrid.Grid.prototype.onStoreChanged = function(){
	var storeChangeBack =  this._onStoreChangedBack();
	this._loadRemoteSumRow();
	//this._autoResize();
	this._addSumRow();
	return storeChangeBack;
}
/**
 * 动态插入数据Changed
 */
unieap.xgrid.Grid.prototype._onRowSetChangedBack = unieap.xgrid.Grid.prototype.onRowSetChanged;
unieap.xgrid.Grid.prototype.onRowSetChanged = function(){
	this._onRowSetChangedBack();
	this._addSumRow();

}
/**
 * 平台默认是小计 如果需要底部合计 可以开发自己算好以后显示给前端
 */
unieap.xgrid.Grid.prototype.SetColSum=function(data){
	this.SetColSumData = data;
	var id = this.id
	for(var i=0;i<data.length;i++){
		if(document.getElementById(id+'_'+data[i].name)&&data[i].value){
			document.getElementById(id+'_'+data[i].name).innerText = data[i].value;
		}
	}
};
unieap.xgrid.Grid.prototype._addSumRow = function(){
	if(!$(this.domNode).is('.add-sum-row')){
		return;
	}
	var grid = this;
	var colHtml = $('.u-xgrid-table:last colgroup',this.domNode).html();
	if($('.locked-splitter .u-xgrid-table colgroup',this.domNode).length > 0){
		colHtml = $('.locked-splitter .u-xgrid-table colgroup',this.domNode).html() + colHtml;
	}
	if(colHtml){
		var tds = "";
		$.each(this.LayoutManager.cells,function(index,cell){
			if(cell.hidden != true){
				var name = cell.name;
				if(tds.length == 0){
					tds += "<td style='text-align:left;' sumTag='"+name+"'><div class='sum-cell'>合计</div></td>";
				}else{
					var cellSumStr = '';
					var headerClass = cell.headerStyles || '';
					if(cell.dataType == 'number' && headerClass.indexOf('off-sum') == -1){
						var rowCount = grid.getManager("BindingManager").getRowCount();
						var sumValue = 0;
						for(var i = 0; i< rowCount;i++){
							var numberValue = 0;
							var value = cell._get(i);
							// 优先把金额数据截取成2位小数
							numberValue = dojo.number.format(value, {pattern: '#.00'});
							// 转换成number类型进行计算
							numberValue = Number(numberValue);
							if(numberValue != null){
								sumValue += numberValue;
							}
						}
						cellSumStr = dojo.number.format(sumValue, {pattern: '#,###.00'});
					}
					tds += "<td style='text-align:right;' sumTag='"+name+"'><div class='sum-cell'>"+cellSumStr+"</div></td>";
				}
			}

		});
		var paddingLeft = 0;
		if(this.views.rowNumber){
			paddingLeft += 30;
		}

		var selectManager = this.getManager('SelectionManager');
		if(selectManager && selectManager.selectType == "multiple" || selectManager.selectType == "single"){
			paddingLeft += 20;
		}
		$('.sum-row',this.domNode).css({
			'width':$('.xgrid-table-layout',this.domNode).width()+'px'
		});
		$('.sum-row',this.domNode).html("");
		$('.sum-row',this.domNode).append("<table height='100%' border='0' cellspacing='0' cellpadding='0' style='padding-left:"+paddingLeft+"px;table-layout:fixed;width:100%;'>"+colHtml+"<tr>"+tds+"</tr></table>");
	}
}

dojo.require("unieap.xgrid.manager.PagingManager");
unieap.gridPageSizeCache = unieap.gridPageSizeCache || {}
if(unieap.xgrid.manager.PagingManager.prototype._setPageNumberBack == null){
	unieap.xgrid.manager.PagingManager.prototype._setPageNumberBack = unieap.xgrid.manager.PagingManager.prototype.setPageNumber;
	
	unieap.xgrid.manager.PagingManager.prototype.setPageNumber = function(no,pageInfo,store){
		this._setPageNumberBack(no,pageInfo,store);
		if(store && store.parameters && store.parameters.processor && store.parameters.processor.name && store.parameters.processor.view){
			var view = store.parameters.processor.view;
			var pName = store.parameters.processor.name;
			var pageSize = store.pageSize;
			unieap.gridPageSizeCache[view + '.' + pName] = pageSize;
		}
	}
}

dojo.provide("unieap.form.Uploader");
dojo.require("unieap.xgrid.Grid");
dojo.require("unieap.progressbar.ProgressBar");
dojo.declare("unieap.form.Uploader", [dijit._Widget, dijit._Templated], {
	
	UserInterfaces : {
		width: "string",
		height: "string",
		path: "string",
		binding: "object",
		columns: "object",
		filters: "object",
		displayButtons: "object",
		uploadURL: "string",
		downloadURL: "string",
		deleteURL: "string",
		upload: "function",
		setFilters: "function",
		setDataStore: "function",
		getDataStore: "function",
		onBeforeUpload: "function",
		onUploadProgress: "function",
		onUploadComplete: "function"
	},
	
	/**
	 * @summary:
	 * 		设置控件的宽度,支持数字或者百分比
	 * @type:
	 * 		{number|string}
	 * @example:
	 * | <div id="id" dojoType="unieap.form.Uploader" width="40px"></div>
	 * @example:
	 * | <div id="id" dojoType="unieap.form.Uploader" width="50%"></div>
	 */
	width: "100%",

	/**
	 * @summary:
	 * 		设置控件的高度,支持数字或者百分比
	 * @type:
	 * 		{number|string}
	 * @example:
	 * | <div id="id" dojoType="unieap.form.Uploader" height="40px"></div>
	 * @example:
	 * | <div id="id" dojoType="unieap.form.Uploader" height="50%"></div>
	 */
	height: "auto",
	
	path: null,
	
	binding: null,
	
	columns: [
				{label: "文件名", name: "name", width: "50%", canSort: false},
				{label: "文件大小", name: "filesize", width: "15%", canSort: false},
				{label: "上传进度", name: "id", width: "35%", canSort: false, formatter: function(value, index) {
					var gridStore = this.grid.getBinding().getDataStore();
					var gridData = gridStore.getRowSet().getRow(index).getData();
					if(gridData["state"] == "complete") {
						return "<div id=\"" + value + "_background\" class=\"progress_background\" style=\"width:100%;\"></div><div id=\"" + value + "\" class=\"progress_value\" style=\"width:100%;\">上传完毕</div>";
					} else if(gridData["state"] == "error") {
						return "<div id=\"" + value + "_background\" class=\"progress_background\" style=\"width:100%;background-color:red;\"></div><div id=\"" + value + "\" class=\"progress_value\" style=\"width:100%;\">上传失败</div>";
					} else if(!gridData["state"]) {
						return "历史上传文件";
					} else {
						return "<div id=\"" + value + "_background\" class=\"progress_background\"></div><div id=\"" + value + "\" class=\"progress_value\"></div>";
					}
				}}
			],
	
	/**
	 * @summary:
	 * 		设置过滤器
	 * @description：
	 * 		mime_types MINE类型  max_file_size 文件最大大小
	 * @type:
	 * 		{object}
	 * @example:
	 * | <div id="id" dojoType="unieap.form.Uploader" filters="{mine_types: [{title: 'Image files', extensions: 'jpg,gif,png'}], max_file_size: '200kb'}"></div>
	 */
	filters: {
		max_file_size: 0
	},
	
	/**
	 * @summary:
	 * 		设置工具栏按钮展现
	 * @description：
	 * 		type 类型：值upload代表上传按钮，值download代表下载按钮，值delete代表删除按钮
	 *      visible 是否可见：值true为不可见，值false为不可见，没有该字段默认可见
	 * @type:
	 * 		{object}
	 * @example:
	 * | <div id="id" dojoType="unieap.form.Uploader" displayButtons="[{type: 'upload', visible: 'false'}]"></div>
	 */
	displayButtons: [],
	
	/**
	 * @summary:
	 * 		上传地址
	 * @type:
	 * 		{string}
	 * @example:
	 * | <div id="id" dojoType="unieap.form.Uploader" uploadURL="upload.action"></div>
	 */
	uploadURL: null,
	
	/**
	 * @summary:
	 * 		下载地址
	 * @type:
	 * 		{string}
	 * @example:
	 * | <div id="id" dojoType="unieap.form.Uploader" downloadURL="download.action"></div>
	 */
	downloadURL: null,
	
	/**
	 * @summary:
	 * 		删除地址
	 * @type:
	 * 		{string}
	 * @example:
	 * | <div id="id" dojoType="unieap.form.Uploader" deleteURL="delete.action"></div>
	 */
	deleteURL: null,
	
	/**
	 * @summary:
	 * 		上传
	 * @example:
	 * |var uploader = unieap.byId('uploader');
	 * |uploader.upload();
	 * 		上传文件
	 */
	upload: function() {
		this._uploader.start();
	},
	
	/**
	 * @summary:
	 * 		设置过滤器
	 * @param:
	 * 		{object} filters 过滤器
	 * @example:
	 * |var uploader = unieap.byId('uploader');
	 * |var filters = {mine_types: [{title: 'Image files', extensions: 'jpg,gif,png'}], max_file_size: '200kb'};
	 * |uploader.setFilters(filters);
	 */
	setFilters: function(filters) {
		this.filters = filters;
		this.setOption("filters", filters);
	},
	
	/**
	 * @summary:
	 * 		设置下载列表的 DataStore
	 * @param:
	 * 		{object} dataStore DataStore
	 * @example:
	 * |var uploader = unieap.byId('uploader');
	 * |var dataStore = new unieap.ds.DataStore("uploader", [{id: "myId", size: 1111111, name: "myFile"}]);
	 * |uploader.setDataStore(dataStore);
	 */
	setDataStore: function(dataStore) {
		if(dataStore) {
			this._grid.getBinding().setDataStore(dataStore);
			
			this._fitGridHeight();
		}
	},
	
	/**
	 * @summary:
	 * 		获取下载列表的 DataStore
	 * @param:
	 * 		{object} dataStore DataStore
	 * @example:
	 * |var uploader = unieap.byId('uploader');
	 * |var dataStore = new unieap.ds.DataStore("uploader", [{id: "myId", size: 1111111, name: "myFile"}]);
	 * |uploader.setDataStore(dataStore);
	 */
	getDataStore: function() {
		// 克隆一份当前 Grid 的 DataStore
		var result = this._grid.getBinding().getDataStore().clone();
		
		// 移除上传失败的数据
		var rowSet = result.getRowSet();
		for(var i = 0; i < rowSet.getRowCount(); i++) {
			var id = rowSet.getItemValue(i, "id");
			if(this._progress[id] == "error") {
				rowSet.deleteRow(i);				
			}
		}
		
		return result;
	},
	
	onBeforeUpload: function(uploader, file) { return true; },
	
	onUploadProgress: function(uploader, file, percent) {},
	
	onUploadComplete: function(uploader, files) {},
	
	_grid: null,
	_toolBar: null,
	_browseButton: null,
	_downloadButton: null,
	_deleteButton: null,
	
	_uploader: null,
	
	_max_file_size: 0,
	
	// 记录上传进度
	_progress: {},
	
	templateString: '<div class="uploader"></div>',
	
	
	postCreate: function() {
		this.inherited(arguments);
		
		var context = this;
		
		this._setWidthAndHeight();

		// 创建 Grid
		var grid = this._getGrid();
		
		// 创建工具栏
		var toolBar = this._getToolBar(grid);
		grid.toolbar = toolBar;
		
		// 添加 Grid
		this.domNode.appendChild(grid.domNode);

		// 绑定事件
		this._bindEvent();
		
		// 初始化路径下所有文件的信息
		// add 2014.11.06 by l_zhen 暂时不需要这个功能
//		setTimeout(function() {
//			context._initPathFiles();
//		}, 1000);
		
		// 是否需要使用 PLUpload 上传？
		if(this._isButtonVisible("upload")) {
			// 延迟初始化 PLUpload
			var initUploader = this._initUploader;
			var bindUploaderEvent = this._bindUploaderEvent;
			setTimeout(function() {
				// 初始化 PLUpload
				initUploader.call(context);
				// 绑定 PLUpload 事件
				bindUploaderEvent.call(context);
				
				// 初始化上传文件最大值
				context._initMaxFileSize();
			}, 1000);
		}
	},
	
	startup: function() {
		this.inherited(arguments);
		
//		this.resize();
	},
	
	resize: function() {
		var context = this;
		setTimeout(function() {
			context._setGridWidthAndHeight();
		}, 1000);
	},
	
	_setWidthAndHeight: function() {
		this.width && dojo.style(this.domNode, "width", isNaN(this.width)?this.width:(this.width+"px"));
		this.height && dojo.style(this.domNode, "height", isNaN(this.height)?this.height:(this.height+"px"));
	},
	
	_setGridWidthAndHeight: function() {
		this._grid.setWidth((this.domNode.offsetWidth - 5) + "px");
		this._grid.setHeight((this.domNode.offsetHeight - 40) + "px");
	},
	
	_fitGridHeight: function() {
		var ds = this._grid.getBinding().getDataStore();
		if(ds) {
			var rs = ds.getRowSet();
			if(rs) {
				var count = rs.getRowCount();
				
				var height = (28 + count * 23) + "px";
				this._grid.setHeight(height);
			}
		}
	},
	
	_getGrid: function() {
		if(!this._grid) {
			var columns = this.columns;
			var header = {rows:[columns]}
			var layout = [header];
			
			var params = {
					id: this.id + "_grid",
					selection: {selectType: "m"},
					views: {rowNumber: true},
					layout: {structure: layout},
					height: "20px"  // 默认高度
			};
			if(this.binding) {
				params = dojo.mixin(params, {binding: this.binding});
			}
			
			this._grid = new unieap.xgrid.Grid(params);
			this._grid.resizeContainer();
		}
		return this._grid;
	},
	
	_getToolBar:function(grid){
		if(!this._toolBar){
			dojo.require("unieap.xgrid.core.toolbar");
			this._toolBar = new unieap.xgrid.toolbar({
				grid:grid
			});
			
			// 隐藏翻页按钮
			dojo.style(this._toolBar.firstImageNode.parentNode.parentNode, {display: "none"});
			
			// 浏览按钮
			this._browseButton = this._createToolBarButton((this.id + "_unieapUploader" + "upload"), "上传");
			this._toolBar.containerNode.appendChild(this._browseButton.domNode);
			if(!this._isButtonVisible("upload")) {
				dojo.style(this._browseButton.domNode, {
					display: "none"
				});
			}
			
			// 下载按钮
			this._downloadButton = this._createToolBarButton((this.id + "_unieapUploader" + "download"), "下载");
			this._toolBar.containerNode.appendChild(this._downloadButton.domNode);
			if(!this._isButtonVisible("download")) {
				dojo.style(this._downloadButton.domNode, {
					display: "none"
				});
			}
			
			// 删除按钮
			this._deleteButton = this._createToolBarButton(((this.id + "_unieapUploader" + "delete")), "删除");
			this._toolBar.containerNode.appendChild(this._deleteButton.domNode);
			if(!this._isButtonVisible("delete")) {
				dojo.style(this._deleteButton.domNode, {
					display: "none"
				});
			}
		}
		return this._toolBar;
	},
	
	_createToolBarButton: function(id, label) {
		var button = null;
		
		dojo.require("unieap.form.Button");
		button = new unieap.form.Button({
			id: id,
			label: label
		});
//		buton = dojo.create('a', {
//			style: "minWidth:50px;width:auto;padding:0 5px;"
//		});
//		dojo.addClass(button, "u-form-file-btn");
//		if(dojo.isFF) {
//			button.text = label;
//		} else {
//			button.innerHTML = label;
//		}
		return button;
	},
	
	_initUploader: function() {
		// 构造 Uploader 选项
		var options = {widget: this};
		options["browse_button"] = this._browseButton.domNode;
		
		if(this.uploadURL) {
			options["url"] = this.uploadURL;
		} else {
			options["url"] = unieap.WEB_APP_NAME + "/techcomp/ria/uploader.action";
		}
		
		// 添加路径
		if(this.path) {
			if(options["url"].indexOf('?') < 0) {
				options["url"] += ("?path=" + this.path);
			} else {
				options["url"] += ("&path=" + this.path);
			}
		}
		
		// 从 URL 获取参数 path 值
		if(this.uploadURL) {
			var path = this._getURLParam(this.uploadURL, "path");
			if(path) {
				this.path = path;
			}
		}
		
		if(this.filters) {
			options["filters"] = this.filters;
		}
		
		options["runtimes"] = "html5,flash,html4";
		
		options["flash_swf_url"] = unieap.WEB_APP_NAME + "/techcomp/ria/unieap/plupload/Moxie.swf";
		
		// 初始化uploader
		this._uploader = new plupload.Uploader(options);
		this._uploader.init();
	},
	
	_bindEvent: function() {
		var context = this;
		
		// 下载按钮是否可见？
		if(this._isButtonVisible("download")) {
			// 如果没有设置下载 URL，默认给一个URL
			if(!this.downloadURL) {
				this.downloadURL = unieap.WEB_APP_NAME + "/techcomp/ria/uploader!download.action";
			}
			// 绑定下载按钮事件
			this._downloadButton.onClick = function(event) {
				// 获取下载URL
				var url = context.downloadURL;
				
				// 添加文件列表参数
				var selectionManager = context._grid.getManager('SelectionManager');
				var rows = selectionManager.getSelectedRows();
				
				if(rows.length == 0) {
					MessageBox.alert(
							{title:"提示信息",message:'请选择需要下载的文件'}
					);
					return;
				}
				
				var fileName = "";
				for(var i= 0; i < rows.length; i++) {
					
					if(rows[i].getData()["state"] == "error") {
						MessageBox.alert(
								{title:"提示信息",message:'无法下载上传失败文件'}
						);
						return;
					}
					
					var name = rows[i].getData()["name"];
					if(i == 0) {
						fileName += name;
					} else {
						fileName += ("," + name);
					}
				}
				
				if(url.lastIndexOf("?") > -1) {
					url += ("&name=" + encodeURIComponent(fileName));
				} else {
					url += ("?name=" + encodeURIComponent(fileName));
				}
				
				// 添加路径
				if(context.path) {
					if(url.indexOf('?') < 0) {
						url += ("?path=" + context.path);
					} else {
						url += ("&path=" + context.path);
					}
				}
				
				// iframe下载文件
				var iframe = dojo.create("iframe", {
					width: "0px", 
					height: "0px"
				});
				iframe.src = url;
				context.domNode.appendChild(iframe);
				
			};
		}
		
		// 删除按钮是否可见？
		if(this._isButtonVisible("delete")) {
			// 如果没有设置删除 URL，默认给一个URL
			if(!this.deleteURL) {
				this.deleteURL = unieap.WEB_APP_NAME + "/techcomp/ria/uploader!delete.action";
			}
			// 绑定删除按钮事件
			this._deleteButton.onClick = function(event) {
				// 获取删除URL
				var url = context.deleteURL;
				
				// 获取删除文件列表
				var selectionManager = context._grid.getManager('SelectionManager');
				var rows = selectionManager.getSelectedRows();
				
				if(rows.length == 0) {
					MessageBox.alert({
						title:"提示信息", 
						message:'请选择需要删除的文件'});
					return;
				}
				
				// 添加参数
				var fileNames = [];
				for(var i= 0; i < rows.length; i++) {
					
					if(rows[i].getData()["state"] == "error") continue;
					
					var name = rows[i].getData()["name"];
					fileNames.push(name);
				}
				
				var params = {name: fileNames};
				if(context.path) {
					params["path"] = context.path;
				}
				
				MessageBox.confirm({
					message: "是否删除选中文件？",
					onComplete: function(returnVal) {
						if(returnVal) {
							// 删除
							unieap.Action.requestData({
								url: url,
								parameters: params,
								timeout:10000,
								load: function(dc, xhr) {
									selectionManager.deleteSelectedRows();
									
									// 删除同名文件
									try {
										var gridRowSet = context._grid.getBinding().getDataStore().getRowSet();
										for(var i = 0; i < gridRowSet.getRowCount(); i++) {
											var filename = gridRowSet.getItemValue(i, "name");
											
											for(var j= 0; j < rows.length; j++) {
												var name = rows[j].getData()["name"];
												
												if(filename == name) {
													gridRowSet.deleteRow(i);
													
													// bug fix 重新遍历 Grid 的 RowSet
													i = -1;
													break;
												}
											}
										}
									} catch (e) {
										// TODO: handle exception
									}
									
									context._refreshUploadState();
									
									MessageBox.autoCloseAlert({
										durationTime:'2000',
										message: "删除文件成功!",
										type: "info"
									});
									
									context._fitGridHeight();
								},
								error: function(responseText, xhr) {
									MessageBox.alert(
											{title:"提示信息",message:'删除文件失败!'}
									);
								}
							});
						}
					},
					iconCloseComplete: true
				});
			};
		}
		
		this._grid.getManager("SelectionManager").onAfterAllSelect = function() {
			context._refreshUploadState();
		}
	},
	
	_refreshUploadState: function() {
		var rowSet = context._grid.getBinding().getDataStore().getRowSet()
		for(var i = 0; i < rowSet.getRowCount(); i++) {
			var id = rowSet.getRow(i).getData()["id"];
			var state = this._progress[id];
			if("complete" == state) {
				var backgroundDiv = getElementById(id + "_background");
				if(backgroundDiv) {
					dojo.style(backgroundDiv, {
						width: "100%"
					});
					var valueDiv = getElementById(id);
					if(dojo.isFF) {
						valueDiv.innerHTML = "上传完毕";
					} else {
						valueDiv.innerText = "上传完毕";
					}
				}
			} else if("error" == state) {
				var backgroundDiv = getElementById(id + "_background");
				if(backgroundDiv) {
					dojo.style(backgroundDiv, {
						width: "100%",
						backgroundColor: "red"
					});
					var valueDiv = getElementById(id);
					if(dojo.isFF) {
						valueDiv.innerHTML = "上传失败";
					} else {
						valueDiv.innerText = "上传失败";
					}
				}
			}
		}
	},
	
	_doseFileExist: function(file) {
		var gridDataStore = this._grid.getBinding().getDataStore();
		
		for(var i = 0; i < gridDataStore.getRowSet().getRowCount(); i++) {
			var name = gridDataStore.getRowSet().getItemValue(i, "name");
			var state = gridDataStore.getRowSet().getItemValue(i, "state");
			
			if(name == file.name && (!state || state == "complete")) {
				return true;
			}
		}
		
		return false;
	},
	
	_bindUploaderEvent: function() {
		if(this._uploader) {
			context = this;
			
			// 绑定添加上传文件事件
			this._uploader.bind('FilesAdded', function(up, files) {
				var widget = up.getOption("widget");
				if(!widget) return;
				
				var repeatCount = 0; // 重复上传的文件名的数量
				
				plupload.each(files, function(file) {
					var data = {
						id: file.id, 
						name: file.name, 
						filesize: plupload.formatSize(file.size), 
//						user: unieap.userAccount, 
//						date: (new Date()).getTime(),
						path: widget.path,
						percent: 0,
						state: "ready"
					};
					
					if(widget._doseFileExist(file)) {
						repeatCount++;
						
						MessageBox.confirm({
							message: "是否重新上传" + file.name + "？",
							onComplete: function(returnVal) {
								if(returnVal) {
									widget._deleteRowWithName(file.name);
									widget._grid.getBinding().insertRow(data);
									
									widget._fitGridHeight();
								} else {
									widget._uploader.removeFile(file);
								}
								
								repeatCount--;
								
								// 处理完全部重复上传文件
								if(repeatCount === 0) {
									widget._refreshUploadState();
									
									if(widget.onBeforeUpload(widget._uploader, files)) {
										widget._uploader.start();
									}
								}
							},
							iconCloseComplete:true
						});
					} else {
						widget._grid.getBinding().insertRow(data);
						
						widget._fitGridHeight();
					}
				});
				
				if(repeatCount === 0) {
					widget._refreshUploadState();
					
					if(widget.onBeforeUpload(widget._uploader, files)) {
						widget._uploader.start();
					}
				}
				
			});
			
			// 绑定上传进度事件
			this._uploader.bind('UploadProgress', function(up, file) {
				var widget = up.getOption("widget");
				if(!widget) return;
				
				var id = file.id;
				
				var backgroundDiv = getElementById(id + "_background");
				if(backgroundDiv) {
					dojo.style(backgroundDiv, {
						width: file.percent + "%"
					});
					var valueDiv = getElementById(id);
					if(dojo.isFF) {
						valueDiv.innerHTML = "正在上传  " + file.percent + "%";
					} else {
						valueDiv.innerText = "正在上传  " + file.percent + "%";
					}
				}
				
				widget.onUploadProgress(widget._uploader, file, file.percent);
			});
			
			// 绑定上传完成事件
			this._uploader.bind('UploadComplete', function(up, files) {
				var widget = up.getOption("widget");
				if(!widget) return;
				
				for(var i = 0; i < files.length;  i++) {
					var id = files[i].id;
					// 排除发生错误的情况
					if(widget._progress[id] != "error") {
						var backgroundDiv = getElementById(id + "_background");
						if(backgroundDiv) {
							dojo.style(backgroundDiv, {
								width: "100%"
							});
							var valueDiv = getElementById(id);
							if(dojo.isFF) {
								valueDiv.innerHTML = "上传完毕";
							} else {
								valueDiv.innerText = "上传完毕";
							}
						}
						
						// 记录
						widget._recordState(id, "complete");
					}
				}
				
				widget.onUploadComplete(widget._uploader, files);
			});
			
			// 绑定上传错误事件
			this._uploader.bind('Error', function(up, err) {
				var widget = up.getOption("widget");
				if(!widget) return;
				
				var id = err.file.id;
				
				if(err.code == -600) {
					MessageBox.alert({
						title: "提示信息",
						message: "上传文件大小超出" + plupload.formatSize(widget._max_file_size) + "最大限制!"
					});
				} else if(err.code == -200) {
					widget._processUploadError(id, "上传错误: 网络连接错误，请检查上传地址是否正确");
				} else if(err.code == -300) {
					widget._processUploadError(id, "上传错误: IO错误，请检查本地文件是否可以正常访问");
				} else if(err.code == -500) {
					widget._processUploadError(id, "上传错误: 初始化错误，请参考文档进行配置");
				} else if(id) {
					widget._processUploadError(id, "上传错误");
				}
				
			});
		}
	},
	
	_processUploadError: function(id, msg) {
		var backgroundDiv = getElementById(id + "_background");
		dojo.style(backgroundDiv, {
			width: "100%",
			backgroundColor: "red"
		});
		var valueDiv = getElementById(id);
		if(dojo.isFF) {
			valueDiv.innerHTML = msg;
		} else {
			valueDiv.innerText = msg;
		}
		
		// 记录
		this._recordState(id, "error");
	},
	
	_recordState: function(id, state) {
		this._progress[id] = state;
		
		var gridStore = this._grid.getBinding().getDataStore();
		if (!gridStore) {
			return;
		}
		for(var i = 0; i < gridStore.getRowSet().getRowCount(); i++) {
			var propertyId = gridStore.getRowSet().getRow(i).getItemValue("id");
			if(id == propertyId) {
				gridStore.getRowSet().getRow(i).setItemValue("percent", 100);
				gridStore.getRowSet().getRow(i).setItemValue("state", state);
				break;
			}
		}
		!unieap.global.notResetUpdate&&gridStore.getRowSet().resetUpdate();
	},
	
	_initMaxFileSize: function() {
		var context = this;
		var url = unieap.WEB_APP_NAME + "/techcomp/ria/uploader!getFileMaxSize.action";
		
		unieap.Action.requestData({
			url: url,
			timeout:10000,
			load: function(dc, xhr) {
				var uploader = context._uploader;
				if(uploader) {
					try {
						context._max_file_size = dc;
						uploader.setOption("max_file_size", parseInt(dc));
					} catch (e) {}
				}
			},
			error: function(responseText, xhr) {
				//TODO
			}
		});
	},
	
	_initPathFiles: function() {
		var context = this;
		var url = unieap.WEB_APP_NAME + "/techcomp/ria/uploader!getPathFiles.action";
		
		var params = {};
		if(context.path) {
			params["path"] = context.path;
		}
		
		unieap.Action.requestData({
			url: url,
			timeout:10000,
			parameters: params,
			load: function(dc, xhr) {
				if(dc) {
					// 格式化大小
					if(typeof dc == "object" || typeof dc == "array") {
						for(var i = 0; i < dc.length; i++) {
							dc[i]["filesize"] = plupload.formatSize(dc[i]["filesize"]);
						}
					}
					
					var ds = new unieap.ds.DataStore(dc);
					context.setDataStore(ds);
				}
			},
			error: function(responseText, xhr) {
				//TODO
			}
		});
	},
	    
	_getURLParam: function(url, name) {
		var reg = new RegExp("(^|&|\\?)" + name + "=([^&]*)(&|$)","i");
		var r = url.match(reg);
		if (r != null) return (r[2]); 
		return null;
	},
	
	_isButtonVisible: function(btn) {
		if(this.displayButtons && btn) {
			for(var i = 0; i < this.displayButtons.length; i++) {
				var item = this.displayButtons[i];
				
				if(item["type"] == btn) {
					return (item["visible"] == "false" ? false : true);
				}
			}
		}
		
		// 默认可见
		return true;
	},
	
	_deleteRowWithName: function(name) {
		try {
			var gridRowSet = this._grid.getBinding().getDataStore().getRowSet();
			for(var i = 0; i < gridRowSet.getRowCount(); i++) {
				var filename = gridRowSet.getItemValue(i, "name");
				
				if(filename == name) {
					gridRowSet.deleteRow(i);
				}
			}
		} catch (e) {
			// TODO: handle exception
		}
	}
	
});
dojo.provide("unieap.form.PromptManager");
dojo.require("unieap.Tooltip");
dojo.declare("unieap.form.PromptManager",null,{
	/**
	 * @declaredClass:
	 * 		unieap.form.PromptManager
	 * @summary:
	 * 		消息提示管理器,用来在控件上显示用户自定义的提示信息
	 * @example:
	 * |<div dojoType="unieap.form.TextBox" id="txt" prompt="{promptMsg:'只能输入数字',duration:2000}"></div>
	 * @example:
	 * |var promptManager=unieap.byId('txt').getPromptManager();
	 * |promptManager.setPromptMsg("只能输入数字");
	 * |promptManager.setDuration(2000);
	 * @img:
	 * 		images/form/promptMsg.png
	 */
	
	/**
	 * @summary:
	 * 		设置在控件上显示的提示信息
	 * @type:
	 * 		{string}
	 */
	promptMsg:'',
	
	/**
	 * @summary:
	 * 		设置提示信息在控件上显示多长时间后再消失,单位为毫秒
	 * @type:
	 * 		{number}
	 */
	duration:1000,
	
	
	constructor:function(params){
		dojo.mixin(this,params);
	},
	
	/**
	 * @summary:
	 * 		在指定的domNode上显示提示信息,默认1s后提示信息会自动消失
	 * @description:
	 * 		当duration的值小于或等于0时,domNode上的提示信息不会自动消失
	 * @param:
	 * 		{DomNode} domNode 指定的domNode节点
	 */
	showPromptMsg:function(domNode){
		var me=this;
  		setTimeout(function(){
  			if(me.promptMsg){
  				unieap.showTooltip(me.promptMsg,domNode,['after','before','above','below']);
  			}
		},0);
		if(me.duration>0){
			this._handler=setTimeout(function(){
				me.hidePromptMsg(domNode);
				
			},me.duration);
		}
	},
	
	/**
	 * @summary:
	 * 		隐藏指定节点上的domNode的提示信息
	 * @param:
	 * 		{DomNode} domNode 指定的domNode节点
	 */
	hidePromptMsg:function(domNode){
		window.clearTimeout(this._handler);
		unieap.hideTooltip(this.promptMsg,domNode);
	},
	
	/**
	 * @summary:
	 * 		设置在控件上显示的提示信息
	 * @param:
	 * 		{string} promptMsg 要显示在控件上的信息
	 */
	setPromptMsg:function(promptMsg){
		this.promptMsg=promptMsg;
	},
	
	/**
	 * @summary:
	 * 		设置提示显示在控件上显示的时间
	 * @param：
	 * 		{number} duration 多长时间后提示信息消失
	 */
	setDuration:function(duration){
		this.duration=duration;
	}
})

dojo.provide("unieapx.trace.MessageCenter");
dojo.require("unieap.form.BaseButton");
dojo.require("unieap.form.Button");
dojo.require("unieap.dialog.Dialog");
dojo.declare("unieapx.trace.MessageCenter", unieap.form.BaseButton,{
	
	templateString:
		"<a href='javascript:void(0);'>" +
			"<div dojoAttachPoint=\"iconNode\">"+
			"</div>"+
		"</a>",
	iconClass:"iconTrace",
		
	postCreate:function(){
		this.iconClass&&this.setIconClass(this.iconClass);
		this.connect(this.iconNode,'onclick',this.onClick);
	},
	onClick:function(){
		unieapx.dialog.TraceMessageBox.showTraceMessages();
	},
	setIconClass: function(className) {
		this.iconClass&&dojo.removeClass(this.iconNode,this.iconClass);
		dojo.addClass(this.iconNode,className);
		this.iconClass=className;
	}
	
});
dojo.require("unieap.dialog.DialogUtil");
dojo.require("unieap.global");
dojo.provide("unieapx.trace.TraceMessageBox");

unieapx.trace.TraceMessageBox = {
	
	showTraceMessages:function(){
		DialogUtil.showDialog({
			title : RIA_UNIEAPX_I18N.trace.infoList,
			width:"800",
			height:"500",
			url : unieap.WEB_APP_NAME+"/techcomp/ria/unieapx/trace/ShowTraceMessages.jsp"
		});
	}
};
dojo.provide("unieapx.query.Binding");

dojo.declare("unieapx.query.Binding", null, {
	
	/**
	 * @declaredClass:
	 * 		unieapx.query.Binding
	 * @summary:
	 * 		查询组件绑定数据源模块
	 * @example:
	 * 
	 * |<div dojoType="unieapx.query.Query" binding="{store:'empDs'}">
	 * |	...
	 * |</div>
	 *
	 */
	
	/**
	 * @summary:
	 * 		设置查询组件绑定的数据源。
	 * 
	 * @type:
	 * 		{unieap.ds.DataStore}
	 * @example:
	 * |<div dojoType="unieapx.query.Query" binding="{store:'empDs'}">
	 * |	...
	 * |</div>
	 */
	store: "",
	
	//查询数据DataStore对象
	_bindingStore:null,
	
	constructor: function(param, inGrid) {
		dojo.mixin(this, param);
		if (param && param.store) {
			if (dojo.isString(param.store)) {
				this._bindingStore = unieap.getDataStore(param.store);
			} else {
				this._bindingStore = param.store;
			}
		}
		this._bindingStore = (this._bindingStore ||  new unieap.ds.DataStore(this.store));
	},
	
	/**
	 * @summary:
	 * 		获取查询组件绑定的DataStore
	 * @return:
	 * 		{unieap.ds.DataStore}
	 * @example:
	 * | 	unieap.byId("queryId").getBinding().getDataStore();
	 */
	getDataStore: function() {
		return this._bindingStore;
	},
	
	/**
	 * @summary:
	 * 		设置查询组件绑定的数据源。
	 * @example:
	 * |	var codeListFieldStore = new unieap.ds.DataStore("codeListFieldStore");
	 * |	var name = new unieap.ds.MetaData("name");
	 * |	name.setPrimaryKey(true);
	 * |	name.setDataType(12);
	 * |	name.setNullable(false);
	 * |	name.setLabel("名称");
	 * |	codeListFieldStore.addMetaData(name);
	 * |	codeListFieldStore.setRowSetName("com.neusoft.unieap.techcomp.codelist.entity.CodeListImpl");
	 * | 	unieap.byId("queryId").getBinding().setDataStore(codeListFieldStore);
	 */
	setDataStore: function(store) {
		this._bindingStore = store;
	}
	
});
dojo.provide("unieapx.query.Query");
dojo.require("unieap.ds");
dojo.require("dijit._Widget");
dojo.require("dijit._Templated");
dojo.require("unieap.layout.ContentPane");
dojo.require("unieap.form.Button");
dojo.require("unieap.form.DateTextBox");
dojo.require("unieap.form.ComboBox");
dojo.require("unieap.form.CheckBox");
dojo.require("unieap.form.NumberTextBox");

dojo.require("unieapx.query.Binding");

dojo.declare("unieapx.query.Query", [dijit._Widget, dijit._Templated], {
	
	/**
	 * @declaredClass:
	 * 		unieapx.query.Query
	 * @summary:
	 * 		查询组件，根据绑定的实体类路径进行数据查询。<br>
	 * 			组件提供动态改变增删查询条件，设置最大条件数及查询前构造查询条件等功能。
	 * @example:
	 * 
	 * |<div dojoType='unieapx.query.Query'
	 * |		id='queryId' 
	 * |		binding="{store:'codeListFieldStore'}" 
	 * |		target="codeListGrid"
	 * |	 	maxDisplayCount="4" 
	 * |	 	pageSize="18"
	 * |		onChangeCondition="changeCodeListQueryHeight"
	 * |	 	buildQueryCondition="customBuilderQueryCondition">
	 * |</div>
	 *
	 */
	
    /**
     * @summary:
     *      查询结果集绑定目标对象ID值。
     * @type:
     *   {string}
     * @example:
     * |<div dojoType="unieapx.query.Query" target="queryResultGridId">
     * |</div>
     * 		上述代码表示:
     * 		点击查询按钮时，会将查询结果集绑定到id为queryResultGridId的组件上。
     * @default:
     *     ""
     */	
	target:"",
	/**
	 * @summary:
	 *     显示最多查询条件行数。
	 * @type:
	 *   {number}
	 * @example:
	 * |<div dojoType="unieapx.query.Query" maxDisplayCount="8">
	 * |</div>
	 * 		上述代码表示:
	 * 		最多可显示8个查询条件。
	 * @default:
	 *     100
	 */	
	maxDisplayCount:100,
    /**
     * @summary:
     *     查询组件绑定数据源。
     * @type:
     *   {Object}
     * @example:
     * |<div dojoType="unieapx.query.Query" binding="{store:'codeListFieldStore'}">
     * |</div>
     * 		上述代码表示:
     * 		查询组件绑定数据源为codeListFieldStore。
     * @default:
     *     null
     */		
	binding:null,
    /**
     * @summary:
     *     显示样式。
     * @type:
     *   {Object}
     * @enum:
	 * 		{{mode:list}|{mode:form,columnCount:3}"}
     * @example:display
     * |<div dojoType="unieapx.query.Query" displayMode="{mode:form,columnCount:3}">
     * |</div>
     * 		上述代码表示:
     * 		页面查询条件采用form方式展现，每行显示3个查询条件。
     * @default:
     *     mode:list
     */		
	displayMode : {mode:'list'},
	
    /**
     * @summary:
     *     默认显示查询条件行数，默认显示1行。
     * @type:
     *   {number}
     * @example:
     * |<div dojoType="unieapx.query.Query" maxDisplayCount="2">
     * |</div>
     * 		上述代码表示:
     * 		页面默认显示两行查询条件。
     * @default:
     *     1
     */		
	displayCount : 1,
	/**
	 * @summary:
	 * 		是否显示“增加”、“删除”图标按钮。
	 * @description:
	 * 		如果为true表示显示，false表示不显示，默认值为true。
	 * @type:
	 * 		{boolean}
	 * @example:
	 * |<div dojoType="unieapx.query.Query" showOperationWigdet="false">
	 * |</div>
	 * 		上述代码表示:
	 * 		页面不会显示“增加”、“删除”图标按钮。
	 * @default:
	 *     true
	 */
	showOperationWigdet:true,
	/**
	 * @summary:
	 * 		是否显示“查询”按钮。
	 * @description:
	 * 		如果为true表示显示，false表示不显示，默认值为true。
	 * @type:
	 * 		{boolean}
	 * @example:
	 * |<div dojoType="unieapx.query.Query" showQueryWigdet="false">
	 * |</div>
	 * 		上述代码表示:
	 * 		页面不会显示“查询”按钮。
	 * @default:
	 *     true
	 */
	showQueryWigdet:true,
	/**
	 * @summary:
	 * 		是否显示“清空”按钮。
	 * @description:
	 * 		如果为true表示显示，false表示不显示，默认值为true。
	 * @type:
	 * 		{boolean}
	 * @example:
	 * |<div dojoType="unieapx.query.Query" showClearWigdet="false">
	 * |</div>
	 * 		上述代码表示:
	 * 		页面不会显示“清空”按钮。
	 * @default:
	 *     true
	 */
	showClearWigdet:true,
	/**
	 * @summary:
	 *     查询结果集绑定目标组件每页记录数，默认值为0，表示读取系统分页常数值。
	 *	   如果为-1，表示只有一页记录数。
	 * @type:
	 *   {number}
	 * @example:
	 * |<div dojoType="unieapx.query.Query" pageSize="16">
	 * |</div>
	 * 		上述代码表示:
	 * 		目标组件每页记录数为16。
	 * @default:
	 *     10
	 */	
	pageSize:10,
	/**
	 * @summary:
	 *     设置查询控件排序条件。
	 *     其形式为sql中的排序条件,即order by后面部分，如"username desc, roleName"。
	 * @type:
	 *   {string}
	 * @example:
	 * |<div dojoType="unieapx.query.Query" order="username desc, roleName">
	 * |</div>
	 * 		上述代码表示:
	 * 		目标组件查询结果按order值（username desc, roleName）进行排序。
	 * @default:
	 *     “”
	 */	
	order:"",
	/**
	 * @summary:
	 *     查询结果集附带查询条件dataStore的名称。<br/>
	 *     约束：queryStore名称不能与绑定的目标Store名称相同，否则将出现错误。
	 * @type:
	 *   {string}
	 * @example:
	 * |<div dojoType="unieapx.query.Query" queryStore="myQueryStore">
	 * |</div>
	 * 		上述代码表示:
	 * 		查询结果集附带查询条件dataStore的名称为myQueryStore，
	 * 		执行查询时，将把myQueryStore中的约束作为默认查询条件。
	 * @default:
	 *   "_queryStore"
	 */		
	queryStore:"_queryStore",
	// 默认查询结果DataStore名称。
	_queryResultStoreName:"_queryResultStore",
	//查询控件内部组件宽度。
	_widgetWidth:"100%",
	//整型条件类型提示信息。
	_integerMsg:RIA_UNIEAPX_I18N.query.integerPrompt,
	//查询组件查询条件实体名称。
	_rowsetName : "com.neusoft.unieap.techcomp.ria.query.dto.Condition",
	//存储查询条件及查询结果的DataCenter。
	_conditionDataCenter: new unieap.ds.DataCenter(),
	//查询条件DataStore对象
	_queryStore:null,
	
	_displayModelForm:'form',
	
    templateString: '<div>'+
						'<TABLE cellPadding="4" class="query_table" cellSpacing="4" dojoAttachPoint="tableNode"><tbody dojoAttachPoint="tbodyNode"></tbody>' +					
						'</TABLE>' +
					'</div>',
	postCreate: function() {
		//从页面dataCenter中获取条件DataStore对象。
		this._createControls();
	},
	reset:function(){
		var length = this.tableNode.rows.length;
		if(length){
			for(var i=0;i<length;i++){
				this.tableNode.deleteRow(0);
			}
		}
		this._createControls();
	},
	_createControls:function(){
		// -form
		if(this.displayMode.mode==this._displayModelForm){
			this._constructFormMode();
		}else{
		//-list
			if(this.displayCount>0){
				for(var i = 0;i < this.displayCount;i++){
					this._insertQueryRow(i);
				}
				if(this.displayCount == 1){
					this._disabledFirstRemoveImage();
				}
			}else{
				this._insertQueryRow(0);
				this._disabledFirstRemoveImage();
			}
		}
		this._initQueryClearDisplay();		
		if(!this.binding)
			return;
		if(!this.binding.store)
			return;
		var bindingStore = unieap.getDataStore(this.binding.store);
		this.getBinding().setDataStore(bindingStore);
	},
	_constructFormMode:function(){
		var metadata = this.getBinding().getDataStore().getMetaData();
		if(!metadata)
			return null;
		var codename = null;
		var codevalue = null;
		var tr  = this.tableNode.insertRow(this.tableNode.rows.length);
		var index = 1;
		var j = 0;
		var disc = this.displayMode.columnCount;
		this.displayMode.columnCount=disc&&disc>0?disc:3;
		for(var i=0;i<metadata.length;i++,index++,j++){
			if(index > this.displayMode.columnCount){
				tr  = this.tableNode.insertRow(this.tableNode.rows.length);
				index = 1;
				j=0;
			}
			codename = metadata[i].label?metadata[i].label:metadata[i].getName();
			var labelTd = tr.insertCell(index + j - 1);
			labelTd.innerHTML = codename+"&nbsp;<b>:</b>&nbsp";
			labelTd.setAttribute('noWrap','true'); 
			dojo.addClass(labelTd,"query_table_label");
			var widgetTd = tr.insertCell(index+j);
			var dataType = metadata[i].getDataType();	
			var valueWidget = this._getValueWidgetByType(dataType,metadata[i]);
			widgetTd.appendChild(valueWidget.domNode);
			//-匹配操作符
			var operation = this._getFormModeOption(dataType);
			valueWidget.queryConfig = {
									   column:metadata[i].getName(),
									   operation:operation,
									   dataType:dataType
								      };
		}
	},
	/**
	 * @summary:
	 * 		按条件进行数据查询。
	 * @example:
	 * |var queryObj=unieap.byId('queryId');
	 * |queryObj.query();
	 */
	query:function(){
		//重新查询查询时，将翻页记录置回第一页
		if (this.target) {
   			var widget = unieap.byId(this.target);
   			var resultStore = null;
   			if(widget){
   				resultStore = widget.getBinding().getDataStore();
   			}
   			if(resultStore){
   				resultStore.setPageNumber(1);
   			}
		}
		//准备查询条件
   		var queryConditionStore = this._prepareQueryConditionData();
   		if(queryConditionStore){
   			this._conditionDataCenter.addDataStore(this.queryStore,queryConditionStore);
   			this.doQuery(queryConditionStore,this.onComplete);
   		}
	},
	/**
	 * @summary:
	 * 		清空查询条件。
	 * @example:
	 * |var queryObj=unieap.byId('queryId');
	 * |queryObj.clear();
	 */
	clear:function(){
		if(this.displayMode.mode==this._displayModelForm){
			var rowLength = this.tableNode.rows.length -1;
			for(var i=0;i<rowLength;i++){
				var cells = this.tableNode.rows[i].cells;
				for(var j=1;j<cells.length;j=j+2){
					var valueWidget = dijit.byNode(cells[j].childNodes[0]);
					valueWidget.setValue(null);
				}				
			}			
		}else{
			//先清空查询列表
			var rowLength = this.tableNode.rows.length;
			//去掉第一行查询部分以及最后一行按钮部分
			for(var i = 0 ;i < rowLength - 1;i++){
				var row = this.tableNode.rows[i];
				var columnWidget = this._getColumnWidgetByRow(row);
				var conditionWidget = this._getConditionWidgetByRow(row);
				var valueWidget = this._getValueWidgetByRow(row);
				//值控件
				var cell = row.cells[2];
				cell.removeChild(cell.childNodes[0]);
				var valueWidget = new unieap.form.TextBox();
				valueWidget.setWidth(this._widgetWidth);
				cell.appendChild(valueWidget.domNode);
				columnWidget.setValue(null);
				conditionWidget.setValue(null);
				conditionWidget.setDisabled(true);
				conditionWidget.getDataProvider().setDataStore(null);
				valueWidget.setDisabled(true);
				valueWidget.setValue(null);
			}
		}
		this._conditionDataCenter.removeDataStore (this.queryStore);
		
	},
	/**
	 * @summary:
	 * 		设置目标组件每页记录数大小。
	 * @example:
	 * |var queryObj=unieap.byId('queryId');
	 * |queryObj.setPageSize(12);
	 */
	setPageSize:function(pageSize) {
		if(pageSize < 1)
			return;
   		this.pageSize = pageSize;
   	},
   	/**
	 * @summary:
	 * 		获取目标组件每页记录数大小。
	 * @example:
	 * |var queryObj=unieap.byId('queryId');
	 * |queryObj.getPageSize();
	 */
	getPageSize:function() {
   		return this.pageSize;
   	},
   	/**
	 * @summary:
	 * 		设置目标组件排序字段。
	 * @example:
	 * |var queryObj=unieap.byId('queryId');
	 * |queryObj.setOrder(name);
	 */
   	setOrder:function(order){
   		this.order = order;
   	},
   	/**
	 * @summary:
	 * 		获取目标组件排序字段。
	 * @example:
	 * |var queryObj=unieap.byId('queryId');
	 * |queryObj.getOrder();
	 */
   	getOrder:function(){
   		return this.order;
   	},
   	/**
	 * @summary:
	 * 		设置目标组件ID值。
	 * @example:
	 * |var queryObj=unieap.byId('queryId');
	 * |queryObj.setTarget("targetId");
	 */
   	setTarget:function(target) {
   		this.target = target;
   	},
   	/**
	 * @summary:
	 * 		获取目标组件ID值。
	 * @example:
	 * |var queryObj=unieap.byId('queryId');
	 * |queryObj.getTarget();
	 */
   	getTarget:function() {
   		return this.target;
   	},
   	/**
	 * @summary:
	 * 		获取查询组件绑定数据源。
	 * @example:
	 * |var queryObj=unieap.byId('queryId');
	 * |var bind = queryObj.getBinding();
	 * |bind.getDataStore();
	 */
   	getBinding:function(){
   		return unieap.getModuleInstance(this,"binding","unieapx.query.Binding");
   	},
   	
	/**
	 * @summary:
	 * 		设置默认查询条件数据源。
	 * @example:
	 * |	var queryStore = new unieap.ds.DataStore();
	 * |	var rowset = queryStore.getRowSet();
	 * | 	rowset.addRow({column:"codeListGroupId",operation:"E",dataType:12,value:selectedTreeId });
	 * |	unieap.byId("queryId").setQueryStore(queryStore);
	 */
   	setQueryStore:function(queryStore){
   		this._queryStore = queryStore;
   	},
   	/**
	 * @summary:
	 * 		获取默认查询条件数据源。
	 * @example:
	 * |	unieap.byId("queryId").getQueryStore();
	 */
   	getQueryStore:function(){
   		return this._prepareQueryConditionData();
   	},
   	/**
	 * @summary:
	 * 		执行翻页时，需要配合此方法使用，用以获取查询数据。
	 * @example:
	 * |	unieap.byId("queryId").descendPage(ds,_callback);
	 */
   	descendPage:function(ds,_callback){	
		var dataStore = this._getQueryData(ds);
		var dc = new unieap.ds.DataCenter();
		dc.addDataStore(dataStore);
		_callback(dc);
	},
	/**
	 * @summary:
	 * 		获取CodeList
	 * @example:
     * |<div dojoType="unieapx.query.Query" getCodeList="customGetCodeList">
     * |</div>
     * |function customGetCodeList(codeType){
     * | //...
     * |}
	 */
	getCodeList:function(codeType){
		return codeType;
	},
	/**
	 * @summary:
	 * 		执行查询事件实现，可以通过覆盖此方法实现自定义查询。
	 * @example:
     * |<div dojoType="unieapx.query.Query" doQuery="customDoQuery">
     * |</div>
     * |function customDoQuery(queryStore,onComplete){
     * | //...
     * |}
	 */
	doQuery:function(queryStore,onComplete){
		//准备target绑定的DataStore
		var resultStore = null;
   		if (this.target) {
   			var widget = unieap.byId(this.target);
   			if(widget){
   				resultStore = widget.getBinding().getDataStore();
   			}
   			if(resultStore){
   				if(resultStore.getName()){
   					this._queryResultStoreName = resultStore.getName();
   				}
   			}
		}
   		if(!resultStore)
   			resultStore = new unieap.ds.DataStore(this._queryResultStoreName);
   		//设置目标每页记录数
   		resultStore.setPageSize(this.pageSize);
		//根据查询条件执行查询
   		var resultDataStore = this._queryResultDataStore(queryStore , resultStore);
   		if (resultDataStore==null) 
   			return null;
   		this._conditionDataCenter.addDataStore(resultDataStore);
   		//执行回调方法
		onComplete(this._conditionDataCenter);
	},
	/**
	 * @summary:
	 * 		执行查询前准备查询条件事件。
	 * @example:
     * |<div dojoType="unieapx.query.Query" buildQueryCondition="customBuildQueryCondition">
     * |</div>
     * |function customBuildQueryCondition(queryStore){
     * | 	var rowset = queryStore.getRowSet();
	 * | 	rowset.addRow({column:"codeListGroupId",operation:"E",dataType:12,value:selectedTreeId });
     * |}
	 */
	buildQueryCondition:function(queryStore){
		return;
	},
	/**
	 * @summary:
	 * 		执行查询后处理查询结果事件。
	 * @example:
     * |<div dojoType="unieapx.query.Query" onComplete="customOnComplete">
     * |</div>
     * |function customOnComplete(dc){
     * | //...
     * |}
	 */
	onComplete:function(dc) {
		return;
	},
	/**
	 * @summary:
	 * 		执行查询后渲染目标组件事件。
	 * @example:
     * |<div dojoType="unieapx.query.Query" onRenderTarget="customonRenderTarget">
     * |</div>
     * |function onRenderTarget(ds){
     * | //...
     * |}
	 */
	onRenderTarget:function(resultStore){
		//将结果集绑定到目标组件上
		if (this.target) {
   			var widget = unieap.byId(this.target);
   			if(widget){
   				widget.getBinding().setDataStore(resultStore);
   			}
		}
	},
	_callback:function(dc){
		return;
	},
	/**
	 * @summary:
	 * 		点击增加、删除图标按钮时触发事件。
	 * @example:
     * |<div dojoType="unieapx.query.Query" onChangeCondition="customOnChangeCondition">
     * |</div>
     * |function customOnChangeCondition(){
     * | 	unieap.byId("parentAd").notifyResize();
     * |}
	 */
	onChangeCondition:function(){
		return null;
	},
	
	//初始化查询、清空按钮。
	_initQueryClearDisplay:function(){
		var _tr  = this.tableNode.insertRow(this.tableNode.rows.length);
		var _td = _tr.insertCell(0);
		_td.setAttribute("align","right");
		if(this.displayMode.mode==this._displayModelForm){
			_td.setAttribute("colSpan",this.tableNode.rows[0].cells.length);
		}else{
			_td.setAttribute("colSpan",3);
		}
		if(this.showOperationWigdet&&this.displayMode.mode!=this._displayModelForm){
			var tmpTd = _tr.insertCell(1);
			tmpTd.setAttribute("colSpan",2);
		}
		if(this.showQueryWigdet && this.showClearWigdet){
			var _div = document.createElement("div");
			dojo.addClass(_div,"query_buttons");
			var queryButton = new unieap.form.Button();
			var clearButton = new unieap.form.Button();
			queryButton.setLabel(RIA_UNIEAPX_I18N.query.queryLabel);
			clearButton.setLabel(RIA_UNIEAPX_I18N.query.clearLabel);
			_div.appendChild(queryButton.domNode);
			_div.appendChild(clearButton.domNode);
			_td.appendChild(_div);
			dojo.connect(queryButton,"onClick",this,this._doQuery)
			dojo.connect(clearButton,"onClick",this,this._doClear)
		}else if(this.showQueryWigdet){
			var _div = document.createElement("div");
			dojo.addClass(_div,"query_buttons");
			var queryButton = new unieap.form.Button();
				queryButton.setLabel(RIA_UNIEAPX_I18N.query.queryLabel);
				_div.appendChild(queryButton.domNode);
				_td.appendChild(_div);
			dojo.connect(queryButton,"onClick",this,this._doQuery)
		}else if(this.showClearWigdet){
			var _div = document.createElement("div");
			dojo.addClass(_div,"query_buttons");
			var clearButton = new unieap.form.Button();
				clearButton.setLabel(RIA_UNIEAPX_I18N.query.clearLabel);
				_td.appendChild(_div);
				
			dojo.connect(clearButton,"onClick",this,this._doClear)
		}
	},
	//向table中增加一个行记录。
	_insertRow:function(tableNode,index){
		return tableNode.insertRow(index);
	},
	//增加一个查询条件记录。
	_insertQueryRow:function(index){
		var _this = this;
		var queryRow = this._insertRow(this.tableNode,index);
		//向table第一个单元格插入查询列下拉列表
		var columnBox = new unieap.form.ComboBox();
		var columnBoxStore = this._configColumnBoxStore();
		var columnBoxTd = queryRow.insertCell(0); 
			columnBox.setWidth(this._widgetWidth);
			columnBox.getDataProvider().setDataStore(columnBoxStore);
			columnBox.setReadOnly(true);
			columnBoxTd.setAttribute("width","40%");
			columnBoxTd.appendChild(columnBox.domNode);	
		dojo.connect(columnBox,"onChange",function(){_this._columnBoxOnChange(columnBox)})
		//向table第二个单元格插入查询条件下拉列表
		var conditionBox = new unieap.form.ComboBox();
		var conditionTd = queryRow.insertCell(1); 
			conditionBox.setWidth(this._widgetWidth);
			conditionBox.getDataProvider().setDataStore(null);
			conditionBox.setReadOnly(true);
			conditionBox.setDisabled(true);
			conditionTd.setAttribute("width","120px");
			conditionTd.appendChild(conditionBox.domNode);
		//向table第三个单元格插入文本输入域
		var valueBox = new unieap.form.TextBox();
		var valueTd = queryRow.insertCell(2); 
			valueBox.setWidth(this._widgetWidth);
			valueTd.setAttribute("width","auto");
			valueTd.appendChild(valueBox.domNode);
			valueBox.setDisabled(true);
		//分别向table第四、五单元格插入增加、删除条件图标
		if (this.showOperationWigdet) {
			//增加查询条件图标
			var addImage = document.createElement("SPAN");
			var add_Td = queryRow.insertCell(3); 
				addImage.className = "query-add";
				add_Td.setAttribute("width","16px");
				add_Td.appendChild(addImage);
			//删除查询条件图标
			var removeImage = document.createElement("SPAN");
			var remove_Td = queryRow.insertCell(4);
				removeImage.className = "query-delete";
				remove_Td.setAttribute("width","16px");
				remove_Td.appendChild(removeImage);
				
			dojo.connect(addImage,"onclick",function(){_this._addNewRowOnClick(addImage)});
			dojo.connect(removeImage,"onclick",function(){_this._removeRowOnClick(removeImage)});
		}
	},
	//根据查询数据Store配置查询下拉列表数据。
	_configColumnBoxStore:function(){
		if(!this.getBinding().getDataStore())
			return null;
		var metadata = this.getBinding().getDataStore().getMetaData();
		if(!metadata)
			return null;
		var conditionStore = new unieap.ds.DataStore();
		var rowset = conditionStore.getRowSet();
		var codename = null;
		var codevalue = null;
		for(var i=0;i<metadata.length;i++){
			codevalue = metadata[i].name;
			codename = metadata[i].label?metadata[i].label:codevalue;
			rowset.addRow({CODENAME:codename,CODEVALUE:codevalue});
		}
		return conditionStore;
	},
	//查询按钮点击事件绑定方法。
	_doQuery:function(){
		this.query();
	},
	//清空按钮点击事件绑定方法。
	_doClear:function(){
		this.clear();
	},
	//增加图标按钮点击事件绑定方法。
	_addNewRowOnClick:function(cell){
		var rowLength = this.tableNode.rows.length;
		if(this.showQueryWigdet || this.showClearWigdet){
			if(rowLength > this.maxDisplayCount)
				return;
		}else{
			if(rowLength > this.maxDisplayCount - 1){
				return;
			}
		}
		this._enabledFirstRemoveImage();
		var rowIndex = cell.parentNode.parentNode.rowIndex;
		this._insertQueryRow(cell.parentNode.parentNode.rowIndex+1);
		this.onChangeCondition();
	},
	//删除图标按钮点击事件绑定方法。
	_removeRowOnClick:function(cell){
		var rowIndex = cell.parentNode.parentNode.rowIndex;
		this.tableNode.deleteRow(rowIndex);
		this._disabledFirstRemoveImage();
		this.onChangeCondition();
	},
	//根据查询条件返回查询结果数据。
   	_getQueryData: function(resultStore) {
		var queryConditionStore = this._prepareQueryConditionData();
		if(queryConditionStore){
			this._conditionDataCenter.addDataStore(this.queryStore,queryConditionStore);
	   		return this._queryResultDataStore(queryConditionStore,resultStore);
		}
		return null;
   	}, 
   	//根据查询条件与查询结果集返回查询结果数据。
   	_queryResultDataStore:function(queryStore , resultStore){
   	//如果没有配置entityClass属性，则从store中取得实体class。
		var rowSetName = null;
		if(this.getBinding().getDataStore())
			rowSetName = this.getBinding().getDataStore().getRowSetName();
   		if (!rowSetName) {
   			rowSetName = resultStore.getRowSetName();
   		}
   		if(!rowSetName){
   			dojo.require("unieap.dialog.MessageBox");
   			MessageBox.alert({
   				title : RIA_I18N.dialog.messageBox.promptDialog,
   				type : 'warn',
   				message : RIA_UNIEAPX_I18N.query.queryMessage
   			});
   			return null;
   		}
   		resultStore.setRowSetName(rowSetName);
   		var paramDC = new unieap.ds.DataCenter();
   		paramDC.addDataStore(queryStore);
   		paramDC.addDataStore(resultStore);
   		var dc = new unieap.ds.DataCenter();
   		this.doQueryRequestData(paramDC,rowSetName,this._queryResultStoreName,this.queryStore,dc);
   		if (dc instanceof unieap.ds.DataCenter) {
			var resultStore = dc.getDataStore(this._queryResultStoreName);
			if(resultStore){
				var name = resultStore.getName();
				var timeStamp = dc.getParameter(name);
				//添加resultStore到全局dataCenter中
				unieap.setDataStore(resultStore,dataCenter,true,timeStamp);
			}
			this.onRenderTarget(resultStore);
			return resultStore;
		} else 
			return null;
   	},
   	doQueryRequestData:function(paramDC , rowSetName, queryResultStoreName , queryStore, retDc){
   		var path =unieap.WEB_APP_NAME + "/techcomp/ria/queryAction!doQuery.action";
		var dc = unieap.Action.requestData({
			url:path,
			parameters:
				{
					"_entityClass":rowSetName,
					"_queryResultStore":queryResultStoreName,
					"_queryConditionStore":queryStore
				},
			sync:true,
			error:function(e){
				throw new Error(e);
			}
		},paramDC);
		var ds = dc.getSingleDataStore();
		if(ds){
			var name = ds.getName();
			var timeStamp = dc.getParameter(name);
			unieap.setDataStore(ds,retDc,true,timeStamp);
		}
   	},
   	//重新复制查询条件DataStore。
	_copyQueryCoditionStore:function(){
		var store = this._queryStore;
		if(!store){
			store = dataCenter.getDataStore(_this.queryStore);
		}
		if(!store){
			return null;
		}
		var tmpStore = unieap.revDS(store);
			tmpStore.setName(_this.queryStore);
		return tmpStore;
	},
	//准备全部查询条件数据。
	_prepareQueryConditionData:function() {
		//去掉第一行查询部分以及最后一行按钮部分
		_this = this;
		var tmpQueryStore = _this._copyQueryCoditionStore();
		if(!tmpQueryStore && _this.queryStore)
			tmpQueryStore = new unieap.ds.DataStore(_this.queryStore);
		//解的查询组件条件数据。
		var tmpRowSetName = _this._rowsetName;
		tmpQueryStore.setRowSetName(tmpRowSetName);
		var rowset = tmpQueryStore.getRowSet();
		var rowLength = _this.tableNode.rows.length;
		//form mode
		if(this.displayMode.mode==this._displayModelForm){
			for(var i=0;i<rowLength-1;i++){
				var cells = this.tableNode.rows[i].cells;
				for(var j=1;j<cells.length;j=j+2){
					var valueWidget = dijit.byNode(cells[j].childNodes[0]);
					//输入不合法数据时提示
					if(!valueWidget.getValidator().validate()){
						dojo.require("unieap.dialog.MessageBox");
			   			MessageBox.alert({
			   				title : RIA_I18N.dialog.messageBox.promptDialog,
			   				type : 'warn',
			   				message : this._integerMsg
			   			});
			   			return null;
					}
					var value = valueWidget.getValue();
					if(value){
						if(valueWidget instanceof unieap.form.ComboBoxTree){
							var metadata = this.getBinding().getDataStore().getMetaData(valueWidget.queryConfig.column);
							if(metadata.config.treeJson && !metadata.config.treeJson.loader){
								value = valueWidget.getTree().getCurrentNode().item.data.CODEVALUE;
							}
						}
						valueWidget.queryConfig.value = value;
						rowset.addRow(valueWidget.queryConfig);
					}
				}				
			}
		}else{
			for(var i=0;i<rowLength -1;i++){
				var row = this.tableNode.rows[i];
				var conditionWidget = this._getConditionWidgetByRow(row);
				if(!conditionWidget.getValue()){
					continue;
				}
				var columnWidget = this._getColumnWidgetByRow(row);
				if(!columnWidget.getValue()){
					continue;
				}
				var valueWidget = this._getValueWidgetByRow(row);
				//输入不合法数据时提示
				if(!valueWidget.getValidator().validate()){
					dojo.require("unieap.dialog.MessageBox");
		   			MessageBox.alert({
		   				title : RIA_I18N.dialog.messageBox.promptDialog,
		   				type : 'warn',
		   				message : this._integerMsg
		   			});
		   			return null;
				}
				var value = valueWidget.getValue();
				if (value){
					var metadata = this.getBinding().getDataStore().getMetaData(columnWidget.getValue());
					if(valueWidget instanceof unieap.form.ComboBoxTree && metadata.config.treeJson && !metadata.config.treeJson.loader){
						value = valueWidget.getTree().getCurrentNode().item.data.CODEVALUE;
					}
					rowset.addRow({column:columnWidget.getValue(),
						   operation:conditionWidget.getValue(),
						   dataType:metadata.getDataType(),
						   value:value});
				}
			}
		}
		//设置查询排序条件
		tmpQueryStore.setOrder(this.order);
		//构造用户条件
		this.buildQueryCondition(tmpQueryStore);
		return tmpQueryStore;
	},
	//禁用只有一条查询条件的删除图标按钮。
	_disabledFirstRemoveImage:function(){
		var rowLength = this.tableNode.rows.length;
		if((((this.showQueryWigdet || this.showClearWigdet) && rowLength == 2)
				|| rowLength == 1) && this.showOperationWigdet){
			var row = this.tableNode.rows[0];
			var removeCell = row.cells[4];
			var removeDisabledImage = document.createElement("SPAN");
			removeDisabledImage.className = "query-delete-disabled";
				removeCell.removeChild(removeCell.childNodes[0]);
				removeCell.appendChild(removeDisabledImage);
		}
	},
	//使被禁用的删除图标按钮可用。
	_enabledFirstRemoveImage:function(){
		var rowLength = this.tableNode.rows.length;
		var _this = this;
		if(((_this.showQueryWigdet ||_this.showClearWigdet) && rowLength == 2)
				|| rowLength == 1){
			var row = _this.tableNode.rows[0];
			var removeCell = row.cells[4];
			var removeImage = document.createElement("SPAN");
				removeImage.className = "query-delete";
				removeCell.removeChild(removeCell.childNodes[0]);
				removeCell.appendChild(removeImage);
			dojo.connect(removeImage,"onclick",function(){_this._removeRowOnClick(removeImage)});
		}
	},
	//条件数据下拉列表变化时绑定方法。
	_columnBoxOnChange:function(box){
		if(box.getValue()){
			this._setConditionAvailable(box);
		}
	},
	//获取条件数据下拉列表组件。
	_getColumnWidgetByRow:function(row){
		return dijit.byNode(row.cells[0].childNodes[0]);
	},
	//将条件输入框设置为可用并设置可选的值。
	_setConditionAvailable:function(box){
		var conditionBox = this._getConditionWidget(box);
		var value = box.getValue();
		var metadata = this.getBinding().getDataStore().getMetaData(value);
		var dataType = metadata.getDataType();
		var conditionDataStore = this._getConditionStoreByType(dataType);
		conditionBox.setDisabled(false);
		conditionBox.getDataProvider().setDataStore(conditionDataStore);
		//条件store一定大于0条
		conditionBox.getDataProvider().setSelectedItemsByIndex(0);
		this._displayValueWidget(box,dataType,metadata);
	},
	
	//根据单元格对象获取条件编辑下拉列表组件。
	_getConditionWidget:function(box){
		var conditionNode = box.domNode.parentNode.parentNode.cells[1].childNodes[0];
		return dijit.byNode(conditionNode);
	},
	//根据行对象获取条件编下拉列表组件。
	_getConditionWidgetByRow:function(row){
		return dijit.byNode(row.cells[1].childNodes[0]);
	},
	//根据单元格对象获取值编下拉列表组件。
	_getValueWidget:function(box){
		var valueNode = this._getValueWidgetCell(box).childNodes[0];
		return dijit.byNode(valueNode);		
	},
	//据单元格对象获取值编下拉列表组件。
	_getValueWidgetCell:function(box){
		return box.domNode.parentNode.parentNode.cells[2];
	},
	//根据行对象获取值编下拉列表组件。
	_getValueWidgetByRow:function(row){
		return dijit.byNode(row.cells[2].childNodes[0]);
	},
	//使条件编辑下拉列表组件可用。
	_displayValueWidget:function(box,dataType,metadata){
		var widget = this._getValueWidgetByType(dataType,metadata);
		var cell = this._getValueWidgetCell(box);
		cell.removeChild(cell.childNodes[0]);
		cell.appendChild(widget.domNode);
		widget.setValue(null);
		widget.setDisabled(false);
	},	
	//根据数据类型获取条件编辑列表数据。
	_getConditionStoreByType:function(dateType){
		var store = null;
		switch(dateType){
			case unieap.DATATYPES.BIGINT :
				store = this._construtNumberDataStore();
				break;
			case unieap.DATATYPES.BOOLEAN :
				store = this._construtBooleanDataStore();
				break;
			case unieap.DATATYPES.DATE :
				store = this._construtNumberDataStore();
				break;
			case unieap.DATATYPES.DECIMAL :
				store = this._construtNumberDataStore();
				break;
			case unieap.DATATYPES.DOUBLE :
				store = this._construtNumberDataStore();
				break;
			case unieap.DATATYPES.FLOAT :
				store = this._construtNumberDataStore();
				break;
			case unieap.DATATYPES.INTEGER :
				store = this._construtNumberDataStore();
				break;
			case unieap.DATATYPES.LONGVARCHAR :
				store = this._construtStringDataStore();
				break;
			case unieap.DATATYPES.NUMERIC :
				store = this._construtNumberDataStore();
				break;
			case unieap.DATATYPES.REAL :
				store = this._construtNumberDataStore();
				break;
			case unieap.DATATYPES.SMALLINT :
				store = this._construtNumberDataStore();
				break;			
			case unieap.DATATYPES.STRING :
				store = this._construtStringDataStore();
				break;
			case unieap.DATATYPES.TIME :
				store = this._construtNumberDataStore();
				break;		
			case unieap.DATATYPES.TIMESTAMP :
				store = this._construtNumberDataStore();
				break;
			case unieap.DATATYPES.TINYINT :
				store = this._construtNumberDataStore();
				break;
			case unieap.DATATYPES.VARCHAR :
				store = this._construtStringDataStore();
				break;																	
			default :
				store = this._construtStringDataStore();
		}
		return store;
	},
	//根据数据类型获取组件对象。
	_getValueWidgetByType:function(dateType,metadata){
		var widget = null;
		if(metadata.config && metadata.config.type){
			if(metadata.config.type == 'list'){
				widget = this._createSelectedWidget(metadata);
				return widget;
			}else if(metadata.config.type == 'tree'){
				widget = this._createComboBoxTreeWidget(metadata);
				return widget;
			}
		}
		switch(dateType){
			case unieap.DATATYPES.BIGINT :
				widget = this._createNumberWidget();
				widget.range={allowDecimal:false};
				widget.getValidator().setErrorMsg(this._integerMsg); 
				break;
			case unieap.DATATYPES.BOOLEAN :
				widget = this._createStringWidget();
				break;
			case unieap.DATATYPES.DATE :
				widget = this._createDateWidget();
				break;
			case unieap.DATATYPES.DECIMAL :
				widget = this._createNumberWidget();
				break;
			case unieap.DATATYPES.DOUBLE :
				widget = this._createNumberWidget();
				break;
			case unieap.DATATYPES.FLOAT :
				widget = this._createNumberWidget();
				break;
			case unieap.DATATYPES.INTEGER :
				widget = this._createNumberWidget();
				widget.range={allowDecimal:false};
				widget.getValidator().setErrorMsg(this._integerMsg); 
				break;
			case unieap.DATATYPES.LONGVARCHAR :
				widget = this._createStringWidget();
				break;
			case unieap.DATATYPES.NUMERIC :
				widget = this._createNumberWidget();
				break;
			case unieap.DATATYPES.REAL :
				widget = this._createNumberWidget();
				break;
			case unieap.DATATYPES.SMALLINT :
				widget = this._createNumberWidget();
				widget.range={allowDecimal:false};
				widget.getValidator().setErrorMsg(this._integerMsg); 
				break;			
			case unieap.DATATYPES.STRING :
				widget = this._createStringWidget();
				break;
			case unieap.DATATYPES.TIME :
				widget = this._createDateWidget();
				break;		
			case unieap.DATATYPES.TIMESTAMP :
				widget = this._createTimestampWidget();
				break;
			case unieap.DATATYPES.TINYINT :
				widget = this._createNumberWidget();
				widget.range={allowDecimal:false};
				widget.getValidator().setErrorMsg(this._integerMsg); 
				break;
			case unieap.DATATYPES.VARCHAR :
				widget = this._createStringWidget();
				break;
			default :
				widget = this._createStringWidget();
		}
		return widget;
	},
	//构造字符类型列对应条件DataStore。
	_construtStringDataStore:function(){
		var stringDataStore = new unieap.ds.DataStore();
		var rowset = stringDataStore.getRowSet();
		rowset.addRow({CODEVALUE:"M",CODENAME:RIA_UNIEAPX_I18N.query.stringMatch});
		rowset.addRow({CODEVALUE:"LM",CODENAME:RIA_UNIEAPX_I18N.query.stringLeftMatch});
		rowset.addRow({CODEVALUE:"RM",CODENAME:RIA_UNIEAPX_I18N.query.stringRigthMatch});
		rowset.addRow({CODEVALUE:"NM",CODENAME:RIA_UNIEAPX_I18N.query.stringNotMatch});
		rowset.addRow({CODEVALUE:"NLM",CODENAME:RIA_UNIEAPX_I18N.query.stringLeftNotMatch});
		rowset.addRow({CODEVALUE:"NRM",CODENAME:RIA_UNIEAPX_I18N.query.stringRightNotMatch});
		return stringDataStore;
	}, 	
	//构造数字类型列对应条件DataStore。
	_construtNumberDataStore:function(){
		var stringDataStore = new unieap.ds.DataStore();
		var rowset = stringDataStore.getRowSet();
		rowset.addRow({CODEVALUE:"E",CODENAME:RIA_UNIEAPX_I18N.query.numberEquals});
		rowset.addRow({CODEVALUE:"NE",CODENAME:RIA_UNIEAPX_I18N.query.numberNotEquals});
		rowset.addRow({CODEVALUE:"G",CODENAME:RIA_UNIEAPX_I18N.query.numberGreaterThan});
		rowset.addRow({CODEVALUE:"S",CODENAME:RIA_UNIEAPX_I18N.query.numberLessThan});
		rowset.addRow({CODEVALUE:"GE",CODENAME:RIA_UNIEAPX_I18N.query.numberGreaterThanOrEquals});
		rowset.addRow({CODEVALUE:"SE",CODENAME:RIA_UNIEAPX_I18N.query.numberLessThanOrEquals});
		return stringDataStore;
	},
	//构造布尔类型列对应条件DataStore。
	_construtBooleanDataStore:function(){
		var booleanDataStore = new unieap.ds.DataStore();
		var rowset = booleanDataStore.getRowSet();
		rowset.addRow({CODEVALUE:"E",CODENAME:RIA_UNIEAPX_I18N.query.numberEquals});
		rowset.addRow({CODEVALUE:"NE",CODENAME:RIA_UNIEAPX_I18N.query.numberNotEquals});
		return booleanDataStore;
	},
	//构造字符类型组件。
	_createStringWidget:function(){
		var widget = new unieap.form.TextBox({trim:true});
		widget.setWidth(this._widgetWidth);
		return widget;
	},
	//构造数字类型组件。
	_createNumberWidget:function(){
		var widget = new unieap.form.NumberTextBox();
		widget.setWidth(this._widgetWidth);
		return widget;
	},
	//构造下拉列表类型组件。 edit by muxg
	_createSelectedWidget:function(metadata){
		if(!metadata.config){
			return this._createStringWidget();
		}
		var dataProvider = {};
		if(metadata.config.store){
			if(dataCenter.getDataStore(metadata.config.store)){
				dataProvider.store = metadata.config.store;
			}
		}
		if(!dataProvider || !dataProvider.prototype){
			dataProvider.store = this.getCodeList(metadata.config.store);
		}
		var decoder = {displayAttr:metadata.config.displayAttr||'CODENAME',valueAttr:metadata.config.valueAttr||'CODEVALUE'};
		var widget = new unieap.form.ComboBox({readOnly:true,dataProvider:dataProvider,decoder:decoder});
		widget.setWidth(this._widgetWidth);
		return widget;
	},
	
	
	//构造下拉树类型组件。 
	_createComboBoxTreeWidget:function(metadata){
		if(!metadata.config){
			return this._createStringWidget();
		}
		var widget = null;
		//构造来自代码表中下拉树
		if(metadata.config.treeJson && !metadata.config.treeJson.loader){
			var storeName = metadata.config.treeJson.binding.store;
			var ds = unieap.Action.getCodeList(storeName);
			if(ds){
				dataCenter.addDataStore(ds);
			}
			widget = new unieap.form.ComboBoxTree({
				readOnly:metadata.config.readOnly?metadata.config.readOnly:true,
				required:metadata.config.required?metadata.config.required:false,
				dataProvider:metadata.config.dataProvider,
				treeJson:{
					binding:{
						store:storeName,
						id:'ID',
						code:'CODEVALUE',
						label:'CODENAME',
						leaf:'leaf',
						parent:'PARENTID',
						query:{name:'PARENTID',relation:'=',value:'-1'}
					}
				},
					popup:metadata.config.popup,
					expandTree:metadata.config.expandTree
				});
		}else{
			//构造自定义下拉树
			widget = new unieap.form.ComboBoxTree({
				readOnly:metadata.config.readOnly?metadata.config.readOnly:true,
				required:metadata.config.required?metadata.config.required:false,
				dataProvider:metadata.config.dataProvider,
				treeJson:{
					loader:metadata.config.treeJson?metadata.config.treeJson.loader:metadata.config.treeJson,
					binding:metadata.config.treeJson?metadata.config.treeJson.binding:metadata.config.treeJson
				},
				popup:metadata.config.popup,
				expandTree:metadata.config.expandTree
			});
		}
		widget.setWidth(this._widgetWidth);
		return widget;
	},
	
	
	
	
	
	//构造日期类型组件。
	_createDateWidget:function(){
		var widget = new unieap.form.DateTextBox();
		widget.setWidth(this._widgetWidth);
		return widget; 
	},
	//构造Timestamp日期类型组件。
	_createTimestampWidget:function(){
		var widget = new unieap.form.DateTextBox(
				{
					displayFormatter:{dataFormat:"yyyy/MM/dd hh:mm:ss"},
					popup:{showsTime:24}
				}
				);
		widget.setWidth(this._widgetWidth);
		return widget; 
	},
	_getFormModeOption:function(dateType){
		var option = "M";
		switch(dateType){
		case unieap.DATATYPES.BIGINT :
			option="E";
			break;
		case unieap.DATATYPES.BOOLEAN :
			option="E";
			break;
		case unieap.DATATYPES.DATE :
			option="E";
			break;
		case unieap.DATATYPES.DECIMAL :
			option="E";
			break;
		case unieap.DATATYPES.DOUBLE :
			option="E";
			break;
		case unieap.DATATYPES.FLOAT :
			option="E";
			break;
		case unieap.DATATYPES.INTEGER :
			option="E";
			break;
		case unieap.DATATYPES.LONGVARCHAR :
			option="M";
			break;
		case unieap.DATATYPES.NUMERIC :
			option="E";
			break;
		case unieap.DATATYPES.REAL :
			option="E";
			break;
		case unieap.DATATYPES.SMALLINT :
			option="E";
			break;			
		case unieap.DATATYPES.STRING :
			option="M";
			break;
		case unieap.DATATYPES.TIME :
			option="E";
			break;		
		case unieap.DATATYPES.TIMESTAMP :
			option="E";
			break;
		case unieap.DATATYPES.TINYINT :
			option="E";
			break;
		case unieap.DATATYPES.VARCHAR :
			option="M";
			break;
		default :
			option="M";
		}
	   return option;
	}
});

if(!dojo._hasResource["unieapx.query.AdvancedQuery"]){ 
dojo._hasResource["unieapx.query.AdvancedQuery"] = true;
dojo.provide("unieapx.query.AdvancedQuery");
dojo.require("unieap.util.util");
dojo.require("unieap.form.Button");
dojo.require("unieap.dialog.MessageBox");
dojo.require("dijit._Widget");
dojo.require("dijit._Templated");
dojo.require("unieap.form.DateTextBox");
dojo.require("unieap.form.ComboBox");
dojo.require("unieap.form.CheckBox");
dojo.require("unieap.form.NumberTextBox");
dojo.require("unieap.ds");
dojo.declare(
	"unieapx.query.AdvancedQuery",
	[dijit._Widget, dijit._Templated],
{
	templateString:		
			"<div style=\"margin-left: 8px;\">"+
			"<table style=\"table-layout:fixed;\" dojoAttachPoint=\"tableNode\" cellSpacing=\"0\">"+
				"<colgroup>" +
				"	<col></col>" +
				"	<col width='30px'></col>" +
				"</colgroup>" +
					"<tbody dojoAttachPoint=\"tbodyNode\">" +
					"<tr height='25px'>" +
					"	<td valign='top'  dojoAttachPoint=\"paneConditionNode\" style=\"position:relative\">" +
					"	</td>" +
					"	<td dojoAttachPoint=\"addBtnNode\">" +
					"	</td>" +
					"</tr>" +
					"<tr>" +
					"	<td valign='top' dojoAttachPoint=\"paneConditionGridNode\"></td>" +
					"	<td valign='top' dojoAttachPoint=\"paneToolBarNode\"></td>" +
					"</tr>" +
					"<tr>" +
					"	<td colSpan='1' valign='top' dojoAttachPoint=\"paneQueryNode\"></td>" +
					"</tr>" +
					"</tbody>" +
			"</table>" +
			"</div>",
			
	
	/**
	 * @summary: 查询条件设置。
	 * @type: {Object}
	 * @example: |<div dojoType="unieap.query.AdvanceQuery"
	 *           config="{'name':{store:'codeListStore',displayAttr:'NAME',valueAttr:'VALUE',dataType:'string'}}"> |</div>
	 *           上述代码表示: 对查询条件进行详细配置
	 * @default: null
	 */
	config:null,
	
	
	/**
	 * @summary: 查询结果集绑定目标对象ID值。
	 * @type: {string}
	 * @example: |<div dojoType="unieap.query.AdvanceQuery"
	 *           target="queryResultGridId"> |</div> 上述代码表示:
	 *           点击查询按钮时，会将查询结果集绑定到id为queryResultGridId的组件上。
	 * @default: ""
	 */	
	target:"",
	
	label:"",
	
	/**
	 * @summary: 是否显示“查询”按钮。
	 * @description: 如果为true表示显示，false表示不显示，默认值为true。
	 * @type: {boolean}
	 * @example: |<div dojoType="unieap.query.AdvanceQuery"
	 *           showQueryWigdet="false"> |</div> 上述代码表示: 页面不会显示“查询”按钮。
	 * @default: true
	 */
	showQueryToolBar:true,
	
	
	/**
	 * @summary: 查询结果集绑定目标组件每页记录数，默认值为0，表示读取系统分页常数值。 如果为-1，表示只有一页记录数。
	 * @type: {number}
	 * @example: |<div dojoType="unieap.query.AdvanceQuery" pageSize="16"> |</div>
	 *           上述代码表示: 目标组件每页记录数为16。
	 * @default: 10
	 */	
	pageSize:10,
	
	/**
	 * @summary: 查询组件宽度
	 * @type: {number}
	 * @example: |<div dojoType="unieap.query.AdvanceQuery" width="80%"> |</div>
	 *           上述代码表示: 目标组件每页记录数为16。
	 * @default: 10
	 */	
	width:"100%",
	
	/**
	 * @summary: 查询组件高度
	 * @type: {number}
	 * @example: |<div dojoType="unieap.query.AdvanceQuery" height="80%"> |</div>
	 *           上述代码表示: 目标组件每页记录数为16。
	 * @default: 10
	 */	
	height:"260px",
	
	/**
	 * @summary: 是否提供保存查询记录功能
	 * @type: {boolean}
	 */
	saveEnable:(typeof(unieap.widget.AdvancedQuery.saveEnable) == 'undefined')?true:unieap.widget.AdvancedQuery.saveEnable,
	
	//自动注入dataCenter
	Autowired : "dataCenter",
	
	entityClass:"",
	
	_queryGrid:null,
	
	_queryItem:null,
	
	_operator:null,
	
	_valueWidget:null,
	
	_historyConditions:[],
	
	_dataCenter:null,
	
	_queryStore:"_advancedQueryConditionStore",
	
	// 查询组件查询条件实体名称。
	_rowsetName : "com.neusoft.unieap.techcomp.ria.common.query.dto.Condition",
	
	// 整型条件类型提示信息。
	_integerMsg:RIA_UNIEAPX_I18N.query.integerPrompt,
	
	// 控件宽度
	_widgetWidth:"100%",
	
	// 查询条件Store
	_conditionStore:"object",
	
	// 存储查询条件及查询结果的DataCenter。
	_conditionDataCenter: new unieap.ds.DataCenter(),
	
	_queryResultStoreName:'_queryResultStore',
	
	_dataFormat:"yyyy-MM-dd",
	
	_operators:{'M':RIA_UNIEAPX_I18N.query.stringMatch,
		"LM":RIA_UNIEAPX_I18N.query.stringLeftMatch,
		"RM":RIA_UNIEAPX_I18N.query.stringRigthMatch,
		"NM":RIA_UNIEAPX_I18N.query.stringNotMatch,
		"NLM":RIA_UNIEAPX_I18N.query.stringLeftNotMatch,
		"NRM":RIA_UNIEAPX_I18N.query.stringRightNotMatch,
		"E":RIA_UNIEAPX_I18N.query.numberEquals,
		"NE":RIA_UNIEAPX_I18N.query.numberNotEquals,
		"G":RIA_UNIEAPX_I18N.query.numberGreaterThan,
		"S":RIA_UNIEAPX_I18N.query.numberLessThan,
		"GE":RIA_UNIEAPX_I18N.query.numberGreaterThanOrEquals,
		"SE":RIA_UNIEAPX_I18N.query.numberLessThanOrEquals
	},
	
	postCreate:function(){
		this._dataCenter = this.dataCenter || dataCenter;
		this._createContioner();
		this._createControls();
	},
	
	setEntityClass:function(entityClass){
		this.entityClass = entityClass;
	},
	
	setPageSize:function(pageSize){
		this.pageSize = pageSize;
	},
	getPageSize:function(){
		return this.pageSize;
	},
	setLabel:function(label){
		this.label = label;
	},
	getLabel:function(){
		return this.label;
	},
	setConfig:function(config){
		this.config = config;
		// 初始化数据:查询项
		var columnBoxStore = this._configQueryItemStore();
		var dataProvider = this._queryItem.getDataProvider();
		dataProvider.setDataStore(columnBoxStore);
		// 选中下拉框第一项
		var items = dataProvider.getItems();
		if(items != null && items.length > 0 ){
			if(unieap.widget.form.comboShowSelect){
				this._queryItem.setValue(items[1].CODEVALUE);
			}else{
				this._queryItem.setValue(items[0].CODEVALUE);
			}
		}
	},
	getConfig:function(){
		return this.config;
	},
	getConditionStore:function(){
		return this._conditionDataCenter.getDataStore(this._queryStore);
	},
	setConditionStore:function(ds){
		if(ds == null || ds.getRowSet() == null){
			return;
		}
		var conditonDS = new unieap.ds.DataStore();
		conditonDS.setRowSetName(ds.getRowSetName());
		for(var i = 0 ; i < ds.getRowSet().getRowCount(); i++){
			var row = ds.getRowSet().getRow(i);
			// ---将具体数值转换为代码------------------
			var col = row.getItemValue('column');
			var op = row.getItemValue('operation');
			var valCode = row.getItemValue('value');
			var valText = valCode;
			var dataType = row.getItemValue('dataType');
			for(var key in this._operators){
				if(this._operators[key] === op){
					break;
				}
			}
			if(dataType === unieap.DATATYPES.DATE){
				valText = this._format(valCode);
			}
			//code转换
			if(this.config[col] != null){
				var storeName = this.config[col].store;
				var displayAttr = this.config[col].displayAttr;
				if(displayAttr == null || displayAttr === ""){
					displayAttr = 'CODENAME';
				}
				var valueAttr = this.config[col].valueAttr;
				if(valueAttr == null || displayAttr === ""){
					valueAttr = 'CODEVALUE';
				}
				if(storeName!= null){
					//-----------
					var codeName = valCode;
					var store = unieap.getDataStore(storeName,this._dataCenter,true);
					if(!store){
						store = unieap.Action.getCodeList(storeName);
					}
					if(store){
						var count = store.getRowSet().getRowCount();
						for(var h = 0 ; h < count; h++){
							var codeValue = store.getRowSet().getRow(h).getItemValue(valueAttr);
							if(codeValue === valCode){
								codeName = store.getRowSet().getRow(h).getItemValue(displayAttr);
								break;
							}
						}
					}
					//-----------
					valText = codeName;
				}
			}
			var rowData = this._getTransformToDisplay(col,op,valText,valCode);
			conditonDS.getRowSet().addRow(rowData);
		}
		this._conditionDataCenter.addDataStore(this._queryStore,conditonDS);
		this._queryGrid.getBinding().setDataStore(conditonDS);
	},
   	/**
	 * @summary: 执行查询后处理查询结果事件。
	 * @example: |<div dojoType="unieap.query.AdvanceQuery"
	 *           onComplete="customOnComplete"> |</div> |function
	 *           customOnComplete(dc){ | //... |}
	 */
	onComplete:function(dc) {
		return;
	},
	
	/**
	 * @summary: 执行查询后渲染目标组件事件。
	 * @example: |<div dojoType="unieap.query.AdvanceQuery"
	 *           onRenderTarget="customonRenderTarget"> |</div> |function
	 *           onRenderTarget(ds){ | //... |}
	 */
	onRenderTarget:function(resultStore){
   		// 将结果集绑定到目标组件上
		if (this.target) {
   			var widget = unieap.byId(this.target);
   			if(widget){
   				widget.getBinding().setDataStore(resultStore);
   			}
		}
	},
	
	
  	/**
	 * @summary: 按条件进行数据查询。
	 * @example: |var queryObj=unieap.byId('queryId'); |queryObj.query();
	 */
	query:function(){
		// 重新查询查询时，将翻页记录置回第一页
		if (this.target) {
   			var widget = unieap.byId(this.target);
   			var resultStore = null;
   			if(widget){
   				resultStore = widget.getBinding().getDataStore();
   			}
   			if(resultStore){
   				resultStore.setPageNumber(1);
   			}
		}
		// 准备查询条件
		var store = this._queryGrid.getBinding().getDataStore();
		var conditionDS = this._transformCondition(store);
		// 执行查询
   		if(conditionDS){
   			this._conditionDataCenter.addDataStore(this._queryStore,conditionDS);
   			this._dataCenter.addDataStore("_advancedQueryConditionStore",conditionDS);
   			this.doQuery(conditionDS,this.onComplete);
   		}
	},
	
	/**
	 * @summary: 执行查询事件实现，可以通过覆盖此方法实现自定义查询。
	 * @example: |<div dojoType="unieap.query.AdvanceQuery"
	 *           doQuery="customDoQuery"> |</div> |function
	 *           customDoQuery(queryStore,onComplete){ | //... |}
	 */
	doQuery:function(queryStore,onComplete){
		// 准备target绑定的DataStore
		var resultStore = null;
   		if (this.target) {
   			var widget = unieap.byId(this.target);
   			if(widget){
   				resultStore = widget.getBinding().getDataStore();
   			}
		}
   		if(!resultStore)
   			resultStore = new unieap.ds.DataStore(this._queryResultStoreName);
   		// 设置目标每页记录数
   		resultStore.setPageSize(this.pageSize);
		// 根据查询条件执行查询
   		var resultDataStore = this._queryResultDataStore(queryStore , resultStore);
	},
	
	/**
	 * @summary 根据查询条件与查询结果集返回查询结果数据。
	 */
   	_queryResultDataStore:function(queryStore , resultStore){
   		// 如果没有配置entityClass属性，则从store中取得实体class。
		var rowSetName = this.entityClass;
		if(rowSetName === ""){
			rowSetName = resultStore.getRowSetName();
		}
   		var paramDC = new unieap.ds.DataCenter();
   		paramDC.addDataStore(queryStore);
   		paramDC.addDataStore(this._queryResultStoreName,resultStore);
   		var dc = new unieap.ds.DataCenter();
   		var _this = this;
   		if(this.target){
   			var widget = unieap.byId(this.target);
   			widget.getBinding().rpc = function(store,load){
   	   			var dc = new unieap.ds.DataCenter();
   	   			dc.addDataStore(store);
   	   			dc.addDataStore(this._dataCenter.getDataStore("_advancedQueryConditionStore"));
   	   			dc.addParameter("_entityClass",name);
   	   			var path =unieap.WEB_APP_NAME + "/techcomp/ria/queryAction!doQuery.action";
   	   			if(store){
   	   				var name = store.getRowSetName();
   	   			}
   	   			unieap.Action.requestData({
   	   				url:path,
   	   				sync:false,
   	   				load:function(dc){
   	   					load&&load(dc);
   	   				},
   	   				error:function(e){
   	   					throw new Error(e);
   	   				}
   	   			},dc);
   	   		};
   		}
   		this.doQueryRequestData(paramDC,rowSetName,this._queryResultStoreName,this._queryStore,dc,_this);
   	},
	/**
	 * @summary: 查询请求
	 */
	doQueryRequestData:function(paramDC,rowSetName,queryResultStoreName,queryStore,retDc,_this){
   		var path =unieap.WEB_APP_NAME + "/techcomp/ria/queryAction!doQuery.action";
		var dc = unieap.Action.requestData({
			url:path,
			parameters:
				{
					"_entityClass":rowSetName
				},
			sync:false,
			load:function(dc){
				var ds = dc.getSingleDataStore();
				if(ds){
					var name = ds.getName();
					var timeStamp = dc.getParameter(name);
					unieap.setDataStore(ds,this._dataCenter,true,timeStamp);
					_this.onRenderTarget(ds);
			   		_this._conditionDataCenter.addDataStore(ds);
			   		// 执行回调方法
					_this.onComplete(_this._conditionDataCenter);
				}
			},
			error:function(e){
				throw new Error(e);
			}
		},paramDC);
   	},
	
   	/**
	 * @summary: 设置目标组件ID值。
	 * @example: |var queryObj=unieap.byId('queryId');
	 *           |queryObj.setTarget("targetId");
	 */
   	setTarget:function(target) {
   		this.target = target;
   	},
   	/**
	 * @summary: 获取目标组件ID值。
	 * @example: |var queryObj=unieap.byId('queryId'); |queryObj.getTarget();
	 */
   	getTarget:function() {
   		return this.target;
   	},
   	
   	_createContioner:function(){
   		var contioner = new unieap.layout.AdaptiveContainer();
   		contioner.setHeight(this.height);
   	},
	_createControls:function(){
   		dojo.style(this.tableNode,"width",this.width);
		this._createQueryFormPane();
		this._createConditionGridPane();
		this._createToolBarPane();
		if(this.showQueryToolBar === true){
			this._createQueryBarPane();
		}
	},
	_createQueryFormPane:function(){
		// ----------创建设置查询项布局-----------------
		var conditionTable = 
			"<table height='100%' width=\"100%\" style=\"margin: 5px 0px;table-layout: fixed;\" cellSpacing=\"0\" >" +
				"<colgroup>" +
				"	<col width='8%'></col>" +
				"	<col width='22%'></col>" +
				"	<col width='8%'></col>" +
				"	<col width='22%'></col>" +
				"	<col width='8%'></col>" +
				"	<col width='22%'></col>" +
				"</colgroup>" +
				"<tbody>" +
				"<tr height='25px'>" +
						"<td></td>" +
						"<td></td>" +
						"<td></td>" +
						"<td></td>" +
						"<td></td>" +
						"<td></td>"+
					"</tr>" +
				"</tbody>"+
			"</table>";
		this.paneConditionNode.innerHTML = conditionTable;
		dojo.parser.parse(this.paneConditionNode);
		var table = this.paneConditionNode.firstChild;
		var row = table.rows[0];
		// 创建查询项输入域
		var cell = row.cells[0];
		var label = document.createElement("label");
		label.setAttribute("width",'100%');
		label.innerHTML = RIA_UNIEAPX_I18N.query.queryItem;
		cell.appendChild(label);
		cell = row.cells[1];
		var valueWidget = new unieap.form.ComboBox({required:true});
		this._queryItem = valueWidget;
		var popup = this._queryItem.getPopup();
		popup.height = 110;
		popup.displayStyle ="list";
		this._queryItem.setWidth("100%");
		// 初始化数据
		var columnBoxStore = this._configQueryItemStore();
		var dataProvider = this._queryItem.getDataProvider();
		dataProvider.setDataStore(columnBoxStore);
		// 选中下拉框第一项
		var items = dataProvider.getItems();
		if(items != null && items.length > 0){
			if(unieap.widget.form.comboShowSelect){
				this._queryItem.setValue(items[1].CODEVALUE);
			}else{
				this._queryItem.setValue(items[0].CODEVALUE);
			}
		}
		cell.appendChild(this._queryItem.domNode);
		var _this = this;
		dojo.connect(this._queryItem,"onChange",function(){_this._columnBoxOnChange(_this._queryItem)});
		// 创建操作输入域
		cell = row.cells[2];
		var label = document.createElement("label");
		label.setAttribute("width",'100%');
		label.innerHTML = RIA_UNIEAPX_I18N.query.operation;
		cell.appendChild(label);
		cell = row.cells[3];
		valueWidget = new unieap.form.ComboBox({required:true});
		
		// 初始化数据
		var dataProvider = valueWidget.getDataProvider();
		dataProvider.setDataStore(this._construtStringDataStore());
		valueWidget.setWidth("100%");
		this._operationWidget = valueWidget;
		this._operationWidget.getPopup().height = 110;
		this._operationWidget.getPopup().displayStyle ="list";
		// 选中下拉框第一项
		var items = dataProvider.getItems();
		if(items != null && items.length > 0){
			if(unieap.widget.form.comboShowSelect){
				this._operationWidget.setValue(items[1].CODEVALUE);
			}else{
				this._operationWidget.setValue(items[0].CODEVALUE);
			}
		}
		cell.appendChild(this._operationWidget.domNode);
		// 创建值输入域
		cell = row.cells[4];
		var label = document.createElement("label");
		label.setAttribute("width",'100%');
		label.innerHTML = RIA_UNIEAPX_I18N.query.value;
		cell.appendChild(label);
		cell = row.cells[5];
		valueWidget = new unieap.form.TextBox({required:true});
		valueWidget.setWidth("100%");
		this._valueWidget = valueWidget;
		cell.appendChild(valueWidget.domNode);
		//支持持久化条件
//		var width = this.paneConditionNode.getAttribute("clientWidth");
//		if(width == null || width < 18){
//			dojo.style(table,'width','95%');
//		}else{
//			dojo.style(table,'width',(width - 18));
//		}
		if(this.saveEnable == true){
			dojo.style(table,'width','95%');
			if(!this.menuNode){
				this.menuNode=dojo.create('div','',this.paneConditionNode,'first');
				dojo.addClass(this.menuNode,'queryMenuTop');
				dojo.connect(this.menuNode,'onclick',this,'menuward');
			}
			dojo.style(this.menuNode,'display','block');
		}
	},
	
	menuward:function(e){
		dojo.require("unieap.menu.Menu");
		if(this.menu == null || this.menu == undefined){
			this._doQueryHistoryCondition();
			if(this.menu != null && this.menu != undefined){
				this.menu.startup();
				this.menu._openMyself(e);
			}
		}else{
			if((this.menuItems && this.menuItems.length ==0)||this.menu == undefined){
					MessageBox.alert({
//						message : "无历史查询条件。" // MODIFY BY TENGYF
		   				message : RIA_UNIEAPX_I18N.query.noHistoryCondition
		   			});
			}else{
				this.updateMenu(this.menuItems);
				this.menu.startup();
				this.menu._openMyself(e);
			}
		}
	},
	
	_doQueryHistoryCondition:function(){
		var viewcontext = unieap.Action.getViewContext(this);
		if(viewcontext && viewcontext != null){
			var viewId = viewcontext.context;
		}else{
			var viewId = "";
		}
		var controlId = this._getId();
		var _this = this; 
   		var paramDC = new unieap.ds.DataCenter();
   		var dc = new unieap.ds.DataCenter();
   		var path =unieap.WEB_APP_NAME + "/techcomp/ria/queryAction!doQueryHistoryConditions.action";
   		paramDC.addParameter("_viewId",viewId);
   		paramDC.addParameter("_controlId",controlId);
   		paramDC.addParameter("_queryLabel",_this.getLabel());
		var dc = unieap.Action.requestData({
			url:path,
			sync:true,
			load:function(dc){
  				var ds = dc.getSingleDataStore();
  				if(ds != null && ds.getRowSet() != null){
  					_this.menuItems = ds.getRowSet().getData(unieap.ds.Buffer.PRIMARY);
  					if(_this.menuItems && _this.menuItems.length ==0){
  						MessageBox.alert({
//  			   			message : "无历史查询条件。"
  			   				message : RIA_UNIEAPX_I18N.query.noHistoryCondition
  			   			});
  					}else{
  						_this.updateMenu(_this.menuItems);
  					}
  				}
	
			},
			error:function(e){
				throw new Error(e);
			}
		},paramDC);
	},
	
	_getId:function(){
		var controlId = this._rootID == null ? this.id : this.id.substr((this.id.lastIndexOf(this._rootID)==-1?0:this.id.lastIndexOf(this._rootID))+this._rootID.length,this.id.length);
		return controlId;
	},
	
	updateMenu:function(menuItems){
		if(!this.menu){
			this.menu=new unieap.menu.Menu({});
		}
		this.menu.destroy();
		this.menu=new unieap.menu.Menu({});
		
		var _this = this;
		var getFun = function (child){
			return function(){
				//加入条件
				var cs = child['condition'];
				if(cs != ""){
					var json = dojo.fromJson(cs);
					var ds = new unieap.ds.DataStore();
					var rowset = new unieap.ds.RowSet(json);
					ds.setRowSet(rowset);
					ds.setRowSetName(_this._rowsetName);
					_this.setConditionStore(ds);
				}
			}	
		}
		if(menuItems == undefined || menuItems == null){
			return;
		}
		var item,childMenu;
		if(menuItems.length < 6){
			for(var l=menuItems.length,i=0;i<l;i++){
				var child=menuItems[i];
				var name = child['name'];
				var f=getFun(child);
				var menuItem = new unieap.menu.MenuItem({
					label:name,
					onClick:f
				});
				var deleteNode=dojo.create('div',{'class':'query-delete'},menuItem.arrowCell.firstChild,'first');
				dojo.style(menuItem.arrowCell.firstChild,"display","inline");
				deleteNode.deleteNodeIndex = i;
				dojo.connect(deleteNode,'onclick',this,"_deleteMenu");
				this.menu.addChild(menuItem);
			}
		}else{
			for(var l=menuItems.length,i=0;i<l;i++){
				if((i)%5==0){
					var itemLabel="Items "+(i+1)+"--"+(i+5);
					if(i+5>=l){
						itemLabel="Items "+(i+1)+"--"+(l)
					}
					childMenu=new unieap.menu.Menu();
					item=new  unieap.menu.PopupMenuItem({
						popup:childMenu,
						label:itemLabel,
						popupDelay:50
					});
					this.menu.addChild(item);
				}
				var child=menuItems[i];
				var t=child['name'];
				var f=getFun(child);
				var menuItem = new unieap.menu.MenuItem({
					label:t,
					onClick:f
				});
				childMenu.addChild(menuItem);
				var deleteNode=dojo.create('div',{'class':'query-delete'},menuItem.arrowCell.firstChild,'first');
				dojo.style(menuItem.arrowCell.firstChild,"display","inline");
				deleteNode.deleteNodeIndex = i;
				dojo.connect(deleteNode,'onclick',this,"_deleteMenu");
			}
		}
	},
	
	_deleteMenu:function(e){
		var node = e.srcElement || e.target;
		var index = node.deleteNodeIndex;
		dojo.stopEvent(e);
		var _this = this;
		MessageBox.confirm({
//			message:"是否确认删除？",
			message:RIA_UNIEAPX_I18N.query.confirmDelete,
			onComplete: function(value){
			   	if(value){
			   		if(index != undefined ){
			   			_this._deleteHistoryCondition(index);
			   		}
			   	}
			},
			iconCloseComplete:true
		});
	},
	
	_deleteHistoryCondition :function(index){
		var hcon = this.menuItems[index];
		if(hcon){
			var advancedConditionId = hcon['id'];
			var paramDC = new unieap.ds.DataCenter();
			var dc = new unieap.ds.DataCenter();
			var path =unieap.WEB_APP_NAME + "/techcomp/ria/queryAction!doDelete.action";
			paramDC.addParameter("_advancedConditionId",advancedConditionId);
			var _this = this;
			var dc = unieap.Action.requestData({
				url:path,
				sync:true,
				load:function(dc){
				_this._deleteHistoryConditionLoad(index);
			},
			error:function(e){
				throw new Error(e);
			}
			},paramDC);
		}
		
	},
	
	_deleteHistoryConditionLoad:function(index){
		if(this.menuItems.length <6){
			this.menu.getChildren()[index].destroy();
		}else{
			var popIndex = Math.floor(index/5);
			var popItem = this.menu.getChildren()[popIndex];
			var children = popItem.popup.getChildren();
			var menuIndex = index%5;
			var menu = children[menuIndex];
			if(menu){
				menu.destroy();
			}
		}
		this.menuItems.splice(index,1);
	},
	
	
	
	_createConditionGridPane:function(){
		// 是否显示行号
		var vm = {rowNumber: false,onRowClick:dojo.hitch(this,this._selectRow)};
		// 锁定列数据
		var fixedColumns=[];
		// 非锁定列数据
		var columns=[
	 		{label: RIA_UNIEAPX_I18N.query.queryItem,name: "column",width: "30%"},
			{label: RIA_UNIEAPX_I18N.query.operation,name: "operator",width: "30%"},
			{label: RIA_UNIEAPX_I18N.query.value,name : "value",width : "30%"}
		]
		var fixed={noscroll: true,rows:[fixedColumns]};
		var header={rows:[columns]}
		var layout = [fixed, header];
		var gridHeight = String(this.height);
		gridHeight = (gridHeight.indexOf("%") < 0 ? parseInt(gridHeight, 10) : gridHeight) - 75; //上下边框占位3象素
		// 数据绑定
		var binding = {store:'advancedQueryStore'};
		//单选
		var selection={selectType:'single'};
		var decoder = {};
		this._queryGrid = new unieap.xgrid.Grid({   
			views: vm,
			layout: {structure:layout},
			selection:selection,
			width: "100%",
			height: gridHeight
		});
		// 设置grid绑定的数据集
		var conditionStore = new unieap.ds.DataStore();
		conditionStore.setRowSetName(this._rowsetName);
		this._queryGrid.getBinding().setDataStore(conditionStore);
		this._conditionStore = new unieap.ds.DataStore();
		// 设置grid的选择类型
//		this._queryGrid.getManager("SelectionManager").setSelectType("single");
		// 绑定grid选择事件
		var _this = this;
		dojo.connect(this._queryGrid.getManager("SelectionManager"),"onAfterSelect",this,function(){_this._onAfterSelectGridRow(this._queryItem)});
		this.paneConditionGridNode.appendChild(this._queryGrid.domNode);
	},
	
	_selectRow:function(evt){
		this._queryGrid.getManager("SelectionManager").setSelect(evt.rowIndex,true);
	},
	_createQueryBarPane:function(){
		// ----------创建QueryBar布局-----------------
		var toolbarTable = 
			"<table width='100%'  style=\"margin: 5px 0px;table-layout:fixed;\" cellSpacing=\"0\" >" +
				"<colgroup>" +
				"	<col></col>" +
				"	<col></col>" +
				"	<col width=\"145px\"></col>" +
				"	<col width=\"145px\"></col>" +
				"</colgroup>" +
				"<tbody>" +
				"<tr height='30px'>" +
				"	<td></td>" +
				"	<td></td>" +
				"	<td align=\"right\"></td>" +
				"	<td align=\"right\"></td>" +
				"</tr>" +
				"</tbody>" +
			"</table>";
		this.paneQueryNode.innerHTML = toolbarTable;
		dojo.parser.parse(this.paneQueryNode);
		// ----------动态创建toolBar-----------------
		var table = this.paneQueryNode.firstChild;
		var rowBar = table.rows[0];
		// 创建查询按钮
		var queryCell = rowBar.cells[2];
		var queryButton = new unieap.form.Button({
			"class":"btn-success",
			"width":"140px"
		});
		queryButton.setLabel(RIA_UNIEAPX_I18N.query.queryLabel);
		queryCell.appendChild(queryButton.domNode);
		dojo.connect(queryButton,"onClick",this,this.query)
		// 创建关闭按钮
		var closeCell = rowBar.cells[3];
		var closeButton = new unieap.form.Button({
			"class":"btn-default",
			"width":"140px"
		});
		closeButton.setLabel(RIA_UNIEAPX_I18N.query.closeLabel);
		closeCell.appendChild(closeButton.domNode);
		dojo.connect(closeButton,"onClick",this,this._doClose)
	},
	_doClose:function(){
		var dialog = unieap.getDialog()== null? unieap.getXDialog():unieap.getDialog();
		if(dialog !=null){
			dialog.close(false);
		}
	},
	_createToolBarPane:function(){
		// ----------创建toolBar布局-----------------
		var toolbarTable = "<table width='100%' style=\"table-layout:fixed;\">" +
		"<colgroup><col width='100%'></col></colgroup>" +
		"<tbody>" +
		"	<tr height='0px'><td align='center' valign='top'></td></tr >" +
		"	<tr height='30px'><td align='center' valign='top'></td>	</tr>" +
		"	<tr height='30px'><td align='center' valign='top'></td>	</tr>" +
		"	<tr height='30px'><td align='center' valign='top'></td>	</tr>" +
		"	<tr height='30px'><td align='center' valign='top'></td></tr>" +
		"</tbody>" +
		"</table>";
//		this.paneToolBarNode.innerHTML = toolbarTable;
		dojo.parser.parse(this.paneToolBarNode);
		// ----------动态创建toolBar-----------------
//		var table = this.paneToolBarNode.firstChild;
		// 创建新增按钮
//		var addRow = table.rows[1];
//		var addCell = addRow.cells[0];
		var addButton = new unieap.form.Button({
			"class":"titlePane-button-add"
		});
		addButton.setLabel(RIA_UNIEAPX_I18N.query.addLabel);
//		addButton.setWidth("70px");
//		addButton.setIconClass('query-add');
		var className = addButton.domNode.className;
		this.addBtnNode.appendChild(addButton.domNode);
		dojo.connect(addButton,"onClick",this,this._addNewRowOnClick);
		// 创建修改按钮
//		var modifyRow = table.rows[2];
//		var modifyCell = modifyRow.cells[0];
//		var modifyButton = new unieap.form.Button();
//		modifyButton.setLabel(RIA_UNIEAPX_I18N.query.modifyLabel);
//		modifyButton.setWidth("70px");
//		modifyButton.setIconClass("query-editor");
//		modifyCell.appendChild(modifyButton.domNode);
//		dojo.connect(modifyButton,"onClick",this,this._modifyRowOnClick);
		// 创建删除按钮
		var deleteButton = new unieap.form.Button({
			"class":"titlePane-button-delete"
		});
		deleteButton.setLabel(RIA_UNIEAPX_I18N.query.deleteLabel);
		this.paneToolBarNode.appendChild(deleteButton.domNode);
		dojo.connect(deleteButton,"onClick",this,this._deleteNewRowOnClick);
		// 创建保存按钮
		var saveRowsButton = new unieap.form.Button({
			"class":"titlePane-button-save"
		});
		saveRowsButton.setLabel(RIA_UNIEAPX_I18N.query.save);
		this.paneToolBarNode.appendChild(saveRowsButton.domNode);
		dojo.connect(saveRowsButton,"onClick",this,this._saveRowsOnClick);
		if(this.saveEnable == false){
			dojo.style(saveRowsButton.domNode,"display","none");
		}
	},
	
	_saveRowsOnClick :function(){
		var _this = this;
		var store = _this._queryGrid.getBinding().getDataStore();
		if(store && store.getRowSet() && store.getRowSet().getRowCount()==0){
			MessageBox.alert({
//   			message : "请新增查询条件！"
				message : RIA_UNIEAPX_I18N.query.addSelectConditon
   			});
		}else{
			MessageBox.prompt({
//				title:"输入框",
				title:RIA_UNIEAPX_I18N.query.input,
//				message :"查询条件名称：",
				message :RIA_UNIEAPX_I18N.query.coditionName,
				onComplete: function(value){
				if(value.btn){
					var conditionDS = _this._transformCondition(store);
					if(conditionDS){
						_this.doSave(conditionDS,value.text);
					}
					
				}
			}
			});
		}
	},
	
	/**
	 * @summary: 执行查询事件实现，可以通过覆盖此方法实现自定义查询。
	 * @example: |<div dojoType="unieap.query.AdvanceQuery"
	 *           doQuery="customDoQuery"> |</div> |function
	 *           customDoQuery(queryStore,onComplete){ | //... |}
	 */
	doSave:function(queryStore,text){
		var viewcontext = unieap.Action.getViewContext(this);
		if(viewcontext && viewcontext != null){
			var viewId = viewcontext.context;
		}else{
			var viewId = "undefined";
		}
		var _this = this;
		var name = text;
		if(name === ""){
//			name = "条件";
			name = RIA_UNIEAPX_I18N.query.condition;
		}
		var label = this.getLabel();
		if(label == undefined || label == null || label == ""){
//			var dialog = unieap.getDialog() == null ? unieap.getXDialog():null;
//			if(dialog == null){
//				this.setLabel("");
//			}else{
//				this.setLabel(dialog.getLabel());
//			}
			label = "";
		}
   		var paramDC = new unieap.ds.DataCenter();
   		paramDC.addDataStore(queryStore);
   		var dc = new unieap.ds.DataCenter();
   		paramDC.addParameter("_viewId",viewId);
   		paramDC.addParameter("_conditionName",name);
   		paramDC.addParameter("_controlId",_this._getId());
   		paramDC.addParameter("_queryLabel",_this.getLabel());
   		var path =unieap.WEB_APP_NAME + "/techcomp/ria/queryAction!doSave.action";
		var dc = unieap.Action.requestData({
			url:path,
			sync:false,
			load:function(dc){
  				//菜单增加一项
  				MessageBox.alert({
//	   				message : "保存成功"
  					message : RIA_UNIEAPX_I18N.query.saveSuccess
	   			});
  				var ds = dc.getSingleDataStore();
  				if(ds!=null && ds.getRowSet()!=null && ds.getRowSet().getRowCount() >0){
  					var data = ds.getRowSet().getData(unieap.ds.Buffer.PRIMARY);
  					if(_this.menuItems == undefined || _this.menuItems == null){
  						_this.menuItems = [];
  					}
  					_this.menuItems.push(data[0]);
  				}
			},
			error:function(e){
				throw new Error(e);
			}
		},paramDC);
	},
	
//	_addMenu:function(data){
//		var getFun = function (child){
//			return function(){
//				//加入条件
//				var cs = child['conditionString'];
//				if(cs != ""){
//					var json = dojo.fromJson(cs);
//					var ds = new unieap.ds.DataStore();
//					var rowset = new unieap.ds.RowSet(json);
//					ds.setRowSet(rowset);
//					ds.setRowSetName(_this._rowsetName);
//					_this.setConditionStore(ds);
//				}
//			}	
//		}
//		var l = this.menuItems.length;
//		if(l < 5){
//			var name = data['name'];
//			var f = getFun(data);
//			this.menu.addChild(new unieap.menu.MenuItem({
//				label:name,
//				onClick:f
//			}));
//		}else{
//			var f=getFun(data);
//			var name = data['name'];
//			if(l%5 == 0){
//				var i = l/5;
//				var itemLabel="Items "+(i*5+1)+"--"+(i*5+5);
//				childMenu=new unieap.menu.Menu();
//				item=new  unieap.menu.PopupMenuItem({
//					popup:childMenu,
//					label:itemLabel
//				});
//				this.menu.addChild(item);
//				childMenu.addChild(new unieap.menu.MenuItem({
//					label:t,
//					onClick:f
//				}));
//			}else{
//				var popMenus = menu.getChildren();
//				var childMenu = popMenus[popMenus.length-1];
//				childMenu.addChild(new unieap.menu.MenuItem({
//					label:t,
//					onClick:f
//				}));
//			}
//		}
//	},
	
	clear:function(){
		// 初始化数据:查询项
		var columnBoxStore = this._configQueryItemStore();
		var dataProvider = this._queryItem.getDataProvider();
		dataProvider.setDataStore(columnBoxStore);
		// 选中下拉框第一项
		var items = dataProvider.getItems();
		if(items != null && items.length > 0){
			this._queryItem.setValue(items[0].CODEVALUE);
		}
		this._valueWidget.setValue("");
		this._queryGrid.getBinding().getDataStore().getRowSet().deleteAllRows();
	},
 
	/**
	 * @summary: 准备查询条件
	 */
	_transformCondition:function(store){
		var conditonDS = new unieap.ds.DataStore();
		conditonDS.setName("_advancedQueryConditionStore");
		conditonDS.setRowSetName(store.getRowSetName());
		if(store){
			for(var i = 0 ; i < store.getRowSet().getRowCount(); i++){
				var row = store.getRowSet().getRow(i);
				// ---将具体数值转换为代码------------------
				var col = row.getItemValue('column');
				var op = row.getItemValue('operator');
				var val = row.getItemValue('value');
				var valCode = row.getItemValue('valueCode');
				var colValue = this._getItemValue(this._queryItem,col);
				for(var key in this._operators){
					if(this._operators[key] === op){
						break;
					}
				}
				// 初始化conditionStore
				rowData = {'column':colValue,'operation':key,'dataType':this._getQueryItemDataType(colValue),'value':valCode+"",'order':this._getQueryItemOrder(colValue)};
				conditonDS.getRowSet().addRow(rowData);
				// ----------------------------------------
			}
		}
		return conditonDS;
	},

   
	// 根据查询数据Store配置查询下拉列表数据。
	_configQueryItemStore:function(){
		var conditionStore = new unieap.ds.DataStore();
		var codename = null;
		var codevalue = null;
		if(this.config != null){
			for(var key in this.config){
				// 查询项配置信息
				itemConfigInfo = this.config[key];
				codeName = itemConfigInfo.label;
				codeValue = key;
				conditionStore.getRowSet().addRow({CODENAME:codeName,CODEVALUE:codeValue});
			}
		}
		return conditionStore;
   		
	},
	// 条件数据下拉列表变化时绑定方法。
	_columnBoxOnChange:function(box){
		this._setConditionAvailable(box);
	},
	// 将条件输入框设置为可用并设置可选的值。
	_setConditionAvailable:function(box){
		var value = this._queryItem.getValue();
		var config = this.config;
		// 获得查询项数据类型
		var dataType = this._getQueryItemDataType(value);
		// 获得查询操作设置
		var conditionDataStore = this._getConditionStoreByType(dataType);
		var conditionBox = this._getConditionWidget(box);
		conditionBox.setDisabled(false);
		var dataProvider = conditionBox.getDataProvider();
		dataProvider.setDataStore(conditionDataStore);
		var items = dataProvider.getItems();
		if(items != null && items.length > 0){
			conditionBox.setValue(items[0].CODEVALUE);
		};
		// 设置查询值控件显示
		this._displayValueWidget(box,dataType,config[value]);
	},
	_getQueryItemDataType:function(key){
		if(this.config != null){
			var itemConfigInfo = this.config[key];
			if(itemConfigInfo === undefined || itemConfigInfo === null){
				return null;
			}
			var dataType = itemConfigInfo.dataType;
			// 默认为String类型
			if(dataType === undefined || dataType === null){
				return 12;
			}
			return dataType;
		}
	},
	_getQueryItemOrder:function(key){
		if(this.config != null){
			var itemConfigInfo = this.config[key];
			if(itemConfigInfo === undefined || itemConfigInfo === null){
				return null;
			}
			var order = itemConfigInfo.order;
			// 默认为String类型
			if(order === undefined || order === null){
				return "";
			}
			return order;
		}
	},
	// 根据单元格对象获取条件编辑下拉列表组件。
	_getConditionWidget:function(box){
		var conditionNode = box.domNode.parentNode.parentNode.cells[3].childNodes[0];
		return dijit.byNode(conditionNode);
	},
	// 根据单元格对象获取条件编辑value组件。
	_getCurrentValueWidget:function(box){
		var conditionNode = box.domNode.parentNode.parentNode.cells[5].childNodes[0];
		return dijit.byNode(conditionNode);
	},
	// 使条件编辑下拉列表组件可用。
	_displayValueWidget:function(box,dataType,itemConfig){
		var widget = this._getValueWidgetByType(dataType,itemConfig);
		this._valueWidget = widget;
		var cell = box.domNode.parentNode.parentNode.cells[5];
		if(cell.childNodes[0]){
			cell.removeChild(cell.childNodes[0]);
		}
		cell.appendChild(widget.domNode);
	},	
	// 根据数据类型获取组件对象。
	_getValueWidgetByType:function(dateType,itemConfig){
		var widget = null;
		if(itemConfig){
			var store = itemConfig.store;
			// 下拉列表和下拉树
			if(store != null && store != ""){
				widget = this._createSelectedWidget(itemConfig);
			}else{
				switch(dateType){
				case unieap.DATATYPES.BIGINT :
					widget = this._createNumberWidget();
					widget.range={allowDecimal:false};
					widget.getValidator().setErrorMsg(this._integerMsg); 
					break;
				case unieap.DATATYPES.BOOLEAN :
					widget = this._createSelectedWidget(itemConfig);
					break;
				case unieap.DATATYPES.DATE :
					widget = this._createDateWidget();
					break;
				case unieap.DATATYPES.DECIMAL :
					widget = this._createNumberWidget();
					break;
				case unieap.DATATYPES.DOUBLE :
					widget = this._createNumberWidget();
					break;
				case unieap.DATATYPES.FLOAT :
					widget = this._createNumberWidget();
					break;
				case unieap.DATATYPES.INTEGER :
					widget = this._createNumberWidget();
					widget.range={allowDecimal:false};
					widget.getValidator().setErrorMsg(this._integerMsg); 
					break;
				case unieap.DATATYPES.LONGVARCHAR :
					widget = this._createStringWidget();
					break;
				case unieap.DATATYPES.NUMERIC :
					widget = this._createNumberWidget();
					break;
				case unieap.DATATYPES.REAL :
					widget = this._createNumberWidget();
					break;
				case unieap.DATATYPES.SMALLINT :
					widget = this._createNumberWidget();
					widget.range={allowDecimal:false};
					widget.getValidator().setErrorMsg(this._integerMsg); 
					break;			
				case unieap.DATATYPES.STRING :
					widget = this._createStringWidget();
					break;
				case unieap.DATATYPES.TIME :
					widget = this._createDateWidget();
					break;		
				case unieap.DATATYPES.TIMESTAMP :
					widget = this._createTimestampWidget();
					break;
				case unieap.DATATYPES.TINYINT :
					widget = this._createNumberWidget();
					widget.range={allowDecimal:false};
					widget.getValidator().setErrorMsg(this._integerMsg); 
					break;
				case unieap.DATATYPES.VARCHAR :
					widget = this._createStringWidget();
					break;
				default :
					widget = this._createStringWidget();
				}
			}
		}else{
			widget = this._createStringWidget();
		}
		return widget;
	},
	// 构造字符类型组件。
	_createStringWidget:function(){
		var widget = new unieap.form.TextBox({trim:true,required:true});
		widget.setWidth(this._widgetWidth);
		return widget;
	},
	// 构造数字类型组件。
	_createNumberWidget:function(){
		var widget = new unieap.form.NumberTextBox({required:true});
		widget.setWidth(this._widgetWidth);
		return widget;
	},
	// 构造下拉列表类型组件。
	_createSelectedWidget:function(itemConfig){
		var dataProvider = {};
		var value = this._queryItem.getValue();
		var dataType = itemConfig.dataType;
		var store = "";
		var ds = new unieap.ds.DataStore('CODE_VAR_STATE',
				[{CODEVALUE: 'true',CODENAME: RIA_UNIEAPX_I18N.query.isTrue},
				 {CODEVALUE: 'false',CODENAME: RIA_UNIEAPX_I18N.query.isFalse}]);
		if(dataType === unieap.DATATYPES.BOOLEAN){
			store = "CODE_VAR_STATE";
			if(!unieap.getDataStore(store)){
				dataCenter.addDataStore(ds);
			}
		}else{
			store = itemConfig.store;
		}
		dataProvider.store = store;
		var decoder = {displayAttr:itemConfig.displayAttr||'CODENAME',valueAttr:itemConfig.valueAttr||'CODEVALUE'};
		var widget = new unieap.form.ComboBox({readOnly:false,dataProvider:dataProvider,decoder:decoder,required:true});
		widget.setWidth(this._widgetWidth);
		widget.getPopup().height = 110;
		widget.getPopup().displayStyle= "list";
//		widget.getDataProvider().setDataStore(ds);
		return widget;
	},
	
	// 构造下拉树类型组件。
	_createComboBoxTreeWidget:function(metadata){
		if(!metadata.config){
			return this._createStringWidget();
		}
		var widget = null;
		// 构造来自代码表中下拉树
		if(metadata.config.treeJson && !metadata.config.treeJson.loader){
			var storeName = metadata.config.treeJson.binding.store;
			var ds = unieap.Action.getCodeList(storeName);
			if(ds){
				this._dataCenter.addDataStore(ds);
			}
			widget = new unieap.form.ComboBoxTree({
				readOnly:metadata.config.readOnly?metadata.config.readOnly:true,
				required:metadata.config.required?metadata.config.required:false,
				dataProvider:metadata.config.dataProvider,
				treeJson:{
					binding:{
						store:storeName,
						id:'ID',
						code:'CODEVALUE',
						label:'CODENAME',
						leaf:'leaf',
						parent:'PARENTID',
						query:{name:'PARENTID',relation:'=',value:'-1'}
					}
				},
					popup:metadata.config.popup,
					expandTree:metadata.config.expandTree
				});
		}else{
			// 构造自定义下拉树
			widget = new unieap.form.ComboBoxTree({
				readOnly:metadata.config.readOnly?metadata.config.readOnly:true,
				required:metadata.config.required?metadata.config.required:false,
				dataProvider:metadata.config.dataProvider,
				treeJson:{
					loader:metadata.config.treeJson?metadata.config.treeJson.loader:metadata.config.treeJson,
					binding:metadata.config.treeJson?metadata.config.treeJson.binding:metadata.config.treeJson
				},
				popup:metadata.config.popup,
				expandTree:metadata.config.expandTree
			});
		}
		widget.setWidth(this._widgetWidth);
		return widget;
	},
	// 构造日期类型组件。
	_createDateWidget:function(){
		var widget = new unieap.form.DateTextBox({required:true});
		widget.setWidth(this._widgetWidth);
		return widget; 
	},
	// 构造Timestamp日期类型组件。
	_createTimestampWidget:function(){
		var widget = new unieap.form.DateTextBox(
				{
					displayFormatter:{dataFormat:this._dataFormat},
					popup:{showsTime:24}
				}
				);
		widget.setWidth(this._widgetWidth);
		return widget; 
	},
	// 根据数据类型获取条件编辑列表数据。
	_getConditionStoreByType:function(dateType){
		var store = null;
		switch(dateType){
			case unieap.DATATYPES.BIGINT :
				store = this._construtNumberDataStore();
				break;
			case unieap.DATATYPES.BOOLEAN :
				store = this._construtBooleanDataStore();
				break;
			case unieap.DATATYPES.DATE :
				store = this._construtNumberDataStore();
				break;
			case unieap.DATATYPES.DECIMAL :
				store = this._construtNumberDataStore();
				break;
			case unieap.DATATYPES.DOUBLE :
				store = this._construtNumberDataStore();
				break;
			case unieap.DATATYPES.FLOAT :
				store = this._construtNumberDataStore();
				break;
			case unieap.DATATYPES.INTEGER :
				store = this._construtNumberDataStore();
				break;
			case unieap.DATATYPES.LONGVARCHAR :
				store = this._construtStringDataStore();
				break;
			case unieap.DATATYPES.NUMERIC :
				store = this._construtNumberDataStore();
				break;
			case unieap.DATATYPES.REAL :
				store = this._construtNumberDataStore();
				break;
			case unieap.DATATYPES.SMALLINT :
				store = this._construtNumberDataStore();
				break;			
			case unieap.DATATYPES.STRING :
				store = this._construtStringDataStore();
				break;
			case unieap.DATATYPES.TIME :
				store = this._construtNumberDataStore();
				break;		
			case unieap.DATATYPES.TIMESTAMP :
				store = this._construtNumberDataStore();
				break;
			case unieap.DATATYPES.TINYINT :
				store = this._construtNumberDataStore();
				break;
			case unieap.DATATYPES.VARCHAR :
				store = this._construtStringDataStore();
				break;																	
			default :
				store = this._construtStringDataStore();
		}
		return store;
	},
	// 构造字符类型列对应条件DataStore。
	_construtStringDataStore:function(){
		var stringDataStore = new unieap.ds.DataStore();
		var rowset = stringDataStore.getRowSet();
		
		rowset.addRow({CODEVALUE:"M",CODENAME:RIA_UNIEAPX_I18N.query.stringMatch});
		rowset.addRow({CODEVALUE:"LM",CODENAME:RIA_UNIEAPX_I18N.query.stringLeftMatch});
		rowset.addRow({CODEVALUE:"RM",CODENAME:RIA_UNIEAPX_I18N.query.stringRigthMatch});
		rowset.addRow({CODEVALUE:"E",CODENAME:RIA_UNIEAPX_I18N.query.numberEquals});
		rowset.addRow({CODEVALUE:"NM",CODENAME:RIA_UNIEAPX_I18N.query.stringNotMatch});
		rowset.addRow({CODEVALUE:"NLM",CODENAME:RIA_UNIEAPX_I18N.query.stringLeftNotMatch});
		rowset.addRow({CODEVALUE:"NRM",CODENAME:RIA_UNIEAPX_I18N.query.stringRightNotMatch});
		rowset.addRow({CODEVALUE:"NE",CODENAME:RIA_UNIEAPX_I18N.query.numberNotEquals});
		return stringDataStore;
	}, 	
	// 构造数字类型列对应条件DataStore。
	_construtNumberDataStore:function(){
		var stringDataStore = new unieap.ds.DataStore();
		var rowset = stringDataStore.getRowSet();
		rowset.addRow({CODEVALUE:"E",CODENAME:RIA_UNIEAPX_I18N.query.numberEquals});
		rowset.addRow({CODEVALUE:"NE",CODENAME:RIA_UNIEAPX_I18N.query.numberNotEquals});
		rowset.addRow({CODEVALUE:"G",CODENAME:RIA_UNIEAPX_I18N.query.numberGreaterThan});
		rowset.addRow({CODEVALUE:"S",CODENAME:RIA_UNIEAPX_I18N.query.numberLessThan});
		rowset.addRow({CODEVALUE:"GE",CODENAME:RIA_UNIEAPX_I18N.query.numberGreaterThanOrEquals});
		rowset.addRow({CODEVALUE:"SE",CODENAME:RIA_UNIEAPX_I18N.query.numberLessThanOrEquals});
		return stringDataStore;
	},
	// 构造布尔类型列对应条件DataStore。
	_construtBooleanDataStore:function(){
		var booleanDataStore = new unieap.ds.DataStore();
		var rowset = booleanDataStore.getRowSet();
		rowset.addRow({CODEVALUE:"E",CODENAME:RIA_UNIEAPX_I18N.query.numberEquals});
		rowset.addRow({CODEVALUE:"NE",CODENAME:RIA_UNIEAPX_I18N.query.numberNotEquals});
		return booleanDataStore;
	},
	// 构造布尔类型列对应条件DataStore。
	_construtBooleanDataStore:function(){
		var booleanDataStore = new unieap.ds.DataStore();
		var rowset = booleanDataStore.getRowSet();
		rowset.addRow({CODEVALUE:"E",CODENAME:RIA_UNIEAPX_I18N.query.numberEquals});
		rowset.addRow({CODEVALUE:"NE",CODENAME:RIA_UNIEAPX_I18N.query.numberNotEquals});
		return booleanDataStore;
	},
	// 校验当前输入条件是否符合规则
	_validateCondition:function(val){
		var queryValid = this._queryItem.getValidator().validate();
		var operationValid = this._operationWidget.getValidator().validate();
		var valueValid = this._valueWidget.getValidator().validate();
		if(!queryValid || !operationValid || !valueValid){
//			dojo.require("unieap.dialog.MessageBox");
//   			MessageBox.alert({
//   				title : RIA_I18N.dialog.messageBox.promptDialog,
//   				type : 'warn',
//   				message : this._integerMsg
//   			});
			return false;
		}
	},
	
	_collectUpdateCondition:function(addOrModify){
		var valueWidget = this._getCurrentValueWidget(this._queryItem);
		this._valueWidget = valueWidget;
		var val = valueWidget.getValue();
		var valText = valueWidget.getText();
		var flag = this._validateCondition(val);
		if(flag === false){
			return null;
		}else{
			var conditionStore = this._queryGrid.getBinding().getDataStore();
			var col = this._queryItem.getValue();
			var colText = this._queryItem.getText();
			var op = this._operationWidget.getValue();
			var count = conditionStore.getRowSet().getRowCount();
			// 判断是否重复
			for(var i = 0 ; i < count; i++){
				var rowData = conditionStore.getRowSet().getRowData(i);
				if(rowData == null){
					continue;
				}
				if(rowData["value"] != valText){
					continue;
				}
				if(rowData["column"] != colText){
					continue;
				}
				if(rowData["operator"] != this._operators[op]){
					continue;
				}
				break;
			}
			if(i === count){
				var rowData = this._getTransformToDisplay(col,op,valText,val);
				return rowData;
			}else{
				if(addOrModify == false){
//					var mes = "不能添加重复条件，请修改查询项的值。";
					var mes = RIA_UNIEAPX_I18N.query.cantAddRepeatConditionDoUpdate;
				}else{
					var mes = RIA_UNIEAPX_I18N.query.notDuplicateConditon;
				}
				dojo.require("unieap.dialog.MessageBox");
	   			MessageBox.alert({
	   				type : 'warn',
	   				message : mes
	   			});
			}
			return null;
		}
	},
	
	_getTransformToDisplay:function(col,op,valText,val){
		var colValue = this._getItemName(this._queryItem,col);
		var opValue = this._operators[op];
		var rowData = {column:colValue,operator:opValue,value:valText,valueCode:val};
		return rowData;
	},
	
	// 增加按钮点击事件绑定方法。
	_addNewRowOnClick:function(){
		var rowData = this._collectUpdateCondition(true);
		if(rowData != null){
			this._queryGrid.getBinding().getDataStore().getRowSet().addRow(rowData);
		}
	},
	_getItemName:function(widget,col){
		var store = widget.getDataProvider().getDataStore();
		if(store){
			var count = store.getRowSet().getRowCount();
			for(var i = 0 ; i < count; i++){
				var codeValue = store.getRowSet().getRow(i).getItemValue('CODEVALUE');
				if(codeValue === col){
					var codeName = store.getRowSet().getRow(i).getItemValue('CODENAME');
					return codeName;
				}
			}
		}
		return "";
	},
	_getItemValue:function(widget,col){
		var store = widget.getDataProvider().getDataStore();
		if(store){
			var count = store.getRowSet().getRowCount();
			for(var i = 0 ; i < count; i++){
				var codeName = store.getRowSet().getRow(i).getItemValue('CODENAME');
				if(codeName === col){
					var codeValue = store.getRowSet().getRow(i).getItemValue('CODEVALUE');
					return codeValue;
				}
			}
		}
		return "";
	},
	_modifyRowOnClick:function(){
		var rowIndexs = this._queryGrid.getManager("SelectionManager").getSelectedRowIndexs();
		if(rowIndexs != null && rowIndexs.length > 0){
			var rowData = this._collectUpdateCondition(false);
			if(rowData != null){
				var rowSet = this._queryGrid.getBinding().getDataStore().getRowSet();
				var row =  rowSet.getRow(rowIndexs[0]);
				for(var key in rowData){
					row.setItemValue(key,rowData[key]);
				}
				rowSet.resetUpdate();
			}
		}else{
   			MessageBox.alert({
   				type : 'warn',
//   			message : "请选择一条。"
   				message : RIA_UNIEAPX_I18N.query.selectOndeData
   			});
		}
	},
	_deleteNewRowOnClick:function(){
		var rowIndexs = this._queryGrid.getManager("SelectionManager").getSelectedRowIndexs();
		if(rowIndexs != null && rowIndexs.length > 0){
			this._queryGrid.getBinding().getDataStore().getRowSet().deleteRow(rowIndexs[0]);
		}else{
   			MessageBox.alert({
   				type : 'warn',
   				message : RIA_UNIEAPX_I18N.query.chooseQueryCondition
   			});
		}
	},
	_deleteAllRowOnClick:function(){
		this._queryGrid.getBinding().getDataStore().getRowSet().deleteAllRows();
	},
	_onAfterSelectGridRow:function(box){
		var rows = this._queryGrid.getManager("SelectionManager").getSelectedRows();
		if(rows != null && rows.length > 0){
			var col = rows[0].getItemValue('column');
			var op = rows[0].getItemValue('operator');
			var val = rows[0].getItemValue('value');
			var valCode = rows[0].getItemValue('valueCode');
			var colValue = this._getItemValue(this._queryItem,col);
			this._queryItem.setValue(colValue);
			this._setConditionAvailable(box);
			for(var key in this._operators){
				if(this._operators[key] === op){
					break;
				}
			}
			this._operationWidget.setValue(key);
			var conditionValue = valCode;
			this._valueWidget.setValue(conditionValue);
		}
	},
	_format: function(value){
		if(!value){
			return value;
		}
        var date = new Date(Number(value));
        return unieap.dateFormat(date.getTime(),this._dataFormat);
    }
});}

dojo.provide("unieapx.form.FormList");
dojo.require("unieap.util.util");
dojo.require("unieap.form.Form");
dojo.declare("unieapx.form.FormList",[dijit._Widget,dijit._Templated],{

	/**
	 * @declaredClass:
	 * 		unieap.form.FormList  
	 * @summary:
	 * 		类似于Form控件,但是会根据其绑定的DataStore同时显示多个Form
	 * @example:
	 * |<div dojoType="unieap.form.FormList" binding="{store:'emp'}">
	 * |	<div dojoType="unieap.form.TextBox" binding="{name:'attr_empno'}"></div>
	 * |	<div dojoType="unieap.form.TextBox" binding="{name:'attr_ename'}"></div>
	 * |</div>
	 *
	 */

	/**
	 * @summary:
	 * 		设置控件绑定的dataStore
	 * @type:
	 * 		{unieap.form.FormListBinding}
	 * @example:
	 * |<div dojoType="unieap.form.FormList" binding="{store:'emp'}">
	 * |	<div dojoType="unieap.form.TextBox" binding="{name:'attr_empno'}"></div>
	 * |	<div dojoType="unieap.form.TextBox" binding="{name:'attr_ename'}"></div>
	 * |</div>
	 */
	binding:null,


	 /**
	  * @summary:
	  * 	设置FormList控件的宽度
	  * @description:
	  * 	FormList的宽度默认为浏览器的宽度
	  * @type:
	  * 	{string}
	  * @default:
	  * 	"auto"
	  */
	 width:'auto',

	 /**
	  * @summary:
	  * 	是否插入一空行
	  * @description:
	  * 	当formList绑定的数据集为空时是否加入一空行
	  * @type:
	  * 	{boolean}
	  * @default:
	  * 	"false"
	  */
	 insertBlankRow: false,

	 /**
	  * @summary:
	  * 	设置FormList控件的高度
	  * @description:
	  * 	FormList的高度随着其嵌套的控件的高度而增加
	  * @type:
	  * 	{string}
	  * @default:
	  * 	"auto"
	  */
	 height:'auto',
	 
	 count: 0,
	 
	 formListCount: 0,
	 
	 //自动注入dataCenter
	 Autowired : "dataCenter",
	
	 radioNameArray : [],
	 
	 tabIndexArray : [],
	/**
	 * @summary:
	 * 		是否增加提示信息“正在加载数据...”
	 * @type:
	 * 		{boolean}
	 * @default:
	 * 		 false
	 * @example:
	 * |<div dojoType="unieap.xgrid.Grid" showLoading="true">
	 * |	...
	 * |</div>
	 */
	showLoading:false,

	templateString: "<div >" +
						"<div class='content-loading'  style='display:none;position:relative' dojoAttachPoint='contentLoading'>" +
						"<div class='content-loading-text' dojoAttachPoint='contentText'></div>" +
						"</div>" +
						"<div dojoAttachPoint='containerNode' style='overflow:auto;' ></div>" +						
					 "</div>",	
	/**
	 * @summary:
	 * 		设置FormList控件的宽度
	 * @param:
	 * 		{string} width
	 * @example:
	 * |<script type="text/javascript">
	 * |	var formList=unieap.byId('formList');
	 * |	formList.setWidth("400px");
	 * |</script>
	 */
	setWidth:function(width){
		if(isNaN(width)){
			dojo.style(this.domNode,'width',parseInt(width,10)+"px");
		}else{
			dojo.style(this.domNode,'width',width);			
		}
	},

	/**
	 * @summary:
	 * 		设置FormList控件的高度
	 * @param:
	 * 		{string} height
	 * @example:
	 * |<script type="text/javascript">
	 * |	var formList=unieap.byId('formList');
	 * |	formList.setHeight("400px");
	 * |</script>
	 */
	setHeight:function(height){
		dojo.style(this.domNode,'height',parseInt(height,10)+"px");
	},

	/**
	 * @summary:
	 * 		获得节点所在的Form的索引
	 * @description:
	 * 		如果传入的节点不在Form中,返回-1
	 * @param:
	 * 		{domNode|dijit._Widget} node
	 * @return:
	 * 		{number}
	 * @example:
	 * |<div dojoType="unieap.form.FormList" binding="{store:'emp'}">
	 * |	<div dojoType="unieap.form.TextBox" binding="{name:'attr_empno'}"></div>
	 * |	<div dojoType="unieap.form.TextBox" binding="{name:'attr_ename'}"></div>
	 * |	<span onclick="getIndex(this)">获得绑定的索引号</span>
	 * |</div>
	 * |<script type="text/javascript">
	 * |	function getIndex(node){
	 * |		alert(unieap.byId('formList').getIndex(node));
	 * |	}
	 * |</script>
	 */
	getIndex:function(node){
		if(!node) return -1;
		var widget,parentWidget, _node;
		
		node instanceof dijit._Widget?(_node=node.domNode)&&(widget=node):
					(_node=node)&&(widget=dijit.byNode(_node));
		parentWidget = widget;
		while((parentWidget||0).declaredClass!='unieapx.form.FormList'&&_node.tagName!="BODY"){
			widget=dijit.byNode(_node);
			if(widget instanceof unieap.form.Form){
				return typeof(widget.rowIndex)=="undefined"?-1:widget.rowIndex;
			}else{
				_node=_node.parentNode;
				parentWidget = dijit.byNode(_node);
			}
		}
		return -1;
	},
	

	/**
	 * @summary:
	 * 		对FormList下的表单进行校验
	 * @param:
	 * 		{boolean} bool 是否自动弹出错误提示信息
	 * @return:
	 * 		{boolean}
	 */
	validate:function(bool){
		return !dojo.query(" > [widgetId]",this.containerNode).map(dijit.byNode).some(function(form){
			return form.validate(bool)==false;
		})
	},


    /**
     * @summary:
     * 		获得FormList的数据绑定模块
     * @return:
     * 		{unieap.form.FormListBinding}
     * @example:
     * |<script type="text/javascript">
     * |	var formList=unieap.byId('formList'),
     * |    	binding=formList.getBinding();
     * |</script>
     */
	getBinding: function() {
		return unieap.getModuleInstance(this,"binding","unieapx.form.FormListBinding");
	},


	/**
	 * @summary:
	 * 		获得FormList所有的Form控件
	 * @return :
	 * 		{array}
	 * @example:
	 * |<script type='text/javascript'>
	 * |	var forms=unieap.byId('formList').getForms();
	 * |	dojo.forEach(forms,function(form){
	 * |		alert(form.rowIndex);
	 * |	});
	 * |</script>
	 */
	getForms:function(){
		var arr=[];
		dojo.query(" > [widgetId]",this.containerNode).forEach(function(node){
			var widget=dijit.byNode(node);
			widget.declaredClass=='unieap.form.Form'&&arr.push(widget);
		});
		return arr;
	},

	/**
	 * @summary:
	 * 		通过索引号获得FormList指定的Form控件
	 * @return :
	 * 		{unieap.form.Form|null}
	 * @example:
	 * |<script type='text/javascript'>
	 * |	var form=unieap.byId('formList').getForm(0);
	 * |	unieap.debug(form);
	 * |</script>
	 */
	getForm:function(index){
		var forms=this.getForms();
		return forms[index]||null;
	},

	//不推荐使用
    _getFormChild:function(formIndex, childIndex){
    	var form = this.getForm(formIndex);
    	var arr=[];
    	dojo.query("[widgetId]", form.domNode).forEach(function(node){
    		var widget = dijit.byNode(node);
    		if(widget && widget.declaredClass != 'unieap.form.Form'){
    			arr.push(widget);
    		}
    	});
    	return arr[childIndex] || null;
    },

	postCreate:function(){
    	this.radioNameArray = [];
    	this.tabIndexArray = [];
    	this.count = 0;
		this.binding=this.getBinding();
		var self = this;
		//如果嵌套的Form控件有id或者jsId属性，删除id和jsId
		dojo.query("[dojoType]",this.containerNode).forEach(function(node){
			dojo.hasAttr(node,'id')&&dojo.removeAttr(node,'id');
			dojo.hasAttr(node,'jsId')&&dojo.removeAttr(node,'jsId');
			self.count++;
		});
		this.originNodeHTML=this.containerNode.innerHTML;
		if(this.width!="auto"){
			if(isNaN(this.width)){
				this.domNode.style.width = this.width;
			}else{
				this.domNode.style.width = parseInt(this.width,10)+"px";
			}
		}else{
			this.domNode.style.width = "100%";
		}
		
		if(this.showLoading){
			this.contentText.innerHTML = RIA_I18N.util.util.loading;
			dojo.style(this.contentLoading,'display','block');
		}
	},

	startup:function(){
		this._createForm();
	},
	
	_getDataStore:function(){
		return this.getBinding().store;
	},
	
	forceDestroy: function(){
		this.formListCount = -1;
	},
	
	_destroyFormWidget: function(){
		//清空ContainerNode下的节点
		dojo.query("[widgetId]",this.containerNode).map(dijit.byNode).forEach(function(widget){
			//防止销毁后执行FieldSet控件的startup方法
			widget._started=true;
			widget.destroy&&widget.destroy();
		});
		dojo.empty(this.containerNode);
	},

	//复制表单
	_createForm:function(){
		this._store=this._getDataStore();
		
		if(!this._store){
			if(this.insertBlankRow) {
				var rowSet = new unieap.ds.RowSet();
				rowSet.insertRow({}, 0);
				this._store = new unieap.ds.DataStore();
				this._store.setRowSet(rowSet);
			}else{
				this._destroyFormWidget();
				return;
			}
		}
		if(this._store.getRowSet().getRowCount()==0) {
			if(this.insertBlankRow){
				this._store.getRowSet().insertRow({}, 0);
			}else{
				this._destroyFormWidget();
				return;
			}
		}
		if(this.formListCount != this._store.getRowSet().getRowCount()){
			this.formListCount = this._store.getRowSet().getRowCount();
			//首先清空ContainerNode下的节点
			this._destroyFormWidget();
			var len=this._store.getRowSet().getRowCount(),
			str=[];
			var div = dojo.create('div');
			for(var i=0;i<len;i++){
				str.push("<div dojoType='unieap.form.Form'>");
				str.push(this.originNodeHTML);
				str.push("</div>");
				div.innerHTML= str.join("");
				this.containerNode.appendChild(div.childNodes[0]);
				str = [];
			}
			div = null;
			dojo.parser.parse(this.containerNode, {xhr:true, currentDataCenter:this.dataCenter || (unieap.Action.getViewContext(this) || window).dataCenter});
		}
		var self=this;
		if(this.showLoading)
		   dojo.style(this.contentLoading ,'display','none');
//		setTimeout(function(){
		//临时解决控件渲染后数据显示慢的问题
		self._bindData(self._store);
//		},0);
	},


	//数据绑定
	_bindData:function(store){
		var binding = this.getBinding();
		var self = this;
		dojo.query(" > [widgetId]",this.containerNode).map(dijit.byNode).forEach(function(form,index){
			form.rowIndex=index;
			form.getBinding().setDataStore(store,index);
			if(index == 0){
				dojo.query("input[type ='radio']", form.domNode).forEach(function(input){
					if(dojo.hasAttr(input,'name')){
						self.radioNameArray.push(dojo.attr(input, "name"));
					}
				});
				dojo.query("[tabIndex]", form.domNode).forEach(function(input){
					if(dojo.attr(input, "tabIndex") > 0){
						self.tabIndexArray.push(dojo.attr(input, "tabIndex"));
					}
				});
			}
			if(index > 0){
				binding.reNameRadio(form.domNode, self.radioNameArray, index);
				binding.reNameTabIndex(form.domNode, self.tabIndexArray, self.count, index);
			}
		});
	},   
	// 在添加和删除行后更新受影响的formIndex、radioName和tabIndex
	_upDateFormIndex : function(currIndex){
		var binding = this.getBinding();
		var self = this;
		dojo.query(" > [widgetId]",this.containerNode).map(dijit.byNode).forEach(function(form,index){
			form.rowIndex=index;
			if(index >= currIndex){
				binding.reNameRadio(form.domNode, self.radioNameArray, index);
				binding.reNameTabIndex(form.domNode, self.tabIndexArray, self.count, index);
			}
		});
	},
	
	//添加删除行后更新formListCount
	_upDateFormListCount : function(){
		this.formListCount = this._store.getRowSet().getRowCount();
	},
	
	//销毁处理操作
	destroy:function(){
		this.getBinding().destroy();
		this.inherited(arguments);
	}
})

dojo.provide('unieapx.form.FormListBinding');
dojo.declare("unieapx.form.FormListBinding",null, {

	/**
	 * @declaredClass: unieap.form.FormListBinding
	 * @summary: FormList控件数据绑定模块
	 * @example: |<div dojoType="unieap.form.FormList"
	 *           binding="{store:'empDs'}"> | <div
	 *           dojoType="unieap.form.TextBox" binding="{name:'address'}"></div> |</div>
	 */

	/**
	 * @summary: 设置FormList控件所绑定的DataStore
	 * @type: {unieap.ds.DataStore|string}
	 * @example: |<div dojoType="unieap.form.FormList"
	 *           binding="{store:'empDs'}"> | <div
	 *           dojoType="unieap.form.TextBox" binding="{name:'address'}"></div> |</div>
	 */
	store: null,

	constructor: function(params) {
		dojo.mixin(this, params);
		this.store=(this.widget.dataCenter || (unieap.Action.getViewContext(this.widget) || window).dataCenter).getDataStore(this.store);
		this.connects=[];
		this.store&&this.store.getRowSet()&&this._bindTrigger();
	},

	/**
	 * @summary: 获得FormList控件绑定的DataStore对象
	 * @return: {unieap.ds.DataStore}
	 * @example: |<script type="text/javascript"> | var
	 *           formList=unieap.byId('formList'), |
	 *           ds=formList.getBinding().getDataStore(); | unieap.debug(ds); |</script>
	 */
	getDataStore:function(){
		return this.store;
	},

	// 事件触发
	_bindTrigger:function(){
		if(typeof(this.store) == "undefined" || this.store == null){
			return;
		}
		var rowset=this.store.getRowSet();
	
		this.connects.push(dojo.connect(rowset,'onAfterAddRow',this,function(row){
			var count = rowset.getRowCount();
			if(count==1 && this.widget.insertBlankRow){
				// this.widget._createForm();
				return;
			}
			var div=dojo.create('div'),form_id;
			div.innerHTML='<div dojoType="unieap.form.Form">'+this.widget.originNodeHTML+"</div>";
			dojo.parser.parse(div, {xhr:true, currentDataCenter:this.widget.dataCenter || (unieap.Action.getViewContext(this.widget) || window).dataCenter});
			form_id=div.childNodes[0].id;
			// 为formlist增加id
			// this.widget._initWidgetId(div.childNodes[0], rowset.getRowCount());
			var currIndex = row.getIndex();
			if(currIndex + 1 == count){
				this.widget.containerNode.appendChild(div.childNodes[0]);
			}else{
				this.widget.containerNode.insertBefore(div.childNodes[0], this.widget.containerNode.childNodes[currIndex]);
			}
			div=null;
			unieap.byId(form_id).getBinding().bind(row);
			this.widget._upDateFormIndex(currIndex);
			this.widget._upDateFormListCount();
		}));

		this.connects.push(dojo.connect(rowset,'onBeforeDeleteRow',this,function(rowIndex){
			if (rowset.getRowCount() == 1 && this.widget.insertBlankRow) {
				return;
			}
			var childNodes = this.widget.containerNode.childNodes;
			// unieap.destroyWidgets(childNodes[rowIndex]);
			var widgets = dojo.query("[widgetId]",childNodes[rowIndex]).map(dijit.byNode);
			for(var i=widgets.length-1,formWidget;formWidget=widgets[i];i--){
				if(formWidget.destroy){
					formWidget.destroy();
				}
				else if(formWidget.id){
					dijit.registry.remove(formWidget.id);
				}
			}
			this.widget.containerNode.removeChild(childNodes[rowIndex]);
			this.widget._upDateFormIndex(rowIndex);
		}));

		// 删除Row时的监听
		this.connects.push(dojo.connect(rowset,'onAfterDeleteRow',this,function(row){
			// // FIXME:
			// 能否得到删除的序号,直接删除该序号对应的Form即可,不用重新删除Form再创建
			if (rowset.getRowCount() == 0 && this.widget.insertBlankRow){
				// rowset.insertRow({}, 0);
				// this.widget.getForm(0).getBinding().setDataStore(rowset.getDataStore());
				this.widget._createForm();
			}
			this.widget._upDateFormListCount();
		}));
		
		// 删除全部Row时的监听
		this.connects.push(dojo.connect(rowset,'onAfterDeleteAllRows',this,function(row){
			if (rowset.getRowCount() == 0){
				this.widget._createForm();
			}
			this.widget._upDateFormListCount();
		}));
	},



	// 销毁监听
	disconnect:function(){
		dojo.forEach(this.connects,function(item){
			dojo.disconnect(item);
		});
		this.connects=[];
	},


	destroy:function(){
		this.disconnect();
	},


	// 对radio进行处理
	reNameRadio:function(form, originRadioArr, index){
		var k = 0;
		dojo.query("input[type ='radio']", form).forEach(function(input){
			if(dojo.hasAttr(input,'name')){
				    var srcName = originRadioArr[k];
					var desName = srcName;
					for(var i = 0; i < index; i++){
						desName = desName + "_" + srcName;
						if(i == index-1){break;}
					}
					dojo.attr(input,"name", desName);
					k++;
			}
		});
	},
	// 对tabIndex进行处理
	reNameTabIndex : function(form, orginTabIndexArr, count, index){
		var k = 0;
		dojo.query("[tabIndex]", form).forEach(function(input){
			if(dojo.attr(input, "tabIndex") > 0){
				dojo.attr(input, "tabIndex", Number(orginTabIndexArr[k]) + count * index);
				k++;
			}
		});
	},

	/**
	 * @summary: 重新设置FormList控件绑定的DataStore
	 * @param: {unieap.ds.DataStore} store 要重新绑定的DataStore 对象
	 * @example: |<script type="text/javascript"> | var
	 *           ds=dataCenter.getDataStore('emp'), |
	 *           formList=unieap.byId('formList'); |
	 *           formList.getBinding().setDataStore(ds); |
	 *           unieap.debug(formList.getBinding().getDataStore()); |</script>
	 */
	setDataStore:function(store){
		if(!store instanceof unieap.ds.DataStore) return
		this.disconnect();
		this.store=store;
		this._bindTrigger();
		this.widget._createForm();
	}
});
dojo.provide("unieapx.form.QuickSearchPopup");
dojo.require("unieap.form.ComboBoxPopup");
dojo.declare("unieapx.form.QuickSearchPopup", unieap.form.ComboBoxPopup, {

	displayStyle: "table",
	onSelect : function(item, widget) {
		var ds = new unieap.ds.DataStore( {
			pageSize : 10,
			pageNumber : 1,
			recordCount : 1, 
			name : "qs_result",
			rowSetName : this.widget.getDataProvider().store.rowSetName,
			rowSet : [ item ]
		});
		var me = this.widget;
//		me.setValue(item[me.getBinding().name]);
		me.setValue(item[me.getDecoder().valueAttr]);
		me._selectStore = ds;
		me.onComplete(ds);
		me._toogleIcon();
		me._selectedText = this._getSelectedText();
//		me._isClearing=true;
		me._hasValue = true;
//		if (!me.bindable) {
//			me.clear();
//		}
//		setTimeout(function(){
////			dijit.byId((this._rootID||"")+this.nextFocusId)||dijit.byId(this.nextFocusId)?this.processNextFocusId():dojo.byId("unieap_for_focus").focus();
//			me._isClearing = false;
//		},200);
		if(!me.textValidate)
			me.getDataProvider().setDataStore(null);
		// if(unieap.isUserStyle){
		// 	if(unieap.currentStyle == 'network'){
				if(dojo.isIE){
					document.getElementById(this.params.widget.id + '_unieap_input').focus();
				}
		// 	}
		// }
	},
	
	_onClick: function(evt) {
		var me = this.widget;
		me._isClick = true;
		setTimeout(function(){
			me._isClick = false;
		},200);
		this.inherited(arguments);
	},
	
	_getSelectedText: function(){
		var selectedText = '',me = this.widget;
		selectedText =  this._selection?me.getDecoder().decode(this._selection[0]):me.getText();
		if(selectedText == '' ||selectedText ==null )selectedText=me.getText();
		return selectedText;
	},
	
	_clearSelection: function(){
		if(this._selection) {
			this._selection[0] = null;
			this._selection = null;
			this.widget._selectedText = '';
			this.widget._isSetText=false;
		}
	},
	
	_isSelecting: function(){
		if (this._selection && this._selection[0]){
			return true;
		}else{
			return false;
		}
	},
	
	open: function(items, selection, callback) {
		if(!this.widget._isClick){
			this._clearSelection();
		}
		if((('undefined' == typeof this.widget.getDataProvider().store) || !this.widget.getDataProvider().store)) return;
		// if(this.isOpen() || (('undefined' == typeof this.widget.getDataProvider().store) || !this.widget.getDataProvider().store)) return;
		this.widget._oldValue = this.widget.getText();
		this.inherited(arguments);
	},
	
	/**
	 * @summary:
	 * 		关闭下拉框
	 */
	close: function(callback) {
		if (this.isOpen()) {
			var me = this.widget;
			if(this.animation&&this.animation.status() == "playing"){
				this.animation.stop();
			}
			if (this._isShowingNow) {
				this._isShowingNow = false;
				dojo.style(this.popupcontainer, "display", "none");
				var iframe = this._iframe;
				if (iframe) {
					iframe.style.width = "0px";
					iframe.style.height = "0px";
				}
			}
			if (me.bindable) {
				if(this._isSelecting()){
					if(me._selectedText == '') me._selectedText = this._getSelectedText();
					me.setText(me._selectedText);
				}else{
					if(me.onlySelect){
						if(!me._isDelayQuery){
							// me.setValue('');
							// this.widget._oldValue = '';
						}
					}else{
						me.setValue(this.widget._oldValue);
					}
				}
			}else{
				if(!me._isDelayQuery){
					me.setValue("");
				}
				me._tooglePrompt();
			}
			if(!me.textValidate)
				me.getDataProvider().setDataStore(null);
		}
        $('#'+this.widget.id+' .u-form-combobox-icon-normal').removeClass('u-form-combobox-icon-down');
	}

});
dojo.provide("unieapx.form.QuickSearchAutoCompleter");
dojo.require("unieap.form.AutoCompleter");
dojo.declare("unieapx.form.QuickSearchAutoCompleter", unieap.form.AutoCompleter, {

	UserInterfaces : dojo.mixin( {
		url : "string"
	}, unieap.form.AutoCompleter.prototype.UserInterfaces),

	quickBo:"quicksearch_QuickSearchBOImpl_bo",
	
	onBeforeSendQuery : function(params, dc) {
		if(this.widget.onBeforeSendQuery){
			var params = this.widget.onBeforeSendQuery(dc,arguments[2]);//wangc
			if(params && this._isJson(params)){
				return  params;
			}
		}
		return {};
	},
	
	_sendQuery:function(sQuery,unBindStore,isSetValue){
		var me=this;
		if(!isSetValue){
			me._showWait('正在请求数据...');
		}
	    if(this._canSendQuery(sQuery)){
	    	var quicksearchStore = me.widget.quicksearchStore;
	    	var quicksearchConfig = me.widget.quicksearchConfig;
	    	if(quicksearchStore && quicksearchConfig){
    			var dataSource = me.widget.quicksearchConfig["dataSource"];
    			this._getQueryResult(sQuery,unBindStore,quicksearchStore,dataSource,isSetValue);
	    	}else{
	    		me.widget._getQuicksearchConfig("setValue",sQuery,unBindStore,isSetValue);
	    	}
	    }
	},
	
	_getQueryResult:function(sQuery,unBindStore,quicksearchStore,dataSource,isSetValue){
		var me=this;
		if(isSetValue && me.widget.getDecoder().valueAttr == me.widget.getDecoder().displayAttr){
			me.widget._setValue(sQuery);
			!me.widget.readOnly && me.widget.getValidator().validate();
		}else{
			var url=unieap.WEB_APP_NAME+ "/techcomp/ria/commonProcessor?page="+unieap.WEB_PAGE_NAME;
			var dc=new unieap.ds.DataCenter();
			dc.setParameter("_boId", me.widget.quickBo || "quicksearch_QuickSearchBOImpl_bo");
			dc.setParameter("_methodName", "query");
			dc.setParameter("_methodParameterTypes", "java.lang.String,java.lang.String,com.viewhigh.vadp.sysbase.quicksearch.entity.QuickSearch,boolean,java.util.Map");
			dc.setParameter("id", me.widget.config);
			dc.setParameter("keyword", sQuery);
			
//		var quicksearchStore = me.widget.quicksearchStore;
			dc.addDataStore("config", quicksearchStore);
			if(isSetValue){
				dc.setParameter("isSetValue", true);
			}else{
				dc.setParameter("isSetValue", false);
			}
//		var dataSource = me.widget.quicksearchConfig["dataSource"];
			if(dataSource && dataSource != ""){
				dc.setParameter("_dataSourceID", dataSource);
			}
			//可以在此回调方法中重新修改已有参数或者增加其他参数
			var params = me.onBeforeSendQuery(me.params,dc);
			dc.setParameter("params", params);
			var p1 = "",p2 = "";
			for(var key  in params){
				p1+=(","+key);
				p2+=",string";
				dc.setParameter(key, params[key]);
			}
			if(p1.length>1)
				p1 = p1.substr(1);
			if(p2.length>1)
				p2 = p2.substr(1);
			dc.setParameter("_parameters", "id,keyword,config,isSetValue,params("+p1+")");
			dc.setParameter("_parameterTypes", "string,string,pojo,string,map("+p2+")");
			unieap.Action.requestData({
				url:url,
				sync:false,
				load:function(dc){
				if(me.widget._isQuerySucceed(dc)){
					me._showResult(dc,unBindStore,sQuery);
					me.onAfterSendQuery(dc);
				}
			}
			},dc,false);//fasle表示不显示loading
		}
	},
	_showWait:function(text){
		var me = this;
		var popUp = me.widget.getPopup();
		popUp._createPopup([],popUp.structure,{
			type:'quickSearch',
			text:text
		});
		unieap.form.Popup.prototype.open.call(popUp);
	   },

	_showResult : function(dc,unBindStore,sQuery) {
		var me = this;
		var store = dc.getSingleDataStore();
		var rowCount = store.getRowSet().getRowCount("primary");
		if(rowCount == 0 && !unBindStore){
			me._showWait('暂无数据');
			return
		}
		
		/* S 修改 */
//		if (rowCount == 0) {
//			var _widget = this.widget;
//			this.widget.onComplete(null);
//			//在弹出提示进行clear操作
//			_widget.clear();
//			
//			if(!this.widget._isDelayQuery){
//				MessageBox.alert( {
////					title : "提示信息", // MODIFY BY TENGYF
//					title : RIA_UNIEAPX_I18N.form.infoTilte,
////					message : "未查询到数据!"
//					message : RIA_UNIEAPX_I18N.form.notFoundData,
//					onComplete : function(){
//						//_widget.clear();
//						_widget.focus();
//					}
//				});
////			}
//			return;
//		}
//		if (store.getRowSet().getRowCount("primary") > 1)
//			return this.inherited(arguments);
//		this.widget.getDataProvider().setDataStore(store);
//		//获取选中行数据；
//		this.widget._selectStore = store;
//		this.widget._isSetText = true;
//		if(unBindStore){
//			this.widget._setValue(sQuery);
//			!this.widget.readOnly && this.widget.getValidator().validate();
//			this.widget.getDataProvider().setDataStore(null);
//		}
//		else{
//			this.widget.setSelectedIndex([0]);
//			var item = dc.getSingleDataStore().rowSet.getData()[0];
//			this.widget.setValue(item[this.widget.decoder.valueAttr]);
//			this.widget.getPopup().onSelect(item, this.widget);
//			this.widget.getPopup().close();
//		}
		/* E 修改 */
		
		// if(unieap.isUserStyle){
			if(unBindStore){
				this.widget.getDataProvider().setDataStore(store);
				//获取选中行数据；
				this.widget._selectStore = store;
				this.widget._isSetText = true;
				this.widget._setValue(sQuery);
				!this.widget.readOnly && this.widget.getValidator().validate();
				this.widget.getDataProvider().setDataStore(null);
			} else{
				this.inherited(arguments);
			}
		// }
		
	},

	_canSendQuery : function(value) {
		if (value == "")
			return true;
		if (value)
			return true;
		return false;
	},
	
	_isJson :function(obj){ 
	    var isjson = typeof(obj) == "object" && Object.prototype.toString.call(obj).toLowerCase() == "[object object]" && !obj.length; 
	    return isjson; 
	} 


});

dojo.provide("unieapx.form.QuickSearch");
dojo.require("unieap.form.ComboBox");
dojo.declare("unieapx.form.QuickSearch", unieap.form.ComboBox, {

	UserInterfaces : dojo.mixin( {
		config : "string",
		autoDialog:"boolean",
		detailDialog : "string",
		onClear : "function",
		onBeforeQuery : "function",
		onComplete : "function",
		bindable : "boolean",
		onlySelect: "boolean",
		onBeforeSendQuery : "function",
		quickBo : "string"
	}, unieap.form.ComboBox.prototype.UserInterfaces),

	quickBo:"quicksearch_QuickSearchBOImpl_bo",
	
	popupClass : "unieapx.form.QuickSearchPopup",
	width : "300px",
	/**
	 * @summary:
	 * 		选择选中的值后是否不清空控件
	 * @description:
	 * 		如果设置为false时，可以在onSelect事件中处理业务逻辑，而控件实际的值会被清空
	 * @type：
	 * 		{boolean}
	 */
	bindable : true,
	
	//是否支持手动输入
	onlySelect: true,
	
	/**
	 * @summary:
	 * 		自定义查询对话框id
	 * @description:
	 * 		可以自定义查询对话框，精确查找数据，该项为配置自定义查询对话框id
	 * @type：
	 * 		{string}
	 */
	detailDialog:"",
	
	iconClass : "quicksearchIcon",
	textValidate : false,
	comboShowSelect : false,
	
	//弹出窗口Dialog对象
	_dlg : null,
	//是否是用鼠标点击选中
	_isClick: false,
	//通过绑定数据和quicksearch查询只有一条数据直接赋值时，设置_isSetText为true
	_isSetText: false,
	//标示控件是否是通过选择得到的值，非选择得到的值在onBlur时清空控件的值
	_hasValue: false,
	
	
//	_isClearing: false,
	_selectedText: '',
	_oldValue:'',
	
	//--------------------------王凡--------------------------------------------
	autoDialog:true,
	_autoDialogModel:"formQuery",
	_autoDialogContent:null,
	quicksearchConfig:null,
	quicksearchStore:null,
	_autoDialog:null,
	_autoDialogGrid:null,
	_autoDialogQuery:null,
	_autoDialogGridPane:null,
	_autoDialogQueryPane:null,
	_autoDialogQueryButton:null,
	_autoDialogSelectButton:null,
	_autoDialogToolbar:null,
	_autoDialogPageSize:10,
	_autoDialogDataFormat:"yyyy-MM-dd",
	
	
	
	constructor: function(inView) {
		this.inherited(arguments);
	},

	postCreate : function() {
		this.connects = [];
		this._tooglePrompt();
		this._toogleIcon();
		this.connects.push(dojo.connect(this.getBinding(),'bind',this,'_bindText'));
		if(!this.bindable) this.onlySelect = false;
		this.inherited(arguments);
		this.autoDialog && this._getQuicksearchConfig();
		
//		if(unieap.isUserStyle){
//			if(unieap.currentStyle == 'network'){
				var _this = this;
				if(_this.detailDialog == ""){
					var dataHtml = "<a href='javascript:void(0)' class='u-form-textbox-icon dataIconClick'></a>";
					$(_this.iconNode).after(dataHtml);
					$(_this.fieldNode).on('click','.dataIconClick',function(e){
						_this._onKeyDown(e,'evtCodeClick');
					})
				}
//			}
//		}
	},
	
	_bindText: function(row){
		if(!row) return;
		this._onBindChange(row, true);
		if(0 == row.getRowSet().getRowCount()){
			this.getPopup()._clearSelection();
		}
	},
	
	_onBindChange: function(row, isbindText){
		var self = this;
		if(row.isItemChanged(self.getBinding().name) || ('undefined' != typeof isbindText) && true == isbindText){
			setTimeout(function(){
				var items = self.getDataProvider().getItems();
				if(self.onlySelect &&row.getItemValue(self.getBinding().name)&&self.inputNode && self.getText() ){
					//通过绑定数据和quicksearch查询只有一条数据直接赋值时，设置_isSetText为true
					self._isSetText = true;
				}else{
					self._isSetText = false;
				}
			},0);
		}
	},
	
	/*--------------------------wu.zb-------------------------------------*/
	_timeOut:null,//延迟发送数据请求的setTimeout处理
	_isDialogType:true,//是否是弹窗查询类型

	_isDelayQuery:true,
	_selectStore:null,
	delayTime:1,
	
	getSelectStore:function(){
		var displayAttr = this.getDecoder().displayAttr;
		var textValue = this.getText();
		if(textValue!=""){
			if(this._selectStore){
				var storeValue = this._selectStore.getRowSet().getItemValue(0,displayAttr);
				if(storeValue == textValue){
					return this._selectStore;
				}
			}
			return null;
		}else{
			return null;
		}
	},
	
	_openAutoQueryFlag:function(value,evt){
		var _self = this;
		var keyCode = evt.keyCode;
		if(keyCode != dojo.keys.ENTER && keyCode!=dojo.keys.DOWN_ARROW && keyCode!=dojo.keys.UP_ARROW && keyCode!=dojo.keys.TAB){
			clearTimeout(this._timeOut);
			this._timeOut = setTimeout(function(){
							_self._doAutoQuery(value);
					}, _self.delayTime*1000);
		}
	},
	
	_closeAutoQueryFlag:function(){
		clearTimeout(this._timeOut);
	},
	
	_doAutoQuery:function(value){
			this.getAutoCompleter()._sendQuery(value);
	},
	
	_onKeyUp:function(evt){
		
		if(evt.key == 'Control' || (evt.key == 'c') ){
			return;
		}
		if(this.disabled){
			dojo.stopEvent(evt);
			return;
		}
		var keyCode = evt.keyCode;
		if(this.onlySelect){ //判断是否只回车选择 而不是延迟查询
			if( ((this._isSetText && this.getText()!="" && !this.getPopup().isOpen()) || 
			    (keyCode != dojo.keys.ENTER &&this.getPopup()._isSelecting())) && 
			    ( keyCode!=dojo.keys.DOWN_ARROW && keyCode!=dojo.keys.UP_ARROW && keyCode!=dojo.keys.TAB)
					){
				dojo.stopEvent(evt);
				return ;
			}
		}
		if(this._isDelayQuery && this.getText() != ""){ //如果是延迟查询渲染出表头 然后标题内显示正在请求数据
			if( ((this._isSetText && this.getText()!="" ) || 
			    (keyCode != dojo.keys.ENTER &&!this.getPopup()._isSelecting())) && 
			    ( keyCode!=dojo.keys.DOWN_ARROW && keyCode!=dojo.keys.UP_ARROW && keyCode!=dojo.keys.TAB)
					){
						this.getAutoCompleter()._showWait('正在请求数据...');
					this._openAutoQueryFlag(this.getText(),evt);

					}
		}
		if(this.getText() == '' && evt.key == 'Backspace'){
			this.inherited(arguments);
		}
		// this.inherited(arguments);

	},
	
	_onKeyDown: function(evt,type) {
		if(evt.key == 'Control' || (evt.key == 'c') ){
			return;
		}
		if(this.getPopup()&&this.getPopup().isOpen()&&(evt.key !== 'ArrowDown')&&(evt.key !== 'ArrowUp')&&(evt.key !== 'Enter')){ //输入的时候 关闭dialog 让重新输入和回车
			this.getPopup().close()
		}
		if(this.disabled){
			dojo.stopEvent(evt);
			return;
		}
		/* S 修改 */
//		if(this.onlySelect){
//			var keyCode = evt.keyCode;
//			if( ((keyCode==dojo.keys.BACKSPACE && this.iconClass == "lemis-icon-formqsdel") || (this._isSetText && this.getText()!="" && !this.getPopup().isOpen()) || 
//				    (keyCode != dojo.keys.ENTER &&this.getPopup()._isSelecting())) && 
//				    ( keyCode!=dojo.keys.DOWN_ARROW && keyCode!=dojo.keys.UP_ARROW && keyCode!=dojo.keys.TAB)
//						){
//				dojo.stopEvent(evt);
//				return ;
//			}
//			if(keyCode == dojo.keys.ENTER){
//				this.getPopup()._handleKeyDown(evt);
//				if(unieap.fireEvent(this,this.onEnter,[evt])==false) return;
//				this._keyPressed = true;
//				this._hasBlur = false;
//				return;
//			}
//		}
//		if(this._isDelayQuery){
//			this._closeAutoQueryFlag();
//		}
//		this.inherited(arguments);
		/* E 修改 */
		
		if(this.onlySelect){
			var keyCode = evt.keyCode;
			// if(unieap.isUserStyle){
			// 	if(unieap.currentStyle == 'network'){
					if(type == 'evtCodeClick'){
						keyCode = 13;
					}
			// 	}
			// }
			//var keyCode = evt.keyCode;
			if(keyCode!=dojo.keys.DOWN_ARROW 
					&& keyCode!=dojo.keys.UP_ARROW 
					&& keyCode!=dojo.keys.TAB
					&& keyCode != dojo.keys.ENTER
			){
				this.values = [];
				//this._updateText();
				this.fireDataChange();
				if(false){
					this.getCascade().cascade();
				}
				this.setIconClass("lemis-icon-formqsfind");
				
				this._isSetText = false;
				this._hasValue = false;
			}
			if(keyCode == dojo.keys.ENTER){
				if (this.iconClass == 'lemis-icon-formqsfind' || this.iconClass == 'dataIconClick') {
//					lemis-icon-formqsfind-dis
//					dataIconClick
//					u-form-textbox-icon
					this.getPopup()._handleKeyDown(evt);
					
					if(unieap.fireEvent(this,this.onEnter,[evt])==false) return;
					this._keyPressed = true;
					this._hasBlur = false;
					return;
				} else {
					if(this.getPopup() && this.getPopup().isOpen()){
						this.getPopup()._handleKeyDown(evt);
						if(unieap.fireEvent(this,this.onEnter,[evt])==false) return;
						this._keyPressed = true;
						this._hasBlur = false;
						return;
					}else{
						this._enter2Tab(evt);
						return;
					}
				}
			}
		}
		if(this._isDelayQuery){
			this._closeAutoQueryFlag();
		}
		this.inherited(arguments);
	},

	_interestInKeyCode : function(evt) {
		var keyCode = evt.keyCode;
		var popUpWidget = this.getPopup()
		if(popUpWidget.isOpen() && keyCode!=dojo.keys.DOWN_ARROW && keyCode!=dojo.keys.UP_ARROW && keyCode!=dojo.keys.ENTER ){
				if(!this._isDelayQuery){
					popUpWidget._clearSelection();
				}
				this._oldValue = this.getText();
				popUpWidget.close();
		}
		if(keyCode = dojo.keys.ENTER){
			return null;
		}else{
			return !((keyCode<2 && keyCode!=dojo.keys.BACKSPACE)
					|| (keyCode>=33 && keyCode<=46) 
					|| (keyCode>=112 && keyCode<=123)
					|| (evt.ctrlKey&&keyCode==65));
		}
	},

	setValue: function(value){
		if ((value === "" || value ===undefined)&& !this._isClick) {
			value = null;
			this.getPopup()._clearSelection();
		}
		if(this.getDecoder().valueAttr != this.getDecoder().displayAttr && this.getDataProvider().getDataStore() == null && value!=null){
			this.getAutoCompleter()._sendQuery(value,true,true);
		}else{
			this._setValue(value);
			if(!this.readOnly && value){
                this.getValidator().validate();
			}
		}
	},
	
	onEnter : function(evt) {
		dojo.stopEvent(evt);
		if(this.disabled) return;
		if(this.iconClass == 'lemis-icon-formqsdel') {
			this._enter2Tab(evt);
			return false;
		}
		/* 修改 */
//		if (this.readOnly || ((this.onlySelect) && this.getPopup()._isSelecting() && this.inputNode && this.getText()))
//			return true;
		/* 修改 */
		var p = this.getPopup();
		if (!p._selection || p._selection.length == 0 || p._selection[0][this.getDecoder().displayAttr] != this.getText() || this.getDataProvider().getDataStore() == null){
			if(this.autoDialog && !this.quicksearchConfig){
				this._getQuicksearchConfig("popup");
				return false
			}else{
				this._closeAutoQueryFlag();
				this.getAutoCompleter()._sendQuery(this.getText());
				return false
			}
		}
		return true;
	},

	_onFocus : function(evt) {
		if(evt == undefined || evt == null){
			return;
		}
		if(this.disabled){
			dojo.stopEvent(evt);
			return;
		}
		this._tooglePrompt();
		this._hasBlur = false;
	},

	_onBlur : function(evt) {
		if(this.inputNode.value == ""){
			this.clear();
		}
		if (this.bindable) {
			this.inherited(arguments);
//			this.setValue(this.getText());
//			this.fireDataChange();
		}else{//不绑定数据的quicksearch当焦点离开的时候要设置为“”，然后在_tooglePrompt中改为提示信息
			this.setText("");
		}
//		if(this._hasBlur) return;
		if(this.onlySelect){
			if(this.values && this.values.length == 0){
				this.setValue("");
			}
			/*else{
				if(this.getText()!='' &&  !this._hasValue && !this._isDelayQuery)	{
					this.setValue("");
				}
			}*/
		}
		this._tooglePrompt();
		if (!this.readOnly && this._interestInBlur(evt)) {
			 this.getValidator().validate();
		}
		this._hasBlur = true;

	},
	
	onBeforeShowDialog : function(dlg){
		//wangc
		this.getAutoCompleter().onBeforeSendQuery(this.getAutoCompleter().params,null,this._getDialog());
		return true;
	},

	getAutoCompleter : function() {
		return unieap.getModuleInstance(this, "autoCompleter", "unieapx.form.QuickSearchAutoCompleter");
	},

//	getValue : function() {
//		return this.getText();
//	},

	_onIconClick : function(evt) {
		if(this.disabled || this.readOnly){
			dojo.stopEvent(evt);
			return;
		}
		if(this.getPopup().isOpen()) {
			dojo.stopEvent(evt);
			// @YangLingling 关闭弹窗
			this.getPopup().close();
			return;
		}
		if (this.iconClass == "lemis-icon-formqsdel") {
			if (this.onClear)
				this.onClear(evt);
			this.clear();
			/////////////////sun
			this.getPopup()._clearSelection();
		} else if (this.detailDialog) {
			var dlg = this._getDialog();
			if(dlg && this.onBeforeShowDialog && this.onBeforeShowDialog(dlg))
				this._getDialog().show();
		}else if(this.autoDialog){
			if(!this.quicksearchConfig)
				this.quicksearchConfig = this._getQuicksearchConfig("dialog");
			else{
				this._createAutoDialog(this.quicksearchConfig,this.config);
                // @sxf 点击icon触发enter展示下拉框
                if(unieap.fireEvent(this,this.onEnter,[evt])==false) return;
			}
		}
	},

	_changeValue: function(value,isBind) {
		if(this.onlySelect){
			if(this.values && this.values.length == 0){
				this.setValue("");
			}
		}
		//this.values = value==null?[]:value.toString().split(this.separator);
		this._updateText();
		this.fireDataChange();
		if(!isBind){
			this.getCascade().cascade();
		}
	},
	

	setText : function(value) {
		this.inherited(arguments);
		this._toogleIcon();
	},

	_toogleIcon : function() {
		// if(unieap.isUserStyle){
			if(this.bindable){
				if (this.getText() == "" || (this.getPromptManager() && this.getPromptManager().promptMsg && this.getText() == this.getPromptManager().promptMsg)) {
					this.setIconClass((this.autoDialog && (this.detailDialog || this._isDialogType))?"lemis-icon-formqsfind":"dataIconClick");
				} else {
					this.setIconClass("lemis-icon-formqsdel");
				}
				/*
				 * 判断detailDialog是否为空
				 * 为空标识没有设置开启弹层项，就隐藏查询图标
				 */
				if(this.detailDialog == ""){
					//this.setIconClass("lemis-icon-formqsdel");
//					this.iconNode.style.display="none";
//					this.iconNode.style.visibility="hidden";
				}
			}else{
				this.setIconClass((this.autoDialog && (this.detailDialog || this._isDialogType))?"lemis-icon-formqsfind":"dataIconClick");	
				/*
				 * 判断detailDialog是否为空
				 * 为空标识没有设置开启弹层项，就隐藏查询图标
				 */
				if(this.detailDialog == ""){
//					this.iconNode.style.display="none";
//					this.iconNode.style.visibility="hidden";
				}
			}
		// }
		
		// 源码
//		if(this.bindable){
//			if (this.getText() == "" || (this.getPromptManager() && this.getPromptManager().promptMsg && this.getText() == this.getPromptManager().promptMsg)) {
//				this.setIconClass((this.autoDialog && (this.detailDialog || this._isDialogType))?"lemis-icon-formqsfind":"lemis-icon-formqsfind-dis");
//			} else {
//				this.setIconClass("lemis-icon-formqsdel");
//			}
//		}
//		else
//			this.setIconClass((this.autoDialog && (this.detailDialog || this._isDialogType))?"lemis-icon-formqsfind":"lemis-icon-formqsfind-dis");	
	},

	_tooglePrompt : function(widget) {
		if(!widget)
			widget=this;
		if (!widget.bindable && widget.getPromptManager() && widget.getPromptManager().promptMsg) {
			if (widget.focused) {
				if (widget.getText() == widget.getPromptManager().promptMsg) {
					dojo.removeClass(widget.inputNode, "quicksearchPrompt");
					widget.setText("");
				}
			} else {
				if (widget.getText() == "" && !widget.getPopup().isOpen()) {
					dojo.addClass(widget.inputNode, "quicksearchPrompt");
					widget.setText(widget.getPromptManager().promptMsg);
				}
			}
		}
	},
	
	clear : function() {
		this.setValue(null);
		this.setText(null);
		this._isSetText = false;
		this._hasValue = false;
	},

	_getDialog : function() {
		if (!this._dlg) {
			this._dlg = unieap.byId(this._rootID ? this._rootID + this.detailDialog : this.detailDialog);
			if(this._dlg == undefined && _currentNodeOfSingleFrame && _currentNodeOfSingleFrame.id){
				this._dlg = unieap.byId(_currentNodeOfSingleFrame.id + this.detailDialog);
				this._dlg.domNode.notApplyWidget=true;
			}
			var me = this;
			this._dlg.onComplete = function(ds) {
				if (ds) {
					if(!(ds instanceof unieap.ds.DataStore)) ds = unieap.fromJson(ds);
					me.setText(ds.getRowSet().getItemValue(0, me.getDecoder().displayAttr));
					me.setValue(ds.getRowSet().getItemValue(0, me.getDecoder().valueAttr));
//					!me.readOnly && me.getValidator().validate();
					me.onComplete(ds);
					if (!me.bindable) {
						me.clear();
					}
					me._tooglePrompt();
				}
			}
		}
		return this._dlg;
	},
	
	onComplete: function(){
	},
	destroy: function(){
		while(this.connects.length){
			dojo.disconnect(this.connects.pop());
		}
		if(this.autoDialog){
			this.destroyAutoDialog();
		}
		this.inherited(arguments);
	},
	
	
	destroyAutoDialog:function(){
		if(this._autoDialogGrid){
			this._autoDialogGrid.destroy();
			this._autoDialogGrid=null;
		}
		if(this._autoDialogQuery){
			this._autoDialogQuery.destroy();
			this._autoDialogQuery=null;
		}
		if(this._autoDialogGridPane){
			this._autoDialogGridPane.destroy();
			this._autoDialogGridPane=null;
		}
		if(this._autoDialogQueryPane){
			this._autoDialogQueryPane.destroy();
			this._autoDialogQueryPane=null;
		}
		if(this._autoDialogQueryButton){
			this._autoDialogQueryButton.destroy();
			this._autoDialogQueryButton=null;
		}
		if(this._autoDialogSelectButton){
			this._autoDialogSelectButton.destroy();
			this._autoDialogSelectButton=null;
		}
		if(this._autoDialogToolbar){
			this._autoDialogToolbar.destroy();
			this._autoDialogToolbar=null;
		}
		if(this._autoDialog){
			this._autoDialog.destroy();
			this._autoDialog=null;
		}
	},
	
	//王凡添加
	_getQuicksearchConfig:function(type,sQuery,unBindStore){
		var config = this.config;
		if(!config) return;
		var _self = this;
		var url=unieap.WEB_APP_NAME+ "/techcomp/ria/commonProcessor?page="+unieap.WEB_PAGE_NAME;
	    var dc=new unieap.ds.DataCenter();
		dc.setParameter("_boId", "quicksearch_QuickSearchBOImpl_bo");
		dc.setParameter("_methodName", "getQuickSearch");
		dc.setParameter("_methodParameterTypes", "java.lang.String");
		dc.setParameter("id", config);
	    dc.setParameter("_parameters", "id");
	    dc.setParameter("_parameterTypes", "string");
	    unieap.Action.requestData({
	    	url:url,
	    	sync:true,
	    	load:function(dc){
			    if(_self.domNode && _self._isQuerySucceed(dc)){
			    	_self.quicksearchStore = dc.getSingleDataStore();
			    	var row = dc.getSingleDataStore().getRowSet().getRow(0);
			    	if(row){
				    	var max = row.getItemValue("max");
				    	var dialogMax = row.getItemValue("dialogMax");
				    	var structure = row.getItemValue("structure");
				    	var queryConfig = row.getItemValue("queryConfig");
				    	var valueAttr = row.getItemValue("valueAttr");
				    	var displayAttr = row.getItemValue("codeAttr");
				    	var queryMode = row.getItemValue("queryMode");
				    	var dialogType = row.getItemValue("dialogType");
				    	var dataSource = row.getItemValue("dataSource");
				    	var popupWidth = row.getItemValue("popupWidth");
				    	var codeAttrConfig = row.getItemValue("codeAttrConfig");
				    	if(codeAttrConfig){
				    		if(!_self.quicksearchConfig){
				    			_self.quicksearchConfig = {};
				    		}
				    		_self.quicksearchConfig["codeAttrConfig"] = codeAttrConfig;
				    	}
				    	var valueAttrConfig = row.getItemValue("valueAttrConfig");
				    	if(valueAttrConfig){
				    		if(!_self.quicksearchConfig){
				    			_self.quicksearchConfig = {};
				    		}
				    		_self.quicksearchConfig["valueAttrConfig"] = valueAttrConfig;
				    	}
//				    	var queryHql = row.getItemValue("queryHql");
//				    	var querySql = row.getItemValue("querySql");
//				    	
//				    	if(queryHql){
//				    		if(!_self.quicksearchConfig){
//				    			_self.quicksearchConfig = {};
//				    		}
//				    		_self.quicksearchConfig["queryHql"] = queryHql;
//				    	}else if(querySql){
//				    		if(!_self.quicksearchConfig){
//				    			_self.quicksearchConfig = {};
//				    		}
//				    		_self.quicksearchConfig["querySql"] = querySql;
//				    	}
				    	
				    	//展现模式：form或者advanceQuery
				    	var model = row.getItemValue("dialogType") || "formQuery";
				    	if(max){
				    		if(!_self.quicksearchConfig){
				    			_self.quicksearchConfig = {};
				    		}
				    		_self.quicksearchConfig["max"] = max;
				    	}
				    	if(dataSource){
				    		if(!_self.quicksearchConfig){
				    			_self.quicksearchConfig = {};
				    		}
				    		_self.quicksearchConfig["dataSource"] = dataSource;
				    	}
				    	if(dialogMax){
				    		_self._autoDialogPageSize = dialogMax;
				    	}
				    	if(structure){
				    		try{
				    			structure = dojo.fromJson(structure);
				    			if(!_self.quicksearchConfig){
				    				_self.quicksearchConfig = {};
				    			}
				    			_self.quicksearchConfig["structure"] = structure;
				    			_self.getPopup().setStructure(structure);
				    		}catch(e){
				    		}
				    	}
				    	if(popupWidth){
				    		_self.getPopup().width = popupWidth;
				    	}
				    	if(queryConfig){
				    		try{
				    			queryConfig = dojo.fromJson(queryConfig);
				    			if(!_self.quicksearchConfig){
				    				_self.quicksearchConfig = {};
				    			}
				    			_self.quicksearchConfig["queryConfig"] = queryConfig;
				    		}catch(e){
				    		}
				    	}
				    	if(model){
				    		_self.quicksearchConfig["model"] = model;
				    		_self._autoDialogModel = model;
				    	}
				    	_self._isDialogType = dialogType == null?false:true;
				    	_self._toogleIcon();
				    	if(queryMode){
				    		_self.quicksearchConfig["queryMode"] = queryMode;
				    		_self._isDelayQuery = queryMode=="enterQuery"?false:true;
				    	}
				    	if(valueAttr&&displayAttr){
				    		var d = _self.getDecoder();
				    		d.valueAttr= valueAttr;
				    		d.displayAttr= displayAttr;
				    	}
				    	if(type=="dialog"){
				    		_self._createAutoDialog(_self.quicksearchConfig,_self.config);
				    	}else if(type=="popup"){
				    		_self.getAutoCompleter()._sendQuery(_self.getText());
				    	}else if(type=="setValue"){
				    		_self.getAutoCompleter()._getQueryResult(sQuery,unBindStore,_self.quicksearchStore,dataSource,true);
				    	}
			    	}
				}
	    	}
	    },dc,false);
	},
	
	
	_getAutoDialogGrid:function(advanceQueryConfig){
		if(!this._autoDialogGrid){
			//显示行号
			var vm = {rowNumber: true,onRowClick:dojo.hitch(this,this._selectRow),onRowDblClick :dojo.hitch(this,this._doubleSelectRow)};
			//单选
			var selection={selectType:'single'};
			var binding = {rpc:dojo.hitch(this,this._bindingRpc)};
			var columns = [];
			//cell宽度
			var width = "150px";
			for(var key in advanceQueryConfig){
				if(advanceQueryConfig[key]["displayItem"]){
					var cellConfig = {};
					cellConfig["name"] = advanceQueryConfig[key]["sqlAttr"] || key||"";
					cellConfig["label"] = advanceQueryConfig[key]["label"]||"";
					cellConfig["width"] = advanceQueryConfig[key]["width"]||width;
					columns.push(cellConfig);
				}
			}
	        var header={rows:[columns]}
			var layout = [header];
			var grid = new unieap.xgrid.Grid({
				views: vm,
				selection:selection,
				binding:binding,
				height:"100%",
				layout: {structure:layout}
			});
			this._autoDialogGrid = grid;
		}
		return this._autoDialogGrid;
	},
	
	_getAutoDialogGridPane:function(config,boId,grid,advanceQuery){
		if(!this._autoDialogGridPane){
			var pane = new unieap.layout.TitlePane({
				title:"查询结果",
				height:"100%",
				flexible:false
			});
			this._autoDialogGridPane = pane;
		}
		if(!this._autoDialogSelectButton){
			this._autoDialogSelectButton = new unieap.form.Button({
				label:"选择",
				onClick:dojo.hitch(this,this._autoDialogSelect),
				config:boId,
				pageSize:config["max"]
			});
			dojo.place(this._autoDialogSelectButton.domNode,this._autoDialogGridPane.buttonContainerNode,0);
		}
		return this._autoDialogGridPane;
	},
	
	_getAutoDialogQueryPane:function(grid,advanceQuery,quicksearch,model){
		if(!this._autoDialogQueryPane){
			var pane = new unieap.layout.TitlePane({
				title:"查询条件",
				flexible:false
			});
			this._autoDialogQueryPane = pane;
		}
		if(!this._autoDialogQueryButton){
			this._autoDialogQueryButton = new unieap.form.Button({
				label:"查询",
				onClick:dojo.hitch(this,this._autoDialogQueryFun)
			});
			dojo.place(this._autoDialogQueryButton.domNode,this._autoDialogQueryPane.buttonContainerNode,0);
		}
		return this._autoDialogQueryPane;
	},
	
	_getAutoDialogQuery:function(advanceQueryConfig,model){
		if(!this._autoDialogQuery){
			if(model=="formQuery"){
				this._autoDialogQuery = this._createFormQuery(advanceQueryConfig);
			}else{
				var config = {};
				for(var name in advanceQueryConfig){
					if(advanceQueryConfig[name].queryItem){
						config[name]=advanceQueryConfig[name];
					}
				}
				this._autoDialogQuery = new unieapx.query.AdvancedQuery({
					config:config,
					showQueryToolBar:false
				});
			}
		}
		return this._autoDialogQuery;
	},
	
	
	
	
	
	_createWidget:function(name,config){
		var str="<td width=\"20%\">" + config["label"]+"</td><td width=\"30%\">";
		var store = config.store;
		var dataType = config.dataType;
		// 下拉列表和下拉树
		if(store != null && store != ""){
			widget = this._createSelectedWidget(name,config);
		}else{
			switch(dataType){
				case unieap.DATATYPES.BIGINT :
					widget = this._createIntegerWidget(name,config);
					break;
				case unieap.DATATYPES.BOOLEAN :
					widget = this._createSelectedWidget(name,config);
					break;
				case unieap.DATATYPES.DATE :
					widget = this._createDateWidget(name,config);
					break;
				case unieap.DATATYPES.DECIMAL :
					widget = this._createNumberWidget(name,config);
					break;
				case unieap.DATATYPES.DOUBLE :
					widget = this._createNumberWidget(name,config);
					break;
				case unieap.DATATYPES.FLOAT :
					widget = this._createNumberWidget(name,config);
					break;
				case unieap.DATATYPES.INTEGER :
					widget = this._createIntegerWidget(name,config);
					break;
				case unieap.DATATYPES.LONGVARCHAR :
					widget = this._createStringWidget(name,config);
					break;
				case unieap.DATATYPES.NUMERIC :
					widget = this._createNumberWidget(name,config);
					break;
				case unieap.DATATYPES.REAL :
					widget = this._createNumberWidget(name,config);
					break;
				case unieap.DATATYPES.SMALLINT :
					widget = this._createIntegerWidget(name,config);
					break;			
				case unieap.DATATYPES.STRING :
					widget = this._createStringWidget(name,config);
					break;
				case unieap.DATATYPES.TIME :
					widget = this._createDateWidget(name,config);
					break;		
				case unieap.DATATYPES.TIMESTAMP :
					widget = this._createTimestampWidget(name,config);
					break;
				case unieap.DATATYPES.TINYINT :
					widget = this._createIntegerWidget(name,config);
					break;
				case unieap.DATATYPES.VARCHAR :
					widget = this._createStringWidget(name,config);
					break;
				default :
					widget = this._createStringWidget(name,config);
			}
		}
		str+= widget + "</td>";
		return str;
	},
	
	_createNumberWidget:function(name,config){
		return "<div dojoType='unieap.form.NumberTextBox' width=\"100%\" binding=\"{name:'"+ name +"'}\"></div>"
	},
	_createIntegerWidget:function(name,config){
		return "<div dojoType='unieap.form.NumberTextBox' width=\"100%\" binding=\"{name:'"+ name +"'}\" rang=\"{allowDecimal:false}\"></div>"
	},
	_createStringWidget:function(name,config){
		return "<div dojoType='unieap.form.TextBox' width=\"100%\" binding=\"{name:'"+ name +"'}\"></div>"
	},
	_createTimestampWidget:function(name,config){
		return "<div dojoType='unieap.form.DateTextBox' width=\"100%\" binding=\"{name:'"+ name +"'}\" popup=\"{showsTime:24}\" displayFormatter=\"{dataFormat:"+ this._autoDialogDataFormat+"}\"></div>"
	},
	_createDateWidget:function(name,config){
		return "<div dojoType='unieap.form.DateTextBox' width=\"100%\" binding=\"{name:'"+ name +"'}\"></div>"
	},
	// 构造下拉列表类型组件。
	_createSelectedWidget:function(name,config){
		var displayAttr = config.displayAttr||"CODENAME";
		var valueAttr = config.valueAttr||"CODEVALUE";
		return "<div dojoType='unieap.form.ComboBox' width=\"100%\" binding=\"{name:'"+ name +"'}\" decoder=\"{displayAttr:'" + displayAttr +"',valueAttr:'" + valueAttr +"'}\" dataProvider=\"{store:'"+config.store+"'}\"></div>"
	},
	
	
	_createFormStore:function(advanceQueryConfig){
		var store = new unieap.ds.DataStore("_autoDialogFormDataStore");
	    var data = {};
	    var result={};
	    var count = 0;
		for(var name in advanceQueryConfig){
			if(advanceQueryConfig[name].queryItem){
				var alias = advanceQueryConfig[name].alias;
				if(alias){
					name = alias +"." + name;
					
				}
				data[name] = ""
				count++
			}
		}
		store.getRowSet().addRow(data);
		result.store =store;
		result.count = count;
		return result;
	},
	_createFormQuery:function(advanceQueryConfig){
		var result = this._createFormStore(advanceQueryConfig);
		var store = result.store;
		var count = result.count;
		var form = new unieap.form.Form({});
		var index = 0;
		var formHtml ="<table width=\"100%\">" ;
		for(var name in advanceQueryConfig){
			if(advanceQueryConfig[name].queryItem){
				index++;
				if(index == 1){
					formHtml+="<tr>";
				}
				var alias = advanceQueryConfig[name].alias;
				var allName = name;
				if(alias){
					allName = alias +"." + name;
					
				}
				formHtml += this._createWidget(allName,advanceQueryConfig[name]);
				if(index == 2){
					formHtml+="</tr>";
					index=0;
				}
			}
		}
		formHtml +="</table>";
		var formNode = form.domNode;
		formNode.innerHTML = formHtml;
		dojo.parser.parse(formNode);
		form.getBinding().setDataStore(store);
		return form;
	},
	
	_getAutoDialogTool:function(grid){
		if(!this._autoDialogToolbar){
			dojo.require("unieap.xgrid.core.toolbar");
			this._autoDialogToolbar = new unieap.xgrid.toolbar({
				grid:grid
			});
		}
		return this._autoDialogToolbar;
	},
	
	_createAutoDialog:function(config,boId){
		var _this = this;
		this.destroyAutoDialog();
		if(!this._autoDialog){
			if(!config) return;
			var advanceQueryConfig = config["queryConfig"];
			if(!advanceQueryConfig) return;
			var autoDialogHeight = "530";
			this._autoDialog = new unieap.xdialog.Dialog({
				id:"_quicksearchAutoXDialogId",
				title:"快速搜索",
				iconCloseComplete: true,
				height:autoDialogHeight,
				width:"600",
				onComplete : function(){
					_this.focus();
				}
			});
			this._autoDialog.show();
			var adaptiveContainer = new unieap.layout.AdaptiveContainer();
			var queryPane = new unieap.layout.AdaptivePane();
			var gridPane = new unieap.layout.AdaptivePane({
				autoHeight:true
			});
			var advanceQuery = this._getAutoDialogQuery(advanceQueryConfig,this._autoDialogModel);
			var queryTitle = this._getAutoDialogQueryPane(grid,advanceQuery,this,this._autoDialogModel);
			queryTitle.addChild(advanceQuery);
			var grid = this._getAutoDialogGrid(advanceQueryConfig);
			var gridTitle = this._getAutoDialogGridPane(config,boId,grid,advanceQuery);
			var toolbar = this._getAutoDialogTool(grid);
			grid.advanceQuery = advanceQuery;
			grid.toolBar = toolbar;
			gridTitle.addChild(grid);
			queryPane.addChild(queryTitle);
			gridPane.addChild(gridTitle);
			adaptiveContainer.addChild(queryPane);
			adaptiveContainer.addChild(gridPane);
			adaptiveContainer.placeAt(this._autoDialog.dialogMainContent);
			adaptiveContainer.notifyResize();
			this._autoDialog.domNode.notApplyWidget = true
		}else{
			this._autoDialog.show();
		}
	},
	
	_selectRow:function(evt){
		this._getAutoDialogGrid().getManager("SelectionManager").setSelect(evt.rowIndex,true);
	},
	_doubleSelectRow:function(evt){
		this._getAutoDialogGrid().getManager("SelectionManager").setSelect(evt.rowIndex,true);
		this._autoDialogSelect();
	},
	
	_bindingRpc:function(store,load,grid){
		var pageNumber = store.getPageNumber();
		var pageSize = store.getPageSize();
		this._setAutoDialogGridStore(this,pageNumber,pageSize);
	},
	
	_autoDialogSelect:function(){
		var selectedRows=this._getAutoDialogGrid().getManager('SelectionManager').getSelectedRows();
		if(selectedRows && selectedRows[0]){
			var value = selectedRows[0].getItemValue(this.getDecoder().valueAttr);
			if(value){
				var store = new unieap.ds.DataStore('quicksearch_autoDialog_datastore');
				store.getRowSet().addRow(selectedRows[0].getData());
				this.getDataProvider().setDataStore(store);
				//获取选中行数据；
				this._selectStore = store;
				this.setValue(value);
				this._isSetText = true;
				this.onComplete(store);
			}
		}
		if (!this.bindable) {
			this.clear();
		}
		this._tooglePrompt();
		this.focus();
		this._autoDialog.close();
		this.getDataProvider().setDataStore(null);
	},
	
	_autoDialogQueryFun:function(){
		this._setAutoDialogGridStore(this,1,this._autoDialogPageSize);
	},
	
	_setAutoDialogGridStore:function(quicksearch,pageNumber,pageSize){
		var url=unieap.WEB_APP_NAME+ "/techcomp/ria/commonProcessor!commonMethod.action?t=" + new Date().getTime();
	    var dc=new unieap.ds.DataCenter();
	    var advanceQuery = this._autoDialogQuery;
	    var dataSource = this.quicksearchConfig["dataSource"]
	    if(advanceQuery){
	    	if(this._autoDialogModel =="formQuery"){
	    		var store = advanceQuery.getBinding().getDataStore();
				dc.setParameter("_boId", "ria_quickSearchBO_bo");
				dc.setParameter("_methodName", "queryByFormCondition");
				dc.setParameter("_methodParameterTypes", "com.neusoft.unieap.techcomp.ria.quicksearch.dto.QuickSearch,java.util.Map,int,int,java.util.Map");
				dc.addDataStore("_autoDialogFormQueryStore", store);
				dc.setParameter("pageNumber",pageNumber);
				dc.setParameter("pageSize",pageSize);
				dc.addDataStore("config", this.quicksearchStore);
     			if(dataSource && dataSource != ""){
     				dc.setParameter("_dataSourceID", dataSource);
     			}
     			// add by lugj 增加弹出查询对onBeforeSendQuery的支持
    			var params = this.getAutoCompleter().onBeforeSendQuery(this.getAutoCompleter().params,dc);
    			dc.setParameter("params", params);
    			var p1 = "",p2 = "";
    			for(var key in params){
    				p1+=(","+key);
    				p2+=",string";
    				dc.setParameter(key, params[key]);
    			}
    			if(p1.length>1)
    				p1 = p1.substr(1);
    			if(p2.length>1)
    				p2 = p2.substr(1);
    			dc.setParameter("_parameters", "config,_autoDialogFormQueryStore,pageNumber,pageSize,params("+p1+")");
 			    dc.setParameter("_parameterTypes", "pojo,pojo,string,string,map("+p2+")");
 			    
			    unieap.Action.requestData({
			    	url:url,
			    	sync:false,
			    	load:function(dc){
					    if(quicksearch._isQuerySucceed(dc)){
					    	quicksearch._getAutoDialogGrid().getBinding().setDataStore(dc.getSingleDataStore());
						}
			    	}
			    },dc,false);
	    	}else{
			    var store = advanceQuery._queryGrid.getBinding().getDataStore();
				var conditionDS = advanceQuery._transformCondition(store);
			    dc.addDataStore(conditionDS);
				dc.setParameter("_boId", "ria_quickSearchBO_bo");
				dc.setParameter("_methodName", "queryByAdvanceCondition");
				dc.setParameter("_methodParameterTypes", "com.neusoft.unieap.techcomp.ria.quicksearch.dto.QuickSearch,int,int,java.util.Map");
				dc.setParameter("pageNumber",pageNumber);
				dc.setParameter("pageSize",pageSize);
				dc.addDataStore("config", this.quicksearchStore);
			    if(dataSource && dataSource != ""){
     				dc.setParameter("_dataSourceID", dataSource);
     			}
				// add by lugj 增加弹出查询对onBeforeSendQuery的支持
    			var params = this.getAutoCompleter().onBeforeSendQuery(this.getAutoCompleter().params,dc);
    			dc.setParameter("params", params);
    			var p1 = "",p2 = "";
    			for(var key  in params){
    				p1+=(","+key);
    				p2+=",string";
    				dc.setParameter(key, params[key]);
    			}
    			if(p1.length>1)
    				p1 = p1.substr(1);
    			if(p2.length>1)
    				p2 = p2.substr(1);
    			dc.setParameter("_parameters", "config,pageNumber,pageSize,params("+p1+")");
   			    dc.setParameter("_parameterTypes", "pojo,string,string,map("+p2+")");
   			    
			    unieap.Action.requestData({
			    	url:url,
			    	sync:false,
			    	load:function(dc){
					    if(quicksearch._isQuerySucceed(dc)){
					    	quicksearch._getAutoDialogGrid().getBinding().setDataStore(dc.getSingleDataStore());
						}
			    	}
			    },dc,false);
	    	}
	    }

	},
	
	_isQuerySucceed:function(dc){
		if (dc && dc.declaredClass == "unieap.ds.DataCenter"&& dc.getCode() >= 0) {
			return true;
		}else{
			var _this = this;
			dojo.require("unieap.dialog.MessageBox");
			MessageBox.alert({
				// 错误提示
				title : "错误提示",
				// "查询失败" ,
				message : "查询失败",
				onComplete : function(){
					_this.clear();
					_this.focus();
				}
			});
			return false;
		}
	}

});
dojo.provide("unieapx.exception.Handler");
unieapx.exception.Handler = {
		
	getBusinessExceptionType: function(){
		return 'businessException';
	},
	getSystemExceptionType: function(){
		return 'sytemException';
	},
	handleBusinessException : function(dc) {
		this._displayBusinessException(dc, unieapx.exception.Handler.getBusinessExceptionType());
	},
	handleSystemException : function(dc) {
		this._displayException(dc, unieapx.exception.Handler.getSystemExceptionType());
	},
	_displayException : function(dc, exType) {
		var _text = dc.getTitle() || RIA_I18N.rpc.saveError;
		var code = dc.getCode();
		var type;
		if(code<0){
			type = code < 0 ? 'error' : 'success'
		}
		_text = MessageBox._stringConvert(_text);
        MessageBox.alert({
			message : _text,
			type:type,
        });
		// var dialog = DialogUtil.showDialog( {
		// 	dialogData : {
		// 		dc : dc,
		// 		exType : exType
		// 	},
		// 	url : unieap.WEB_APP_NAME
		// 			+ "/techcomp/ria/unieapx/exception/error.jsp",
		// 	title : RIA_UNIEAPX_I18N.exception.title,
		// 	height : "118",
		// 	width : "400",
		// 	isExpand:false,
		// 	resizable:false
		// });
//		dialog.show();

	},
	
	_displayBusinessException:function(dc, exType) {
//		MessageBox.alert({title:'确认框',message:dc.header.message.title}); // MODIFY BY TENGYF
		if(unieap.recordScript){
			unieap.exceptionScriptDC = dc;
		}
		var messageTip=dc.header.message.title?dc.header.message.title:"系统服务异常";
		MessageBox.alert({title:RIA_UNIEAPX_I18N.exception.confirmTitle,message:messageTip});
	}

};

dojo.provide("unieapx.layout.NavigatorContainer");
dojo.require("unieap.layout.TabController");
dojo.require("unieap.layout.Container");
dojo.require("dijit._Templated");
dojo.declare("unieapx.layout.NavigatorContainer", [unieap.layout.Container,dijit._Templated], {
    /**
     * @declaredClass:
     * 		unieap.layout.TabContainer
     * @superClass:
     * 		unieap.layout.Container
     * @summary:
     * 		Tab容器
     * @classDescription：
     * 		Tab容器，以ContentPane作为其子容器。
     * 		可以指定Tab的显示位置。
     * @example:
     * |<div dojoType="unieap.layout.TabContainer"   tabPosition="left-h">
     * |	<div dojoType="unieap.layout.ContentPane" title="Tab1">
     * |		Hello Tab1!
     * |	</div>
     * |	<div dojoType="unieap.layout.ContentPane" title="Tab2">
     * |		Hello Tab2!
     * |	</div>
     * |</div>
     *
     */
	
	//配置属性接口
	UserInterfaces : dojo.mixin({
		tabPosition : "string",
		baseClass : "string",
		autoSwitchTab: "boolean",
		isCollectMenu:"boolean",
		collectMenu: "function",
		onAfterSelectChild: "function",
		onBeforeSelectTab: "function"
	},
	unieap.layout.Container.prototype.UserInterfaces),	
	
    templateString: "<div class='tabContainer'>" +
						"<div dojoAttachPoint='tabNest' style='height:100%' class=\"navigatorContainer-nest\">" +
    					"<div dojoAttachPoint='tablistContainer' class='navigator-scrolling-container'>"+
    						"<div dojoAttachPoint='collectMenuNode' class='navigatorBtn collectMenuNode'></div>"+
    						"<div dojoAttachPoint='refreshNode' class='navigatorBtn refreshNode'></div>"+
							"<div class='navigator-scrolling' dojoAttachPoint='scrollingNode'>"+
								"<div dojoAttachPoint='tablistNode'>" +
									"<div dojoAttachPoint='backNode' class='disableBackDiv'></div>"+
									"<div dojoAttachPoint='nextNode' class='disableNextDiv'></div>"+
								"</div>"+
							"</div>"+
						"</div>" +
    					"<div dojoAttachPoint='tablistSpacer' class='navigatorSpacer' style='dispaly:none;'></div>" +
    					"<div class='navigatorWrapper'  dojoAttachPoint='containerNode' style='overflow:hidden;'></div>" +
						"</div>" +
    				"</div>",
	
	/**
	 * @summary:
	 * 		Tab标签的位置
	 * @description:
	 * 		控制Tab标签的位置,默认为上
	 * @default：
	 * 		"top"
	 * @type:
	 * 		{string}
	 * @enum:
	 * 		{"top"|"bottom"|"left-h"|"right-h"}		
	 */
    tabPosition: "top",
    
    /**
	 * @summary:
	 * 		自动切换到鼠标移动到的tab页
	 * @description:
	 * 		控制Tab页是否鼠标移动其上，能够自动切换到相应的页
	 * @default：
	 * 		false
	 * @type:
	 * 		{boolean}
	 */
    autoSwitchTab : false,
	
    baseClass: "navigatorContainer",
	
	//_Widget里的startup()方法维护了此属性
//	_started: false,
	
	/**
	 * @summary:
	 * 		Tab的默认高度
	 * @default：
	 * 		"400px"
	 * @type:
	 * 		{string}		
	 */
	height:'auto',
	
	scroll:null,
	
	navigatorList: null,
	
	closedNavigatorList: null,
	
	currentTitle: "",
	
	_canRefresh: true,
	
	showNavigator: (typeof(unieap.widget.navigator.showNavigator) == 'undefined')?true:unieap.widget.navigator.showNavigator,
	
	alwaysShowNavigator: (typeof(unieap.widget.navigator.alwaysShowNavigator) == 'undefined')?true:unieap.widget.navigator.alwaysShowNavigator,
   
	onCompletePrePage : false,
	
	_afterLoadPage:null,
	
	isCollectMenu:false,
	
	
	_menuNode:null,
	_menuNodeHandle:null,
	
	setOnCompletePrePage : function(onCompletePrePage){
		this.onCompletePrePage = onCompletePrePage;
	},
	getOnCompletePrePage : function(){
		return this.onCompletePrePage;
	},
	
	tablistsize:40+2 , //tab butotn的高度 + 1px tabSpacer
	
	getScroll: function() {
		return unieap.getModuleInstance(this,"scroll","unieap.layout.TabScrollProvider");
	},
    
	postCreate: function(){
		this.inherited(arguments);
		if(!unieap.bootstrapMenu){
			this.tablistsize = 24;
		}
		this.navigatorList = [];
		this.navigatorSubscribe = [];
		this.closedNavigatorList = [];
		var pos = this.tabPosition.charAt(0).toUpperCase() + this.tabPosition.substr(1).replace(/-.*/, "");
		this.baseClass += pos;
		dojo.addClass(this.domNode, this.baseClass); 	//tabContainerTop
		dojo.addClass(this.tablistContainer,'navigator-scrolling-container'+pos);
		dojo.isIE!=6&&dojo.addClass(this.tablistSpacer,'tabSpacer'+pos);
		dojo.addClass(this.containerNode,'navigatorWrapper'+pos);
		
        //创建TabController
        dojo.require("unieapx.layout.NavigatorController");
        var NavigatorController = dojo.getObject("unieapx.layout.NavigatorController");
        this.tablist = new NavigatorController({
            id: this.id + "_tablist",
            tabPosition: this.tabPosition,
            container: this,
            autoSwitchTab : this.autoSwitchTab,
			style:"height:'100%'",
            "class": this.baseClass + "-tabs" ,//tabContainerTop-tabs
            onBeforeSelectTab: this.onBeforeSelectTab
        }, this.tablistNode);
        /*
         * 解决第一次展现页面时多个tab页面的信息瞬间显示在同一个页面的问题
         * U_EAP00019316
         */
        dojo.forEach(this.containerNode.children,function(child){
        	dojo.style(child,"display","none");
        },this);
        this.connects = [];
        this.connects.push(dojo.connect(this.backNode,'onclick',this,'prePage'));
        this.connects.push(dojo.connect(this.refreshNode,'onclick',this,'refresh'));
        this.connects.push(dojo.connect(this.collectMenuNode,'onclick',this,'collectMenu')); 
         this.connects.push(dojo.connect(this.collectMenuNode,'onmouseover',this,'setStarInfoTip')); 
		if(!this.showNavigator){
			dojo.style(this.tablistContainer, "display", "none");
		}
		else if(!this.alwaysShowNavigator){
			dojo.style(this.tablistContainer, "display", (this.navigatorList.length <= 1)?"none":"block");
		}
//		this.collectMenuStar(this.isCollectMenu);	
    },
    
    collectMenuStar:function(isCollected){ 
    	if(isCollected == true){
    		dojo.removeClass(this.collectMenuNode,"collectMenuNode");
    		dojo.addClass(this.collectMenuNode,"collectMenuNodeSelect");
//    		dojo.style(this.collectMenuNode,"color","#ffc40d");
		}else if(isCollected == false){
    		dojo.addClass(this.collectMenuNode,"collectMenuNode");
    		dojo.removeClass(this.collectMenuNode,"collectMenuNodeSelect");
//    		dojo.style(this.collectMenuNode,"color","#000");
		}else{
		}
    },
    setCollectMenuStar:function(obj){ 
    	this.collectMenuStar(obj);
    },
    // 鼠标悬停在星星上时 给出提示信息
     setStarInfoTip:function(){ 
//    	if(this.isCollectMenu){
//    		this.collectMenuNode.title = "修改此页的收藏夹";
//    	}else{
//    		this.collectMenuNode.title = "为此页添加收藏";
//    	}
	this.collectMenuNode.title = "菜单收藏";
    },
    
        // 弹出收藏夹编辑对话框
    collectMenu:function(){
    	this.createDialog();
    }, 
    // 创建对话框
    createDialog:function(){
 		var menuId = null;
 		var pageId = unieap.getTopWin()._currentSelectedPageId;// childMenu.js
 		menuId = pageId.substring(5);// 获取menuId,pageId = "page_" + meunId
 		var title = unieap.getTopWin()._currentSelectedPageTitle;
 			// 创建对话框
 			var dialog = XDialogUtil.createDialog({	
 				url: unieap.WEB_APP_NAME + "/techcomp/ria/menuFavoriteDialog-view.jsp",
 				title:"已收藏的菜单",
 				dialogData:{title:title,menuId:menuId},
 				height:"150",
 				width:"300",
 				isExpand:false,
 				onComplete:dojo.hitch(this,this.setCollectMenuStar)
 			});	
 			dialog.show();
    },
    
	/**
	 * @summary:
	 * 		点击Tab页前触发的事件
	 * @param:
	 * 		{object} contentPane Tab页,目前只接收unieap.layout.ContentPane对象
	 * @return
	 * 		Boolean 返回false则不加载点击的Tab页
	 * @example:
	 * |<div dojoType="unieap.layout.TabContainer" id="tabcontainer" style="height:200px;" onBeforeSelectTab="fn">
	 * |function fn(contentPane){
	 * |	unieap.debug(contentPane);
	 * |    return false;
	 * |}
	 */
	onBeforeSelectTab: function(contentPane){
	},
	
	onAfterSelectChild: function(page, oldPage){
	},
	
	onBeforeRefresh: function(){
	},
	
	_setupChild: function(/* Widget */child){
        dojo.addClass(child.domNode, "tabPane");
		dojo.style(child.domNode, "overflow","visible");
		dojo.style(child.domNode, "position","relative");
		
		//去掉鼠标悬停时的title显示
		child.domNode.title = "";
		//add 修改孩子widget的_inTabContainer属性
		if("_inTabContainer" in child) {
			child._inTabContainer=true;
			child.tabContainer = this;
		} 
    },
    
   startup: function(){
		if(!this._started) {
			//目前此方法是空实现（wire up the tablist and its tabs ）
	        this.tablist.startup();	
			
			var children = this.getChildren();
			// 每个孩子page的初始化
			dojo.forEach(children, this._setupChild, this);
			dojo.some(children, function(child){
				if(child.selected){
					this.selectedChildWidget = child;
				}
				return child.selected;
			}, this);
			
			var selected = this.selectedChildWidget;
			if(!selected && children[0]){
				selected = this.selectedChildWidget = children[0];
				selected.selected = true;
			}
	
			//发布startup()事件
			dojo.publish(this.id+"-startup", [{children: children, selected: selected}]);
			
			this.layout();
			//执行选中某节点时会进行resizeContainer
			if(selected) {
				this._showChild(selected);
			}
			this._started = true;
			for(var i=0; i<children.length; i++){
				if(children[i].hidden){
					this.hideTabButton(children[i]);
				}
				/*
				 * @author
				 * 		zhengh
				 * @sumarry
				 * 		初始化Tab容器时，将enabled属性为false的Tab页设置为不可编辑
				 */
				if(!children[i].enabled){
					this._disableTabButton(children[i]);
				}
			}
		}
		this.inherited(arguments);
    },
	
	resizeContainer: function() {
		if(null == this.domNode) return;
		this.resize();
		this.resizeChildrenContainer();
//		this._showMenuNode();
	},
	
	notifyParentResize: function() {
	},
	
	resize: function() {
		this.layout();
	},
	
	_interestShowNavigator: function(){
		if(!this.alwaysShowNavigator && this.showNavigator){
			var displayCss = dojo.style(this.tablistContainer, "display");
			dojo.style(this.tablistContainer, "display", this.navigatorList.length <= 1?"none":"block");
			if(displayCss != dojo.style(this.tablistContainer, "display")){
				this.layout();
			}
		}
	},
	layout: function() {
		if(this.domNode.offsetHeight == 0) { return;}
		this._calculaBorder();
		var pos = this.tabPosition.replace(/-.*/, "");
		var tablistsize = this.tablistsize;
		if(this.navigatorList.length <= 1 && !this.alwaysShowNavigator){
			tablistsize = 0;
		}
		if(!this.showNavigator){ //U_EAP00029239
			tablistsize = 0;
		}
		if(pos == 'left' || pos == 'right') {
//			this.containerNode.style.width = this.domNode.clientWidth - this.tablistsize + 'px';
			var h = this._adjustSize(this.domNode.clientHeight - 2*this.borderSize);
			this.containerNode.style.height = h;
			this.tablistContainer.style.height = h;
		} else if(pos == 'bottom') {
			dojo.place(this.tablistContainer,this.tabNest,'last');
			dojo.place(this.tablistSpacer,this.tablistContainer,'before');
			if(this.height!="auto"){
				this.containerNode.style.height = this._adjustSize(this.domNode.clientHeight - tablistsize);
			}
		} else { // top
			if(this.height!="auto"){
				// this.containerNode.style.height = this._adjustSize(this.domNode.clientHeight - tablistsize - this.borderSize);
				this.containerNode.style.height = this._adjustSize(this.domNode.clientHeight  - this.borderSize);
			}
		}
		
		//如果contentPane没设置高度，则高度为100%
		if(this.height!="auto"&&this.selectedChildWidget && this.selectedChildWidget instanceof unieap.layout.Container) {
			this.selectedChildWidget.setHeight('100%');
		} 
		
		this.getScroll().calculateScroll();
	},
	
	
	// 校正计算值
	_adjustSize: function(size) {
		if(size < 0) {
			return '0px';
		} else {
			return size + 'px';
		}
	},
	
	_calculaBorder: function() {
		//CSS1Compat  引DOCTYPE
		//BackCompat  未引DOCTYPE
		if(dojo.isIE && dojo.doc.compatMode == "BackCompat") {//IE下，在不引DOCTYPE的情况下，border不占宽度
			this.borderSize = 0;
		} else {
			this.borderSize = 1;
		}
	},
	
	/**
	 * @summary:
	 * 		增加一个Tab页
	 * @param:
	 * 		{object} page Tab页,目前只接收unieap.layout.ContentPane对象
	 * @param:
	 * 		{object} insertIndex 插入的位置
	 * @param:
	 * 		{boolean} needselected 是否增加一个Tab页后就选择该Tab页，默认选中
	 * @example:
	 * |unieap.byId('createTab').addChild(new unieap.layout.ContentPane({
	 * |	title: "新增的Tab页"
	 * |}));
	 */
	addChild:function(page,insertIndex,needSelected){
		this.navigatorList.push(page);
		this.test = "abc"+page.id;
		
		if (!page instanceof unieap.layout.ContentPane) {
			return;
		}
		typeof(needSelected)=='undefined'&&(needSelected=true);
		needSelected=!!needSelected
		page._inTabContainer=true;
		if(this.getIndexOfChild(page)!=-1){
			this.selectChild(page)
		}else{
			this.inherited(arguments);
			if(this._started){
				dojo.publish(this.id+"-addChild", [page, insertIndex]);
				this.layout();
				//选中新增page
				if(needSelected){
					this.selectChild(page);
				}else{
					dojo.removeClass(page.domNode, "unieapVisible");
					dojo.addClass(page.domNode, "unieapHidden");
				}
			}
		}
		this._interestShowNavigator();
	},
	/**
	 * @summary:
	 * 		删除一个Tab页
	 * @param:
	 * 		{object} page Tab页,目前只接收unieap.layout.ContentPane对象
	 * @example:
	 * |var pane = unieap.byId('aContentPane');
	 * |unieap.byId('aTabContainer').removeChild(pane);
	 */
	removeChild: function(/*Widget*/ page){
		// Overrides Container.removeChild() to do layout and publish events
//		this.inherited(arguments);
		
		
		// If we are being destroyed than don't run the code below (to select another page), because we are deleting
		// every page one by one
		if(this._beingDestroyed){ return; }

		if(this._started){
			// this will notify any tablists to remove a button; do this first because it may affect sizing
			dojo.publish(this.id+"-hideTabButton", [page]);

			this.getScroll().calculateScroll();
		}
		//如果被删除节点是当前选中节点，在删除后将TabContainer第一个子节点选中
		if(this.selectedChildWidget === page){
			this.selectedChildWidget = undefined;
			if(this._started){
				var children = this.getChildrenNotHidden();
				if(children.length){
					this.selectChild(children[0]);
				}
			}
		}
	},
	
	/**
	 * @summary:
	 * 		选择某个Tab页
	 * @description
	 * 		注意参数不是index,而是contentPane对象
	 * @param: 
	 * 		{object} page contentPane对象
	 * @example:
	 * |var contentPane = unieap.byId("contentpane1");
	 * |unieap.byId("tabContainer").selectChild(contentPane);
	 */
	selectChild:function(page){
		//可以接受id或JS对象
		var page = unieap.byId(page);
		//隐藏的page，不能选中
		if(page.hidden == true) {
			return;
		}
		if(this.selectedChildWidget){
			//原TabButton取消选中状态
			var oldButton=this.tablist.pane2button[this.selectedChildWidget];
			oldButton.setSeleted(false);
		}
		//设置TabButton选中状态
		var newButton=this.tablist.pane2button[page];
		newButton.setSeleted(true);
		if(this.selectedChildWidget != page){
			var oldpage = this.selectedChildWidget;
			this.selectedChildWidget = page;
			this._transition(page, oldpage);
			this._doSelect(page);
			this._changeBackClass();
			//dojo.publish(this.id+"-selectNavigator", [page]);
			this.onAfterSelectChild(page, oldpage);
		}
//		this.getSroll().isShowing&&this.getScroll().needScroll(page);
	},
	
	_doSelect: function(page){
		var navigatorPane = this.navigatorList.pop();
		while(page != navigatorPane && this.navigatorList.length>0){
			page.getParentContainer().removeChild(navigatorPane);
			this.closedNavigatorList.push(navigatorPane);//保留已经打开的页面；
			navigatorPane = this.navigatorList.pop()
		}
		this.navigatorList.push(navigatorPane);
		if(navigatorPane._navigatorPaneSubscribe && navigatorPane._navigatorPaneSubscribe[page.parentContainer.title]){
			   if(!this.getOnCompletePrePage() && navigatorPane._navigatorPaneSubscribe[page.parentContainer.title].onCompleteByClick){
					navigatorPane._onComplete = navigatorPane._navigatorPaneSubscribe[page.parentContainer.title].method;
					navigatorPane._onComplete(null);					
			   }				  
		}				
		page.parentContainer.title=this.getSelectedTab().title;
		this._interestShowNavigator();
	},
	
	/**
	 * @summary:
	 * 		打开已经打开过的NavigatorPane
	 * @param: 
	 * 		{string} href NavigatorPane的href
	 */
	openPane: function(href, dc, title){
		if(0 == this.closedNavigatorList.length) return false;
		var closedPane = this.closedNavigatorList.pop();
		var tempClosedPaneList = [];
		//遍历查找关闭的navigatorPane是否存在将要打开的pane
		while(href != closedPane.href && this.closedNavigatorList.length>0){
			tempClosedPaneList.push(closedPane);
			closedPane = this.closedNavigatorList.pop();
		}
		
		for(var i = 0, l = tempClosedPaneList.length; i < l; ++i){
			this.closedNavigatorList.push(tempClosedPaneList.pop());
		}
		
		if(href == closedPane.href){
			closedPane.data = dc;
			if(dc && dc.declaredClass === "unieap.ds.DataCenter"){
				closedPane.origparameters = {};
				for(var a in closedPane.parameters){
					closedPane.origparameters[a] = dc.parameters[a];
				}
			}
			closedPane.currentTitle = closedPane.title = title; //U_EAP00029238
			this.addChild(closedPane);
			dojo.publish(this.id+"-showTabButton", [closedPane]);
			closedPane.controlButton.setTitle(title);
			return true;
		}else{
			this.closedNavigatorList.push(closedPane);
		}
		return false;
	},
	
	_changeBackClass: function(){
		if(this.navigatorList.length > 1){
			!dojo.hasClass(this.backNode,"backDiv") && dojo.addClass(this.backNode,"backDiv");
			dojo.removeClass(this.backNode,"disableBackDiv");
		}else{
			!dojo.hasClass(this.backNode,"disableBackDiv") && dojo.addClass(this.backNode,"disableBackDiv");
			dojo.removeClass(this.backNode,"backDiv");
		}
		this._interestShowNavigator();
	},
	
	prePage: function(dc){
		if(1 == this.navigatorList.length) return;
		var navigatorPane = this.navigatorList.pop(),
			selectedNavigatPane = this.navigatorList.pop();
		this.navigatorList.push(selectedNavigatPane);
		this.navigatorList.push(navigatorPane);
		//selectedNavigatPane.data = dc;
	    this.setOnCompletePrePage(true);
		this.selectChild(selectedNavigatPane);
		this._interestShowNavigator();
			//当点击回退按钮时，没有返回数据，不比调用回调函数。
		if(!dc && selectedNavigatPane._onComplete){
			selectedNavigatPane._onComplete();//zhaohf 如果没有参数，可调用默认的回调函数，不传入参数，比如取消时也可以回调
		}else{
			(dc && (!dc.target || (dc.target.className !== "backDiv"))) && selectedNavigatPane._onComplete(dc);
		}
		this.setOnCompletePrePage(false);
	},
	
	onCompleteClick : function(title){	
		var navigatorPane = this.navigatorList.pop(),
			selectedNavigatPane = this.navigatorList.pop();
		this.navigatorList.push(selectedNavigatPane);
		this.navigatorList.push(navigatorPane);
		if(selectedNavigatPane._navigatorPaneSubscribe){
			selectedNavigatPane._onComplete = selectedNavigatPane._navigatorPaneSubscribe[title].method;
		}					
	},
	/**
	 * @summary:
	 * 		刷新当前导航页
	 * @example:
	 */
	refresh: function(showXhrLoading){
		//快速连续刷新由于页面没有渲染完可能会导致错误
		if(!this._canRefresh) return;
		unieap.fireEvent(this,this.onBeforeRefresh,[this]);
		var self = this;
		this._canRefresh = false;
		setTimeout(function(){
			self._canRefresh = true;
		},1000);
		var currentTab = this.getSelectedTab(),
		parentContainer = currentTab.getParentContainer();
		//当用iframe方式加载的时候currentTab.getParentContainer()为undefined，因为是iframe方式也就不用做销毁处理了。
		if(parentContainer){
		if(parentContainer.getParentContainer && parentContainer.getParentContainer()){
				unieap.destroyWidgets(currentTab.domNode);
			}else{
				unieap.destroyWidgets(document.body);
			}
		}
		if(currentTab.href){
			//刷新之前首先解除之前页面的发布订阅，否则影响后续逻辑执行以及内存泄露
//			if(parentContainer){
//				var topics = unieap.getTopWin().dojo._topics[parentContainer.id + currentTab.title];
//				if(typeof topics != 'undefined')  topics._listeners = [];
//			}
			dojo.forEach(currentTab.navigatorSubscribe, unieap.getTopWin().dojo.unsubscribe);
			unieap.loader.load( {
				 node : currentTab.domNode,
				 showXhrLoading : !showXhrLoading,
				 url : currentTab.href,
				 _afterPageLoad:this._afterPageLoad
			 });
		}
		//恢复数据
		var data = currentTab.data;
		//用户在刷新以后给页面传递的数据，数据是非DataCenter或者DataStore类型的object
		if(this.onAfterRefresh()){
			data = this.onAfterRefresh();
		}else if(data && data.declaredClass === "unieap.ds.DataCenter"){ //原始传入的是dataCenter
			var stores = data.getDataStores();
			for(store in stores){
				var rowSet = stores[store].getRowSet();
				rowSet && rowSet.discardUpdate();
			}
		}else if(data && data.declaredClass === "unieap.ds.DataStore"){  //原始传入的是dataStroe
			var rowSet = data.getRowSet();
			rowSet && rowSet.discardUpdate();
		}else{
			data = currentTab.origValue;       //原始传入的是普通的数据，如number或者string类型的简单类型数据
		}
		for(var a in currentTab.origparameters){
			data.parameters[a] = currentTab.origparameters[a];
		}
		unieap.destroyDialogAndMenu(currentTab);
		unieap.destroyDialogAndMenu(this.getParentContainer());
	},
	
	//刷新以后给页面传递的数据
	onAfterRefresh: function(){
		return null;
	},
	/**
	 * @summary:
	 * 		得到当前选中的Tab页
	 * @return:
	 * 		{Object} 当前选中的Tab页，如果没有tab页，则返回null
	 * @example:
	 * |var contentPane = unieap.byId("contentpane1");
	 * |unieap.byId("tabContainer").selectChild(contentPane);
	 * |var selectPane = unieap.byId("tabContainer").getSelectedTab();
	 */
	getSelectedTab:function(){
		return this.selectedChildWidget||null;
	},
	
	_transition: function(/*Widget*/newWidget, /*Widget*/oldWidget){
		if(oldWidget){
			this._hideChild(oldWidget);
		}
		this._showChild(newWidget);
	},
	
	_showChild : function(page){
		var children = this.getChildren();
		page.selected = true;

		dojo.removeClass(page.domNode, "unieapHidden");
		dojo.addClass(page.domNode, "unieapVisible");
		
		//在显示后计算
		this.resizeContainer();
		
		if(page._onShow){
			page._onShow(); // trigger load in ContentPane
		}else if(page.onShow){
			page.onShow();
		}
	},
	
	_showMenuNode:function(){
		var topWin = unieap.getTopWin();
		if(topWin.unieap){
			var menuTab = topWin.unieap.byId("framePageContainer");
			if(menuTab.hideTitle){
				var scroll = menuTab.getScroll();
				if(!this._menuNode){
					this._menuNode=dojo.create('div',{'class':'tabward'},this.tablistContainer,'first');
					dojo.addClass(this._menuNode,'fa');
					dojo.addClass(this._menuNode,'fa-bars');
					dojo.addClass(this._menuNode,'eapHiddenMenu');
					dojo.addClass(this.collectMenuNode,'collectMenuDivWithEapMenu');
					this._menuNodeHandle = dojo.connect(this._menuNode,'onclick',scroll,'topMenuward');
				}
			}else{
				dojo.removeClass(this.collectMenuNode,'collectMenuDivWithEapMenu');
				if(this._menuNode){
					dojo.destroy(this._menuNode);
					this._menuNode = null;
				}
				if(this._menuNodeHandle){
					dojo.disconnect(this._menuNodeHandle);
					this._menuNodeHandle = null;
				}
			}
		}
	},
    
	_hideChild: function(/*Widget*/ page){
		page.selected = false;
		dojo.removeClass(page.domNode, "unieapVisible");
		dojo.addClass(page.domNode, "unieapHidden");

		if(page.onHide){
			page.onHide();
		}
	},
	
	closeChild: function(/*Widget*/ page){
		var remove = page.onClose(this, page);
		if(remove){
			this.removeChild(page);
			// makes sure we can clean up executeScripts in ContentPane onUnLoad
			page.destroyRecursive();
		}
	},
	
	//隐藏
	hideTabButton: function(page) {
		if(this._started){
			dojo.publish(this.id+"-hideTabButton", [page]);
			
			this.getScroll().calculateScroll();
			
			//如果被删除节点是当前选中节点，在删除后将TabContainer第一个子节点选中
			if(this.selectedChildWidget === page){
				var children = this.getChildrenNotHidden();
				if(children.length){
					this.selectChild(children[0]);
				}
			}
		}
	},
	
	//设置Tab页不可编辑
	_disableTabButton: function(page){
		if(this._started){
			dojo.publish(this.id+"-disableTabButton",[page]);
			this.getScroll().calculateScroll();
			//如果被设置不可编辑的节点是当前选中节点，在删除后将TabContainer第一个子节点选中
			if(this.selectedChildWidget === page){
				var children = this.getChildrenEnabled();
				if(children.length){
					this.selectChild(children[0]);
				}
			}
		}
	},
	
	/**
	 * @summary:
	 * 		设置某个Tab页可编辑
	 * @param: 
	 * 		{string} contentPane ID
	 * @example:
	 * |unieap.byId("tabContainer").enableTabButton(contentpane1);
	 */
	enableTabButton: function(contentPaneId){
		var page = unieap.byId(contentPaneId);
		if(this._started){
			dojo.publish(this.id+"-enableTabButton",[page]);
			this.getScroll().calculateScroll();
		}
	},
	/**
	 * @summary:
	 * 		设置某个Tab按钮编辑状态
	 * @param: 
	 * 		{string} contentPane ID
	 * @param: 
	 * 		{boolean} 是否可编辑
	 * @example:
	 * |unieap.byId("tabContainer").setTabButtonState(contentpane1,false);
	 */
	setTabButtonState:function(contentPaneId,state){
		var page = unieap.byId(contentPaneId);
		if(this._started){
			dojo.publish(this.id+"-setTabButtonState",[page,state]);
			this.getScroll().calculateScroll();
		}
	},
	
	showTabButton: function(page) {
		if(this._started){
			dojo.publish(this.id+"-showTabButton", [page]);
			this.getScroll().calculateScroll();
		}
	},
	
	/**
	 * @summary:
	 * 		动态设置ContentPane在Tab页中的隐藏
	 * @description：
	 * 		如果该Tab正在被选中，隐藏后会自动选中TabContainer中第一个Tab页
	 * @example:
	 * |<div dojoType="unieap.layout.TabContainer" id="containerId" style="width:400px;height:400px;">
	 * |	<div id="test1" dojoType="unieap.layout.ContentPane" title="测试一"></div>
	 * |	<div id="test2" dojoType="unieap.layout.ContentPane" title="测试二"></div>
	 * |</div>
	 * |<script>
	 * |	//设置Tab页隐藏
	 * |	function hideTab(){
	 * |		var tabContainer = unieap.byId('containerId');
	 * |		tabContainer.hideTab('test2');
	 * |	}
	 * |</script>
	 */
	hideTab: function(id){
		var contentPane = unieap.byId(id);
		if(contentPane && contentPane._inTabContainer){
			contentPane.hidden = true;
			this.hideTabButton(contentPane);
		}
	},
	/**
	 * @summary:
	 * 		动态设置ContentPane在Tab页中的显示
	 * @param: 
	 * 		{string} Tab容器内的ContentPane Id
	 * 		{boolean} 显示后是否默认选中，默认为false，不选中
	 * @example:
	 * |<div dojoType="unieap.layout.TabContainer" id="containerId" style="width:400px;height:400px;">
	 * |	<div id="test1" dojoType="unieap.layout.ContentPane" title="测试一"></div>
	 * |	<div id="test2" dojoType="unieap.layout.ContentPane" title="测试二" hiden="true"></div>
	 * |</div>
	 * |<script>
	 * |	//显示测试二Tab页并选中
	 * |	function showTab(){
	 * |		var tabContainer = unieap.byId('containerId');
	 * |		tabContainer.showTab('test2',true);
	 * |	}
	 * |</script>
	 */
	showTab: function(id,select) {
		var contentPane = unieap.byId(id);
		if(contentPane._inTabContainer){
			contentPane.hidden = false;
			this.showTabButton(contentPane);
			if(select){
				this.selectChild(contentPane);
			}
		}
	},
	
	getChildrenNotHidden: function() {
		var allChildren = this.getChildren();
		var children = [];
		for(var i=0; i<allChildren.length; i++){
			if(allChildren[i].hidden == false) {
				children.push(allChildren[i]);
			}
		}
		return children;
	},
	
	getChildrenEnabled: function(){
		var allChildren = this.getChildren();
		var children = [];
		for(var i = 0; i < allChildren.length; i++){
			if(allChildren[i].enabled){
				children.push(allChildren[i]);
			}
		}
		return children;
	},
	
	_adjacent: function(/*Boolean*/ forward){
		// summary:
		//		Gets the next/previous child widget in this container from the current selection.
		var children = this.getChildren();
		var index = dojo.indexOf(children, this.selectedChildWidget);
		index += forward ? 1 : children.length - 1;
		return children[ index % children.length ]; // dunieap_Widget
	},

	forward: function(){
		// summary:
		//		Advance to next page.
		this.selectChild(this._adjacent(true));
	},

	back: function(){
		// summary:
		//		Go back to previous page.
		this.selectChild(this._adjacent(false));
	},
	
	_getTabWidth : function() {
		var width = 0;
		dojo.forEach(this.tablist.getChildren(), function(p) {
			width += p.getWidth();
		}, this);
		return width;
	},
	
	
	_getTabHeight : function(){
		var height = 0;
		dojo.forEach(this.tablist.getChildren(), function(p) {
			height += p.getHeight();
		}, this);
		return height;				
	},
	
	
    destroy: function(){
		dojo.forEach(this.navigatorSubscribe, unieap.getTopWin().dojo.unsubscribe);
		this.navigatorSubscribe = null;
    	for(var i = 0, l = this.closedNavigatorList.length; i < l; ++i){
			var pane = this.closedNavigatorList.pop();
			pane.destroy();
		}
		
		
        if (this.tablist) {
            this.tablist.destroy();
        }
		if(this.scroll) {
			this.scroll.destory();
		}
		this._beingDestroyed = true;
        this.inherited(arguments);
        while(this.connects.length){
			dojo.disconnect(this.connects.pop());
		}
    }
});


dojo.provide("unieapx.layout.NavigatorController");

dojo.require("unieap.menu.Menu");
dojo.require("unieap.layout.Container");
dojo.require("dijit._Templated");
dojo.declare("unieapx.layout.NavigatorController", [unieap.layout.Container,dijit._Templated], {
	/*
     * @declaredClass:
     * 		unieap.layout.TabController
     * @summary:
     * 		控制Tab页控制类，增加TabButton、控制Tab页切换等
     */

	templateString: "<div wairole='tablist' dojoAttachEvent='onkeypress:onkeypress' dojoAttachPoint='containerNode'></div>",

	//tab标签的位置
	//	{"top"|"bottom"|"left-h"|"right-h"}	
	tabPosition: "top",
	
	buttonWidget: "unieapx.layout._NavigatorButton",
	//控制Tab页是否鼠标移动其上，能够自动切换到相应的页
	autoSwitchTab: "false",
	
	//关联的TabContainer
	container: null,
	
	_buttonNo: 0,
	
	postCreate: function(){
		dijit.setWaiRole(this.domNode, "tablist");
		
		if(this.tabPosition == 'left-h' || this.tabPosition == 'right-h') {
			this.domNode.style.height="99999px"
		} else {
			this.domNode.style.width="99999px"
		}

		this.pane2button = {};		// mapping from panes to buttons

		this._subscriptions=[
			dojo.subscribe(this.container.id+"-startup", this, "onStartup"),
			dojo.subscribe(this.container.id+"-addChild", this, "onAddChild"),
			dojo.subscribe(this.container.id+"-removeChild", this, "onRemoveChild"),
			dojo.subscribe(this.container.id+"-selectChild", this, "onSelectChild"),
			dojo.subscribe(this.container.id+"-hideTabButton", this, "hideTabButton"),
			dojo.subscribe(this.container.id+"-showTabButton", this, "showTabButton"),
			dojo.subscribe(this.container.id+"-disableTabButton",this,"disableTabButton"),
			dojo.subscribe(this.container.id+"-enableTabButton",this,"enableTabButton"),
			dojo.subscribe(this.container.id+"-setTabButtonState",this,"setTabButtonState")
		];
	},
	/*
	 * container的addChild方法发布-addChild事件
	 * TabController订阅事件后执行该方法：创建对应的TabButton,绑定相应的事件
	 */
	onAddChild: function(/*Widget*/ page, /*Integer?*/ insertIndex){
		// summary:
		//		Called whenever a page is added to the container.
		//		Create button corresponding to the page.
		// tags:
		//		private

		// add a node that will be promoted to the button widget
		var refNode = dojo.doc.createElement("span");
		this.domNode.appendChild(refNode);
		// create an instance of the button widget
		var cls = dojo.getObject(this.buttonWidget);
		var button = new cls({_buttonNo:this._buttonNo,tablist: this, page:page, autoSwitchTab: this.autoSwitchTab}, refNode);
		this.addChild(button, "last");
		this.pane2button[page] = button;
		this._buttonNo++;
		page.controlButton = button;	// this value might be overwritten if two tabs point to same container

		if(!this._currentChild){ // put the first child into the tab order
			this._currentChild = page;
		}
		//make sure all tabs have the same length
		if(!this.isLeftToRight() && dojo.isIE && this._rectifyRtlTabList){
			this._rectifyRtlTabList();
		}
	},

	_rectifyRtlTabList: function(){
		//summary: Rectify the width of all tabs in rtl, otherwise the tab widths are different in IE
		if(0 >= this.tabPosition.indexOf('-h')){ return; }
		if(!this.pane2button){ return; }

		var maxWidth = 0;
		for(var pane in this.pane2button){
			var ow = this.pane2button[pane].innerDiv.scrollWidth;
			maxWidth = Math.max(maxWidth, ow);
		}
		//unify the length of all the tabs
		for(pane in this.pane2button){
			this.pane2button[pane].innerDiv.style.width = maxWidth + 'px';
		}	
	}, 
	/*
	 * container.startup方法发布-startup事件
	 * TabController订阅事件后执行该方法 
	 * info {children:孩子节点数组，seleted:选中某节点}
	 */
	onStartup: function(/*Object*/ info){
		dojo.forEach(info.children, this.onAddChild, this);
		this.onSelectChild(info.selected);
	},
	
	/*
	 * container.removeChild方法发布-removeChild事件
	 * TabController订阅事件后执行该方法：移除container对应的TabButton
	 */
	onRemoveChild: function(/*Widget*/ page){
		if(this._currentChild === page){ this._currentChild = null; }
		
		var button = this.pane2button[page];
		if(button){
			button.destroy();
			delete this.pane2button[page];
		}
	},
	
	/*
	 * container.selectChild(page)发布-selectChild事件，
	 * TabController订阅事件后执行该方法,处理TabButton的选中状态
	 */
	onSelectChild: function(/*Widget*/ page){
		if(!page){ return; }
		
		if(this._currentChild){
			//原TabButton取消选中状态
			var oldButton=this.pane2button[this._currentChild];
			
			oldButton.setSeleted(false);
		}
		//设置TabButton选中状态
		var newButton=this.pane2button[page];
		newButton.setSeleted(true);
		this._currentChild = page;
		dijit.setWaiState(this.container.containerNode, "labelledby", newButton.id);
		this._handleFocus(newButton);
	},
	//隐藏TabButton
	hideTabButton: function(page) {
		var button = this.pane2button[page];
		button.hide();
	},
	
	//显示TabButton
	showTabButton: function(page) {
		var button = this.pane2button[page];
		button.show();
	},
	
	//设置tab页Button不可编辑，标识本页不是当前页
	disableTabButton: function(page){
		var button = this.pane2button[page];
		button.disabled();
	},
	
	//设置tab页Button能够编辑，标识本页是当前页
	enableTabButton: function(page){
		var button = this.pane2button[page];
		button.enabled();
	},
	
	//设置tab页Button是否能够编辑
	setTabButtonState:function(page,state){
		var button = this.pane2button[page];
		button.setButtonState(state);
	},
	/*
	 * 处理焦点
	 */
	_handleFocus: function(button) {
		unieap.blurWidget();
	},
	
	//选中page
	onButtonClick: function(/*Widget*/ page){
		var flag = unieap.fireEvent(this, this.onBeforeSelectTab, [page]);
		if(false == flag){
			return;
		}
		this.container.selectChild(page); 
	},
	
	//关闭page
	onCloseButtonClick: function(/*Widget*/ page){
		this.container.closeChild(page);
//		var b = this.pane2button[this._currentChild];
//		if(b){
//			dijit.focus(b.focusNode || b.domNode);
//		}
	},
	
	// TODO: this is a bit redundant with forward, back api in StackContainer
	adjacent: function(/*Boolean*/ forward){
		// summary:
		//		Helper for onkeypress to find next/previous button
		// tags:
		//		private

		if(!this.isLeftToRight() && (!this.tabPosition || /top|bottom/.test(this.tabPosition))){ forward = !forward; }
		// find currently focused button in children array
		var children = this.getChildren();
		var current = dojo.indexOf(children, this.pane2button[this._currentChild]);
		// pick next button to focus on
		var offset = forward ? 1 : children.length - 1;
		return children[ (current + offset) % children.length ]; // dijit._Widget
	},

	onkeypress: function(/*Event*/ e){
		// summary:
		//		Handle keystrokes on the page list, for advancing to next/previous button
		//		and closing the current page if the page is closable.
		// tags:
		//		private
		if(this.disabled || e.altKey ){ return; }
		var forward = null;
		if(e.ctrlKey || !e._djpage){
			var k = dojo.keys;
			switch(e.charOrCode){
				case k.LEFT_ARROW:
				case k.UP_ARROW:
					if(!e._djpage){ forward = false; }
					break;
				case k.PAGE_UP:
					if(e.ctrlKey){ forward = false; }
					break;
				case k.RIGHT_ARROW:
				case k.DOWN_ARROW:
					if(!e._djpage){ forward = true; }
					break;
				case k.PAGE_DOWN:
					if(e.ctrlKey){ forward = true; }
					break;
				case k.DELETE:
					if(this._currentChild.closable){
						this.onCloseButtonClick(this._currentChild);
					}
					dojo.stopEvent(e);
					break;
				default:
					if(e.ctrlKey){
						if(e.charOrCode === k.TAB){
							this.adjacent(!e.shiftKey).onClick();
							dojo.stopEvent(e);
						}else if(e.charOrCode == "w"){
							if(this._currentChild.closable){
								this.onCloseButtonClick(this._currentChild);
							}
							dojo.stopEvent(e); // avoid browser tab closing.
						}
					}
			}
			// handle page navigation
			if(forward !== null){
				this.adjacent(forward).onClick();
				dojo.stopEvent(e);
			}
		}
	},
	
	destroy: function(){
		for(var pane in this.pane2button){
			this.onRemoveChild(pane);
		}
		dojo.forEach(this._subscriptions, dojo.unsubscribe);
		this.inherited(arguments);
	}

//	onContainerKeyPress: function(/*Object*/ info){
//		info.e._djpage = info.page;
//		this.onkeypress(info.e);
//	},
});

/*
 * TabButton实现类
 */
dojo.declare("unieapx.layout._NavigatorButton",[dijit._Widget, dijit._Templated],{

	baseClass: "navigator",
	
	tabPosition:"top",
	
	//TabButton关联的container
	container: null,
	
	//标记tab页当前的选中状态
	selected: false,

	//标记tab页是否可关闭，对应CSS样式：tab页按钮上会有'X'
	closable: false,
	
	_buttonNo: null,
	
	templateString: 
					"<a href='javascript:void(0);' tabindex='-1' class='tab u-a-navigator navigator' dojoAttachPoint='focusNode' dojoAttachEvent='onclick:onButtonClick'>"+
						"<div  class='navigatorInnerDiv' dojoAttachPoint='innerDiv'>"+
							"<div class='fa fa-angle-right arrowsImage' dojoAttachPoint='arrowsDiv'></div>"+
							"<span dojoAttachPoint='containerNode' class='tabLabel'></span>"+
							"<span dojoAttachPoint='closeNode' "+
								"dojoAttachEvent='onclick: onClickCloseButton'>"+
							"</span>"+
						"</div>"+
					"</a>",
								
	tabIndex: "-1",

	postCreate: function(){
		if(0 == this._buttonNo) this.arrowsDiv.style.display = "none";
		this.label = this.page.title;
		this.tabPosition = this.tablist.tabPosition;
		this.closable = this.page.closable;
		var aLabelClass = 'u-a-navigator'+this.tabPosition.charAt(0).toUpperCase() + this.tabPosition.substr(1).replace(/-.*/, "");
		dojo.addClass(this.domNode,aLabelClass);
		
		if(this.closable){
			dojo.addClass(this.innerDiv, "unieapClosable");
			dojo.attr(this.closeNode,"title", RIA_I18N.layout.tabController.close);
		}else{
			this.closeNode.style.display="none";
		}
		
		this.inherited(arguments); 

		if(this.label){
			//存在-h需要字体纵向显示
			if(-1 != this.tabPosition.indexOf('-h')&&!dojo.isIE){
				//this.containerNode.innerHTML="<marquee scrollAmount='2'>"+this.label+"</marquee>";
				var labelArray = this.label.split("");
				var e;
				for(var i=0; i<labelArray.length; i++) {
					e = dojo.create('div',null,this.containerNode);
					e.textContent = labelArray[i];
				}
			}else{
				if(dojo.isIE) {
					this.containerNode.innerText = this.label;
				} else {
					this.containerNode.textContent = this.label;
				}
			}
		}
		dojo.setSelectable(this.containerNode, false);
		if(this.autoSwitchTab){
			this._handleSwitch = this.connect(this.focusNode, "mouseover", this.onMouseOver);
		}
	},
	
	setTitle: function(title){
		if(!title) return;
		if(dojo.isIE) {
			this.containerNode.innerText = title;
		} else {
			this.containerNode.textContent = title;
		}
	},
	
	onMouseOver : function(evt){
		this.onButtonClick(evt);
	},
	
	/*
	 * 设置TabButon选中
	 */
	setSeleted: function(/*Boolean*/ bool){
		this.selected = bool;
		var cls=this.baseClass+"Checked";
//		var cls="";
		//设置选中样式
		if(bool) {
			dojo.addClass(this.domNode,cls);
			//ie6下不显示Tab按钮边框
//			dojo.isIE==6&&dojo.style(this.domNode,"height",dojo.style(this.domNode,"height")+2);
		}else {
//			if(dojo.isIE==6&&dojo.hasClass(this.domNode,cls)){
//				dojo.style(this.domNode,"height",dojo.style(this.domNode,"height")-2);
//				dojo.style(this.domNode,'backgroundColor','white')
//			}
			dojo.removeClass(this.domNode,cls);
		}	
	},

	/*
	 * 在TabController onAddChild方法里把onClick方法绑定了onButtonClick
	 */
	onButtonClick: function(/*Event*/ evt){
		if(dojo.attr(this.domNode,'disabled') == 'disabled'){    
	        return false;//阻止点击事件  
	    }     
//		if(dojo.isIE&&this.domNode.setActive){
//			try{
//				this.domNode.setActive();
//			}catch(e){
//				
//			}
//		}
		//调用 TabController 方法里的
		this.tablist.onButtonClick(this.page);
	},
	//当closable=true时，点击'X'触发该方法，方法不应该被覆盖，可以connect
	//Note that you shouldn't override this method, but you can connect to it.
	onClickCloseButton: function(/*Event*/ evt){
		//禁止事件传播
		evt.stopPropagation();
		if(this._handleSwitch){
			this.disconnect(this._handleSwitch);
		}
		this.tablist.onCloseButtonClick(this.page);
	},
	
	//tab页关闭前触发的事件，return true tab页关闭
	onClose: function(){
		return true;		// Boolean
	},
	
	getWidth:function(){
		var size=dojo.marginBox(this.domNode);
		if(dojo.isWebKit){
			//margin;
			return size.w+4;
		}
		return size.w;
	},
	
	getHeight : function(){
		var size=dojo.marginBox(this.domNode);
		return size.h;
	},
	
	hide: function() {
		dojo.style(this.domNode,'display','none');
	},
	
	show: function() {
		dojo.style(this.domNode,'display','inline-block');
	},
	disabled: function(){
		dojo.style(this.domNode,'color','gray');
		dojo.attr(this.domNode,'disabled',"disabled");
	},
	enabled: function(){
		dojo.style(this.domNode,'color','');
		dojo.removeAttr(this.domNode,'disabled');
	},
	setButtonState: function(state){
		if(state){
			dojo.style(this.domNode,'color','');
			dojo.removeAttr(this.domNode,'disabled');
			
		}else{
			dojo.style(this.domNode,'color','gray');
			dojo.attr(this.domNode,'disabled',"disabled");
		}
	}
});
dojo.provide("unieapx.layout.NavigatorPane");
dojo.require("unieap.layout.Container");
dojo.declare("unieapx.layout.NavigatorPane", [unieap.layout.Container], {
	/**
	 * @declaredClass:
	 * 		unieap.layout.ContentPane
	 * @superClass:
	 * 		unieap.layout.Container
	 * @summary:
	 * 		容器类
	 * @classDescription:
	 * 		在TabContainer或StackContainer中使用
	 * @example:
	 * |<div dojoType="unieap.layout.TabContainer" style="width:400px;height:400px;">
	 * |	<div dojoType="unieap.layout.ContentPane" title="tab1">ContentPane,这是一个ContentPane!</div>
	 * |	<div dojoType="unieap.layout.ContentPane" title="tab二"></div>
	 * |	<div dojoType="unieap.layout.ContentPane" title="容器三"></div>
	 * |</div>
	 * 		包含三个ContentPane的TabContainer
	 * @img：
	 * 		images/layout/contentpane.png
	 */
	
	//配置属性接口
	UserInterfaces : dojo.mixin({
		href : "string",
		showLoading : "boolean",
		refreshOnShow : "boolean",
		selected : "boolean",
		closable : "boolean",
		hidden : "boolean",
		title : "string",
		onCompleteByClick : "boolean",
		onClose : "function",
		onShow : "function",
		onInit : "function",
		onHide : "function",
		enabled	: "boolean"
	},
	unieap.layout.Container.prototype.UserInterfaces),
	
	/**
	 * @summary:
	 * 		使用iframe的src路径
	 * @description：
	 * 		当配置href时，会将href链接的内容放入iframe中显示出来。
	 * @type：
	 * 		{string}		
	 */
	href: "",
	
	//用于记录本页面在返回时配置的onComplete信息
	_navigatorPaneSubscribe: null,

	//是否已经初始化内容
	_hasInit:false,
	
	//是否在TabContainer中
	_inTabContainer:false,
	
	/**
	 * @summary:
	 * 		是否显示登录进度条
	 * @type:
	 * 		{boolean}
	 * @default:
	 * 		false
	 */
	showLoading:false,
	
	/**
	 * @summary:
	 * 		页面显示时是否需要刷新页面
	 * @type:
	 * 		{boolean}
	 * @default：
	 * 		false
	 */
	refreshOnShow:false,
	
	
	/**
	 * @summary:
	 * 		是否默认选中
	 * @type：
	 * 		{boolean}
	 * @default：
	 * 		false
	 * @description：
	 * 		当所有的ContentPane都未设置selected时，选中第一个ContentPane。
	 * 		否则选中配置selected的ContentPane。
	 * 		当多个ContentPane都设置selected时，选中第一个配置selected的ContentPane。
	 */
	selected:false,
	
	/**
	 * @summary:
	 * 		设置Tab页在Tab容器中是否可关闭,不适合StackContainer
	 * @type：
	 * 		{boolean}
	 * @default：
	 * 		false
	 */
	closable:false,
	
	/**
	 * @summary:
	 * 		设置Tab页在Tab容器中是否隐藏
	 * @description:
	 * 		在StackContainer容器中无效
	 * @type：
	 * 		{boolean}
	 * @default：
	 * 		false
	 * @example:
	 * |<div dojoType="unieap.layout.TabContainer" style="width:400px;height:400px;">
	 * |	<div dojoType="unieap.layout.ContentPane" title="测试一"></div>
	 * |	<div dojoType="unieap.layout.ContentPane" title="测试二" hidden="true"></div>
	 * |</div>
	 */
    hidden:false,
	
	
	/**
	 * @summary:
	 * 		设置ContentPane在Tab容器中的显示标签
	 * @type:
	 * 		{string}
	 * @example:
	 * |<div dojoType="unieap.layout.TabContainer" style="width:400px;height:400px;">
	 * |	<div dojoType="unieap.layout.ContentPane" title="测试一"></div>
	 * |	<div dojoType="unieap.layout.ContentPane" title="测试二" hidden="true"></div>
	 * |</div>
	 */
	title:'',
	
	currentTitle: "",
	onCompleteByClick:false,
    
	/*
	 * @summary:
	 * 		装载页面内容的提示语
	 * @type：
	 * 		{string}
	 * @default:
	 * 		"正在装入..."
	 */
	loadingMessage: RIA_I18N.layout.contentPane.loading,
	
	/**
	 * @summary:
	 * 		设置Tab页在Tab容器中是否可编辑
	 * @type:
	 * 		{boolean}
	 * @default:
	 * 		true
	 */
	enabled:true,
	
	
	data: null,
	
	setData: function(data){
		this.data = data;
	},

	getData: function(data){
		return this.data;
	},


	setOnCompleteByClick: function(onCompleteByClick){
		this.onCompleteByClick =onCompleteByClick;
	},
	getOnCompleteByClick: function(){
		return this.onCompleteByClick;
	},
	
	 checkTime : function(i, j)
	{
	   if(j){
	     i = '0000' + i;
	     return i.substr(i.length - 4);
	   }
	   if (i < 10)
	   {
	      i = "0" + i;
	   }
	   return i;
	},
	postCreate : function(){
		this.inherited(arguments);
		this.navigatorSubscribe = [];
		this.origValue = this.data;
		var data = this.data;
		if(data && data.declaredClass === "unieap.ds.DataCenter"){
			this.origparameters = {};
			for(var a in data.parameters){
				this.origparameters[a] = data.parameters[a];
			}
		}
		var time = new Date();
		beginTime = time.getTime();
//		console.log("开始请求“"+ this.title +"”["+unieap.userAccount+" "+ this.checkTime(time.getHours())+":"+this.checkTime(time.getMinutes())+":"+this.checkTime(time.getSeconds())+":"+this.checkTime(time.getMilliseconds(), 1)+"]"+"..."); // MODIFY BY TENGYF
		console.log(RIA_UNIEAPX_I18N.layout.beginRequest + "“"+ this.title +"”["+unieap.userAccount+" "+ this.checkTime(time.getHours())+":"+this.checkTime(time.getMinutes())+":"+this.checkTime(time.getSeconds())+":"+this.checkTime(time.getMilliseconds(), 1)+"]"+"...");
	},
	
//	cloneDC: function(dc){
//		var newDC = new unieap.ds.DataCenter;
//		newDC.parameters = dc.parameters;
////		dojo.forEach(dc.getDataStores(), function(store){
////			newDC.addDataStore(store.getName(),store);
////		});
//		var stores = dc.getDataStores();
//		for(store in stores){
//			var name = stores[store].getName();
//			newDC.addDataStore(name,stores[store].clone(name));
//		}
//		return newDC;
//	},
	
	startup: function(){
	   this.inherited(arguments);
	   if(this._started){ return; }
	   //判断父容器类型，如果在tabcontainer中不执行onShow操作
	   var parent = this.getParentContainer();
	   if(!parent || parent.declaredClass != "unieapx.layout.NavigatorContainer"){
	   	 this._onShow();
	   }
	   
		dojo.attr(this.domNode,'title','');
    },
	
	/**
	 * @summary:
	 * 		重新设置容器的显示内容，将会把原有内容清空。
	 * @param 
	 * 		{String|DomNode|Nodelist} data
	 * @example:
	 * |var content = "<div dojoType='unieap.form.Button' label='取消'></div>";
	 * |unieap.byId("container").setContent(content);
	 */
    setContent:function(data){
    	this.href = "";
		this._setContent(data || "");
		this._createSubWidgets();
		unieap.fireContainerResize(this.domNode);
    },
    
	_setContent: function(cont){
		this.destroyDescendants();
		var node = this.containerNode || this.domNode;
		try{
			while(node.firstChild){
				dojo._destroyElement(node.firstChild);
			}
			if(typeof cont == "string"){
				node.innerHTML = cont;
			}else{
				if(cont.nodeType){
					node.appendChild(cont);
				}else{
					dojo.forEach(cont, function(n){
						node.appendChild(n.cloneNode(true));
					});
				}
			}
		}catch(e){
			
		}
	},
	
	_createSubWidgets: function(){
		var rootNode = this.containerNode || this.domNode;
		try{
			dojo.parser.parse(rootNode, true);
		}catch(e){
			
		}
	},
    
//	resizeContainer : function(size){
//		dojo.marginBox(this.domNode, size);
//		var node = this.containerNode||this.domNode,
//			mb = dojo.mixin(dojo.marginBox(node), size||{});
//		var cb = (this._contentBox = dijit.layout.marginBox2contentBox(node, mb));
//		this.resizeChildrenContainer();
//	},
	
	/**
	 * @summary:
	 * 		设置容器的链接地址
	 * @param 
	 * 		{string} href
	 * @example:
	 * |unieap.byId("container").setHref("http://www.google.com");
	 */
	setHref: function(/*String|Uri*/ href){
		this._if = null;
		this.href=href;
		this.refresh();
	},
	
	_createForm:function(params){
		dojo.byId(this.id+"_form")&&dojo.destroy(this.id+"_form");
		var form = dojo.create("form",{
			name : this.id+"_form",
		    method : "post",
		    target:this.id+"_frame" //将返回的页面显示iframe中
		},dojo.body());
		
		for(var key in params){
			var input=dojo.create('input',{
				type:'hidden',
				value:this._formatParams(params[key]),
				name:key
			},form);
		}
		form.action=this.href;

		return form;
	},
	
	_formatParams:function(param){
		if(param&&(param.declaredClass=='unieap.ds.DataCenter'||param.declaredClass=='unieap.ds.DataStore')){
			return param.toJson();
		}else if(dojo.isObject(param)){
			return dojo.toJson(param);
		}
		return param;
	},
	
	/**
	 * @summary:
	 * 		刷新ContentPane中iframe的src
	 * @example:
	 * |unieap.byId("contentPane").refresh();
	 */
	refresh:function(params){
		if(this.href){
			this.onDownloadStart();
			if(dojo.isObject(params)){
				var form=this._createForm(params);
				form.submit();
			}else{
				if(dojo.isIE){
					this._if.src="javascript:false;";
					this._if.src=this.href;
				}else{
					//在火狐下若主页面尚未加载完成，不添加延时的话，子页面的addOnload不会执行
					var self = this;
				    setTimeout(function(){
					  self._if.src=self.href;
				    },1000);
				}
			}
		}
	},
	
	/**
	 * @summary:
	 * 		在Tab容器中,点击关闭按钮的回调方法
	 * @description:
	 * 		当返回false时,不关闭Tab页。
	 * 		当返回true时,关闭Tab页。
	 * 		默认返回true。
	 * 		不适合StackContainer
	 * @return:
	 * 		{boolean}
	 * @example:
	 * |<div dojoType="unieap.layout.TabContainer" style="width:400px;height:400px;">
	 * |	<div dojoType="unieap.layout.ContentPane" title="测试一" onClose="testOnClose" closable="true"></div>
	 * |	<div dojoType="unieap.layout.ContentPane" title="测试二"></div>
	 * |</div>
	 * |<script>
	 * |	function testOnClose(pane){
	 * |		//自定义逻辑判断
	 * |	}
	 * |</script>
	 *      
	 */
	onClose:function(){
		return true;
	},

	/**
	 * @summary:
	 * 		当内容显示时触发的事件，每次显示的时候均会触发
	 * @param: 
	 * 		{unieap.layout.ContentPane} pane
	 * @example:
	 * |<div dojoType="unieap.layout.TabContainer" style="width:400px;height:400px;">
	 * |	<div dojoType="unieap.layout.ContentPane" title="测试一" onShow="testOnShow"></div>
	 * |	<div dojoType="unieap.layout.ContentPane" title="测试二"></div>
	 * |</div>
	 * |<script>
	 * |	function testOnShow(pane){
	 * |		alert("showing");
	 * |	}
	 * |</script>
	 */
	onShow:function(pane){
		
	},
	
	/**
	 * @summary:
	 * 		当内容初始化时触发的事件，仅在初始化的时候执行一次
	 * @param: 
	 * 		{unieap.layout.ContentPane} pane
	 * @example:
	 * |<div dojoType="unieap.layout.TabContainer" style="width:400px;height:400px;">
	 * |	<div dojoType="unieap.layout.ContentPane" title="测试一" onInit="testOnInit"></div>
	 * |	<div dojoType="unieap.layout.ContentPane" title="测试二"></div>
	 * |</div>
	 * |<script>
	 * |	function testOnInit(pane){
	 * |		alert("init the pane");
	 * |	}
	 * |</script>
	 */
	onInit:function(pane){
		
	},
	
	/**
	 * @summary:
	 * 		当页面内容被隐藏时触发的事件
	 * @description:
	 * 		在tabContainer或stackContainer中打开多个页面时，在切换页面时，会回调此方法
	 * @example:
	 * |<div dojoType="unieap.layout.TabContainer" style="width:400px;height:400px;">
	 * |	<div dojoType="unieap.layout.ContentPane" title="测试一" onHide="testOnHide"></div>
	 * |	<div dojoType="unieap.layout.ContentPane" title="测试二"></div>
	 * |</div>
	 * |<script>
	 * |	function testOnHide(pane){
	 * |		alert("hide the pane");
	 * |	}
	 * |</script>
	 */
	onHide:function(){
		
	},
	
	_onComplete : function(dc){
		
	},
	
	_onShow: function(params){
			
		if(this.postponeRender){
			this.postponeRender = false;
			dojo.parser.parse(this.containerNode);
		}
        if (this.refreshOnShow||!this._hasInit) {
			//refreshOnShow为true或第一次载入 时刷新pane
           // this.refresh(params);
        }
		!this._hasInit&&(this._hasInit=true)&&this._onInit();	

		unieap.fireEvent(this,this.onShow,[this]);
	
    },
	
	_onInit:function(){
		this.resizeContainer();
		unieap.fireEvent(this,this.onInit,[this]);
	},
	
	//创建一个iframe，用于加载设置了href属性的页面
	_createIframe:function(){
		var iframe=null;
		//创建一个带name属性的iframe,在ie下需要显示地设置name属性,不能动态修改
		//不然form的target属性无效
	 	if(dojo.isIE<9){
	 		iframe=dojo.create("<iframe class='u-contentpane-iframe' name='"+this.id+"_frame'></iframe>");
	 	}else{
	 		iframe=dojo.create('iframe',{name:this.id+'_frame','class':'u-contentpane-iframe'});
	 	}
		dojo.style(iframe,{width:0,border:0,height:0});
		dojo.place(iframe,this.containerNode||this.domNode);
		return iframe;
	},
		
	//刷新contentpane的的href前的动作
	onDownloadStart: function(){
		//FIXME:
		//    StackContainer嵌套ContentPane时,loading的效果好像有问题
		//	  
		if(this.showLoading){
			this._loadingNode&&dojo.destroy(this._loadingNode);
			this._loadingNode=dojo.create("div",{'class':'loading','innerHTML':this.loadingMessage},
					this.containerNode||this.domNode,'first');
		}
		if(!this._if){
			this._if=this._createIframe();
			this._if.frameBorder="no";
			var self = this;
			this._if.onreadystatechange = this._if.onload = function(evt){
				if (!this.readyState || 
					this.readyState == "loaded" || 
					this.readyState == "complete") {
					self.onDownloadEnd();
				}
			};
			this._if.onactivate = function(evt){
				dojo.stopEvent(evt);
			}
		}
	},
	
	//成功设置href后的动作
	onDownloadEnd: function(){
		this._loadingNode&&dojo.destroy(this._loadingNode);
		dojo.style(this._if,{
			height:"100%",
			width:"100%"
		});
		//firefox下iframe加载只显示一部分

		(dojo.isFF||dojo.isIE>=8)&&this.height=='auto'&&dojo.style(this.domNode,"height","100%");
	},
	destroy : function(){
		if(this._if){
			this._if.onreadystatechange = null;
			this._if.onload = null;
			this._if.onactivate = null;
		}
		this.origValue = this.data = null;
		this.inherited(arguments);
	},
	/**
	 * @summary:
	 * 		获取iframe的window对象
	 * @return:
	 * 		{object}
	 * @example:
	 * |var container = unieap.byId("container");
	 * |var win = container.getContentWindow();
	 * |alert(win);
	 */
	getContentWindow : function(){
		if(this._if){
			return this._if.contentWindow;
		}	
		return window;
	}
});

(global => {
  global['purehtml'] = {
    bootstrap: () => {
      console.log('purehtml bootstrap');
      return Promise.resolve();
    },
    mount: () => {
      console.log('purehtml mount');
      return render($);
    },
    unmount: () => {
      console.log('purehtml unmount');
      return Promise.resolve();
    },
  };
})(window);
